-- Automatically generated by HaskellDirect (ihc.exe), version 0.21
-- Created: 22:10 ope, Sunday 05 August, 2012
-- Command line: -fno-qualified-names -fno-imports -fno-export-lists -fout-pointers-are-not-refs -c Excel.idl -o Excel.hs

module Excel where

import System.Win32.Com.Automation 
import System.Win32.Com
import System.Win32.Com.HDirect.HDirect

libidExcel :: LIBID
libidExcel = mkLIBID "{00020813-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- interface Adjustments
-- 
-- --------------------------------------------------
data Adjustments_ a = Adjustments__ 
type Adjustments a = IMsoDispObj (Adjustments_ a)
iidAdjustments :: IID (Adjustments ())
iidAdjustments = mkIID "{000C0310-0000-0000-C000-000000000046}"

getParent :: Adjustments a0
          -> IO (IDispatch ())
getParent =
  propertyGet "Parent"
              []
              outIDispatch

getCount :: Adjustments a0
         -> IO Int32
getCount =
  propertyGet "Count"
              []
              outInt32

getItem :: Int32
        -> Adjustments a0
        -> IO Float
getItem index =
  propertyGet "Item"
              [inInt32 index]
              outFloat

setItem :: Int32
        -> Float
        -> Adjustments a0
        -> IO ()
setItem index val =
  propertySet "Item"
              [ inInt32 index
              , inFloat val
              ]

-- --------------------------------------------------
-- 
-- interface CalloutFormat
-- 
-- --------------------------------------------------
data CalloutFormat_ a = CalloutFormat__ 
type CalloutFormat a = IMsoDispObj (CalloutFormat_ a)
iidCalloutFormat :: IID (CalloutFormat ())
iidCalloutFormat = mkIID "{000C0311-0000-0000-C000-000000000046}"

getParent0 :: CalloutFormat a0
           -> IO (IDispatch ())
getParent0 =
  propertyGet "Parent"
              []
              outIDispatch

automaticLength :: CalloutFormat a0
                -> IO ()
automaticLength =
  method0 "AutomaticLength"
          []

customDrop :: Float
           -> CalloutFormat a0
           -> IO ()
customDrop drop =
  method0 "CustomDrop"
          [inFloat drop]

customLength :: Float
             -> CalloutFormat a0
             -> IO ()
customLength length =
  method0 "CustomLength"
          [inFloat length]

presetDrop :: MsoCalloutDropType
           -> CalloutFormat a0
           -> IO ()
presetDrop dropType iptr =
  do
    dropType <- marshallMsoCalloutDropType dropType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_presetDrop methPtr iptr dropType) 4 iptr

foreign import stdcall "prim_Excel_presetDrop" prim_Excel_presetDrop :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAccent :: CalloutFormat a0
          -> IO MsoTriState
getAccent iptr =
  do
    accent <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr accent) 5 iptr
    doThenFree free readMsoTriState accent

foreign import stdcall "dynamic" prim_Excel_getAccent :: Ptr () -> Ptr () -> Ptr MsoTriState -> IO Int32
setAccent :: MsoTriState
          -> CalloutFormat a0
          -> IO ()
setAccent accent iptr =
  do
    accent <- marshallMsoTriState accent
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setAccent methPtr iptr accent) 6 iptr

foreign import stdcall "prim_Excel_setAccent" prim_Excel_setAccent :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAngle :: CalloutFormat a0
         -> IO MsoCalloutAngleType
getAngle iptr =
  do
    angle <- allocBytes (fromIntegral sizeofMsoCalloutAngleType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAngle methPtr iptr angle) 7 iptr
    doThenFree free readMsoCalloutAngleType angle

foreign import stdcall "dynamic" prim_Excel_getAngle :: Ptr () -> Ptr () -> Ptr MsoCalloutAngleType -> IO Int32
setAngle :: MsoCalloutAngleType
         -> CalloutFormat a0
         -> IO ()
setAngle angle iptr =
  do
    angle <- marshallMsoCalloutAngleType angle
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setAngle methPtr iptr angle) 8 iptr

foreign import stdcall "prim_Excel_setAngle" prim_Excel_setAngle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAutoAttach :: CalloutFormat a0
              -> IO MsoTriState
getAutoAttach iptr =
  do
    autoAttach <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr autoAttach) 9 iptr
    doThenFree free readMsoTriState autoAttach

setAutoAttach :: MsoTriState
              -> CalloutFormat a0
              -> IO ()
setAutoAttach autoAttach iptr =
  do
    autoAttach <- marshallMsoTriState autoAttach
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setAutoAttach methPtr iptr autoAttach) 10 iptr

foreign import stdcall "prim_Excel_setAutoAttach" prim_Excel_setAutoAttach :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAutoLength :: CalloutFormat a0
              -> IO MsoTriState
getAutoLength iptr =
  do
    autoLength <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr autoLength) 11 iptr
    doThenFree free readMsoTriState autoLength

getBorder :: CalloutFormat a0
          -> IO MsoTriState
getBorder iptr =
  do
    border <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr border) 12 iptr
    doThenFree free readMsoTriState border

setBorder :: MsoTriState
          -> CalloutFormat a0
          -> IO ()
setBorder border iptr =
  do
    border <- marshallMsoTriState border
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setBorder methPtr iptr border) 13 iptr

foreign import stdcall "prim_Excel_setBorder" prim_Excel_setBorder :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getDrop :: CalloutFormat a0
        -> IO Float
getDrop =
  propertyGet "Drop"
              []
              outFloat

getDropType :: CalloutFormat a0
            -> IO MsoCalloutDropType
getDropType iptr =
  do
    dropType <- allocBytes (fromIntegral sizeofMsoCalloutDropType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getDropType methPtr iptr dropType) 15 iptr
    doThenFree free readMsoCalloutDropType dropType

foreign import stdcall "dynamic" prim_Excel_getDropType :: Ptr () -> Ptr () -> Ptr MsoCalloutDropType -> IO Int32
getGap :: CalloutFormat a0
       -> IO Float
getGap =
  propertyGet "Gap"
              []
              outFloat

setGap :: Float
       -> CalloutFormat a0
       -> IO ()
setGap gap =
  propertySet "Gap"
              [inFloat gap]

getLength :: CalloutFormat a0
          -> IO Float
getLength =
  propertyGet "Length"
              []
              outFloat

getType :: CalloutFormat a0
        -> IO MsoCalloutType
getType iptr =
  do
    type0 <- allocBytes (fromIntegral sizeofMsoCalloutType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getType methPtr iptr type0) 19 iptr
    doThenFree free readMsoCalloutType type0

foreign import stdcall "dynamic" prim_Excel_getType :: Ptr () -> Ptr () -> Ptr MsoCalloutType -> IO Int32
setType :: MsoCalloutType
        -> CalloutFormat a0
        -> IO ()
setType type0 iptr =
  do
    type0 <- marshallMsoCalloutType type0
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setType methPtr iptr type0) 20 iptr

foreign import stdcall "prim_Excel_setType" prim_Excel_setType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface ColorFormat
-- 
-- --------------------------------------------------
data ColorFormat_ a = ColorFormat__ 
type ColorFormat a = IMsoDispObj (ColorFormat_ a)
iidColorFormat :: IID (ColorFormat ())
iidColorFormat = mkIID "{000C0312-0000-0000-C000-000000000046}"

getParent1 :: ColorFormat a0
           -> IO (IDispatch ())
getParent1 =
  propertyGet "Parent"
              []
              outIDispatch

getRGB :: ColorFormat a0
       -> IO MsoRGBType
getRGB iptr =
  do
    rGB <- allocBytes (fromIntegral sizeofMsoRGBType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getRGB methPtr iptr rGB) 1 iptr
    doThenFree free readMsoRGBType rGB

foreign import stdcall "dynamic" prim_Excel_getRGB :: Ptr () -> Ptr () -> Ptr MsoRGBType -> IO Int32
setRGB :: MsoRGBType
       -> ColorFormat a0
       -> IO ()
setRGB rGB iptr =
  do
    rGB <- marshallMsoRGBType rGB
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setRGB methPtr iptr rGB) 2 iptr

foreign import stdcall "prim_Excel_setRGB" prim_Excel_setRGB :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getSchemeColor :: ColorFormat a0
               -> IO Int32
getSchemeColor =
  propertyGet "SchemeColor"
              []
              outInt32

setSchemeColor :: Int32
               -> ColorFormat a0
               -> IO ()
setSchemeColor schemeColor =
  propertySet "SchemeColor"
              [inInt32 schemeColor]

getType0 :: ColorFormat a0
         -> IO MsoColorType
getType0 iptr =
  do
    type0 <- allocBytes (fromIntegral sizeofMsoColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getType0 methPtr iptr type0) 5 iptr
    doThenFree free readMsoColorType type0

foreign import stdcall "dynamic" prim_Excel_getType0 :: Ptr () -> Ptr () -> Ptr MsoColorType -> IO Int32
getTintAndShade :: ColorFormat a0
                -> IO Float
getTintAndShade =
  propertyGet "TintAndShade"
              []
              outFloat

setTintAndShade :: Float
                -> ColorFormat a0
                -> IO ()
setTintAndShade pValue =
  propertySet "TintAndShade"
              [inFloat pValue]

getObjectThemeColor :: ColorFormat a0
                    -> IO MsoThemeColorIndex
getObjectThemeColor iptr =
  do
    objectThemeColor <- allocBytes (fromIntegral sizeofMsoThemeColorIndex)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getObjectThemeColor methPtr iptr objectThemeColor) 8 iptr
    doThenFree free readMsoThemeColorIndex objectThemeColor

foreign import stdcall "dynamic" prim_Excel_getObjectThemeColor :: Ptr () -> Ptr () -> Ptr MsoThemeColorIndex -> IO Int32
setObjectThemeColor :: MsoThemeColorIndex
                    -> ColorFormat a0
                    -> IO ()
setObjectThemeColor objectThemeColor iptr =
  do
    objectThemeColor <- marshallMsoThemeColorIndex objectThemeColor
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setObjectThemeColor methPtr iptr objectThemeColor) 9 iptr

foreign import stdcall "prim_Excel_setObjectThemeColor" prim_Excel_setObjectThemeColor :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface LineFormat
-- 
-- --------------------------------------------------
data LineFormat_ a = LineFormat__ 
type LineFormat a = IMsoDispObj (LineFormat_ a)
iidLineFormat :: IID (LineFormat ())
iidLineFormat = mkIID "{000C0317-0000-0000-C000-000000000046}"

getParent2 :: LineFormat a0
           -> IO (IDispatch ())
getParent2 =
  propertyGet "Parent"
              []
              outIDispatch

getBackColor :: LineFormat a0
             -> IO (ColorFormat ())
getBackColor =
  propertyGet "BackColor"
              []
              outIUnknown

setBackColor :: ColorFormat a1
             -> LineFormat a0
             -> IO ()
setBackColor backColor =
  propertySet "BackColor"
              [inIUnknown backColor]

getBeginArrowheadLength :: LineFormat a0
                        -> IO MsoArrowheadLength
getBeginArrowheadLength iptr =
  do
    beginArrowheadLength <- allocBytes (fromIntegral sizeofMsoArrowheadLength)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBeginArrowheadLength methPtr iptr beginArrowheadLength) 3 iptr
    doThenFree free readMsoArrowheadLength beginArrowheadLength

foreign import stdcall "dynamic" prim_Excel_getBeginArrowheadLength :: Ptr () -> Ptr () -> Ptr MsoArrowheadLength -> IO Int32
setBeginArrowheadLength :: MsoArrowheadLength
                        -> LineFormat a0
                        -> IO ()
setBeginArrowheadLength beginArrowheadLength iptr =
  do
    beginArrowheadLength <- marshallMsoArrowheadLength beginArrowheadLength
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setBeginArrowheadLength methPtr iptr beginArrowheadLength) 4 iptr

foreign import stdcall "prim_Excel_setBeginArrowheadLength" prim_Excel_setBeginArrowheadLength :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBeginArrowheadStyle :: LineFormat a0
                       -> IO MsoArrowheadStyle
getBeginArrowheadStyle iptr =
  do
    beginArrowheadStyle <- allocBytes (fromIntegral sizeofMsoArrowheadStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBeginArrowheadStyle methPtr iptr beginArrowheadStyle) 5 iptr
    doThenFree free readMsoArrowheadStyle beginArrowheadStyle

foreign import stdcall "dynamic" prim_Excel_getBeginArrowheadStyle :: Ptr () -> Ptr () -> Ptr MsoArrowheadStyle -> IO Int32
setBeginArrowheadStyle :: MsoArrowheadStyle
                       -> LineFormat a0
                       -> IO ()
setBeginArrowheadStyle beginArrowheadStyle iptr =
  do
    beginArrowheadStyle <- marshallMsoArrowheadStyle beginArrowheadStyle
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setBeginArrowheadStyle methPtr iptr beginArrowheadStyle) 6 iptr

foreign import stdcall "prim_Excel_setBeginArrowheadStyle" prim_Excel_setBeginArrowheadStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBeginArrowheadWidth :: LineFormat a0
                       -> IO MsoArrowheadWidth
getBeginArrowheadWidth iptr =
  do
    beginArrowheadWidth <- allocBytes (fromIntegral sizeofMsoArrowheadWidth)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBeginArrowheadWidth methPtr iptr beginArrowheadWidth) 7 iptr
    doThenFree free readMsoArrowheadWidth beginArrowheadWidth

foreign import stdcall "dynamic" prim_Excel_getBeginArrowheadWidth :: Ptr () -> Ptr () -> Ptr MsoArrowheadWidth -> IO Int32
setBeginArrowheadWidth :: MsoArrowheadWidth
                       -> LineFormat a0
                       -> IO ()
setBeginArrowheadWidth beginArrowheadWidth iptr =
  do
    beginArrowheadWidth <- marshallMsoArrowheadWidth beginArrowheadWidth
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setBeginArrowheadWidth methPtr iptr beginArrowheadWidth) 8 iptr

foreign import stdcall "prim_Excel_setBeginArrowheadWidth" prim_Excel_setBeginArrowheadWidth :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getDashStyle :: LineFormat a0
             -> IO MsoLineDashStyle
getDashStyle iptr =
  do
    dashStyle <- allocBytes (fromIntegral sizeofMsoLineDashStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getDashStyle methPtr iptr dashStyle) 9 iptr
    doThenFree free readMsoLineDashStyle dashStyle

foreign import stdcall "dynamic" prim_Excel_getDashStyle :: Ptr () -> Ptr () -> Ptr MsoLineDashStyle -> IO Int32
setDashStyle :: MsoLineDashStyle
             -> LineFormat a0
             -> IO ()
setDashStyle dashStyle iptr =
  do
    dashStyle <- marshallMsoLineDashStyle dashStyle
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setDashStyle methPtr iptr dashStyle) 10 iptr

foreign import stdcall "prim_Excel_setDashStyle" prim_Excel_setDashStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getEndArrowheadLength :: LineFormat a0
                      -> IO MsoArrowheadLength
getEndArrowheadLength iptr =
  do
    endArrowheadLength <- allocBytes (fromIntegral sizeofMsoArrowheadLength)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBeginArrowheadLength methPtr iptr endArrowheadLength) 11 iptr
    doThenFree free readMsoArrowheadLength endArrowheadLength

setEndArrowheadLength :: MsoArrowheadLength
                      -> LineFormat a0
                      -> IO ()
setEndArrowheadLength endArrowheadLength iptr =
  do
    endArrowheadLength <- marshallMsoArrowheadLength endArrowheadLength
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setEndArrowheadLength methPtr iptr endArrowheadLength) 12 iptr

foreign import stdcall "prim_Excel_setEndArrowheadLength" prim_Excel_setEndArrowheadLength :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getEndArrowheadStyle :: LineFormat a0
                     -> IO MsoArrowheadStyle
getEndArrowheadStyle iptr =
  do
    endArrowheadStyle <- allocBytes (fromIntegral sizeofMsoArrowheadStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBeginArrowheadStyle methPtr iptr endArrowheadStyle) 13 iptr
    doThenFree free readMsoArrowheadStyle endArrowheadStyle

setEndArrowheadStyle :: MsoArrowheadStyle
                     -> LineFormat a0
                     -> IO ()
setEndArrowheadStyle endArrowheadStyle iptr =
  do
    endArrowheadStyle <- marshallMsoArrowheadStyle endArrowheadStyle
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setEndArrowheadStyle methPtr iptr endArrowheadStyle) 14 iptr

foreign import stdcall "prim_Excel_setEndArrowheadStyle" prim_Excel_setEndArrowheadStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getEndArrowheadWidth :: LineFormat a0
                     -> IO MsoArrowheadWidth
getEndArrowheadWidth iptr =
  do
    endArrowheadWidth <- allocBytes (fromIntegral sizeofMsoArrowheadWidth)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBeginArrowheadWidth methPtr iptr endArrowheadWidth) 15 iptr
    doThenFree free readMsoArrowheadWidth endArrowheadWidth

setEndArrowheadWidth :: MsoArrowheadWidth
                     -> LineFormat a0
                     -> IO ()
setEndArrowheadWidth endArrowheadWidth iptr =
  do
    endArrowheadWidth <- marshallMsoArrowheadWidth endArrowheadWidth
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setEndArrowheadWidth methPtr iptr endArrowheadWidth) 16 iptr

foreign import stdcall "prim_Excel_setEndArrowheadWidth" prim_Excel_setEndArrowheadWidth :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getForeColor :: LineFormat a0
             -> IO (ColorFormat ())
getForeColor =
  propertyGet "ForeColor"
              []
              outIUnknown

setForeColor :: ColorFormat a1
             -> LineFormat a0
             -> IO ()
setForeColor foreColor =
  propertySet "ForeColor"
              [inIUnknown foreColor]

getPattern :: LineFormat a0
           -> IO MsoPatternType
getPattern iptr =
  do
    pattern <- allocBytes (fromIntegral sizeofMsoPatternType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPattern methPtr iptr pattern) 19 iptr
    doThenFree free readMsoPatternType pattern

foreign import stdcall "dynamic" prim_Excel_getPattern :: Ptr () -> Ptr () -> Ptr MsoPatternType -> IO Int32
setPattern :: MsoPatternType
           -> LineFormat a0
           -> IO ()
setPattern pattern iptr =
  do
    pattern <- marshallMsoPatternType pattern
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPattern methPtr iptr pattern) 20 iptr

foreign import stdcall "prim_Excel_setPattern" prim_Excel_setPattern :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getStyle :: LineFormat a0
         -> IO MsoLineStyle
getStyle iptr =
  do
    style <- allocBytes (fromIntegral sizeofMsoLineStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getStyle methPtr iptr style) 21 iptr
    doThenFree free readMsoLineStyle style

foreign import stdcall "dynamic" prim_Excel_getStyle :: Ptr () -> Ptr () -> Ptr MsoLineStyle -> IO Int32
setStyle :: MsoLineStyle
         -> LineFormat a0
         -> IO ()
setStyle style iptr =
  do
    style <- marshallMsoLineStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setStyle methPtr iptr style) 22 iptr

foreign import stdcall "prim_Excel_setStyle" prim_Excel_setStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTransparency :: LineFormat a0
                -> IO Float
getTransparency =
  propertyGet "Transparency"
              []
              outFloat

setTransparency :: Float
                -> LineFormat a0
                -> IO ()
setTransparency transparency =
  propertySet "Transparency"
              [inFloat transparency]

getVisible :: LineFormat a0
           -> IO MsoTriState
getVisible iptr =
  do
    visible <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr visible) 25 iptr
    doThenFree free readMsoTriState visible

setVisible :: MsoTriState
           -> LineFormat a0
           -> IO ()
setVisible visible iptr =
  do
    visible <- marshallMsoTriState visible
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setVisible methPtr iptr visible) 26 iptr

foreign import stdcall "prim_Excel_setVisible" prim_Excel_setVisible :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWeight :: LineFormat a0
          -> IO Float
getWeight =
  propertyGet "Weight"
              []
              outFloat

setWeight :: Float
          -> LineFormat a0
          -> IO ()
setWeight weight =
  propertySet "Weight"
              [inFloat weight]

-- --------------------------------------------------
-- 
-- interface ShapeNode
-- 
-- --------------------------------------------------
data ShapeNode_ a = ShapeNode__ 
type ShapeNode a = IMsoDispObj (ShapeNode_ a)
iidShapeNode :: IID (ShapeNode ())
iidShapeNode = mkIID "{000C0318-0000-0000-C000-000000000046}"

getParent3 :: ShapeNode a0
           -> IO (IDispatch ())
getParent3 =
  propertyGet "Parent"
              []
              outIDispatch

getEditingType :: ShapeNode a0
               -> IO MsoEditingType
getEditingType iptr =
  do
    editingType <- allocBytes (fromIntegral sizeofMsoEditingType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getEditingType methPtr iptr editingType) 1 iptr
    doThenFree free readMsoEditingType editingType

foreign import stdcall "dynamic" prim_Excel_getEditingType :: Ptr () -> Ptr () -> Ptr MsoEditingType -> IO Int32
getPoints :: (Variant a1)
          => ShapeNode a0
          -> IO a1
getPoints =
  propertyGet "Points"
              []
              outVariant

getSegmentType :: ShapeNode a0
               -> IO MsoSegmentType
getSegmentType iptr =
  do
    segmentType <- allocBytes (fromIntegral sizeofMsoSegmentType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getSegmentType methPtr iptr segmentType) 3 iptr
    doThenFree free readMsoSegmentType segmentType

foreign import stdcall "dynamic" prim_Excel_getSegmentType :: Ptr () -> Ptr () -> Ptr MsoSegmentType -> IO Int32
-- --------------------------------------------------
-- 
-- interface ShapeNodes
-- 
-- --------------------------------------------------
data ShapeNodes_ a = ShapeNodes__ 
type ShapeNodes a = IMsoDispObj (ShapeNodes_ a)
iidShapeNodes :: IID (ShapeNodes ())
iidShapeNodes = mkIID "{000C0319-0000-0000-C000-000000000046}"

getParent4 :: ShapeNodes a0
           -> IO (IDispatch ())
getParent4 =
  propertyGet "Parent"
              []
              outIDispatch

getCount0 :: ShapeNodes a0
          -> IO Int32
getCount0 =
  propertyGet "Count"
              []
              outInt32

item :: a1
     -> ShapeNodes a0
     -> IO (ShapeNode ())
item index =
  function1 "Item"
            [inVariant index]
            outIUnknown

getNewEnum :: ShapeNodes a0
           -> IO (IUnknown ())
getNewEnum =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete :: Int32
       -> ShapeNodes a0
       -> IO ()
delete index =
  method0 "Delete"
          [inInt32 index]

insert :: Int32
       -> MsoSegmentType
       -> MsoEditingType
       -> Float
       -> Float
       -> Float
       -> Float
       -> Float
       -> Float
       -> ShapeNodes a0
       -> IO ()
insert index segmentType editingType x1 y1 x2 y2 x3 y3 iptr =
  do
    segmentType <- marshallMsoSegmentType segmentType
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_insert methPtr iptr index segmentType editingType x1 y1 x2 y2 x3 y3) 5 iptr

foreign import stdcall "prim_Excel_insert" prim_Excel_insert :: Ptr () -> Ptr () -> Int32 -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Float -> Float -> IO Int32
setEditingType :: Int32
               -> MsoEditingType
               -> ShapeNodes a0
               -> IO ()
setEditingType index editingType iptr =
  do
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setEditingType methPtr iptr index editingType) 6 iptr

foreign import stdcall "prim_Excel_setEditingType" prim_Excel_setEditingType :: Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
setPosition :: Int32
            -> Float
            -> Float
            -> ShapeNodes a0
            -> IO ()
setPosition index x1 y1 =
  method0 "SetPosition"
          [ inInt32 index
          , inFloat x1
          , inFloat y1
          ]

setSegmentType :: Int32
               -> MsoSegmentType
               -> ShapeNodes a0
               -> IO ()
setSegmentType index segmentType iptr =
  do
    segmentType <- marshallMsoSegmentType segmentType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setSegmentType methPtr iptr index segmentType) 8 iptr

foreign import stdcall "prim_Excel_setSegmentType" prim_Excel_setSegmentType :: Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface PictureFormat
-- 
-- --------------------------------------------------
data PictureFormat_ a = PictureFormat__ 
type PictureFormat a = IMsoDispObj (PictureFormat_ a)
iidPictureFormat :: IID (PictureFormat ())
iidPictureFormat = mkIID "{000C031A-0000-0000-C000-000000000046}"

getParent5 :: PictureFormat a0
           -> IO (IDispatch ())
getParent5 =
  propertyGet "Parent"
              []
              outIDispatch

incrementBrightness :: Float
                    -> PictureFormat a0
                    -> IO ()
incrementBrightness increment =
  method0 "IncrementBrightness"
          [inFloat increment]

incrementContrast :: Float
                  -> PictureFormat a0
                  -> IO ()
incrementContrast increment =
  method0 "IncrementContrast"
          [inFloat increment]

getBrightness :: PictureFormat a0
              -> IO Float
getBrightness =
  propertyGet "Brightness"
              []
              outFloat

setBrightness :: Float
              -> PictureFormat a0
              -> IO ()
setBrightness brightness =
  propertySet "Brightness"
              [inFloat brightness]

getColorType :: PictureFormat a0
             -> IO MsoPictureColorType
getColorType iptr =
  do
    colorType <- allocBytes (fromIntegral sizeofMsoPictureColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getColorType methPtr iptr colorType) 5 iptr
    doThenFree free readMsoPictureColorType colorType

foreign import stdcall "dynamic" prim_Excel_getColorType :: Ptr () -> Ptr () -> Ptr MsoPictureColorType -> IO Int32
setColorType :: MsoPictureColorType
             -> PictureFormat a0
             -> IO ()
setColorType colorType iptr =
  do
    colorType <- marshallMsoPictureColorType colorType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setColorType methPtr iptr colorType) 6 iptr

foreign import stdcall "prim_Excel_setColorType" prim_Excel_setColorType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getContrast :: PictureFormat a0
            -> IO Float
getContrast =
  propertyGet "Contrast"
              []
              outFloat

setContrast :: Float
            -> PictureFormat a0
            -> IO ()
setContrast contrast =
  propertySet "Contrast"
              [inFloat contrast]

getCropBottom :: PictureFormat a0
              -> IO Float
getCropBottom =
  propertyGet "CropBottom"
              []
              outFloat

setCropBottom :: Float
              -> PictureFormat a0
              -> IO ()
setCropBottom cropBottom =
  propertySet "CropBottom"
              [inFloat cropBottom]

getCropLeft :: PictureFormat a0
            -> IO Float
getCropLeft =
  propertyGet "CropLeft"
              []
              outFloat

setCropLeft :: Float
            -> PictureFormat a0
            -> IO ()
setCropLeft cropLeft =
  propertySet "CropLeft"
              [inFloat cropLeft]

getCropRight :: PictureFormat a0
             -> IO Float
getCropRight =
  propertyGet "CropRight"
              []
              outFloat

setCropRight :: Float
             -> PictureFormat a0
             -> IO ()
setCropRight cropRight =
  propertySet "CropRight"
              [inFloat cropRight]

getCropTop :: PictureFormat a0
           -> IO Float
getCropTop =
  propertyGet "CropTop"
              []
              outFloat

setCropTop :: Float
           -> PictureFormat a0
           -> IO ()
setCropTop cropTop =
  propertySet "CropTop"
              [inFloat cropTop]

getTransparencyColor :: PictureFormat a0
                     -> IO MsoRGBType
getTransparencyColor iptr =
  do
    transparencyColor <- allocBytes (fromIntegral sizeofMsoRGBType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getRGB methPtr iptr transparencyColor) 17 iptr
    doThenFree free readMsoRGBType transparencyColor

setTransparencyColor :: MsoRGBType
                     -> PictureFormat a0
                     -> IO ()
setTransparencyColor transparencyColor iptr =
  do
    transparencyColor <- marshallMsoRGBType transparencyColor
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setTransparencyColor methPtr iptr transparencyColor) 18 iptr

foreign import stdcall "prim_Excel_setTransparencyColor" prim_Excel_setTransparencyColor :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTransparentBackground :: PictureFormat a0
                         -> IO MsoTriState
getTransparentBackground iptr =
  do
    transparentBackground <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr transparentBackground) 19 iptr
    doThenFree free readMsoTriState transparentBackground

setTransparentBackground :: MsoTriState
                         -> PictureFormat a0
                         -> IO ()
setTransparentBackground transparentBackground iptr =
  do
    transparentBackground <- marshallMsoTriState transparentBackground
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setTransparentBackground methPtr iptr transparentBackground) 20 iptr

foreign import stdcall "prim_Excel_setTransparentBackground" prim_Excel_setTransparentBackground :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface ShadowFormat
-- 
-- --------------------------------------------------
data ShadowFormat_ a = ShadowFormat__ 
type ShadowFormat a = IMsoDispObj (ShadowFormat_ a)
iidShadowFormat :: IID (ShadowFormat ())
iidShadowFormat = mkIID "{000C031B-0000-0000-C000-000000000046}"

getParent6 :: ShadowFormat a0
           -> IO (IDispatch ())
getParent6 =
  propertyGet "Parent"
              []
              outIDispatch

incrementOffsetX :: Float
                 -> ShadowFormat a0
                 -> IO ()
incrementOffsetX increment =
  method0 "IncrementOffsetX"
          [inFloat increment]

incrementOffsetY :: Float
                 -> ShadowFormat a0
                 -> IO ()
incrementOffsetY increment =
  method0 "IncrementOffsetY"
          [inFloat increment]

getForeColor0 :: ShadowFormat a0
              -> IO (ColorFormat ())
getForeColor0 =
  propertyGet "ForeColor"
              []
              outIUnknown

setForeColor0 :: ColorFormat a1
              -> ShadowFormat a0
              -> IO ()
setForeColor0 foreColor =
  propertySet "ForeColor"
              [inIUnknown foreColor]

getObscured :: ShadowFormat a0
            -> IO MsoTriState
getObscured iptr =
  do
    obscured <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr obscured) 5 iptr
    doThenFree free readMsoTriState obscured

setObscured :: MsoTriState
            -> ShadowFormat a0
            -> IO ()
setObscured obscured iptr =
  do
    obscured <- marshallMsoTriState obscured
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setObscured methPtr iptr obscured) 6 iptr

foreign import stdcall "prim_Excel_setObscured" prim_Excel_setObscured :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getOffsetX :: ShadowFormat a0
           -> IO Float
getOffsetX =
  propertyGet "OffsetX"
              []
              outFloat

setOffsetX :: Float
           -> ShadowFormat a0
           -> IO ()
setOffsetX offsetX =
  propertySet "OffsetX"
              [inFloat offsetX]

getOffsetY :: ShadowFormat a0
           -> IO Float
getOffsetY =
  propertyGet "OffsetY"
              []
              outFloat

setOffsetY :: Float
           -> ShadowFormat a0
           -> IO ()
setOffsetY offsetY =
  propertySet "OffsetY"
              [inFloat offsetY]

getTransparency0 :: ShadowFormat a0
                 -> IO Float
getTransparency0 =
  propertyGet "Transparency"
              []
              outFloat

setTransparency0 :: Float
                 -> ShadowFormat a0
                 -> IO ()
setTransparency0 transparency =
  propertySet "Transparency"
              [inFloat transparency]

getType1 :: ShadowFormat a0
         -> IO MsoShadowType
getType1 iptr =
  do
    type0 <- allocBytes (fromIntegral sizeofMsoShadowType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getType1 methPtr iptr type0) 13 iptr
    doThenFree free readMsoShadowType type0

foreign import stdcall "dynamic" prim_Excel_getType1 :: Ptr () -> Ptr () -> Ptr MsoShadowType -> IO Int32
setType0 :: MsoShadowType
         -> ShadowFormat a0
         -> IO ()
setType0 type0 iptr =
  do
    type0 <- marshallMsoShadowType type0
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setType0 methPtr iptr type0) 14 iptr

foreign import stdcall "prim_Excel_setType0" prim_Excel_setType0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getVisible0 :: ShadowFormat a0
            -> IO MsoTriState
getVisible0 iptr =
  do
    visible <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr visible) 15 iptr
    doThenFree free readMsoTriState visible

setVisible0 :: MsoTriState
            -> ShadowFormat a0
            -> IO ()
setVisible0 visible iptr =
  do
    visible <- marshallMsoTriState visible
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setVisible0 methPtr iptr visible) 16 iptr

foreign import stdcall "prim_Excel_setVisible0" prim_Excel_setVisible0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getStyle0 :: ShadowFormat a0
          -> IO MsoShadowStyle
getStyle0 iptr =
  do
    shadowStyle <- allocBytes (fromIntegral sizeofMsoShadowStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getStyle0 methPtr iptr shadowStyle) 17 iptr
    doThenFree free readMsoShadowStyle shadowStyle

foreign import stdcall "dynamic" prim_Excel_getStyle0 :: Ptr () -> Ptr () -> Ptr MsoShadowStyle -> IO Int32
setStyle0 :: MsoShadowStyle
          -> ShadowFormat a0
          -> IO ()
setStyle0 shadowStyle iptr =
  do
    shadowStyle <- marshallMsoShadowStyle shadowStyle
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setStyle0 methPtr iptr shadowStyle) 18 iptr

foreign import stdcall "prim_Excel_setStyle0" prim_Excel_setStyle0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBlur :: ShadowFormat a0
        -> IO Float
getBlur =
  propertyGet "Blur"
              []
              outFloat

setBlur :: Float
        -> ShadowFormat a0
        -> IO ()
setBlur blur =
  propertySet "Blur"
              [inFloat blur]

getSize :: ShadowFormat a0
        -> IO Float
getSize =
  propertyGet "Size"
              []
              outFloat

setSize :: Float
        -> ShadowFormat a0
        -> IO ()
setSize size =
  propertySet "Size"
              [inFloat size]

getRotateWithShape :: ShadowFormat a0
                   -> IO MsoTriState
getRotateWithShape iptr =
  do
    rotateWithShape <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr rotateWithShape) 23 iptr
    doThenFree free readMsoTriState rotateWithShape

setRotateWithShape :: MsoTriState
                   -> ShadowFormat a0
                   -> IO ()
setRotateWithShape rotateWithShape iptr =
  do
    rotateWithShape <- marshallMsoTriState rotateWithShape
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setRotateWithShape methPtr iptr rotateWithShape) 24 iptr

foreign import stdcall "prim_Excel_setRotateWithShape" prim_Excel_setRotateWithShape :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface TextEffectFormat
-- 
-- --------------------------------------------------
data TextEffectFormat_ a = TextEffectFormat__ 
type TextEffectFormat a = IMsoDispObj (TextEffectFormat_ a)
iidTextEffectFormat :: IID (TextEffectFormat ())
iidTextEffectFormat =
  mkIID "{000C031F-0000-0000-C000-000000000046}"

getParent7 :: TextEffectFormat a0
           -> IO (IDispatch ())
getParent7 =
  propertyGet "Parent"
              []
              outIDispatch

toggleVerticalText :: TextEffectFormat a0
                   -> IO ()
toggleVerticalText =
  method0 "ToggleVerticalText"
          []

getAlignment :: TextEffectFormat a0
             -> IO MsoTextEffectAlignment
getAlignment iptr =
  do
    alignment <- allocBytes (fromIntegral sizeofMsoTextEffectAlignment)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAlignment methPtr iptr alignment) 2 iptr
    doThenFree free readMsoTextEffectAlignment alignment

foreign import stdcall "dynamic" prim_Excel_getAlignment :: Ptr () -> Ptr () -> Ptr MsoTextEffectAlignment -> IO Int32
setAlignment :: MsoTextEffectAlignment
             -> TextEffectFormat a0
             -> IO ()
setAlignment alignment iptr =
  do
    alignment <- marshallMsoTextEffectAlignment alignment
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setAlignment methPtr iptr alignment) 3 iptr

foreign import stdcall "prim_Excel_setAlignment" prim_Excel_setAlignment :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFontBold :: TextEffectFormat a0
            -> IO MsoTriState
getFontBold iptr =
  do
    fontBold <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr fontBold) 4 iptr
    doThenFree free readMsoTriState fontBold

setFontBold :: MsoTriState
            -> TextEffectFormat a0
            -> IO ()
setFontBold fontBold iptr =
  do
    fontBold <- marshallMsoTriState fontBold
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setFontBold methPtr iptr fontBold) 5 iptr

foreign import stdcall "prim_Excel_setFontBold" prim_Excel_setFontBold :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFontItalic :: TextEffectFormat a0
              -> IO MsoTriState
getFontItalic iptr =
  do
    fontItalic <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr fontItalic) 6 iptr
    doThenFree free readMsoTriState fontItalic

setFontItalic :: MsoTriState
              -> TextEffectFormat a0
              -> IO ()
setFontItalic fontItalic iptr =
  do
    fontItalic <- marshallMsoTriState fontItalic
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setFontItalic methPtr iptr fontItalic) 7 iptr

foreign import stdcall "prim_Excel_setFontItalic" prim_Excel_setFontItalic :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFontName :: TextEffectFormat a0
            -> IO String
getFontName =
  propertyGet "FontName"
              []
              outString

setFontName :: String
            -> TextEffectFormat a0
            -> IO ()
setFontName fontName =
  propertySet "FontName"
              [inString fontName]

getFontSize :: TextEffectFormat a0
            -> IO Float
getFontSize =
  propertyGet "FontSize"
              []
              outFloat

setFontSize :: Float
            -> TextEffectFormat a0
            -> IO ()
setFontSize fontSize =
  propertySet "FontSize"
              [inFloat fontSize]

getKernedPairs :: TextEffectFormat a0
               -> IO MsoTriState
getKernedPairs iptr =
  do
    kernedPairs <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr kernedPairs) 12 iptr
    doThenFree free readMsoTriState kernedPairs

setKernedPairs :: MsoTriState
               -> TextEffectFormat a0
               -> IO ()
setKernedPairs kernedPairs iptr =
  do
    kernedPairs <- marshallMsoTriState kernedPairs
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setKernedPairs methPtr iptr kernedPairs) 13 iptr

foreign import stdcall "prim_Excel_setKernedPairs" prim_Excel_setKernedPairs :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getNormalizedHeight :: TextEffectFormat a0
                    -> IO MsoTriState
getNormalizedHeight iptr =
  do
    normalizedHeight <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr normalizedHeight) 14 iptr
    doThenFree free readMsoTriState normalizedHeight

setNormalizedHeight :: MsoTriState
                    -> TextEffectFormat a0
                    -> IO ()
setNormalizedHeight normalizedHeight iptr =
  do
    normalizedHeight <- marshallMsoTriState normalizedHeight
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setNormalizedHeight methPtr iptr normalizedHeight) 15 iptr

foreign import stdcall "prim_Excel_setNormalizedHeight" prim_Excel_setNormalizedHeight :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetShape :: TextEffectFormat a0
               -> IO MsoPresetTextEffectShape
getPresetShape iptr =
  do
    presetShape <- allocBytes (fromIntegral sizeofMsoPresetTextEffectShape)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetShape methPtr iptr presetShape) 16 iptr
    doThenFree free readMsoPresetTextEffectShape presetShape

foreign import stdcall "dynamic" prim_Excel_getPresetShape :: Ptr () -> Ptr () -> Ptr MsoPresetTextEffectShape -> IO Int32
setPresetShape :: MsoPresetTextEffectShape
               -> TextEffectFormat a0
               -> IO ()
setPresetShape presetShape iptr =
  do
    presetShape <- marshallMsoPresetTextEffectShape presetShape
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetShape methPtr iptr presetShape) 17 iptr

foreign import stdcall "prim_Excel_setPresetShape" prim_Excel_setPresetShape :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetTextEffect :: TextEffectFormat a0
                    -> IO MsoPresetTextEffect
getPresetTextEffect iptr =
  do
    preset <- allocBytes (fromIntegral sizeofMsoPresetTextEffect)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetTextEffect methPtr iptr preset) 18 iptr
    doThenFree free readMsoPresetTextEffect preset

foreign import stdcall "dynamic" prim_Excel_getPresetTextEffect :: Ptr () -> Ptr () -> Ptr MsoPresetTextEffect -> IO Int32
setPresetTextEffect :: MsoPresetTextEffect
                    -> TextEffectFormat a0
                    -> IO ()
setPresetTextEffect preset iptr =
  do
    preset <- marshallMsoPresetTextEffect preset
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetTextEffect methPtr iptr preset) 19 iptr

foreign import stdcall "prim_Excel_setPresetTextEffect" prim_Excel_setPresetTextEffect :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getRotatedChars :: TextEffectFormat a0
                -> IO MsoTriState
getRotatedChars iptr =
  do
    rotatedChars <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr rotatedChars) 20 iptr
    doThenFree free readMsoTriState rotatedChars

setRotatedChars :: MsoTriState
                -> TextEffectFormat a0
                -> IO ()
setRotatedChars rotatedChars iptr =
  do
    rotatedChars <- marshallMsoTriState rotatedChars
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setRotatedChars methPtr iptr rotatedChars) 21 iptr

foreign import stdcall "prim_Excel_setRotatedChars" prim_Excel_setRotatedChars :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getText :: TextEffectFormat a0
        -> IO String
getText =
  propertyGet "Text"
              []
              outString

setText :: String
        -> TextEffectFormat a0
        -> IO ()
setText text =
  propertySet "Text"
              [inString text]

getTracking :: TextEffectFormat a0
            -> IO Float
getTracking =
  propertyGet "Tracking"
              []
              outFloat

setTracking :: Float
            -> TextEffectFormat a0
            -> IO ()
setTracking tracking =
  propertySet "Tracking"
              [inFloat tracking]

-- --------------------------------------------------
-- 
-- interface ThreeDFormat
-- 
-- --------------------------------------------------
data ThreeDFormat_ a = ThreeDFormat__ 
type ThreeDFormat a = IMsoDispObj (ThreeDFormat_ a)
iidThreeDFormat :: IID (ThreeDFormat ())
iidThreeDFormat = mkIID "{000C0321-0000-0000-C000-000000000046}"

getParent8 :: ThreeDFormat a0
           -> IO (IDispatch ())
getParent8 =
  propertyGet "Parent"
              []
              outIDispatch

incrementRotationX :: Float
                   -> ThreeDFormat a0
                   -> IO ()
incrementRotationX increment =
  method0 "IncrementRotationX"
          [inFloat increment]

incrementRotationY :: Float
                   -> ThreeDFormat a0
                   -> IO ()
incrementRotationY increment =
  method0 "IncrementRotationY"
          [inFloat increment]

resetRotation :: ThreeDFormat a0
              -> IO ()
resetRotation =
  method0 "ResetRotation"
          []

setThreeDFormat :: MsoPresetThreeDFormat
                -> ThreeDFormat a0
                -> IO ()
setThreeDFormat presetThreeDFormat iptr =
  do
    presetThreeDFormat <- marshallMsoPresetThreeDFormat presetThreeDFormat
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setThreeDFormat methPtr iptr presetThreeDFormat) 4 iptr

foreign import stdcall "prim_Excel_setThreeDFormat" prim_Excel_setThreeDFormat :: Ptr () -> Ptr () -> Ptr () -> IO Int32
setExtrusionDirection :: MsoPresetExtrusionDirection
                      -> ThreeDFormat a0
                      -> IO ()
setExtrusionDirection presetExtrusionDirection iptr =
  do
    presetExtrusionDirection <- marshallMsoPresetExtrusionDirection presetExtrusionDirection
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setExtrusionDirection methPtr iptr presetExtrusionDirection) 5 iptr

foreign import stdcall "prim_Excel_setExtrusionDirection" prim_Excel_setExtrusionDirection :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getDepth :: ThreeDFormat a0
         -> IO Float
getDepth =
  propertyGet "Depth"
              []
              outFloat

setDepth :: Float
         -> ThreeDFormat a0
         -> IO ()
setDepth depth =
  propertySet "Depth"
              [inFloat depth]

getExtrusionColor :: ThreeDFormat a0
                  -> IO (ColorFormat ())
getExtrusionColor =
  propertyGet "ExtrusionColor"
              []
              outIUnknown

getExtrusionColorType :: ThreeDFormat a0
                      -> IO MsoExtrusionColorType
getExtrusionColorType iptr =
  do
    extrusionColorType <- allocBytes (fromIntegral sizeofMsoExtrusionColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getExtrusionColorType methPtr iptr extrusionColorType) 9 iptr
    doThenFree free readMsoExtrusionColorType extrusionColorType

foreign import stdcall "dynamic" prim_Excel_getExtrusionColorType :: Ptr () -> Ptr () -> Ptr MsoExtrusionColorType -> IO Int32
setExtrusionColorType :: MsoExtrusionColorType
                      -> ThreeDFormat a0
                      -> IO ()
setExtrusionColorType extrusionColorType iptr =
  do
    extrusionColorType <- marshallMsoExtrusionColorType extrusionColorType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setExtrusionColorType methPtr iptr extrusionColorType) 10 iptr

foreign import stdcall "prim_Excel_setExtrusionColorType" prim_Excel_setExtrusionColorType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPerspective :: ThreeDFormat a0
               -> IO MsoTriState
getPerspective iptr =
  do
    perspective <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr perspective) 11 iptr
    doThenFree free readMsoTriState perspective

setPerspective :: MsoTriState
               -> ThreeDFormat a0
               -> IO ()
setPerspective perspective iptr =
  do
    perspective <- marshallMsoTriState perspective
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPerspective methPtr iptr perspective) 12 iptr

foreign import stdcall "prim_Excel_setPerspective" prim_Excel_setPerspective :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetExtrusionDirection :: ThreeDFormat a0
                            -> IO MsoPresetExtrusionDirection
getPresetExtrusionDirection iptr =
  do
    presetExtrusionDirection <- allocBytes (fromIntegral sizeofMsoPresetExtrusionDirection)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetExtrusionDirection methPtr iptr presetExtrusionDirection) 13 iptr
    doThenFree free readMsoPresetExtrusionDirection presetExtrusionDirection

foreign import stdcall "dynamic" prim_Excel_getPresetExtrusionDirection :: Ptr () -> Ptr () -> Ptr MsoPresetExtrusionDirection -> IO Int32
getPresetLightingDirection :: ThreeDFormat a0
                           -> IO MsoPresetLightingDirection
getPresetLightingDirection iptr =
  do
    presetLightingDirection <- allocBytes (fromIntegral sizeofMsoPresetLightingDirection)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetLightingDirection methPtr iptr presetLightingDirection) 14 iptr
    doThenFree free readMsoPresetLightingDirection presetLightingDirection

foreign import stdcall "dynamic" prim_Excel_getPresetLightingDirection :: Ptr () -> Ptr () -> Ptr MsoPresetLightingDirection -> IO Int32
setPresetLightingDirection :: MsoPresetLightingDirection
                           -> ThreeDFormat a0
                           -> IO ()
setPresetLightingDirection presetLightingDirection iptr =
  do
    presetLightingDirection <- marshallMsoPresetLightingDirection presetLightingDirection
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetLightingDirection methPtr iptr presetLightingDirection) 15 iptr

foreign import stdcall "prim_Excel_setPresetLightingDirection" prim_Excel_setPresetLightingDirection :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetLightingSoftness :: ThreeDFormat a0
                          -> IO MsoPresetLightingSoftness
getPresetLightingSoftness iptr =
  do
    presetLightingSoftness <- allocBytes (fromIntegral sizeofMsoPresetLightingSoftness)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetLightingSoftness methPtr iptr presetLightingSoftness) 16 iptr
    doThenFree free readMsoPresetLightingSoftness presetLightingSoftness

foreign import stdcall "dynamic" prim_Excel_getPresetLightingSoftness :: Ptr () -> Ptr () -> Ptr MsoPresetLightingSoftness -> IO Int32
setPresetLightingSoftness :: MsoPresetLightingSoftness
                          -> ThreeDFormat a0
                          -> IO ()
setPresetLightingSoftness presetLightingSoftness iptr =
  do
    presetLightingSoftness <- marshallMsoPresetLightingSoftness presetLightingSoftness
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetLightingSoftness methPtr iptr presetLightingSoftness) 17 iptr

foreign import stdcall "prim_Excel_setPresetLightingSoftness" prim_Excel_setPresetLightingSoftness :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetMaterial :: ThreeDFormat a0
                  -> IO MsoPresetMaterial
getPresetMaterial iptr =
  do
    presetMaterial <- allocBytes (fromIntegral sizeofMsoPresetMaterial)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetMaterial methPtr iptr presetMaterial) 18 iptr
    doThenFree free readMsoPresetMaterial presetMaterial

foreign import stdcall "dynamic" prim_Excel_getPresetMaterial :: Ptr () -> Ptr () -> Ptr MsoPresetMaterial -> IO Int32
setPresetMaterial :: MsoPresetMaterial
                  -> ThreeDFormat a0
                  -> IO ()
setPresetMaterial presetMaterial iptr =
  do
    presetMaterial <- marshallMsoPresetMaterial presetMaterial
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetMaterial methPtr iptr presetMaterial) 19 iptr

foreign import stdcall "prim_Excel_setPresetMaterial" prim_Excel_setPresetMaterial :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetThreeDFormat :: ThreeDFormat a0
                      -> IO MsoPresetThreeDFormat
getPresetThreeDFormat iptr =
  do
    presetThreeDFormat <- allocBytes (fromIntegral sizeofMsoPresetThreeDFormat)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetThreeDFormat methPtr iptr presetThreeDFormat) 20 iptr
    doThenFree free readMsoPresetThreeDFormat presetThreeDFormat

foreign import stdcall "dynamic" prim_Excel_getPresetThreeDFormat :: Ptr () -> Ptr () -> Ptr MsoPresetThreeDFormat -> IO Int32
getRotationX :: ThreeDFormat a0
             -> IO Float
getRotationX =
  propertyGet "RotationX"
              []
              outFloat

setRotationX :: Float
             -> ThreeDFormat a0
             -> IO ()
setRotationX rotationX =
  propertySet "RotationX"
              [inFloat rotationX]

getRotationY :: ThreeDFormat a0
             -> IO Float
getRotationY =
  propertyGet "RotationY"
              []
              outFloat

setRotationY :: Float
             -> ThreeDFormat a0
             -> IO ()
setRotationY rotationY =
  propertySet "RotationY"
              [inFloat rotationY]

getVisible1 :: ThreeDFormat a0
            -> IO MsoTriState
getVisible1 iptr =
  do
    visible <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr visible) 25 iptr
    doThenFree free readMsoTriState visible

setVisible1 :: MsoTriState
            -> ThreeDFormat a0
            -> IO ()
setVisible1 visible iptr =
  do
    visible <- marshallMsoTriState visible
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setVisible1 methPtr iptr visible) 26 iptr

foreign import stdcall "prim_Excel_setVisible1" prim_Excel_setVisible1 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
setPresetCamera :: MsoPresetCamera
                -> ThreeDFormat a0
                -> IO ()
setPresetCamera presetCamera iptr =
  do
    presetCamera <- marshallMsoPresetCamera presetCamera
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetCamera methPtr iptr presetCamera) 27 iptr

foreign import stdcall "prim_Excel_setPresetCamera" prim_Excel_setPresetCamera :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementRotationZ :: Float
                   -> ThreeDFormat a0
                   -> IO ()
incrementRotationZ increment =
  method0 "IncrementRotationZ"
          [inFloat increment]

incrementRotationHorizontal :: Float
                            -> ThreeDFormat a0
                            -> IO ()
incrementRotationHorizontal increment =
  method0 "IncrementRotationHorizontal"
          [inFloat increment]

incrementRotationVertical :: Float
                          -> ThreeDFormat a0
                          -> IO ()
incrementRotationVertical increment =
  method0 "IncrementRotationVertical"
          [inFloat increment]

getPresetLighting :: ThreeDFormat a0
                  -> IO MsoLightRigType
getPresetLighting iptr =
  do
    presetLightRigType <- allocBytes (fromIntegral sizeofMsoLightRigType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetLighting methPtr iptr presetLightRigType) 31 iptr
    doThenFree free readMsoLightRigType presetLightRigType

foreign import stdcall "dynamic" prim_Excel_getPresetLighting :: Ptr () -> Ptr () -> Ptr MsoLightRigType -> IO Int32
setPresetLighting :: MsoLightRigType
                  -> ThreeDFormat a0
                  -> IO ()
setPresetLighting presetLightRigType iptr =
  do
    presetLightRigType <- marshallMsoLightRigType presetLightRigType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPresetLighting methPtr iptr presetLightRigType) 32 iptr

foreign import stdcall "prim_Excel_setPresetLighting" prim_Excel_setPresetLighting :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getZ :: ThreeDFormat a0
     -> IO Float
getZ =
  propertyGet "Z"
              []
              outFloat

setZ :: Float
     -> ThreeDFormat a0
     -> IO ()
setZ z =
  propertySet "Z"
              [inFloat z]

getBevelTopType :: ThreeDFormat a0
                -> IO MsoBevelType
getBevelTopType iptr =
  do
    bevelTopType <- allocBytes (fromIntegral sizeofMsoBevelType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBevelTopType methPtr iptr bevelTopType) 35 iptr
    doThenFree free readMsoBevelType bevelTopType

foreign import stdcall "dynamic" prim_Excel_getBevelTopType :: Ptr () -> Ptr () -> Ptr MsoBevelType -> IO Int32
setBevelTopType :: MsoBevelType
                -> ThreeDFormat a0
                -> IO ()
setBevelTopType bevelTopType iptr =
  do
    bevelTopType <- marshallMsoBevelType bevelTopType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setBevelTopType methPtr iptr bevelTopType) 36 iptr

foreign import stdcall "prim_Excel_setBevelTopType" prim_Excel_setBevelTopType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBevelTopInset :: ThreeDFormat a0
                 -> IO Float
getBevelTopInset =
  propertyGet "BevelTopInset"
              []
              outFloat

setBevelTopInset :: Float
                 -> ThreeDFormat a0
                 -> IO ()
setBevelTopInset bevelTopInset =
  propertySet "BevelTopInset"
              [inFloat bevelTopInset]

getBevelTopDepth :: ThreeDFormat a0
                 -> IO Float
getBevelTopDepth =
  propertyGet "BevelTopDepth"
              []
              outFloat

setBevelTopDepth :: Float
                 -> ThreeDFormat a0
                 -> IO ()
setBevelTopDepth bevelTopDepth =
  propertySet "BevelTopDepth"
              [inFloat bevelTopDepth]

getBevelBottomType :: ThreeDFormat a0
                   -> IO MsoBevelType
getBevelBottomType iptr =
  do
    bevelBottomType <- allocBytes (fromIntegral sizeofMsoBevelType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getBevelTopType methPtr iptr bevelBottomType) 41 iptr
    doThenFree free readMsoBevelType bevelBottomType

setBevelBottomType :: MsoBevelType
                   -> ThreeDFormat a0
                   -> IO ()
setBevelBottomType bevelBottomType iptr =
  do
    bevelBottomType <- marshallMsoBevelType bevelBottomType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setBevelBottomType methPtr iptr bevelBottomType) 42 iptr

foreign import stdcall "prim_Excel_setBevelBottomType" prim_Excel_setBevelBottomType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBevelBottomInset :: ThreeDFormat a0
                    -> IO Float
getBevelBottomInset =
  propertyGet "BevelBottomInset"
              []
              outFloat

setBevelBottomInset :: Float
                    -> ThreeDFormat a0
                    -> IO ()
setBevelBottomInset bevelBottomInset =
  propertySet "BevelBottomInset"
              [inFloat bevelBottomInset]

getBevelBottomDepth :: ThreeDFormat a0
                    -> IO Float
getBevelBottomDepth =
  propertyGet "BevelBottomDepth"
              []
              outFloat

setBevelBottomDepth :: Float
                    -> ThreeDFormat a0
                    -> IO ()
setBevelBottomDepth bevelBottomDepth =
  propertySet "BevelBottomDepth"
              [inFloat bevelBottomDepth]

getPresetCamera :: ThreeDFormat a0
                -> IO MsoPresetCamera
getPresetCamera iptr =
  do
    presetCamera <- allocBytes (fromIntegral sizeofMsoPresetCamera)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetCamera methPtr iptr presetCamera) 47 iptr
    doThenFree free readMsoPresetCamera presetCamera

foreign import stdcall "dynamic" prim_Excel_getPresetCamera :: Ptr () -> Ptr () -> Ptr MsoPresetCamera -> IO Int32
getRotationZ :: ThreeDFormat a0
             -> IO Float
getRotationZ =
  propertyGet "RotationZ"
              []
              outFloat

setRotationZ :: Float
             -> ThreeDFormat a0
             -> IO ()
setRotationZ rotationZ =
  propertySet "RotationZ"
              [inFloat rotationZ]

getContourWidth :: ThreeDFormat a0
                -> IO Float
getContourWidth =
  propertyGet "ContourWidth"
              []
              outFloat

setContourWidth :: Float
                -> ThreeDFormat a0
                -> IO ()
setContourWidth width =
  propertySet "ContourWidth"
              [inFloat width]

getContourColor :: ThreeDFormat a0
                -> IO (ColorFormat ())
getContourColor =
  propertyGet "ContourColor"
              []
              outIUnknown

getFieldOfView :: ThreeDFormat a0
               -> IO Float
getFieldOfView =
  propertyGet "FieldOfView"
              []
              outFloat

setFieldOfView :: Float
               -> ThreeDFormat a0
               -> IO ()
setFieldOfView fOV =
  propertySet "FieldOfView"
              [inFloat fOV]

getProjectText :: ThreeDFormat a0
               -> IO MsoTriState
getProjectText iptr =
  do
    projectText <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr projectText) 55 iptr
    doThenFree free readMsoTriState projectText

setProjectText :: MsoTriState
               -> ThreeDFormat a0
               -> IO ()
setProjectText projectText iptr =
  do
    projectText <- marshallMsoTriState projectText
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setProjectText methPtr iptr projectText) 56 iptr

foreign import stdcall "prim_Excel_setProjectText" prim_Excel_setProjectText :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getLightAngle :: ThreeDFormat a0
              -> IO Float
getLightAngle =
  propertyGet "LightAngle"
              []
              outFloat

setLightAngle :: Float
              -> ThreeDFormat a0
              -> IO ()
setLightAngle lightAngle =
  propertySet "LightAngle"
              [inFloat lightAngle]

-- --------------------------------------------------
-- 
-- interface FillFormat
-- 
-- --------------------------------------------------
data FillFormat_ a = FillFormat__ 
type FillFormat a = IMsoDispObj (FillFormat_ a)
iidFillFormat :: IID (FillFormat ())
iidFillFormat = mkIID "{000C0314-0000-0000-C000-000000000046}"

getParent9 :: FillFormat a0
           -> IO (IDispatch ())
getParent9 =
  propertyGet "Parent"
              []
              outIDispatch

background :: FillFormat a0
           -> IO ()
background =
  method0 "Background"
          []

oneColorGradient :: MsoGradientStyle
                 -> Int32
                 -> Float
                 -> FillFormat a0
                 -> IO ()
oneColorGradient style variant degree iptr =
  do
    style <- marshallMsoGradientStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Excel_oneColorGradient methPtr iptr style variant degree) 2 iptr

foreign import stdcall "prim_Excel_oneColorGradient" prim_Excel_oneColorGradient :: Ptr () -> Ptr () -> Ptr () -> Int32 -> Float -> IO Int32
patterned :: MsoPatternType
          -> FillFormat a0
          -> IO ()
patterned pattern iptr =
  do
    pattern <- marshallMsoPatternType pattern
    invokeAndCheck (\ methPtr iptr -> prim_Excel_patterned methPtr iptr pattern) 3 iptr

foreign import stdcall "prim_Excel_patterned" prim_Excel_patterned :: Ptr () -> Ptr () -> Ptr () -> IO Int32
presetGradient :: MsoGradientStyle
               -> Int32
               -> MsoPresetGradientType
               -> FillFormat a0
               -> IO ()
presetGradient style variant presetGradientType iptr =
  do
    style <- marshallMsoGradientStyle style
    presetGradientType <- marshallMsoPresetGradientType presetGradientType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_presetGradient methPtr iptr style variant presetGradientType) 4 iptr

foreign import stdcall "prim_Excel_presetGradient" prim_Excel_presetGradient :: Ptr () -> Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
presetTextured :: MsoPresetTexture
               -> FillFormat a0
               -> IO ()
presetTextured presetTexture iptr =
  do
    presetTexture <- marshallMsoPresetTexture presetTexture
    invokeAndCheck (\ methPtr iptr -> prim_Excel_presetTextured methPtr iptr presetTexture) 5 iptr

foreign import stdcall "prim_Excel_presetTextured" prim_Excel_presetTextured :: Ptr () -> Ptr () -> Ptr () -> IO Int32
solid :: FillFormat a0
      -> IO ()
solid =
  method0 "Solid"
          []

twoColorGradient :: MsoGradientStyle
                 -> Int32
                 -> FillFormat a0
                 -> IO ()
twoColorGradient style variant iptr =
  do
    style <- marshallMsoGradientStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Excel_twoColorGradient methPtr iptr style variant) 7 iptr

foreign import stdcall "prim_Excel_twoColorGradient" prim_Excel_twoColorGradient :: Ptr () -> Ptr () -> Ptr () -> Int32 -> IO Int32
userPicture :: String
            -> FillFormat a0
            -> IO ()
userPicture pictureFile =
  method0 "UserPicture"
          [inString pictureFile]

userTextured :: String
             -> FillFormat a0
             -> IO ()
userTextured textureFile =
  method0 "UserTextured"
          [inString textureFile]

getBackColor0 :: FillFormat a0
              -> IO (ColorFormat ())
getBackColor0 =
  propertyGet "BackColor"
              []
              outIUnknown

setBackColor0 :: ColorFormat a1
              -> FillFormat a0
              -> IO ()
setBackColor0 backColor =
  propertySet "BackColor"
              [inIUnknown backColor]

getForeColor1 :: FillFormat a0
              -> IO (ColorFormat ())
getForeColor1 =
  propertyGet "ForeColor"
              []
              outIUnknown

setForeColor1 :: ColorFormat a1
              -> FillFormat a0
              -> IO ()
setForeColor1 foreColor =
  propertySet "ForeColor"
              [inIUnknown foreColor]

getGradientColorType :: FillFormat a0
                     -> IO MsoGradientColorType
getGradientColorType iptr =
  do
    gradientColorType <- allocBytes (fromIntegral sizeofMsoGradientColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getGradientColorType methPtr iptr gradientColorType) 14 iptr
    doThenFree free readMsoGradientColorType gradientColorType

foreign import stdcall "dynamic" prim_Excel_getGradientColorType :: Ptr () -> Ptr () -> Ptr MsoGradientColorType -> IO Int32
getGradientDegree :: FillFormat a0
                  -> IO Float
getGradientDegree =
  propertyGet "GradientDegree"
              []
              outFloat

getGradientStyle :: FillFormat a0
                 -> IO MsoGradientStyle
getGradientStyle iptr =
  do
    gradientStyle <- allocBytes (fromIntegral sizeofMsoGradientStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getGradientStyle methPtr iptr gradientStyle) 16 iptr
    doThenFree free readMsoGradientStyle gradientStyle

foreign import stdcall "dynamic" prim_Excel_getGradientStyle :: Ptr () -> Ptr () -> Ptr MsoGradientStyle -> IO Int32
getGradientVariant :: FillFormat a0
                   -> IO Int32
getGradientVariant =
  propertyGet "GradientVariant"
              []
              outInt32

getPattern0 :: FillFormat a0
            -> IO MsoPatternType
getPattern0 iptr =
  do
    pattern <- allocBytes (fromIntegral sizeofMsoPatternType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPattern methPtr iptr pattern) 18 iptr
    doThenFree free readMsoPatternType pattern

getPresetGradientType :: FillFormat a0
                      -> IO MsoPresetGradientType
getPresetGradientType iptr =
  do
    presetGradientType <- allocBytes (fromIntegral sizeofMsoPresetGradientType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetGradientType methPtr iptr presetGradientType) 19 iptr
    doThenFree free readMsoPresetGradientType presetGradientType

foreign import stdcall "dynamic" prim_Excel_getPresetGradientType :: Ptr () -> Ptr () -> Ptr MsoPresetGradientType -> IO Int32
getPresetTexture :: FillFormat a0
                 -> IO MsoPresetTexture
getPresetTexture iptr =
  do
    presetTexture <- allocBytes (fromIntegral sizeofMsoPresetTexture)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetTexture methPtr iptr presetTexture) 20 iptr
    doThenFree free readMsoPresetTexture presetTexture

foreign import stdcall "dynamic" prim_Excel_getPresetTexture :: Ptr () -> Ptr () -> Ptr MsoPresetTexture -> IO Int32
getTextureName :: FillFormat a0
               -> IO String
getTextureName =
  propertyGet "TextureName"
              []
              outString

getTextureType :: FillFormat a0
               -> IO MsoTextureType
getTextureType iptr =
  do
    textureType <- allocBytes (fromIntegral sizeofMsoTextureType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getTextureType methPtr iptr textureType) 22 iptr
    doThenFree free readMsoTextureType textureType

foreign import stdcall "dynamic" prim_Excel_getTextureType :: Ptr () -> Ptr () -> Ptr MsoTextureType -> IO Int32
getTransparency1 :: FillFormat a0
                 -> IO Float
getTransparency1 =
  propertyGet "Transparency"
              []
              outFloat

setTransparency1 :: Float
                 -> FillFormat a0
                 -> IO ()
setTransparency1 transparency =
  propertySet "Transparency"
              [inFloat transparency]

getType2 :: FillFormat a0
         -> IO MsoFillType
getType2 iptr =
  do
    type0 <- allocBytes (fromIntegral sizeofMsoFillType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getType2 methPtr iptr type0) 25 iptr
    doThenFree free readMsoFillType type0

foreign import stdcall "dynamic" prim_Excel_getType2 :: Ptr () -> Ptr () -> Ptr MsoFillType -> IO Int32
getVisible2 :: FillFormat a0
            -> IO MsoTriState
getVisible2 iptr =
  do
    visible <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr visible) 26 iptr
    doThenFree free readMsoTriState visible

setVisible2 :: MsoTriState
            -> FillFormat a0
            -> IO ()
setVisible2 visible iptr =
  do
    visible <- marshallMsoTriState visible
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setVisible2 methPtr iptr visible) 27 iptr

foreign import stdcall "prim_Excel_setVisible2" prim_Excel_setVisible2 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getGradientStops :: FillFormat a0
                 -> IO (Maybe GradientStops)
getGradientStops iptr =
  do
    gradientStops <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getGradientStops methPtr iptr gradientStops) 28 iptr
    doThenFree free (readunique readGradientStops) gradientStops

foreign import stdcall "dynamic" prim_Excel_getGradientStops :: Ptr () -> Ptr () -> Ptr (Ptr GradientStops) -> IO Int32
getTextureOffsetX :: FillFormat a0
                  -> IO Float
getTextureOffsetX =
  propertyGet "TextureOffsetX"
              []
              outFloat

setTextureOffsetX :: Float
                  -> FillFormat a0
                  -> IO ()
setTextureOffsetX textureOffsetX =
  propertySet "TextureOffsetX"
              [inFloat textureOffsetX]

getTextureOffsetY :: FillFormat a0
                  -> IO Float
getTextureOffsetY =
  propertyGet "TextureOffsetY"
              []
              outFloat

setTextureOffsetY :: Float
                  -> FillFormat a0
                  -> IO ()
setTextureOffsetY textureOffsetY =
  propertySet "TextureOffsetY"
              [inFloat textureOffsetY]

getTextureAlignment :: FillFormat a0
                    -> IO MsoTextureAlignment
getTextureAlignment iptr =
  do
    textureAlignment <- allocBytes (fromIntegral sizeofMsoTextureAlignment)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getTextureAlignment methPtr iptr textureAlignment) 33 iptr
    doThenFree free readMsoTextureAlignment textureAlignment

foreign import stdcall "dynamic" prim_Excel_getTextureAlignment :: Ptr () -> Ptr () -> Ptr MsoTextureAlignment -> IO Int32
setTextureAlignment :: MsoTextureAlignment
                    -> FillFormat a0
                    -> IO ()
setTextureAlignment textureAlignment iptr =
  do
    textureAlignment <- marshallMsoTextureAlignment textureAlignment
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setTextureAlignment methPtr iptr textureAlignment) 34 iptr

foreign import stdcall "prim_Excel_setTextureAlignment" prim_Excel_setTextureAlignment :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTextureHorizontalScale :: FillFormat a0
                          -> IO Float
getTextureHorizontalScale =
  propertyGet "TextureHorizontalScale"
              []
              outFloat

setTextureHorizontalScale :: Float
                          -> FillFormat a0
                          -> IO ()
setTextureHorizontalScale horizontalScale =
  propertySet "TextureHorizontalScale"
              [inFloat horizontalScale]

getTextureVerticalScale :: FillFormat a0
                        -> IO Float
getTextureVerticalScale =
  propertyGet "TextureVerticalScale"
              []
              outFloat

setTextureVerticalScale :: Float
                        -> FillFormat a0
                        -> IO ()
setTextureVerticalScale verticalScale =
  propertySet "TextureVerticalScale"
              [inFloat verticalScale]

getTextureTile :: FillFormat a0
               -> IO MsoTriState
getTextureTile iptr =
  do
    textureTile <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr textureTile) 39 iptr
    doThenFree free readMsoTriState textureTile

setTextureTile :: MsoTriState
               -> FillFormat a0
               -> IO ()
setTextureTile textureTile iptr =
  do
    textureTile <- marshallMsoTriState textureTile
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setTextureTile methPtr iptr textureTile) 40 iptr

foreign import stdcall "prim_Excel_setTextureTile" prim_Excel_setTextureTile :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getRotateWithObject :: FillFormat a0
                    -> IO MsoTriState
getRotateWithObject iptr =
  do
    rotateWithObject <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr rotateWithObject) 41 iptr
    doThenFree free readMsoTriState rotateWithObject

setRotateWithObject :: MsoTriState
                    -> FillFormat a0
                    -> IO ()
setRotateWithObject rotateWithObject iptr =
  do
    rotateWithObject <- marshallMsoTriState rotateWithObject
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setRotateWithObject methPtr iptr rotateWithObject) 42 iptr

foreign import stdcall "prim_Excel_setRotateWithObject" prim_Excel_setRotateWithObject :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface DiagramNodes
-- 
-- --------------------------------------------------
data DiagramNodes_ a = DiagramNodes__ 
type DiagramNodes a = IMsoDispObj (DiagramNodes_ a)
iidDiagramNodes :: IID (DiagramNodes ())
iidDiagramNodes = mkIID "{000C036E-0000-0000-C000-000000000046}"

getNewEnum0 :: DiagramNodes a0
            -> IO (IUnknown ())
getNewEnum0 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item0 :: a1
      -> DiagramNodes a0
      -> IO (DiagramNode ())
item0 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

selectAll :: DiagramNodes a0
          -> IO ()
selectAll =
  method0 "SelectAll"
          []

getParent10 :: DiagramNodes a0
            -> IO (IDispatch ())
getParent10 =
  propertyGet "Parent"
              []
              outIDispatch

getCount1 :: DiagramNodes a0
          -> IO Int32
getCount1 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface DiagramNodeChildren
-- 
-- --------------------------------------------------
data DiagramNodeChildren_ a = DiagramNodeChildren__ 
type DiagramNodeChildren a = IMsoDispObj (DiagramNodeChildren_ a)
iidDiagramNodeChildren :: IID (DiagramNodeChildren ())
iidDiagramNodeChildren =
  mkIID "{000C036F-0000-0000-C000-000000000046}"

getNewEnum1 :: DiagramNodeChildren a0
            -> IO (IUnknown ())
getNewEnum1 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item1 :: a1
      -> DiagramNodeChildren a0
      -> IO (DiagramNode ())
item1 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

addNode :: (Variant a1)
        => a1
        -> MsoDiagramNodeType
        -> DiagramNodeChildren a0
        -> IO (DiagramNode ())
addNode index nodeType iptr =
  do
    ppNewNode <- allocBytes (fromIntegral sizeofForeignPtr)
    index <- marshallVariant index
    nodeType <- marshallMsoDiagramNodeType nodeType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_addNode methPtr iptr index nodeType ppNewNode) 2 iptr
    doThenFree free (readIUnknown False) ppNewNode

foreign import stdcall "prim_Excel_addNode" prim_Excel_addNode :: Ptr () -> Ptr () -> VARIANT -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> IO Int32
selectAll0 :: DiagramNodeChildren a0
           -> IO ()
selectAll0 =
  method0 "SelectAll"
          []

getParent11 :: DiagramNodeChildren a0
            -> IO (IDispatch ())
getParent11 =
  propertyGet "Parent"
              []
              outIDispatch

getCount2 :: DiagramNodeChildren a0
          -> IO Int32
getCount2 =
  propertyGet "Count"
              []
              outInt32

getFirstChild :: DiagramNodeChildren a0
              -> IO (DiagramNode ())
getFirstChild =
  propertyGet "FirstChild"
              []
              outIUnknown

getLastChild :: DiagramNodeChildren a0
             -> IO (DiagramNode ())
getLastChild =
  propertyGet "LastChild"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface DiagramNode
-- 
-- --------------------------------------------------
data DiagramNode_ a = DiagramNode__ 
type DiagramNode a = IMsoDispObj (DiagramNode_ a)
iidDiagramNode :: IID (DiagramNode ())
iidDiagramNode = mkIID "{000C0370-0000-0000-C000-000000000046}"

addNode0 :: MsoRelativeNodePosition
         -> MsoDiagramNodeType
         -> DiagramNode a0
         -> IO (DiagramNode ())
addNode0 pos nodeType iptr =
  do
    newNode <- allocBytes (fromIntegral sizeofForeignPtr)
    pos <- marshallMsoRelativeNodePosition pos
    nodeType <- marshallMsoDiagramNodeType nodeType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_addNode0 methPtr iptr pos nodeType newNode) 0 iptr
    doThenFree free (readIUnknown False) newNode

foreign import stdcall "prim_Excel_addNode0" prim_Excel_addNode0 :: Ptr () -> Ptr () -> Ptr () -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> IO Int32
delete0 :: DiagramNode a0
        -> IO ()
delete0 =
  method0 "Delete"
          []

moveNode :: DiagramNode a1
         -> MsoRelativeNodePosition
         -> DiagramNode a0
         -> IO ()
moveNode pTargetNode pos iptr =
  do
    pTargetNode <- marshallIUnknown pTargetNode
    pos <- marshallMsoRelativeNodePosition pos
    invokeAndCheck (\ methPtr iptr -> withForeignPtr pTargetNode (\ pTargetNode -> prim_Excel_moveNode methPtr iptr pTargetNode pos)) 2 iptr

foreign import stdcall "prim_Excel_moveNode" prim_Excel_moveNode :: Ptr () -> Ptr () -> Ptr (DiagramNode a) -> Ptr () -> IO Int32
replaceNode :: DiagramNode a1
            -> DiagramNode a0
            -> IO ()
replaceNode pTargetNode =
  method0 "ReplaceNode"
          [inIUnknown pTargetNode]

swapNode :: (Variant a2)
         => DiagramNode a1
         -> a2
         -> DiagramNode a0
         -> IO ()
swapNode pTargetNode swapChildren =
  method0 "SwapNode"
          [ inIUnknown pTargetNode
          , inDefaultValue (inInt32 (-1)) inVariant swapChildren
          ]

cloneNode :: Bool
          -> DiagramNode a1
          -> MsoRelativeNodePosition
          -> DiagramNode a0
          -> IO (DiagramNode ())
cloneNode copyChildren pTargetNode pos iptr =
  do
    ppNode <- allocBytes (fromIntegral sizeofForeignPtr)
    copyChildren <- marshallVARIANT_BOOL copyChildren
    pTargetNode <- marshallIUnknown pTargetNode
    pos <- marshallMsoRelativeNodePosition pos
    invokeAndCheck (\ methPtr iptr -> withForeignPtr pTargetNode (\ pTargetNode -> prim_Excel_cloneNode methPtr iptr copyChildren pTargetNode pos ppNode)) 5 iptr
    doThenFree free (readIUnknown False) ppNode

foreign import stdcall "prim_Excel_cloneNode" prim_Excel_cloneNode :: Ptr () -> Ptr () -> Int16 -> Ptr (DiagramNode a) -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> IO Int32
transferChildren :: DiagramNode a1
                 -> DiagramNode a0
                 -> IO ()
transferChildren pReceivingNode =
  method0 "TransferChildren"
          [inIUnknown pReceivingNode]

nextNode :: DiagramNode a0
         -> IO (DiagramNode ())
nextNode =
  function1 "NextNode"
            []
            outIUnknown

prevNode :: DiagramNode a0
         -> IO (DiagramNode ())
prevNode =
  function1 "PrevNode"
            []
            outIUnknown

getParent12 :: DiagramNode a0
            -> IO (IDispatch ())
getParent12 =
  propertyGet "Parent"
              []
              outIDispatch

getChildren :: DiagramNode a0
            -> IO (DiagramNodeChildren ())
getChildren =
  propertyGet "Children"
              []
              outIUnknown

getShape :: DiagramNode a0
         -> IO (Shape ())
getShape =
  propertyGet "Shape"
              []
              outIUnknown

getRoot :: DiagramNode a0
        -> IO (DiagramNode ())
getRoot =
  propertyGet "Root"
              []
              outIUnknown

getDiagram :: DiagramNode a0
           -> IO (Maybe IMsoDiagram)
getDiagram iptr =
  do
    ppDiagram <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getDiagram methPtr iptr ppDiagram) 13 iptr
    doThenFree free (readunique readIMsoDiagram) ppDiagram

foreign import stdcall "dynamic" prim_Excel_getDiagram :: Ptr () -> Ptr () -> Ptr (Ptr IMsoDiagram) -> IO Int32
getLayout :: DiagramNode a0
          -> IO MsoOrgChartLayoutType
getLayout iptr =
  do
    pdgmType <- allocBytes (fromIntegral sizeofMsoOrgChartLayoutType)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getLayout methPtr iptr pdgmType) 14 iptr
    doThenFree free readMsoOrgChartLayoutType pdgmType

foreign import stdcall "dynamic" prim_Excel_getLayout :: Ptr () -> Ptr () -> Ptr MsoOrgChartLayoutType -> IO Int32
setLayout :: MsoOrgChartLayoutType
          -> DiagramNode a0
          -> IO ()
setLayout pdgmType iptr =
  do
    pdgmType <- marshallMsoOrgChartLayoutType pdgmType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setLayout methPtr iptr pdgmType) 15 iptr

foreign import stdcall "prim_Excel_setLayout" prim_Excel_setLayout :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTextShape :: DiagramNode a0
             -> IO (Shape ())
getTextShape =
  propertyGet "TextShape"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IRTDUpdateEvent
-- 
-- --------------------------------------------------
data IRTDUpdateEvent_ a = IRTDUpdateEvent__ 
type IRTDUpdateEvent a = IDispatch (IRTDUpdateEvent_ a)
iidIRTDUpdateEvent :: IID (IRTDUpdateEvent ())
iidIRTDUpdateEvent = mkIID "{A43788C1-D91B-11D3-8F39-00C04F3651B8}"

updateNotify :: IRTDUpdateEvent a0
             -> IO ()
updateNotify =
  method0 "UpdateNotify"
          []

getHeartbeatInterval :: IRTDUpdateEvent a0
                     -> IO Int32
getHeartbeatInterval =
  propertyGet "HeartbeatInterval"
              []
              outInt32

setHeartbeatInterval :: Int32
                     -> IRTDUpdateEvent a0
                     -> IO ()
setHeartbeatInterval plRetVal =
  propertySet "HeartbeatInterval"
              [inInt32 plRetVal]

disconnect :: IRTDUpdateEvent a0
           -> IO ()
disconnect =
  method0 "Disconnect"
          []

-- --------------------------------------------------
-- 
-- interface IRtdServer
-- 
-- --------------------------------------------------
data IRtdServer_ a = IRtdServer__ 
type IRtdServer a = IDispatch (IRtdServer_ a)
iidIRtdServer :: IID (IRtdServer ())
iidIRtdServer = mkIID "{EC0E6191-DB51-11D3-8F3E-00C04F3651B8}"

serverStart :: IRTDUpdateEvent a1
            -> IRtdServer a0
            -> IO Int32
serverStart callbackObject =
  function1 "ServerStart"
            [inIDispatch callbackObject]
            outInt32

connectData :: (Variant a1)
            => Int32
            -> SafeArray a2
            -> Bool
            -> IRtdServer a0
            -> IO (a1, Bool)
connectData topicID strings getNewValues =
  function2 "ConnectData"
            [ inInt32 topicID
            , inSafeArray strings
            ]
            outVariant
            (inoutBool getNewValues)

refreshData :: Int32
            -> IRtdServer a0
            -> IO (SafeArray a1, Int32)
refreshData topicCount =
  function2 "RefreshData"
            []
            outSafeArray
            (inoutInt32 topicCount)

disconnectData :: Int32
               -> IRtdServer a0
               -> IO ()
disconnectData topicID =
  method0 "DisconnectData"
          [inInt32 topicID]

heartbeat :: IRtdServer a0
          -> IO Int32
heartbeat =
  function1 "Heartbeat"
            []
            outInt32

serverTerminate :: IRtdServer a0
                -> IO ()
serverTerminate =
  method0 "ServerTerminate"
          []

-- --------------------------------------------------
-- 
-- interface TextFrame2
-- 
-- --------------------------------------------------
data TextFrame2_ a = TextFrame2__ 
type TextFrame2 a = IMsoDispObj (TextFrame2_ a)
iidTextFrame2 :: IID (TextFrame2 ())
iidTextFrame2 = mkIID "{000C0398-0000-0000-C000-000000000046}"

getParent13 :: TextFrame2 a0
            -> IO (IDispatch ())
getParent13 =
  propertyGet "Parent"
              []
              outIDispatch

getMarginBottom :: TextFrame2 a0
                -> IO Float
getMarginBottom =
  propertyGet "MarginBottom"
              []
              outFloat

setMarginBottom :: Float
                -> TextFrame2 a0
                -> IO ()
setMarginBottom marginBottom =
  propertySet "MarginBottom"
              [inFloat marginBottom]

getMarginLeft :: TextFrame2 a0
              -> IO Float
getMarginLeft =
  propertyGet "MarginLeft"
              []
              outFloat

setMarginLeft :: Float
              -> TextFrame2 a0
              -> IO ()
setMarginLeft marginLeft =
  propertySet "MarginLeft"
              [inFloat marginLeft]

getMarginRight :: TextFrame2 a0
               -> IO Float
getMarginRight =
  propertyGet "MarginRight"
              []
              outFloat

setMarginRight :: Float
               -> TextFrame2 a0
               -> IO ()
setMarginRight marginRight =
  propertySet "MarginRight"
              [inFloat marginRight]

getMarginTop :: TextFrame2 a0
             -> IO Float
getMarginTop =
  propertyGet "MarginTop"
              []
              outFloat

setMarginTop :: Float
             -> TextFrame2 a0
             -> IO ()
setMarginTop marginTop =
  propertySet "MarginTop"
              [inFloat marginTop]

getOrientation :: TextFrame2 a0
               -> IO MsoTextOrientation
getOrientation iptr =
  do
    orientation <- allocBytes (fromIntegral sizeofMsoTextOrientation)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getOrientation methPtr iptr orientation) 9 iptr
    doThenFree free readMsoTextOrientation orientation

foreign import stdcall "dynamic" prim_Excel_getOrientation :: Ptr () -> Ptr () -> Ptr MsoTextOrientation -> IO Int32
setOrientation :: MsoTextOrientation
               -> TextFrame2 a0
               -> IO ()
setOrientation orientation iptr =
  do
    orientation <- marshallMsoTextOrientation orientation
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setOrientation methPtr iptr orientation) 10 iptr

foreign import stdcall "prim_Excel_setOrientation" prim_Excel_setOrientation :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getHorizontalAnchor :: TextFrame2 a0
                    -> IO MsoHorizontalAnchor
getHorizontalAnchor iptr =
  do
    horizontalAnchor <- allocBytes (fromIntegral sizeofMsoHorizontalAnchor)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getHorizontalAnchor methPtr iptr horizontalAnchor) 11 iptr
    doThenFree free readMsoHorizontalAnchor horizontalAnchor

foreign import stdcall "dynamic" prim_Excel_getHorizontalAnchor :: Ptr () -> Ptr () -> Ptr MsoHorizontalAnchor -> IO Int32
setHorizontalAnchor :: MsoHorizontalAnchor
                    -> TextFrame2 a0
                    -> IO ()
setHorizontalAnchor horizontalAnchor iptr =
  do
    horizontalAnchor <- marshallMsoHorizontalAnchor horizontalAnchor
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setHorizontalAnchor methPtr iptr horizontalAnchor) 12 iptr

foreign import stdcall "prim_Excel_setHorizontalAnchor" prim_Excel_setHorizontalAnchor :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getVerticalAnchor :: TextFrame2 a0
                  -> IO MsoVerticalAnchor
getVerticalAnchor iptr =
  do
    verticalAnchor <- allocBytes (fromIntegral sizeofMsoVerticalAnchor)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getVerticalAnchor methPtr iptr verticalAnchor) 13 iptr
    doThenFree free readMsoVerticalAnchor verticalAnchor

foreign import stdcall "dynamic" prim_Excel_getVerticalAnchor :: Ptr () -> Ptr () -> Ptr MsoVerticalAnchor -> IO Int32
setVerticalAnchor :: MsoVerticalAnchor
                  -> TextFrame2 a0
                  -> IO ()
setVerticalAnchor verticalAnchor iptr =
  do
    verticalAnchor <- marshallMsoVerticalAnchor verticalAnchor
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setVerticalAnchor methPtr iptr verticalAnchor) 14 iptr

foreign import stdcall "prim_Excel_setVerticalAnchor" prim_Excel_setVerticalAnchor :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPathFormat :: TextFrame2 a0
              -> IO MsoPathFormat
getPathFormat iptr =
  do
    pathFormat <- allocBytes (fromIntegral sizeofMsoPathFormat)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPathFormat methPtr iptr pathFormat) 15 iptr
    doThenFree free readMsoPathFormat pathFormat

foreign import stdcall "dynamic" prim_Excel_getPathFormat :: Ptr () -> Ptr () -> Ptr MsoPathFormat -> IO Int32
setPathFormat :: MsoPathFormat
              -> TextFrame2 a0
              -> IO ()
setPathFormat pathFormat iptr =
  do
    pathFormat <- marshallMsoPathFormat pathFormat
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setPathFormat methPtr iptr pathFormat) 16 iptr

foreign import stdcall "prim_Excel_setPathFormat" prim_Excel_setPathFormat :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWarpFormat :: TextFrame2 a0
              -> IO MsoWarpFormat
getWarpFormat iptr =
  do
    warpFormat <- allocBytes (fromIntegral sizeofMsoWarpFormat)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getWarpFormat methPtr iptr warpFormat) 17 iptr
    doThenFree free readMsoWarpFormat warpFormat

foreign import stdcall "dynamic" prim_Excel_getWarpFormat :: Ptr () -> Ptr () -> Ptr MsoWarpFormat -> IO Int32
setWarpFormat :: MsoWarpFormat
              -> TextFrame2 a0
              -> IO ()
setWarpFormat warpFormat iptr =
  do
    warpFormat <- marshallMsoWarpFormat warpFormat
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setWarpFormat methPtr iptr warpFormat) 18 iptr

foreign import stdcall "prim_Excel_setWarpFormat" prim_Excel_setWarpFormat :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWordArtformat :: TextFrame2 a0
                 -> IO MsoPresetTextEffect
getWordArtformat iptr =
  do
    wordArtformat <- allocBytes (fromIntegral sizeofMsoPresetTextEffect)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPresetTextEffect methPtr iptr wordArtformat) 19 iptr
    doThenFree free readMsoPresetTextEffect wordArtformat

setWordArtformat :: MsoPresetTextEffect
                 -> TextFrame2 a0
                 -> IO ()
setWordArtformat wordArtformat iptr =
  do
    wordArtformat <- marshallMsoPresetTextEffect wordArtformat
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setWordArtformat methPtr iptr wordArtformat) 20 iptr

foreign import stdcall "prim_Excel_setWordArtformat" prim_Excel_setWordArtformat :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWordWrap :: TextFrame2 a0
            -> IO MsoTriState
getWordWrap iptr =
  do
    wordWrap <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr wordWrap) 21 iptr
    doThenFree free readMsoTriState wordWrap

setWordWrap :: MsoTriState
            -> TextFrame2 a0
            -> IO ()
setWordWrap wordWrap iptr =
  do
    wordWrap <- marshallMsoTriState wordWrap
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setWordWrap methPtr iptr wordWrap) 22 iptr

foreign import stdcall "prim_Excel_setWordWrap" prim_Excel_setWordWrap :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAutoSize :: TextFrame2 a0
            -> IO MsoAutoSize
getAutoSize iptr =
  do
    autoSize <- allocBytes (fromIntegral sizeofMsoAutoSize)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAutoSize methPtr iptr autoSize) 23 iptr
    doThenFree free readMsoAutoSize autoSize

foreign import stdcall "dynamic" prim_Excel_getAutoSize :: Ptr () -> Ptr () -> Ptr MsoAutoSize -> IO Int32
setAutoSize :: MsoAutoSize
            -> TextFrame2 a0
            -> IO ()
setAutoSize autoSize iptr =
  do
    autoSize <- marshallMsoAutoSize autoSize
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setAutoSize methPtr iptr autoSize) 24 iptr

foreign import stdcall "prim_Excel_setAutoSize" prim_Excel_setAutoSize :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getThreeD :: TextFrame2 a0
          -> IO (ThreeDFormat ())
getThreeD =
  propertyGet "ThreeD"
              []
              outIUnknown

getHasText :: TextFrame2 a0
           -> IO MsoTriState
getHasText iptr =
  do
    pHasText <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAccent methPtr iptr pHasText) 26 iptr
    doThenFree free readMsoTriState pHasText

getTextRange :: TextFrame2 a0
             -> IO (Maybe TextRange2)
getTextRange iptr =
  do
    range <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getTextRange methPtr iptr range) 27 iptr
    doThenFree free (readunique readTextRange2) range

foreign import stdcall "dynamic" prim_Excel_getTextRange :: Ptr () -> Ptr () -> Ptr (Ptr TextRange2) -> IO Int32
getColumn :: TextFrame2 a0
          -> IO (Maybe TextColumn2)
getColumn iptr =
  do
    column <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getColumn methPtr iptr column) 28 iptr
    doThenFree free (readunique readTextColumn2) column

foreign import stdcall "dynamic" prim_Excel_getColumn :: Ptr () -> Ptr () -> Ptr (Ptr TextColumn2) -> IO Int32
getRuler :: TextFrame2 a0
         -> IO (Maybe Ruler2)
getRuler iptr =
  do
    ruler <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getRuler methPtr iptr ruler) 29 iptr
    doThenFree free (readunique readRuler2) ruler

foreign import stdcall "dynamic" prim_Excel_getRuler :: Ptr () -> Ptr () -> Ptr (Ptr Ruler2) -> IO Int32
deleteText :: TextFrame2 a0
           -> IO ()
deleteText =
  method0 "DeleteText"
          []

data Constants
 = XlRTL
 | XlLTR
 | XlContext
 | XlLatin
 | XlBidi
 | XlTop
 | XlSimple
 | XlRight
 | XlOff
 | XlNotes
 | XlNone
 | XlModule
 | XlManual
 | XlLow
 | XlLeft
 | XlJustify
 | XlHigh
 | XlGray75
 | XlGray50
 | XlGray25
 | XlFormats
 | XlDistributed
 | XlCustom
 | XlCombination
 | XlCenter
 | XlBottom
 | XlAutomatic
 | XlAll
 | Xl3DSurface
 | Xl3DBar
 | XlDefaultAutoFormat
 | XlAbove
 | XlFirst
 | XlBoth
 | XlFixedValue
 | XlOn
 | XlSolid
 | XlSquare
 | XlFullScript
 | XlLogicalCursor
 | XlSystem
 | XlBelow
 | XlClassic1
 | XlDirect
 | XlDoubleQuote
 | XlExcelMenus
 | XlGeneral
 | XlIcons
 | XlLast
 | XlNarrow
 | XlShort
 | XlTiled
 | XlToolbar
 | XlWorksheet4
 | XlTopToBottom
 | XlCorner
 | XlDiamond
 | XlInside
 | XlPercent
 | XlPlusValues
 | XlShowValue
 | XlSingle
 | XlToolbarButton
 | XlBar
 | XlMaximum
 | XlTransparent
 | XlPartialScript
 | XlVisualCursor
 | XlGregorian
 | XlConstants
 | XlContents
 | XlChart4
 | XlClassic2
 | XlAdd
 | XlInteger
 | XlLotusHelp
 | XlMixed
 | XlOpen
 | XlSemiautomatic
 | XlSingleQuote
 | XlStrict
 | XlLeftToRight
 | XlVeryHidden
 | XlMinusValues
 | XlShowPercent
 | XlTriangle
 | XlColumn
 | XlOpaque
 | XlMixedScript
 | XlPartial
 | XlHindiNumerals
 | XlBidiCalendar
 | XlScale
 | XlClosed
 | XlClassic3
 | XlExtended
 | XlLong
 | XlNoDocuments
 | XlOutside
 | XlSubtract
 | XlWide
 | XlWorksheetCell
 | XlCross
 | XlNextToAxis
 | XlShowLabel
 | XlSingleAccounting
 | XlStError
 | XlMinimum
 | XlMixedAuthorizedScript
 | XlComplete
 | XlAccounting1
 | XlDoubleOpen
 | XlMultiply
 | XlReference
 | XlDoubleAccounting
 | XlShowLabelAndPercent
 | XlStar
 | XlAccounting2
 | XlDivide
 | XlDoubleClosed
 | XlFill
 | XlFloating
 | XlFormula
 | XlWorksheetShort
 | XlChartShort
 | XlAccounting3
 | XlWorkbookTab
 | XlColor1
 | XlCascade
 | XlCenterAcrossSelection
 | XlMacrosheetCell
 | XlAllExceptBorders
 | XlCircle
 | XlColor2
 | XlTitleBar
 | XlChecker
 | XlPlus
 | XlColor3
 | XlDesktop
 | XlSemiGray75
 | XlList1
 | XlLightHorizontal
 | XlLastCell
 | XlList2
 | XlWatchPane
 | XlLightVertical
 | XlImmediatePane
 | XlList3
 | XlVisible
 | XlLightDown
 | Xl3DEffects1
 | XlDebugCodePane
 | XlLightUp
 | Xl3DEffects2
 | XlDrawingObject
 | XlGrid
 | XlLocalFormat1
 | XlCrissCross
 | XlLocalFormat2
 | XlTextBox
 | XlGray16
 | XlChartSeries
 | XlAccounting4
 | XlGray8
 | XlChartTitles
 | XlEntireChart
 | XlGridline
 
instance Enum (Constants) where
  fromEnum v =
    case v of
       XlRTL -> (-5004)
       XlLTR -> (-5003)
       XlContext -> (-5002)
       XlLatin -> (-5001)
       XlBidi -> (-5000)
       XlTop -> (-4160)
       XlSimple -> (-4154)
       XlRight -> (-4152)
       XlOff -> (-4146)
       XlNotes -> (-4144)
       XlNone -> (-4142)
       XlModule -> (-4141)
       XlManual -> (-4135)
       XlLow -> (-4134)
       XlLeft -> (-4131)
       XlJustify -> (-4130)
       XlHigh -> (-4127)
       XlGray75 -> (-4126)
       XlGray50 -> (-4125)
       XlGray25 -> (-4124)
       XlFormats -> (-4122)
       XlDistributed -> (-4117)
       XlCustom -> (-4114)
       XlCombination -> (-4111)
       XlCenter -> (-4108)
       XlBottom -> (-4107)
       XlAutomatic -> (-4105)
       XlAll -> (-4104)
       Xl3DSurface -> (-4103)
       Xl3DBar -> (-4099)
       XlDefaultAutoFormat -> (-1)
       XlAbove -> 0
       XlFirst -> 0
       XlBoth -> 1
       XlFixedValue -> 1
       XlOn -> 1
       XlSolid -> 1
       XlSquare -> 1
       XlFullScript -> 1
       XlLogicalCursor -> 1
       XlSystem -> 1
       XlBelow -> 1
       XlClassic1 -> 1
       XlDirect -> 1
       XlDoubleQuote -> 1
       XlExcelMenus -> 1
       XlGeneral -> 1
       XlIcons -> 1
       XlLast -> 1
       XlNarrow -> 1
       XlShort -> 1
       XlTiled -> 1
       XlToolbar -> 1
       XlWorksheet4 -> 1
       XlTopToBottom -> 1
       XlCorner -> 2
       XlDiamond -> 2
       XlInside -> 2
       XlPercent -> 2
       XlPlusValues -> 2
       XlShowValue -> 2
       XlSingle -> 2
       XlToolbarButton -> 2
       XlBar -> 2
       XlMaximum -> 2
       XlTransparent -> 2
       XlPartialScript -> 2
       XlVisualCursor -> 2
       XlGregorian -> 2
       XlConstants -> 2
       XlContents -> 2
       XlChart4 -> 2
       XlClassic2 -> 2
       XlAdd -> 2
       XlInteger -> 2
       XlLotusHelp -> 2
       XlMixed -> 2
       XlOpen -> 2
       XlSemiautomatic -> 2
       XlSingleQuote -> 2
       XlStrict -> 2
       XlLeftToRight -> 2
       XlVeryHidden -> 2
       XlMinusValues -> 3
       XlShowPercent -> 3
       XlTriangle -> 3
       XlColumn -> 3
       XlOpaque -> 3
       XlMixedScript -> 3
       XlPartial -> 3
       XlHindiNumerals -> 3
       XlBidiCalendar -> 3
       XlScale -> 3
       XlClosed -> 3
       XlClassic3 -> 3
       XlExtended -> 3
       XlLong -> 3
       XlNoDocuments -> 3
       XlOutside -> 3
       XlSubtract -> 3
       XlWide -> 3
       XlWorksheetCell -> 3
       XlCross -> 4
       XlNextToAxis -> 4
       XlShowLabel -> 4
       XlSingleAccounting -> 4
       XlStError -> 4
       XlMinimum -> 4
       XlMixedAuthorizedScript -> 4
       XlComplete -> 4
       XlAccounting1 -> 4
       XlDoubleOpen -> 4
       XlMultiply -> 4
       XlReference -> 4
       XlDoubleAccounting -> 5
       XlShowLabelAndPercent -> 5
       XlStar -> 5
       XlAccounting2 -> 5
       XlDivide -> 5
       XlDoubleClosed -> 5
       XlFill -> 5
       XlFloating -> 5
       XlFormula -> 5
       XlWorksheetShort -> 5
       XlChartShort -> 6
       XlAccounting3 -> 6
       XlWorkbookTab -> 6
       XlColor1 -> 7
       XlCascade -> 7
       XlCenterAcrossSelection -> 7
       XlMacrosheetCell -> 7
       XlAllExceptBorders -> 7
       XlCircle -> 8
       XlColor2 -> 8
       XlTitleBar -> 8
       XlChecker -> 9
       XlPlus -> 9
       XlColor3 -> 9
       XlDesktop -> 9
       XlSemiGray75 -> 10
       XlList1 -> 10
       XlLightHorizontal -> 11
       XlLastCell -> 11
       XlList2 -> 11
       XlWatchPane -> 11
       XlLightVertical -> 12
       XlImmediatePane -> 12
       XlList3 -> 12
       XlVisible -> 12
       XlLightDown -> 13
       Xl3DEffects1 -> 13
       XlDebugCodePane -> 13
       XlLightUp -> 14
       Xl3DEffects2 -> 14
       XlDrawingObject -> 14
       XlGrid -> 15
       XlLocalFormat1 -> 15
       XlCrissCross -> 16
       XlLocalFormat2 -> 16
       XlTextBox -> 16
       XlGray16 -> 17
       XlChartSeries -> 17
       XlAccounting4 -> 17
       XlGray8 -> 18
       XlChartTitles -> 18
       XlEntireChart -> 20
       XlGridline -> 22
  
  toEnum v =
    case v of
       (-5004) -> XlRTL
       (-5003) -> XlLTR
       (-5002) -> XlContext
       (-5001) -> XlLatin
       (-5000) -> XlBidi
       (-4160) -> XlTop
       (-4154) -> XlSimple
       (-4152) -> XlRight
       (-4146) -> XlOff
       (-4144) -> XlNotes
       (-4142) -> XlNone
       (-4141) -> XlModule
       (-4135) -> XlManual
       (-4134) -> XlLow
       (-4131) -> XlLeft
       (-4130) -> XlJustify
       (-4127) -> XlHigh
       (-4126) -> XlGray75
       (-4125) -> XlGray50
       (-4124) -> XlGray25
       (-4122) -> XlFormats
       (-4117) -> XlDistributed
       (-4114) -> XlCustom
       (-4111) -> XlCombination
       (-4108) -> XlCenter
       (-4107) -> XlBottom
       (-4105) -> XlAutomatic
       (-4104) -> XlAll
       (-4103) -> Xl3DSurface
       (-4099) -> Xl3DBar
       (-1) -> XlDefaultAutoFormat
       0 -> XlAbove
       0 -> XlFirst
       1 -> XlBoth
       1 -> XlFixedValue
       1 -> XlOn
       1 -> XlSolid
       1 -> XlSquare
       1 -> XlFullScript
       1 -> XlLogicalCursor
       1 -> XlSystem
       1 -> XlBelow
       1 -> XlClassic1
       1 -> XlDirect
       1 -> XlDoubleQuote
       1 -> XlExcelMenus
       1 -> XlGeneral
       1 -> XlIcons
       1 -> XlLast
       1 -> XlNarrow
       1 -> XlShort
       1 -> XlTiled
       1 -> XlToolbar
       1 -> XlWorksheet4
       1 -> XlTopToBottom
       2 -> XlCorner
       2 -> XlDiamond
       2 -> XlInside
       2 -> XlPercent
       2 -> XlPlusValues
       2 -> XlShowValue
       2 -> XlSingle
       2 -> XlToolbarButton
       2 -> XlBar
       2 -> XlMaximum
       2 -> XlTransparent
       2 -> XlPartialScript
       2 -> XlVisualCursor
       2 -> XlGregorian
       2 -> XlConstants
       2 -> XlContents
       2 -> XlChart4
       2 -> XlClassic2
       2 -> XlAdd
       2 -> XlInteger
       2 -> XlLotusHelp
       2 -> XlMixed
       2 -> XlOpen
       2 -> XlSemiautomatic
       2 -> XlSingleQuote
       2 -> XlStrict
       2 -> XlLeftToRight
       2 -> XlVeryHidden
       3 -> XlMinusValues
       3 -> XlShowPercent
       3 -> XlTriangle
       3 -> XlColumn
       3 -> XlOpaque
       3 -> XlMixedScript
       3 -> XlPartial
       3 -> XlHindiNumerals
       3 -> XlBidiCalendar
       3 -> XlScale
       3 -> XlClosed
       3 -> XlClassic3
       3 -> XlExtended
       3 -> XlLong
       3 -> XlNoDocuments
       3 -> XlOutside
       3 -> XlSubtract
       3 -> XlWide
       3 -> XlWorksheetCell
       4 -> XlCross
       4 -> XlNextToAxis
       4 -> XlShowLabel
       4 -> XlSingleAccounting
       4 -> XlStError
       4 -> XlMinimum
       4 -> XlMixedAuthorizedScript
       4 -> XlComplete
       4 -> XlAccounting1
       4 -> XlDoubleOpen
       4 -> XlMultiply
       4 -> XlReference
       5 -> XlDoubleAccounting
       5 -> XlShowLabelAndPercent
       5 -> XlStar
       5 -> XlAccounting2
       5 -> XlDivide
       5 -> XlDoubleClosed
       5 -> XlFill
       5 -> XlFloating
       5 -> XlFormula
       5 -> XlWorksheetShort
       6 -> XlChartShort
       6 -> XlAccounting3
       6 -> XlWorkbookTab
       7 -> XlColor1
       7 -> XlCascade
       7 -> XlCenterAcrossSelection
       7 -> XlMacrosheetCell
       7 -> XlAllExceptBorders
       8 -> XlCircle
       8 -> XlColor2
       8 -> XlTitleBar
       9 -> XlChecker
       9 -> XlPlus
       9 -> XlColor3
       9 -> XlDesktop
       10 -> XlSemiGray75
       10 -> XlList1
       11 -> XlLightHorizontal
       11 -> XlLastCell
       11 -> XlList2
       11 -> XlWatchPane
       12 -> XlLightVertical
       12 -> XlImmediatePane
       12 -> XlList3
       12 -> XlVisible
       13 -> XlLightDown
       13 -> Xl3DEffects1
       13 -> XlDebugCodePane
       14 -> XlLightUp
       14 -> Xl3DEffects2
       14 -> XlDrawingObject
       15 -> XlGrid
       15 -> XlLocalFormat1
       16 -> XlCrissCross
       16 -> XlLocalFormat2
       16 -> XlTextBox
       17 -> XlGray16
       17 -> XlChartSeries
       17 -> XlAccounting4
       18 -> XlGray8
       18 -> XlChartTitles
       20 -> XlEntireChart
       22 -> XlGridline
       _ -> error "unmarshallConstants: illegal enum value "
  
data XlCreator = XlCreatorCode 
instance Enum (XlCreator) where
  fromEnum v = case v of XlCreatorCode -> 1480803660
  
  toEnum v =
    case v of
       1480803660 -> XlCreatorCode
       _ -> error "unmarshallXlCreator: illegal enum value "
  
data XlChartGallery
 = XlBuiltIn
 | XlUserDefined
 | XlAnyGallery
 
instance Enum (XlChartGallery) where
  fromEnum v =
    case v of
       XlBuiltIn -> 21
       XlUserDefined -> 22
       XlAnyGallery -> 23
  
  toEnum v =
    case v of
       21 -> XlBuiltIn
       22 -> XlUserDefined
       23 -> XlAnyGallery
       _ -> error "unmarshallXlChartGallery: illegal enum value "
  
data XlColorIndex
 = XlColorIndexNone
 | XlColorIndexAutomatic
 
instance Enum (XlColorIndex) where
  fromEnum v =
    case v of
       XlColorIndexNone -> (-4142)
       XlColorIndexAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4142) -> XlColorIndexNone
       (-4105) -> XlColorIndexAutomatic
       _ -> error "unmarshallXlColorIndex: illegal enum value "
  
data XlEndStyleCap
 = XlEndStyleCapList__ [XlEndStyleCap]
 | XlCap
 | XlNoCap
 
instance Flags (XlEndStyleCap) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlEndStyleCap) where
  fromEnum v =
    case v of
       (XlEndStyleCapList__ xs) -> orList (map fromEnum xs)
       XlCap -> 1
       XlNoCap -> 2
  
  toEnum v =
    case v of
       1 -> XlCap
       2 -> XlNoCap
       x -> XlEndStyleCapList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlEndStyleCap: illegal enum value "
  
data XlRowCol
 = XlRowColList__ [XlRowCol]
 | XlRows
 | XlColumns
 
instance Flags (XlRowCol) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlRowCol) where
  fromEnum v =
    case v of
       (XlRowColList__ xs) -> orList (map fromEnum xs)
       XlRows -> 1
       XlColumns -> 2
  
  toEnum v =
    case v of
       1 -> XlRows
       2 -> XlColumns
       x -> XlRowColList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                 then Just (toEnum (fromIntegral val))
                                                 else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlRowCol: illegal enum value "
  
data XlScaleType
 = XlScaleLogarithmic
 | XlScaleLinear
 
instance Enum (XlScaleType) where
  fromEnum v =
    case v of
       XlScaleLogarithmic -> (-4133)
       XlScaleLinear -> (-4132)
  
  toEnum v =
    case v of
       (-4133) -> XlScaleLogarithmic
       (-4132) -> XlScaleLinear
       _ -> error "unmarshallXlScaleType: illegal enum value "
  
data XlDataSeriesType
 = XlDataSeriesLinear
 | XlGrowth
 | XlChronological
 | XlAutoFill
 
instance Enum (XlDataSeriesType) where
  fromEnum v =
    case v of
       XlDataSeriesLinear -> (-4132)
       XlGrowth -> 2
       XlChronological -> 3
       XlAutoFill -> 4
  
  toEnum v =
    case v of
       (-4132) -> XlDataSeriesLinear
       2 -> XlGrowth
       3 -> XlChronological
       4 -> XlAutoFill
       _ -> error "unmarshallXlDataSeriesType: illegal enum value "
  
data XlAxisCrosses
 = XlAxisCrossesCustom
 | XlAxisCrossesAutomatic
 | XlAxisCrossesMaximum
 | XlAxisCrossesMinimum
 
instance Enum (XlAxisCrosses) where
  fromEnum v =
    case v of
       XlAxisCrossesCustom -> (-4114)
       XlAxisCrossesAutomatic -> (-4105)
       XlAxisCrossesMaximum -> 2
       XlAxisCrossesMinimum -> 4
  
  toEnum v =
    case v of
       (-4114) -> XlAxisCrossesCustom
       (-4105) -> XlAxisCrossesAutomatic
       2 -> XlAxisCrossesMaximum
       4 -> XlAxisCrossesMinimum
       _ -> error "unmarshallXlAxisCrosses: illegal enum value "
  
data XlAxisGroup
 = XlAxisGroupList__ [XlAxisGroup]
 | XlPrimary
 | XlSecondary
 
instance Flags (XlAxisGroup) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlAxisGroup) where
  fromEnum v =
    case v of
       (XlAxisGroupList__ xs) -> orList (map fromEnum xs)
       XlPrimary -> 1
       XlSecondary -> 2
  
  toEnum v =
    case v of
       1 -> XlPrimary
       2 -> XlSecondary
       x -> XlAxisGroupList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlAxisGroup: illegal enum value "
  
data XlBackground
 = XlBackgroundAutomatic
 | XlBackgroundTransparent
 | XlBackgroundOpaque
 
instance Enum (XlBackground) where
  fromEnum v =
    case v of
       XlBackgroundAutomatic -> (-4105)
       XlBackgroundTransparent -> 2
       XlBackgroundOpaque -> 3
  
  toEnum v =
    case v of
       (-4105) -> XlBackgroundAutomatic
       2 -> XlBackgroundTransparent
       3 -> XlBackgroundOpaque
       _ -> error "unmarshallXlBackground: illegal enum value "
  
data XlWindowState
 = XlNormal
 | XlMinimized
 | XlMaximized
 
instance Enum (XlWindowState) where
  fromEnum v =
    case v of
       XlNormal -> (-4143)
       XlMinimized -> (-4140)
       XlMaximized -> (-4137)
  
  toEnum v =
    case v of
       (-4143) -> XlNormal
       (-4140) -> XlMinimized
       (-4137) -> XlMaximized
       _ -> error "unmarshallXlWindowState: illegal enum value "
  
data XlAxisType
 = XlCategory
 | XlValue
 | XlSeriesAxis
 
instance Enum (XlAxisType) where
  fromEnum v =
    case v of
       XlCategory -> 1
       XlValue -> 2
       XlSeriesAxis -> 3
  
  toEnum v =
    case v of
       1 -> XlCategory
       2 -> XlValue
       3 -> XlSeriesAxis
       _ -> error "unmarshallXlAxisType: illegal enum value "
  
data XlArrowHeadLength
 = XlArrowHeadLengthMedium
 | XlArrowHeadLengthShort
 | XlArrowHeadLengthLong
 
instance Enum (XlArrowHeadLength) where
  fromEnum v =
    case v of
       XlArrowHeadLengthMedium -> (-4138)
       XlArrowHeadLengthShort -> 1
       XlArrowHeadLengthLong -> 3
  
  toEnum v =
    case v of
       (-4138) -> XlArrowHeadLengthMedium
       1 -> XlArrowHeadLengthShort
       3 -> XlArrowHeadLengthLong
       _ -> error "unmarshallXlArrowHeadLength: illegal enum value "
  
data XlVAlign
 = XlVAlignTop
 | XlVAlignJustify
 | XlVAlignDistributed
 | XlVAlignCenter
 | XlVAlignBottom
 
instance Enum (XlVAlign) where
  fromEnum v =
    case v of
       XlVAlignTop -> (-4160)
       XlVAlignJustify -> (-4130)
       XlVAlignDistributed -> (-4117)
       XlVAlignCenter -> (-4108)
       XlVAlignBottom -> (-4107)
  
  toEnum v =
    case v of
       (-4160) -> XlVAlignTop
       (-4130) -> XlVAlignJustify
       (-4117) -> XlVAlignDistributed
       (-4108) -> XlVAlignCenter
       (-4107) -> XlVAlignBottom
       _ -> error "unmarshallXlVAlign: illegal enum value "
  
data XlTickMark
 = XlTickMarkNone
 | XlTickMarkInside
 | XlTickMarkOutside
 | XlTickMarkCross
 
instance Enum (XlTickMark) where
  fromEnum v =
    case v of
       XlTickMarkNone -> (-4142)
       XlTickMarkInside -> 2
       XlTickMarkOutside -> 3
       XlTickMarkCross -> 4
  
  toEnum v =
    case v of
       (-4142) -> XlTickMarkNone
       2 -> XlTickMarkInside
       3 -> XlTickMarkOutside
       4 -> XlTickMarkCross
       _ -> error "unmarshallXlTickMark: illegal enum value "
  
data XlErrorBarDirection
 = XlX
 | XlY
 
instance Enum (XlErrorBarDirection) where
  fromEnum v =
    case v of
       XlX -> (-4168)
       XlY -> 1
  
  toEnum v =
    case v of
       (-4168) -> XlX
       1 -> XlY
       _ -> error "unmarshallXlErrorBarDirection: illegal enum value "
  
data XlErrorBarInclude
 = XlErrorBarIncludeNone
 | XlErrorBarIncludeBoth
 | XlErrorBarIncludePlusValues
 | XlErrorBarIncludeMinusValues
 
instance Enum (XlErrorBarInclude) where
  fromEnum v =
    case v of
       XlErrorBarIncludeNone -> (-4142)
       XlErrorBarIncludeBoth -> 1
       XlErrorBarIncludePlusValues -> 2
       XlErrorBarIncludeMinusValues -> 3
  
  toEnum v =
    case v of
       (-4142) -> XlErrorBarIncludeNone
       1 -> XlErrorBarIncludeBoth
       2 -> XlErrorBarIncludePlusValues
       3 -> XlErrorBarIncludeMinusValues
       _ -> error "unmarshallXlErrorBarInclude: illegal enum value "
  
data XlDisplayBlanksAs
 = XlNotPlotted
 | XlZero
 | XlInterpolated
 
instance Enum (XlDisplayBlanksAs) where
  fromEnum v =
    case v of
       XlNotPlotted -> 1
       XlZero -> 2
       XlInterpolated -> 3
  
  toEnum v =
    case v of
       1 -> XlNotPlotted
       2 -> XlZero
       3 -> XlInterpolated
       _ -> error "unmarshallXlDisplayBlanksAs: illegal enum value "
  
data XlArrowHeadStyle
 = XlArrowHeadStyleNone
 | XlArrowHeadStyleOpen
 | XlArrowHeadStyleClosed
 | XlArrowHeadStyleDoubleOpen
 | XlArrowHeadStyleDoubleClosed
 
instance Enum (XlArrowHeadStyle) where
  fromEnum v =
    case v of
       XlArrowHeadStyleNone -> (-4142)
       XlArrowHeadStyleOpen -> 2
       XlArrowHeadStyleClosed -> 3
       XlArrowHeadStyleDoubleOpen -> 4
       XlArrowHeadStyleDoubleClosed -> 5
  
  toEnum v =
    case v of
       (-4142) -> XlArrowHeadStyleNone
       2 -> XlArrowHeadStyleOpen
       3 -> XlArrowHeadStyleClosed
       4 -> XlArrowHeadStyleDoubleOpen
       5 -> XlArrowHeadStyleDoubleClosed
       _ -> error "unmarshallXlArrowHeadStyle: illegal enum value "
  
data XlArrowHeadWidth
 = XlArrowHeadWidthMedium
 | XlArrowHeadWidthNarrow
 | XlArrowHeadWidthWide
 
instance Enum (XlArrowHeadWidth) where
  fromEnum v =
    case v of
       XlArrowHeadWidthMedium -> (-4138)
       XlArrowHeadWidthNarrow -> 1
       XlArrowHeadWidthWide -> 3
  
  toEnum v =
    case v of
       (-4138) -> XlArrowHeadWidthMedium
       1 -> XlArrowHeadWidthNarrow
       3 -> XlArrowHeadWidthWide
       _ -> error "unmarshallXlArrowHeadWidth: illegal enum value "
  
data XlHAlign
 = XlHAlignRight
 | XlHAlignLeft
 | XlHAlignJustify
 | XlHAlignDistributed
 | XlHAlignCenter
 | XlHAlignGeneral
 | XlHAlignFill
 | XlHAlignCenterAcrossSelection
 
instance Enum (XlHAlign) where
  fromEnum v =
    case v of
       XlHAlignRight -> (-4152)
       XlHAlignLeft -> (-4131)
       XlHAlignJustify -> (-4130)
       XlHAlignDistributed -> (-4117)
       XlHAlignCenter -> (-4108)
       XlHAlignGeneral -> 1
       XlHAlignFill -> 5
       XlHAlignCenterAcrossSelection -> 7
  
  toEnum v =
    case v of
       (-4152) -> XlHAlignRight
       (-4131) -> XlHAlignLeft
       (-4130) -> XlHAlignJustify
       (-4117) -> XlHAlignDistributed
       (-4108) -> XlHAlignCenter
       1 -> XlHAlignGeneral
       5 -> XlHAlignFill
       7 -> XlHAlignCenterAcrossSelection
       _ -> error "unmarshallXlHAlign: illegal enum value "
  
data XlTickLabelPosition
 = XlTickLabelPositionNone
 | XlTickLabelPositionLow
 | XlTickLabelPositionHigh
 | XlTickLabelPositionNextToAxis
 
instance Enum (XlTickLabelPosition) where
  fromEnum v =
    case v of
       XlTickLabelPositionNone -> (-4142)
       XlTickLabelPositionLow -> (-4134)
       XlTickLabelPositionHigh -> (-4127)
       XlTickLabelPositionNextToAxis -> 4
  
  toEnum v =
    case v of
       (-4142) -> XlTickLabelPositionNone
       (-4134) -> XlTickLabelPositionLow
       (-4127) -> XlTickLabelPositionHigh
       4 -> XlTickLabelPositionNextToAxis
       _ -> error "unmarshallXlTickLabelPosition: illegal enum value "
  
data XlLegendPosition
 = XlLegendPositionCustom
 | XlLegendPositionTop
 | XlLegendPositionRight
 | XlLegendPositionLeft
 | XlLegendPositionBottom
 | XlLegendPositionCorner
 
instance Enum (XlLegendPosition) where
  fromEnum v =
    case v of
       XlLegendPositionCustom -> (-4161)
       XlLegendPositionTop -> (-4160)
       XlLegendPositionRight -> (-4152)
       XlLegendPositionLeft -> (-4131)
       XlLegendPositionBottom -> (-4107)
       XlLegendPositionCorner -> 2
  
  toEnum v =
    case v of
       (-4161) -> XlLegendPositionCustom
       (-4160) -> XlLegendPositionTop
       (-4152) -> XlLegendPositionRight
       (-4131) -> XlLegendPositionLeft
       (-4107) -> XlLegendPositionBottom
       2 -> XlLegendPositionCorner
       _ -> error "unmarshallXlLegendPosition: illegal enum value "
  
data XlChartPictureType
 = XlStretch
 | XlStack
 | XlStackScale
 
instance Enum (XlChartPictureType) where
  fromEnum v =
    case v of
       XlStretch -> 1
       XlStack -> 2
       XlStackScale -> 3
  
  toEnum v =
    case v of
       1 -> XlStretch
       2 -> XlStack
       3 -> XlStackScale
       _ -> error "unmarshallXlChartPictureType: illegal enum value "
  
data XlChartPicturePlacement
 = XlSides
 | XlEnd
 | XlEndSides
 | XlFront
 | XlFrontSides
 | XlFrontEnd
 | XlAllFaces
 
instance Enum (XlChartPicturePlacement) where
  fromEnum v =
    case v of
       XlSides -> 1
       XlEnd -> 2
       XlEndSides -> 3
       XlFront -> 4
       XlFrontSides -> 5
       XlFrontEnd -> 6
       XlAllFaces -> 7
  
  toEnum v =
    case v of
       1 -> XlSides
       2 -> XlEnd
       3 -> XlEndSides
       4 -> XlFront
       5 -> XlFrontSides
       6 -> XlFrontEnd
       7 -> XlAllFaces
       _ -> error "unmarshallXlChartPicturePlacement: illegal enum value "
  
data XlOrientation
 = XlUpward
 | XlDownward
 | XlVertical
 | XlHorizontal
 
instance Enum (XlOrientation) where
  fromEnum v =
    case v of
       XlUpward -> (-4171)
       XlDownward -> (-4170)
       XlVertical -> (-4166)
       XlHorizontal -> (-4128)
  
  toEnum v =
    case v of
       (-4171) -> XlUpward
       (-4170) -> XlDownward
       (-4166) -> XlVertical
       (-4128) -> XlHorizontal
       _ -> error "unmarshallXlOrientation: illegal enum value "
  
data XlTickLabelOrientation
 = XlTickLabelOrientationUpward
 | XlTickLabelOrientationDownward
 | XlTickLabelOrientationVertical
 | XlTickLabelOrientationHorizontal
 | XlTickLabelOrientationAutomatic
 
instance Enum (XlTickLabelOrientation) where
  fromEnum v =
    case v of
       XlTickLabelOrientationUpward -> (-4171)
       XlTickLabelOrientationDownward -> (-4170)
       XlTickLabelOrientationVertical -> (-4166)
       XlTickLabelOrientationHorizontal -> (-4128)
       XlTickLabelOrientationAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4171) -> XlTickLabelOrientationUpward
       (-4170) -> XlTickLabelOrientationDownward
       (-4166) -> XlTickLabelOrientationVertical
       (-4128) -> XlTickLabelOrientationHorizontal
       (-4105) -> XlTickLabelOrientationAutomatic
       _ -> error "unmarshallXlTickLabelOrientation: illegal enum value "
  
data XlBorderWeight
 = XlMedium
 | XlHairline
 | XlThin
 | XlThick
 
instance Enum (XlBorderWeight) where
  fromEnum v =
    case v of
       XlMedium -> (-4138)
       XlHairline -> 1
       XlThin -> 2
       XlThick -> 4
  
  toEnum v =
    case v of
       (-4138) -> XlMedium
       1 -> XlHairline
       2 -> XlThin
       4 -> XlThick
       _ -> error "unmarshallXlBorderWeight: illegal enum value "
  
data XlDataSeriesDate
 = XlDay
 | XlWeekday
 | XlMonth
 | XlYear
 
instance Enum (XlDataSeriesDate) where
  fromEnum v =
    case v of
       XlDay -> 1
       XlWeekday -> 2
       XlMonth -> 3
       XlYear -> 4
  
  toEnum v =
    case v of
       1 -> XlDay
       2 -> XlWeekday
       3 -> XlMonth
       4 -> XlYear
       _ -> error "unmarshallXlDataSeriesDate: illegal enum value "
  
data XlUnderlineStyle
 = XlUnderlineStyleNone
 | XlUnderlineStyleDouble
 | XlUnderlineStyleSingle
 | XlUnderlineStyleSingleAccounting
 | XlUnderlineStyleDoubleAccounting
 
instance Enum (XlUnderlineStyle) where
  fromEnum v =
    case v of
       XlUnderlineStyleNone -> (-4142)
       XlUnderlineStyleDouble -> (-4119)
       XlUnderlineStyleSingle -> 2
       XlUnderlineStyleSingleAccounting -> 4
       XlUnderlineStyleDoubleAccounting -> 5
  
  toEnum v =
    case v of
       (-4142) -> XlUnderlineStyleNone
       (-4119) -> XlUnderlineStyleDouble
       2 -> XlUnderlineStyleSingle
       4 -> XlUnderlineStyleSingleAccounting
       5 -> XlUnderlineStyleDoubleAccounting
       _ -> error "unmarshallXlUnderlineStyle: illegal enum value "
  
data XlErrorBarType
 = XlErrorBarTypeStDev
 | XlErrorBarTypeCustom
 | XlErrorBarTypeFixedValue
 | XlErrorBarTypePercent
 | XlErrorBarTypeStError
 
instance Enum (XlErrorBarType) where
  fromEnum v =
    case v of
       XlErrorBarTypeStDev -> (-4155)
       XlErrorBarTypeCustom -> (-4114)
       XlErrorBarTypeFixedValue -> 1
       XlErrorBarTypePercent -> 2
       XlErrorBarTypeStError -> 4
  
  toEnum v =
    case v of
       (-4155) -> XlErrorBarTypeStDev
       (-4114) -> XlErrorBarTypeCustom
       1 -> XlErrorBarTypeFixedValue
       2 -> XlErrorBarTypePercent
       4 -> XlErrorBarTypeStError
       _ -> error "unmarshallXlErrorBarType: illegal enum value "
  
data XlTrendlineType
 = XlLogarithmic
 | XlLinear
 | XlPolynomial
 | XlPower
 | XlExponential
 | XlMovingAvg
 
instance Enum (XlTrendlineType) where
  fromEnum v =
    case v of
       XlLogarithmic -> (-4133)
       XlLinear -> (-4132)
       XlPolynomial -> 3
       XlPower -> 4
       XlExponential -> 5
       XlMovingAvg -> 6
  
  toEnum v =
    case v of
       (-4133) -> XlLogarithmic
       (-4132) -> XlLinear
       3 -> XlPolynomial
       4 -> XlPower
       5 -> XlExponential
       6 -> XlMovingAvg
       _ -> error "unmarshallXlTrendlineType: illegal enum value "
  
data XlLineStyle
 = XlLineStyleNone
 | XlDouble
 | XlDot
 | XlDash
 | XlContinuous
 | XlDashDot
 | XlDashDotDot
 | XlSlantDashDot
 
instance Enum (XlLineStyle) where
  fromEnum v =
    case v of
       XlLineStyleNone -> (-4142)
       XlDouble -> (-4119)
       XlDot -> (-4118)
       XlDash -> (-4115)
       XlContinuous -> 1
       XlDashDot -> 4
       XlDashDotDot -> 5
       XlSlantDashDot -> 13
  
  toEnum v =
    case v of
       (-4142) -> XlLineStyleNone
       (-4119) -> XlDouble
       (-4118) -> XlDot
       (-4115) -> XlDash
       1 -> XlContinuous
       4 -> XlDashDot
       5 -> XlDashDotDot
       13 -> XlSlantDashDot
       _ -> error "unmarshallXlLineStyle: illegal enum value "
  
data XlDataLabelsType
 = XlDataLabelsShowNone
 | XlDataLabelsShowValue
 | XlDataLabelsShowPercent
 | XlDataLabelsShowLabel
 | XlDataLabelsShowLabelAndPercent
 | XlDataLabelsShowBubbleSizes
 
instance Enum (XlDataLabelsType) where
  fromEnum v =
    case v of
       XlDataLabelsShowNone -> (-4142)
       XlDataLabelsShowValue -> 2
       XlDataLabelsShowPercent -> 3
       XlDataLabelsShowLabel -> 4
       XlDataLabelsShowLabelAndPercent -> 5
       XlDataLabelsShowBubbleSizes -> 6
  
  toEnum v =
    case v of
       (-4142) -> XlDataLabelsShowNone
       2 -> XlDataLabelsShowValue
       3 -> XlDataLabelsShowPercent
       4 -> XlDataLabelsShowLabel
       5 -> XlDataLabelsShowLabelAndPercent
       6 -> XlDataLabelsShowBubbleSizes
       _ -> error "unmarshallXlDataLabelsType: illegal enum value "
  
data XlMarkerStyle
 = XlMarkerStyleX
 | XlMarkerStylePicture
 | XlMarkerStyleNone
 | XlMarkerStyleDot
 | XlMarkerStyleDash
 | XlMarkerStyleAutomatic
 | XlMarkerStyleSquare
 | XlMarkerStyleDiamond
 | XlMarkerStyleTriangle
 | XlMarkerStyleStar
 | XlMarkerStyleCircle
 | XlMarkerStylePlus
 
instance Enum (XlMarkerStyle) where
  fromEnum v =
    case v of
       XlMarkerStyleX -> (-4168)
       XlMarkerStylePicture -> (-4147)
       XlMarkerStyleNone -> (-4142)
       XlMarkerStyleDot -> (-4118)
       XlMarkerStyleDash -> (-4115)
       XlMarkerStyleAutomatic -> (-4105)
       XlMarkerStyleSquare -> 1
       XlMarkerStyleDiamond -> 2
       XlMarkerStyleTriangle -> 3
       XlMarkerStyleStar -> 5
       XlMarkerStyleCircle -> 8
       XlMarkerStylePlus -> 9
  
  toEnum v =
    case v of
       (-4168) -> XlMarkerStyleX
       (-4147) -> XlMarkerStylePicture
       (-4142) -> XlMarkerStyleNone
       (-4118) -> XlMarkerStyleDot
       (-4115) -> XlMarkerStyleDash
       (-4105) -> XlMarkerStyleAutomatic
       1 -> XlMarkerStyleSquare
       2 -> XlMarkerStyleDiamond
       3 -> XlMarkerStyleTriangle
       5 -> XlMarkerStyleStar
       8 -> XlMarkerStyleCircle
       9 -> XlMarkerStylePlus
       _ -> error "unmarshallXlMarkerStyle: illegal enum value "
  
data XlPictureConvertorType
 = XlBMP
 | XlWMF
 | XlWPG
 | XlDRW
 | XlDXF
 | XlHGL
 | XlCGM
 | XlEPS
 | XlTIF
 | XlPCX
 | XlPIC
 | XlPLT
 | XlPCT
 
instance Enum (XlPictureConvertorType) where
  fromEnum v =
    case v of
       XlBMP -> 1
       XlWMF -> 2
       XlWPG -> 3
       XlDRW -> 4
       XlDXF -> 5
       XlHGL -> 6
       XlCGM -> 7
       XlEPS -> 8
       XlTIF -> 9
       XlPCX -> 10
       XlPIC -> 11
       XlPLT -> 12
       XlPCT -> 13
  
  toEnum v =
    case v of
       1 -> XlBMP
       2 -> XlWMF
       3 -> XlWPG
       4 -> XlDRW
       5 -> XlDXF
       6 -> XlHGL
       7 -> XlCGM
       8 -> XlEPS
       9 -> XlTIF
       10 -> XlPCX
       11 -> XlPIC
       12 -> XlPLT
       13 -> XlPCT
       _ -> error "unmarshallXlPictureConvertorType: illegal enum value "
  
data XlPattern
 = XlPatternVertical
 | XlPatternUp
 | XlPatternNone
 | XlPatternHorizontal
 | XlPatternGray75
 | XlPatternGray50
 | XlPatternGray25
 | XlPatternDown
 | XlPatternAutomatic
 | XlPatternSolid
 | XlPatternChecker
 | XlPatternSemiGray75
 | XlPatternLightHorizontal
 | XlPatternLightVertical
 | XlPatternLightDown
 | XlPatternLightUp
 | XlPatternGrid
 | XlPatternCrissCross
 | XlPatternGray16
 | XlPatternGray8
 | XlPatternLinearGradient
 | XlPatternRectangularGradient
 
instance Enum (XlPattern) where
  fromEnum v =
    case v of
       XlPatternVertical -> (-4166)
       XlPatternUp -> (-4162)
       XlPatternNone -> (-4142)
       XlPatternHorizontal -> (-4128)
       XlPatternGray75 -> (-4126)
       XlPatternGray50 -> (-4125)
       XlPatternGray25 -> (-4124)
       XlPatternDown -> (-4121)
       XlPatternAutomatic -> (-4105)
       XlPatternSolid -> 1
       XlPatternChecker -> 9
       XlPatternSemiGray75 -> 10
       XlPatternLightHorizontal -> 11
       XlPatternLightVertical -> 12
       XlPatternLightDown -> 13
       XlPatternLightUp -> 14
       XlPatternGrid -> 15
       XlPatternCrissCross -> 16
       XlPatternGray16 -> 17
       XlPatternGray8 -> 18
       XlPatternLinearGradient -> 4000
       XlPatternRectangularGradient -> 4001
  
  toEnum v =
    case v of
       (-4166) -> XlPatternVertical
       (-4162) -> XlPatternUp
       (-4142) -> XlPatternNone
       (-4128) -> XlPatternHorizontal
       (-4126) -> XlPatternGray75
       (-4125) -> XlPatternGray50
       (-4124) -> XlPatternGray25
       (-4121) -> XlPatternDown
       (-4105) -> XlPatternAutomatic
       1 -> XlPatternSolid
       9 -> XlPatternChecker
       10 -> XlPatternSemiGray75
       11 -> XlPatternLightHorizontal
       12 -> XlPatternLightVertical
       13 -> XlPatternLightDown
       14 -> XlPatternLightUp
       15 -> XlPatternGrid
       16 -> XlPatternCrissCross
       17 -> XlPatternGray16
       18 -> XlPatternGray8
       4000 -> XlPatternLinearGradient
       4001 -> XlPatternRectangularGradient
       _ -> error "unmarshallXlPattern: illegal enum value "
  
data XlChartSplitType
 = XlSplitByPosition
 | XlSplitByValue
 | XlSplitByPercentValue
 | XlSplitByCustomSplit
 
instance Enum (XlChartSplitType) where
  fromEnum v =
    case v of
       XlSplitByPosition -> 1
       XlSplitByValue -> 2
       XlSplitByPercentValue -> 3
       XlSplitByCustomSplit -> 4
  
  toEnum v =
    case v of
       1 -> XlSplitByPosition
       2 -> XlSplitByValue
       3 -> XlSplitByPercentValue
       4 -> XlSplitByCustomSplit
       _ -> error "unmarshallXlChartSplitType: illegal enum value "
  
data XlDisplayUnit
 = XlMillionMillions
 | XlThousandMillions
 | XlHundredMillions
 | XlTenMillions
 | XlMillions
 | XlHundredThousands
 | XlTenThousands
 | XlThousands
 | XlHundreds
 
instance Enum (XlDisplayUnit) where
  fromEnum v =
    case v of
       XlMillionMillions -> (-10)
       XlThousandMillions -> (-9)
       XlHundredMillions -> (-8)
       XlTenMillions -> (-7)
       XlMillions -> (-6)
       XlHundredThousands -> (-5)
       XlTenThousands -> (-4)
       XlThousands -> (-3)
       XlHundreds -> (-2)
  
  toEnum v =
    case v of
       (-10) -> XlMillionMillions
       (-9) -> XlThousandMillions
       (-8) -> XlHundredMillions
       (-7) -> XlTenMillions
       (-6) -> XlMillions
       (-5) -> XlHundredThousands
       (-4) -> XlTenThousands
       (-3) -> XlThousands
       (-2) -> XlHundreds
       _ -> error "unmarshallXlDisplayUnit: illegal enum value "
  
data XlDataLabelPosition
 = XlLabelPositionRight
 | XlLabelPositionLeft
 | XlLabelPositionCenter
 | XlLabelPositionAbove
 | XlLabelPositionBelow
 | XlLabelPositionOutsideEnd
 | XlLabelPositionInsideEnd
 | XlLabelPositionInsideBase
 | XlLabelPositionBestFit
 | XlLabelPositionMixed
 | XlLabelPositionCustom
 
instance Enum (XlDataLabelPosition) where
  fromEnum v =
    case v of
       XlLabelPositionRight -> (-4152)
       XlLabelPositionLeft -> (-4131)
       XlLabelPositionCenter -> (-4108)
       XlLabelPositionAbove -> 0
       XlLabelPositionBelow -> 1
       XlLabelPositionOutsideEnd -> 2
       XlLabelPositionInsideEnd -> 3
       XlLabelPositionInsideBase -> 4
       XlLabelPositionBestFit -> 5
       XlLabelPositionMixed -> 6
       XlLabelPositionCustom -> 7
  
  toEnum v =
    case v of
       (-4152) -> XlLabelPositionRight
       (-4131) -> XlLabelPositionLeft
       (-4108) -> XlLabelPositionCenter
       0 -> XlLabelPositionAbove
       1 -> XlLabelPositionBelow
       2 -> XlLabelPositionOutsideEnd
       3 -> XlLabelPositionInsideEnd
       4 -> XlLabelPositionInsideBase
       5 -> XlLabelPositionBestFit
       6 -> XlLabelPositionMixed
       7 -> XlLabelPositionCustom
       _ -> error "unmarshallXlDataLabelPosition: illegal enum value "
  
data XlTimeUnit
 = XlTimeUnitList__ [XlTimeUnit]
 | XlDays
 | XlMonths
 | XlYears
 
instance Flags (XlTimeUnit) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlTimeUnit) where
  fromEnum v =
    case v of
       (XlTimeUnitList__ xs) -> orList (map fromEnum xs)
       XlDays -> 0
       XlMonths -> 1
       XlYears -> 2
  
  toEnum v =
    case v of
       0 -> XlDays
       1 -> XlMonths
       2 -> XlYears
       x -> XlTimeUnitList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlTimeUnit: illegal enum value "
  
data XlCategoryType
 = XlAutomaticScale
 | XlCategoryScale
 | XlTimeScale
 
instance Enum (XlCategoryType) where
  fromEnum v =
    case v of
       XlAutomaticScale -> (-4105)
       XlCategoryScale -> 2
       XlTimeScale -> 3
  
  toEnum v =
    case v of
       (-4105) -> XlAutomaticScale
       2 -> XlCategoryScale
       3 -> XlTimeScale
       _ -> error "unmarshallXlCategoryType: illegal enum value "
  
data XlBarShape
 = XlBox
 | XlPyramidToPoint
 | XlPyramidToMax
 | XlCylinder
 | XlConeToPoint
 | XlConeToMax
 deriving (Enum)
data XlChartType
 = XlXYScatter
 | XlRadar
 | XlDoughnut
 | Xl3DPie
 | Xl3DLine
 | Xl3DColumn
 | Xl3DArea
 | XlArea
 | XlLine
 | XlPie
 | XlBubble
 | XlColumnClustered
 | XlColumnStacked
 | XlColumnStacked100
 | Xl3DColumnClustered
 | Xl3DColumnStacked
 | Xl3DColumnStacked100
 | XlBarClustered
 | XlBarStacked
 | XlBarStacked100
 | Xl3DBarClustered
 | Xl3DBarStacked
 | Xl3DBarStacked100
 | XlLineStacked
 | XlLineStacked100
 | XlLineMarkers
 | XlLineMarkersStacked
 | XlLineMarkersStacked100
 | XlPieOfPie
 | XlPieExploded
 | Xl3DPieExploded
 | XlBarOfPie
 | XlXYScatterSmooth
 | XlXYScatterSmoothNoMarkers
 | XlXYScatterLines
 | XlXYScatterLinesNoMarkers
 | XlAreaStacked
 | XlAreaStacked100
 | Xl3DAreaStacked
 | Xl3DAreaStacked100
 | XlDoughnutExploded
 | XlRadarMarkers
 | XlRadarFilled
 | XlSurface
 | XlSurfaceWireframe
 | XlSurfaceTopView
 | XlSurfaceTopViewWireframe
 | XlBubble3DEffect
 | XlStockHLC
 | XlStockOHLC
 | XlStockVHLC
 | XlStockVOHLC
 | XlCylinderColClustered
 | XlCylinderColStacked
 | XlCylinderColStacked100
 | XlCylinderBarClustered
 | XlCylinderBarStacked
 | XlCylinderBarStacked100
 | XlCylinderCol
 | XlConeColClustered
 | XlConeColStacked
 | XlConeColStacked100
 | XlConeBarClustered
 | XlConeBarStacked
 | XlConeBarStacked100
 | XlConeCol
 | XlPyramidColClustered
 | XlPyramidColStacked
 | XlPyramidColStacked100
 | XlPyramidBarClustered
 | XlPyramidBarStacked
 | XlPyramidBarStacked100
 | XlPyramidCol
 
instance Enum (XlChartType) where
  fromEnum v =
    case v of
       XlXYScatter -> (-4169)
       XlRadar -> (-4151)
       XlDoughnut -> (-4120)
       Xl3DPie -> (-4102)
       Xl3DLine -> (-4101)
       Xl3DColumn -> (-4100)
       Xl3DArea -> (-4098)
       XlArea -> 1
       XlLine -> 4
       XlPie -> 5
       XlBubble -> 15
       XlColumnClustered -> 51
       XlColumnStacked -> 52
       XlColumnStacked100 -> 53
       Xl3DColumnClustered -> 54
       Xl3DColumnStacked -> 55
       Xl3DColumnStacked100 -> 56
       XlBarClustered -> 57
       XlBarStacked -> 58
       XlBarStacked100 -> 59
       Xl3DBarClustered -> 60
       Xl3DBarStacked -> 61
       Xl3DBarStacked100 -> 62
       XlLineStacked -> 63
       XlLineStacked100 -> 64
       XlLineMarkers -> 65
       XlLineMarkersStacked -> 66
       XlLineMarkersStacked100 -> 67
       XlPieOfPie -> 68
       XlPieExploded -> 69
       Xl3DPieExploded -> 70
       XlBarOfPie -> 71
       XlXYScatterSmooth -> 72
       XlXYScatterSmoothNoMarkers -> 73
       XlXYScatterLines -> 74
       XlXYScatterLinesNoMarkers -> 75
       XlAreaStacked -> 76
       XlAreaStacked100 -> 77
       Xl3DAreaStacked -> 78
       Xl3DAreaStacked100 -> 79
       XlDoughnutExploded -> 80
       XlRadarMarkers -> 81
       XlRadarFilled -> 82
       XlSurface -> 83
       XlSurfaceWireframe -> 84
       XlSurfaceTopView -> 85
       XlSurfaceTopViewWireframe -> 86
       XlBubble3DEffect -> 87
       XlStockHLC -> 88
       XlStockOHLC -> 89
       XlStockVHLC -> 90
       XlStockVOHLC -> 91
       XlCylinderColClustered -> 92
       XlCylinderColStacked -> 93
       XlCylinderColStacked100 -> 94
       XlCylinderBarClustered -> 95
       XlCylinderBarStacked -> 96
       XlCylinderBarStacked100 -> 97
       XlCylinderCol -> 98
       XlConeColClustered -> 99
       XlConeColStacked -> 100
       XlConeColStacked100 -> 101
       XlConeBarClustered -> 102
       XlConeBarStacked -> 103
       XlConeBarStacked100 -> 104
       XlConeCol -> 105
       XlPyramidColClustered -> 106
       XlPyramidColStacked -> 107
       XlPyramidColStacked100 -> 108
       XlPyramidBarClustered -> 109
       XlPyramidBarStacked -> 110
       XlPyramidBarStacked100 -> 111
       XlPyramidCol -> 112
  
  toEnum v =
    case v of
       (-4169) -> XlXYScatter
       (-4151) -> XlRadar
       (-4120) -> XlDoughnut
       (-4102) -> Xl3DPie
       (-4101) -> Xl3DLine
       (-4100) -> Xl3DColumn
       (-4098) -> Xl3DArea
       1 -> XlArea
       4 -> XlLine
       5 -> XlPie
       15 -> XlBubble
       51 -> XlColumnClustered
       52 -> XlColumnStacked
       53 -> XlColumnStacked100
       54 -> Xl3DColumnClustered
       55 -> Xl3DColumnStacked
       56 -> Xl3DColumnStacked100
       57 -> XlBarClustered
       58 -> XlBarStacked
       59 -> XlBarStacked100
       60 -> Xl3DBarClustered
       61 -> Xl3DBarStacked
       62 -> Xl3DBarStacked100
       63 -> XlLineStacked
       64 -> XlLineStacked100
       65 -> XlLineMarkers
       66 -> XlLineMarkersStacked
       67 -> XlLineMarkersStacked100
       68 -> XlPieOfPie
       69 -> XlPieExploded
       70 -> Xl3DPieExploded
       71 -> XlBarOfPie
       72 -> XlXYScatterSmooth
       73 -> XlXYScatterSmoothNoMarkers
       74 -> XlXYScatterLines
       75 -> XlXYScatterLinesNoMarkers
       76 -> XlAreaStacked
       77 -> XlAreaStacked100
       78 -> Xl3DAreaStacked
       79 -> Xl3DAreaStacked100
       80 -> XlDoughnutExploded
       81 -> XlRadarMarkers
       82 -> XlRadarFilled
       83 -> XlSurface
       84 -> XlSurfaceWireframe
       85 -> XlSurfaceTopView
       86 -> XlSurfaceTopViewWireframe
       87 -> XlBubble3DEffect
       88 -> XlStockHLC
       89 -> XlStockOHLC
       90 -> XlStockVHLC
       91 -> XlStockVOHLC
       92 -> XlCylinderColClustered
       93 -> XlCylinderColStacked
       94 -> XlCylinderColStacked100
       95 -> XlCylinderBarClustered
       96 -> XlCylinderBarStacked
       97 -> XlCylinderBarStacked100
       98 -> XlCylinderCol
       99 -> XlConeColClustered
       100 -> XlConeColStacked
       101 -> XlConeColStacked100
       102 -> XlConeBarClustered
       103 -> XlConeBarStacked
       104 -> XlConeBarStacked100
       105 -> XlConeCol
       106 -> XlPyramidColClustered
       107 -> XlPyramidColStacked
       108 -> XlPyramidColStacked100
       109 -> XlPyramidBarClustered
       110 -> XlPyramidBarStacked
       111 -> XlPyramidBarStacked100
       112 -> XlPyramidCol
       _ -> error "unmarshallXlChartType: illegal enum value "
  
data XlChartItem
 = XlDataLabel
 | XlChartArea
 | XlSeries
 | XlChartTitle
 | XlWalls
 | XlCorners
 | XlDataTable
 | XlTrendline
 | XlErrorBars
 | XlXErrorBars
 | XlYErrorBars
 | XlLegendEntry
 | XlLegendKey
 | XlShape
 | XlMajorGridlines
 | XlMinorGridlines
 | XlAxisTitle
 | XlUpBars
 | XlPlotArea
 | XlDownBars
 | XlAxis
 | XlSeriesLines
 | XlFloor
 | XlLegend
 | XlHiLoLines
 | XlDropLines
 | XlRadarAxisLabels
 | XlNothing
 | XlLeaderLines
 | XlDisplayUnitLabel
 | XlPivotChartFieldButton
 | XlPivotChartDropZone
 
instance Enum (XlChartItem) where
  fromEnum v =
    case v of
       XlDataLabel -> 0
       XlChartArea -> 2
       XlSeries -> 3
       XlChartTitle -> 4
       XlWalls -> 5
       XlCorners -> 6
       XlDataTable -> 7
       XlTrendline -> 8
       XlErrorBars -> 9
       XlXErrorBars -> 10
       XlYErrorBars -> 11
       XlLegendEntry -> 12
       XlLegendKey -> 13
       XlShape -> 14
       XlMajorGridlines -> 15
       XlMinorGridlines -> 16
       XlAxisTitle -> 17
       XlUpBars -> 18
       XlPlotArea -> 19
       XlDownBars -> 20
       XlAxis -> 21
       XlSeriesLines -> 22
       XlFloor -> 23
       XlLegend -> 24
       XlHiLoLines -> 25
       XlDropLines -> 26
       XlRadarAxisLabels -> 27
       XlNothing -> 28
       XlLeaderLines -> 29
       XlDisplayUnitLabel -> 30
       XlPivotChartFieldButton -> 31
       XlPivotChartDropZone -> 32
  
  toEnum v =
    case v of
       0 -> XlDataLabel
       2 -> XlChartArea
       3 -> XlSeries
       4 -> XlChartTitle
       5 -> XlWalls
       6 -> XlCorners
       7 -> XlDataTable
       8 -> XlTrendline
       9 -> XlErrorBars
       10 -> XlXErrorBars
       11 -> XlYErrorBars
       12 -> XlLegendEntry
       13 -> XlLegendKey
       14 -> XlShape
       15 -> XlMajorGridlines
       16 -> XlMinorGridlines
       17 -> XlAxisTitle
       18 -> XlUpBars
       19 -> XlPlotArea
       20 -> XlDownBars
       21 -> XlAxis
       22 -> XlSeriesLines
       23 -> XlFloor
       24 -> XlLegend
       25 -> XlHiLoLines
       26 -> XlDropLines
       27 -> XlRadarAxisLabels
       28 -> XlNothing
       29 -> XlLeaderLines
       30 -> XlDisplayUnitLabel
       31 -> XlPivotChartFieldButton
       32 -> XlPivotChartDropZone
       _ -> error "unmarshallXlChartItem: illegal enum value "
  
data XlSizeRepresents
 = XlSizeRepresentsList__ [XlSizeRepresents]
 | XlSizeIsArea
 | XlSizeIsWidth
 
instance Flags (XlSizeRepresents) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSizeRepresents) where
  fromEnum v =
    case v of
       (XlSizeRepresentsList__ xs) -> orList (map fromEnum xs)
       XlSizeIsArea -> 1
       XlSizeIsWidth -> 2
  
  toEnum v =
    case v of
       1 -> XlSizeIsArea
       2 -> XlSizeIsWidth
       x -> XlSizeRepresentsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSizeRepresents: illegal enum value "
  
data XlInsertShiftDirection
 = XlShiftToRight
 | XlShiftDown
 
instance Enum (XlInsertShiftDirection) where
  fromEnum v =
    case v of
       XlShiftToRight -> (-4161)
       XlShiftDown -> (-4121)
  
  toEnum v =
    case v of
       (-4161) -> XlShiftToRight
       (-4121) -> XlShiftDown
       _ -> error "unmarshallXlInsertShiftDirection: illegal enum value "
  
data XlDeleteShiftDirection
 = XlShiftUp
 | XlShiftToLeft
 
instance Enum (XlDeleteShiftDirection) where
  fromEnum v =
    case v of
       XlShiftUp -> (-4162)
       XlShiftToLeft -> (-4159)
  
  toEnum v =
    case v of
       (-4162) -> XlShiftUp
       (-4159) -> XlShiftToLeft
       _ -> error "unmarshallXlDeleteShiftDirection: illegal enum value "
  
data XlDirection
 = XlUp
 | XlToRight
 | XlToLeft
 | XlDown
 
instance Enum (XlDirection) where
  fromEnum v =
    case v of
       XlUp -> (-4162)
       XlToRight -> (-4161)
       XlToLeft -> (-4159)
       XlDown -> (-4121)
  
  toEnum v =
    case v of
       (-4162) -> XlUp
       (-4161) -> XlToRight
       (-4159) -> XlToLeft
       (-4121) -> XlDown
       _ -> error "unmarshallXlDirection: illegal enum value "
  
data XlConsolidationFunction
 = XlVarP
 | XlVar
 | XlSum
 | XlStDevP
 | XlStDev
 | XlProduct
 | XlMin
 | XlMax
 | XlCountNums
 | XlCount
 | XlAverage
 | XlUnknown
 
instance Enum (XlConsolidationFunction) where
  fromEnum v =
    case v of
       XlVarP -> (-4165)
       XlVar -> (-4164)
       XlSum -> (-4157)
       XlStDevP -> (-4156)
       XlStDev -> (-4155)
       XlProduct -> (-4149)
       XlMin -> (-4139)
       XlMax -> (-4136)
       XlCountNums -> (-4113)
       XlCount -> (-4112)
       XlAverage -> (-4106)
       XlUnknown -> 1000
  
  toEnum v =
    case v of
       (-4165) -> XlVarP
       (-4164) -> XlVar
       (-4157) -> XlSum
       (-4156) -> XlStDevP
       (-4155) -> XlStDev
       (-4149) -> XlProduct
       (-4139) -> XlMin
       (-4136) -> XlMax
       (-4113) -> XlCountNums
       (-4112) -> XlCount
       (-4106) -> XlAverage
       1000 -> XlUnknown
       _ -> error "unmarshallXlConsolidationFunction: illegal enum value "
  
data XlSheetType
 = XlWorksheet
 | XlDialogSheet
 | XlChart
 | XlExcel4MacroSheet
 | XlExcel4IntlMacroSheet
 
instance Enum (XlSheetType) where
  fromEnum v =
    case v of
       XlWorksheet -> (-4167)
       XlDialogSheet -> (-4116)
       XlChart -> (-4109)
       XlExcel4MacroSheet -> 3
       XlExcel4IntlMacroSheet -> 4
  
  toEnum v =
    case v of
       (-4167) -> XlWorksheet
       (-4116) -> XlDialogSheet
       (-4109) -> XlChart
       3 -> XlExcel4MacroSheet
       4 -> XlExcel4IntlMacroSheet
       _ -> error "unmarshallXlSheetType: illegal enum value "
  
data XlLocationInTable
 = XlRowHeader
 | XlColumnHeader
 | XlPageHeader
 | XlDataHeader
 | XlRowItem
 | XlColumnItem
 | XlPageItem
 | XlDataItem
 | XlTableBody
 
instance Enum (XlLocationInTable) where
  fromEnum v =
    case v of
       XlRowHeader -> (-4153)
       XlColumnHeader -> (-4110)
       XlPageHeader -> 2
       XlDataHeader -> 3
       XlRowItem -> 4
       XlColumnItem -> 5
       XlPageItem -> 6
       XlDataItem -> 7
       XlTableBody -> 8
  
  toEnum v =
    case v of
       (-4153) -> XlRowHeader
       (-4110) -> XlColumnHeader
       2 -> XlPageHeader
       3 -> XlDataHeader
       4 -> XlRowItem
       5 -> XlColumnItem
       6 -> XlPageItem
       7 -> XlDataItem
       8 -> XlTableBody
       _ -> error "unmarshallXlLocationInTable: illegal enum value "
  
data XlFindLookIn
 = XlValues
 | XlComments
 | XlFormulas
 
instance Enum (XlFindLookIn) where
  fromEnum v =
    case v of
       XlValues -> (-4163)
       XlComments -> (-4144)
       XlFormulas -> (-4123)
  
  toEnum v =
    case v of
       (-4163) -> XlValues
       (-4144) -> XlComments
       (-4123) -> XlFormulas
       _ -> error "unmarshallXlFindLookIn: illegal enum value "
  
data XlWindowType
 = XlInfo
 | XlWorkbook
 | XlClipboard
 | XlChartInPlace
 | XlChartAsWindow
 
instance Enum (XlWindowType) where
  fromEnum v =
    case v of
       XlInfo -> (-4129)
       XlWorkbook -> 1
       XlClipboard -> 3
       XlChartInPlace -> 4
       XlChartAsWindow -> 5
  
  toEnum v =
    case v of
       (-4129) -> XlInfo
       1 -> XlWorkbook
       3 -> XlClipboard
       4 -> XlChartInPlace
       5 -> XlChartAsWindow
       _ -> error "unmarshallXlWindowType: illegal enum value "
  
data XlPivotFieldDataType
 = XlText
 | XlNumber
 | XlDate
 
instance Enum (XlPivotFieldDataType) where
  fromEnum v =
    case v of
       XlText -> (-4158)
       XlNumber -> (-4145)
       XlDate -> 2
  
  toEnum v =
    case v of
       (-4158) -> XlText
       (-4145) -> XlNumber
       2 -> XlDate
       _ -> error "unmarshallXlPivotFieldDataType: illegal enum value "
  
data XlCopyPictureFormat
 = XlPicture
 | XlBitmap
 
instance Enum (XlCopyPictureFormat) where
  fromEnum v =
    case v of
       XlPicture -> (-4147)
       XlBitmap -> 2
  
  toEnum v =
    case v of
       (-4147) -> XlPicture
       2 -> XlBitmap
       _ -> error "unmarshallXlCopyPictureFormat: illegal enum value "
  
data XlPivotTableSourceType
 = XlPivotTable
 | XlDatabase
 | XlExternal
 | XlConsolidation
 | XlScenario
 
instance Enum (XlPivotTableSourceType) where
  fromEnum v =
    case v of
       XlPivotTable -> (-4148)
       XlDatabase -> 1
       XlExternal -> 2
       XlConsolidation -> 3
       XlScenario -> 4
  
  toEnum v =
    case v of
       (-4148) -> XlPivotTable
       1 -> XlDatabase
       2 -> XlExternal
       3 -> XlConsolidation
       4 -> XlScenario
       _ -> error "unmarshallXlPivotTableSourceType: illegal enum value "
  
data XlReferenceStyle
 = XlR1C1
 | XlA1
 
instance Enum (XlReferenceStyle) where
  fromEnum v =
    case v of
       XlR1C1 -> (-4150)
       XlA1 -> 1
  
  toEnum v =
    case v of
       (-4150) -> XlR1C1
       1 -> XlA1
       _ -> error "unmarshallXlReferenceStyle: illegal enum value "
  
data XlMSApplication
 = XlMicrosoftWord
 | XlMicrosoftPowerPoint
 | XlMicrosoftMail
 | XlMicrosoftAccess
 | XlMicrosoftFoxPro
 | XlMicrosoftProject
 | XlMicrosoftSchedulePlus
 
instance Enum (XlMSApplication) where
  fromEnum v =
    case v of
       XlMicrosoftWord -> 1
       XlMicrosoftPowerPoint -> 2
       XlMicrosoftMail -> 3
       XlMicrosoftAccess -> 4
       XlMicrosoftFoxPro -> 5
       XlMicrosoftProject -> 6
       XlMicrosoftSchedulePlus -> 7
  
  toEnum v =
    case v of
       1 -> XlMicrosoftWord
       2 -> XlMicrosoftPowerPoint
       3 -> XlMicrosoftMail
       4 -> XlMicrosoftAccess
       5 -> XlMicrosoftFoxPro
       6 -> XlMicrosoftProject
       7 -> XlMicrosoftSchedulePlus
       _ -> error "unmarshallXlMSApplication: illegal enum value "
  
data XlMouseButton
 = XlMouseButtonList__ [XlMouseButton]
 | XlNoButton
 | XlPrimaryButton
 | XlSecondaryButton
 
instance Flags (XlMouseButton) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlMouseButton) where
  fromEnum v =
    case v of
       (XlMouseButtonList__ xs) -> orList (map fromEnum xs)
       XlNoButton -> 0
       XlPrimaryButton -> 1
       XlSecondaryButton -> 2
  
  toEnum v =
    case v of
       0 -> XlNoButton
       1 -> XlPrimaryButton
       2 -> XlSecondaryButton
       x -> XlMouseButtonList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlMouseButton: illegal enum value "
  
data XlCutCopyMode
 = XlCutCopyModeList__ [XlCutCopyMode]
 | XlCopy
 | XlCut
 
instance Flags (XlCutCopyMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCutCopyMode) where
  fromEnum v =
    case v of
       (XlCutCopyModeList__ xs) -> orList (map fromEnum xs)
       XlCopy -> 1
       XlCut -> 2
  
  toEnum v =
    case v of
       1 -> XlCopy
       2 -> XlCut
       x -> XlCutCopyModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlCutCopyMode: illegal enum value "
  
data XlFillWith
 = XlFillWithFormats
 | XlFillWithAll
 | XlFillWithContents
 
instance Enum (XlFillWith) where
  fromEnum v =
    case v of
       XlFillWithFormats -> (-4122)
       XlFillWithAll -> (-4104)
       XlFillWithContents -> 2
  
  toEnum v =
    case v of
       (-4122) -> XlFillWithFormats
       (-4104) -> XlFillWithAll
       2 -> XlFillWithContents
       _ -> error "unmarshallXlFillWith: illegal enum value "
  
data XlFilterAction
 = XlFilterActionList__ [XlFilterAction]
 | XlFilterInPlace
 | XlFilterCopy
 
instance Flags (XlFilterAction) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlFilterAction) where
  fromEnum v =
    case v of
       (XlFilterActionList__ xs) -> orList (map fromEnum xs)
       XlFilterInPlace -> 1
       XlFilterCopy -> 2
  
  toEnum v =
    case v of
       1 -> XlFilterInPlace
       2 -> XlFilterCopy
       x -> XlFilterActionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlFilterAction: illegal enum value "
  
data XlOrder
 = XlOrderList__ [XlOrder]
 | XlDownThenOver
 | XlOverThenDown
 
instance Flags (XlOrder) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlOrder) where
  fromEnum v =
    case v of
       (XlOrderList__ xs) -> orList (map fromEnum xs)
       XlDownThenOver -> 1
       XlOverThenDown -> 2
  
  toEnum v =
    case v of
       1 -> XlDownThenOver
       2 -> XlOverThenDown
       x -> XlOrderList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                then Just (toEnum (fromIntegral val))
                                                else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlOrder: illegal enum value "
  
data XlLinkType
 = XlLinkTypeList__ [XlLinkType]
 | XlLinkTypeExcelLinks
 | XlLinkTypeOLELinks
 
instance Flags (XlLinkType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlLinkType) where
  fromEnum v =
    case v of
       (XlLinkTypeList__ xs) -> orList (map fromEnum xs)
       XlLinkTypeExcelLinks -> 1
       XlLinkTypeOLELinks -> 2
  
  toEnum v =
    case v of
       1 -> XlLinkTypeExcelLinks
       2 -> XlLinkTypeOLELinks
       x -> XlLinkTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlLinkType: illegal enum value "
  
data XlApplyNamesOrder
 = XlApplyNamesOrderList__ [XlApplyNamesOrder]
 | XlRowThenColumn
 | XlColumnThenRow
 
instance Flags (XlApplyNamesOrder) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlApplyNamesOrder) where
  fromEnum v =
    case v of
       (XlApplyNamesOrderList__ xs) -> orList (map fromEnum xs)
       XlRowThenColumn -> 1
       XlColumnThenRow -> 2
  
  toEnum v =
    case v of
       1 -> XlRowThenColumn
       2 -> XlColumnThenRow
       x -> XlApplyNamesOrderList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlApplyNamesOrder: illegal enum value "
  
data XlEnableCancelKey
 = XlEnableCancelKeyList__ [XlEnableCancelKey]
 | XlDisabled
 | XlInterrupt
 | XlErrorHandler
 
instance Flags (XlEnableCancelKey) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlEnableCancelKey) where
  fromEnum v =
    case v of
       (XlEnableCancelKeyList__ xs) -> orList (map fromEnum xs)
       XlDisabled -> 0
       XlInterrupt -> 1
       XlErrorHandler -> 2
  
  toEnum v =
    case v of
       0 -> XlDisabled
       1 -> XlInterrupt
       2 -> XlErrorHandler
       x -> XlEnableCancelKeyList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlEnableCancelKey: illegal enum value "
  
data XlPageBreak
 = XlPageBreakNone
 | XlPageBreakManual
 | XlPageBreakAutomatic
 
instance Enum (XlPageBreak) where
  fromEnum v =
    case v of
       XlPageBreakNone -> (-4142)
       XlPageBreakManual -> (-4135)
       XlPageBreakAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4142) -> XlPageBreakNone
       (-4135) -> XlPageBreakManual
       (-4105) -> XlPageBreakAutomatic
       _ -> error "unmarshallXlPageBreak: illegal enum value "
  
data XlOLEType
 = XlOLETypeList__ [XlOLEType]
 | XlOLELink
 | XlOLEEmbed
 | XlOLEControl
 
instance Flags (XlOLEType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlOLEType) where
  fromEnum v =
    case v of
       (XlOLETypeList__ xs) -> orList (map fromEnum xs)
       XlOLELink -> 0
       XlOLEEmbed -> 1
       XlOLEControl -> 2
  
  toEnum v =
    case v of
       0 -> XlOLELink
       1 -> XlOLEEmbed
       2 -> XlOLEControl
       x -> XlOLETypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                  then Just (toEnum (fromIntegral val))
                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlOLEType: illegal enum value "
  
data XlPageOrientation
 = XlPageOrientationList__ [XlPageOrientation]
 | XlPortrait
 | XlLandscape
 
instance Flags (XlPageOrientation) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlPageOrientation) where
  fromEnum v =
    case v of
       (XlPageOrientationList__ xs) -> orList (map fromEnum xs)
       XlPortrait -> 1
       XlLandscape -> 2
  
  toEnum v =
    case v of
       1 -> XlPortrait
       2 -> XlLandscape
       x -> XlPageOrientationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlPageOrientation: illegal enum value "
  
data XlLinkInfo
 = XlUpdateState
 | XlEditionDate
 | XlLinkInfoStatus
 
instance Enum (XlLinkInfo) where
  fromEnum v =
    case v of
       XlUpdateState -> 1
       XlEditionDate -> 2
       XlLinkInfoStatus -> 3
  
  toEnum v =
    case v of
       1 -> XlUpdateState
       2 -> XlEditionDate
       3 -> XlLinkInfoStatus
       _ -> error "unmarshallXlLinkInfo: illegal enum value "
  
data XlCommandUnderlines
 = XlCommandUnderlinesOff
 | XlCommandUnderlinesAutomatic
 | XlCommandUnderlinesOn
 
instance Enum (XlCommandUnderlines) where
  fromEnum v =
    case v of
       XlCommandUnderlinesOff -> (-4146)
       XlCommandUnderlinesAutomatic -> (-4105)
       XlCommandUnderlinesOn -> 1
  
  toEnum v =
    case v of
       (-4146) -> XlCommandUnderlinesOff
       (-4105) -> XlCommandUnderlinesAutomatic
       1 -> XlCommandUnderlinesOn
       _ -> error "unmarshallXlCommandUnderlines: illegal enum value "
  
data XlOLEVerb
 = XlOLEVerbList__ [XlOLEVerb]
 | XlVerbPrimary
 | XlVerbOpen
 
instance Flags (XlOLEVerb) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlOLEVerb) where
  fromEnum v =
    case v of
       (XlOLEVerbList__ xs) -> orList (map fromEnum xs)
       XlVerbPrimary -> 1
       XlVerbOpen -> 2
  
  toEnum v =
    case v of
       1 -> XlVerbPrimary
       2 -> XlVerbOpen
       x -> XlOLEVerbList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                  then Just (toEnum (fromIntegral val))
                                                  else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlOLEVerb: illegal enum value "
  
data XlCalculation
 = XlCalculationManual
 | XlCalculationAutomatic
 | XlCalculationSemiautomatic
 
instance Enum (XlCalculation) where
  fromEnum v =
    case v of
       XlCalculationManual -> (-4135)
       XlCalculationAutomatic -> (-4105)
       XlCalculationSemiautomatic -> 2
  
  toEnum v =
    case v of
       (-4135) -> XlCalculationManual
       (-4105) -> XlCalculationAutomatic
       2 -> XlCalculationSemiautomatic
       _ -> error "unmarshallXlCalculation: illegal enum value "
  
data XlFileAccess
 = XlReadWrite
 | XlReadOnly
 
instance Enum (XlFileAccess) where
  fromEnum v =
    case v of
       XlReadWrite -> 2
       XlReadOnly -> 3
  
  toEnum v =
    case v of
       2 -> XlReadWrite
       3 -> XlReadOnly
       _ -> error "unmarshallXlFileAccess: illegal enum value "
  
data XlEditionType
 = XlEditionTypeList__ [XlEditionType]
 | XlPublisher
 | XlSubscriber
 
instance Flags (XlEditionType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlEditionType) where
  fromEnum v =
    case v of
       (XlEditionTypeList__ xs) -> orList (map fromEnum xs)
       XlPublisher -> 1
       XlSubscriber -> 2
  
  toEnum v =
    case v of
       1 -> XlPublisher
       2 -> XlSubscriber
       x -> XlEditionTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlEditionType: illegal enum value "
  
data XlObjectSize
 = XlScreenSize
 | XlFitToPage
 | XlFullPage
 
instance Enum (XlObjectSize) where
  fromEnum v =
    case v of
       XlScreenSize -> 1
       XlFitToPage -> 2
       XlFullPage -> 3
  
  toEnum v =
    case v of
       1 -> XlScreenSize
       2 -> XlFitToPage
       3 -> XlFullPage
       _ -> error "unmarshallXlObjectSize: illegal enum value "
  
data XlLookAt
 = XlLookAtList__ [XlLookAt]
 | XlWhole
 | XlPart
 
instance Flags (XlLookAt) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlLookAt) where
  fromEnum v =
    case v of
       (XlLookAtList__ xs) -> orList (map fromEnum xs)
       XlWhole -> 1
       XlPart -> 2
  
  toEnum v =
    case v of
       1 -> XlWhole
       2 -> XlPart
       x -> XlLookAtList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                 then Just (toEnum (fromIntegral val))
                                                 else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlLookAt: illegal enum value "
  
data XlMailSystem
 = XlMailSystemList__ [XlMailSystem]
 | XlNoMailSystem
 | XlMAPI
 | XlPowerTalk
 
instance Flags (XlMailSystem) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlMailSystem) where
  fromEnum v =
    case v of
       (XlMailSystemList__ xs) -> orList (map fromEnum xs)
       XlNoMailSystem -> 0
       XlMAPI -> 1
       XlPowerTalk -> 2
  
  toEnum v =
    case v of
       0 -> XlNoMailSystem
       1 -> XlMAPI
       2 -> XlPowerTalk
       x -> XlMailSystemList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlMailSystem: illegal enum value "
  
data XlLinkInfoType
 = XlLinkInfoOLELinks
 | XlLinkInfoPublishers
 | XlLinkInfoSubscribers
 
instance Enum (XlLinkInfoType) where
  fromEnum v =
    case v of
       XlLinkInfoOLELinks -> 2
       XlLinkInfoPublishers -> 5
       XlLinkInfoSubscribers -> 6
  
  toEnum v =
    case v of
       2 -> XlLinkInfoOLELinks
       5 -> XlLinkInfoPublishers
       6 -> XlLinkInfoSubscribers
       _ -> error "unmarshallXlLinkInfoType: illegal enum value "
  
data XlCVError
 = XlErrNull
 | XlErrDiv0
 | XlErrValue
 | XlErrRef
 | XlErrName
 | XlErrNum
 | XlErrNA
 
instance Enum (XlCVError) where
  fromEnum v =
    case v of
       XlErrNull -> 2000
       XlErrDiv0 -> 2007
       XlErrValue -> 2015
       XlErrRef -> 2023
       XlErrName -> 2029
       XlErrNum -> 2036
       XlErrNA -> 2042
  
  toEnum v =
    case v of
       2000 -> XlErrNull
       2007 -> XlErrDiv0
       2015 -> XlErrValue
       2023 -> XlErrRef
       2029 -> XlErrName
       2036 -> XlErrNum
       2042 -> XlErrNA
       _ -> error "unmarshallXlCVError: illegal enum value "
  
data XlEditionFormat
 = XlEditionFormatList__ [XlEditionFormat]
 | XlPICT
 | XlBIFF
 | XlRTF
 | XlVALU
 
instance Flags (XlEditionFormat) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlEditionFormat) where
  fromEnum v =
    case v of
       (XlEditionFormatList__ xs) -> orList (map fromEnum xs)
       XlPICT -> 1
       XlBIFF -> 2
       XlRTF -> 4
       XlVALU -> 8
  
  toEnum v =
    case v of
       1 -> XlPICT
       2 -> XlBIFF
       4 -> XlRTF
       8 -> XlVALU
       x -> XlEditionFormatList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 4 1))
       _ -> error "unmarshallXlEditionFormat: illegal enum value "
  
data XlLink
 = XlExcelLinks
 | XlOLELinks
 | XlPublishers
 | XlSubscribers
 
instance Enum (XlLink) where
  fromEnum v =
    case v of
       XlExcelLinks -> 1
       XlOLELinks -> 2
       XlPublishers -> 5
       XlSubscribers -> 6
  
  toEnum v =
    case v of
       1 -> XlExcelLinks
       2 -> XlOLELinks
       5 -> XlPublishers
       6 -> XlSubscribers
       _ -> error "unmarshallXlLink: illegal enum value "
  
data XlCellType
 = XlCellTypeSameValidation
 | XlCellTypeAllValidation
 | XlCellTypeSameFormatConditions
 | XlCellTypeAllFormatConditions
 | XlCellTypeComments
 | XlCellTypeFormulas
 | XlCellTypeConstants
 | XlCellTypeBlanks
 | XlCellTypeLastCell
 | XlCellTypeVisible
 
instance Enum (XlCellType) where
  fromEnum v =
    case v of
       XlCellTypeSameValidation -> (-4175)
       XlCellTypeAllValidation -> (-4174)
       XlCellTypeSameFormatConditions -> (-4173)
       XlCellTypeAllFormatConditions -> (-4172)
       XlCellTypeComments -> (-4144)
       XlCellTypeFormulas -> (-4123)
       XlCellTypeConstants -> 2
       XlCellTypeBlanks -> 4
       XlCellTypeLastCell -> 11
       XlCellTypeVisible -> 12
  
  toEnum v =
    case v of
       (-4175) -> XlCellTypeSameValidation
       (-4174) -> XlCellTypeAllValidation
       (-4173) -> XlCellTypeSameFormatConditions
       (-4172) -> XlCellTypeAllFormatConditions
       (-4144) -> XlCellTypeComments
       (-4123) -> XlCellTypeFormulas
       2 -> XlCellTypeConstants
       4 -> XlCellTypeBlanks
       11 -> XlCellTypeLastCell
       12 -> XlCellTypeVisible
       _ -> error "unmarshallXlCellType: illegal enum value "
  
data XlArrangeStyle
 = XlArrangeStyleVertical
 | XlArrangeStyleHorizontal
 | XlArrangeStyleTiled
 | XlArrangeStyleCascade
 
instance Enum (XlArrangeStyle) where
  fromEnum v =
    case v of
       XlArrangeStyleVertical -> (-4166)
       XlArrangeStyleHorizontal -> (-4128)
       XlArrangeStyleTiled -> 1
       XlArrangeStyleCascade -> 7
  
  toEnum v =
    case v of
       (-4166) -> XlArrangeStyleVertical
       (-4128) -> XlArrangeStyleHorizontal
       1 -> XlArrangeStyleTiled
       7 -> XlArrangeStyleCascade
       _ -> error "unmarshallXlArrangeStyle: illegal enum value "
  
data XlMousePointer
 = XlDefault
 | XlNorthwestArrow
 | XlWait
 | XlIBeam
 
instance Enum (XlMousePointer) where
  fromEnum v =
    case v of
       XlDefault -> (-4143)
       XlNorthwestArrow -> 1
       XlWait -> 2
       XlIBeam -> 3
  
  toEnum v =
    case v of
       (-4143) -> XlDefault
       1 -> XlNorthwestArrow
       2 -> XlWait
       3 -> XlIBeam
       _ -> error "unmarshallXlMousePointer: illegal enum value "
  
data XlEditionOptionsOption
 = XlCancel
 | XlSendPublisher
 | XlUpdateSubscriber
 | XlOpenSource
 | XlSelect
 | XlAutomaticUpdate
 | XlManualUpdate
 | XlChangeAttributes
 
instance Enum (XlEditionOptionsOption) where
  fromEnum v =
    case v of
       XlCancel -> 1
       XlSendPublisher -> 2
       XlUpdateSubscriber -> 2
       XlOpenSource -> 3
       XlSelect -> 3
       XlAutomaticUpdate -> 4
       XlManualUpdate -> 5
       XlChangeAttributes -> 6
  
  toEnum v =
    case v of
       1 -> XlCancel
       2 -> XlSendPublisher
       2 -> XlUpdateSubscriber
       3 -> XlOpenSource
       3 -> XlSelect
       4 -> XlAutomaticUpdate
       5 -> XlManualUpdate
       6 -> XlChangeAttributes
       _ -> error "unmarshallXlEditionOptionsOption: illegal enum value "
  
data XlAutoFillType
 = XlFillDefault
 | XlFillCopy
 | XlFillSeries
 | XlFillFormats
 | XlFillValues
 | XlFillDays
 | XlFillWeekdays
 | XlFillMonths
 | XlFillYears
 | XlLinearTrend
 | XlGrowthTrend
 deriving (Enum)
data XlAutoFilterOperator
 = XlAnd
 | XlOr
 | XlTop10Items
 | XlBottom10Items
 | XlTop10Percent
 | XlBottom10Percent
 | XlFilterValues
 | XlFilterCellColor
 | XlFilterFontColor
 | XlFilterIcon
 | XlFilterDynamic
 | XlFilterNoFill
 | XlFilterAutomaticFontColor
 | XlFilterNoIcon
 
instance Enum (XlAutoFilterOperator) where
  fromEnum v =
    case v of
       XlAnd -> 1
       XlOr -> 2
       XlTop10Items -> 3
       XlBottom10Items -> 4
       XlTop10Percent -> 5
       XlBottom10Percent -> 6
       XlFilterValues -> 7
       XlFilterCellColor -> 8
       XlFilterFontColor -> 9
       XlFilterIcon -> 10
       XlFilterDynamic -> 11
       XlFilterNoFill -> 12
       XlFilterAutomaticFontColor -> 13
       XlFilterNoIcon -> 14
  
  toEnum v =
    case v of
       1 -> XlAnd
       2 -> XlOr
       3 -> XlTop10Items
       4 -> XlBottom10Items
       5 -> XlTop10Percent
       6 -> XlBottom10Percent
       7 -> XlFilterValues
       8 -> XlFilterCellColor
       9 -> XlFilterFontColor
       10 -> XlFilterIcon
       11 -> XlFilterDynamic
       12 -> XlFilterNoFill
       13 -> XlFilterAutomaticFontColor
       14 -> XlFilterNoIcon
       _ -> error "unmarshallXlAutoFilterOperator: illegal enum value "
  
data XlClipboardFormat
 = XlClipboardFormatText
 | XlClipboardFormatVALU
 | XlClipboardFormatPICT
 | XlClipboardFormatPrintPICT
 | XlClipboardFormatDIF
 | XlClipboardFormatCSV
 | XlClipboardFormatSYLK
 | XlClipboardFormatRTF
 | XlClipboardFormatBIFF
 | XlClipboardFormatBitmap
 | XlClipboardFormatWK1
 | XlClipboardFormatLink
 | XlClipboardFormatDspText
 | XlClipboardFormatCGM
 | XlClipboardFormatNative
 | XlClipboardFormatBinary
 | XlClipboardFormatTable
 | XlClipboardFormatOwnerLink
 | XlClipboardFormatBIFF2
 | XlClipboardFormatObjectLink
 | XlClipboardFormatBIFF3
 | XlClipboardFormatEmbeddedObject
 | XlClipboardFormatEmbedSource
 | XlClipboardFormatLinkSource
 | XlClipboardFormatMovie
 | XlClipboardFormatToolFace
 | XlClipboardFormatToolFacePICT
 | XlClipboardFormatStandardScale
 | XlClipboardFormatStandardFont
 | XlClipboardFormatScreenPICT
 | XlClipboardFormatBIFF4
 | XlClipboardFormatObjectDesc
 | XlClipboardFormatLinkSourceDesc
 | XlClipboardFormatBIFF12
 
instance Enum (XlClipboardFormat) where
  fromEnum v =
    case v of
       XlClipboardFormatText -> 0
       XlClipboardFormatVALU -> 1
       XlClipboardFormatPICT -> 2
       XlClipboardFormatPrintPICT -> 3
       XlClipboardFormatDIF -> 4
       XlClipboardFormatCSV -> 5
       XlClipboardFormatSYLK -> 6
       XlClipboardFormatRTF -> 7
       XlClipboardFormatBIFF -> 8
       XlClipboardFormatBitmap -> 9
       XlClipboardFormatWK1 -> 10
       XlClipboardFormatLink -> 11
       XlClipboardFormatDspText -> 12
       XlClipboardFormatCGM -> 13
       XlClipboardFormatNative -> 14
       XlClipboardFormatBinary -> 15
       XlClipboardFormatTable -> 16
       XlClipboardFormatOwnerLink -> 17
       XlClipboardFormatBIFF2 -> 18
       XlClipboardFormatObjectLink -> 19
       XlClipboardFormatBIFF3 -> 20
       XlClipboardFormatEmbeddedObject -> 21
       XlClipboardFormatEmbedSource -> 22
       XlClipboardFormatLinkSource -> 23
       XlClipboardFormatMovie -> 24
       XlClipboardFormatToolFace -> 25
       XlClipboardFormatToolFacePICT -> 26
       XlClipboardFormatStandardScale -> 27
       XlClipboardFormatStandardFont -> 28
       XlClipboardFormatScreenPICT -> 29
       XlClipboardFormatBIFF4 -> 30
       XlClipboardFormatObjectDesc -> 31
       XlClipboardFormatLinkSourceDesc -> 32
       XlClipboardFormatBIFF12 -> 63
  
  toEnum v =
    case v of
       0 -> XlClipboardFormatText
       1 -> XlClipboardFormatVALU
       2 -> XlClipboardFormatPICT
       3 -> XlClipboardFormatPrintPICT
       4 -> XlClipboardFormatDIF
       5 -> XlClipboardFormatCSV
       6 -> XlClipboardFormatSYLK
       7 -> XlClipboardFormatRTF
       8 -> XlClipboardFormatBIFF
       9 -> XlClipboardFormatBitmap
       10 -> XlClipboardFormatWK1
       11 -> XlClipboardFormatLink
       12 -> XlClipboardFormatDspText
       13 -> XlClipboardFormatCGM
       14 -> XlClipboardFormatNative
       15 -> XlClipboardFormatBinary
       16 -> XlClipboardFormatTable
       17 -> XlClipboardFormatOwnerLink
       18 -> XlClipboardFormatBIFF2
       19 -> XlClipboardFormatObjectLink
       20 -> XlClipboardFormatBIFF3
       21 -> XlClipboardFormatEmbeddedObject
       22 -> XlClipboardFormatEmbedSource
       23 -> XlClipboardFormatLinkSource
       24 -> XlClipboardFormatMovie
       25 -> XlClipboardFormatToolFace
       26 -> XlClipboardFormatToolFacePICT
       27 -> XlClipboardFormatStandardScale
       28 -> XlClipboardFormatStandardFont
       29 -> XlClipboardFormatScreenPICT
       30 -> XlClipboardFormatBIFF4
       31 -> XlClipboardFormatObjectDesc
       32 -> XlClipboardFormatLinkSourceDesc
       63 -> XlClipboardFormatBIFF12
       _ -> error "unmarshallXlClipboardFormat: illegal enum value "
  
data XlFileFormat
 = XlCurrentPlatformText
 | XlWorkbookNormal
 | XlSYLK
 | XlWKS
 | XlWK1
 | XlCSV
 | XlDBF2
 | XlDBF3
 | XlDIF
 | XlDBF4
 | XlWJ2WD1
 | XlWK3
 | XlExcel2
 | XlTemplate
 | XlTemplate8
 | XlAddIn
 | XlAddIn8
 | XlTextMac
 | XlTextWindows
 | XlTextMSDOS
 | XlCSVMac
 | XlCSVWindows
 | XlCSVMSDOS
 | XlIntlMacro
 | XlIntlAddIn
 | XlExcel2FarEast
 | XlWorks2FarEast
 | XlExcel3
 | XlWK1FMT
 | XlWK1ALL
 | XlWK3FM3
 | XlExcel4
 | XlWQ1
 | XlExcel4Workbook
 | XlTextPrinter
 | XlWK4
 | XlExcel5
 | XlExcel7
 | XlWJ3
 | XlWJ3FJ3
 | XlUnicodeText
 | XlExcel9795
 | XlHtml
 | XlWebArchive
 | XlXMLSpreadsheet
 | XlExcel12
 | XlOpenXMLWorkbook
 | XlWorkbookDefault
 | XlOpenXMLWorkbookMacroEnabled
 | XlOpenXMLTemplateMacroEnabled
 | XlOpenXMLTemplate
 | XlOpenXMLAddIn
 | XlExcel8
 | XlOpenDocumentSpreadsheet
 
instance Enum (XlFileFormat) where
  fromEnum v =
    case v of
       XlCurrentPlatformText -> (-4158)
       XlWorkbookNormal -> (-4143)
       XlSYLK -> 2
       XlWKS -> 4
       XlWK1 -> 5
       XlCSV -> 6
       XlDBF2 -> 7
       XlDBF3 -> 8
       XlDIF -> 9
       XlDBF4 -> 11
       XlWJ2WD1 -> 14
       XlWK3 -> 15
       XlExcel2 -> 16
       XlTemplate -> 17
       XlTemplate8 -> 17
       XlAddIn -> 18
       XlAddIn8 -> 18
       XlTextMac -> 19
       XlTextWindows -> 20
       XlTextMSDOS -> 21
       XlCSVMac -> 22
       XlCSVWindows -> 23
       XlCSVMSDOS -> 24
       XlIntlMacro -> 25
       XlIntlAddIn -> 26
       XlExcel2FarEast -> 27
       XlWorks2FarEast -> 28
       XlExcel3 -> 29
       XlWK1FMT -> 30
       XlWK1ALL -> 31
       XlWK3FM3 -> 32
       XlExcel4 -> 33
       XlWQ1 -> 34
       XlExcel4Workbook -> 35
       XlTextPrinter -> 36
       XlWK4 -> 38
       XlExcel5 -> 39
       XlExcel7 -> 39
       XlWJ3 -> 40
       XlWJ3FJ3 -> 41
       XlUnicodeText -> 42
       XlExcel9795 -> 43
       XlHtml -> 44
       XlWebArchive -> 45
       XlXMLSpreadsheet -> 46
       XlExcel12 -> 50
       XlOpenXMLWorkbook -> 51
       XlWorkbookDefault -> 51
       XlOpenXMLWorkbookMacroEnabled -> 52
       XlOpenXMLTemplateMacroEnabled -> 53
       XlOpenXMLTemplate -> 54
       XlOpenXMLAddIn -> 55
       XlExcel8 -> 56
       XlOpenDocumentSpreadsheet -> 60
  
  toEnum v =
    case v of
       (-4158) -> XlCurrentPlatformText
       (-4143) -> XlWorkbookNormal
       2 -> XlSYLK
       4 -> XlWKS
       5 -> XlWK1
       6 -> XlCSV
       7 -> XlDBF2
       8 -> XlDBF3
       9 -> XlDIF
       11 -> XlDBF4
       14 -> XlWJ2WD1
       15 -> XlWK3
       16 -> XlExcel2
       17 -> XlTemplate
       17 -> XlTemplate8
       18 -> XlAddIn
       18 -> XlAddIn8
       19 -> XlTextMac
       20 -> XlTextWindows
       21 -> XlTextMSDOS
       22 -> XlCSVMac
       23 -> XlCSVWindows
       24 -> XlCSVMSDOS
       25 -> XlIntlMacro
       26 -> XlIntlAddIn
       27 -> XlExcel2FarEast
       28 -> XlWorks2FarEast
       29 -> XlExcel3
       30 -> XlWK1FMT
       31 -> XlWK1ALL
       32 -> XlWK3FM3
       33 -> XlExcel4
       34 -> XlWQ1
       35 -> XlExcel4Workbook
       36 -> XlTextPrinter
       38 -> XlWK4
       39 -> XlExcel5
       39 -> XlExcel7
       40 -> XlWJ3
       41 -> XlWJ3FJ3
       42 -> XlUnicodeText
       43 -> XlExcel9795
       44 -> XlHtml
       45 -> XlWebArchive
       46 -> XlXMLSpreadsheet
       50 -> XlExcel12
       51 -> XlOpenXMLWorkbook
       51 -> XlWorkbookDefault
       52 -> XlOpenXMLWorkbookMacroEnabled
       53 -> XlOpenXMLTemplateMacroEnabled
       54 -> XlOpenXMLTemplate
       55 -> XlOpenXMLAddIn
       56 -> XlExcel8
       60 -> XlOpenDocumentSpreadsheet
       _ -> error "unmarshallXlFileFormat: illegal enum value "
  
data XlApplicationInternational
 = XlCountryCode
 | XlCountrySetting
 | XlDecimalSeparator
 | XlThousandsSeparator
 | XlListSeparator
 | XlUpperCaseRowLetter
 | XlUpperCaseColumnLetter
 | XlLowerCaseRowLetter
 | XlLowerCaseColumnLetter
 | XlLeftBracket
 | XlRightBracket
 | XlLeftBrace
 | XlRightBrace
 | XlColumnSeparator
 | XlRowSeparator
 | XlAlternateArraySeparator
 | XlDateSeparator
 | XlTimeSeparator
 | XlYearCode
 | XlMonthCode
 | XlDayCode
 | XlHourCode
 | XlMinuteCode
 | XlSecondCode
 | XlCurrencyCode
 | XlGeneralFormatName
 | XlCurrencyDigits
 | XlCurrencyNegative
 | XlNoncurrencyDigits
 | XlMonthNameChars
 | XlWeekdayNameChars
 | XlDateOrder
 | Xl24HourClock
 | XlNonEnglishFunctions
 | XlMetric
 | XlCurrencySpaceBefore
 | XlCurrencyBefore
 | XlCurrencyMinusSign
 | XlCurrencyTrailingZeros
 | XlCurrencyLeadingZeros
 | XlMonthLeadingZero
 | XlDayLeadingZero
 | Xl4DigitYears
 | XlMDY
 | XlTimeLeadingZero
 
instance Enum (XlApplicationInternational) where
  fromEnum v =
    case v of
       XlCountryCode -> 1
       XlCountrySetting -> 2
       XlDecimalSeparator -> 3
       XlThousandsSeparator -> 4
       XlListSeparator -> 5
       XlUpperCaseRowLetter -> 6
       XlUpperCaseColumnLetter -> 7
       XlLowerCaseRowLetter -> 8
       XlLowerCaseColumnLetter -> 9
       XlLeftBracket -> 10
       XlRightBracket -> 11
       XlLeftBrace -> 12
       XlRightBrace -> 13
       XlColumnSeparator -> 14
       XlRowSeparator -> 15
       XlAlternateArraySeparator -> 16
       XlDateSeparator -> 17
       XlTimeSeparator -> 18
       XlYearCode -> 19
       XlMonthCode -> 20
       XlDayCode -> 21
       XlHourCode -> 22
       XlMinuteCode -> 23
       XlSecondCode -> 24
       XlCurrencyCode -> 25
       XlGeneralFormatName -> 26
       XlCurrencyDigits -> 27
       XlCurrencyNegative -> 28
       XlNoncurrencyDigits -> 29
       XlMonthNameChars -> 30
       XlWeekdayNameChars -> 31
       XlDateOrder -> 32
       Xl24HourClock -> 33
       XlNonEnglishFunctions -> 34
       XlMetric -> 35
       XlCurrencySpaceBefore -> 36
       XlCurrencyBefore -> 37
       XlCurrencyMinusSign -> 38
       XlCurrencyTrailingZeros -> 39
       XlCurrencyLeadingZeros -> 40
       XlMonthLeadingZero -> 41
       XlDayLeadingZero -> 42
       Xl4DigitYears -> 43
       XlMDY -> 44
       XlTimeLeadingZero -> 45
  
  toEnum v =
    case v of
       1 -> XlCountryCode
       2 -> XlCountrySetting
       3 -> XlDecimalSeparator
       4 -> XlThousandsSeparator
       5 -> XlListSeparator
       6 -> XlUpperCaseRowLetter
       7 -> XlUpperCaseColumnLetter
       8 -> XlLowerCaseRowLetter
       9 -> XlLowerCaseColumnLetter
       10 -> XlLeftBracket
       11 -> XlRightBracket
       12 -> XlLeftBrace
       13 -> XlRightBrace
       14 -> XlColumnSeparator
       15 -> XlRowSeparator
       16 -> XlAlternateArraySeparator
       17 -> XlDateSeparator
       18 -> XlTimeSeparator
       19 -> XlYearCode
       20 -> XlMonthCode
       21 -> XlDayCode
       22 -> XlHourCode
       23 -> XlMinuteCode
       24 -> XlSecondCode
       25 -> XlCurrencyCode
       26 -> XlGeneralFormatName
       27 -> XlCurrencyDigits
       28 -> XlCurrencyNegative
       29 -> XlNoncurrencyDigits
       30 -> XlMonthNameChars
       31 -> XlWeekdayNameChars
       32 -> XlDateOrder
       33 -> Xl24HourClock
       34 -> XlNonEnglishFunctions
       35 -> XlMetric
       36 -> XlCurrencySpaceBefore
       37 -> XlCurrencyBefore
       38 -> XlCurrencyMinusSign
       39 -> XlCurrencyTrailingZeros
       40 -> XlCurrencyLeadingZeros
       41 -> XlMonthLeadingZero
       42 -> XlDayLeadingZero
       43 -> Xl4DigitYears
       44 -> XlMDY
       45 -> XlTimeLeadingZero
       _ -> error "unmarshallXlApplicationInternational: illegal enum value "
  
data XlPageBreakExtent
 = XlPageBreakExtentList__ [XlPageBreakExtent]
 | XlPageBreakFull
 | XlPageBreakPartial
 
instance Flags (XlPageBreakExtent) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlPageBreakExtent) where
  fromEnum v =
    case v of
       (XlPageBreakExtentList__ xs) -> orList (map fromEnum xs)
       XlPageBreakFull -> 1
       XlPageBreakPartial -> 2
  
  toEnum v =
    case v of
       1 -> XlPageBreakFull
       2 -> XlPageBreakPartial
       x -> XlPageBreakExtentList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlPageBreakExtent: illegal enum value "
  
data XlCellInsertionMode
 = XlCellInsertionModeList__ [XlCellInsertionMode]
 | XlOverwriteCells
 | XlInsertDeleteCells
 | XlInsertEntireRows
 
instance Flags (XlCellInsertionMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCellInsertionMode) where
  fromEnum v =
    case v of
       (XlCellInsertionModeList__ xs) -> orList (map fromEnum xs)
       XlOverwriteCells -> 0
       XlInsertDeleteCells -> 1
       XlInsertEntireRows -> 2
  
  toEnum v =
    case v of
       0 -> XlOverwriteCells
       1 -> XlInsertDeleteCells
       2 -> XlInsertEntireRows
       x -> XlCellInsertionModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCellInsertionMode: illegal enum value "
  
data XlFormulaLabel
 = XlNoLabels
 | XlRowLabels
 | XlColumnLabels
 | XlMixedLabels
 
instance Enum (XlFormulaLabel) where
  fromEnum v =
    case v of
       XlNoLabels -> (-4142)
       XlRowLabels -> 1
       XlColumnLabels -> 2
       XlMixedLabels -> 3
  
  toEnum v =
    case v of
       (-4142) -> XlNoLabels
       1 -> XlRowLabels
       2 -> XlColumnLabels
       3 -> XlMixedLabels
       _ -> error "unmarshallXlFormulaLabel: illegal enum value "
  
data XlHighlightChangesTime
 = XlSinceMyLastSave
 | XlAllChanges
 | XlNotYetReviewed
 
instance Enum (XlHighlightChangesTime) where
  fromEnum v =
    case v of
       XlSinceMyLastSave -> 1
       XlAllChanges -> 2
       XlNotYetReviewed -> 3
  
  toEnum v =
    case v of
       1 -> XlSinceMyLastSave
       2 -> XlAllChanges
       3 -> XlNotYetReviewed
       _ -> error "unmarshallXlHighlightChangesTime: illegal enum value "
  
data XlCommentDisplayMode
 = XlCommentIndicatorOnly
 | XlNoIndicator
 | XlCommentAndIndicator
 
instance Enum (XlCommentDisplayMode) where
  fromEnum v =
    case v of
       XlCommentIndicatorOnly -> (-1)
       XlNoIndicator -> 0
       XlCommentAndIndicator -> 1
  
  toEnum v =
    case v of
       (-1) -> XlCommentIndicatorOnly
       0 -> XlNoIndicator
       1 -> XlCommentAndIndicator
       _ -> error "unmarshallXlCommentDisplayMode: illegal enum value "
  
data XlFormatConditionType
 = XlCellValue
 | XlExpression
 | XlColorScale
 | XlDatabar
 | XlTop10
 | XlIconSets
 | XlUniqueValues
 | XlTextString
 | XlBlanksCondition
 | XlTimePeriod
 | XlAboveAverageCondition
 | XlNoBlanksCondition
 | XlErrorsCondition
 | XlNoErrorsCondition
 
instance Enum (XlFormatConditionType) where
  fromEnum v =
    case v of
       XlCellValue -> 1
       XlExpression -> 2
       XlColorScale -> 3
       XlDatabar -> 4
       XlTop10 -> 5
       XlIconSets -> 6
       XlUniqueValues -> 8
       XlTextString -> 9
       XlBlanksCondition -> 10
       XlTimePeriod -> 11
       XlAboveAverageCondition -> 12
       XlNoBlanksCondition -> 13
       XlErrorsCondition -> 16
       XlNoErrorsCondition -> 17
  
  toEnum v =
    case v of
       1 -> XlCellValue
       2 -> XlExpression
       3 -> XlColorScale
       4 -> XlDatabar
       5 -> XlTop10
       6 -> XlIconSets
       8 -> XlUniqueValues
       9 -> XlTextString
       10 -> XlBlanksCondition
       11 -> XlTimePeriod
       12 -> XlAboveAverageCondition
       13 -> XlNoBlanksCondition
       16 -> XlErrorsCondition
       17 -> XlNoErrorsCondition
       _ -> error "unmarshallXlFormatConditionType: illegal enum value "
  
data XlFormatConditionOperator
 = XlBetween
 | XlNotBetween
 | XlEqual
 | XlNotEqual
 | XlGreater
 | XlLess
 | XlGreaterEqual
 | XlLessEqual
 
instance Enum (XlFormatConditionOperator) where
  fromEnum v =
    case v of
       XlBetween -> 1
       XlNotBetween -> 2
       XlEqual -> 3
       XlNotEqual -> 4
       XlGreater -> 5
       XlLess -> 6
       XlGreaterEqual -> 7
       XlLessEqual -> 8
  
  toEnum v =
    case v of
       1 -> XlBetween
       2 -> XlNotBetween
       3 -> XlEqual
       4 -> XlNotEqual
       5 -> XlGreater
       6 -> XlLess
       7 -> XlGreaterEqual
       8 -> XlLessEqual
       _ -> error "unmarshallXlFormatConditionOperator: illegal enum value "
  
data XlEnableSelection
 = XlNoSelection
 | XlNoRestrictions
 | XlUnlockedCells
 
instance Enum (XlEnableSelection) where
  fromEnum v =
    case v of
       XlNoSelection -> (-4142)
       XlNoRestrictions -> 0
       XlUnlockedCells -> 1
  
  toEnum v =
    case v of
       (-4142) -> XlNoSelection
       0 -> XlNoRestrictions
       1 -> XlUnlockedCells
       _ -> error "unmarshallXlEnableSelection: illegal enum value "
  
data XlDVType
 = XlValidateInputOnly
 | XlValidateWholeNumber
 | XlValidateDecimal
 | XlValidateList
 | XlValidateDate
 | XlValidateTime
 | XlValidateTextLength
 | XlValidateCustom
 deriving (Enum)
data XlIMEMode
 = XlIMEModeNoControl
 | XlIMEModeOn
 | XlIMEModeOff
 | XlIMEModeDisable
 | XlIMEModeHiragana
 | XlIMEModeKatakana
 | XlIMEModeKatakanaHalf
 | XlIMEModeAlphaFull
 | XlIMEModeAlpha
 | XlIMEModeHangulFull
 | XlIMEModeHangul
 deriving (Enum)
data XlDVAlertStyle
 = XlValidAlertStop
 | XlValidAlertWarning
 | XlValidAlertInformation
 
instance Enum (XlDVAlertStyle) where
  fromEnum v =
    case v of
       XlValidAlertStop -> 1
       XlValidAlertWarning -> 2
       XlValidAlertInformation -> 3
  
  toEnum v =
    case v of
       1 -> XlValidAlertStop
       2 -> XlValidAlertWarning
       3 -> XlValidAlertInformation
       _ -> error "unmarshallXlDVAlertStyle: illegal enum value "
  
data XlChartLocation
 = XlLocationAsNewSheet
 | XlLocationAsObject
 | XlLocationAutomatic
 
instance Enum (XlChartLocation) where
  fromEnum v =
    case v of
       XlLocationAsNewSheet -> 1
       XlLocationAsObject -> 2
       XlLocationAutomatic -> 3
  
  toEnum v =
    case v of
       1 -> XlLocationAsNewSheet
       2 -> XlLocationAsObject
       3 -> XlLocationAutomatic
       _ -> error "unmarshallXlChartLocation: illegal enum value "
  
data XlPaperSize
 = XlPaperLetter
 | XlPaperLetterSmall
 | XlPaperTabloid
 | XlPaperLedger
 | XlPaperLegal
 | XlPaperStatement
 | XlPaperExecutive
 | XlPaperA3
 | XlPaperA4
 | XlPaperA4Small
 | XlPaperA5
 | XlPaperB4
 | XlPaperB5
 | XlPaperFolio
 | XlPaperQuarto
 | XlPaper10x14
 | XlPaper11x17
 | XlPaperNote
 | XlPaperEnvelope9
 | XlPaperEnvelope10
 | XlPaperEnvelope11
 | XlPaperEnvelope12
 | XlPaperEnvelope14
 | XlPaperCsheet
 | XlPaperDsheet
 | XlPaperEsheet
 | XlPaperEnvelopeDL
 | XlPaperEnvelopeC5
 | XlPaperEnvelopeC3
 | XlPaperEnvelopeC4
 | XlPaperEnvelopeC6
 | XlPaperEnvelopeC65
 | XlPaperEnvelopeB4
 | XlPaperEnvelopeB5
 | XlPaperEnvelopeB6
 | XlPaperEnvelopeItaly
 | XlPaperEnvelopeMonarch
 | XlPaperEnvelopePersonal
 | XlPaperFanfoldUS
 | XlPaperFanfoldStdGerman
 | XlPaperFanfoldLegalGerman
 | XlPaperUser
 
instance Enum (XlPaperSize) where
  fromEnum v =
    case v of
       XlPaperLetter -> 1
       XlPaperLetterSmall -> 2
       XlPaperTabloid -> 3
       XlPaperLedger -> 4
       XlPaperLegal -> 5
       XlPaperStatement -> 6
       XlPaperExecutive -> 7
       XlPaperA3 -> 8
       XlPaperA4 -> 9
       XlPaperA4Small -> 10
       XlPaperA5 -> 11
       XlPaperB4 -> 12
       XlPaperB5 -> 13
       XlPaperFolio -> 14
       XlPaperQuarto -> 15
       XlPaper10x14 -> 16
       XlPaper11x17 -> 17
       XlPaperNote -> 18
       XlPaperEnvelope9 -> 19
       XlPaperEnvelope10 -> 20
       XlPaperEnvelope11 -> 21
       XlPaperEnvelope12 -> 22
       XlPaperEnvelope14 -> 23
       XlPaperCsheet -> 24
       XlPaperDsheet -> 25
       XlPaperEsheet -> 26
       XlPaperEnvelopeDL -> 27
       XlPaperEnvelopeC5 -> 28
       XlPaperEnvelopeC3 -> 29
       XlPaperEnvelopeC4 -> 30
       XlPaperEnvelopeC6 -> 31
       XlPaperEnvelopeC65 -> 32
       XlPaperEnvelopeB4 -> 33
       XlPaperEnvelopeB5 -> 34
       XlPaperEnvelopeB6 -> 35
       XlPaperEnvelopeItaly -> 36
       XlPaperEnvelopeMonarch -> 37
       XlPaperEnvelopePersonal -> 38
       XlPaperFanfoldUS -> 39
       XlPaperFanfoldStdGerman -> 40
       XlPaperFanfoldLegalGerman -> 41
       XlPaperUser -> 256
  
  toEnum v =
    case v of
       1 -> XlPaperLetter
       2 -> XlPaperLetterSmall
       3 -> XlPaperTabloid
       4 -> XlPaperLedger
       5 -> XlPaperLegal
       6 -> XlPaperStatement
       7 -> XlPaperExecutive
       8 -> XlPaperA3
       9 -> XlPaperA4
       10 -> XlPaperA4Small
       11 -> XlPaperA5
       12 -> XlPaperB4
       13 -> XlPaperB5
       14 -> XlPaperFolio
       15 -> XlPaperQuarto
       16 -> XlPaper10x14
       17 -> XlPaper11x17
       18 -> XlPaperNote
       19 -> XlPaperEnvelope9
       20 -> XlPaperEnvelope10
       21 -> XlPaperEnvelope11
       22 -> XlPaperEnvelope12
       23 -> XlPaperEnvelope14
       24 -> XlPaperCsheet
       25 -> XlPaperDsheet
       26 -> XlPaperEsheet
       27 -> XlPaperEnvelopeDL
       28 -> XlPaperEnvelopeC5
       29 -> XlPaperEnvelopeC3
       30 -> XlPaperEnvelopeC4
       31 -> XlPaperEnvelopeC6
       32 -> XlPaperEnvelopeC65
       33 -> XlPaperEnvelopeB4
       34 -> XlPaperEnvelopeB5
       35 -> XlPaperEnvelopeB6
       36 -> XlPaperEnvelopeItaly
       37 -> XlPaperEnvelopeMonarch
       38 -> XlPaperEnvelopePersonal
       39 -> XlPaperFanfoldUS
       40 -> XlPaperFanfoldStdGerman
       41 -> XlPaperFanfoldLegalGerman
       256 -> XlPaperUser
       _ -> error "unmarshallXlPaperSize: illegal enum value "
  
data XlPasteSpecialOperation
 = XlPasteSpecialOperationNone
 | XlPasteSpecialOperationAdd
 | XlPasteSpecialOperationSubtract
 | XlPasteSpecialOperationMultiply
 | XlPasteSpecialOperationDivide
 
instance Enum (XlPasteSpecialOperation) where
  fromEnum v =
    case v of
       XlPasteSpecialOperationNone -> (-4142)
       XlPasteSpecialOperationAdd -> 2
       XlPasteSpecialOperationSubtract -> 3
       XlPasteSpecialOperationMultiply -> 4
       XlPasteSpecialOperationDivide -> 5
  
  toEnum v =
    case v of
       (-4142) -> XlPasteSpecialOperationNone
       2 -> XlPasteSpecialOperationAdd
       3 -> XlPasteSpecialOperationSubtract
       4 -> XlPasteSpecialOperationMultiply
       5 -> XlPasteSpecialOperationDivide
       _ -> error "unmarshallXlPasteSpecialOperation: illegal enum value "
  
data XlPasteType
 = XlPasteValues
 | XlPasteComments
 | XlPasteFormulas
 | XlPasteFormats
 | XlPasteAll
 | XlPasteValidation
 | XlPasteAllExceptBorders
 | XlPasteColumnWidths
 | XlPasteFormulasAndNumberFormats
 | XlPasteValuesAndNumberFormats
 | XlPasteAllUsingSourceTheme
 
instance Enum (XlPasteType) where
  fromEnum v =
    case v of
       XlPasteValues -> (-4163)
       XlPasteComments -> (-4144)
       XlPasteFormulas -> (-4123)
       XlPasteFormats -> (-4122)
       XlPasteAll -> (-4104)
       XlPasteValidation -> 6
       XlPasteAllExceptBorders -> 7
       XlPasteColumnWidths -> 8
       XlPasteFormulasAndNumberFormats -> 11
       XlPasteValuesAndNumberFormats -> 12
       XlPasteAllUsingSourceTheme -> 13
  
  toEnum v =
    case v of
       (-4163) -> XlPasteValues
       (-4144) -> XlPasteComments
       (-4123) -> XlPasteFormulas
       (-4122) -> XlPasteFormats
       (-4104) -> XlPasteAll
       6 -> XlPasteValidation
       7 -> XlPasteAllExceptBorders
       8 -> XlPasteColumnWidths
       11 -> XlPasteFormulasAndNumberFormats
       12 -> XlPasteValuesAndNumberFormats
       13 -> XlPasteAllUsingSourceTheme
       _ -> error "unmarshallXlPasteType: illegal enum value "
  
data XlPhoneticCharacterType
 = XlKatakanaHalf
 | XlKatakana
 | XlHiragana
 | XlNoConversion
 deriving (Enum)
data XlPhoneticAlignment
 = XlPhoneticAlignNoControl
 | XlPhoneticAlignLeft
 | XlPhoneticAlignCenter
 | XlPhoneticAlignDistributed
 deriving (Enum)
data XlPictureAppearance
 = XlPictureAppearanceList__ [XlPictureAppearance]
 | XlScreen
 | XlPrinter
 
instance Flags (XlPictureAppearance) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlPictureAppearance) where
  fromEnum v =
    case v of
       (XlPictureAppearanceList__ xs) -> orList (map fromEnum xs)
       XlScreen -> 1
       XlPrinter -> 2
  
  toEnum v =
    case v of
       1 -> XlScreen
       2 -> XlPrinter
       x -> XlPictureAppearanceList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlPictureAppearance: illegal enum value "
  
data XlPivotFieldOrientation
 = XlHidden
 | XlRowField
 | XlColumnField
 | XlPageField
 | XlDataField
 deriving (Enum)
data XlPivotFieldCalculation
 = XlNoAdditionalCalculation
 | XlDifferenceFrom
 | XlPercentOf
 | XlPercentDifferenceFrom
 | XlRunningTotal
 | XlPercentOfRow
 | XlPercentOfColumn
 | XlPercentOfTotal
 | XlIndex
 
instance Enum (XlPivotFieldCalculation) where
  fromEnum v =
    case v of
       XlNoAdditionalCalculation -> (-4143)
       XlDifferenceFrom -> 2
       XlPercentOf -> 3
       XlPercentDifferenceFrom -> 4
       XlRunningTotal -> 5
       XlPercentOfRow -> 6
       XlPercentOfColumn -> 7
       XlPercentOfTotal -> 8
       XlIndex -> 9
  
  toEnum v =
    case v of
       (-4143) -> XlNoAdditionalCalculation
       2 -> XlDifferenceFrom
       3 -> XlPercentOf
       4 -> XlPercentDifferenceFrom
       5 -> XlRunningTotal
       6 -> XlPercentOfRow
       7 -> XlPercentOfColumn
       8 -> XlPercentOfTotal
       9 -> XlIndex
       _ -> error "unmarshallXlPivotFieldCalculation: illegal enum value "
  
data XlPlacement
 = XlMoveAndSize
 | XlMove
 | XlFreeFloating
 
instance Enum (XlPlacement) where
  fromEnum v =
    case v of
       XlMoveAndSize -> 1
       XlMove -> 2
       XlFreeFloating -> 3
  
  toEnum v =
    case v of
       1 -> XlMoveAndSize
       2 -> XlMove
       3 -> XlFreeFloating
       _ -> error "unmarshallXlPlacement: illegal enum value "
  
data XlPlatform
 = XlMacintosh
 | XlWindows
 | XlMSDOS
 
instance Enum (XlPlatform) where
  fromEnum v =
    case v of
       XlMacintosh -> 1
       XlWindows -> 2
       XlMSDOS -> 3
  
  toEnum v =
    case v of
       1 -> XlMacintosh
       2 -> XlWindows
       3 -> XlMSDOS
       _ -> error "unmarshallXlPlatform: illegal enum value "
  
data XlPrintLocation
 = XlPrintNoComments
 | XlPrintSheetEnd
 | XlPrintInPlace
 
instance Enum (XlPrintLocation) where
  fromEnum v =
    case v of
       XlPrintNoComments -> (-4142)
       XlPrintSheetEnd -> 1
       XlPrintInPlace -> 16
  
  toEnum v =
    case v of
       (-4142) -> XlPrintNoComments
       1 -> XlPrintSheetEnd
       16 -> XlPrintInPlace
       _ -> error "unmarshallXlPrintLocation: illegal enum value "
  
data XlPriority
 = XlPriorityNormal
 | XlPriorityLow
 | XlPriorityHigh
 
instance Enum (XlPriority) where
  fromEnum v =
    case v of
       XlPriorityNormal -> (-4143)
       XlPriorityLow -> (-4134)
       XlPriorityHigh -> (-4127)
  
  toEnum v =
    case v of
       (-4143) -> XlPriorityNormal
       (-4134) -> XlPriorityLow
       (-4127) -> XlPriorityHigh
       _ -> error "unmarshallXlPriority: illegal enum value "
  
data XlPTSelectionMode
 = XlDataAndLabel
 | XlLabelOnly
 | XlDataOnly
 | XlOrigin
 | XlBlanks
 | XlButton
 | XlFirstRow
 
instance Enum (XlPTSelectionMode) where
  fromEnum v =
    case v of
       XlDataAndLabel -> 0
       XlLabelOnly -> 1
       XlDataOnly -> 2
       XlOrigin -> 3
       XlBlanks -> 4
       XlButton -> 15
       XlFirstRow -> 256
  
  toEnum v =
    case v of
       0 -> XlDataAndLabel
       1 -> XlLabelOnly
       2 -> XlDataOnly
       3 -> XlOrigin
       4 -> XlBlanks
       15 -> XlButton
       256 -> XlFirstRow
       _ -> error "unmarshallXlPTSelectionMode: illegal enum value "
  
data XlRangeAutoFormat
 = XlRangeAutoFormatSimple
 | XlRangeAutoFormatNone
 | XlRangeAutoFormatClassic1
 | XlRangeAutoFormatClassic2
 | XlRangeAutoFormatClassic3
 | XlRangeAutoFormatAccounting1
 | XlRangeAutoFormatAccounting2
 | XlRangeAutoFormatAccounting3
 | XlRangeAutoFormatColor1
 | XlRangeAutoFormatColor2
 | XlRangeAutoFormatColor3
 | XlRangeAutoFormatList1
 | XlRangeAutoFormatList2
 | XlRangeAutoFormatList3
 | XlRangeAutoFormat3DEffects1
 | XlRangeAutoFormat3DEffects2
 | XlRangeAutoFormatLocalFormat1
 | XlRangeAutoFormatLocalFormat2
 | XlRangeAutoFormatAccounting4
 | XlRangeAutoFormatLocalFormat3
 | XlRangeAutoFormatLocalFormat4
 | XlRangeAutoFormatReport1
 | XlRangeAutoFormatReport2
 | XlRangeAutoFormatReport3
 | XlRangeAutoFormatReport4
 | XlRangeAutoFormatReport5
 | XlRangeAutoFormatReport6
 | XlRangeAutoFormatReport7
 | XlRangeAutoFormatReport8
 | XlRangeAutoFormatReport9
 | XlRangeAutoFormatReport10
 | XlRangeAutoFormatClassicPivotTable
 | XlRangeAutoFormatTable1
 | XlRangeAutoFormatTable2
 | XlRangeAutoFormatTable3
 | XlRangeAutoFormatTable4
 | XlRangeAutoFormatTable5
 | XlRangeAutoFormatTable6
 | XlRangeAutoFormatTable7
 | XlRangeAutoFormatTable8
 | XlRangeAutoFormatTable9
 | XlRangeAutoFormatTable10
 | XlRangeAutoFormatPTNone
 
instance Enum (XlRangeAutoFormat) where
  fromEnum v =
    case v of
       XlRangeAutoFormatSimple -> (-4154)
       XlRangeAutoFormatNone -> (-4142)
       XlRangeAutoFormatClassic1 -> 1
       XlRangeAutoFormatClassic2 -> 2
       XlRangeAutoFormatClassic3 -> 3
       XlRangeAutoFormatAccounting1 -> 4
       XlRangeAutoFormatAccounting2 -> 5
       XlRangeAutoFormatAccounting3 -> 6
       XlRangeAutoFormatColor1 -> 7
       XlRangeAutoFormatColor2 -> 8
       XlRangeAutoFormatColor3 -> 9
       XlRangeAutoFormatList1 -> 10
       XlRangeAutoFormatList2 -> 11
       XlRangeAutoFormatList3 -> 12
       XlRangeAutoFormat3DEffects1 -> 13
       XlRangeAutoFormat3DEffects2 -> 14
       XlRangeAutoFormatLocalFormat1 -> 15
       XlRangeAutoFormatLocalFormat2 -> 16
       XlRangeAutoFormatAccounting4 -> 17
       XlRangeAutoFormatLocalFormat3 -> 19
       XlRangeAutoFormatLocalFormat4 -> 20
       XlRangeAutoFormatReport1 -> 21
       XlRangeAutoFormatReport2 -> 22
       XlRangeAutoFormatReport3 -> 23
       XlRangeAutoFormatReport4 -> 24
       XlRangeAutoFormatReport5 -> 25
       XlRangeAutoFormatReport6 -> 26
       XlRangeAutoFormatReport7 -> 27
       XlRangeAutoFormatReport8 -> 28
       XlRangeAutoFormatReport9 -> 29
       XlRangeAutoFormatReport10 -> 30
       XlRangeAutoFormatClassicPivotTable -> 31
       XlRangeAutoFormatTable1 -> 32
       XlRangeAutoFormatTable2 -> 33
       XlRangeAutoFormatTable3 -> 34
       XlRangeAutoFormatTable4 -> 35
       XlRangeAutoFormatTable5 -> 36
       XlRangeAutoFormatTable6 -> 37
       XlRangeAutoFormatTable7 -> 38
       XlRangeAutoFormatTable8 -> 39
       XlRangeAutoFormatTable9 -> 40
       XlRangeAutoFormatTable10 -> 41
       XlRangeAutoFormatPTNone -> 42
  
  toEnum v =
    case v of
       (-4154) -> XlRangeAutoFormatSimple
       (-4142) -> XlRangeAutoFormatNone
       1 -> XlRangeAutoFormatClassic1
       2 -> XlRangeAutoFormatClassic2
       3 -> XlRangeAutoFormatClassic3
       4 -> XlRangeAutoFormatAccounting1
       5 -> XlRangeAutoFormatAccounting2
       6 -> XlRangeAutoFormatAccounting3
       7 -> XlRangeAutoFormatColor1
       8 -> XlRangeAutoFormatColor2
       9 -> XlRangeAutoFormatColor3
       10 -> XlRangeAutoFormatList1
       11 -> XlRangeAutoFormatList2
       12 -> XlRangeAutoFormatList3
       13 -> XlRangeAutoFormat3DEffects1
       14 -> XlRangeAutoFormat3DEffects2
       15 -> XlRangeAutoFormatLocalFormat1
       16 -> XlRangeAutoFormatLocalFormat2
       17 -> XlRangeAutoFormatAccounting4
       19 -> XlRangeAutoFormatLocalFormat3
       20 -> XlRangeAutoFormatLocalFormat4
       21 -> XlRangeAutoFormatReport1
       22 -> XlRangeAutoFormatReport2
       23 -> XlRangeAutoFormatReport3
       24 -> XlRangeAutoFormatReport4
       25 -> XlRangeAutoFormatReport5
       26 -> XlRangeAutoFormatReport6
       27 -> XlRangeAutoFormatReport7
       28 -> XlRangeAutoFormatReport8
       29 -> XlRangeAutoFormatReport9
       30 -> XlRangeAutoFormatReport10
       31 -> XlRangeAutoFormatClassicPivotTable
       32 -> XlRangeAutoFormatTable1
       33 -> XlRangeAutoFormatTable2
       34 -> XlRangeAutoFormatTable3
       35 -> XlRangeAutoFormatTable4
       36 -> XlRangeAutoFormatTable5
       37 -> XlRangeAutoFormatTable6
       38 -> XlRangeAutoFormatTable7
       39 -> XlRangeAutoFormatTable8
       40 -> XlRangeAutoFormatTable9
       41 -> XlRangeAutoFormatTable10
       42 -> XlRangeAutoFormatPTNone
       _ -> error "unmarshallXlRangeAutoFormat: illegal enum value "
  
data XlReferenceType
 = XlAbsolute
 | XlAbsRowRelColumn
 | XlRelRowAbsColumn
 | XlRelative
 
instance Enum (XlReferenceType) where
  fromEnum v =
    case v of
       XlAbsolute -> 1
       XlAbsRowRelColumn -> 2
       XlRelRowAbsColumn -> 3
       XlRelative -> 4
  
  toEnum v =
    case v of
       1 -> XlAbsolute
       2 -> XlAbsRowRelColumn
       3 -> XlRelRowAbsColumn
       4 -> XlRelative
       _ -> error "unmarshallXlReferenceType: illegal enum value "
  
data XlLayoutFormType
 = XlLayoutFormTypeList__ [XlLayoutFormType]
 | XlTabular
 | XlOutline
 
instance Flags (XlLayoutFormType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlLayoutFormType) where
  fromEnum v =
    case v of
       (XlLayoutFormTypeList__ xs) -> orList (map fromEnum xs)
       XlTabular -> 0
       XlOutline -> 1
  
  toEnum v =
    case v of
       0 -> XlTabular
       1 -> XlOutline
       x -> XlLayoutFormTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlLayoutFormType: illegal enum value "
  
data XlRoutingSlipDelivery
 = XlRoutingSlipDeliveryList__ [XlRoutingSlipDelivery]
 | XlOneAfterAnother
 | XlAllAtOnce
 
instance Flags (XlRoutingSlipDelivery) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlRoutingSlipDelivery) where
  fromEnum v =
    case v of
       (XlRoutingSlipDeliveryList__ xs) -> orList (map fromEnum xs)
       XlOneAfterAnother -> 1
       XlAllAtOnce -> 2
  
  toEnum v =
    case v of
       1 -> XlOneAfterAnother
       2 -> XlAllAtOnce
       x -> XlRoutingSlipDeliveryList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlRoutingSlipDelivery: illegal enum value "
  
data XlRoutingSlipStatus
 = XlRoutingSlipStatusList__ [XlRoutingSlipStatus]
 | XlNotYetRouted
 | XlRoutingInProgress
 | XlRoutingComplete
 
instance Flags (XlRoutingSlipStatus) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlRoutingSlipStatus) where
  fromEnum v =
    case v of
       (XlRoutingSlipStatusList__ xs) -> orList (map fromEnum xs)
       XlNotYetRouted -> 0
       XlRoutingInProgress -> 1
       XlRoutingComplete -> 2
  
  toEnum v =
    case v of
       0 -> XlNotYetRouted
       1 -> XlRoutingInProgress
       2 -> XlRoutingComplete
       x -> XlRoutingSlipStatusList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlRoutingSlipStatus: illegal enum value "
  
data XlRunAutoMacro
 = XlAutoOpen
 | XlAutoClose
 | XlAutoActivate
 | XlAutoDeactivate
 
instance Enum (XlRunAutoMacro) where
  fromEnum v =
    case v of
       XlAutoOpen -> 1
       XlAutoClose -> 2
       XlAutoActivate -> 3
       XlAutoDeactivate -> 4
  
  toEnum v =
    case v of
       1 -> XlAutoOpen
       2 -> XlAutoClose
       3 -> XlAutoActivate
       4 -> XlAutoDeactivate
       _ -> error "unmarshallXlRunAutoMacro: illegal enum value "
  
data XlSaveAction
 = XlSaveActionList__ [XlSaveAction]
 | XlSaveChanges
 | XlDoNotSaveChanges
 
instance Flags (XlSaveAction) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSaveAction) where
  fromEnum v =
    case v of
       (XlSaveActionList__ xs) -> orList (map fromEnum xs)
       XlSaveChanges -> 1
       XlDoNotSaveChanges -> 2
  
  toEnum v =
    case v of
       1 -> XlSaveChanges
       2 -> XlDoNotSaveChanges
       x -> XlSaveActionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSaveAction: illegal enum value "
  
data XlSaveAsAccessMode
 = XlNoChange
 | XlShared
 | XlExclusive
 
instance Enum (XlSaveAsAccessMode) where
  fromEnum v =
    case v of
       XlNoChange -> 1
       XlShared -> 2
       XlExclusive -> 3
  
  toEnum v =
    case v of
       1 -> XlNoChange
       2 -> XlShared
       3 -> XlExclusive
       _ -> error "unmarshallXlSaveAsAccessMode: illegal enum value "
  
data XlSaveConflictResolution
 = XlUserResolution
 | XlLocalSessionChanges
 | XlOtherSessionChanges
 
instance Enum (XlSaveConflictResolution) where
  fromEnum v =
    case v of
       XlUserResolution -> 1
       XlLocalSessionChanges -> 2
       XlOtherSessionChanges -> 3
  
  toEnum v =
    case v of
       1 -> XlUserResolution
       2 -> XlLocalSessionChanges
       3 -> XlOtherSessionChanges
       _ -> error "unmarshallXlSaveConflictResolution: illegal enum value "
  
data XlSearchDirection
 = XlSearchDirectionList__ [XlSearchDirection]
 | XlNext
 | XlPrevious
 
instance Flags (XlSearchDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSearchDirection) where
  fromEnum v =
    case v of
       (XlSearchDirectionList__ xs) -> orList (map fromEnum xs)
       XlNext -> 1
       XlPrevious -> 2
  
  toEnum v =
    case v of
       1 -> XlNext
       2 -> XlPrevious
       x -> XlSearchDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSearchDirection: illegal enum value "
  
data XlSearchOrder
 = XlSearchOrderList__ [XlSearchOrder]
 | XlByRows
 | XlByColumns
 
instance Flags (XlSearchOrder) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSearchOrder) where
  fromEnum v =
    case v of
       (XlSearchOrderList__ xs) -> orList (map fromEnum xs)
       XlByRows -> 1
       XlByColumns -> 2
  
  toEnum v =
    case v of
       1 -> XlByRows
       2 -> XlByColumns
       x -> XlSearchOrderList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSearchOrder: illegal enum value "
  
data XlSheetVisibility
 = XlSheetVisible
 | XlSheetHidden
 | XlSheetVeryHidden
 
instance Enum (XlSheetVisibility) where
  fromEnum v =
    case v of
       XlSheetVisible -> (-1)
       XlSheetHidden -> 0
       XlSheetVeryHidden -> 2
  
  toEnum v =
    case v of
       (-1) -> XlSheetVisible
       0 -> XlSheetHidden
       2 -> XlSheetVeryHidden
       _ -> error "unmarshallXlSheetVisibility: illegal enum value "
  
data XlSortMethod
 = XlSortMethodList__ [XlSortMethod]
 | XlPinYin
 | XlStroke
 
instance Flags (XlSortMethod) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSortMethod) where
  fromEnum v =
    case v of
       (XlSortMethodList__ xs) -> orList (map fromEnum xs)
       XlPinYin -> 1
       XlStroke -> 2
  
  toEnum v =
    case v of
       1 -> XlPinYin
       2 -> XlStroke
       x -> XlSortMethodList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSortMethod: illegal enum value "
  
data XlSortMethodOld
 = XlSortMethodOldList__ [XlSortMethodOld]
 | XlSyllabary
 | XlCodePage
 
instance Flags (XlSortMethodOld) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSortMethodOld) where
  fromEnum v =
    case v of
       (XlSortMethodOldList__ xs) -> orList (map fromEnum xs)
       XlSyllabary -> 1
       XlCodePage -> 2
  
  toEnum v =
    case v of
       1 -> XlSyllabary
       2 -> XlCodePage
       x -> XlSortMethodOldList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSortMethodOld: illegal enum value "
  
data XlSortOrder
 = XlSortOrderList__ [XlSortOrder]
 | XlAscending
 | XlDescending
 
instance Flags (XlSortOrder) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSortOrder) where
  fromEnum v =
    case v of
       (XlSortOrderList__ xs) -> orList (map fromEnum xs)
       XlAscending -> 1
       XlDescending -> 2
  
  toEnum v =
    case v of
       1 -> XlAscending
       2 -> XlDescending
       x -> XlSortOrderList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSortOrder: illegal enum value "
  
data XlSortOrientation
 = XlSortOrientationList__ [XlSortOrientation]
 | XlSortColumns
 | XlSortRows
 
instance Flags (XlSortOrientation) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSortOrientation) where
  fromEnum v =
    case v of
       (XlSortOrientationList__ xs) -> orList (map fromEnum xs)
       XlSortColumns -> 1
       XlSortRows -> 2
  
  toEnum v =
    case v of
       1 -> XlSortColumns
       2 -> XlSortRows
       x -> XlSortOrientationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSortOrientation: illegal enum value "
  
data XlSortType
 = XlSortTypeList__ [XlSortType]
 | XlSortValues
 | XlSortLabels
 
instance Flags (XlSortType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSortType) where
  fromEnum v =
    case v of
       (XlSortTypeList__ xs) -> orList (map fromEnum xs)
       XlSortValues -> 1
       XlSortLabels -> 2
  
  toEnum v =
    case v of
       1 -> XlSortValues
       2 -> XlSortLabels
       x -> XlSortTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSortType: illegal enum value "
  
data XlSpecialCellsValue
 = XlNumbers
 | XlTextValues
 | XlLogical
 | XlErrors
 
instance Enum (XlSpecialCellsValue) where
  fromEnum v =
    case v of
       XlNumbers -> 1
       XlTextValues -> 2
       XlLogical -> 4
       XlErrors -> 16
  
  toEnum v =
    case v of
       1 -> XlNumbers
       2 -> XlTextValues
       4 -> XlLogical
       16 -> XlErrors
       _ -> error "unmarshallXlSpecialCellsValue: illegal enum value "
  
data XlSubscribeToFormat
 = XlSubscribeToText
 | XlSubscribeToPicture
 
instance Enum (XlSubscribeToFormat) where
  fromEnum v =
    case v of
       XlSubscribeToText -> (-4158)
       XlSubscribeToPicture -> (-4147)
  
  toEnum v =
    case v of
       (-4158) -> XlSubscribeToText
       (-4147) -> XlSubscribeToPicture
       _ -> error "unmarshallXlSubscribeToFormat: illegal enum value "
  
data XlSummaryRow
 = XlSummaryRowList__ [XlSummaryRow]
 | XlSummaryAbove
 | XlSummaryBelow
 
instance Flags (XlSummaryRow) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSummaryRow) where
  fromEnum v =
    case v of
       (XlSummaryRowList__ xs) -> orList (map fromEnum xs)
       XlSummaryAbove -> 0
       XlSummaryBelow -> 1
  
  toEnum v =
    case v of
       0 -> XlSummaryAbove
       1 -> XlSummaryBelow
       x -> XlSummaryRowList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlSummaryRow: illegal enum value "
  
data XlSummaryColumn
 = XlSummaryOnRight
 | XlSummaryOnLeft
 
instance Enum (XlSummaryColumn) where
  fromEnum v =
    case v of
       XlSummaryOnRight -> (-4152)
       XlSummaryOnLeft -> (-4131)
  
  toEnum v =
    case v of
       (-4152) -> XlSummaryOnRight
       (-4131) -> XlSummaryOnLeft
       _ -> error "unmarshallXlSummaryColumn: illegal enum value "
  
data XlSummaryReportType
 = XlSummaryPivotTable
 | XlStandardSummary
 
instance Enum (XlSummaryReportType) where
  fromEnum v =
    case v of
       XlSummaryPivotTable -> (-4148)
       XlStandardSummary -> 1
  
  toEnum v =
    case v of
       (-4148) -> XlSummaryPivotTable
       1 -> XlStandardSummary
       _ -> error "unmarshallXlSummaryReportType: illegal enum value "
  
data XlTabPosition
 = XlTabPositionList__ [XlTabPosition]
 | XlTabPositionFirst
 | XlTabPositionLast
 
instance Flags (XlTabPosition) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlTabPosition) where
  fromEnum v =
    case v of
       (XlTabPositionList__ xs) -> orList (map fromEnum xs)
       XlTabPositionFirst -> 0
       XlTabPositionLast -> 1
  
  toEnum v =
    case v of
       0 -> XlTabPositionFirst
       1 -> XlTabPositionLast
       x -> XlTabPositionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlTabPosition: illegal enum value "
  
data XlTextParsingType
 = XlTextParsingTypeList__ [XlTextParsingType]
 | XlDelimited
 | XlFixedWidth
 
instance Flags (XlTextParsingType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlTextParsingType) where
  fromEnum v =
    case v of
       (XlTextParsingTypeList__ xs) -> orList (map fromEnum xs)
       XlDelimited -> 1
       XlFixedWidth -> 2
  
  toEnum v =
    case v of
       1 -> XlDelimited
       2 -> XlFixedWidth
       x -> XlTextParsingTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlTextParsingType: illegal enum value "
  
data XlTextQualifier
 = XlTextQualifierNone
 | XlTextQualifierDoubleQuote
 | XlTextQualifierSingleQuote
 
instance Enum (XlTextQualifier) where
  fromEnum v =
    case v of
       XlTextQualifierNone -> (-4142)
       XlTextQualifierDoubleQuote -> 1
       XlTextQualifierSingleQuote -> 2
  
  toEnum v =
    case v of
       (-4142) -> XlTextQualifierNone
       1 -> XlTextQualifierDoubleQuote
       2 -> XlTextQualifierSingleQuote
       _ -> error "unmarshallXlTextQualifier: illegal enum value "
  
data XlWBATemplate
 = XlWBATWorksheet
 | XlWBATChart
 | XlWBATExcel4MacroSheet
 | XlWBATExcel4IntlMacroSheet
 
instance Enum (XlWBATemplate) where
  fromEnum v =
    case v of
       XlWBATWorksheet -> (-4167)
       XlWBATChart -> (-4109)
       XlWBATExcel4MacroSheet -> 3
       XlWBATExcel4IntlMacroSheet -> 4
  
  toEnum v =
    case v of
       (-4167) -> XlWBATWorksheet
       (-4109) -> XlWBATChart
       3 -> XlWBATExcel4MacroSheet
       4 -> XlWBATExcel4IntlMacroSheet
       _ -> error "unmarshallXlWBATemplate: illegal enum value "
  
data XlWindowView
 = XlNormalView
 | XlPageBreakPreview
 | XlPageLayoutView
 
instance Enum (XlWindowView) where
  fromEnum v =
    case v of
       XlNormalView -> 1
       XlPageBreakPreview -> 2
       XlPageLayoutView -> 3
  
  toEnum v =
    case v of
       1 -> XlNormalView
       2 -> XlPageBreakPreview
       3 -> XlPageLayoutView
       _ -> error "unmarshallXlWindowView: illegal enum value "
  
data XlXLMMacroType
 = XlFunction
 | XlCommand
 | XlNotXLM
 
instance Enum (XlXLMMacroType) where
  fromEnum v =
    case v of
       XlFunction -> 1
       XlCommand -> 2
       XlNotXLM -> 3
  
  toEnum v =
    case v of
       1 -> XlFunction
       2 -> XlCommand
       3 -> XlNotXLM
       _ -> error "unmarshallXlXLMMacroType: illegal enum value "
  
data XlYesNoGuess
 = XlYesNoGuessList__ [XlYesNoGuess]
 | XlGuess
 | XlYes
 | XlNo
 
instance Flags (XlYesNoGuess) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlYesNoGuess) where
  fromEnum v =
    case v of
       (XlYesNoGuessList__ xs) -> orList (map fromEnum xs)
       XlGuess -> 0
       XlYes -> 1
       XlNo -> 2
  
  toEnum v =
    case v of
       0 -> XlGuess
       1 -> XlYes
       2 -> XlNo
       x -> XlYesNoGuessList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlYesNoGuess: illegal enum value "
  
data XlBordersIndex
 = XlDiagonalDown
 | XlDiagonalUp
 | XlEdgeLeft
 | XlEdgeTop
 | XlEdgeBottom
 | XlEdgeRight
 | XlInsideVertical
 | XlInsideHorizontal
 
instance Enum (XlBordersIndex) where
  fromEnum v =
    case v of
       XlDiagonalDown -> 5
       XlDiagonalUp -> 6
       XlEdgeLeft -> 7
       XlEdgeTop -> 8
       XlEdgeBottom -> 9
       XlEdgeRight -> 10
       XlInsideVertical -> 11
       XlInsideHorizontal -> 12
  
  toEnum v =
    case v of
       5 -> XlDiagonalDown
       6 -> XlDiagonalUp
       7 -> XlEdgeLeft
       8 -> XlEdgeTop
       9 -> XlEdgeBottom
       10 -> XlEdgeRight
       11 -> XlInsideVertical
       12 -> XlInsideHorizontal
       _ -> error "unmarshallXlBordersIndex: illegal enum value "
  
data XlToolbarProtection
 = XlToolbarProtectionNone
 | XlNoButtonChanges
 | XlNoShapeChanges
 | XlNoDockingChanges
 | XlNoChanges
 
instance Enum (XlToolbarProtection) where
  fromEnum v =
    case v of
       XlToolbarProtectionNone -> (-4143)
       XlNoButtonChanges -> 1
       XlNoShapeChanges -> 2
       XlNoDockingChanges -> 3
       XlNoChanges -> 4
  
  toEnum v =
    case v of
       (-4143) -> XlToolbarProtectionNone
       1 -> XlNoButtonChanges
       2 -> XlNoShapeChanges
       3 -> XlNoDockingChanges
       4 -> XlNoChanges
       _ -> error "unmarshallXlToolbarProtection: illegal enum value "
  
data XlBuiltInDialog
 = XlDialogOpen
 | XlDialogOpenLinks
 | XlDialogSaveAs
 | XlDialogFileDelete
 | XlDialogPageSetup
 | XlDialogPrint
 | XlDialogPrinterSetup
 | XlDialogArrangeAll
 | XlDialogWindowSize
 | XlDialogWindowMove
 | XlDialogRun
 | XlDialogSetPrintTitles
 | XlDialogFont
 | XlDialogDisplay
 | XlDialogProtectDocument
 | XlDialogCalculation
 | XlDialogExtract
 | XlDialogDataDelete
 | XlDialogSort
 | XlDialogDataSeries
 | XlDialogTable
 | XlDialogFormatNumber
 | XlDialogAlignment
 | XlDialogStyle
 | XlDialogBorder
 | XlDialogCellProtection
 | XlDialogColumnWidth
 | XlDialogClear
 | XlDialogPasteSpecial
 | XlDialogEditDelete
 | XlDialogInsert
 | XlDialogPasteNames
 | XlDialogDefineName
 | XlDialogCreateNames
 | XlDialogFormulaGoto
 | XlDialogFormulaFind
 | XlDialogGalleryArea
 | XlDialogGalleryBar
 | XlDialogGalleryColumn
 | XlDialogGalleryLine
 | XlDialogGalleryPie
 | XlDialogGalleryScatter
 | XlDialogCombination
 | XlDialogGridlines
 | XlDialogAxes
 | XlDialogAttachText
 | XlDialogPatterns
 | XlDialogMainChart
 | XlDialogOverlay
 | XlDialogScale
 | XlDialogFormatLegend
 | XlDialogFormatText
 | XlDialogParse
 | XlDialogUnhide
 | XlDialogWorkspace
 | XlDialogActivate
 | XlDialogCopyPicture
 | XlDialogDeleteName
 | XlDialogDeleteFormat
 | XlDialogNew
 | XlDialogRowHeight
 | XlDialogFormatMove
 | XlDialogFormatSize
 | XlDialogFormulaReplace
 | XlDialogSelectSpecial
 | XlDialogApplyNames
 | XlDialogReplaceFont
 | XlDialogSplit
 | XlDialogOutline
 | XlDialogSaveWorkbook
 | XlDialogCopyChart
 | XlDialogFormatFont
 | XlDialogNote
 | XlDialogSetUpdateStatus
 | XlDialogColorPalette
 | XlDialogChangeLink
 | XlDialogAppMove
 | XlDialogAppSize
 | XlDialogMainChartType
 | XlDialogOverlayChartType
 | XlDialogOpenMail
 | XlDialogSendMail
 | XlDialogStandardFont
 | XlDialogConsolidate
 | XlDialogSortSpecial
 | XlDialogGallery3dArea
 | XlDialogGallery3dColumn
 | XlDialogGallery3dLine
 | XlDialogGallery3dPie
 | XlDialogView3d
 | XlDialogGoalSeek
 | XlDialogWorkgroup
 | XlDialogFillGroup
 | XlDialogUpdateLink
 | XlDialogPromote
 | XlDialogDemote
 | XlDialogShowDetail
 | XlDialogObjectProperties
 | XlDialogSaveNewObject
 | XlDialogApplyStyle
 | XlDialogAssignToObject
 | XlDialogObjectProtection
 | XlDialogCreatePublisher
 | XlDialogSubscribeTo
 | XlDialogShowToolbar
 | XlDialogPrintPreview
 | XlDialogEditColor
 | XlDialogFormatMain
 | XlDialogFormatOverlay
 | XlDialogEditSeries
 | XlDialogDefineStyle
 | XlDialogGalleryRadar
 | XlDialogEditionOptions
 | XlDialogZoom
 | XlDialogInsertObject
 | XlDialogSize
 | XlDialogMove
 | XlDialogFormatAuto
 | XlDialogGallery3dBar
 | XlDialogGallery3dSurface
 | XlDialogCustomizeToolbar
 | XlDialogWorkbookAdd
 | XlDialogWorkbookMove
 | XlDialogWorkbookCopy
 | XlDialogWorkbookOptions
 | XlDialogSaveWorkspace
 | XlDialogChartWizard
 | XlDialogAssignToTool
 | XlDialogPlacement
 | XlDialogFillWorkgroup
 | XlDialogWorkbookNew
 | XlDialogScenarioCells
 | XlDialogScenarioAdd
 | XlDialogScenarioEdit
 | XlDialogScenarioSummary
 | XlDialogPivotTableWizard
 | XlDialogPivotFieldProperties
 | XlDialogOptionsCalculation
 | XlDialogOptionsEdit
 | XlDialogOptionsView
 | XlDialogAddinManager
 | XlDialogMenuEditor
 | XlDialogAttachToolbars
 | XlDialogOptionsChart
 | XlDialogVbaInsertFile
 | XlDialogVbaProcedureDefinition
 | XlDialogRoutingSlip
 | XlDialogMailLogon
 | XlDialogInsertPicture
 | XlDialogGalleryDoughnut
 | XlDialogChartTrend
 | XlDialogWorkbookInsert
 | XlDialogOptionsTransition
 | XlDialogOptionsGeneral
 | XlDialogFilterAdvanced
 | XlDialogMailNextLetter
 | XlDialogDataLabel
 | XlDialogInsertTitle
 | XlDialogFontProperties
 | XlDialogMacroOptions
 | XlDialogWorkbookUnhide
 | XlDialogWorkbookName
 | XlDialogGalleryCustom
 | XlDialogAddChartAutoformat
 | XlDialogChartAddData
 | XlDialogTabOrder
 | XlDialogSubtotalCreate
 | XlDialogWorkbookTabSplit
 | XlDialogWorkbookProtect
 | XlDialogScrollbarProperties
 | XlDialogPivotShowPages
 | XlDialogTextToColumns
 | XlDialogFormatCharttype
 | XlDialogPivotFieldGroup
 | XlDialogPivotFieldUngroup
 | XlDialogCheckboxProperties
 | XlDialogLabelProperties
 | XlDialogListboxProperties
 | XlDialogEditboxProperties
 | XlDialogOpenText
 | XlDialogPushbuttonProperties
 | XlDialogFilter
 | XlDialogFunctionWizard
 | XlDialogSaveCopyAs
 | XlDialogOptionsListsAdd
 | XlDialogSeriesAxes
 | XlDialogSeriesX
 | XlDialogSeriesY
 | XlDialogErrorbarX
 | XlDialogErrorbarY
 | XlDialogFormatChart
 | XlDialogSeriesOrder
 | XlDialogMailEditMailer
 | XlDialogStandardWidth
 | XlDialogScenarioMerge
 | XlDialogProperties
 | XlDialogSummaryInfo
 | XlDialogFindFile
 | XlDialogActiveCellFont
 | XlDialogVbaMakeAddin
 | XlDialogFileSharing
 | XlDialogAutoCorrect
 | XlDialogCustomViews
 | XlDialogInsertNameLabel
 | XlDialogSeriesShape
 | XlDialogChartOptionsDataLabels
 | XlDialogChartOptionsDataTable
 | XlDialogSetBackgroundPicture
 | XlDialogDataValidation
 | XlDialogChartType
 | XlDialogChartLocation
 | XlDialogExternalDataProperties
 | XlDialogPhonetic
 | XlDialogChartSourceData
 | XlDialogChartSourceData0
 | XlDialogSeriesOptions
 | XlDialogPivotTableOptions
 | XlDialogPivotSolveOrder
 | XlDialogPivotCalculatedField
 | XlDialogPivotCalculatedItem
 | XlDialogConditionalFormatting
 | XlDialogInsertHyperlink
 | XlDialogProtectSharing
 | XlDialogOptionsME
 | XlDialogPublishAsWebPage
 | XlDialogPhonetic0
 | XlDialogImportTextFile
 | XlDialogNewWebQuery
 | XlDialogWebOptionsGeneral
 | XlDialogWebOptionsFiles
 | XlDialogWebOptionsPictures
 | XlDialogWebOptionsEncoding
 | XlDialogWebOptionsFonts
 | XlDialogPivotClientServerSet
 | XlDialogEvaluateFormula
 | XlDialogDataLabelMultiple
 | XlDialogChartOptionsDataLabelMultiple
 | XlDialogSearch
 | XlDialogErrorChecking
 | XlDialogPropertyFields
 | XlDialogWebOptionsBrowsers
 | XlDialogCreateList
 | XlDialogPermission
 | XlDialogMyPermission
 | XlDialogDocumentInspector
 | XlDialogNameManager
 | XlDialogNewName
 
instance Enum (XlBuiltInDialog) where
  fromEnum v =
    case v of
       XlDialogOpen -> 1
       XlDialogOpenLinks -> 2
       XlDialogSaveAs -> 5
       XlDialogFileDelete -> 6
       XlDialogPageSetup -> 7
       XlDialogPrint -> 8
       XlDialogPrinterSetup -> 9
       XlDialogArrangeAll -> 12
       XlDialogWindowSize -> 13
       XlDialogWindowMove -> 14
       XlDialogRun -> 17
       XlDialogSetPrintTitles -> 23
       XlDialogFont -> 26
       XlDialogDisplay -> 27
       XlDialogProtectDocument -> 28
       XlDialogCalculation -> 32
       XlDialogExtract -> 35
       XlDialogDataDelete -> 36
       XlDialogSort -> 39
       XlDialogDataSeries -> 40
       XlDialogTable -> 41
       XlDialogFormatNumber -> 42
       XlDialogAlignment -> 43
       XlDialogStyle -> 44
       XlDialogBorder -> 45
       XlDialogCellProtection -> 46
       XlDialogColumnWidth -> 47
       XlDialogClear -> 52
       XlDialogPasteSpecial -> 53
       XlDialogEditDelete -> 54
       XlDialogInsert -> 55
       XlDialogPasteNames -> 58
       XlDialogDefineName -> 61
       XlDialogCreateNames -> 62
       XlDialogFormulaGoto -> 63
       XlDialogFormulaFind -> 64
       XlDialogGalleryArea -> 67
       XlDialogGalleryBar -> 68
       XlDialogGalleryColumn -> 69
       XlDialogGalleryLine -> 70
       XlDialogGalleryPie -> 71
       XlDialogGalleryScatter -> 72
       XlDialogCombination -> 73
       XlDialogGridlines -> 76
       XlDialogAxes -> 78
       XlDialogAttachText -> 80
       XlDialogPatterns -> 84
       XlDialogMainChart -> 85
       XlDialogOverlay -> 86
       XlDialogScale -> 87
       XlDialogFormatLegend -> 88
       XlDialogFormatText -> 89
       XlDialogParse -> 91
       XlDialogUnhide -> 94
       XlDialogWorkspace -> 95
       XlDialogActivate -> 103
       XlDialogCopyPicture -> 108
       XlDialogDeleteName -> 110
       XlDialogDeleteFormat -> 111
       XlDialogNew -> 119
       XlDialogRowHeight -> 127
       XlDialogFormatMove -> 128
       XlDialogFormatSize -> 129
       XlDialogFormulaReplace -> 130
       XlDialogSelectSpecial -> 132
       XlDialogApplyNames -> 133
       XlDialogReplaceFont -> 134
       XlDialogSplit -> 137
       XlDialogOutline -> 142
       XlDialogSaveWorkbook -> 145
       XlDialogCopyChart -> 147
       XlDialogFormatFont -> 150
       XlDialogNote -> 154
       XlDialogSetUpdateStatus -> 159
       XlDialogColorPalette -> 161
       XlDialogChangeLink -> 166
       XlDialogAppMove -> 170
       XlDialogAppSize -> 171
       XlDialogMainChartType -> 185
       XlDialogOverlayChartType -> 186
       XlDialogOpenMail -> 188
       XlDialogSendMail -> 189
       XlDialogStandardFont -> 190
       XlDialogConsolidate -> 191
       XlDialogSortSpecial -> 192
       XlDialogGallery3dArea -> 193
       XlDialogGallery3dColumn -> 194
       XlDialogGallery3dLine -> 195
       XlDialogGallery3dPie -> 196
       XlDialogView3d -> 197
       XlDialogGoalSeek -> 198
       XlDialogWorkgroup -> 199
       XlDialogFillGroup -> 200
       XlDialogUpdateLink -> 201
       XlDialogPromote -> 202
       XlDialogDemote -> 203
       XlDialogShowDetail -> 204
       XlDialogObjectProperties -> 207
       XlDialogSaveNewObject -> 208
       XlDialogApplyStyle -> 212
       XlDialogAssignToObject -> 213
       XlDialogObjectProtection -> 214
       XlDialogCreatePublisher -> 217
       XlDialogSubscribeTo -> 218
       XlDialogShowToolbar -> 220
       XlDialogPrintPreview -> 222
       XlDialogEditColor -> 223
       XlDialogFormatMain -> 225
       XlDialogFormatOverlay -> 226
       XlDialogEditSeries -> 228
       XlDialogDefineStyle -> 229
       XlDialogGalleryRadar -> 249
       XlDialogEditionOptions -> 251
       XlDialogZoom -> 256
       XlDialogInsertObject -> 259
       XlDialogSize -> 261
       XlDialogMove -> 262
       XlDialogFormatAuto -> 269
       XlDialogGallery3dBar -> 272
       XlDialogGallery3dSurface -> 273
       XlDialogCustomizeToolbar -> 276
       XlDialogWorkbookAdd -> 281
       XlDialogWorkbookMove -> 282
       XlDialogWorkbookCopy -> 283
       XlDialogWorkbookOptions -> 284
       XlDialogSaveWorkspace -> 285
       XlDialogChartWizard -> 288
       XlDialogAssignToTool -> 293
       XlDialogPlacement -> 300
       XlDialogFillWorkgroup -> 301
       XlDialogWorkbookNew -> 302
       XlDialogScenarioCells -> 305
       XlDialogScenarioAdd -> 307
       XlDialogScenarioEdit -> 308
       XlDialogScenarioSummary -> 311
       XlDialogPivotTableWizard -> 312
       XlDialogPivotFieldProperties -> 313
       XlDialogOptionsCalculation -> 318
       XlDialogOptionsEdit -> 319
       XlDialogOptionsView -> 320
       XlDialogAddinManager -> 321
       XlDialogMenuEditor -> 322
       XlDialogAttachToolbars -> 323
       XlDialogOptionsChart -> 325
       XlDialogVbaInsertFile -> 328
       XlDialogVbaProcedureDefinition -> 330
       XlDialogRoutingSlip -> 336
       XlDialogMailLogon -> 339
       XlDialogInsertPicture -> 342
       XlDialogGalleryDoughnut -> 344
       XlDialogChartTrend -> 350
       XlDialogWorkbookInsert -> 354
       XlDialogOptionsTransition -> 355
       XlDialogOptionsGeneral -> 356
       XlDialogFilterAdvanced -> 370
       XlDialogMailNextLetter -> 378
       XlDialogDataLabel -> 379
       XlDialogInsertTitle -> 380
       XlDialogFontProperties -> 381
       XlDialogMacroOptions -> 382
       XlDialogWorkbookUnhide -> 384
       XlDialogWorkbookName -> 386
       XlDialogGalleryCustom -> 388
       XlDialogAddChartAutoformat -> 390
       XlDialogChartAddData -> 392
       XlDialogTabOrder -> 394
       XlDialogSubtotalCreate -> 398
       XlDialogWorkbookTabSplit -> 415
       XlDialogWorkbookProtect -> 417
       XlDialogScrollbarProperties -> 420
       XlDialogPivotShowPages -> 421
       XlDialogTextToColumns -> 422
       XlDialogFormatCharttype -> 423
       XlDialogPivotFieldGroup -> 433
       XlDialogPivotFieldUngroup -> 434
       XlDialogCheckboxProperties -> 435
       XlDialogLabelProperties -> 436
       XlDialogListboxProperties -> 437
       XlDialogEditboxProperties -> 438
       XlDialogOpenText -> 441
       XlDialogPushbuttonProperties -> 445
       XlDialogFilter -> 447
       XlDialogFunctionWizard -> 450
       XlDialogSaveCopyAs -> 456
       XlDialogOptionsListsAdd -> 458
       XlDialogSeriesAxes -> 460
       XlDialogSeriesX -> 461
       XlDialogSeriesY -> 462
       XlDialogErrorbarX -> 463
       XlDialogErrorbarY -> 464
       XlDialogFormatChart -> 465
       XlDialogSeriesOrder -> 466
       XlDialogMailEditMailer -> 470
       XlDialogStandardWidth -> 472
       XlDialogScenarioMerge -> 473
       XlDialogProperties -> 474
       XlDialogSummaryInfo -> 474
       XlDialogFindFile -> 475
       XlDialogActiveCellFont -> 476
       XlDialogVbaMakeAddin -> 478
       XlDialogFileSharing -> 481
       XlDialogAutoCorrect -> 485
       XlDialogCustomViews -> 493
       XlDialogInsertNameLabel -> 496
       XlDialogSeriesShape -> 504
       XlDialogChartOptionsDataLabels -> 505
       XlDialogChartOptionsDataTable -> 506
       XlDialogSetBackgroundPicture -> 509
       XlDialogDataValidation -> 525
       XlDialogChartType -> 526
       XlDialogChartLocation -> 527
       XlDialogExternalDataProperties -> 530
       XlDialogPhonetic -> 538
       XlDialogChartSourceData -> 540
       XlDialogChartSourceData0 -> 541
       XlDialogSeriesOptions -> 557
       XlDialogPivotTableOptions -> 567
       XlDialogPivotSolveOrder -> 568
       XlDialogPivotCalculatedField -> 570
       XlDialogPivotCalculatedItem -> 572
       XlDialogConditionalFormatting -> 583
       XlDialogInsertHyperlink -> 596
       XlDialogProtectSharing -> 620
       XlDialogOptionsME -> 647
       XlDialogPublishAsWebPage -> 653
       XlDialogPhonetic0 -> 656
       XlDialogImportTextFile -> 666
       XlDialogNewWebQuery -> 667
       XlDialogWebOptionsGeneral -> 683
       XlDialogWebOptionsFiles -> 684
       XlDialogWebOptionsPictures -> 685
       XlDialogWebOptionsEncoding -> 686
       XlDialogWebOptionsFonts -> 687
       XlDialogPivotClientServerSet -> 689
       XlDialogEvaluateFormula -> 709
       XlDialogDataLabelMultiple -> 723
       XlDialogChartOptionsDataLabelMultiple -> 724
       XlDialogSearch -> 731
       XlDialogErrorChecking -> 732
       XlDialogPropertyFields -> 754
       XlDialogWebOptionsBrowsers -> 773
       XlDialogCreateList -> 796
       XlDialogPermission -> 832
       XlDialogMyPermission -> 834
       XlDialogDocumentInspector -> 862
       XlDialogNameManager -> 977
       XlDialogNewName -> 978
  
  toEnum v =
    case v of
       1 -> XlDialogOpen
       2 -> XlDialogOpenLinks
       5 -> XlDialogSaveAs
       6 -> XlDialogFileDelete
       7 -> XlDialogPageSetup
       8 -> XlDialogPrint
       9 -> XlDialogPrinterSetup
       12 -> XlDialogArrangeAll
       13 -> XlDialogWindowSize
       14 -> XlDialogWindowMove
       17 -> XlDialogRun
       23 -> XlDialogSetPrintTitles
       26 -> XlDialogFont
       27 -> XlDialogDisplay
       28 -> XlDialogProtectDocument
       32 -> XlDialogCalculation
       35 -> XlDialogExtract
       36 -> XlDialogDataDelete
       39 -> XlDialogSort
       40 -> XlDialogDataSeries
       41 -> XlDialogTable
       42 -> XlDialogFormatNumber
       43 -> XlDialogAlignment
       44 -> XlDialogStyle
       45 -> XlDialogBorder
       46 -> XlDialogCellProtection
       47 -> XlDialogColumnWidth
       52 -> XlDialogClear
       53 -> XlDialogPasteSpecial
       54 -> XlDialogEditDelete
       55 -> XlDialogInsert
       58 -> XlDialogPasteNames
       61 -> XlDialogDefineName
       62 -> XlDialogCreateNames
       63 -> XlDialogFormulaGoto
       64 -> XlDialogFormulaFind
       67 -> XlDialogGalleryArea
       68 -> XlDialogGalleryBar
       69 -> XlDialogGalleryColumn
       70 -> XlDialogGalleryLine
       71 -> XlDialogGalleryPie
       72 -> XlDialogGalleryScatter
       73 -> XlDialogCombination
       76 -> XlDialogGridlines
       78 -> XlDialogAxes
       80 -> XlDialogAttachText
       84 -> XlDialogPatterns
       85 -> XlDialogMainChart
       86 -> XlDialogOverlay
       87 -> XlDialogScale
       88 -> XlDialogFormatLegend
       89 -> XlDialogFormatText
       91 -> XlDialogParse
       94 -> XlDialogUnhide
       95 -> XlDialogWorkspace
       103 -> XlDialogActivate
       108 -> XlDialogCopyPicture
       110 -> XlDialogDeleteName
       111 -> XlDialogDeleteFormat
       119 -> XlDialogNew
       127 -> XlDialogRowHeight
       128 -> XlDialogFormatMove
       129 -> XlDialogFormatSize
       130 -> XlDialogFormulaReplace
       132 -> XlDialogSelectSpecial
       133 -> XlDialogApplyNames
       134 -> XlDialogReplaceFont
       137 -> XlDialogSplit
       142 -> XlDialogOutline
       145 -> XlDialogSaveWorkbook
       147 -> XlDialogCopyChart
       150 -> XlDialogFormatFont
       154 -> XlDialogNote
       159 -> XlDialogSetUpdateStatus
       161 -> XlDialogColorPalette
       166 -> XlDialogChangeLink
       170 -> XlDialogAppMove
       171 -> XlDialogAppSize
       185 -> XlDialogMainChartType
       186 -> XlDialogOverlayChartType
       188 -> XlDialogOpenMail
       189 -> XlDialogSendMail
       190 -> XlDialogStandardFont
       191 -> XlDialogConsolidate
       192 -> XlDialogSortSpecial
       193 -> XlDialogGallery3dArea
       194 -> XlDialogGallery3dColumn
       195 -> XlDialogGallery3dLine
       196 -> XlDialogGallery3dPie
       197 -> XlDialogView3d
       198 -> XlDialogGoalSeek
       199 -> XlDialogWorkgroup
       200 -> XlDialogFillGroup
       201 -> XlDialogUpdateLink
       202 -> XlDialogPromote
       203 -> XlDialogDemote
       204 -> XlDialogShowDetail
       207 -> XlDialogObjectProperties
       208 -> XlDialogSaveNewObject
       212 -> XlDialogApplyStyle
       213 -> XlDialogAssignToObject
       214 -> XlDialogObjectProtection
       217 -> XlDialogCreatePublisher
       218 -> XlDialogSubscribeTo
       220 -> XlDialogShowToolbar
       222 -> XlDialogPrintPreview
       223 -> XlDialogEditColor
       225 -> XlDialogFormatMain
       226 -> XlDialogFormatOverlay
       228 -> XlDialogEditSeries
       229 -> XlDialogDefineStyle
       249 -> XlDialogGalleryRadar
       251 -> XlDialogEditionOptions
       256 -> XlDialogZoom
       259 -> XlDialogInsertObject
       261 -> XlDialogSize
       262 -> XlDialogMove
       269 -> XlDialogFormatAuto
       272 -> XlDialogGallery3dBar
       273 -> XlDialogGallery3dSurface
       276 -> XlDialogCustomizeToolbar
       281 -> XlDialogWorkbookAdd
       282 -> XlDialogWorkbookMove
       283 -> XlDialogWorkbookCopy
       284 -> XlDialogWorkbookOptions
       285 -> XlDialogSaveWorkspace
       288 -> XlDialogChartWizard
       293 -> XlDialogAssignToTool
       300 -> XlDialogPlacement
       301 -> XlDialogFillWorkgroup
       302 -> XlDialogWorkbookNew
       305 -> XlDialogScenarioCells
       307 -> XlDialogScenarioAdd
       308 -> XlDialogScenarioEdit
       311 -> XlDialogScenarioSummary
       312 -> XlDialogPivotTableWizard
       313 -> XlDialogPivotFieldProperties
       318 -> XlDialogOptionsCalculation
       319 -> XlDialogOptionsEdit
       320 -> XlDialogOptionsView
       321 -> XlDialogAddinManager
       322 -> XlDialogMenuEditor
       323 -> XlDialogAttachToolbars
       325 -> XlDialogOptionsChart
       328 -> XlDialogVbaInsertFile
       330 -> XlDialogVbaProcedureDefinition
       336 -> XlDialogRoutingSlip
       339 -> XlDialogMailLogon
       342 -> XlDialogInsertPicture
       344 -> XlDialogGalleryDoughnut
       350 -> XlDialogChartTrend
       354 -> XlDialogWorkbookInsert
       355 -> XlDialogOptionsTransition
       356 -> XlDialogOptionsGeneral
       370 -> XlDialogFilterAdvanced
       378 -> XlDialogMailNextLetter
       379 -> XlDialogDataLabel
       380 -> XlDialogInsertTitle
       381 -> XlDialogFontProperties
       382 -> XlDialogMacroOptions
       384 -> XlDialogWorkbookUnhide
       386 -> XlDialogWorkbookName
       388 -> XlDialogGalleryCustom
       390 -> XlDialogAddChartAutoformat
       392 -> XlDialogChartAddData
       394 -> XlDialogTabOrder
       398 -> XlDialogSubtotalCreate
       415 -> XlDialogWorkbookTabSplit
       417 -> XlDialogWorkbookProtect
       420 -> XlDialogScrollbarProperties
       421 -> XlDialogPivotShowPages
       422 -> XlDialogTextToColumns
       423 -> XlDialogFormatCharttype
       433 -> XlDialogPivotFieldGroup
       434 -> XlDialogPivotFieldUngroup
       435 -> XlDialogCheckboxProperties
       436 -> XlDialogLabelProperties
       437 -> XlDialogListboxProperties
       438 -> XlDialogEditboxProperties
       441 -> XlDialogOpenText
       445 -> XlDialogPushbuttonProperties
       447 -> XlDialogFilter
       450 -> XlDialogFunctionWizard
       456 -> XlDialogSaveCopyAs
       458 -> XlDialogOptionsListsAdd
       460 -> XlDialogSeriesAxes
       461 -> XlDialogSeriesX
       462 -> XlDialogSeriesY
       463 -> XlDialogErrorbarX
       464 -> XlDialogErrorbarY
       465 -> XlDialogFormatChart
       466 -> XlDialogSeriesOrder
       470 -> XlDialogMailEditMailer
       472 -> XlDialogStandardWidth
       473 -> XlDialogScenarioMerge
       474 -> XlDialogProperties
       474 -> XlDialogSummaryInfo
       475 -> XlDialogFindFile
       476 -> XlDialogActiveCellFont
       478 -> XlDialogVbaMakeAddin
       481 -> XlDialogFileSharing
       485 -> XlDialogAutoCorrect
       493 -> XlDialogCustomViews
       496 -> XlDialogInsertNameLabel
       504 -> XlDialogSeriesShape
       505 -> XlDialogChartOptionsDataLabels
       506 -> XlDialogChartOptionsDataTable
       509 -> XlDialogSetBackgroundPicture
       525 -> XlDialogDataValidation
       526 -> XlDialogChartType
       527 -> XlDialogChartLocation
       530 -> XlDialogExternalDataProperties
       538 -> XlDialogPhonetic
       540 -> XlDialogChartSourceData
       541 -> XlDialogChartSourceData0
       557 -> XlDialogSeriesOptions
       567 -> XlDialogPivotTableOptions
       568 -> XlDialogPivotSolveOrder
       570 -> XlDialogPivotCalculatedField
       572 -> XlDialogPivotCalculatedItem
       583 -> XlDialogConditionalFormatting
       596 -> XlDialogInsertHyperlink
       620 -> XlDialogProtectSharing
       647 -> XlDialogOptionsME
       653 -> XlDialogPublishAsWebPage
       656 -> XlDialogPhonetic0
       666 -> XlDialogImportTextFile
       667 -> XlDialogNewWebQuery
       683 -> XlDialogWebOptionsGeneral
       684 -> XlDialogWebOptionsFiles
       685 -> XlDialogWebOptionsPictures
       686 -> XlDialogWebOptionsEncoding
       687 -> XlDialogWebOptionsFonts
       689 -> XlDialogPivotClientServerSet
       709 -> XlDialogEvaluateFormula
       723 -> XlDialogDataLabelMultiple
       724 -> XlDialogChartOptionsDataLabelMultiple
       731 -> XlDialogSearch
       732 -> XlDialogErrorChecking
       754 -> XlDialogPropertyFields
       773 -> XlDialogWebOptionsBrowsers
       796 -> XlDialogCreateList
       832 -> XlDialogPermission
       834 -> XlDialogMyPermission
       862 -> XlDialogDocumentInspector
       977 -> XlDialogNameManager
       978 -> XlDialogNewName
       _ -> error "unmarshallXlBuiltInDialog: illegal enum value "
  
data XlParameterType
 = XlParameterTypeList__ [XlParameterType]
 | XlPrompt
 | XlConstant
 | XlRange
 
instance Flags (XlParameterType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlParameterType) where
  fromEnum v =
    case v of
       (XlParameterTypeList__ xs) -> orList (map fromEnum xs)
       XlPrompt -> 0
       XlConstant -> 1
       XlRange -> 2
  
  toEnum v =
    case v of
       0 -> XlPrompt
       1 -> XlConstant
       2 -> XlRange
       x -> XlParameterTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlParameterType: illegal enum value "
  
data XlParameterDataType
 = XlParamTypeWChar
 | XlParamTypeBit
 | XlParamTypeTinyInt
 | XlParamTypeBigInt
 | XlParamTypeLongVarBinary
 | XlParamTypeVarBinary
 | XlParamTypeBinary
 | XlParamTypeLongVarChar
 | XlParamTypeUnknown
 | XlParamTypeChar
 | XlParamTypeNumeric
 | XlParamTypeDecimal
 | XlParamTypeInteger
 | XlParamTypeSmallInt
 | XlParamTypeFloat
 | XlParamTypeReal
 | XlParamTypeDouble
 | XlParamTypeDate
 | XlParamTypeTime
 | XlParamTypeTimestamp
 | XlParamTypeVarChar
 
instance Enum (XlParameterDataType) where
  fromEnum v =
    case v of
       XlParamTypeWChar -> (-8)
       XlParamTypeBit -> (-7)
       XlParamTypeTinyInt -> (-6)
       XlParamTypeBigInt -> (-5)
       XlParamTypeLongVarBinary -> (-4)
       XlParamTypeVarBinary -> (-3)
       XlParamTypeBinary -> (-2)
       XlParamTypeLongVarChar -> (-1)
       XlParamTypeUnknown -> 0
       XlParamTypeChar -> 1
       XlParamTypeNumeric -> 2
       XlParamTypeDecimal -> 3
       XlParamTypeInteger -> 4
       XlParamTypeSmallInt -> 5
       XlParamTypeFloat -> 6
       XlParamTypeReal -> 7
       XlParamTypeDouble -> 8
       XlParamTypeDate -> 9
       XlParamTypeTime -> 10
       XlParamTypeTimestamp -> 11
       XlParamTypeVarChar -> 12
  
  toEnum v =
    case v of
       (-8) -> XlParamTypeWChar
       (-7) -> XlParamTypeBit
       (-6) -> XlParamTypeTinyInt
       (-5) -> XlParamTypeBigInt
       (-4) -> XlParamTypeLongVarBinary
       (-3) -> XlParamTypeVarBinary
       (-2) -> XlParamTypeBinary
       (-1) -> XlParamTypeLongVarChar
       0 -> XlParamTypeUnknown
       1 -> XlParamTypeChar
       2 -> XlParamTypeNumeric
       3 -> XlParamTypeDecimal
       4 -> XlParamTypeInteger
       5 -> XlParamTypeSmallInt
       6 -> XlParamTypeFloat
       7 -> XlParamTypeReal
       8 -> XlParamTypeDouble
       9 -> XlParamTypeDate
       10 -> XlParamTypeTime
       11 -> XlParamTypeTimestamp
       12 -> XlParamTypeVarChar
       _ -> error "unmarshallXlParameterDataType: illegal enum value "
  
data XlFormControl
 = XlButtonControl
 | XlCheckBox
 | XlDropDown
 | XlEditBox
 | XlGroupBox
 | XlLabel
 | XlListBox
 | XlOptionButton
 | XlScrollBar
 | XlSpinner
 deriving (Enum)
data XlSourceType
 = XlSourceWorkbook
 | XlSourceSheet
 | XlSourcePrintArea
 | XlSourceAutoFilter
 | XlSourceRange
 | XlSourceChart
 | XlSourcePivotTable
 | XlSourceQuery
 deriving (Enum)
data XlHtmlType
 = XlHtmlStatic
 | XlHtmlCalc
 | XlHtmlList
 | XlHtmlChart
 deriving (Enum)
data XlPivotFormatType
 = XlReport1
 | XlReport2
 | XlReport3
 | XlReport4
 | XlReport5
 | XlReport6
 | XlReport7
 | XlReport8
 | XlReport9
 | XlReport10
 | XlTable1
 | XlTable2
 | XlTable3
 | XlTable4
 | XlTable5
 | XlTable6
 | XlTable7
 | XlTable8
 | XlTable9
 | XlTable10
 | XlPTClassic
 | XlPTNone
 deriving (Enum)
data XlCmdType
 = XlCmdCube
 | XlCmdSql
 | XlCmdTable
 | XlCmdDefault
 | XlCmdList
 
instance Enum (XlCmdType) where
  fromEnum v =
    case v of
       XlCmdCube -> 1
       XlCmdSql -> 2
       XlCmdTable -> 3
       XlCmdDefault -> 4
       XlCmdList -> 5
  
  toEnum v =
    case v of
       1 -> XlCmdCube
       2 -> XlCmdSql
       3 -> XlCmdTable
       4 -> XlCmdDefault
       5 -> XlCmdList
       _ -> error "unmarshallXlCmdType: illegal enum value "
  
data XlColumnDataType
 = XlGeneralFormat
 | XlTextFormat
 | XlMDYFormat
 | XlDMYFormat
 | XlYMDFormat
 | XlMYDFormat
 | XlDYMFormat
 | XlYDMFormat
 | XlSkipColumn
 | XlEMDFormat
 
instance Enum (XlColumnDataType) where
  fromEnum v =
    case v of
       XlGeneralFormat -> 1
       XlTextFormat -> 2
       XlMDYFormat -> 3
       XlDMYFormat -> 4
       XlYMDFormat -> 5
       XlMYDFormat -> 6
       XlDYMFormat -> 7
       XlYDMFormat -> 8
       XlSkipColumn -> 9
       XlEMDFormat -> 10
  
  toEnum v =
    case v of
       1 -> XlGeneralFormat
       2 -> XlTextFormat
       3 -> XlMDYFormat
       4 -> XlDMYFormat
       5 -> XlYMDFormat
       6 -> XlMYDFormat
       7 -> XlDYMFormat
       8 -> XlYDMFormat
       9 -> XlSkipColumn
       10 -> XlEMDFormat
       _ -> error "unmarshallXlColumnDataType: illegal enum value "
  
data XlQueryType
 = XlODBCQuery
 | XlDAORecordset
 | XlWebQuery
 | XlOLEDBQuery
 | XlTextImport
 | XlADORecordset
 
instance Enum (XlQueryType) where
  fromEnum v =
    case v of
       XlODBCQuery -> 1
       XlDAORecordset -> 2
       XlWebQuery -> 4
       XlOLEDBQuery -> 5
       XlTextImport -> 6
       XlADORecordset -> 7
  
  toEnum v =
    case v of
       1 -> XlODBCQuery
       2 -> XlDAORecordset
       4 -> XlWebQuery
       5 -> XlOLEDBQuery
       6 -> XlTextImport
       7 -> XlADORecordset
       _ -> error "unmarshallXlQueryType: illegal enum value "
  
data XlWebSelectionType
 = XlEntirePage
 | XlAllTables
 | XlSpecifiedTables
 
instance Enum (XlWebSelectionType) where
  fromEnum v =
    case v of
       XlEntirePage -> 1
       XlAllTables -> 2
       XlSpecifiedTables -> 3
  
  toEnum v =
    case v of
       1 -> XlEntirePage
       2 -> XlAllTables
       3 -> XlSpecifiedTables
       _ -> error "unmarshallXlWebSelectionType: illegal enum value "
  
data XlCubeFieldType
 = XlHierarchy
 | XlMeasure
 | XlSet
 
instance Enum (XlCubeFieldType) where
  fromEnum v =
    case v of
       XlHierarchy -> 1
       XlMeasure -> 2
       XlSet -> 3
  
  toEnum v =
    case v of
       1 -> XlHierarchy
       2 -> XlMeasure
       3 -> XlSet
       _ -> error "unmarshallXlCubeFieldType: illegal enum value "
  
data XlWebFormatting
 = XlWebFormattingAll
 | XlWebFormattingRTF
 | XlWebFormattingNone
 
instance Enum (XlWebFormatting) where
  fromEnum v =
    case v of
       XlWebFormattingAll -> 1
       XlWebFormattingRTF -> 2
       XlWebFormattingNone -> 3
  
  toEnum v =
    case v of
       1 -> XlWebFormattingAll
       2 -> XlWebFormattingRTF
       3 -> XlWebFormattingNone
       _ -> error "unmarshallXlWebFormatting: illegal enum value "
  
data XlDisplayDrawingObjects
 = XlDisplayShapes
 | XlPlaceholders
 | XlHide
 
instance Enum (XlDisplayDrawingObjects) where
  fromEnum v =
    case v of
       XlDisplayShapes -> (-4104)
       XlPlaceholders -> 2
       XlHide -> 3
  
  toEnum v =
    case v of
       (-4104) -> XlDisplayShapes
       2 -> XlPlaceholders
       3 -> XlHide
       _ -> error "unmarshallXlDisplayDrawingObjects: illegal enum value "
  
data XlSubtototalLocationType
 = XlSubtototalLocationTypeList__ [XlSubtototalLocationType]
 | XlAtTop
 | XlAtBottom
 
instance Flags (XlSubtototalLocationType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSubtototalLocationType) where
  fromEnum v =
    case v of
       (XlSubtototalLocationTypeList__ xs) -> orList (map fromEnum xs)
       XlAtTop -> 1
       XlAtBottom -> 2
  
  toEnum v =
    case v of
       1 -> XlAtTop
       2 -> XlAtBottom
       x -> XlSubtototalLocationTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                 then Just (toEnum (fromIntegral val))
                                                                 else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSubtototalLocationType: illegal enum value "
  
data XlPivotTableVersionList
 = XlPivotTableVersionCurrent
 | XlPivotTableVersion2000
 | XlPivotTableVersion10
 | XlPivotTableVersion11
 | XlPivotTableVersion12
 
instance Enum (XlPivotTableVersionList) where
  fromEnum v =
    case v of
       XlPivotTableVersionCurrent -> (-1)
       XlPivotTableVersion2000 -> 0
       XlPivotTableVersion10 -> 1
       XlPivotTableVersion11 -> 2
       XlPivotTableVersion12 -> 3
  
  toEnum v =
    case v of
       (-1) -> XlPivotTableVersionCurrent
       0 -> XlPivotTableVersion2000
       1 -> XlPivotTableVersion10
       2 -> XlPivotTableVersion11
       3 -> XlPivotTableVersion12
       _ -> error "unmarshallXlPivotTableVersionList: illegal enum value "
  
data XlPrintErrors
 = XlPrintErrorsDisplayed
 | XlPrintErrorsBlank
 | XlPrintErrorsDash
 | XlPrintErrorsNA
 deriving (Enum)
data XlPivotCellType
 = XlPivotCellValue
 | XlPivotCellPivotItem
 | XlPivotCellSubtotal
 | XlPivotCellGrandTotal
 | XlPivotCellDataField
 | XlPivotCellPivotField
 | XlPivotCellPageFieldItem
 | XlPivotCellCustomSubtotal
 | XlPivotCellDataPivotField
 | XlPivotCellBlankCell
 deriving (Enum)
data XlPivotTableMissingItems
 = XlMissingItemsDefault
 | XlMissingItemsNone
 | XlMissingItemsMax
 | XlMissingItemsMax2
 
instance Enum (XlPivotTableMissingItems) where
  fromEnum v =
    case v of
       XlMissingItemsDefault -> (-1)
       XlMissingItemsNone -> 0
       XlMissingItemsMax -> 32500
       XlMissingItemsMax2 -> 1048576
  
  toEnum v =
    case v of
       (-1) -> XlMissingItemsDefault
       0 -> XlMissingItemsNone
       32500 -> XlMissingItemsMax
       1048576 -> XlMissingItemsMax2
       _ -> error "unmarshallXlPivotTableMissingItems: illegal enum value "
  
data XlCalculationState
 = XlCalculationStateList__ [XlCalculationState]
 | XlDone
 | XlCalculating
 | XlPending
 
instance Flags (XlCalculationState) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCalculationState) where
  fromEnum v =
    case v of
       (XlCalculationStateList__ xs) -> orList (map fromEnum xs)
       XlDone -> 0
       XlCalculating -> 1
       XlPending -> 2
  
  toEnum v =
    case v of
       0 -> XlDone
       1 -> XlCalculating
       2 -> XlPending
       x -> XlCalculationStateList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCalculationState: illegal enum value "
  
data XlCalculationInterruptKey
 = XlCalculationInterruptKeyList__ [XlCalculationInterruptKey]
 | XlNoKey
 | XlEscKey
 | XlAnyKey
 
instance Flags (XlCalculationInterruptKey) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCalculationInterruptKey) where
  fromEnum v =
    case v of
       (XlCalculationInterruptKeyList__ xs) -> orList (map fromEnum xs)
       XlNoKey -> 0
       XlEscKey -> 1
       XlAnyKey -> 2
  
  toEnum v =
    case v of
       0 -> XlNoKey
       1 -> XlEscKey
       2 -> XlAnyKey
       x -> XlCalculationInterruptKeyList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                  then Just (toEnum (fromIntegral val))
                                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCalculationInterruptKey: illegal enum value "
  
data XlSortDataOption
 = XlSortDataOptionList__ [XlSortDataOption]
 | XlSortNormal
 | XlSortTextAsNumbers
 
instance Flags (XlSortDataOption) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSortDataOption) where
  fromEnum v =
    case v of
       (XlSortDataOptionList__ xs) -> orList (map fromEnum xs)
       XlSortNormal -> 0
       XlSortTextAsNumbers -> 1
  
  toEnum v =
    case v of
       0 -> XlSortNormal
       1 -> XlSortTextAsNumbers
       x -> XlSortDataOptionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlSortDataOption: illegal enum value "
  
data XlUpdateLinks
 = XlUpdateLinksUserSetting
 | XlUpdateLinksNever
 | XlUpdateLinksAlways
 
instance Enum (XlUpdateLinks) where
  fromEnum v =
    case v of
       XlUpdateLinksUserSetting -> 1
       XlUpdateLinksNever -> 2
       XlUpdateLinksAlways -> 3
  
  toEnum v =
    case v of
       1 -> XlUpdateLinksUserSetting
       2 -> XlUpdateLinksNever
       3 -> XlUpdateLinksAlways
       _ -> error "unmarshallXlUpdateLinks: illegal enum value "
  
data XlLinkStatus
 = XlLinkStatusOK
 | XlLinkStatusMissingFile
 | XlLinkStatusMissingSheet
 | XlLinkStatusOld
 | XlLinkStatusSourceNotCalculated
 | XlLinkStatusIndeterminate
 | XlLinkStatusNotStarted
 | XlLinkStatusInvalidName
 | XlLinkStatusSourceNotOpen
 | XlLinkStatusSourceOpen
 | XlLinkStatusCopiedValues
 deriving (Enum)
data XlSearchWithin
 = XlSearchWithinList__ [XlSearchWithin]
 | XlWithinSheet
 | XlWithinWorkbook
 
instance Flags (XlSearchWithin) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSearchWithin) where
  fromEnum v =
    case v of
       (XlSearchWithinList__ xs) -> orList (map fromEnum xs)
       XlWithinSheet -> 1
       XlWithinWorkbook -> 2
  
  toEnum v =
    case v of
       1 -> XlWithinSheet
       2 -> XlWithinWorkbook
       x -> XlSearchWithinList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSearchWithin: illegal enum value "
  
data XlCorruptLoad
 = XlCorruptLoadList__ [XlCorruptLoad]
 | XlNormalLoad
 | XlRepairFile
 | XlExtractData
 
instance Flags (XlCorruptLoad) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCorruptLoad) where
  fromEnum v =
    case v of
       (XlCorruptLoadList__ xs) -> orList (map fromEnum xs)
       XlNormalLoad -> 0
       XlRepairFile -> 1
       XlExtractData -> 2
  
  toEnum v =
    case v of
       0 -> XlNormalLoad
       1 -> XlRepairFile
       2 -> XlExtractData
       x -> XlCorruptLoadList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCorruptLoad: illegal enum value "
  
data XlRobustConnect
 = XlRobustConnectList__ [XlRobustConnect]
 | XlAsRequired
 | XlAlways
 | XlNever
 
instance Flags (XlRobustConnect) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlRobustConnect) where
  fromEnum v =
    case v of
       (XlRobustConnectList__ xs) -> orList (map fromEnum xs)
       XlAsRequired -> 0
       XlAlways -> 1
       XlNever -> 2
  
  toEnum v =
    case v of
       0 -> XlAsRequired
       1 -> XlAlways
       2 -> XlNever
       x -> XlRobustConnectList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlRobustConnect: illegal enum value "
  
data XlErrorChecks
 = XlEvaluateToError
 | XlTextDate
 | XlNumberAsText
 | XlInconsistentFormula
 | XlOmittedCells
 | XlUnlockedFormulaCells
 | XlEmptyCellReferences
 | XlListDataValidation
 | XlInconsistentListFormula
 
instance Enum (XlErrorChecks) where
  fromEnum v =
    case v of
       XlEvaluateToError -> 1
       XlTextDate -> 2
       XlNumberAsText -> 3
       XlInconsistentFormula -> 4
       XlOmittedCells -> 5
       XlUnlockedFormulaCells -> 6
       XlEmptyCellReferences -> 7
       XlListDataValidation -> 8
       XlInconsistentListFormula -> 9
  
  toEnum v =
    case v of
       1 -> XlEvaluateToError
       2 -> XlTextDate
       3 -> XlNumberAsText
       4 -> XlInconsistentFormula
       5 -> XlOmittedCells
       6 -> XlUnlockedFormulaCells
       7 -> XlEmptyCellReferences
       8 -> XlListDataValidation
       9 -> XlInconsistentListFormula
       _ -> error "unmarshallXlErrorChecks: illegal enum value "
  
data XlDataLabelSeparator = XlDataLabelSeparatorDefault 
instance Enum (XlDataLabelSeparator) where
  fromEnum v = case v of XlDataLabelSeparatorDefault -> 1
  
  toEnum v =
    case v of
       1 -> XlDataLabelSeparatorDefault
       _ -> error "unmarshallXlDataLabelSeparator: illegal enum value "
  
data XlSmartTagDisplayMode
 = XlSmartTagDisplayModeList__ [XlSmartTagDisplayMode]
 | XlIndicatorAndButton
 | XlDisplayNone
 | XlButtonOnly
 
instance Flags (XlSmartTagDisplayMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSmartTagDisplayMode) where
  fromEnum v =
    case v of
       (XlSmartTagDisplayModeList__ xs) -> orList (map fromEnum xs)
       XlIndicatorAndButton -> 0
       XlDisplayNone -> 1
       XlButtonOnly -> 2
  
  toEnum v =
    case v of
       0 -> XlIndicatorAndButton
       1 -> XlDisplayNone
       2 -> XlButtonOnly
       x -> XlSmartTagDisplayModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlSmartTagDisplayMode: illegal enum value "
  
data XlRangeValueDataType
 = XlRangeValueDefault
 | XlRangeValueXMLSpreadsheet
 | XlRangeValueMSPersistXML
 
instance Enum (XlRangeValueDataType) where
  fromEnum v =
    case v of
       XlRangeValueDefault -> 10
       XlRangeValueXMLSpreadsheet -> 11
       XlRangeValueMSPersistXML -> 12
  
  toEnum v =
    case v of
       10 -> XlRangeValueDefault
       11 -> XlRangeValueXMLSpreadsheet
       12 -> XlRangeValueMSPersistXML
       _ -> error "unmarshallXlRangeValueDataType: illegal enum value "
  
data XlSpeakDirection
 = XlSpeakDirectionList__ [XlSpeakDirection]
 | XlSpeakByRows
 | XlSpeakByColumns
 
instance Flags (XlSpeakDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSpeakDirection) where
  fromEnum v =
    case v of
       (XlSpeakDirectionList__ xs) -> orList (map fromEnum xs)
       XlSpeakByRows -> 0
       XlSpeakByColumns -> 1
  
  toEnum v =
    case v of
       0 -> XlSpeakByRows
       1 -> XlSpeakByColumns
       x -> XlSpeakDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlSpeakDirection: illegal enum value "
  
data XlInsertFormatOrigin
 = XlInsertFormatOriginList__ [XlInsertFormatOrigin]
 | XlFormatFromLeftOrAbove
 | XlFormatFromRightOrBelow
 
instance Flags (XlInsertFormatOrigin) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlInsertFormatOrigin) where
  fromEnum v =
    case v of
       (XlInsertFormatOriginList__ xs) -> orList (map fromEnum xs)
       XlFormatFromLeftOrAbove -> 0
       XlFormatFromRightOrBelow -> 1
  
  toEnum v =
    case v of
       0 -> XlFormatFromLeftOrAbove
       1 -> XlFormatFromRightOrBelow
       x -> XlInsertFormatOriginList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlInsertFormatOrigin: illegal enum value "
  
data XlArabicModes
 = XlArabicNone
 | XlArabicStrictAlefHamza
 | XlArabicStrictFinalYaa
 | XlArabicBothStrict
 deriving (Enum)
data XlImportDataAs
 = XlImportDataAsList__ [XlImportDataAs]
 | XlQueryTable
 | XlPivotTableReport
 | XlTable
 
instance Flags (XlImportDataAs) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlImportDataAs) where
  fromEnum v =
    case v of
       (XlImportDataAsList__ xs) -> orList (map fromEnum xs)
       XlQueryTable -> 0
       XlPivotTableReport -> 1
       XlTable -> 2
  
  toEnum v =
    case v of
       0 -> XlQueryTable
       1 -> XlPivotTableReport
       2 -> XlTable
       x -> XlImportDataAsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlImportDataAs: illegal enum value "
  
data XlCalculatedMemberType
 = XlCalculatedMemberTypeList__ [XlCalculatedMemberType]
 | XlCalculatedMember
 | XlCalculatedSet
 
instance Flags (XlCalculatedMemberType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCalculatedMemberType) where
  fromEnum v =
    case v of
       (XlCalculatedMemberTypeList__ xs) -> orList (map fromEnum xs)
       XlCalculatedMember -> 0
       XlCalculatedSet -> 1
  
  toEnum v =
    case v of
       0 -> XlCalculatedMember
       1 -> XlCalculatedSet
       x -> XlCalculatedMemberTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                               then Just (toEnum (fromIntegral val))
                                                               else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlCalculatedMemberType: illegal enum value "
  
data XlHebrewModes
 = XlHebrewFullScript
 | XlHebrewPartialScript
 | XlHebrewMixedScript
 | XlHebrewMixedAuthorizedScript
 deriving (Enum)
data XlListObjectSourceType
 = XlSrcExternal
 | XlSrcRange
 | XlSrcXml
 | XlSrcQuery
 deriving (Enum)
data XlTextVisualLayoutType
 = XlTextVisualLayoutTypeList__ [XlTextVisualLayoutType]
 | XlTextVisualLTR
 | XlTextVisualRTL
 
instance Flags (XlTextVisualLayoutType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlTextVisualLayoutType) where
  fromEnum v =
    case v of
       (XlTextVisualLayoutTypeList__ xs) -> orList (map fromEnum xs)
       XlTextVisualLTR -> 1
       XlTextVisualRTL -> 2
  
  toEnum v =
    case v of
       1 -> XlTextVisualLTR
       2 -> XlTextVisualRTL
       x -> XlTextVisualLayoutTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                               then Just (toEnum (fromIntegral val))
                                                               else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlTextVisualLayoutType: illegal enum value "
  
data XlListDataType
 = XlListDataTypeNone
 | XlListDataTypeText
 | XlListDataTypeMultiLineText
 | XlListDataTypeNumber
 | XlListDataTypeCurrency
 | XlListDataTypeDateTime
 | XlListDataTypeChoice
 | XlListDataTypeChoiceMulti
 | XlListDataTypeListLookup
 | XlListDataTypeCheckbox
 | XlListDataTypeHyperLink
 | XlListDataTypeCounter
 | XlListDataTypeMultiLineRichText
 deriving (Enum)
data XlTotalsCalculation
 = XlTotalsCalculationNone
 | XlTotalsCalculationSum
 | XlTotalsCalculationAverage
 | XlTotalsCalculationCount
 | XlTotalsCalculationCountNums
 | XlTotalsCalculationMin
 | XlTotalsCalculationMax
 | XlTotalsCalculationStdDev
 | XlTotalsCalculationVar
 | XlTotalsCalculationCustom
 deriving (Enum)
data XlXmlLoadOption
 = XlXmlLoadPromptUser
 | XlXmlLoadOpenXml
 | XlXmlLoadImportToList
 | XlXmlLoadMapXml
 deriving (Enum)
data XlSmartTagControlType
 = XlSmartTagControlSmartTag
 | XlSmartTagControlLink
 | XlSmartTagControlHelp
 | XlSmartTagControlHelpURL
 | XlSmartTagControlSeparator
 | XlSmartTagControlButton
 | XlSmartTagControlLabel
 | XlSmartTagControlImage
 | XlSmartTagControlCheckbox
 | XlSmartTagControlTextbox
 | XlSmartTagControlListbox
 | XlSmartTagControlCombo
 | XlSmartTagControlActiveX
 | XlSmartTagControlRadioGroup
 
instance Enum (XlSmartTagControlType) where
  fromEnum v =
    case v of
       XlSmartTagControlSmartTag -> 1
       XlSmartTagControlLink -> 2
       XlSmartTagControlHelp -> 3
       XlSmartTagControlHelpURL -> 4
       XlSmartTagControlSeparator -> 5
       XlSmartTagControlButton -> 6
       XlSmartTagControlLabel -> 7
       XlSmartTagControlImage -> 8
       XlSmartTagControlCheckbox -> 9
       XlSmartTagControlTextbox -> 10
       XlSmartTagControlListbox -> 11
       XlSmartTagControlCombo -> 12
       XlSmartTagControlActiveX -> 13
       XlSmartTagControlRadioGroup -> 14
  
  toEnum v =
    case v of
       1 -> XlSmartTagControlSmartTag
       2 -> XlSmartTagControlLink
       3 -> XlSmartTagControlHelp
       4 -> XlSmartTagControlHelpURL
       5 -> XlSmartTagControlSeparator
       6 -> XlSmartTagControlButton
       7 -> XlSmartTagControlLabel
       8 -> XlSmartTagControlImage
       9 -> XlSmartTagControlCheckbox
       10 -> XlSmartTagControlTextbox
       11 -> XlSmartTagControlListbox
       12 -> XlSmartTagControlCombo
       13 -> XlSmartTagControlActiveX
       14 -> XlSmartTagControlRadioGroup
       _ -> error "unmarshallXlSmartTagControlType: illegal enum value "
  
data XlListConflict
 = XlListConflictDialog
 | XlListConflictRetryAllConflicts
 | XlListConflictDiscardAllConflicts
 | XlListConflictError
 deriving (Enum)
data XlXmlExportResult
 = XlXmlExportResultList__ [XlXmlExportResult]
 | XlXmlExportSuccess
 | XlXmlExportValidationFailed
 
instance Flags (XlXmlExportResult) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlXmlExportResult) where
  fromEnum v =
    case v of
       (XlXmlExportResultList__ xs) -> orList (map fromEnum xs)
       XlXmlExportSuccess -> 0
       XlXmlExportValidationFailed -> 1
  
  toEnum v =
    case v of
       0 -> XlXmlExportSuccess
       1 -> XlXmlExportValidationFailed
       x -> XlXmlExportResultList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlXmlExportResult: illegal enum value "
  
data XlXmlImportResult
 = XlXmlImportResultList__ [XlXmlImportResult]
 | XlXmlImportSuccess
 | XlXmlImportElementsTruncated
 | XlXmlImportValidationFailed
 
instance Flags (XlXmlImportResult) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlXmlImportResult) where
  fromEnum v =
    case v of
       (XlXmlImportResultList__ xs) -> orList (map fromEnum xs)
       XlXmlImportSuccess -> 0
       XlXmlImportElementsTruncated -> 1
       XlXmlImportValidationFailed -> 2
  
  toEnum v =
    case v of
       0 -> XlXmlImportSuccess
       1 -> XlXmlImportElementsTruncated
       2 -> XlXmlImportValidationFailed
       x -> XlXmlImportResultList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlXmlImportResult: illegal enum value "
  
data XlRemoveDocInfoType
 = XlRDIComments
 | XlRDIRemovePersonalInformation
 | XlRDIEmailHeader
 | XlRDIRoutingSlip
 | XlRDISendForReview
 | XlRDIDocumentProperties
 | XlRDIDocumentWorkspace
 | XlRDIInkAnnotations
 | XlRDIScenarioComments
 | XlRDIPublishInfo
 | XlRDIDocumentServerProperties
 | XlRDIDocumentManagementPolicy
 | XlRDIContentType
 | XlRDIDefinedNameComments
 | XlRDIInactiveDataConnections
 | XlRDIPrinterPath
 | XlRDIAll
 
instance Enum (XlRemoveDocInfoType) where
  fromEnum v =
    case v of
       XlRDIComments -> 1
       XlRDIRemovePersonalInformation -> 4
       XlRDIEmailHeader -> 5
       XlRDIRoutingSlip -> 6
       XlRDISendForReview -> 7
       XlRDIDocumentProperties -> 8
       XlRDIDocumentWorkspace -> 10
       XlRDIInkAnnotations -> 11
       XlRDIScenarioComments -> 12
       XlRDIPublishInfo -> 13
       XlRDIDocumentServerProperties -> 14
       XlRDIDocumentManagementPolicy -> 15
       XlRDIContentType -> 16
       XlRDIDefinedNameComments -> 18
       XlRDIInactiveDataConnections -> 19
       XlRDIPrinterPath -> 20
       XlRDIAll -> 99
  
  toEnum v =
    case v of
       1 -> XlRDIComments
       4 -> XlRDIRemovePersonalInformation
       5 -> XlRDIEmailHeader
       6 -> XlRDIRoutingSlip
       7 -> XlRDISendForReview
       8 -> XlRDIDocumentProperties
       10 -> XlRDIDocumentWorkspace
       11 -> XlRDIInkAnnotations
       12 -> XlRDIScenarioComments
       13 -> XlRDIPublishInfo
       14 -> XlRDIDocumentServerProperties
       15 -> XlRDIDocumentManagementPolicy
       16 -> XlRDIContentType
       18 -> XlRDIDefinedNameComments
       19 -> XlRDIInactiveDataConnections
       20 -> XlRDIPrinterPath
       99 -> XlRDIAll
       _ -> error "unmarshallXlRemoveDocInfoType: illegal enum value "
  
data XlRgbColor
 = RgbBlack
 | RgbMaroon
 | RgbDarkRed
 | RgbRed
 | RgbOrangeRed
 | RgbDarkGreen
 | RgbGreen
 | RgbOlive
 | RgbDarkOrange
 | RgbOrange
 | RgbGold
 | RgbLawnGreen
 | RgbLime
 | RgbChartreuse
 | RgbYellow
 | RgbDarkGoldenrod
 | RgbGoldenrod
 | RgbFireBrick
 | RgbForestGreen
 | RgbOliveDrab
 | RgbBrown
 | RgbSienna
 | RgbDarkOliveGreen
 | RgbGreenYellow
 | RgbLimeGreen
 | RgbYellowGreen
 | RgbCrimson
 | RgbPeru
 | RgbTomato
 | RgbDarkSlateGray
 | RgbDarkSlateGrey
 | RgbCoral
 | RgbSeaGreen
 | RgbIndianRed
 | RgbSandyBrown
 | RgbDimGray
 | RgbDimGrey
 | RgbDarkKhaki
 | RgbPaleGoldenrod
 | RgbMidnightBlue
 | RgbMediumSeaGreen
 | RgbSalmon
 | RgbDarkSalmon
 | RgbLightSalmon
 | RgbSpringGreen
 | RgbNavy
 | RgbNavyBlue
 | RgbPurple
 | RgbTeal
 | RgbGray
 | RgbGrey
 | RgbLightCoral
 | RgbIndigo
 | RgbMediumVioletRed
 | RgbBurlyWood
 | RgbDarkBlue
 | RgbDarkMagenta
 | RgbDarkSlateBlue
 | RgbDarkCyan
 | RgbLightCyan
 | RgbTan
 | RgbKhaki
 | RgbRosyBrown
 | RgbDarkSeaGreen
 | RgbSlateGray
 | RgbSlateGrey
 | RgbLightGreen
 | RgbDeepPink
 | RgbPaleVioletRed
 | RgbPaleGreen
 | RgbLightSlateGray
 | RgbLightSlateGrey
 | RgbMediumSpringGreen
 | RgbCadetBlue
 | RgbDarkGray
 | RgbDarkGrey
 | RgbLightSeaGreen
 | RgbMediumAquamarine
 | RgbNavajoWhite
 | RgbWheat
 | RgbHotPink
 | RgbSteelBlue
 | RgbMoccasin
 | RgbPeachPuff
 | RgbSilver
 | RgbLightPink
 | RgbBisque
 | RgbPink
 | RgbDarkOrchid
 | RgbMediumTurquoise
 | RgbMediumBlue
 | RgbSlateBlue
 | RgbBlanchedAlmond
 | RgbLemonChiffon
 | RgbTurquoise
 | RgbDarkTurquoise
 | RgbLightGoldenrodYellow
 | RgbDarkViolet
 | RgbMediumOrchid
 | RgbLightGray
 | RgbLightGrey
 | RgbAquamarine
 | RgbPapayaWhip
 | RgbOrchid
 | RgbAntiqueWhite
 | RgbThistle
 | RgbMediumPurple
 | RgbGainsboro
 | RgbBeige
 | RgbCornsilk
 | RgbPlum
 | RgbLightSteelBlue
 | RgbLightYellow
 | RgbRoyalBlue
 | RgbMistyRose
 | RgbBlueViolet
 | RgbLightBlue
 | RgbPowderBlue
 | RgbLinen
 | RgbOldLace
 | RgbSkyBlue
 | RgbCornflowerBlue
 | RgbMediumSlateBlue
 | RgbViolet
 | RgbPaleTurquoise
 | RgbSeashell
 | RgbFloralWhite
 | RgbHoneydew
 | RgbIvory
 | RgbLavenderBlush
 | RgbWhiteSmoke
 | RgbLightSkyBlue
 | RgbLavender
 | RgbSnow
 | RgbMintCream
 | RgbBlue
 | RgbFuchsia
 | RgbDodgerBlue
 | RgbDeepSkyBlue
 | RgbAliceBlue
 | RgbGhostWhite
 | RgbAqua
 | RgbAzure
 | RgbWhite
 
instance Enum (XlRgbColor) where
  fromEnum v =
    case v of
       RgbBlack -> 0
       RgbMaroon -> 128
       RgbDarkRed -> 139
       RgbRed -> 255
       RgbOrangeRed -> 17919
       RgbDarkGreen -> 25600
       RgbGreen -> 32768
       RgbOlive -> 32896
       RgbDarkOrange -> 36095
       RgbOrange -> 42495
       RgbGold -> 55295
       RgbLawnGreen -> 64636
       RgbLime -> 65280
       RgbChartreuse -> 65407
       RgbYellow -> 65535
       RgbDarkGoldenrod -> 755384
       RgbGoldenrod -> 2139610
       RgbFireBrick -> 2237106
       RgbForestGreen -> 2263842
       RgbOliveDrab -> 2330219
       RgbBrown -> 2763429
       RgbSienna -> 2970272
       RgbDarkOliveGreen -> 3107669
       RgbGreenYellow -> 3145645
       RgbLimeGreen -> 3329330
       RgbYellowGreen -> 3329434
       RgbCrimson -> 3937500
       RgbPeru -> 4163021
       RgbTomato -> 4678655
       RgbDarkSlateGray -> 5197615
       RgbDarkSlateGrey -> 5197615
       RgbCoral -> 5275647
       RgbSeaGreen -> 5737262
       RgbIndianRed -> 6053069
       RgbSandyBrown -> 6333684
       RgbDimGray -> 6908265
       RgbDimGrey -> 6908265
       RgbDarkKhaki -> 7059389
       RgbPaleGoldenrod -> 7071982
       RgbMidnightBlue -> 7346457
       RgbMediumSeaGreen -> 7451452
       RgbSalmon -> 7504122
       RgbDarkSalmon -> 8034025
       RgbLightSalmon -> 8036607
       RgbSpringGreen -> 8388352
       RgbNavy -> 8388608
       RgbNavyBlue -> 8388608
       RgbPurple -> 8388736
       RgbTeal -> 8421376
       RgbGray -> 8421504
       RgbGrey -> 8421504
       RgbLightCoral -> 8421616
       RgbIndigo -> 8519755
       RgbMediumVioletRed -> 8721863
       RgbBurlyWood -> 8894686
       RgbDarkBlue -> 9109504
       RgbDarkMagenta -> 9109643
       RgbDarkSlateBlue -> 9125192
       RgbDarkCyan -> 9145088
       RgbLightCyan -> 9145088
       RgbTan -> 9221330
       RgbKhaki -> 9234160
       RgbRosyBrown -> 9408444
       RgbDarkSeaGreen -> 9419919
       RgbSlateGray -> 9470064
       RgbSlateGrey -> 9470064
       RgbLightGreen -> 9498256
       RgbDeepPink -> 9639167
       RgbPaleVioletRed -> 9662683
       RgbPaleGreen -> 10025880
       RgbLightSlateGray -> 10061943
       RgbLightSlateGrey -> 10061943
       RgbMediumSpringGreen -> 10156544
       RgbCadetBlue -> 10526303
       RgbDarkGray -> 11119017
       RgbDarkGrey -> 11119017
       RgbLightSeaGreen -> 11186720
       RgbMediumAquamarine -> 11206502
       RgbNavajoWhite -> 11394815
       RgbWheat -> 11788021
       RgbHotPink -> 11823615
       RgbSteelBlue -> 11829830
       RgbMoccasin -> 11920639
       RgbPeachPuff -> 12180223
       RgbSilver -> 12632256
       RgbLightPink -> 12695295
       RgbBisque -> 12903679
       RgbPink -> 13353215
       RgbDarkOrchid -> 13382297
       RgbMediumTurquoise -> 13422920
       RgbMediumBlue -> 13434880
       RgbSlateBlue -> 13458026
       RgbBlanchedAlmond -> 13495295
       RgbLemonChiffon -> 13499135
       RgbTurquoise -> 13688896
       RgbDarkTurquoise -> 13749760
       RgbLightGoldenrodYellow -> 13826810
       RgbDarkViolet -> 13828244
       RgbMediumOrchid -> 13850042
       RgbLightGray -> 13882323
       RgbLightGrey -> 13882323
       RgbAquamarine -> 13959039
       RgbPapayaWhip -> 14020607
       RgbOrchid -> 14053594
       RgbAntiqueWhite -> 14150650
       RgbThistle -> 14204888
       RgbMediumPurple -> 14381203
       RgbGainsboro -> 14474460
       RgbBeige -> 14480885
       RgbCornsilk -> 14481663
       RgbPlum -> 14524637
       RgbLightSteelBlue -> 14599344
       RgbLightYellow -> 14745599
       RgbRoyalBlue -> 14772545
       RgbMistyRose -> 14804223
       RgbBlueViolet -> 14822282
       RgbLightBlue -> 15128749
       RgbPowderBlue -> 15130800
       RgbLinen -> 15134970
       RgbOldLace -> 15136253
       RgbSkyBlue -> 15453831
       RgbCornflowerBlue -> 15570276
       RgbMediumSlateBlue -> 15624315
       RgbViolet -> 15631086
       RgbPaleTurquoise -> 15658671
       RgbSeashell -> 15660543
       RgbFloralWhite -> 15792895
       RgbHoneydew -> 15794160
       RgbIvory -> 15794175
       RgbLavenderBlush -> 16118015
       RgbWhiteSmoke -> 16119285
       RgbLightSkyBlue -> 16436871
       RgbLavender -> 16443110
       RgbSnow -> 16448255
       RgbMintCream -> 16449525
       RgbBlue -> 16711680
       RgbFuchsia -> 16711935
       RgbDodgerBlue -> 16748574
       RgbDeepSkyBlue -> 16760576
       RgbAliceBlue -> 16775408
       RgbGhostWhite -> 16775416
       RgbAqua -> 16776960
       RgbAzure -> 16777200
       RgbWhite -> 16777215
  
  toEnum v =
    case v of
       0 -> RgbBlack
       128 -> RgbMaroon
       139 -> RgbDarkRed
       255 -> RgbRed
       17919 -> RgbOrangeRed
       25600 -> RgbDarkGreen
       32768 -> RgbGreen
       32896 -> RgbOlive
       36095 -> RgbDarkOrange
       42495 -> RgbOrange
       55295 -> RgbGold
       64636 -> RgbLawnGreen
       65280 -> RgbLime
       65407 -> RgbChartreuse
       65535 -> RgbYellow
       755384 -> RgbDarkGoldenrod
       2139610 -> RgbGoldenrod
       2237106 -> RgbFireBrick
       2263842 -> RgbForestGreen
       2330219 -> RgbOliveDrab
       2763429 -> RgbBrown
       2970272 -> RgbSienna
       3107669 -> RgbDarkOliveGreen
       3145645 -> RgbGreenYellow
       3329330 -> RgbLimeGreen
       3329434 -> RgbYellowGreen
       3937500 -> RgbCrimson
       4163021 -> RgbPeru
       4678655 -> RgbTomato
       5197615 -> RgbDarkSlateGray
       5197615 -> RgbDarkSlateGrey
       5275647 -> RgbCoral
       5737262 -> RgbSeaGreen
       6053069 -> RgbIndianRed
       6333684 -> RgbSandyBrown
       6908265 -> RgbDimGray
       6908265 -> RgbDimGrey
       7059389 -> RgbDarkKhaki
       7071982 -> RgbPaleGoldenrod
       7346457 -> RgbMidnightBlue
       7451452 -> RgbMediumSeaGreen
       7504122 -> RgbSalmon
       8034025 -> RgbDarkSalmon
       8036607 -> RgbLightSalmon
       8388352 -> RgbSpringGreen
       8388608 -> RgbNavy
       8388608 -> RgbNavyBlue
       8388736 -> RgbPurple
       8421376 -> RgbTeal
       8421504 -> RgbGray
       8421504 -> RgbGrey
       8421616 -> RgbLightCoral
       8519755 -> RgbIndigo
       8721863 -> RgbMediumVioletRed
       8894686 -> RgbBurlyWood
       9109504 -> RgbDarkBlue
       9109643 -> RgbDarkMagenta
       9125192 -> RgbDarkSlateBlue
       9145088 -> RgbDarkCyan
       9145088 -> RgbLightCyan
       9221330 -> RgbTan
       9234160 -> RgbKhaki
       9408444 -> RgbRosyBrown
       9419919 -> RgbDarkSeaGreen
       9470064 -> RgbSlateGray
       9470064 -> RgbSlateGrey
       9498256 -> RgbLightGreen
       9639167 -> RgbDeepPink
       9662683 -> RgbPaleVioletRed
       10025880 -> RgbPaleGreen
       10061943 -> RgbLightSlateGray
       10061943 -> RgbLightSlateGrey
       10156544 -> RgbMediumSpringGreen
       10526303 -> RgbCadetBlue
       11119017 -> RgbDarkGray
       11119017 -> RgbDarkGrey
       11186720 -> RgbLightSeaGreen
       11206502 -> RgbMediumAquamarine
       11394815 -> RgbNavajoWhite
       11788021 -> RgbWheat
       11823615 -> RgbHotPink
       11829830 -> RgbSteelBlue
       11920639 -> RgbMoccasin
       12180223 -> RgbPeachPuff
       12632256 -> RgbSilver
       12695295 -> RgbLightPink
       12903679 -> RgbBisque
       13353215 -> RgbPink
       13382297 -> RgbDarkOrchid
       13422920 -> RgbMediumTurquoise
       13434880 -> RgbMediumBlue
       13458026 -> RgbSlateBlue
       13495295 -> RgbBlanchedAlmond
       13499135 -> RgbLemonChiffon
       13688896 -> RgbTurquoise
       13749760 -> RgbDarkTurquoise
       13826810 -> RgbLightGoldenrodYellow
       13828244 -> RgbDarkViolet
       13850042 -> RgbMediumOrchid
       13882323 -> RgbLightGray
       13882323 -> RgbLightGrey
       13959039 -> RgbAquamarine
       14020607 -> RgbPapayaWhip
       14053594 -> RgbOrchid
       14150650 -> RgbAntiqueWhite
       14204888 -> RgbThistle
       14381203 -> RgbMediumPurple
       14474460 -> RgbGainsboro
       14480885 -> RgbBeige
       14481663 -> RgbCornsilk
       14524637 -> RgbPlum
       14599344 -> RgbLightSteelBlue
       14745599 -> RgbLightYellow
       14772545 -> RgbRoyalBlue
       14804223 -> RgbMistyRose
       14822282 -> RgbBlueViolet
       15128749 -> RgbLightBlue
       15130800 -> RgbPowderBlue
       15134970 -> RgbLinen
       15136253 -> RgbOldLace
       15453831 -> RgbSkyBlue
       15570276 -> RgbCornflowerBlue
       15624315 -> RgbMediumSlateBlue
       15631086 -> RgbViolet
       15658671 -> RgbPaleTurquoise
       15660543 -> RgbSeashell
       15792895 -> RgbFloralWhite
       15794160 -> RgbHoneydew
       15794175 -> RgbIvory
       16118015 -> RgbLavenderBlush
       16119285 -> RgbWhiteSmoke
       16436871 -> RgbLightSkyBlue
       16443110 -> RgbLavender
       16448255 -> RgbSnow
       16449525 -> RgbMintCream
       16711680 -> RgbBlue
       16711935 -> RgbFuchsia
       16748574 -> RgbDodgerBlue
       16760576 -> RgbDeepSkyBlue
       16775408 -> RgbAliceBlue
       16775416 -> RgbGhostWhite
       16776960 -> RgbAqua
       16777200 -> RgbAzure
       16777215 -> RgbWhite
       _ -> error "unmarshallXlRgbColor: illegal enum value "
  
data XlStdColorScale
 = XlColorScaleRYG
 | XlColorScaleGYR
 | XlColorScaleBlackWhite
 | XlColorScaleWhiteBlack
 
instance Enum (XlStdColorScale) where
  fromEnum v =
    case v of
       XlColorScaleRYG -> 1
       XlColorScaleGYR -> 2
       XlColorScaleBlackWhite -> 3
       XlColorScaleWhiteBlack -> 4
  
  toEnum v =
    case v of
       1 -> XlColorScaleRYG
       2 -> XlColorScaleGYR
       3 -> XlColorScaleBlackWhite
       4 -> XlColorScaleWhiteBlack
       _ -> error "unmarshallXlStdColorScale: illegal enum value "
  
data XlConditionValueTypes
 = XlConditionValueNone
 | XlConditionValueNumber
 | XlConditionValueLowestValue
 | XlConditionValueHighestValue
 | XlConditionValuePercent
 | XlConditionValueFormula
 | XlConditionValuePercentile
 
instance Enum (XlConditionValueTypes) where
  fromEnum v =
    case v of
       XlConditionValueNone -> (-1)
       XlConditionValueNumber -> 0
       XlConditionValueLowestValue -> 1
       XlConditionValueHighestValue -> 2
       XlConditionValuePercent -> 3
       XlConditionValueFormula -> 4
       XlConditionValuePercentile -> 5
  
  toEnum v =
    case v of
       (-1) -> XlConditionValueNone
       0 -> XlConditionValueNumber
       1 -> XlConditionValueLowestValue
       2 -> XlConditionValueHighestValue
       3 -> XlConditionValuePercent
       4 -> XlConditionValueFormula
       5 -> XlConditionValuePercentile
       _ -> error "unmarshallXlConditionValueTypes: illegal enum value "
  
data XlFormatFilterTypes
 = XlFilterBottom
 | XlFilterTop
 | XlFilterBottomPercent
 | XlFilterTopPercent
 deriving (Enum)
data XlContainsOperator
 = XlContains
 | XlDoesNotContain
 | XlBeginsWith
 | XlEndsWith
 deriving (Enum)
data XlAboveBelow
 = XlAboveAverage
 | XlBelowAverage
 | XlEqualAboveAverage
 | XlEqualBelowAverage
 | XlAboveStdDev
 | XlBelowStdDev
 deriving (Enum)
data XlLookFor
 = XlLookForList__ [XlLookFor]
 | XlLookForBlanks
 | XlLookForErrors
 | XlLookForFormulas
 
instance Flags (XlLookFor) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlLookFor) where
  fromEnum v =
    case v of
       (XlLookForList__ xs) -> orList (map fromEnum xs)
       XlLookForBlanks -> 0
       XlLookForErrors -> 1
       XlLookForFormulas -> 2
  
  toEnum v =
    case v of
       0 -> XlLookForBlanks
       1 -> XlLookForErrors
       2 -> XlLookForFormulas
       x -> XlLookForList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                  then Just (toEnum (fromIntegral val))
                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlLookFor: illegal enum value "
  
data XlTimePeriods
 = XlToday
 | XlYesterday
 | XlLast7Days
 | XlThisWeek
 | XlLastWeek
 | XlLastMonth
 | XlTomorrow
 | XlNextWeek
 | XlNextMonth
 | XlThisMonth
 deriving (Enum)
data XlDupeUnique
 = XlDupeUniqueList__ [XlDupeUnique]
 | XlUnique
 | XlDuplicate
 
instance Flags (XlDupeUnique) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlDupeUnique) where
  fromEnum v =
    case v of
       (XlDupeUniqueList__ xs) -> orList (map fromEnum xs)
       XlUnique -> 0
       XlDuplicate -> 1
  
  toEnum v =
    case v of
       0 -> XlUnique
       1 -> XlDuplicate
       x -> XlDupeUniqueList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlDupeUnique: illegal enum value "
  
data XlTopBottom
 = XlTopBottomList__ [XlTopBottom]
 | XlTop10Bottom
 | XlTop10Top
 
instance Flags (XlTopBottom) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlTopBottom) where
  fromEnum v =
    case v of
       (XlTopBottomList__ xs) -> orList (map fromEnum xs)
       XlTop10Bottom -> 0
       XlTop10Top -> 1
  
  toEnum v =
    case v of
       0 -> XlTop10Bottom
       1 -> XlTop10Top
       x -> XlTopBottomList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlTopBottom: illegal enum value "
  
data XlIconSet
 = Xl3Arrows
 | Xl3ArrowsGray
 | Xl3Flags
 | Xl3TrafficLights1
 | Xl3TrafficLights2
 | Xl3Signs
 | Xl3Symbols
 | Xl3Symbols2
 | Xl4Arrows
 | Xl4ArrowsGray
 | Xl4RedToBlack
 | Xl4CRV
 | Xl4TrafficLights
 | Xl5Arrows
 | Xl5ArrowsGray
 | Xl5CRV
 | Xl5Quarters
 
instance Enum (XlIconSet) where
  fromEnum v =
    case v of
       Xl3Arrows -> 1
       Xl3ArrowsGray -> 2
       Xl3Flags -> 3
       Xl3TrafficLights1 -> 4
       Xl3TrafficLights2 -> 5
       Xl3Signs -> 6
       Xl3Symbols -> 7
       Xl3Symbols2 -> 8
       Xl4Arrows -> 9
       Xl4ArrowsGray -> 10
       Xl4RedToBlack -> 11
       Xl4CRV -> 12
       Xl4TrafficLights -> 13
       Xl5Arrows -> 14
       Xl5ArrowsGray -> 15
       Xl5CRV -> 16
       Xl5Quarters -> 17
  
  toEnum v =
    case v of
       1 -> Xl3Arrows
       2 -> Xl3ArrowsGray
       3 -> Xl3Flags
       4 -> Xl3TrafficLights1
       5 -> Xl3TrafficLights2
       6 -> Xl3Signs
       7 -> Xl3Symbols
       8 -> Xl3Symbols2
       9 -> Xl4Arrows
       10 -> Xl4ArrowsGray
       11 -> Xl4RedToBlack
       12 -> Xl4CRV
       13 -> Xl4TrafficLights
       14 -> Xl5Arrows
       15 -> Xl5ArrowsGray
       16 -> Xl5CRV
       17 -> Xl5Quarters
       _ -> error "unmarshallXlIconSet: illegal enum value "
  
data XlThemeFont
 = XlThemeFontList__ [XlThemeFont]
 | XlThemeFontNone
 | XlThemeFontMajor
 | XlThemeFontMinor
 
instance Flags (XlThemeFont) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlThemeFont) where
  fromEnum v =
    case v of
       (XlThemeFontList__ xs) -> orList (map fromEnum xs)
       XlThemeFontNone -> 0
       XlThemeFontMajor -> 1
       XlThemeFontMinor -> 2
  
  toEnum v =
    case v of
       0 -> XlThemeFontNone
       1 -> XlThemeFontMajor
       2 -> XlThemeFontMinor
       x -> XlThemeFontList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlThemeFont: illegal enum value "
  
data XlPivotLineType
 = XlPivotLineRegular
 | XlPivotLineSubtotal
 | XlPivotLineGrandTotal
 | XlPivotLineBlank
 deriving (Enum)
data XlCheckInVersionType
 = XlCheckInVersionTypeList__ [XlCheckInVersionType]
 | XlCheckInMinorVersion
 | XlCheckInMajorVersion
 | XlCheckInOverwriteVersion
 
instance Flags (XlCheckInVersionType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCheckInVersionType) where
  fromEnum v =
    case v of
       (XlCheckInVersionTypeList__ xs) -> orList (map fromEnum xs)
       XlCheckInMinorVersion -> 0
       XlCheckInMajorVersion -> 1
       XlCheckInOverwriteVersion -> 2
  
  toEnum v =
    case v of
       0 -> XlCheckInMinorVersion
       1 -> XlCheckInMajorVersion
       2 -> XlCheckInOverwriteVersion
       x -> XlCheckInVersionTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCheckInVersionType: illegal enum value "
  
data XlPropertyDisplayedIn
 = XlDisplayPropertyInPivotTable
 | XlDisplayPropertyInTooltip
 | XlDisplayPropertyInPivotTableAndTooltip
 
instance Enum (XlPropertyDisplayedIn) where
  fromEnum v =
    case v of
       XlDisplayPropertyInPivotTable -> 1
       XlDisplayPropertyInTooltip -> 2
       XlDisplayPropertyInPivotTableAndTooltip -> 3
  
  toEnum v =
    case v of
       1 -> XlDisplayPropertyInPivotTable
       2 -> XlDisplayPropertyInTooltip
       3 -> XlDisplayPropertyInPivotTableAndTooltip
       _ -> error "unmarshallXlPropertyDisplayedIn: illegal enum value "
  
data XlConnectionType
 = XlConnectionTypeOLEDB
 | XlConnectionTypeODBC
 | XlConnectionTypeXMLMAP
 | XlConnectionTypeTEXT
 | XlConnectionTypeWEB
 
instance Enum (XlConnectionType) where
  fromEnum v =
    case v of
       XlConnectionTypeOLEDB -> 1
       XlConnectionTypeODBC -> 2
       XlConnectionTypeXMLMAP -> 3
       XlConnectionTypeTEXT -> 4
       XlConnectionTypeWEB -> 5
  
  toEnum v =
    case v of
       1 -> XlConnectionTypeOLEDB
       2 -> XlConnectionTypeODBC
       3 -> XlConnectionTypeXMLMAP
       4 -> XlConnectionTypeTEXT
       5 -> XlConnectionTypeWEB
       _ -> error "unmarshallXlConnectionType: illegal enum value "
  
data XlActionType
 = XlActionTypeUrl
 | XlActionTypeRowset
 | XlActionTypeReport
 | XlActionTypeDrillthrough
 
instance Enum (XlActionType) where
  fromEnum v =
    case v of
       XlActionTypeUrl -> 1
       XlActionTypeRowset -> 16
       XlActionTypeReport -> 128
       XlActionTypeDrillthrough -> 256
  
  toEnum v =
    case v of
       1 -> XlActionTypeUrl
       16 -> XlActionTypeRowset
       128 -> XlActionTypeReport
       256 -> XlActionTypeDrillthrough
       _ -> error "unmarshallXlActionType: illegal enum value "
  
data XlLayoutRowType
 = XlLayoutRowTypeList__ [XlLayoutRowType]
 | XlCompactRow
 | XlTabularRow
 | XlOutlineRow
 
instance Flags (XlLayoutRowType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlLayoutRowType) where
  fromEnum v =
    case v of
       (XlLayoutRowTypeList__ xs) -> orList (map fromEnum xs)
       XlCompactRow -> 0
       XlTabularRow -> 1
       XlOutlineRow -> 2
  
  toEnum v =
    case v of
       0 -> XlCompactRow
       1 -> XlTabularRow
       2 -> XlOutlineRow
       x -> XlLayoutRowTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlLayoutRowType: illegal enum value "
  
data XlMeasurementUnits
 = XlMeasurementUnitsList__ [XlMeasurementUnits]
 | XlInches
 | XlCentimeters
 | XlMillimeters
 
instance Flags (XlMeasurementUnits) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlMeasurementUnits) where
  fromEnum v =
    case v of
       (XlMeasurementUnitsList__ xs) -> orList (map fromEnum xs)
       XlInches -> 0
       XlCentimeters -> 1
       XlMillimeters -> 2
  
  toEnum v =
    case v of
       0 -> XlInches
       1 -> XlCentimeters
       2 -> XlMillimeters
       x -> XlMeasurementUnitsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlMeasurementUnits: illegal enum value "
  
data XlPivotFilterType
 = XlTopCount
 | XlBottomCount
 | XlTopPercent
 | XlBottomPercent
 | XlTopSum
 | XlBottomSum
 | XlValueEquals
 | XlValueDoesNotEqual
 | XlValueIsGreaterThan
 | XlValueIsGreaterThanOrEqualTo
 | XlValueIsLessThan
 | XlValueIsLessThanOrEqualTo
 | XlValueIsBetween
 | XlValueIsNotBetween
 | XlCaptionEquals
 | XlCaptionDoesNotEqual
 | XlCaptionBeginsWith
 | XlCaptionDoesNotBeginWith
 | XlCaptionEndsWith
 | XlCaptionDoesNotEndWith
 | XlCaptionContains
 | XlCaptionDoesNotContain
 | XlCaptionIsGreaterThan
 | XlCaptionIsGreaterThanOrEqualTo
 | XlCaptionIsLessThan
 | XlCaptionIsLessThanOrEqualTo
 | XlCaptionIsBetween
 | XlCaptionIsNotBetween
 | XlSpecificDate
 | XlNotSpecificDate
 | XlBefore
 | XlBeforeOrEqualTo
 | XlAfter
 | XlAfterOrEqualTo
 | XlDateBetween
 | XlDateNotBetween
 | XlDateTomorrow
 | XlDateToday
 | XlDateYesterday
 | XlDateNextWeek
 | XlDateThisWeek
 | XlDateLastWeek
 | XlDateNextMonth
 | XlDateThisMonth
 | XlDateLastMonth
 | XlDateNextQuarter
 | XlDateThisQuarter
 | XlDateLastQuarter
 | XlDateNextYear
 | XlDateThisYear
 | XlDateLastYear
 | XlYearToDate
 | XlAllDatesInPeriodQuarter1
 | XlAllDatesInPeriodQuarter2
 | XlAllDatesInPeriodQuarter3
 | XlAllDatesInPeriodQuarter4
 | XlAllDatesInPeriodJanuary
 | XlAllDatesInPeriodFebruary
 | XlAllDatesInPeriodMarch
 | XlAllDatesInPeriodApril
 | XlAllDatesInPeriodMay
 | XlAllDatesInPeriodJune
 | XlAllDatesInPeriodJuly
 | XlAllDatesInPeriodAugust
 | XlAllDatesInPeriodSeptember
 | XlAllDatesInPeriodOctober
 | XlAllDatesInPeriodNovember
 | XlAllDatesInPeriodDecember
 
instance Enum (XlPivotFilterType) where
  fromEnum v =
    case v of
       XlTopCount -> 1
       XlBottomCount -> 2
       XlTopPercent -> 3
       XlBottomPercent -> 4
       XlTopSum -> 5
       XlBottomSum -> 6
       XlValueEquals -> 7
       XlValueDoesNotEqual -> 8
       XlValueIsGreaterThan -> 9
       XlValueIsGreaterThanOrEqualTo -> 10
       XlValueIsLessThan -> 11
       XlValueIsLessThanOrEqualTo -> 12
       XlValueIsBetween -> 13
       XlValueIsNotBetween -> 14
       XlCaptionEquals -> 15
       XlCaptionDoesNotEqual -> 16
       XlCaptionBeginsWith -> 17
       XlCaptionDoesNotBeginWith -> 18
       XlCaptionEndsWith -> 19
       XlCaptionDoesNotEndWith -> 20
       XlCaptionContains -> 21
       XlCaptionDoesNotContain -> 22
       XlCaptionIsGreaterThan -> 23
       XlCaptionIsGreaterThanOrEqualTo -> 24
       XlCaptionIsLessThan -> 25
       XlCaptionIsLessThanOrEqualTo -> 26
       XlCaptionIsBetween -> 27
       XlCaptionIsNotBetween -> 28
       XlSpecificDate -> 29
       XlNotSpecificDate -> 30
       XlBefore -> 31
       XlBeforeOrEqualTo -> 32
       XlAfter -> 33
       XlAfterOrEqualTo -> 34
       XlDateBetween -> 35
       XlDateNotBetween -> 36
       XlDateTomorrow -> 37
       XlDateToday -> 38
       XlDateYesterday -> 39
       XlDateNextWeek -> 40
       XlDateThisWeek -> 41
       XlDateLastWeek -> 42
       XlDateNextMonth -> 43
       XlDateThisMonth -> 44
       XlDateLastMonth -> 45
       XlDateNextQuarter -> 46
       XlDateThisQuarter -> 47
       XlDateLastQuarter -> 48
       XlDateNextYear -> 49
       XlDateThisYear -> 50
       XlDateLastYear -> 51
       XlYearToDate -> 52
       XlAllDatesInPeriodQuarter1 -> 53
       XlAllDatesInPeriodQuarter2 -> 54
       XlAllDatesInPeriodQuarter3 -> 55
       XlAllDatesInPeriodQuarter4 -> 56
       XlAllDatesInPeriodJanuary -> 57
       XlAllDatesInPeriodFebruary -> 58
       XlAllDatesInPeriodMarch -> 59
       XlAllDatesInPeriodApril -> 60
       XlAllDatesInPeriodMay -> 61
       XlAllDatesInPeriodJune -> 62
       XlAllDatesInPeriodJuly -> 63
       XlAllDatesInPeriodAugust -> 64
       XlAllDatesInPeriodSeptember -> 65
       XlAllDatesInPeriodOctober -> 66
       XlAllDatesInPeriodNovember -> 67
       XlAllDatesInPeriodDecember -> 68
  
  toEnum v =
    case v of
       1 -> XlTopCount
       2 -> XlBottomCount
       3 -> XlTopPercent
       4 -> XlBottomPercent
       5 -> XlTopSum
       6 -> XlBottomSum
       7 -> XlValueEquals
       8 -> XlValueDoesNotEqual
       9 -> XlValueIsGreaterThan
       10 -> XlValueIsGreaterThanOrEqualTo
       11 -> XlValueIsLessThan
       12 -> XlValueIsLessThanOrEqualTo
       13 -> XlValueIsBetween
       14 -> XlValueIsNotBetween
       15 -> XlCaptionEquals
       16 -> XlCaptionDoesNotEqual
       17 -> XlCaptionBeginsWith
       18 -> XlCaptionDoesNotBeginWith
       19 -> XlCaptionEndsWith
       20 -> XlCaptionDoesNotEndWith
       21 -> XlCaptionContains
       22 -> XlCaptionDoesNotContain
       23 -> XlCaptionIsGreaterThan
       24 -> XlCaptionIsGreaterThanOrEqualTo
       25 -> XlCaptionIsLessThan
       26 -> XlCaptionIsLessThanOrEqualTo
       27 -> XlCaptionIsBetween
       28 -> XlCaptionIsNotBetween
       29 -> XlSpecificDate
       30 -> XlNotSpecificDate
       31 -> XlBefore
       32 -> XlBeforeOrEqualTo
       33 -> XlAfter
       34 -> XlAfterOrEqualTo
       35 -> XlDateBetween
       36 -> XlDateNotBetween
       37 -> XlDateTomorrow
       38 -> XlDateToday
       39 -> XlDateYesterday
       40 -> XlDateNextWeek
       41 -> XlDateThisWeek
       42 -> XlDateLastWeek
       43 -> XlDateNextMonth
       44 -> XlDateThisMonth
       45 -> XlDateLastMonth
       46 -> XlDateNextQuarter
       47 -> XlDateThisQuarter
       48 -> XlDateLastQuarter
       49 -> XlDateNextYear
       50 -> XlDateThisYear
       51 -> XlDateLastYear
       52 -> XlYearToDate
       53 -> XlAllDatesInPeriodQuarter1
       54 -> XlAllDatesInPeriodQuarter2
       55 -> XlAllDatesInPeriodQuarter3
       56 -> XlAllDatesInPeriodQuarter4
       57 -> XlAllDatesInPeriodJanuary
       58 -> XlAllDatesInPeriodFebruary
       59 -> XlAllDatesInPeriodMarch
       60 -> XlAllDatesInPeriodApril
       61 -> XlAllDatesInPeriodMay
       62 -> XlAllDatesInPeriodJune
       63 -> XlAllDatesInPeriodJuly
       64 -> XlAllDatesInPeriodAugust
       65 -> XlAllDatesInPeriodSeptember
       66 -> XlAllDatesInPeriodOctober
       67 -> XlAllDatesInPeriodNovember
       68 -> XlAllDatesInPeriodDecember
       _ -> error "unmarshallXlPivotFilterType: illegal enum value "
  
data XlCredentialsMethod
 = XlCredentialsMethodList__ [XlCredentialsMethod]
 | XlCredentialsMethodIntegrated
 | XlCredentialsMethodNone
 | XlCredentialsMethodStored
 
instance Flags (XlCredentialsMethod) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCredentialsMethod) where
  fromEnum v =
    case v of
       (XlCredentialsMethodList__ xs) -> orList (map fromEnum xs)
       XlCredentialsMethodIntegrated -> 0
       XlCredentialsMethodNone -> 1
       XlCredentialsMethodStored -> 2
  
  toEnum v =
    case v of
       0 -> XlCredentialsMethodIntegrated
       1 -> XlCredentialsMethodNone
       2 -> XlCredentialsMethodStored
       x -> XlCredentialsMethodList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCredentialsMethod: illegal enum value "
  
data XlCubeFieldSubType
 = XlCubeHierarchy
 | XlCubeMeasure
 | XlCubeSet
 | XlCubeAttribute
 | XlCubeCalculatedMeasure
 | XlCubeKPIValue
 | XlCubeKPIGoal
 | XlCubeKPIStatus
 | XlCubeKPITrend
 | XlCubeKPIWeight
 
instance Enum (XlCubeFieldSubType) where
  fromEnum v =
    case v of
       XlCubeHierarchy -> 1
       XlCubeMeasure -> 2
       XlCubeSet -> 3
       XlCubeAttribute -> 4
       XlCubeCalculatedMeasure -> 5
       XlCubeKPIValue -> 6
       XlCubeKPIGoal -> 7
       XlCubeKPIStatus -> 8
       XlCubeKPITrend -> 9
       XlCubeKPIWeight -> 10
  
  toEnum v =
    case v of
       1 -> XlCubeHierarchy
       2 -> XlCubeMeasure
       3 -> XlCubeSet
       4 -> XlCubeAttribute
       5 -> XlCubeCalculatedMeasure
       6 -> XlCubeKPIValue
       7 -> XlCubeKPIGoal
       8 -> XlCubeKPIStatus
       9 -> XlCubeKPITrend
       10 -> XlCubeKPIWeight
       _ -> error "unmarshallXlCubeFieldSubType: illegal enum value "
  
data XlSortOn
 = XlSortOnValues
 | XlSortOnCellColor
 | XlSortOnFontColor
 | XlSortOnIcon
 deriving (Enum)
data XlDynamicFilterCriteria
 = XlFilterToday
 | XlFilterYesterday
 | XlFilterTomorrow
 | XlFilterThisWeek
 | XlFilterLastWeek
 | XlFilterNextWeek
 | XlFilterThisMonth
 | XlFilterLastMonth
 | XlFilterNextMonth
 | XlFilterThisQuarter
 | XlFilterLastQuarter
 | XlFilterNextQuarter
 | XlFilterThisYear
 | XlFilterLastYear
 | XlFilterNextYear
 | XlFilterYearToDate
 | XlFilterAllDatesInPeriodQuarter1
 | XlFilterAllDatesInPeriodQuarter2
 | XlFilterAllDatesInPeriodQuarter3
 | XlFilterAllDatesInPeriodQuarter4
 | XlFilterAllDatesInPeriodJanuary
 | XlFilterAllDatesInPeriodFebruray
 | XlFilterAllDatesInPeriodMarch
 | XlFilterAllDatesInPeriodApril
 | XlFilterAllDatesInPeriodMay
 | XlFilterAllDatesInPeriodJune
 | XlFilterAllDatesInPeriodJuly
 | XlFilterAllDatesInPeriodAugust
 | XlFilterAllDatesInPeriodSeptember
 | XlFilterAllDatesInPeriodOctober
 | XlFilterAllDatesInPeriodNovember
 | XlFilterAllDatesInPeriodDecember
 | XlFilterAboveAverage
 | XlFilterBelowAverage
 
instance Enum (XlDynamicFilterCriteria) where
  fromEnum v =
    case v of
       XlFilterToday -> 1
       XlFilterYesterday -> 2
       XlFilterTomorrow -> 3
       XlFilterThisWeek -> 4
       XlFilterLastWeek -> 5
       XlFilterNextWeek -> 6
       XlFilterThisMonth -> 7
       XlFilterLastMonth -> 8
       XlFilterNextMonth -> 9
       XlFilterThisQuarter -> 10
       XlFilterLastQuarter -> 11
       XlFilterNextQuarter -> 12
       XlFilterThisYear -> 13
       XlFilterLastYear -> 14
       XlFilterNextYear -> 15
       XlFilterYearToDate -> 16
       XlFilterAllDatesInPeriodQuarter1 -> 17
       XlFilterAllDatesInPeriodQuarter2 -> 18
       XlFilterAllDatesInPeriodQuarter3 -> 19
       XlFilterAllDatesInPeriodQuarter4 -> 20
       XlFilterAllDatesInPeriodJanuary -> 21
       XlFilterAllDatesInPeriodFebruray -> 22
       XlFilterAllDatesInPeriodMarch -> 23
       XlFilterAllDatesInPeriodApril -> 24
       XlFilterAllDatesInPeriodMay -> 25
       XlFilterAllDatesInPeriodJune -> 26
       XlFilterAllDatesInPeriodJuly -> 27
       XlFilterAllDatesInPeriodAugust -> 28
       XlFilterAllDatesInPeriodSeptember -> 29
       XlFilterAllDatesInPeriodOctober -> 30
       XlFilterAllDatesInPeriodNovember -> 31
       XlFilterAllDatesInPeriodDecember -> 32
       XlFilterAboveAverage -> 33
       XlFilterBelowAverage -> 34
  
  toEnum v =
    case v of
       1 -> XlFilterToday
       2 -> XlFilterYesterday
       3 -> XlFilterTomorrow
       4 -> XlFilterThisWeek
       5 -> XlFilterLastWeek
       6 -> XlFilterNextWeek
       7 -> XlFilterThisMonth
       8 -> XlFilterLastMonth
       9 -> XlFilterNextMonth
       10 -> XlFilterThisQuarter
       11 -> XlFilterLastQuarter
       12 -> XlFilterNextQuarter
       13 -> XlFilterThisYear
       14 -> XlFilterLastYear
       15 -> XlFilterNextYear
       16 -> XlFilterYearToDate
       17 -> XlFilterAllDatesInPeriodQuarter1
       18 -> XlFilterAllDatesInPeriodQuarter2
       19 -> XlFilterAllDatesInPeriodQuarter3
       20 -> XlFilterAllDatesInPeriodQuarter4
       21 -> XlFilterAllDatesInPeriodJanuary
       22 -> XlFilterAllDatesInPeriodFebruray
       23 -> XlFilterAllDatesInPeriodMarch
       24 -> XlFilterAllDatesInPeriodApril
       25 -> XlFilterAllDatesInPeriodMay
       26 -> XlFilterAllDatesInPeriodJune
       27 -> XlFilterAllDatesInPeriodJuly
       28 -> XlFilterAllDatesInPeriodAugust
       29 -> XlFilterAllDatesInPeriodSeptember
       30 -> XlFilterAllDatesInPeriodOctober
       31 -> XlFilterAllDatesInPeriodNovember
       32 -> XlFilterAllDatesInPeriodDecember
       33 -> XlFilterAboveAverage
       34 -> XlFilterBelowAverage
       _ -> error "unmarshallXlDynamicFilterCriteria: illegal enum value "
  
data XlFilterAllDatesInPeriod
 = XlFilterAllDatesInPeriodYear
 | XlFilterAllDatesInPeriodMonth
 | XlFilterAllDatesInPeriodDay
 | XlFilterAllDatesInPeriodHour
 | XlFilterAllDatesInPeriodMinute
 | XlFilterAllDatesInPeriodSecond
 deriving (Enum)
data XlTableStyleElementType
 = XlWholeTable
 | XlHeaderRow
 | XlTotalRow
 | XlGrandTotalRow
 | XlFirstColumn
 | XlLastColumn
 | XlGrandTotalColumn
 | XlRowStripe1
 | XlRowStripe2
 | XlColumnStripe1
 | XlColumnStripe2
 | XlFirstHeaderCell
 | XlLastHeaderCell
 | XlFirstTotalCell
 | XlLastTotalCell
 | XlSubtotalColumn1
 | XlSubtotalColumn2
 | XlSubtotalColumn3
 | XlSubtotalRow1
 | XlSubtotalRow2
 | XlSubtotalRow3
 | XlBlankRow
 | XlColumnSubheading1
 | XlColumnSubheading2
 | XlColumnSubheading3
 | XlRowSubheading1
 | XlRowSubheading2
 | XlRowSubheading3
 | XlPageFieldLabels
 | XlPageFieldValues
 
instance Enum (XlTableStyleElementType) where
  fromEnum v =
    case v of
       XlWholeTable -> 0
       XlHeaderRow -> 1
       XlTotalRow -> 2
       XlGrandTotalRow -> 2
       XlFirstColumn -> 3
       XlLastColumn -> 4
       XlGrandTotalColumn -> 4
       XlRowStripe1 -> 5
       XlRowStripe2 -> 6
       XlColumnStripe1 -> 7
       XlColumnStripe2 -> 8
       XlFirstHeaderCell -> 9
       XlLastHeaderCell -> 10
       XlFirstTotalCell -> 11
       XlLastTotalCell -> 12
       XlSubtotalColumn1 -> 13
       XlSubtotalColumn2 -> 14
       XlSubtotalColumn3 -> 15
       XlSubtotalRow1 -> 16
       XlSubtotalRow2 -> 17
       XlSubtotalRow3 -> 18
       XlBlankRow -> 19
       XlColumnSubheading1 -> 20
       XlColumnSubheading2 -> 21
       XlColumnSubheading3 -> 22
       XlRowSubheading1 -> 23
       XlRowSubheading2 -> 24
       XlRowSubheading3 -> 25
       XlPageFieldLabels -> 26
       XlPageFieldValues -> 27
  
  toEnum v =
    case v of
       0 -> XlWholeTable
       1 -> XlHeaderRow
       2 -> XlTotalRow
       2 -> XlGrandTotalRow
       3 -> XlFirstColumn
       4 -> XlLastColumn
       4 -> XlGrandTotalColumn
       5 -> XlRowStripe1
       6 -> XlRowStripe2
       7 -> XlColumnStripe1
       8 -> XlColumnStripe2
       9 -> XlFirstHeaderCell
       10 -> XlLastHeaderCell
       11 -> XlFirstTotalCell
       12 -> XlLastTotalCell
       13 -> XlSubtotalColumn1
       14 -> XlSubtotalColumn2
       15 -> XlSubtotalColumn3
       16 -> XlSubtotalRow1
       17 -> XlSubtotalRow2
       18 -> XlSubtotalRow3
       19 -> XlBlankRow
       20 -> XlColumnSubheading1
       21 -> XlColumnSubheading2
       22 -> XlColumnSubheading3
       23 -> XlRowSubheading1
       24 -> XlRowSubheading2
       25 -> XlRowSubheading3
       26 -> XlPageFieldLabels
       27 -> XlPageFieldValues
       _ -> error "unmarshallXlTableStyleElementType: illegal enum value "
  
data XlPivotConditionScope
 = XlPivotConditionScopeList__ [XlPivotConditionScope]
 | XlSelectionScope
 | XlFieldsScope
 | XlDataFieldScope
 
instance Flags (XlPivotConditionScope) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlPivotConditionScope) where
  fromEnum v =
    case v of
       (XlPivotConditionScopeList__ xs) -> orList (map fromEnum xs)
       XlSelectionScope -> 0
       XlFieldsScope -> 1
       XlDataFieldScope -> 2
  
  toEnum v =
    case v of
       0 -> XlSelectionScope
       1 -> XlFieldsScope
       2 -> XlDataFieldScope
       x -> XlPivotConditionScopeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlPivotConditionScope: illegal enum value "
  
data XlCalcFor
 = XlCalcForList__ [XlCalcFor]
 | XlAllValues
 | XlRowGroups
 | XlColGroups
 
instance Flags (XlCalcFor) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlCalcFor) where
  fromEnum v =
    case v of
       (XlCalcForList__ xs) -> orList (map fromEnum xs)
       XlAllValues -> 0
       XlRowGroups -> 1
       XlColGroups -> 2
  
  toEnum v =
    case v of
       0 -> XlAllValues
       1 -> XlRowGroups
       2 -> XlColGroups
       x -> XlCalcForList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                  then Just (toEnum (fromIntegral val))
                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlCalcFor: illegal enum value "
  
data XlThemeColor
 = XlThemeColorDark1
 | XlThemeColorLight1
 | XlThemeColorDark2
 | XlThemeColorLight2
 | XlThemeColorAccent1
 | XlThemeColorAccent2
 | XlThemeColorAccent3
 | XlThemeColorAccent4
 | XlThemeColorAccent5
 | XlThemeColorAccent6
 | XlThemeColorHyperlink
 | XlThemeColorFollowedHyperlink
 
instance Enum (XlThemeColor) where
  fromEnum v =
    case v of
       XlThemeColorDark1 -> 1
       XlThemeColorLight1 -> 2
       XlThemeColorDark2 -> 3
       XlThemeColorLight2 -> 4
       XlThemeColorAccent1 -> 5
       XlThemeColorAccent2 -> 6
       XlThemeColorAccent3 -> 7
       XlThemeColorAccent4 -> 8
       XlThemeColorAccent5 -> 9
       XlThemeColorAccent6 -> 10
       XlThemeColorHyperlink -> 11
       XlThemeColorFollowedHyperlink -> 12
  
  toEnum v =
    case v of
       1 -> XlThemeColorDark1
       2 -> XlThemeColorLight1
       3 -> XlThemeColorDark2
       4 -> XlThemeColorLight2
       5 -> XlThemeColorAccent1
       6 -> XlThemeColorAccent2
       7 -> XlThemeColorAccent3
       8 -> XlThemeColorAccent4
       9 -> XlThemeColorAccent5
       10 -> XlThemeColorAccent6
       11 -> XlThemeColorHyperlink
       12 -> XlThemeColorFollowedHyperlink
       _ -> error "unmarshallXlThemeColor: illegal enum value "
  
data XlFixedFormatType
 = XlFixedFormatTypeList__ [XlFixedFormatType]
 | XlTypePDF
 | XlTypeXPS
 
instance Flags (XlFixedFormatType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlFixedFormatType) where
  fromEnum v =
    case v of
       (XlFixedFormatTypeList__ xs) -> orList (map fromEnum xs)
       XlTypePDF -> 0
       XlTypeXPS -> 1
  
  toEnum v =
    case v of
       0 -> XlTypePDF
       1 -> XlTypeXPS
       x -> XlFixedFormatTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlFixedFormatType: illegal enum value "
  
data XlFixedFormatQuality
 = XlFixedFormatQualityList__ [XlFixedFormatQuality]
 | XlQualityStandard
 | XlQualityMinimum
 
instance Flags (XlFixedFormatQuality) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlFixedFormatQuality) where
  fromEnum v =
    case v of
       (XlFixedFormatQualityList__ xs) -> orList (map fromEnum xs)
       XlQualityStandard -> 0
       XlQualityMinimum -> 1
  
  toEnum v =
    case v of
       0 -> XlQualityStandard
       1 -> XlQualityMinimum
       x -> XlFixedFormatQualityList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlFixedFormatQuality: illegal enum value "
  
data XlChartElementPosition
 = XlChartElementPositionCustom
 | XlChartElementPositionAutomatic
 
instance Enum (XlChartElementPosition) where
  fromEnum v =
    case v of
       XlChartElementPositionCustom -> (-4114)
       XlChartElementPositionAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4114) -> XlChartElementPositionCustom
       (-4105) -> XlChartElementPositionAutomatic
       _ -> error "unmarshallXlChartElementPosition: illegal enum value "
  
data XlGenerateTableRefs
 = XlGenerateTableRefsList__ [XlGenerateTableRefs]
 | XlGenerateTableRefA1
 | XlGenerateTableRefStruct
 
instance Flags (XlGenerateTableRefs) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlGenerateTableRefs) where
  fromEnum v =
    case v of
       (XlGenerateTableRefsList__ xs) -> orList (map fromEnum xs)
       XlGenerateTableRefA1 -> 0
       XlGenerateTableRefStruct -> 1
  
  toEnum v =
    case v of
       0 -> XlGenerateTableRefA1
       1 -> XlGenerateTableRefStruct
       x -> XlGenerateTableRefsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlGenerateTableRefs: illegal enum value "
  
data XlGradientFillType
 = XlGradientFillTypeList__ [XlGradientFillType]
 | XlGradientFillLinear
 | XlGradientFillPath
 
instance Flags (XlGradientFillType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlGradientFillType) where
  fromEnum v =
    case v of
       (XlGradientFillTypeList__ xs) -> orList (map fromEnum xs)
       XlGradientFillLinear -> 0
       XlGradientFillPath -> 1
  
  toEnum v =
    case v of
       0 -> XlGradientFillLinear
       1 -> XlGradientFillPath
       x -> XlGradientFillTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlGradientFillType: illegal enum value "
  
data XlThreadMode
 = XlThreadModeList__ [XlThreadMode]
 | XlThreadModeAutomatic
 | XlThreadModeManual
 
instance Flags (XlThreadMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlThreadMode) where
  fromEnum v =
    case v of
       (XlThreadModeList__ xs) -> orList (map fromEnum xs)
       XlThreadModeAutomatic -> 0
       XlThreadModeManual -> 1
  
  toEnum v =
    case v of
       0 -> XlThreadModeAutomatic
       1 -> XlThreadModeManual
       x -> XlThreadModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallXlThreadMode: illegal enum value "
  
-- --------------------------------------------------
-- 
-- interface IFont
-- 
-- --------------------------------------------------
data IFont_ a = IFont__ 
type IFont a = IDispatch (IFont_ a)
iidIFont :: IID (IFont ())
iidIFont = mkIID "{0002084D-0001-0000-C000-000000000046}"

getApplication :: (Variant a1)
               => IFont a0
               -> IO a1
getApplication =
  propertyGet "Application"
              []
              outVariant

getCreator :: IFont a0
           -> IO XlCreator
getCreator =
  propertyGet "Creator"
              []
              outEnum

getParent14 :: IFont a0
            -> IO (IDispatch ())
getParent14 =
  propertyGet "Parent"
              []
              outIDispatch

getBackground :: (Variant a1)
              => IFont a0
              -> IO a1
getBackground =
  propertyGet "Background"
              []
              outVariant

setBackground :: a1
              -> IFont a0
              -> IO ()
setBackground rHS =
  propertySet "Background"
              [inVariant rHS]

getBold :: (Variant a1)
        => IFont a0
        -> IO a1
getBold =
  propertyGet "Bold"
              []
              outVariant

setBold :: a1
        -> IFont a0
        -> IO ()
setBold rHS =
  propertySet "Bold"
              [inVariant rHS]

getColor :: (Variant a1)
         => IFont a0
         -> IO a1
getColor =
  propertyGet "Color"
              []
              outVariant

setColor :: a1
         -> IFont a0
         -> IO ()
setColor rHS =
  propertySet "Color"
              [inVariant rHS]

getColorIndex :: (Variant a1)
              => IFont a0
              -> IO a1
getColorIndex =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex :: a1
              -> IFont a0
              -> IO ()
setColorIndex rHS =
  propertySet "ColorIndex"
              [inVariant rHS]

getFontStyle :: (Variant a1)
             => IFont a0
             -> IO a1
getFontStyle =
  propertyGet "FontStyle"
              []
              outVariant

setFontStyle :: a1
             -> IFont a0
             -> IO ()
setFontStyle rHS =
  propertySet "FontStyle"
              [inVariant rHS]

getItalic :: (Variant a1)
          => IFont a0
          -> IO a1
getItalic =
  propertyGet "Italic"
              []
              outVariant

setItalic :: a1
          -> IFont a0
          -> IO ()
setItalic rHS =
  propertySet "Italic"
              [inVariant rHS]

getName :: (Variant a1)
        => IFont a0
        -> IO a1
getName =
  propertyGet "Name"
              []
              outVariant

setName :: a1
        -> IFont a0
        -> IO ()
setName rHS =
  propertySet "Name"
              [inVariant rHS]

getOutlineFont :: (Variant a1)
               => IFont a0
               -> IO a1
getOutlineFont =
  propertyGet "OutlineFont"
              []
              outVariant

setOutlineFont :: a1
               -> IFont a0
               -> IO ()
setOutlineFont rHS =
  propertySet "OutlineFont"
              [inVariant rHS]

getShadow :: (Variant a1)
          => IFont a0
          -> IO a1
getShadow =
  propertyGet "Shadow"
              []
              outVariant

setShadow :: a1
          -> IFont a0
          -> IO ()
setShadow rHS =
  propertySet "Shadow"
              [inVariant rHS]

getSize0 :: (Variant a1)
         => IFont a0
         -> IO a1
getSize0 =
  propertyGet "Size"
              []
              outVariant

setSize0 :: a1
         -> IFont a0
         -> IO ()
setSize0 rHS =
  propertySet "Size"
              [inVariant rHS]

getStrikethrough :: (Variant a1)
                 => IFont a0
                 -> IO a1
getStrikethrough =
  propertyGet "Strikethrough"
              []
              outVariant

setStrikethrough :: a1
                 -> IFont a0
                 -> IO ()
setStrikethrough rHS =
  propertySet "Strikethrough"
              [inVariant rHS]

getSubscript :: (Variant a1)
             => IFont a0
             -> IO a1
getSubscript =
  propertyGet "Subscript"
              []
              outVariant

setSubscript :: a1
             -> IFont a0
             -> IO ()
setSubscript rHS =
  propertySet "Subscript"
              [inVariant rHS]

getSuperscript :: (Variant a1)
               => IFont a0
               -> IO a1
getSuperscript =
  propertyGet "Superscript"
              []
              outVariant

setSuperscript :: a1
               -> IFont a0
               -> IO ()
setSuperscript rHS =
  propertySet "Superscript"
              [inVariant rHS]

getUnderline :: (Variant a1)
             => IFont a0
             -> IO a1
getUnderline =
  propertyGet "Underline"
              []
              outVariant

setUnderline :: a1
             -> IFont a0
             -> IO ()
setUnderline rHS =
  propertySet "Underline"
              [inVariant rHS]

getThemeColor :: (Variant a1)
              => IFont a0
              -> IO a1
getThemeColor =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor :: a1
              -> IFont a0
              -> IO ()
setThemeColor rHS =
  propertySet "ThemeColor"
              [inVariant rHS]

getTintAndShade0 :: (Variant a1)
                 => IFont a0
                 -> IO a1
getTintAndShade0 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade0 :: a1
                 -> IFont a0
                 -> IO ()
setTintAndShade0 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

getThemeFont :: IFont a0
             -> IO XlThemeFont
getThemeFont =
  propertyGet "ThemeFont"
              []
              outEnum

setThemeFont :: XlThemeFont
             -> IFont a0
             -> IO ()
setThemeFont rHS =
  propertySet "ThemeFont"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface IWindow
-- 
-- --------------------------------------------------
data IWindow_ a = IWindow__ 
type IWindow a = IDispatch (IWindow_ a)
iidIWindow :: IID (IWindow ())
iidIWindow = mkIID "{00020893-0001-0000-C000-000000000046}"

getApplication0 :: (Variant a1)
                => IWindow a0
                -> IO a1
getApplication0 =
  propertyGet "Application"
              []
              outVariant

getCreator0 :: IWindow a0
            -> IO XlCreator
getCreator0 =
  propertyGet "Creator"
              []
              outEnum

getParent15 :: IWindow a0
            -> IO (IDispatch ())
getParent15 =
  propertyGet "Parent"
              []
              outIDispatch

activate :: (Variant a1)
         => IWindow a0
         -> IO a1
activate =
  function1 "Activate"
            []
            outVariant

activateNext :: (Variant a1)
             => IWindow a0
             -> IO a1
activateNext =
  function1 "ActivateNext"
            []
            outVariant

activatePrevious :: (Variant a1)
                 => IWindow a0
                 -> IO a1
activatePrevious =
  function1 "ActivatePrevious"
            []
            outVariant

getActiveCell :: IWindow a0
              -> IO (Range ())
getActiveCell =
  propertyGet "ActiveCell"
              []
              outIUnknown

getActiveChart :: (Variant a1)
               => IWindow a0
               -> IO a1
getActiveChart =
  propertyGet "ActiveChart"
              []
              outVariant

getActivePane :: IWindow a0
              -> IO (Pane ())
getActivePane =
  propertyGet "ActivePane"
              []
              outIUnknown

getActiveSheet :: IWindow a0
               -> IO (IDispatch ())
getActiveSheet =
  propertyGet "ActiveSheet"
              []
              outIDispatch

getCaption :: (Variant a1)
           => IWindow a0
           -> IO a1
getCaption =
  propertyGet "Caption"
              []
              outVariant

setCaption :: a1
           -> IWindow a0
           -> IO ()
setCaption rHS =
  propertySet "Caption"
              [inVariant rHS]

close :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> IWindow a0
      -> IO Bool
close saveChanges filename routeWorkbook =
  function1 "Close"
            [ inVariant saveChanges
            , inVariant filename
            , inVariant routeWorkbook
            ]
            outBool

getDisplayFormulas :: IWindow a0
                   -> IO Bool
getDisplayFormulas =
  propertyGet "DisplayFormulas"
              []
              outBool

setDisplayFormulas :: Bool
                   -> IWindow a0
                   -> IO ()
setDisplayFormulas rHS =
  propertySet "DisplayFormulas"
              [inBool rHS]

getDisplayGridlines :: IWindow a0
                    -> IO Bool
getDisplayGridlines =
  propertyGet "DisplayGridlines"
              []
              outBool

setDisplayGridlines :: Bool
                    -> IWindow a0
                    -> IO ()
setDisplayGridlines rHS =
  propertySet "DisplayGridlines"
              [inBool rHS]

getDisplayHeadings :: IWindow a0
                   -> IO Bool
getDisplayHeadings =
  propertyGet "DisplayHeadings"
              []
              outBool

setDisplayHeadings :: Bool
                   -> IWindow a0
                   -> IO ()
setDisplayHeadings rHS =
  propertySet "DisplayHeadings"
              [inBool rHS]

getDisplayHorizontalScrollBar :: IWindow a0
                              -> IO Bool
getDisplayHorizontalScrollBar =
  propertyGet "DisplayHorizontalScrollBar"
              []
              outBool

setDisplayHorizontalScrollBar :: Bool
                              -> IWindow a0
                              -> IO ()
setDisplayHorizontalScrollBar rHS =
  propertySet "DisplayHorizontalScrollBar"
              [inBool rHS]

getDisplayOutline :: IWindow a0
                  -> IO Bool
getDisplayOutline =
  propertyGet "DisplayOutline"
              []
              outBool

setDisplayOutline :: Bool
                  -> IWindow a0
                  -> IO ()
setDisplayOutline rHS =
  propertySet "DisplayOutline"
              [inBool rHS]

getDisplayRightToLeft :: IWindow a0
                      -> IO Bool
getDisplayRightToLeft =
  propertyGet "_DisplayRightToLeft"
              []
              outBool

setDisplayRightToLeft :: Bool
                      -> IWindow a0
                      -> IO ()
setDisplayRightToLeft rHS =
  propertySet "_DisplayRightToLeft"
              [inBool rHS]

getDisplayVerticalScrollBar :: IWindow a0
                            -> IO Bool
getDisplayVerticalScrollBar =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar :: Bool
                            -> IWindow a0
                            -> IO ()
setDisplayVerticalScrollBar rHS =
  propertySet "DisplayVerticalScrollBar"
              [inBool rHS]

getDisplayWorkbookTabs :: IWindow a0
                       -> IO Bool
getDisplayWorkbookTabs =
  propertyGet "DisplayWorkbookTabs"
              []
              outBool

setDisplayWorkbookTabs :: Bool
                       -> IWindow a0
                       -> IO ()
setDisplayWorkbookTabs rHS =
  propertySet "DisplayWorkbookTabs"
              [inBool rHS]

getDisplayZeros :: IWindow a0
                -> IO Bool
getDisplayZeros =
  propertyGet "DisplayZeros"
              []
              outBool

setDisplayZeros :: Bool
                -> IWindow a0
                -> IO ()
setDisplayZeros rHS =
  propertySet "DisplayZeros"
              [inBool rHS]

getEnableResize :: IWindow a0
                -> IO Bool
getEnableResize =
  propertyGet "EnableResize"
              []
              outBool

setEnableResize :: Bool
                -> IWindow a0
                -> IO ()
setEnableResize rHS =
  propertySet "EnableResize"
              [inBool rHS]

getFreezePanes :: IWindow a0
               -> IO Bool
getFreezePanes =
  propertyGet "FreezePanes"
              []
              outBool

setFreezePanes :: Bool
               -> IWindow a0
               -> IO ()
setFreezePanes rHS =
  propertySet "FreezePanes"
              [inBool rHS]

getGridlineColor :: IWindow a0
                 -> IO Int32
getGridlineColor =
  propertyGet "GridlineColor"
              []
              outInt32

setGridlineColor :: Int32
                 -> IWindow a0
                 -> IO ()
setGridlineColor rHS =
  propertySet "GridlineColor"
              [inInt32 rHS]

getGridlineColorIndex :: IWindow a0
                      -> IO XlColorIndex
getGridlineColorIndex =
  propertyGet "GridlineColorIndex"
              []
              outEnum

setGridlineColorIndex :: XlColorIndex
                      -> IWindow a0
                      -> IO ()
setGridlineColorIndex rHS =
  propertySet "GridlineColorIndex"
              [inEnum rHS]

getHeight :: IWindow a0
          -> IO Double
getHeight =
  propertyGet "Height"
              []
              outDouble

setHeight :: Double
          -> IWindow a0
          -> IO ()
setHeight rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex :: IWindow a0
         -> IO Int32
getIndex =
  propertyGet "Index"
              []
              outInt32

largeScroll :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
            => a2
            -> a3
            -> a4
            -> a5
            -> IWindow a0
            -> IO a1
largeScroll down up toRight toLeft =
  function1 "LargeScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getLeft :: IWindow a0
        -> IO Double
getLeft =
  propertyGet "Left"
              []
              outDouble

setLeft :: Double
        -> IWindow a0
        -> IO ()
setLeft rHS =
  propertySet "Left"
              [inDouble rHS]

newWindow :: IWindow a0
          -> IO (Window ())
newWindow =
  function1 "NewWindow"
            []
            outIUnknown

getOnWindow :: IWindow a0
            -> IO String
getOnWindow =
  propertyGet "OnWindow"
              []
              outString

setOnWindow :: String
            -> IWindow a0
            -> IO ()
setOnWindow rHS =
  propertySet "OnWindow"
              [inString rHS]

getPanes :: IWindow a0
         -> IO (Panes ())
getPanes =
  propertyGet "Panes"
              []
              outIUnknown

printOut :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
         => a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> IWindow a0
         -> IO a1
printOut from to copies preview activePrinter printToFile collate prToFileName =
  function1 "_PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

printPreview :: (Variant a1, Variant a2)
             => a2
             -> IWindow a0
             -> IO a1
printPreview enableChanges =
  function1 "PrintPreview"
            [inVariant enableChanges]
            outVariant

getRangeSelection :: IWindow a0
                  -> IO (Range ())
getRangeSelection =
  propertyGet "RangeSelection"
              []
              outIUnknown

getScrollColumn :: IWindow a0
                -> IO Int32
getScrollColumn =
  propertyGet "ScrollColumn"
              []
              outInt32

setScrollColumn :: Int32
                -> IWindow a0
                -> IO ()
setScrollColumn rHS =
  propertySet "ScrollColumn"
              [inInt32 rHS]

getScrollRow :: IWindow a0
             -> IO Int32
getScrollRow =
  propertyGet "ScrollRow"
              []
              outInt32

setScrollRow :: Int32
             -> IWindow a0
             -> IO ()
setScrollRow rHS =
  propertySet "ScrollRow"
              [inInt32 rHS]

scrollWorkbookTabs :: (Variant a1, Variant a2, Variant a3)
                   => a2
                   -> a3
                   -> IWindow a0
                   -> IO a1
scrollWorkbookTabs sheets position =
  function1 "ScrollWorkbookTabs"
            [ inVariant sheets
            , inVariant position
            ]
            outVariant

getSelectedSheets :: IWindow a0
                  -> IO (Sheets ())
getSelectedSheets =
  propertyGet "SelectedSheets"
              []
              outIUnknown

getSelection :: IWindow a0
             -> IO (IDispatch ())
getSelection =
  propertyGet "Selection"
              []
              outIDispatch

smallScroll :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
            => a2
            -> a3
            -> a4
            -> a5
            -> IWindow a0
            -> IO a1
smallScroll down up toRight toLeft =
  function1 "SmallScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getSplit :: IWindow a0
         -> IO Bool
getSplit =
  propertyGet "Split"
              []
              outBool

setSplit :: Bool
         -> IWindow a0
         -> IO ()
setSplit rHS =
  propertySet "Split"
              [inBool rHS]

getSplitColumn :: IWindow a0
               -> IO Int32
getSplitColumn =
  propertyGet "SplitColumn"
              []
              outInt32

setSplitColumn :: Int32
               -> IWindow a0
               -> IO ()
setSplitColumn rHS =
  propertySet "SplitColumn"
              [inInt32 rHS]

getSplitHorizontal :: IWindow a0
                   -> IO Double
getSplitHorizontal =
  propertyGet "SplitHorizontal"
              []
              outDouble

setSplitHorizontal :: Double
                   -> IWindow a0
                   -> IO ()
setSplitHorizontal rHS =
  propertySet "SplitHorizontal"
              [inDouble rHS]

getSplitRow :: IWindow a0
            -> IO Int32
getSplitRow =
  propertyGet "SplitRow"
              []
              outInt32

setSplitRow :: Int32
            -> IWindow a0
            -> IO ()
setSplitRow rHS =
  propertySet "SplitRow"
              [inInt32 rHS]

getSplitVertical :: IWindow a0
                 -> IO Double
getSplitVertical =
  propertyGet "SplitVertical"
              []
              outDouble

setSplitVertical :: Double
                 -> IWindow a0
                 -> IO ()
setSplitVertical rHS =
  propertySet "SplitVertical"
              [inDouble rHS]

getTabRatio :: IWindow a0
            -> IO Double
getTabRatio =
  propertyGet "TabRatio"
              []
              outDouble

setTabRatio :: Double
            -> IWindow a0
            -> IO ()
setTabRatio rHS =
  propertySet "TabRatio"
              [inDouble rHS]

getTop :: IWindow a0
       -> IO Double
getTop =
  propertyGet "Top"
              []
              outDouble

setTop :: Double
       -> IWindow a0
       -> IO ()
setTop rHS =
  propertySet "Top"
              [inDouble rHS]

getType3 :: IWindow a0
         -> IO XlWindowType
getType3 =
  propertyGet "Type"
              []
              outEnum

getUsableHeight :: IWindow a0
                -> IO Double
getUsableHeight =
  propertyGet "UsableHeight"
              []
              outDouble

getUsableWidth :: IWindow a0
               -> IO Double
getUsableWidth =
  propertyGet "UsableWidth"
              []
              outDouble

getVisible3 :: IWindow a0
            -> IO Bool
getVisible3 =
  propertyGet "Visible"
              []
              outBool

setVisible3 :: Bool
            -> IWindow a0
            -> IO ()
setVisible3 rHS =
  propertySet "Visible"
              [inBool rHS]

getVisibleRange :: IWindow a0
                -> IO (Range ())
getVisibleRange =
  propertyGet "VisibleRange"
              []
              outIUnknown

getWidth :: IWindow a0
         -> IO Double
getWidth =
  propertyGet "Width"
              []
              outDouble

setWidth :: Double
         -> IWindow a0
         -> IO ()
setWidth rHS =
  propertySet "Width"
              [inDouble rHS]

getWindowNumber :: IWindow a0
                -> IO Int32
getWindowNumber =
  propertyGet "WindowNumber"
              []
              outInt32

getWindowState :: IWindow a0
               -> IO XlWindowState
getWindowState =
  propertyGet "WindowState"
              []
              outEnum

setWindowState :: XlWindowState
               -> IWindow a0
               -> IO ()
setWindowState rHS =
  propertySet "WindowState"
              [inEnum rHS]

getZoom :: (Variant a1)
        => IWindow a0
        -> IO a1
getZoom =
  propertyGet "Zoom"
              []
              outVariant

setZoom :: a1
        -> IWindow a0
        -> IO ()
setZoom rHS =
  propertySet "Zoom"
              [inVariant rHS]

getView :: IWindow a0
        -> IO XlWindowView
getView =
  propertyGet "View"
              []
              outEnum

setView :: XlWindowView
        -> IWindow a0
        -> IO ()
setView rHS =
  propertySet "View"
              [inEnum rHS]

getDisplayRightToLeft0 :: IWindow a0
                       -> IO Bool
getDisplayRightToLeft0 =
  propertyGet "DisplayRightToLeft"
              []
              outBool

setDisplayRightToLeft0 :: Bool
                       -> IWindow a0
                       -> IO ()
setDisplayRightToLeft0 rHS =
  propertySet "DisplayRightToLeft"
              [inBool rHS]

pointsToScreenPixelsX :: Int32
                      -> IWindow a0
                      -> IO Int32
pointsToScreenPixelsX points =
  function1 "PointsToScreenPixelsX"
            [inInt32 points]
            outInt32

pointsToScreenPixelsY :: Int32
                      -> IWindow a0
                      -> IO Int32
pointsToScreenPixelsY points =
  function1 "PointsToScreenPixelsY"
            [inInt32 points]
            outInt32

rangeFromPoint :: Int32
               -> Int32
               -> IWindow a0
               -> IO (IDispatch ())
rangeFromPoint x y =
  function1 "RangeFromPoint"
            [ inInt32 x
            , inInt32 y
            ]
            outIDispatch

scrollIntoView :: (Variant a1)
               => Int32
               -> Int32
               -> Int32
               -> Int32
               -> a1
               -> IWindow a0
               -> IO ()
scrollIntoView left top width height start =
  method0 "ScrollIntoView"
          [ inInt32 left
          , inInt32 top
          , inInt32 width
          , inInt32 height
          , inVariant start
          ]

getSheetViews :: IWindow a0
              -> IO (SheetViews ())
getSheetViews =
  propertyGet "SheetViews"
              []
              outIUnknown

getActiveSheetView :: IWindow a0
                   -> IO (IDispatch ())
getActiveSheetView =
  propertyGet "ActiveSheetView"
              []
              outIDispatch

printOut0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
          => a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> IWindow a0
          -> IO a1
printOut0 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

getDisplayRuler :: IWindow a0
                -> IO Bool
getDisplayRuler =
  propertyGet "DisplayRuler"
              []
              outBool

setDisplayRuler :: Bool
                -> IWindow a0
                -> IO ()
setDisplayRuler rHS =
  propertySet "DisplayRuler"
              [inBool rHS]

getAutoFilterDateGrouping :: IWindow a0
                          -> IO Bool
getAutoFilterDateGrouping =
  propertyGet "AutoFilterDateGrouping"
              []
              outBool

setAutoFilterDateGrouping :: Bool
                          -> IWindow a0
                          -> IO ()
setAutoFilterDateGrouping rHS =
  propertySet "AutoFilterDateGrouping"
              [inBool rHS]

getDisplayWhitespace :: IWindow a0
                     -> IO Bool
getDisplayWhitespace =
  propertyGet "DisplayWhitespace"
              []
              outBool

setDisplayWhitespace :: Bool
                     -> IWindow a0
                     -> IO ()
setDisplayWhitespace rHS =
  propertySet "DisplayWhitespace"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IWindows
-- 
-- --------------------------------------------------
data IWindows_ a = IWindows__ 
type IWindows a = IDispatch (IWindows_ a)
iidIWindows :: IID (IWindows ())
iidIWindows = mkIID "{00020892-0001-0000-C000-000000000046}"

getApplication1 :: (Variant a1)
                => IWindows a0
                -> IO a1
getApplication1 =
  propertyGet "Application"
              []
              outVariant

getCreator1 :: IWindows a0
            -> IO XlCreator
getCreator1 =
  propertyGet "Creator"
              []
              outEnum

getParent16 :: IWindows a0
            -> IO (IDispatch ())
getParent16 =
  propertyGet "Parent"
              []
              outIDispatch

arrange :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> IWindows a0
        -> IO a1
arrange arrangeStyle activeWorkbook syncHorizontal syncVertical =
  function1 "Arrange"
            [ inDefaultValue (inInt32 1) inVariant arrangeStyle
            , inVariant activeWorkbook
            , inVariant syncHorizontal
            , inVariant syncVertical
            ]
            outVariant

getCount3 :: IWindows a0
          -> IO Int32
getCount3 =
  propertyGet "Count"
              []
              outInt32

getItem0 :: a1
         -> IWindows a0
         -> IO (Window ())
getItem0 index =
  propertyGet "Item"
              [inVariant index]
              outIUnknown

getNewEnum2 :: IWindows a0
            -> IO (IUnknown ())
getNewEnum2 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault :: a1
           -> IWindows a0
           -> IO (Window ())
getDefault index =
  propertyGet "_Default"
              [inVariant index]
              outIUnknown

compareSideBySideWith :: a1
                      -> IWindows a0
                      -> IO Bool
compareSideBySideWith windowName =
  function1 "CompareSideBySideWith"
            [inVariant windowName]
            outBool

breakSideBySide :: IWindows a0
                -> IO Bool
breakSideBySide =
  function1 "BreakSideBySide"
            []
            outBool

getSyncScrollingSideBySide :: IWindows a0
                           -> IO Bool
getSyncScrollingSideBySide =
  propertyGet "SyncScrollingSideBySide"
              []
              outBool

setSyncScrollingSideBySide :: Bool
                           -> IWindows a0
                           -> IO ()
setSyncScrollingSideBySide rHS =
  propertySet "SyncScrollingSideBySide"
              [inBool rHS]

resetPositionsSideBySide :: IWindows a0
                         -> IO ()
resetPositionsSideBySide =
  method0 "ResetPositionsSideBySide"
          []

-- --------------------------------------------------
-- 
-- interface IAppEvents
-- 
-- --------------------------------------------------
data IAppEvents_ a = IAppEvents__ 
type IAppEvents a = IDispatch (IAppEvents_ a)
iidIAppEvents :: IID (IAppEvents ())
iidIAppEvents = mkIID "{00024413-0001-0000-C000-000000000046}"

newWorkbook :: (Variant a1)
            => a1
            -> IAppEvents a0
            -> IO ()
newWorkbook wb =
  method0 "NewWorkbook"
          [inVariant wb]

sheetSelectionChange :: IDispatch a1
                     -> Range a2
                     -> IAppEvents a0
                     -> IO ()
sheetSelectionChange sh target =
  method0 "SheetSelectionChange"
          [ inIDispatch sh
          , inIUnknown target
          ]

sheetBeforeDoubleClick :: IDispatch a1
                       -> Range a2
                       -> Bool
                       -> IAppEvents a0
                       -> IO Bool
sheetBeforeDoubleClick sh target cancel =
  method1 "SheetBeforeDoubleClick"
          [ inIDispatch sh
          , inIUnknown target
          ]
          (inoutBool cancel)

sheetBeforeRightClick :: IDispatch a1
                      -> Range a2
                      -> Bool
                      -> IAppEvents a0
                      -> IO Bool
sheetBeforeRightClick sh target cancel =
  method1 "SheetBeforeRightClick"
          [ inIDispatch sh
          , inIUnknown target
          ]
          (inoutBool cancel)

sheetActivate :: IDispatch a1
              -> IAppEvents a0
              -> IO ()
sheetActivate sh =
  method0 "SheetActivate"
          [inIDispatch sh]

sheetDeactivate :: IDispatch a1
                -> IAppEvents a0
                -> IO ()
sheetDeactivate sh =
  method0 "SheetDeactivate"
          [inIDispatch sh]

sheetCalculate :: IDispatch a1
               -> IAppEvents a0
               -> IO ()
sheetCalculate sh =
  method0 "SheetCalculate"
          [inIDispatch sh]

sheetChange :: IDispatch a1
            -> Range a2
            -> IAppEvents a0
            -> IO ()
sheetChange sh target =
  method0 "SheetChange"
          [ inIDispatch sh
          , inIUnknown target
          ]

workbookOpen :: (Variant a1)
             => a1
             -> IAppEvents a0
             -> IO ()
workbookOpen wb =
  method0 "WorkbookOpen"
          [inVariant wb]

workbookActivate :: (Variant a1)
                 => a1
                 -> IAppEvents a0
                 -> IO ()
workbookActivate wb =
  method0 "WorkbookActivate"
          [inVariant wb]

workbookDeactivate :: (Variant a1)
                   => a1
                   -> IAppEvents a0
                   -> IO ()
workbookDeactivate wb =
  method0 "WorkbookDeactivate"
          [inVariant wb]

workbookBeforeClose :: (Variant a1)
                    => a1
                    -> Bool
                    -> IAppEvents a0
                    -> IO Bool
workbookBeforeClose wb cancel =
  method1 "WorkbookBeforeClose"
          [inVariant wb]
          (inoutBool cancel)

workbookBeforeSave :: (Variant a1)
                   => a1
                   -> Bool
                   -> Bool
                   -> IAppEvents a0
                   -> IO Bool
workbookBeforeSave wb saveAsUI cancel =
  method1 "WorkbookBeforeSave"
          [ inVariant wb
          , inBool saveAsUI
          ]
          (inoutBool cancel)

workbookBeforePrint :: (Variant a1)
                    => a1
                    -> Bool
                    -> IAppEvents a0
                    -> IO Bool
workbookBeforePrint wb cancel =
  method1 "WorkbookBeforePrint"
          [inVariant wb]
          (inoutBool cancel)

workbookNewSheet :: (Variant a1)
                 => a1
                 -> IDispatch a2
                 -> IAppEvents a0
                 -> IO ()
workbookNewSheet wb sh =
  method0 "WorkbookNewSheet"
          [ inVariant wb
          , inIDispatch sh
          ]

workbookAddinInstall :: (Variant a1)
                     => a1
                     -> IAppEvents a0
                     -> IO ()
workbookAddinInstall wb =
  method0 "WorkbookAddinInstall"
          [inVariant wb]

workbookAddinUninstall :: (Variant a1)
                       => a1
                       -> IAppEvents a0
                       -> IO ()
workbookAddinUninstall wb =
  method0 "WorkbookAddinUninstall"
          [inVariant wb]

windowResize :: (Variant a1)
             => a1
             -> Window a2
             -> IAppEvents a0
             -> IO ()
windowResize wb wn =
  method0 "WindowResize"
          [ inVariant wb
          , inIUnknown wn
          ]

windowActivate :: (Variant a1)
               => a1
               -> Window a2
               -> IAppEvents a0
               -> IO ()
windowActivate wb wn =
  method0 "WindowActivate"
          [ inVariant wb
          , inIUnknown wn
          ]

windowDeactivate :: (Variant a1)
                 => a1
                 -> Window a2
                 -> IAppEvents a0
                 -> IO ()
windowDeactivate wb wn =
  method0 "WindowDeactivate"
          [ inVariant wb
          , inIUnknown wn
          ]

sheetFollowHyperlink :: IDispatch a1
                     -> Hyperlink a2
                     -> IAppEvents a0
                     -> IO ()
sheetFollowHyperlink sh target =
  method0 "SheetFollowHyperlink"
          [ inIDispatch sh
          , inIUnknown target
          ]

sheetPivotTableUpdate :: IDispatch a1
                      -> PivotTable a2
                      -> IAppEvents a0
                      -> IO ()
sheetPivotTableUpdate sh target =
  method0 "SheetPivotTableUpdate"
          [ inIDispatch sh
          , inIUnknown target
          ]

workbookPivotTableCloseConnection :: (Variant a1)
                                  => a1
                                  -> PivotTable a2
                                  -> IAppEvents a0
                                  -> IO ()
workbookPivotTableCloseConnection wb target =
  method0 "WorkbookPivotTableCloseConnection"
          [ inVariant wb
          , inIUnknown target
          ]

workbookPivotTableOpenConnection :: (Variant a1)
                                 => a1
                                 -> PivotTable a2
                                 -> IAppEvents a0
                                 -> IO ()
workbookPivotTableOpenConnection wb target =
  method0 "WorkbookPivotTableOpenConnection"
          [ inVariant wb
          , inIUnknown target
          ]

workbookSync :: (Variant a1, Variant a2)
             => a1
             -> a2
             -> IAppEvents a0
             -> IO ()
workbookSync wb syncEventType =
  method0 "WorkbookSync"
          [ inVariant wb
          , inVariant syncEventType
          ]

workbookBeforeXmlImport :: (Variant a1)
                        => a1
                        -> XmlMap a2
                        -> String
                        -> Bool
                        -> Bool
                        -> IAppEvents a0
                        -> IO Bool
workbookBeforeXmlImport wb map url isRefresh cancel =
  method1 "WorkbookBeforeXmlImport"
          [ inVariant wb
          , inIUnknown map
          , inString url
          , inBool isRefresh
          ]
          (inoutBool cancel)

workbookAfterXmlImport :: (Variant a1)
                       => a1
                       -> XmlMap a2
                       -> Bool
                       -> XlXmlImportResult
                       -> IAppEvents a0
                       -> IO ()
workbookAfterXmlImport wb map isRefresh result =
  method0 "WorkbookAfterXmlImport"
          [ inVariant wb
          , inIUnknown map
          , inBool isRefresh
          , inEnum result
          ]

workbookBeforeXmlExport :: (Variant a1)
                        => a1
                        -> XmlMap a2
                        -> String
                        -> Bool
                        -> IAppEvents a0
                        -> IO Bool
workbookBeforeXmlExport wb map url cancel =
  method1 "WorkbookBeforeXmlExport"
          [ inVariant wb
          , inIUnknown map
          , inString url
          ]
          (inoutBool cancel)

workbookAfterXmlExport :: (Variant a1)
                       => a1
                       -> XmlMap a2
                       -> String
                       -> XlXmlExportResult
                       -> IAppEvents a0
                       -> IO ()
workbookAfterXmlExport wb map url result =
  method0 "WorkbookAfterXmlExport"
          [ inVariant wb
          , inIUnknown map
          , inString url
          , inEnum result
          ]

workbookRowsetComplete :: (Variant a1)
                       => a1
                       -> String
                       -> String
                       -> Bool
                       -> IAppEvents a0
                       -> IO ()
workbookRowsetComplete wb description sheet success =
  method0 "WorkbookRowsetComplete"
          [ inVariant wb
          , inString description
          , inString sheet
          , inBool success
          ]

afterCalculate :: IAppEvents a0
               -> IO ()
afterCalculate =
  method0 "AfterCalculate"
          []

-- --------------------------------------------------
-- 
-- interface _Application
-- 
-- --------------------------------------------------
data Application_ a = Application__ 
type Application a = IDispatch (Application_ a)
iidApplication :: IID (Application ())
iidApplication = mkIID "{000208D5-0000-0000-C000-000000000046}"

getApplication2 :: Application a0
                -> IO (Maybe Application)
getApplication2 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

foreign import stdcall "dynamic" prim_Excel_getApplication2 :: Ptr () -> Ptr () -> Ptr (Ptr Application) -> IO Int32
getCreator2 :: Application a0
            -> IO XlCreator
getCreator2 =
  propertyGet "Creator"
              []
              outEnum

getParent17 :: Application a0
            -> IO (Maybe Application)
getParent17 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 9 iptr
    doThenFree free (readunique readApplication) rHS

getActiveCell0 :: Application a0
               -> IO (Range ())
getActiveCell0 =
  propertyGet "ActiveCell"
              []
              outIUnknown

getActiveChart0 :: Application a0
                -> IO (Maybe Chart)
getActiveChart0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getActiveChart0 methPtr iptr rHS) 11 iptr
    doThenFree free (readunique readChart) rHS

foreign import stdcall "dynamic" prim_Excel_getActiveChart0 :: Ptr () -> Ptr () -> Ptr (Ptr Chart) -> IO Int32
getActiveDialog :: Application a0
                -> IO (DialogSheet ())
getActiveDialog =
  propertyGet "ActiveDialog"
              []
              outIUnknown

getActiveMenuBar :: Application a0
                 -> IO (MenuBar ())
getActiveMenuBar =
  propertyGet "ActiveMenuBar"
              []
              outIUnknown

getActivePrinter :: Int32
                 -> Application a0
                 -> IO String
getActivePrinter lcid =
  propertyGet "ActivePrinter"
              [inInt32 lcid]
              outString

setActivePrinter :: Int32
                 -> String
                 -> Application a0
                 -> IO ()
setActivePrinter lcid rHS =
  propertySet "ActivePrinter"
              [ inInt32 lcid
              , inString rHS
              ]

getActiveSheet0 :: Application a0
                -> IO (IDispatch ())
getActiveSheet0 =
  propertyGet "ActiveSheet"
              []
              outIDispatch

getActiveWindow :: Application a0
                -> IO (Window ())
getActiveWindow =
  propertyGet "ActiveWindow"
              []
              outIUnknown

getActiveWorkbook :: Application a0
                  -> IO (Maybe Workbook)
getActiveWorkbook iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getActiveWorkbook methPtr iptr rHS) 18 iptr
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "dynamic" prim_Excel_getActiveWorkbook :: Ptr () -> Ptr () -> Ptr (Ptr Workbook) -> IO Int32
getAddIns :: Application a0
          -> IO (AddIns ())
getAddIns =
  propertyGet "AddIns"
              []
              outIUnknown

getAssistant :: Application a0
             -> IO (Maybe Assistant)
getAssistant iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAssistant methPtr iptr rHS) 20 iptr
    doThenFree free (readunique readAssistant) rHS

foreign import stdcall "dynamic" prim_Excel_getAssistant :: Ptr () -> Ptr () -> Ptr (Ptr Assistant) -> IO Int32
calculate :: Int32
          -> Application a0
          -> IO ()
calculate lcid =
  method0 "Calculate"
          [inInt32 lcid]

getCells :: Application a0
         -> IO (Range ())
getCells =
  propertyGet "Cells"
              []
              outIUnknown

getCharts :: Application a0
          -> IO (Sheets ())
getCharts =
  propertyGet "Charts"
              []
              outIUnknown

getColumns :: Application a0
           -> IO (Range ())
getColumns =
  propertyGet "Columns"
              []
              outIUnknown

getCommandBars :: Application a0
               -> IO (Maybe CommandBars)
getCommandBars iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getCommandBars methPtr iptr rHS) 25 iptr
    doThenFree free (readunique readCommandBars) rHS

foreign import stdcall "dynamic" prim_Excel_getCommandBars :: Ptr () -> Ptr () -> Ptr (Ptr CommandBars) -> IO Int32
getDDEAppReturnCode :: Int32
                    -> Application a0
                    -> IO Int32
getDDEAppReturnCode lcid =
  propertyGet "DDEAppReturnCode"
              [inInt32 lcid]
              outInt32

dDEExecute :: Int32
           -> String
           -> Int32
           -> Application a0
           -> IO ()
dDEExecute channel string lcid =
  method0 "DDEExecute"
          [ inInt32 channel
          , inString string
          , inInt32 lcid
          ]

dDEInitiate :: String
            -> String
            -> Int32
            -> Application a0
            -> IO Int32
dDEInitiate app topic lcid =
  function1 "DDEInitiate"
            [ inString app
            , inString topic
            , inInt32 lcid
            ]
            outInt32

dDEPoke :: Int32
        -> a1
        -> a2
        -> Int32
        -> Application a0
        -> IO ()
dDEPoke channel item2 data0 lcid =
  method0 "DDEPoke"
          [ inInt32 channel
          , inVariant item2
          , inVariant data0
          , inInt32 lcid
          ]

dDERequest :: (Variant a1)
           => Int32
           -> String
           -> Int32
           -> Application a0
           -> IO a1
dDERequest channel item2 lcid =
  function1 "DDERequest"
            [ inInt32 channel
            , inString item2
            , inInt32 lcid
            ]
            outVariant

dDETerminate :: Int32
             -> Int32
             -> Application a0
             -> IO ()
dDETerminate channel lcid =
  method0 "DDETerminate"
          [ inInt32 channel
          , inInt32 lcid
          ]

getDialogSheets :: Application a0
                -> IO (Sheets ())
getDialogSheets =
  propertyGet "DialogSheets"
              []
              outIUnknown

evaluate :: (Variant a1)
         => a2
         -> Int32
         -> Application a0
         -> IO a1
evaluate name lcid =
  function1 "Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

evaluate0 :: (Variant a1)
          => a2
          -> Int32
          -> Application a0
          -> IO a1
evaluate0 name lcid =
  function1 "_Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

executeExcel4Macro :: (Variant a1)
                   => String
                   -> Int32
                   -> Application a0
                   -> IO a1
executeExcel4Macro string lcid =
  function1 "ExecuteExcel4Macro"
            [ inString string
            , inInt32 lcid
            ]
            outVariant

intersect :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
          => Range a1
          -> Range a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> a19
          -> a20
          -> a21
          -> a22
          -> a23
          -> a24
          -> a25
          -> a26
          -> a27
          -> a28
          -> a29
          -> a30
          -> Int32
          -> Application a0
          -> IO (Range ())
intersect arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "Intersect"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outIUnknown

getMenuBars :: Application a0
            -> IO (MenuBars ())
getMenuBars =
  propertyGet "MenuBars"
              []
              outIUnknown

getModules :: Application a0
           -> IO (Modules ())
getModules =
  propertyGet "Modules"
              []
              outIUnknown

getNames :: Application a0
         -> IO (Names ())
getNames =
  propertyGet "Names"
              []
              outIUnknown

getRange :: (Variant a2)
         => a1
         -> a2
         -> Application a0
         -> IO (Range ())
getRange cell1 cell2 =
  propertyGet "Range"
              [ inVariant cell1
              , inVariant cell2
              ]
              outIUnknown

getRows :: Application a0
        -> IO (Range ())
getRows =
  propertyGet "Rows"
              []
              outIUnknown

run :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31, Variant a32)
    => a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> a31
    -> a32
    -> Application a0
    -> IO a1
run macro arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Run"
            [ inVariant macro
            , inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

run2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31, Variant a32)
     => a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> a31
     -> a32
     -> Int32
     -> Application a0
     -> IO a1
run2 macro arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "_Run2"
            [ inVariant macro
            , inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outVariant

getSelection0 :: Int32
              -> Application a0
              -> IO (IDispatch ())
getSelection0 lcid =
  propertyGet "Selection"
              [inInt32 lcid]
              outIDispatch

sendKeys :: (Variant a2)
         => a1
         -> a2
         -> Int32
         -> Application a0
         -> IO ()
sendKeys keys wait lcid =
  method0 "SendKeys"
          [ inVariant keys
          , inVariant wait
          , inInt32 lcid
          ]

getSheets :: Application a0
          -> IO (Sheets ())
getSheets =
  propertyGet "Sheets"
              []
              outIUnknown

getShortcutMenus :: Int32
                 -> Application a0
                 -> IO (Menu ())
getShortcutMenus index =
  propertyGet "ShortcutMenus"
              [inInt32 index]
              outIUnknown

getThisWorkbook :: Int32
                -> Application a0
                -> IO (Maybe Workbook)
getThisWorkbook lcid iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getThisWorkbook methPtr iptr lcid rHS) 48 iptr
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "dynamic" prim_Excel_getThisWorkbook :: Ptr () -> Ptr () -> Int32 -> Ptr (Ptr Workbook) -> IO Int32
getToolbars :: Application a0
            -> IO (Toolbars ())
getToolbars =
  propertyGet "Toolbars"
              []
              outIUnknown

union :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => Range a1
      -> Range a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> Int32
      -> Application a0
      -> IO (Range ())
union arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "Union"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outIUnknown

getWindows :: Application a0
           -> IO (Windows ())
getWindows =
  propertyGet "Windows"
              []
              outIUnknown

getWorkbooks :: Application a0
             -> IO (Workbooks ())
getWorkbooks =
  propertyGet "Workbooks"
              []
              outIUnknown

getWorksheetFunction :: Application a0
                     -> IO (WorksheetFunction ())
getWorksheetFunction =
  propertyGet "WorksheetFunction"
              []
              outIUnknown

getWorksheets :: Application a0
              -> IO (Sheets ())
getWorksheets =
  propertyGet "Worksheets"
              []
              outIUnknown

getExcel4IntlMacroSheets :: Application a0
                         -> IO (Sheets ())
getExcel4IntlMacroSheets =
  propertyGet "Excel4IntlMacroSheets"
              []
              outIUnknown

getExcel4MacroSheets :: Application a0
                     -> IO (Sheets ())
getExcel4MacroSheets =
  propertyGet "Excel4MacroSheets"
              []
              outIUnknown

activateMicrosoftApp :: XlMSApplication
                     -> Int32
                     -> Application a0
                     -> IO ()
activateMicrosoftApp index lcid =
  method0 "ActivateMicrosoftApp"
          [ inEnum index
          , inInt32 lcid
          ]

addChartAutoFormat :: (Variant a2)
                   => a1
                   -> String
                   -> a2
                   -> Int32
                   -> Application a0
                   -> IO ()
addChartAutoFormat chart name description lcid =
  method0 "AddChartAutoFormat"
          [ inVariant chart
          , inString name
          , inVariant description
          , inInt32 lcid
          ]

addCustomList :: (Variant a2)
              => a1
              -> a2
              -> Int32
              -> Application a0
              -> IO ()
addCustomList listArray byRow lcid =
  method0 "AddCustomList"
          [ inVariant listArray
          , inVariant byRow
          , inInt32 lcid
          ]

getAlertBeforeOverwriting :: Int32
                          -> Application a0
                          -> IO Bool
getAlertBeforeOverwriting lcid =
  propertyGet "AlertBeforeOverwriting"
              [inInt32 lcid]
              outBool

setAlertBeforeOverwriting :: Int32
                          -> Bool
                          -> Application a0
                          -> IO ()
setAlertBeforeOverwriting lcid rHS =
  propertySet "AlertBeforeOverwriting"
              [ inInt32 lcid
              , inBool rHS
              ]

getAltStartupPath :: Int32
                  -> Application a0
                  -> IO String
getAltStartupPath lcid =
  propertyGet "AltStartupPath"
              [inInt32 lcid]
              outString

setAltStartupPath :: Int32
                  -> String
                  -> Application a0
                  -> IO ()
setAltStartupPath lcid rHS =
  propertySet "AltStartupPath"
              [ inInt32 lcid
              , inString rHS
              ]

getAskToUpdateLinks :: Int32
                    -> Application a0
                    -> IO Bool
getAskToUpdateLinks lcid =
  propertyGet "AskToUpdateLinks"
              [inInt32 lcid]
              outBool

setAskToUpdateLinks :: Int32
                    -> Bool
                    -> Application a0
                    -> IO ()
setAskToUpdateLinks lcid rHS =
  propertySet "AskToUpdateLinks"
              [ inInt32 lcid
              , inBool rHS
              ]

getEnableAnimations :: Int32
                    -> Application a0
                    -> IO Bool
getEnableAnimations lcid =
  propertyGet "EnableAnimations"
              [inInt32 lcid]
              outBool

setEnableAnimations :: Int32
                    -> Bool
                    -> Application a0
                    -> IO ()
setEnableAnimations lcid rHS =
  propertySet "EnableAnimations"
              [ inInt32 lcid
              , inBool rHS
              ]

getAutoCorrect :: Application a0
               -> IO (AutoCorrect ())
getAutoCorrect =
  propertyGet "AutoCorrect"
              []
              outIUnknown

getBuild :: Int32
         -> Application a0
         -> IO Int32
getBuild lcid =
  propertyGet "Build"
              [inInt32 lcid]
              outInt32

getCalculateBeforeSave :: Int32
                       -> Application a0
                       -> IO Bool
getCalculateBeforeSave lcid =
  propertyGet "CalculateBeforeSave"
              [inInt32 lcid]
              outBool

setCalculateBeforeSave :: Int32
                       -> Bool
                       -> Application a0
                       -> IO ()
setCalculateBeforeSave lcid rHS =
  propertySet "CalculateBeforeSave"
              [ inInt32 lcid
              , inBool rHS
              ]

getCalculation :: Int32
               -> Application a0
               -> IO XlCalculation
getCalculation lcid =
  propertyGet "Calculation"
              [inInt32 lcid]
              outEnum

setCalculation :: Int32
               -> XlCalculation
               -> Application a0
               -> IO ()
setCalculation lcid rHS =
  propertySet "Calculation"
              [ inInt32 lcid
              , inEnum rHS
              ]

getCaller :: (Variant a1, Variant a2)
          => a2
          -> Int32
          -> Application a0
          -> IO a1
getCaller index lcid =
  propertyGet "Caller"
              [ inVariant index
              , inInt32 lcid
              ]
              outVariant

getCanPlaySounds :: Int32
                 -> Application a0
                 -> IO Bool
getCanPlaySounds lcid =
  propertyGet "CanPlaySounds"
              [inInt32 lcid]
              outBool

getCanRecordSounds :: Int32
                   -> Application a0
                   -> IO Bool
getCanRecordSounds lcid =
  propertyGet "CanRecordSounds"
              [inInt32 lcid]
              outBool

getCaption0 :: Application a0
            -> IO String
getCaption0 =
  propertyGet "Caption"
              []
              outString

setCaption0 :: String
            -> Application a0
            -> IO ()
setCaption0 rHS =
  propertySet "Caption"
              [inString rHS]

getCellDragAndDrop :: Int32
                   -> Application a0
                   -> IO Bool
getCellDragAndDrop lcid =
  propertyGet "CellDragAndDrop"
              [inInt32 lcid]
              outBool

setCellDragAndDrop :: Int32
                   -> Bool
                   -> Application a0
                   -> IO ()
setCellDragAndDrop lcid rHS =
  propertySet "CellDragAndDrop"
              [ inInt32 lcid
              , inBool rHS
              ]

centimetersToPoints :: Double
                    -> Int32
                    -> Application a0
                    -> IO Double
centimetersToPoints centimeters lcid =
  function1 "CentimetersToPoints"
            [ inDouble centimeters
            , inInt32 lcid
            ]
            outDouble

checkSpelling :: (Variant a1, Variant a2)
              => String
              -> a1
              -> a2
              -> Int32
              -> Application a0
              -> IO Bool
checkSpelling word customDictionary ignoreUppercase lcid =
  function1 "CheckSpelling"
            [ inString word
            , inVariant customDictionary
            , inVariant ignoreUppercase
            , inInt32 lcid
            ]
            outBool

getClipboardFormats :: (Variant a1, Variant a2)
                    => a2
                    -> Int32
                    -> Application a0
                    -> IO a1
getClipboardFormats index lcid =
  propertyGet "ClipboardFormats"
              [ inVariant index
              , inInt32 lcid
              ]
              outVariant

getDisplayClipboardWindow :: Int32
                          -> Application a0
                          -> IO Bool
getDisplayClipboardWindow lcid =
  propertyGet "DisplayClipboardWindow"
              [inInt32 lcid]
              outBool

setDisplayClipboardWindow :: Int32
                          -> Bool
                          -> Application a0
                          -> IO ()
setDisplayClipboardWindow lcid rHS =
  propertySet "DisplayClipboardWindow"
              [ inInt32 lcid
              , inBool rHS
              ]

getColorButtons :: Application a0
                -> IO Bool
getColorButtons =
  propertyGet "ColorButtons"
              []
              outBool

setColorButtons :: Bool
                -> Application a0
                -> IO ()
setColorButtons rHS =
  propertySet "ColorButtons"
              [inBool rHS]

getCommandUnderlines :: Int32
                     -> Application a0
                     -> IO XlCommandUnderlines
getCommandUnderlines lcid =
  propertyGet "CommandUnderlines"
              [inInt32 lcid]
              outEnum

setCommandUnderlines :: Int32
                     -> XlCommandUnderlines
                     -> Application a0
                     -> IO ()
setCommandUnderlines lcid rHS =
  propertySet "CommandUnderlines"
              [ inInt32 lcid
              , inEnum rHS
              ]

getConstrainNumeric :: Int32
                    -> Application a0
                    -> IO Bool
getConstrainNumeric lcid =
  propertyGet "ConstrainNumeric"
              [inInt32 lcid]
              outBool

setConstrainNumeric :: Int32
                    -> Bool
                    -> Application a0
                    -> IO ()
setConstrainNumeric lcid rHS =
  propertySet "ConstrainNumeric"
              [ inInt32 lcid
              , inBool rHS
              ]

convertFormula :: (Variant a1, Variant a3, Variant a4, Variant a5)
               => a2
               -> XlReferenceStyle
               -> a3
               -> a4
               -> a5
               -> Int32
               -> Application a0
               -> IO a1
convertFormula formula fromReferenceStyle toReferenceStyle toAbsolute relativeTo lcid =
  function1 "ConvertFormula"
            [ inVariant formula
            , inEnum fromReferenceStyle
            , inVariant toReferenceStyle
            , inVariant toAbsolute
            , inVariant relativeTo
            , inInt32 lcid
            ]
            outVariant

getCopyObjectsWithCells :: Int32
                        -> Application a0
                        -> IO Bool
getCopyObjectsWithCells lcid =
  propertyGet "CopyObjectsWithCells"
              [inInt32 lcid]
              outBool

setCopyObjectsWithCells :: Int32
                        -> Bool
                        -> Application a0
                        -> IO ()
setCopyObjectsWithCells lcid rHS =
  propertySet "CopyObjectsWithCells"
              [ inInt32 lcid
              , inBool rHS
              ]

getCursor :: Int32
          -> Application a0
          -> IO XlMousePointer
getCursor lcid =
  propertyGet "Cursor"
              [inInt32 lcid]
              outEnum

setCursor :: Int32
          -> XlMousePointer
          -> Application a0
          -> IO ()
setCursor lcid rHS =
  propertySet "Cursor"
              [ inInt32 lcid
              , inEnum rHS
              ]

getCustomListCount :: Int32
                   -> Application a0
                   -> IO Int32
getCustomListCount lcid =
  propertyGet "CustomListCount"
              [inInt32 lcid]
              outInt32

getCutCopyMode :: Int32
               -> Application a0
               -> IO XlCutCopyMode
getCutCopyMode lcid =
  propertyGet "CutCopyMode"
              [inInt32 lcid]
              outEnum

setCutCopyMode :: Int32
               -> XlCutCopyMode
               -> Application a0
               -> IO ()
setCutCopyMode lcid rHS =
  propertySet "CutCopyMode"
              [ inInt32 lcid
              , inEnum rHS
              ]

getDataEntryMode :: Int32
                 -> Application a0
                 -> IO Int32
getDataEntryMode lcid =
  propertyGet "DataEntryMode"
              [inInt32 lcid]
              outInt32

setDataEntryMode :: Int32
                 -> Int32
                 -> Application a0
                 -> IO ()
setDataEntryMode lcid rHS =
  propertySet "DataEntryMode"
              [ inInt32 lcid
              , inInt32 rHS
              ]

dummy1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
       => a2
       -> a3
       -> a4
       -> a5
       -> Application a0
       -> IO a1
dummy1 arg1 arg2 arg3 arg4 =
  function1 "Dummy1"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

dummy2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
       => a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> Application a0
       -> IO a1
dummy2 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 =
  function1 "Dummy2"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            ]
            outVariant

dummy3 :: (Variant a1)
       => Application a0
       -> IO a1
dummy3 =
  function1 "Dummy3"
            []
            outVariant

dummy4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
       => a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> Application a0
       -> IO a1
dummy4 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 =
  function1 "Dummy4"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            ]
            outVariant

dummy5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
       => a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> Application a0
       -> IO a1
dummy5 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 =
  function1 "Dummy5"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            ]
            outVariant

dummy6 :: (Variant a1)
       => Application a0
       -> IO a1
dummy6 =
  function1 "Dummy6"
            []
            outVariant

dummy7 :: (Variant a1)
       => Application a0
       -> IO a1
dummy7 =
  function1 "Dummy7"
            []
            outVariant

dummy8 :: (Variant a1, Variant a2)
       => a2
       -> Application a0
       -> IO a1
dummy8 arg1 =
  function1 "Dummy8"
            [inVariant arg1]
            outVariant

dummy9 :: (Variant a1)
       => Application a0
       -> IO a1
dummy9 =
  function1 "Dummy9"
            []
            outVariant

dummy10 :: (Variant a1)
        => a1
        -> Application a0
        -> IO Bool
dummy10 arg =
  function1 "Dummy10"
            [inVariant arg]
            outBool

dummy11 :: Application a0
        -> IO ()
dummy11 =
  method0 "Dummy11"
          []

getDefault0 :: Application a0
            -> IO String
getDefault0 =
  propertyGet "_Default"
              []
              outString

getDefaultFilePath :: Int32
                   -> Application a0
                   -> IO String
getDefaultFilePath lcid =
  propertyGet "DefaultFilePath"
              [inInt32 lcid]
              outString

setDefaultFilePath :: Int32
                   -> String
                   -> Application a0
                   -> IO ()
setDefaultFilePath lcid rHS =
  propertySet "DefaultFilePath"
              [ inInt32 lcid
              , inString rHS
              ]

deleteChartAutoFormat :: String
                      -> Int32
                      -> Application a0
                      -> IO ()
deleteChartAutoFormat name lcid =
  method0 "DeleteChartAutoFormat"
          [ inString name
          , inInt32 lcid
          ]

deleteCustomList :: Int32
                 -> Int32
                 -> Application a0
                 -> IO ()
deleteCustomList listNum lcid =
  method0 "DeleteCustomList"
          [ inInt32 listNum
          , inInt32 lcid
          ]

getDialogs :: Application a0
           -> IO (Dialogs ())
getDialogs =
  propertyGet "Dialogs"
              []
              outIUnknown

getDisplayAlerts :: Int32
                 -> Application a0
                 -> IO Bool
getDisplayAlerts lcid =
  propertyGet "DisplayAlerts"
              [inInt32 lcid]
              outBool

setDisplayAlerts :: Int32
                 -> Bool
                 -> Application a0
                 -> IO ()
setDisplayAlerts lcid rHS =
  propertySet "DisplayAlerts"
              [ inInt32 lcid
              , inBool rHS
              ]

getDisplayFormulaBar :: Int32
                     -> Application a0
                     -> IO Bool
getDisplayFormulaBar lcid =
  propertyGet "DisplayFormulaBar"
              [inInt32 lcid]
              outBool

setDisplayFormulaBar :: Int32
                     -> Bool
                     -> Application a0
                     -> IO ()
setDisplayFormulaBar lcid rHS =
  propertySet "DisplayFormulaBar"
              [ inInt32 lcid
              , inBool rHS
              ]

getDisplayFullScreen :: Int32
                     -> Application a0
                     -> IO Bool
getDisplayFullScreen lcid =
  propertyGet "DisplayFullScreen"
              [inInt32 lcid]
              outBool

setDisplayFullScreen :: Int32
                     -> Bool
                     -> Application a0
                     -> IO ()
setDisplayFullScreen lcid rHS =
  propertySet "DisplayFullScreen"
              [ inInt32 lcid
              , inBool rHS
              ]

getDisplayNoteIndicator :: Application a0
                        -> IO Bool
getDisplayNoteIndicator =
  propertyGet "DisplayNoteIndicator"
              []
              outBool

setDisplayNoteIndicator :: Bool
                        -> Application a0
                        -> IO ()
setDisplayNoteIndicator rHS =
  propertySet "DisplayNoteIndicator"
              [inBool rHS]

getDisplayCommentIndicator :: Application a0
                           -> IO XlCommentDisplayMode
getDisplayCommentIndicator =
  propertyGet "DisplayCommentIndicator"
              []
              outEnum

setDisplayCommentIndicator :: XlCommentDisplayMode
                           -> Application a0
                           -> IO ()
setDisplayCommentIndicator rHS =
  propertySet "DisplayCommentIndicator"
              [inEnum rHS]

getDisplayExcel4Menus :: Int32
                      -> Application a0
                      -> IO Bool
getDisplayExcel4Menus lcid =
  propertyGet "DisplayExcel4Menus"
              [inInt32 lcid]
              outBool

setDisplayExcel4Menus :: Int32
                      -> Bool
                      -> Application a0
                      -> IO ()
setDisplayExcel4Menus lcid rHS =
  propertySet "DisplayExcel4Menus"
              [ inInt32 lcid
              , inBool rHS
              ]

getDisplayRecentFiles :: Application a0
                      -> IO Bool
getDisplayRecentFiles =
  propertyGet "DisplayRecentFiles"
              []
              outBool

setDisplayRecentFiles :: Bool
                      -> Application a0
                      -> IO ()
setDisplayRecentFiles rHS =
  propertySet "DisplayRecentFiles"
              [inBool rHS]

getDisplayScrollBars :: Int32
                     -> Application a0
                     -> IO Bool
getDisplayScrollBars lcid =
  propertyGet "DisplayScrollBars"
              [inInt32 lcid]
              outBool

setDisplayScrollBars :: Int32
                     -> Bool
                     -> Application a0
                     -> IO ()
setDisplayScrollBars lcid rHS =
  propertySet "DisplayScrollBars"
              [ inInt32 lcid
              , inBool rHS
              ]

getDisplayStatusBar :: Int32
                    -> Application a0
                    -> IO Bool
getDisplayStatusBar lcid =
  propertyGet "DisplayStatusBar"
              [inInt32 lcid]
              outBool

setDisplayStatusBar :: Int32
                    -> Bool
                    -> Application a0
                    -> IO ()
setDisplayStatusBar lcid rHS =
  propertySet "DisplayStatusBar"
              [ inInt32 lcid
              , inBool rHS
              ]

doubleClick :: Int32
            -> Application a0
            -> IO ()
doubleClick lcid =
  method0 "DoubleClick"
          [inInt32 lcid]

getEditDirectlyInCell :: Int32
                      -> Application a0
                      -> IO Bool
getEditDirectlyInCell lcid =
  propertyGet "EditDirectlyInCell"
              [inInt32 lcid]
              outBool

setEditDirectlyInCell :: Int32
                      -> Bool
                      -> Application a0
                      -> IO ()
setEditDirectlyInCell lcid rHS =
  propertySet "EditDirectlyInCell"
              [ inInt32 lcid
              , inBool rHS
              ]

getEnableAutoComplete :: Application a0
                      -> IO Bool
getEnableAutoComplete =
  propertyGet "EnableAutoComplete"
              []
              outBool

setEnableAutoComplete :: Bool
                      -> Application a0
                      -> IO ()
setEnableAutoComplete rHS =
  propertySet "EnableAutoComplete"
              [inBool rHS]

getEnableCancelKey :: Int32
                   -> Application a0
                   -> IO XlEnableCancelKey
getEnableCancelKey lcid =
  propertyGet "EnableCancelKey"
              [inInt32 lcid]
              outEnum

setEnableCancelKey :: Int32
                   -> XlEnableCancelKey
                   -> Application a0
                   -> IO ()
setEnableCancelKey lcid rHS =
  propertySet "EnableCancelKey"
              [ inInt32 lcid
              , inEnum rHS
              ]

getEnableSound :: Application a0
               -> IO Bool
getEnableSound =
  propertyGet "EnableSound"
              []
              outBool

setEnableSound :: Bool
               -> Application a0
               -> IO ()
setEnableSound rHS =
  propertySet "EnableSound"
              [inBool rHS]

getEnableTipWizard :: Int32
                   -> Application a0
                   -> IO Bool
getEnableTipWizard lcid =
  propertyGet "EnableTipWizard"
              [inInt32 lcid]
              outBool

setEnableTipWizard :: Int32
                   -> Bool
                   -> Application a0
                   -> IO ()
setEnableTipWizard lcid rHS =
  propertySet "EnableTipWizard"
              [ inInt32 lcid
              , inBool rHS
              ]

getFileConverters :: (Variant a1, Variant a2, Variant a3)
                  => a2
                  -> a3
                  -> Int32
                  -> Application a0
                  -> IO a1
getFileConverters index1 index2 lcid =
  propertyGet "FileConverters"
              [ inVariant index1
              , inVariant index2
              , inInt32 lcid
              ]
              outVariant

getFileSearch :: Application a0
              -> IO (Maybe FileSearch)
getFileSearch iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getFileSearch methPtr iptr rHS) 149 iptr
    doThenFree free (readunique readFileSearch) rHS

foreign import stdcall "dynamic" prim_Excel_getFileSearch :: Ptr () -> Ptr () -> Ptr (Ptr FileSearch) -> IO Int32
getFileFind :: Application a0
            -> IO (Maybe IFind)
getFileFind iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getFileFind methPtr iptr rHS) 150 iptr
    doThenFree free (readunique readIFind) rHS

foreign import stdcall "dynamic" prim_Excel_getFileFind :: Ptr () -> Ptr () -> Ptr (Ptr IFind) -> IO Int32
findFile :: Int32
         -> Application a0
         -> IO ()
findFile lcid =
  method0 "_FindFile"
          [inInt32 lcid]

getFixedDecimal :: Int32
                -> Application a0
                -> IO Bool
getFixedDecimal lcid =
  propertyGet "FixedDecimal"
              [inInt32 lcid]
              outBool

setFixedDecimal :: Int32
                -> Bool
                -> Application a0
                -> IO ()
setFixedDecimal lcid rHS =
  propertySet "FixedDecimal"
              [ inInt32 lcid
              , inBool rHS
              ]

getFixedDecimalPlaces :: Int32
                      -> Application a0
                      -> IO Int32
getFixedDecimalPlaces lcid =
  propertyGet "FixedDecimalPlaces"
              [inInt32 lcid]
              outInt32

setFixedDecimalPlaces :: Int32
                      -> Int32
                      -> Application a0
                      -> IO ()
setFixedDecimalPlaces lcid rHS =
  propertySet "FixedDecimalPlaces"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getCustomListContents :: (Variant a1)
                      => Int32
                      -> Int32
                      -> Application a0
                      -> IO a1
getCustomListContents listNum lcid =
  function1 "GetCustomListContents"
            [ inInt32 listNum
            , inInt32 lcid
            ]
            outVariant

getCustomListNum :: a1
                 -> Int32
                 -> Application a0
                 -> IO Int32
getCustomListNum listArray lcid =
  function1 "GetCustomListNum"
            [ inVariant listArray
            , inInt32 lcid
            ]
            outInt32

getOpenFilename :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                => a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> Int32
                -> Application a0
                -> IO a1
getOpenFilename fileFilter filterIndex title buttonText multiSelect lcid =
  function1 "GetOpenFilename"
            [ inVariant fileFilter
            , inVariant filterIndex
            , inVariant title
            , inVariant buttonText
            , inVariant multiSelect
            , inInt32 lcid
            ]
            outVariant

getSaveAsFilename :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                  => a2
                  -> a3
                  -> a4
                  -> a5
                  -> a6
                  -> Int32
                  -> Application a0
                  -> IO a1
getSaveAsFilename initialFilename fileFilter filterIndex title buttonText lcid =
  function1 "GetSaveAsFilename"
            [ inVariant initialFilename
            , inVariant fileFilter
            , inVariant filterIndex
            , inVariant title
            , inVariant buttonText
            , inInt32 lcid
            ]
            outVariant

goto :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Int32
     -> Application a0
     -> IO ()
goto reference scroll lcid =
  method0 "Goto"
          [ inVariant reference
          , inVariant scroll
          , inInt32 lcid
          ]

getHeight0 :: Int32
           -> Application a0
           -> IO Double
getHeight0 lcid =
  propertyGet "Height"
              [inInt32 lcid]
              outDouble

setHeight0 :: Int32
           -> Double
           -> Application a0
           -> IO ()
setHeight0 lcid rHS =
  propertySet "Height"
              [ inInt32 lcid
              , inDouble rHS
              ]

help :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Int32
     -> Application a0
     -> IO ()
help helpFile helpContextID lcid =
  method0 "Help"
          [ inVariant helpFile
          , inVariant helpContextID
          , inInt32 lcid
          ]

getIgnoreRemoteRequests :: Int32
                        -> Application a0
                        -> IO Bool
getIgnoreRemoteRequests lcid =
  propertyGet "IgnoreRemoteRequests"
              [inInt32 lcid]
              outBool

setIgnoreRemoteRequests :: Int32
                        -> Bool
                        -> Application a0
                        -> IO ()
setIgnoreRemoteRequests lcid rHS =
  propertySet "IgnoreRemoteRequests"
              [ inInt32 lcid
              , inBool rHS
              ]

inchesToPoints :: Double
               -> Int32
               -> Application a0
               -> IO Double
inchesToPoints inches lcid =
  function1 "InchesToPoints"
            [ inDouble inches
            , inInt32 lcid
            ]
            outDouble

inputBox :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
         => String
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> Int32
         -> Application a0
         -> IO a1
inputBox prompt title default0 left top helpFile helpContextID type0 lcid =
  function1 "InputBox"
            [ inString prompt
            , inVariant title
            , inVariant default0
            , inVariant left
            , inVariant top
            , inVariant helpFile
            , inVariant helpContextID
            , inVariant type0
            , inInt32 lcid
            ]
            outVariant

getInteractive :: Int32
               -> Application a0
               -> IO Bool
getInteractive lcid =
  propertyGet "Interactive"
              [inInt32 lcid]
              outBool

setInteractive :: Int32
               -> Bool
               -> Application a0
               -> IO ()
setInteractive lcid rHS =
  propertySet "Interactive"
              [ inInt32 lcid
              , inBool rHS
              ]

getInternational :: (Variant a1, Variant a2)
                 => a2
                 -> Int32
                 -> Application a0
                 -> IO a1
getInternational index lcid =
  propertyGet "International"
              [ inVariant index
              , inInt32 lcid
              ]
              outVariant

getIteration :: Int32
             -> Application a0
             -> IO Bool
getIteration lcid =
  propertyGet "Iteration"
              [inInt32 lcid]
              outBool

setIteration :: Int32
             -> Bool
             -> Application a0
             -> IO ()
setIteration lcid rHS =
  propertySet "Iteration"
              [ inInt32 lcid
              , inBool rHS
              ]

getLargeButtons :: Application a0
                -> IO Bool
getLargeButtons =
  propertyGet "LargeButtons"
              []
              outBool

setLargeButtons :: Bool
                -> Application a0
                -> IO ()
setLargeButtons rHS =
  propertySet "LargeButtons"
              [inBool rHS]

getLeft0 :: Int32
         -> Application a0
         -> IO Double
getLeft0 lcid =
  propertyGet "Left"
              [inInt32 lcid]
              outDouble

setLeft0 :: Int32
         -> Double
         -> Application a0
         -> IO ()
setLeft0 lcid rHS =
  propertySet "Left"
              [ inInt32 lcid
              , inDouble rHS
              ]

getLibraryPath :: Int32
               -> Application a0
               -> IO String
getLibraryPath lcid =
  propertyGet "LibraryPath"
              [inInt32 lcid]
              outString

macroOptions :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> Int32
             -> Application a0
             -> IO ()
macroOptions macro description hasMenu menuText hasShortcutKey shortcutKey category statusBar helpContextID helpFile lcid =
  method0 "MacroOptions"
          [ inVariant macro
          , inVariant description
          , inVariant hasMenu
          , inVariant menuText
          , inVariant hasShortcutKey
          , inVariant shortcutKey
          , inVariant category
          , inVariant statusBar
          , inVariant helpContextID
          , inVariant helpFile
          , inInt32 lcid
          ]

mailLogoff :: Int32
           -> Application a0
           -> IO ()
mailLogoff lcid =
  method0 "MailLogoff"
          [inInt32 lcid]

mailLogon :: (Variant a1, Variant a2, Variant a3)
          => a1
          -> a2
          -> a3
          -> Int32
          -> Application a0
          -> IO ()
mailLogon name password downloadNewMail lcid =
  method0 "MailLogon"
          [ inVariant name
          , inVariant password
          , inVariant downloadNewMail
          , inInt32 lcid
          ]

getMailSession :: (Variant a1)
               => Int32
               -> Application a0
               -> IO a1
getMailSession lcid =
  propertyGet "MailSession"
              [inInt32 lcid]
              outVariant

getMailSystem :: Int32
              -> Application a0
              -> IO XlMailSystem
getMailSystem lcid =
  propertyGet "MailSystem"
              [inInt32 lcid]
              outEnum

getMathCoprocessorAvailable :: Int32
                            -> Application a0
                            -> IO Bool
getMathCoprocessorAvailable lcid =
  propertyGet "MathCoprocessorAvailable"
              [inInt32 lcid]
              outBool

getMaxChange :: Int32
             -> Application a0
             -> IO Double
getMaxChange lcid =
  propertyGet "MaxChange"
              [inInt32 lcid]
              outDouble

setMaxChange :: Int32
             -> Double
             -> Application a0
             -> IO ()
setMaxChange lcid rHS =
  propertySet "MaxChange"
              [ inInt32 lcid
              , inDouble rHS
              ]

getMaxIterations :: Int32
                 -> Application a0
                 -> IO Int32
getMaxIterations lcid =
  propertyGet "MaxIterations"
              [inInt32 lcid]
              outInt32

setMaxIterations :: Int32
                 -> Int32
                 -> Application a0
                 -> IO ()
setMaxIterations lcid rHS =
  propertySet "MaxIterations"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getMemoryFree :: Int32
              -> Application a0
              -> IO Int32
getMemoryFree lcid =
  propertyGet "MemoryFree"
              [inInt32 lcid]
              outInt32

getMemoryTotal :: Int32
               -> Application a0
               -> IO Int32
getMemoryTotal lcid =
  propertyGet "MemoryTotal"
              [inInt32 lcid]
              outInt32

getMemoryUsed :: Int32
              -> Application a0
              -> IO Int32
getMemoryUsed lcid =
  propertyGet "MemoryUsed"
              [inInt32 lcid]
              outInt32

getMouseAvailable :: Int32
                  -> Application a0
                  -> IO Bool
getMouseAvailable lcid =
  propertyGet "MouseAvailable"
              [inInt32 lcid]
              outBool

getMoveAfterReturn :: Int32
                   -> Application a0
                   -> IO Bool
getMoveAfterReturn lcid =
  propertyGet "MoveAfterReturn"
              [inInt32 lcid]
              outBool

setMoveAfterReturn :: Int32
                   -> Bool
                   -> Application a0
                   -> IO ()
setMoveAfterReturn lcid rHS =
  propertySet "MoveAfterReturn"
              [ inInt32 lcid
              , inBool rHS
              ]

getMoveAfterReturnDirection :: Int32
                            -> Application a0
                            -> IO XlDirection
getMoveAfterReturnDirection lcid =
  propertyGet "MoveAfterReturnDirection"
              [inInt32 lcid]
              outEnum

setMoveAfterReturnDirection :: Int32
                            -> XlDirection
                            -> Application a0
                            -> IO ()
setMoveAfterReturnDirection lcid rHS =
  propertySet "MoveAfterReturnDirection"
              [ inInt32 lcid
              , inEnum rHS
              ]

getRecentFiles :: Application a0
               -> IO (RecentFiles ())
getRecentFiles =
  propertyGet "RecentFiles"
              []
              outIUnknown

getName0 :: Application a0
         -> IO String
getName0 =
  propertyGet "Name"
              []
              outString

nextLetter :: Int32
           -> Application a0
           -> IO (Maybe Workbook)
nextLetter lcid iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getThisWorkbook methPtr iptr lcid rHS) 198 iptr
    doThenFree free (readunique readWorkbook) rHS

getNetworkTemplatesPath :: Int32
                        -> Application a0
                        -> IO String
getNetworkTemplatesPath lcid =
  propertyGet "NetworkTemplatesPath"
              [inInt32 lcid]
              outString

getODBCErrors :: Application a0
              -> IO (ODBCErrors ())
getODBCErrors =
  propertyGet "ODBCErrors"
              []
              outIUnknown

getODBCTimeout :: Application a0
               -> IO Int32
getODBCTimeout =
  propertyGet "ODBCTimeout"
              []
              outInt32

setODBCTimeout :: Int32
               -> Application a0
               -> IO ()
setODBCTimeout rHS =
  propertySet "ODBCTimeout"
              [inInt32 rHS]

getOnCalculate :: Int32
               -> Application a0
               -> IO String
getOnCalculate lcid =
  propertyGet "OnCalculate"
              [inInt32 lcid]
              outString

setOnCalculate :: Int32
               -> String
               -> Application a0
               -> IO ()
setOnCalculate lcid rHS =
  propertySet "OnCalculate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnData :: Int32
          -> Application a0
          -> IO String
getOnData lcid =
  propertyGet "OnData"
              [inInt32 lcid]
              outString

setOnData :: Int32
          -> String
          -> Application a0
          -> IO ()
setOnData lcid rHS =
  propertySet "OnData"
              [ inInt32 lcid
              , inString rHS
              ]

getOnDoubleClick :: Int32
                 -> Application a0
                 -> IO String
getOnDoubleClick lcid =
  propertyGet "OnDoubleClick"
              [inInt32 lcid]
              outString

setOnDoubleClick :: Int32
                 -> String
                 -> Application a0
                 -> IO ()
setOnDoubleClick lcid rHS =
  propertySet "OnDoubleClick"
              [ inInt32 lcid
              , inString rHS
              ]

getOnEntry :: Int32
           -> Application a0
           -> IO String
getOnEntry lcid =
  propertyGet "OnEntry"
              [inInt32 lcid]
              outString

setOnEntry :: Int32
           -> String
           -> Application a0
           -> IO ()
setOnEntry lcid rHS =
  propertySet "OnEntry"
              [ inInt32 lcid
              , inString rHS
              ]

onKey :: (Variant a1)
      => String
      -> a1
      -> Int32
      -> Application a0
      -> IO ()
onKey key procedure lcid =
  method0 "OnKey"
          [ inString key
          , inVariant procedure
          , inInt32 lcid
          ]

onRepeat :: String
         -> String
         -> Int32
         -> Application a0
         -> IO ()
onRepeat text procedure lcid =
  method0 "OnRepeat"
          [ inString text
          , inString procedure
          , inInt32 lcid
          ]

getOnSheetActivate :: Int32
                   -> Application a0
                   -> IO String
getOnSheetActivate lcid =
  propertyGet "OnSheetActivate"
              [inInt32 lcid]
              outString

setOnSheetActivate :: Int32
                   -> String
                   -> Application a0
                   -> IO ()
setOnSheetActivate lcid rHS =
  propertySet "OnSheetActivate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetDeactivate :: Int32
                     -> Application a0
                     -> IO String
getOnSheetDeactivate lcid =
  propertyGet "OnSheetDeactivate"
              [inInt32 lcid]
              outString

setOnSheetDeactivate :: Int32
                     -> String
                     -> Application a0
                     -> IO ()
setOnSheetDeactivate lcid rHS =
  propertySet "OnSheetDeactivate"
              [ inInt32 lcid
              , inString rHS
              ]

onTime :: (Variant a2, Variant a3)
       => a1
       -> String
       -> a2
       -> a3
       -> Int32
       -> Application a0
       -> IO ()
onTime earliestTime procedure latestTime schedule lcid =
  method0 "OnTime"
          [ inVariant earliestTime
          , inString procedure
          , inVariant latestTime
          , inVariant schedule
          , inInt32 lcid
          ]

onUndo :: String
       -> String
       -> Int32
       -> Application a0
       -> IO ()
onUndo text procedure lcid =
  method0 "OnUndo"
          [ inString text
          , inString procedure
          , inInt32 lcid
          ]

getOnWindow0 :: Int32
             -> Application a0
             -> IO String
getOnWindow0 lcid =
  propertyGet "OnWindow"
              [inInt32 lcid]
              outString

setOnWindow0 :: Int32
             -> String
             -> Application a0
             -> IO ()
setOnWindow0 lcid rHS =
  propertySet "OnWindow"
              [ inInt32 lcid
              , inString rHS
              ]

getOperatingSystem :: Int32
                   -> Application a0
                   -> IO String
getOperatingSystem lcid =
  propertyGet "OperatingSystem"
              [inInt32 lcid]
              outString

getOrganizationName :: Int32
                    -> Application a0
                    -> IO String
getOrganizationName lcid =
  propertyGet "OrganizationName"
              [inInt32 lcid]
              outString

getPath :: Int32
        -> Application a0
        -> IO String
getPath lcid =
  propertyGet "Path"
              [inInt32 lcid]
              outString

getPathSeparator :: Int32
                 -> Application a0
                 -> IO String
getPathSeparator lcid =
  propertyGet "PathSeparator"
              [inInt32 lcid]
              outString

getPreviousSelections :: (Variant a1, Variant a2)
                      => a2
                      -> Int32
                      -> Application a0
                      -> IO a1
getPreviousSelections index lcid =
  propertyGet "PreviousSelections"
              [ inVariant index
              , inInt32 lcid
              ]
              outVariant

getPivotTableSelection :: Application a0
                       -> IO Bool
getPivotTableSelection =
  propertyGet "PivotTableSelection"
              []
              outBool

setPivotTableSelection :: Bool
                       -> Application a0
                       -> IO ()
setPivotTableSelection rHS =
  propertySet "PivotTableSelection"
              [inBool rHS]

getPromptForSummaryInfo :: Int32
                        -> Application a0
                        -> IO Bool
getPromptForSummaryInfo lcid =
  propertyGet "PromptForSummaryInfo"
              [inInt32 lcid]
              outBool

setPromptForSummaryInfo :: Int32
                        -> Bool
                        -> Application a0
                        -> IO ()
setPromptForSummaryInfo lcid rHS =
  propertySet "PromptForSummaryInfo"
              [ inInt32 lcid
              , inBool rHS
              ]

quit :: Application a0
     -> IO ()
quit =
  method0 "Quit"
          []

recordMacro :: (Variant a1, Variant a2)
            => a1
            -> a2
            -> Int32
            -> Application a0
            -> IO ()
recordMacro basicCode xlmCode lcid =
  method0 "RecordMacro"
          [ inVariant basicCode
          , inVariant xlmCode
          , inInt32 lcid
          ]

getRecordRelative :: Int32
                  -> Application a0
                  -> IO Bool
getRecordRelative lcid =
  propertyGet "RecordRelative"
              [inInt32 lcid]
              outBool

getReferenceStyle :: Int32
                  -> Application a0
                  -> IO XlReferenceStyle
getReferenceStyle lcid =
  propertyGet "ReferenceStyle"
              [inInt32 lcid]
              outEnum

setReferenceStyle :: Int32
                  -> XlReferenceStyle
                  -> Application a0
                  -> IO ()
setReferenceStyle lcid rHS =
  propertySet "ReferenceStyle"
              [ inInt32 lcid
              , inEnum rHS
              ]

getRegisteredFunctions :: (Variant a1, Variant a2, Variant a3)
                       => a2
                       -> a3
                       -> Int32
                       -> Application a0
                       -> IO a1
getRegisteredFunctions index1 index2 lcid =
  propertyGet "RegisteredFunctions"
              [ inVariant index1
              , inVariant index2
              , inInt32 lcid
              ]
              outVariant

registerXLL :: String
            -> Int32
            -> Application a0
            -> IO Bool
registerXLL filename lcid =
  function1 "RegisterXLL"
            [ inString filename
            , inInt32 lcid
            ]
            outBool

repeat :: Int32
       -> Application a0
       -> IO ()
repeat lcid =
  method0 "Repeat"
          [inInt32 lcid]

resetTipWizard :: Int32
               -> Application a0
               -> IO ()
resetTipWizard lcid =
  method0 "ResetTipWizard"
          [inInt32 lcid]

getRollZoom :: Application a0
            -> IO Bool
getRollZoom =
  propertyGet "RollZoom"
              []
              outBool

setRollZoom :: Bool
            -> Application a0
            -> IO ()
setRollZoom rHS =
  propertySet "RollZoom"
              [inBool rHS]

save :: (Variant a1)
     => a1
     -> Int32
     -> Application a0
     -> IO ()
save filename lcid =
  method0 "Save"
          [ inVariant filename
          , inInt32 lcid
          ]

saveWorkspace :: (Variant a1)
              => a1
              -> Int32
              -> Application a0
              -> IO ()
saveWorkspace filename lcid =
  method0 "SaveWorkspace"
          [ inVariant filename
          , inInt32 lcid
          ]

getScreenUpdating :: Int32
                  -> Application a0
                  -> IO Bool
getScreenUpdating lcid =
  propertyGet "ScreenUpdating"
              [inInt32 lcid]
              outBool

setScreenUpdating :: Int32
                  -> Bool
                  -> Application a0
                  -> IO ()
setScreenUpdating lcid rHS =
  propertySet "ScreenUpdating"
              [ inInt32 lcid
              , inBool rHS
              ]

setDefaultChart :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Application a0
                -> IO ()
setDefaultChart formatName gallery =
  method0 "SetDefaultChart"
          [ inVariant formatName
          , inVariant gallery
          ]

getSheetsInNewWorkbook :: Int32
                       -> Application a0
                       -> IO Int32
getSheetsInNewWorkbook lcid =
  propertyGet "SheetsInNewWorkbook"
              [inInt32 lcid]
              outInt32

setSheetsInNewWorkbook :: Int32
                       -> Int32
                       -> Application a0
                       -> IO ()
setSheetsInNewWorkbook lcid rHS =
  propertySet "SheetsInNewWorkbook"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getShowChartTipNames :: Application a0
                     -> IO Bool
getShowChartTipNames =
  propertyGet "ShowChartTipNames"
              []
              outBool

setShowChartTipNames :: Bool
                     -> Application a0
                     -> IO ()
setShowChartTipNames rHS =
  propertySet "ShowChartTipNames"
              [inBool rHS]

getShowChartTipValues :: Application a0
                      -> IO Bool
getShowChartTipValues =
  propertyGet "ShowChartTipValues"
              []
              outBool

setShowChartTipValues :: Bool
                      -> Application a0
                      -> IO ()
setShowChartTipValues rHS =
  propertySet "ShowChartTipValues"
              [inBool rHS]

getStandardFont :: Int32
                -> Application a0
                -> IO String
getStandardFont lcid =
  propertyGet "StandardFont"
              [inInt32 lcid]
              outString

setStandardFont :: Int32
                -> String
                -> Application a0
                -> IO ()
setStandardFont lcid rHS =
  propertySet "StandardFont"
              [ inInt32 lcid
              , inString rHS
              ]

getStandardFontSize :: Int32
                    -> Application a0
                    -> IO Double
getStandardFontSize lcid =
  propertyGet "StandardFontSize"
              [inInt32 lcid]
              outDouble

setStandardFontSize :: Int32
                    -> Double
                    -> Application a0
                    -> IO ()
setStandardFontSize lcid rHS =
  propertySet "StandardFontSize"
              [ inInt32 lcid
              , inDouble rHS
              ]

getStartupPath :: Int32
               -> Application a0
               -> IO String
getStartupPath lcid =
  propertyGet "StartupPath"
              [inInt32 lcid]
              outString

getStatusBar :: (Variant a1)
             => Int32
             -> Application a0
             -> IO a1
getStatusBar lcid =
  propertyGet "StatusBar"
              [inInt32 lcid]
              outVariant

setStatusBar :: Int32
             -> a1
             -> Application a0
             -> IO ()
setStatusBar lcid rHS =
  propertySet "StatusBar"
              [ inInt32 lcid
              , inVariant rHS
              ]

getTemplatesPath :: Int32
                 -> Application a0
                 -> IO String
getTemplatesPath lcid =
  propertyGet "TemplatesPath"
              [inInt32 lcid]
              outString

getShowToolTips :: Application a0
                -> IO Bool
getShowToolTips =
  propertyGet "ShowToolTips"
              []
              outBool

setShowToolTips :: Bool
                -> Application a0
                -> IO ()
setShowToolTips rHS =
  propertySet "ShowToolTips"
              [inBool rHS]

getTop0 :: Int32
        -> Application a0
        -> IO Double
getTop0 lcid =
  propertyGet "Top"
              [inInt32 lcid]
              outDouble

setTop0 :: Int32
        -> Double
        -> Application a0
        -> IO ()
setTop0 lcid rHS =
  propertySet "Top"
              [ inInt32 lcid
              , inDouble rHS
              ]

getDefaultSaveFormat :: Application a0
                     -> IO XlFileFormat
getDefaultSaveFormat =
  propertyGet "DefaultSaveFormat"
              []
              outEnum

setDefaultSaveFormat :: XlFileFormat
                     -> Application a0
                     -> IO ()
setDefaultSaveFormat rHS =
  propertySet "DefaultSaveFormat"
              [inEnum rHS]

getTransitionMenuKey :: Int32
                     -> Application a0
                     -> IO String
getTransitionMenuKey lcid =
  propertyGet "TransitionMenuKey"
              [inInt32 lcid]
              outString

setTransitionMenuKey :: Int32
                     -> String
                     -> Application a0
                     -> IO ()
setTransitionMenuKey lcid rHS =
  propertySet "TransitionMenuKey"
              [ inInt32 lcid
              , inString rHS
              ]

getTransitionMenuKeyAction :: Int32
                           -> Application a0
                           -> IO Int32
getTransitionMenuKeyAction lcid =
  propertyGet "TransitionMenuKeyAction"
              [inInt32 lcid]
              outInt32

setTransitionMenuKeyAction :: Int32
                           -> Int32
                           -> Application a0
                           -> IO ()
setTransitionMenuKeyAction lcid rHS =
  propertySet "TransitionMenuKeyAction"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getTransitionNavigKeys :: Int32
                       -> Application a0
                       -> IO Bool
getTransitionNavigKeys lcid =
  propertyGet "TransitionNavigKeys"
              [inInt32 lcid]
              outBool

setTransitionNavigKeys :: Int32
                       -> Bool
                       -> Application a0
                       -> IO ()
setTransitionNavigKeys lcid rHS =
  propertySet "TransitionNavigKeys"
              [ inInt32 lcid
              , inBool rHS
              ]

undo :: Int32
     -> Application a0
     -> IO ()
undo lcid =
  method0 "Undo"
          [inInt32 lcid]

getUsableHeight0 :: Int32
                 -> Application a0
                 -> IO Double
getUsableHeight0 lcid =
  propertyGet "UsableHeight"
              [inInt32 lcid]
              outDouble

getUsableWidth0 :: Int32
                -> Application a0
                -> IO Double
getUsableWidth0 lcid =
  propertyGet "UsableWidth"
              [inInt32 lcid]
              outDouble

getUserControl :: Application a0
               -> IO Bool
getUserControl =
  propertyGet "UserControl"
              []
              outBool

setUserControl :: Bool
               -> Application a0
               -> IO ()
setUserControl rHS =
  propertySet "UserControl"
              [inBool rHS]

getUserName :: Int32
            -> Application a0
            -> IO String
getUserName lcid =
  propertyGet "UserName"
              [inInt32 lcid]
              outString

setUserName :: Int32
            -> String
            -> Application a0
            -> IO ()
setUserName lcid rHS =
  propertySet "UserName"
              [ inInt32 lcid
              , inString rHS
              ]

getValue :: Application a0
         -> IO String
getValue =
  propertyGet "Value"
              []
              outString

getVBE :: Application a0
       -> IO (Maybe VBE)
getVBE iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getVBE methPtr iptr rHS) 280 iptr
    doThenFree free (readunique readVBE) rHS

foreign import stdcall "dynamic" prim_Excel_getVBE :: Ptr () -> Ptr () -> Ptr (Ptr VBE) -> IO Int32
getVersion :: Int32
           -> Application a0
           -> IO String
getVersion lcid =
  propertyGet "Version"
              [inInt32 lcid]
              outString

getVisible4 :: Int32
            -> Application a0
            -> IO Bool
getVisible4 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outBool

setVisible4 :: Int32
            -> Bool
            -> Application a0
            -> IO ()
setVisible4 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inBool rHS
              ]

volatile :: (Variant a1)
         => a1
         -> Int32
         -> Application a0
         -> IO ()
volatile volatile0 lcid =
  method0 "Volatile"
          [ inVariant volatile0
          , inInt32 lcid
          ]

wait :: a1
     -> Int32
     -> Application a0
     -> IO ()
wait time lcid =
  method0 "_Wait"
          [ inVariant time
          , inInt32 lcid
          ]

getWidth0 :: Int32
          -> Application a0
          -> IO Double
getWidth0 lcid =
  propertyGet "Width"
              [inInt32 lcid]
              outDouble

setWidth0 :: Int32
          -> Double
          -> Application a0
          -> IO ()
setWidth0 lcid rHS =
  propertySet "Width"
              [ inInt32 lcid
              , inDouble rHS
              ]

getWindowsForPens :: Int32
                  -> Application a0
                  -> IO Bool
getWindowsForPens lcid =
  propertyGet "WindowsForPens"
              [inInt32 lcid]
              outBool

getWindowState0 :: Int32
                -> Application a0
                -> IO XlWindowState
getWindowState0 lcid =
  propertyGet "WindowState"
              [inInt32 lcid]
              outEnum

setWindowState0 :: Int32
                -> XlWindowState
                -> Application a0
                -> IO ()
setWindowState0 lcid rHS =
  propertySet "WindowState"
              [ inInt32 lcid
              , inEnum rHS
              ]

getUILanguage :: Int32
              -> Application a0
              -> IO Int32
getUILanguage lcid =
  propertyGet "UILanguage"
              [inInt32 lcid]
              outInt32

setUILanguage :: Int32
              -> Int32
              -> Application a0
              -> IO ()
setUILanguage lcid rHS =
  propertySet "UILanguage"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getDefaultSheetDirection :: Int32
                         -> Application a0
                         -> IO Int32
getDefaultSheetDirection lcid =
  propertyGet "DefaultSheetDirection"
              [inInt32 lcid]
              outInt32

setDefaultSheetDirection :: Int32
                         -> Int32
                         -> Application a0
                         -> IO ()
setDefaultSheetDirection lcid rHS =
  propertySet "DefaultSheetDirection"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getCursorMovement :: Int32
                  -> Application a0
                  -> IO Int32
getCursorMovement lcid =
  propertyGet "CursorMovement"
              [inInt32 lcid]
              outInt32

setCursorMovement :: Int32
                  -> Int32
                  -> Application a0
                  -> IO ()
setCursorMovement lcid rHS =
  propertySet "CursorMovement"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getControlCharacters :: Int32
                     -> Application a0
                     -> IO Bool
getControlCharacters lcid =
  propertyGet "ControlCharacters"
              [inInt32 lcid]
              outBool

setControlCharacters :: Int32
                     -> Bool
                     -> Application a0
                     -> IO ()
setControlCharacters lcid rHS =
  propertySet "ControlCharacters"
              [ inInt32 lcid
              , inBool rHS
              ]

wSFunction :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> a12
           -> a13
           -> a14
           -> a15
           -> a16
           -> a17
           -> a18
           -> a19
           -> a20
           -> a21
           -> a22
           -> a23
           -> a24
           -> a25
           -> a26
           -> a27
           -> a28
           -> a29
           -> a30
           -> a31
           -> Int32
           -> Application a0
           -> IO a1
wSFunction arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "_WSFunction"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outVariant

getEnableEvents :: Application a0
                -> IO Bool
getEnableEvents =
  propertyGet "EnableEvents"
              []
              outBool

setEnableEvents :: Bool
                -> Application a0
                -> IO ()
setEnableEvents rHS =
  propertySet "EnableEvents"
              [inBool rHS]

getDisplayInfoWindow :: Application a0
                     -> IO Bool
getDisplayInfoWindow =
  propertyGet "DisplayInfoWindow"
              []
              outBool

setDisplayInfoWindow :: Bool
                     -> Application a0
                     -> IO ()
setDisplayInfoWindow rHS =
  propertySet "DisplayInfoWindow"
              [inBool rHS]

wait0 :: a1
      -> Int32
      -> Application a0
      -> IO Bool
wait0 time lcid =
  function1 "Wait"
            [ inVariant time
            , inInt32 lcid
            ]
            outBool

getExtendList :: Application a0
              -> IO Bool
getExtendList =
  propertyGet "ExtendList"
              []
              outBool

setExtendList :: Bool
              -> Application a0
              -> IO ()
setExtendList rHS =
  propertySet "ExtendList"
              [inBool rHS]

getOLEDBErrors :: Application a0
               -> IO (OLEDBErrors ())
getOLEDBErrors =
  propertyGet "OLEDBErrors"
              []
              outIUnknown

getPhonetic :: (Variant a1)
            => a1
            -> Application a0
            -> IO String
getPhonetic text =
  function1 "GetPhonetic"
            [inVariant text]
            outString

getCOMAddIns :: Application a0
             -> IO (Maybe COMAddIns)
getCOMAddIns iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getCOMAddIns methPtr iptr rHS) 309 iptr
    doThenFree free (readunique readCOMAddIns) rHS

foreign import stdcall "dynamic" prim_Excel_getCOMAddIns :: Ptr () -> Ptr () -> Ptr (Ptr COMAddIns) -> IO Int32
getDefaultWebOptions :: Application a0
                     -> IO (DefaultWebOptions ())
getDefaultWebOptions =
  propertyGet "DefaultWebOptions"
              []
              outIUnknown

getProductCode :: Application a0
               -> IO String
getProductCode =
  propertyGet "ProductCode"
              []
              outString

getUserLibraryPath :: Application a0
                   -> IO String
getUserLibraryPath =
  propertyGet "UserLibraryPath"
              []
              outString

getAutoPercentEntry :: Application a0
                    -> IO Bool
getAutoPercentEntry =
  propertyGet "AutoPercentEntry"
              []
              outBool

setAutoPercentEntry :: Bool
                    -> Application a0
                    -> IO ()
setAutoPercentEntry rHS =
  propertySet "AutoPercentEntry"
              [inBool rHS]

getLanguageSettings :: Application a0
                    -> IO (Maybe LanguageSettings)
getLanguageSettings iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getLanguageSettings methPtr iptr rHS) 315 iptr
    doThenFree free (readunique readLanguageSettings) rHS

foreign import stdcall "dynamic" prim_Excel_getLanguageSettings :: Ptr () -> Ptr () -> Ptr (Ptr LanguageSettings) -> IO Int32
getDummy101 :: Application a0
            -> IO (IDispatch ())
getDummy101 =
  propertyGet "Dummy101"
              []
              outIDispatch

dummy12 :: PivotTable a1
        -> PivotTable a2
        -> Application a0
        -> IO ()
dummy12 p1 p2 =
  method0 "Dummy12"
          [ inIUnknown p1
          , inIUnknown p2
          ]

getAnswerWizard :: Application a0
                -> IO (Maybe AnswerWizard)
getAnswerWizard iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAnswerWizard methPtr iptr rHS) 318 iptr
    doThenFree free (readunique readAnswerWizard) rHS

foreign import stdcall "dynamic" prim_Excel_getAnswerWizard :: Ptr () -> Ptr () -> Ptr (Ptr AnswerWizard) -> IO Int32
calculateFull :: Application a0
              -> IO ()
calculateFull =
  method0 "CalculateFull"
          []

findFile0 :: Int32
          -> Application a0
          -> IO Bool
findFile0 lcid =
  function1 "FindFile"
            [inInt32 lcid]
            outBool

getCalculationVersion :: Application a0
                      -> IO Int32
getCalculationVersion =
  propertyGet "CalculationVersion"
              []
              outInt32

getShowWindowsInTaskbar :: Application a0
                        -> IO Bool
getShowWindowsInTaskbar =
  propertyGet "ShowWindowsInTaskbar"
              []
              outBool

setShowWindowsInTaskbar :: Bool
                        -> Application a0
                        -> IO ()
setShowWindowsInTaskbar rHS =
  propertySet "ShowWindowsInTaskbar"
              [inBool rHS]

getFeatureInstall :: Application a0
                  -> IO MsoFeatureInstall
getFeatureInstall iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoFeatureInstall)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getFeatureInstall methPtr iptr rHS) 324 iptr
    doThenFree free readMsoFeatureInstall rHS

foreign import stdcall "dynamic" prim_Excel_getFeatureInstall :: Ptr () -> Ptr () -> Ptr MsoFeatureInstall -> IO Int32
setFeatureInstall :: MsoFeatureInstall
                  -> Application a0
                  -> IO ()
setFeatureInstall rHS iptr =
  do
    rHS <- marshallMsoFeatureInstall rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setFeatureInstall methPtr iptr rHS) 325 iptr

foreign import stdcall "prim_Excel_setFeatureInstall" prim_Excel_setFeatureInstall :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getReady :: Application a0
         -> IO Bool
getReady =
  propertyGet "Ready"
              []
              outBool

dummy13 :: (Variant a1, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
        => a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> a31
        -> Application a0
        -> IO a1
dummy13 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Dummy13"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

getFindFormat :: Application a0
              -> IO (CellFormat ())
getFindFormat =
  propertyGet "FindFormat"
              []
              outIUnknown

setFindFormat :: CellFormat a1
              -> Application a0
              -> IO ()
setFindFormat rHS =
  propertySet "FindFormat"
              [inIUnknown rHS]

getReplaceFormat :: Application a0
                 -> IO (CellFormat ())
getReplaceFormat =
  propertyGet "ReplaceFormat"
              []
              outIUnknown

setReplaceFormat :: CellFormat a1
                 -> Application a0
                 -> IO ()
setReplaceFormat rHS =
  propertySet "ReplaceFormat"
              [inIUnknown rHS]

getUsedObjects :: Application a0
               -> IO (UsedObjects ())
getUsedObjects =
  propertyGet "UsedObjects"
              []
              outIUnknown

getCalculationState :: Application a0
                    -> IO XlCalculationState
getCalculationState =
  propertyGet "CalculationState"
              []
              outEnum

getCalculationInterruptKey :: Application a0
                           -> IO XlCalculationInterruptKey
getCalculationInterruptKey =
  propertyGet "CalculationInterruptKey"
              []
              outEnum

setCalculationInterruptKey :: XlCalculationInterruptKey
                           -> Application a0
                           -> IO ()
setCalculationInterruptKey rHS =
  propertySet "CalculationInterruptKey"
              [inEnum rHS]

getWatches :: Application a0
           -> IO (Watches ())
getWatches =
  propertyGet "Watches"
              []
              outIUnknown

getDisplayFunctionToolTips :: Application a0
                           -> IO Bool
getDisplayFunctionToolTips =
  propertyGet "DisplayFunctionToolTips"
              []
              outBool

setDisplayFunctionToolTips :: Bool
                           -> Application a0
                           -> IO ()
setDisplayFunctionToolTips rHS =
  propertySet "DisplayFunctionToolTips"
              [inBool rHS]

getAutomationSecurity :: Application a0
                      -> IO MsoAutomationSecurity
getAutomationSecurity iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoAutomationSecurity)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAutomationSecurity methPtr iptr rHS) 339 iptr
    doThenFree free readMsoAutomationSecurity rHS

foreign import stdcall "dynamic" prim_Excel_getAutomationSecurity :: Ptr () -> Ptr () -> Ptr MsoAutomationSecurity -> IO Int32
setAutomationSecurity :: MsoAutomationSecurity
                      -> Application a0
                      -> IO ()
setAutomationSecurity rHS iptr =
  do
    rHS <- marshallMsoAutomationSecurity rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setAutomationSecurity methPtr iptr rHS) 340 iptr

foreign import stdcall "prim_Excel_setAutomationSecurity" prim_Excel_setAutomationSecurity :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFileDialog :: MsoFileDialogType
              -> Application a0
              -> IO (Maybe FileDialog)
getFileDialog fileDialogType iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    fileDialogType <- marshallMsoFileDialogType fileDialogType
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getFileDialog methPtr iptr fileDialogType rHS) 341 iptr
    doThenFree free (readunique readFileDialog) rHS

foreign import stdcall "prim_Excel_getFileDialog" prim_Excel_getFileDialog :: Ptr () -> Ptr () -> Ptr () -> Ptr (Ptr FileDialog) -> IO Int32
dummy14 :: Application a0
        -> IO ()
dummy14 =
  method0 "Dummy14"
          []

calculateFullRebuild :: Application a0
                     -> IO ()
calculateFullRebuild =
  method0 "CalculateFullRebuild"
          []

getDisplayPasteOptions :: Application a0
                       -> IO Bool
getDisplayPasteOptions =
  propertyGet "DisplayPasteOptions"
              []
              outBool

setDisplayPasteOptions :: Bool
                       -> Application a0
                       -> IO ()
setDisplayPasteOptions rHS =
  propertySet "DisplayPasteOptions"
              [inBool rHS]

getDisplayInsertOptions :: Application a0
                        -> IO Bool
getDisplayInsertOptions =
  propertyGet "DisplayInsertOptions"
              []
              outBool

setDisplayInsertOptions :: Bool
                        -> Application a0
                        -> IO ()
setDisplayInsertOptions rHS =
  propertySet "DisplayInsertOptions"
              [inBool rHS]

getGenerateGetPivotData :: Application a0
                        -> IO Bool
getGenerateGetPivotData =
  propertyGet "GenerateGetPivotData"
              []
              outBool

setGenerateGetPivotData :: Bool
                        -> Application a0
                        -> IO ()
setGenerateGetPivotData rHS =
  propertySet "GenerateGetPivotData"
              [inBool rHS]

getAutoRecover :: Application a0
               -> IO (AutoRecover ())
getAutoRecover =
  propertyGet "AutoRecover"
              []
              outIUnknown

getHwnd :: Application a0
        -> IO Int32
getHwnd =
  propertyGet "Hwnd"
              []
              outInt32

getHinstance :: Application a0
             -> IO Int32
getHinstance =
  propertyGet "Hinstance"
              []
              outInt32

checkAbort :: (Variant a1)
           => a1
           -> Application a0
           -> IO ()
checkAbort keepAbort =
  method0 "CheckAbort"
          [inVariant keepAbort]

getErrorCheckingOptions :: Application a0
                        -> IO (ErrorCheckingOptions ())
getErrorCheckingOptions =
  propertyGet "ErrorCheckingOptions"
              []
              outIUnknown

getAutoFormatAsYouTypeReplaceHyperlinks :: Application a0
                                        -> IO Bool
getAutoFormatAsYouTypeReplaceHyperlinks =
  propertyGet "AutoFormatAsYouTypeReplaceHyperlinks"
              []
              outBool

setAutoFormatAsYouTypeReplaceHyperlinks :: Bool
                                        -> Application a0
                                        -> IO ()
setAutoFormatAsYouTypeReplaceHyperlinks rHS =
  propertySet "AutoFormatAsYouTypeReplaceHyperlinks"
              [inBool rHS]

getSmartTagRecognizers :: Application a0
                       -> IO (SmartTagRecognizers ())
getSmartTagRecognizers =
  propertyGet "SmartTagRecognizers"
              []
              outIUnknown

getNewWorkbook :: Application a0
               -> IO (Maybe NewFile)
getNewWorkbook iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getNewWorkbook methPtr iptr rHS) 358 iptr
    doThenFree free (readunique readNewFile) rHS

foreign import stdcall "dynamic" prim_Excel_getNewWorkbook :: Ptr () -> Ptr () -> Ptr (Ptr NewFile) -> IO Int32
getSpellingOptions :: Application a0
                   -> IO (SpellingOptions ())
getSpellingOptions =
  propertyGet "SpellingOptions"
              []
              outIUnknown

getSpeech :: Application a0
          -> IO (Speech ())
getSpeech =
  propertyGet "Speech"
              []
              outIUnknown

getMapPaperSize :: Application a0
                -> IO Bool
getMapPaperSize =
  propertyGet "MapPaperSize"
              []
              outBool

setMapPaperSize :: Bool
                -> Application a0
                -> IO ()
setMapPaperSize rHS =
  propertySet "MapPaperSize"
              [inBool rHS]

getShowStartupDialog :: Application a0
                     -> IO Bool
getShowStartupDialog =
  propertyGet "ShowStartupDialog"
              []
              outBool

setShowStartupDialog :: Bool
                     -> Application a0
                     -> IO ()
setShowStartupDialog rHS =
  propertySet "ShowStartupDialog"
              [inBool rHS]

getDecimalSeparator :: Application a0
                    -> IO String
getDecimalSeparator =
  propertyGet "DecimalSeparator"
              []
              outString

setDecimalSeparator :: String
                    -> Application a0
                    -> IO ()
setDecimalSeparator rHS =
  propertySet "DecimalSeparator"
              [inString rHS]

getThousandsSeparator :: Application a0
                      -> IO String
getThousandsSeparator =
  propertyGet "ThousandsSeparator"
              []
              outString

setThousandsSeparator :: String
                      -> Application a0
                      -> IO ()
setThousandsSeparator rHS =
  propertySet "ThousandsSeparator"
              [inString rHS]

getUseSystemSeparators :: Application a0
                       -> IO Bool
getUseSystemSeparators =
  propertyGet "UseSystemSeparators"
              []
              outBool

setUseSystemSeparators :: Bool
                       -> Application a0
                       -> IO ()
setUseSystemSeparators rHS =
  propertySet "UseSystemSeparators"
              [inBool rHS]

getThisCell :: Application a0
            -> IO (Range ())
getThisCell =
  propertyGet "ThisCell"
              []
              outIUnknown

getRTD :: Application a0
       -> IO (RTD ())
getRTD =
  propertyGet "RTD"
              []
              outIUnknown

getDisplayDocumentActionTaskPane :: Application a0
                                 -> IO Bool
getDisplayDocumentActionTaskPane =
  propertyGet "DisplayDocumentActionTaskPane"
              []
              outBool

setDisplayDocumentActionTaskPane :: Bool
                                 -> Application a0
                                 -> IO ()
setDisplayDocumentActionTaskPane rHS =
  propertySet "DisplayDocumentActionTaskPane"
              [inBool rHS]

displayXMLSourcePane :: (Variant a1)
                     => a1
                     -> Application a0
                     -> IO ()
displayXMLSourcePane xmlMap =
  method0 "DisplayXMLSourcePane"
          [inVariant xmlMap]

getArbitraryXMLSupportAvailable :: Application a0
                                -> IO Bool
getArbitraryXMLSupportAvailable =
  propertyGet "ArbitraryXMLSupportAvailable"
              []
              outBool

support :: (Variant a1, Variant a3)
        => IDispatch a2
        -> Int32
        -> a3
        -> Application a0
        -> IO a1
support object iD arg =
  function1 "Support"
            [ inIDispatch object
            , inInt32 iD
            , inVariant arg
            ]
            outVariant

dummy20 :: (Variant a1)
        => Int32
        -> Application a0
        -> IO a1
dummy20 grfCompareFunctions =
  function1 "Dummy20"
            [inInt32 grfCompareFunctions]
            outVariant

getMeasurementUnit :: Application a0
                   -> IO Int32
getMeasurementUnit =
  propertyGet "MeasurementUnit"
              []
              outInt32

setMeasurementUnit :: Int32
                   -> Application a0
                   -> IO ()
setMeasurementUnit rHS =
  propertySet "MeasurementUnit"
              [inInt32 rHS]

getShowSelectionFloaties :: Application a0
                         -> IO Bool
getShowSelectionFloaties =
  propertyGet "ShowSelectionFloaties"
              []
              outBool

setShowSelectionFloaties :: Bool
                         -> Application a0
                         -> IO ()
setShowSelectionFloaties rHS =
  propertySet "ShowSelectionFloaties"
              [inBool rHS]

getShowMenuFloaties :: Application a0
                    -> IO Bool
getShowMenuFloaties =
  propertyGet "ShowMenuFloaties"
              []
              outBool

setShowMenuFloaties :: Bool
                    -> Application a0
                    -> IO ()
setShowMenuFloaties rHS =
  propertySet "ShowMenuFloaties"
              [inBool rHS]

getShowDevTools :: Application a0
                -> IO Bool
getShowDevTools =
  propertyGet "ShowDevTools"
              []
              outBool

setShowDevTools :: Bool
                -> Application a0
                -> IO ()
setShowDevTools rHS =
  propertySet "ShowDevTools"
              [inBool rHS]

getEnableLivePreview :: Application a0
                     -> IO Bool
getEnableLivePreview =
  propertyGet "EnableLivePreview"
              []
              outBool

setEnableLivePreview :: Bool
                     -> Application a0
                     -> IO ()
setEnableLivePreview rHS =
  propertySet "EnableLivePreview"
              [inBool rHS]

getDisplayDocumentInformationPanel :: Application a0
                                   -> IO Bool
getDisplayDocumentInformationPanel =
  propertyGet "DisplayDocumentInformationPanel"
              []
              outBool

setDisplayDocumentInformationPanel :: Bool
                                   -> Application a0
                                   -> IO ()
setDisplayDocumentInformationPanel rHS =
  propertySet "DisplayDocumentInformationPanel"
              [inBool rHS]

getAlwaysUseClearType :: Application a0
                      -> IO Bool
getAlwaysUseClearType =
  propertyGet "AlwaysUseClearType"
              []
              outBool

setAlwaysUseClearType :: Bool
                      -> Application a0
                      -> IO ()
setAlwaysUseClearType rHS =
  propertySet "AlwaysUseClearType"
              [inBool rHS]

getWarnOnFunctionNameConflict :: Application a0
                              -> IO Bool
getWarnOnFunctionNameConflict =
  propertyGet "WarnOnFunctionNameConflict"
              []
              outBool

setWarnOnFunctionNameConflict :: Bool
                              -> Application a0
                              -> IO ()
setWarnOnFunctionNameConflict rHS =
  propertySet "WarnOnFunctionNameConflict"
              [inBool rHS]

getFormulaBarHeight :: Application a0
                    -> IO Int32
getFormulaBarHeight =
  propertyGet "FormulaBarHeight"
              []
              outInt32

setFormulaBarHeight :: Int32
                    -> Application a0
                    -> IO ()
setFormulaBarHeight rHS =
  propertySet "FormulaBarHeight"
              [inInt32 rHS]

getDisplayFormulaAutoComplete :: Application a0
                              -> IO Bool
getDisplayFormulaAutoComplete =
  propertyGet "DisplayFormulaAutoComplete"
              []
              outBool

setDisplayFormulaAutoComplete :: Bool
                              -> Application a0
                              -> IO ()
setDisplayFormulaAutoComplete rHS =
  propertySet "DisplayFormulaAutoComplete"
              [inBool rHS]

getGenerateTableRefs :: Int32
                     -> Application a0
                     -> IO XlGenerateTableRefs
getGenerateTableRefs lcid =
  propertyGet "GenerateTableRefs"
              [inInt32 lcid]
              outEnum

setGenerateTableRefs :: Int32
                     -> XlGenerateTableRefs
                     -> Application a0
                     -> IO ()
setGenerateTableRefs lcid rHS =
  propertySet "GenerateTableRefs"
              [ inInt32 lcid
              , inEnum rHS
              ]

getAssistance :: Application a0
              -> IO (Maybe IAssistance)
getAssistance iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAssistance methPtr iptr rHS) 401 iptr
    doThenFree free (readunique readIAssistance) rHS

foreign import stdcall "dynamic" prim_Excel_getAssistance :: Ptr () -> Ptr () -> Ptr (Ptr IAssistance) -> IO Int32
calculateUntilAsyncQueriesDone :: Application a0
                               -> IO ()
calculateUntilAsyncQueriesDone =
  method0 "CalculateUntilAsyncQueriesDone"
          []

getEnableLargeOperationAlert :: Application a0
                             -> IO Bool
getEnableLargeOperationAlert =
  propertyGet "EnableLargeOperationAlert"
              []
              outBool

setEnableLargeOperationAlert :: Bool
                             -> Application a0
                             -> IO ()
setEnableLargeOperationAlert rHS =
  propertySet "EnableLargeOperationAlert"
              [inBool rHS]

getLargeOperationCellThousandCount :: Application a0
                                   -> IO Int32
getLargeOperationCellThousandCount =
  propertyGet "LargeOperationCellThousandCount"
              []
              outInt32

setLargeOperationCellThousandCount :: Int32
                                   -> Application a0
                                   -> IO ()
setLargeOperationCellThousandCount rHS =
  propertySet "LargeOperationCellThousandCount"
              [inInt32 rHS]

getDeferAsyncQueries :: Application a0
                     -> IO Bool
getDeferAsyncQueries =
  propertyGet "DeferAsyncQueries"
              []
              outBool

setDeferAsyncQueries :: Bool
                     -> Application a0
                     -> IO ()
setDeferAsyncQueries rHS =
  propertySet "DeferAsyncQueries"
              [inBool rHS]

getMultiThreadedCalculation :: Application a0
                            -> IO (MultiThreadedCalculation ())
getMultiThreadedCalculation =
  propertyGet "MultiThreadedCalculation"
              []
              outIUnknown

sharePointVersion :: String
                  -> Application a0
                  -> IO Int32
sharePointVersion bstrUrl =
  function1 "SharePointVersion"
            [inString bstrUrl]
            outInt32

getActiveEncryptionSession :: Application a0
                           -> IO Int32
getActiveEncryptionSession =
  propertyGet "ActiveEncryptionSession"
              []
              outInt32

getHighQualityModeForGraphics :: Application a0
                              -> IO Bool
getHighQualityModeForGraphics =
  propertyGet "HighQualityModeForGraphics"
              []
              outBool

setHighQualityModeForGraphics :: Bool
                              -> Application a0
                              -> IO ()
setHighQualityModeForGraphics rHS =
  propertySet "HighQualityModeForGraphics"
              [inBool rHS]

getFileExportConverters :: Application a0
                        -> IO (FileExportConverters ())
getFileExportConverters =
  propertyGet "FileExportConverters"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IWorksheetFunction
-- 
-- --------------------------------------------------
data IWorksheetFunction_ a = IWorksheetFunction__ 
type IWorksheetFunction a = IDispatch (IWorksheetFunction_ a)
iidIWorksheetFunction :: IID (IWorksheetFunction ())
iidIWorksheetFunction =
  mkIID "{00020845-0001-0000-C000-000000000046}"

getApplication3 :: (Variant a1)
                => IWorksheetFunction a0
                -> IO a1
getApplication3 =
  propertyGet "Application"
              []
              outVariant

getCreator3 :: IWorksheetFunction a0
            -> IO XlCreator
getCreator3 =
  propertyGet "Creator"
              []
              outEnum

getParent18 :: IWorksheetFunction a0
            -> IO (IDispatch ())
getParent18 =
  propertyGet "Parent"
              []
              outIDispatch

wSFunction0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> a17
            -> a18
            -> a19
            -> a20
            -> a21
            -> a22
            -> a23
            -> a24
            -> a25
            -> a26
            -> a27
            -> a28
            -> a29
            -> a30
            -> a31
            -> IWorksheetFunction a0
            -> IO a1
wSFunction0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "_WSFunction"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

count :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> IWorksheetFunction a0
      -> IO Double
count arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Count"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

isNA :: a1
     -> IWorksheetFunction a0
     -> IO Bool
isNA arg1 =
  function1 "IsNA"
            [inVariant arg1]
            outBool

isError :: a1
        -> IWorksheetFunction a0
        -> IO Bool
isError arg1 =
  function1 "IsError"
            [inVariant arg1]
            outBool

sum :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Double
sum arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Sum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

average :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> IWorksheetFunction a0
        -> IO Double
average arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Average"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

min :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Double
min arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Min"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

max :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Double
max arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Max"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

npv :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
    => Double
    -> a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> IWorksheetFunction a0
    -> IO Double
npv arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Npv"
            [ inDouble arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

stDev :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> IWorksheetFunction a0
      -> IO Double
stDev arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "StDev"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

dollar :: (Variant a1)
       => Double
       -> a1
       -> IWorksheetFunction a0
       -> IO String
dollar arg1 arg2 =
  function1 "Dollar"
            [ inDouble arg1
            , inVariant arg2
            ]
            outString

fixed :: (Variant a1, Variant a2)
      => Double
      -> a1
      -> a2
      -> IWorksheetFunction a0
      -> IO String
fixed arg1 arg2 arg3 =
  function1 "Fixed"
            [ inDouble arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outString

pi :: IWorksheetFunction a0
   -> IO Double
pi =
  function1 "Pi"
            []
            outDouble

ln :: Double
   -> IWorksheetFunction a0
   -> IO Double
ln arg1 =
  function1 "Ln"
            [inDouble arg1]
            outDouble

log10 :: Double
      -> IWorksheetFunction a0
      -> IO Double
log10 arg1 =
  function1 "Log10"
            [inDouble arg1]
            outDouble

round :: Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
round arg1 arg2 =
  function1 "Round"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

lookup :: (Variant a1, Variant a4)
       => a2
       -> a3
       -> a4
       -> IWorksheetFunction a0
       -> IO a1
lookup arg1 arg2 arg3 =
  function1 "Lookup"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outVariant

index :: (Variant a1, Variant a3, Variant a4)
      => a2
      -> Double
      -> a3
      -> a4
      -> IWorksheetFunction a0
      -> IO a1
index arg1 arg2 arg3 arg4 =
  function1 "Index"
            [ inVariant arg1
            , inDouble arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

rept :: String
     -> Double
     -> IWorksheetFunction a0
     -> IO String
rept arg1 arg2 =
  function1 "Rept"
            [ inString arg1
            , inDouble arg2
            ]
            outString

and :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Bool
and arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "And"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outBool

or :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
   => a1
   -> a2
   -> a3
   -> a4
   -> a5
   -> a6
   -> a7
   -> a8
   -> a9
   -> a10
   -> a11
   -> a12
   -> a13
   -> a14
   -> a15
   -> a16
   -> a17
   -> a18
   -> a19
   -> a20
   -> a21
   -> a22
   -> a23
   -> a24
   -> a25
   -> a26
   -> a27
   -> a28
   -> a29
   -> a30
   -> IWorksheetFunction a0
   -> IO Bool
or arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Or"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outBool

dCount :: Range a1
       -> a2
       -> a3
       -> IWorksheetFunction a0
       -> IO Double
dCount arg1 arg2 arg3 =
  function1 "DCount"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dSum :: Range a1
     -> a2
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
dSum arg1 arg2 arg3 =
  function1 "DSum"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dAverage :: Range a1
         -> a2
         -> a3
         -> IWorksheetFunction a0
         -> IO Double
dAverage arg1 arg2 arg3 =
  function1 "DAverage"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dMin :: Range a1
     -> a2
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
dMin arg1 arg2 arg3 =
  function1 "DMin"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dMax :: Range a1
     -> a2
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
dMax arg1 arg2 arg3 =
  function1 "DMax"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dStDev :: Range a1
       -> a2
       -> a3
       -> IWorksheetFunction a0
       -> IO Double
dStDev arg1 arg2 arg3 =
  function1 "DStDev"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

var :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Double
var arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Var"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

dVar :: Range a1
     -> a2
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
dVar arg1 arg2 arg3 =
  function1 "DVar"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

text :: a1
     -> String
     -> IWorksheetFunction a0
     -> IO String
text arg1 arg2 =
  function1 "Text"
            [ inVariant arg1
            , inString arg2
            ]
            outString

linEst :: (Variant a1, Variant a3, Variant a4, Variant a5)
       => a2
       -> a3
       -> a4
       -> a5
       -> IWorksheetFunction a0
       -> IO a1
linEst arg1 arg2 arg3 arg4 =
  function1 "LinEst"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

trend :: (Variant a1, Variant a3, Variant a4, Variant a5)
      => a2
      -> a3
      -> a4
      -> a5
      -> IWorksheetFunction a0
      -> IO a1
trend arg1 arg2 arg3 arg4 =
  function1 "Trend"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

logEst :: (Variant a1, Variant a3, Variant a4, Variant a5)
       => a2
       -> a3
       -> a4
       -> a5
       -> IWorksheetFunction a0
       -> IO a1
logEst arg1 arg2 arg3 arg4 =
  function1 "LogEst"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

growth :: (Variant a1, Variant a3, Variant a4, Variant a5)
       => a2
       -> a3
       -> a4
       -> a5
       -> IWorksheetFunction a0
       -> IO a1
growth arg1 arg2 arg3 arg4 =
  function1 "Growth"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

pv :: (Variant a1, Variant a2)
   => Double
   -> Double
   -> Double
   -> a1
   -> a2
   -> IWorksheetFunction a0
   -> IO Double
pv arg1 arg2 arg3 arg4 arg5 =
  function1 "Pv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

fv :: (Variant a1, Variant a2)
   => Double
   -> Double
   -> Double
   -> a1
   -> a2
   -> IWorksheetFunction a0
   -> IO Double
fv arg1 arg2 arg3 arg4 arg5 =
  function1 "Fv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

nPer :: (Variant a1, Variant a2)
     => Double
     -> Double
     -> Double
     -> a1
     -> a2
     -> IWorksheetFunction a0
     -> IO Double
nPer arg1 arg2 arg3 arg4 arg5 =
  function1 "NPer"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

pmt :: (Variant a1, Variant a2)
    => Double
    -> Double
    -> Double
    -> a1
    -> a2
    -> IWorksheetFunction a0
    -> IO Double
pmt arg1 arg2 arg3 arg4 arg5 =
  function1 "Pmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

rate :: (Variant a1, Variant a2, Variant a3)
     => Double
     -> Double
     -> Double
     -> a1
     -> a2
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
rate arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Rate"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

mIrr :: a1
     -> Double
     -> Double
     -> IWorksheetFunction a0
     -> IO Double
mIrr arg1 arg2 arg3 =
  function1 "MIrr"
            [ inVariant arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

irr :: (Variant a2)
    => a1
    -> a2
    -> IWorksheetFunction a0
    -> IO Double
irr arg1 arg2 =
  function1 "Irr"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

match :: (Variant a3)
      => a1
      -> a2
      -> a3
      -> IWorksheetFunction a0
      -> IO Double
match arg1 arg2 arg3 =
  function1 "Match"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

weekday :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
weekday arg1 arg2 =
  function1 "Weekday"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

search :: (Variant a1)
       => String
       -> String
       -> a1
       -> IWorksheetFunction a0
       -> IO Double
search arg1 arg2 arg3 =
  function1 "Search"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

transpose :: (Variant a1)
          => a2
          -> IWorksheetFunction a0
          -> IO a1
transpose arg1 =
  function1 "Transpose"
            [inVariant arg1]
            outVariant

atan2 :: Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
atan2 arg1 arg2 =
  function1 "Atan2"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

asin :: Double
     -> IWorksheetFunction a0
     -> IO Double
asin arg1 =
  function1 "Asin"
            [inDouble arg1]
            outDouble

acos :: Double
     -> IWorksheetFunction a0
     -> IO Double
acos arg1 =
  function1 "Acos"
            [inDouble arg1]
            outDouble

choose :: (Variant a1, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
       => a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> a31
       -> IWorksheetFunction a0
       -> IO a1
choose arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Choose"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

hLookup :: (Variant a1, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> IWorksheetFunction a0
        -> IO a1
hLookup arg1 arg2 arg3 arg4 =
  function1 "HLookup"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

vLookup :: (Variant a1, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> IWorksheetFunction a0
        -> IO a1
vLookup arg1 arg2 arg3 arg4 =
  function1 "VLookup"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

log :: (Variant a1)
    => Double
    -> a1
    -> IWorksheetFunction a0
    -> IO Double
log arg1 arg2 =
  function1 "Log"
            [ inDouble arg1
            , inVariant arg2
            ]
            outDouble

proper :: String
       -> IWorksheetFunction a0
       -> IO String
proper arg1 =
  function1 "Proper"
            [inString arg1]
            outString

trim :: String
     -> IWorksheetFunction a0
     -> IO String
trim arg1 =
  function1 "Trim"
            [inString arg1]
            outString

replace :: String
        -> Double
        -> Double
        -> String
        -> IWorksheetFunction a0
        -> IO String
replace arg1 arg2 arg3 arg4 =
  function1 "Replace"
            [ inString arg1
            , inDouble arg2
            , inDouble arg3
            , inString arg4
            ]
            outString

substitute :: (Variant a1)
           => String
           -> String
           -> String
           -> a1
           -> IWorksheetFunction a0
           -> IO String
substitute arg1 arg2 arg3 arg4 =
  function1 "Substitute"
            [ inString arg1
            , inString arg2
            , inString arg3
            , inVariant arg4
            ]
            outString

find :: (Variant a1)
     => String
     -> String
     -> a1
     -> IWorksheetFunction a0
     -> IO Double
find arg1 arg2 arg3 =
  function1 "Find"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

isErr :: a1
      -> IWorksheetFunction a0
      -> IO Bool
isErr arg1 =
  function1 "IsErr"
            [inVariant arg1]
            outBool

isText :: a1
       -> IWorksheetFunction a0
       -> IO Bool
isText arg1 =
  function1 "IsText"
            [inVariant arg1]
            outBool

isNumber :: a1
         -> IWorksheetFunction a0
         -> IO Bool
isNumber arg1 =
  function1 "IsNumber"
            [inVariant arg1]
            outBool

sln :: Double
    -> Double
    -> Double
    -> IWorksheetFunction a0
    -> IO Double
sln arg1 arg2 arg3 =
  function1 "Sln"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

syd :: Double
    -> Double
    -> Double
    -> Double
    -> IWorksheetFunction a0
    -> IO Double
syd arg1 arg2 arg3 arg4 =
  function1 "Syd"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

ddb :: (Variant a1)
    => Double
    -> Double
    -> Double
    -> Double
    -> a1
    -> IWorksheetFunction a0
    -> IO Double
ddb arg1 arg2 arg3 arg4 arg5 =
  function1 "Ddb"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            ]
            outDouble

clean :: String
      -> IWorksheetFunction a0
      -> IO String
clean arg1 =
  function1 "Clean"
            [inString arg1]
            outString

mDeterm :: a1
        -> IWorksheetFunction a0
        -> IO Double
mDeterm arg1 =
  function1 "MDeterm"
            [inVariant arg1]
            outDouble

mInverse :: (Variant a1)
         => a2
         -> IWorksheetFunction a0
         -> IO a1
mInverse arg1 =
  function1 "MInverse"
            [inVariant arg1]
            outVariant

mMult :: (Variant a1)
      => a2
      -> a3
      -> IWorksheetFunction a0
      -> IO a1
mMult arg1 arg2 =
  function1 "MMult"
            [ inVariant arg1
            , inVariant arg2
            ]
            outVariant

ipmt :: (Variant a1, Variant a2)
     => Double
     -> Double
     -> Double
     -> Double
     -> a1
     -> a2
     -> IWorksheetFunction a0
     -> IO Double
ipmt arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Ipmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

ppmt :: (Variant a1, Variant a2)
     => Double
     -> Double
     -> Double
     -> Double
     -> a1
     -> a2
     -> IWorksheetFunction a0
     -> IO Double
ppmt arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Ppmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

countA :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> IWorksheetFunction a0
       -> IO Double
countA arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "CountA"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

product :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> IWorksheetFunction a0
        -> IO Double
product arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Product"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

fact :: Double
     -> IWorksheetFunction a0
     -> IO Double
fact arg1 =
  function1 "Fact"
            [inDouble arg1]
            outDouble

dProduct :: Range a1
         -> a2
         -> a3
         -> IWorksheetFunction a0
         -> IO Double
dProduct arg1 arg2 arg3 =
  function1 "DProduct"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

isNonText :: a1
          -> IWorksheetFunction a0
          -> IO Bool
isNonText arg1 =
  function1 "IsNonText"
            [inVariant arg1]
            outBool

stDevP :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> IWorksheetFunction a0
       -> IO Double
stDevP arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "StDevP"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

varP :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> IWorksheetFunction a0
     -> IO Double
varP arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "VarP"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

dStDevP :: Range a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO Double
dStDevP arg1 arg2 arg3 =
  function1 "DStDevP"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dVarP :: Range a1
      -> a2
      -> a3
      -> IWorksheetFunction a0
      -> IO Double
dVarP arg1 arg2 arg3 =
  function1 "DVarP"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

isLogical :: a1
          -> IWorksheetFunction a0
          -> IO Bool
isLogical arg1 =
  function1 "IsLogical"
            [inVariant arg1]
            outBool

dCountA :: Range a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO Double
dCountA arg1 arg2 arg3 =
  function1 "DCountA"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

uSDollar :: Double
         -> Double
         -> IWorksheetFunction a0
         -> IO String
uSDollar arg1 arg2 =
  function1 "USDollar"
            [ inDouble arg1
            , inDouble arg2
            ]
            outString

findB :: (Variant a1)
      => String
      -> String
      -> a1
      -> IWorksheetFunction a0
      -> IO Double
findB arg1 arg2 arg3 =
  function1 "FindB"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

searchB :: (Variant a1)
        => String
        -> String
        -> a1
        -> IWorksheetFunction a0
        -> IO Double
searchB arg1 arg2 arg3 =
  function1 "SearchB"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

replaceB :: String
         -> Double
         -> Double
         -> String
         -> IWorksheetFunction a0
         -> IO String
replaceB arg1 arg2 arg3 arg4 =
  function1 "ReplaceB"
            [ inString arg1
            , inDouble arg2
            , inDouble arg3
            , inString arg4
            ]
            outString

roundUp :: Double
        -> Double
        -> IWorksheetFunction a0
        -> IO Double
roundUp arg1 arg2 =
  function1 "RoundUp"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

roundDown :: Double
          -> Double
          -> IWorksheetFunction a0
          -> IO Double
roundDown arg1 arg2 =
  function1 "RoundDown"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

rank :: (Variant a2)
     => Double
     -> Range a1
     -> a2
     -> IWorksheetFunction a0
     -> IO Double
rank arg1 arg2 arg3 =
  function1 "Rank"
            [ inDouble arg1
            , inIUnknown arg2
            , inVariant arg3
            ]
            outDouble

days360 :: (Variant a3)
        => a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO Double
days360 arg1 arg2 arg3 =
  function1 "Days360"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

vdb :: (Variant a1, Variant a2)
    => Double
    -> Double
    -> Double
    -> Double
    -> Double
    -> a1
    -> a2
    -> IWorksheetFunction a0
    -> IO Double
vdb arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "Vdb"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inDouble arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

median :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> IWorksheetFunction a0
       -> IO Double
median arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Median"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sumProduct :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> a12
           -> a13
           -> a14
           -> a15
           -> a16
           -> a17
           -> a18
           -> a19
           -> a20
           -> a21
           -> a22
           -> a23
           -> a24
           -> a25
           -> a26
           -> a27
           -> a28
           -> a29
           -> a30
           -> IWorksheetFunction a0
           -> IO Double
sumProduct arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "SumProduct"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sinh :: Double
     -> IWorksheetFunction a0
     -> IO Double
sinh arg1 =
  function1 "Sinh"
            [inDouble arg1]
            outDouble

cosh :: Double
     -> IWorksheetFunction a0
     -> IO Double
cosh arg1 =
  function1 "Cosh"
            [inDouble arg1]
            outDouble

tanh :: Double
     -> IWorksheetFunction a0
     -> IO Double
tanh arg1 =
  function1 "Tanh"
            [inDouble arg1]
            outDouble

asinh :: Double
      -> IWorksheetFunction a0
      -> IO Double
asinh arg1 =
  function1 "Asinh"
            [inDouble arg1]
            outDouble

acosh :: Double
      -> IWorksheetFunction a0
      -> IO Double
acosh arg1 =
  function1 "Acosh"
            [inDouble arg1]
            outDouble

atanh :: Double
      -> IWorksheetFunction a0
      -> IO Double
atanh arg1 =
  function1 "Atanh"
            [inDouble arg1]
            outDouble

dGet :: (Variant a1)
     => Range a2
     -> a3
     -> a4
     -> IWorksheetFunction a0
     -> IO a1
dGet arg1 arg2 arg3 =
  function1 "DGet"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outVariant

db :: (Variant a1)
   => Double
   -> Double
   -> Double
   -> Double
   -> a1
   -> IWorksheetFunction a0
   -> IO Double
db arg1 arg2 arg3 arg4 arg5 =
  function1 "Db"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            ]
            outDouble

frequency :: (Variant a1)
          => a2
          -> a3
          -> IWorksheetFunction a0
          -> IO a1
frequency arg1 arg2 =
  function1 "Frequency"
            [ inVariant arg1
            , inVariant arg2
            ]
            outVariant

aveDev :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> IWorksheetFunction a0
       -> IO Double
aveDev arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "AveDev"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

betaDist :: (Variant a1, Variant a2)
         => Double
         -> Double
         -> Double
         -> a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
betaDist arg1 arg2 arg3 arg4 arg5 =
  function1 "BetaDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

gammaLn :: Double
        -> IWorksheetFunction a0
        -> IO Double
gammaLn arg1 =
  function1 "GammaLn"
            [inDouble arg1]
            outDouble

betaInv :: (Variant a1, Variant a2)
        => Double
        -> Double
        -> Double
        -> a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
betaInv arg1 arg2 arg3 arg4 arg5 =
  function1 "BetaInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

binomDist :: Double
          -> Double
          -> Double
          -> Bool
          -> IWorksheetFunction a0
          -> IO Double
binomDist arg1 arg2 arg3 arg4 =
  function1 "BinomDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

chiDist :: Double
        -> Double
        -> IWorksheetFunction a0
        -> IO Double
chiDist arg1 arg2 =
  function1 "ChiDist"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

chiInv :: Double
       -> Double
       -> IWorksheetFunction a0
       -> IO Double
chiInv arg1 arg2 =
  function1 "ChiInv"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

combin :: Double
       -> Double
       -> IWorksheetFunction a0
       -> IO Double
combin arg1 arg2 =
  function1 "Combin"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

confidence :: Double
           -> Double
           -> Double
           -> IWorksheetFunction a0
           -> IO Double
confidence arg1 arg2 arg3 =
  function1 "Confidence"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

critBinom :: Double
          -> Double
          -> Double
          -> IWorksheetFunction a0
          -> IO Double
critBinom arg1 arg2 arg3 =
  function1 "CritBinom"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

even :: Double
     -> IWorksheetFunction a0
     -> IO Double
even arg1 =
  function1 "Even"
            [inDouble arg1]
            outDouble

exponDist :: Double
          -> Double
          -> Bool
          -> IWorksheetFunction a0
          -> IO Double
exponDist arg1 arg2 arg3 =
  function1 "ExponDist"
            [ inDouble arg1
            , inDouble arg2
            , inBool arg3
            ]
            outDouble

fDist :: Double
      -> Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
fDist arg1 arg2 arg3 =
  function1 "FDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

fInv :: Double
     -> Double
     -> Double
     -> IWorksheetFunction a0
     -> IO Double
fInv arg1 arg2 arg3 =
  function1 "FInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

fisher :: Double
       -> IWorksheetFunction a0
       -> IO Double
fisher arg1 =
  function1 "Fisher"
            [inDouble arg1]
            outDouble

fisherInv :: Double
          -> IWorksheetFunction a0
          -> IO Double
fisherInv arg1 =
  function1 "FisherInv"
            [inDouble arg1]
            outDouble

floor :: Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
floor arg1 arg2 =
  function1 "Floor"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

gammaDist :: Double
          -> Double
          -> Double
          -> Bool
          -> IWorksheetFunction a0
          -> IO Double
gammaDist arg1 arg2 arg3 arg4 =
  function1 "GammaDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

gammaInv :: Double
         -> Double
         -> Double
         -> IWorksheetFunction a0
         -> IO Double
gammaInv arg1 arg2 arg3 =
  function1 "GammaInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

ceiling :: Double
        -> Double
        -> IWorksheetFunction a0
        -> IO Double
ceiling arg1 arg2 =
  function1 "Ceiling"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

hypGeomDist :: Double
            -> Double
            -> Double
            -> Double
            -> IWorksheetFunction a0
            -> IO Double
hypGeomDist arg1 arg2 arg3 arg4 =
  function1 "HypGeomDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

logNormDist :: Double
            -> Double
            -> Double
            -> IWorksheetFunction a0
            -> IO Double
logNormDist arg1 arg2 arg3 =
  function1 "LogNormDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

logInv :: Double
       -> Double
       -> Double
       -> IWorksheetFunction a0
       -> IO Double
logInv arg1 arg2 arg3 =
  function1 "LogInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

negBinomDist :: Double
             -> Double
             -> Double
             -> IWorksheetFunction a0
             -> IO Double
negBinomDist arg1 arg2 arg3 =
  function1 "NegBinomDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

normDist :: Double
         -> Double
         -> Double
         -> Bool
         -> IWorksheetFunction a0
         -> IO Double
normDist arg1 arg2 arg3 arg4 =
  function1 "NormDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

normSDist :: Double
          -> IWorksheetFunction a0
          -> IO Double
normSDist arg1 =
  function1 "NormSDist"
            [inDouble arg1]
            outDouble

normInv :: Double
        -> Double
        -> Double
        -> IWorksheetFunction a0
        -> IO Double
normInv arg1 arg2 arg3 =
  function1 "NormInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

normSInv :: Double
         -> IWorksheetFunction a0
         -> IO Double
normSInv arg1 =
  function1 "NormSInv"
            [inDouble arg1]
            outDouble

standardize :: Double
            -> Double
            -> Double
            -> IWorksheetFunction a0
            -> IO Double
standardize arg1 arg2 arg3 =
  function1 "Standardize"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

odd :: Double
    -> IWorksheetFunction a0
    -> IO Double
odd arg1 =
  function1 "Odd"
            [inDouble arg1]
            outDouble

permut :: Double
       -> Double
       -> IWorksheetFunction a0
       -> IO Double
permut arg1 arg2 =
  function1 "Permut"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

poisson :: Double
        -> Double
        -> Bool
        -> IWorksheetFunction a0
        -> IO Double
poisson arg1 arg2 arg3 =
  function1 "Poisson"
            [ inDouble arg1
            , inDouble arg2
            , inBool arg3
            ]
            outDouble

tDist :: Double
      -> Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
tDist arg1 arg2 arg3 =
  function1 "TDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

weibull :: Double
        -> Double
        -> Double
        -> Bool
        -> IWorksheetFunction a0
        -> IO Double
weibull arg1 arg2 arg3 arg4 =
  function1 "Weibull"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

sumXMY2 :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
sumXMY2 arg1 arg2 =
  function1 "SumXMY2"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

sumX2MY2 :: a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
sumX2MY2 arg1 arg2 =
  function1 "SumX2MY2"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

sumX2PY2 :: a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
sumX2PY2 arg1 arg2 =
  function1 "SumX2PY2"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

chiTest :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
chiTest arg1 arg2 =
  function1 "ChiTest"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

correl :: a1
       -> a2
       -> IWorksheetFunction a0
       -> IO Double
correl arg1 arg2 =
  function1 "Correl"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

covar :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
covar arg1 arg2 =
  function1 "Covar"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

forecast :: Double
         -> a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
forecast arg1 arg2 arg3 =
  function1 "Forecast"
            [ inDouble arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

fTest :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
fTest arg1 arg2 =
  function1 "FTest"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

intercept :: a1
          -> a2
          -> IWorksheetFunction a0
          -> IO Double
intercept arg1 arg2 =
  function1 "Intercept"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

pearson :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
pearson arg1 arg2 =
  function1 "Pearson"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

rSq :: a1
    -> a2
    -> IWorksheetFunction a0
    -> IO Double
rSq arg1 arg2 =
  function1 "RSq"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

stEyx :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
stEyx arg1 arg2 =
  function1 "StEyx"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

slope :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
slope arg1 arg2 =
  function1 "Slope"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

tTest :: a1
      -> a2
      -> Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
tTest arg1 arg2 arg3 arg4 =
  function1 "TTest"
            [ inVariant arg1
            , inVariant arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

prob :: (Variant a3)
     => a1
     -> a2
     -> Double
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
prob arg1 arg2 arg3 arg4 =
  function1 "Prob"
            [ inVariant arg1
            , inVariant arg2
            , inDouble arg3
            , inVariant arg4
            ]
            outDouble

devSq :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> IWorksheetFunction a0
      -> IO Double
devSq arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "DevSq"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

geoMean :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> IWorksheetFunction a0
        -> IO Double
geoMean arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "GeoMean"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

harMean :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> IWorksheetFunction a0
        -> IO Double
harMean arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "HarMean"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sumSq :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> IWorksheetFunction a0
      -> IO Double
sumSq arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "SumSq"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

kurt :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> IWorksheetFunction a0
     -> IO Double
kurt arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Kurt"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

skew :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> IWorksheetFunction a0
     -> IO Double
skew arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Skew"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

zTest :: (Variant a2)
      => a1
      -> Double
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
zTest arg1 arg2 arg3 =
  function1 "ZTest"
            [ inVariant arg1
            , inDouble arg2
            , inVariant arg3
            ]
            outDouble

large :: a1
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
large arg1 arg2 =
  function1 "Large"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

small :: a1
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
small arg1 arg2 =
  function1 "Small"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

quartile :: a1
         -> Double
         -> IWorksheetFunction a0
         -> IO Double
quartile arg1 arg2 =
  function1 "Quartile"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

percentile :: a1
           -> Double
           -> IWorksheetFunction a0
           -> IO Double
percentile arg1 arg2 =
  function1 "Percentile"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

percentRank :: (Variant a2)
            => a1
            -> Double
            -> a2
            -> IWorksheetFunction a0
            -> IO Double
percentRank arg1 arg2 arg3 =
  function1 "PercentRank"
            [ inVariant arg1
            , inDouble arg2
            , inVariant arg3
            ]
            outDouble

mode :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> IWorksheetFunction a0
     -> IO Double
mode arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Mode"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

trimMean :: a1
         -> Double
         -> IWorksheetFunction a0
         -> IO Double
trimMean arg1 arg2 =
  function1 "TrimMean"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

tInv :: Double
     -> Double
     -> IWorksheetFunction a0
     -> IO Double
tInv arg1 arg2 =
  function1 "TInv"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

power :: Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
power arg1 arg2 =
  function1 "Power"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

radians :: Double
        -> IWorksheetFunction a0
        -> IO Double
radians arg1 =
  function1 "Radians"
            [inDouble arg1]
            outDouble

degrees :: Double
        -> IWorksheetFunction a0
        -> IO Double
degrees arg1 =
  function1 "Degrees"
            [inDouble arg1]
            outDouble

subtotal :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
         => Double
         -> Range a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> IWorksheetFunction a0
         -> IO Double
subtotal arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Subtotal"
            [ inDouble arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sumIf :: (Variant a3)
      => Range a1
      -> a2
      -> a3
      -> IWorksheetFunction a0
      -> IO Double
sumIf arg1 arg2 arg3 =
  function1 "SumIf"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

countIf :: Range a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
countIf arg1 arg2 =
  function1 "CountIf"
            [ inIUnknown arg1
            , inVariant arg2
            ]
            outDouble

countBlank :: Range a1
           -> IWorksheetFunction a0
           -> IO Double
countBlank arg1 =
  function1 "CountBlank"
            [inIUnknown arg1]
            outDouble

ispmt :: Double
      -> Double
      -> Double
      -> Double
      -> IWorksheetFunction a0
      -> IO Double
ispmt arg1 arg2 arg3 arg4 =
  function1 "Ispmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

roman :: (Variant a1)
      => Double
      -> a1
      -> IWorksheetFunction a0
      -> IO String
roman arg1 arg2 =
  function1 "Roman"
            [ inDouble arg1
            , inVariant arg2
            ]
            outString

asc :: String
    -> IWorksheetFunction a0
    -> IO String
asc arg1 =
  function1 "Asc"
            [inString arg1]
            outString

dbcs :: String
     -> IWorksheetFunction a0
     -> IO String
dbcs arg1 =
  function1 "Dbcs"
            [inString arg1]
            outString

phonetic :: Range a1
         -> IWorksheetFunction a0
         -> IO String
phonetic arg1 =
  function1 "Phonetic"
            [inIUnknown arg1]
            outString

bahtText :: Double
         -> IWorksheetFunction a0
         -> IO String
bahtText arg1 =
  function1 "BahtText"
            [inDouble arg1]
            outString

thaiDayOfWeek :: Double
              -> IWorksheetFunction a0
              -> IO String
thaiDayOfWeek arg1 =
  function1 "ThaiDayOfWeek"
            [inDouble arg1]
            outString

thaiDigit :: String
          -> IWorksheetFunction a0
          -> IO String
thaiDigit arg1 =
  function1 "ThaiDigit"
            [inString arg1]
            outString

thaiMonthOfYear :: Double
                -> IWorksheetFunction a0
                -> IO String
thaiMonthOfYear arg1 =
  function1 "ThaiMonthOfYear"
            [inDouble arg1]
            outString

thaiNumSound :: Double
             -> IWorksheetFunction a0
             -> IO String
thaiNumSound arg1 =
  function1 "ThaiNumSound"
            [inDouble arg1]
            outString

thaiNumString :: Double
              -> IWorksheetFunction a0
              -> IO String
thaiNumString arg1 =
  function1 "ThaiNumString"
            [inDouble arg1]
            outString

thaiStringLength :: String
                 -> IWorksheetFunction a0
                 -> IO Double
thaiStringLength arg1 =
  function1 "ThaiStringLength"
            [inString arg1]
            outDouble

isThaiDigit :: String
            -> IWorksheetFunction a0
            -> IO Bool
isThaiDigit arg1 =
  function1 "IsThaiDigit"
            [inString arg1]
            outBool

roundBahtDown :: Double
              -> IWorksheetFunction a0
              -> IO Double
roundBahtDown arg1 =
  function1 "RoundBahtDown"
            [inDouble arg1]
            outDouble

roundBahtUp :: Double
            -> IWorksheetFunction a0
            -> IO Double
roundBahtUp arg1 =
  function1 "RoundBahtUp"
            [inDouble arg1]
            outDouble

thaiYear :: Double
         -> IWorksheetFunction a0
         -> IO Double
thaiYear arg1 =
  function1 "ThaiYear"
            [inDouble arg1]
            outDouble

rTD :: (Variant a1, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
    => a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> a31
    -> IWorksheetFunction a0
    -> IO a1
rTD progID server topic1 topic2 topic3 topic4 topic5 topic6 topic7 topic8 topic9 topic10 topic11 topic12 topic13 topic14 topic15 topic16 topic17 topic18 topic19 topic20 topic21 topic22 topic23 topic24 topic25 topic26 topic27 topic28 =
  function1 "RTD"
            [ inVariant progID
            , inVariant server
            , inVariant topic1
            , inVariant topic2
            , inVariant topic3
            , inVariant topic4
            , inVariant topic5
            , inVariant topic6
            , inVariant topic7
            , inVariant topic8
            , inVariant topic9
            , inVariant topic10
            , inVariant topic11
            , inVariant topic12
            , inVariant topic13
            , inVariant topic14
            , inVariant topic15
            , inVariant topic16
            , inVariant topic17
            , inVariant topic18
            , inVariant topic19
            , inVariant topic20
            , inVariant topic21
            , inVariant topic22
            , inVariant topic23
            , inVariant topic24
            , inVariant topic25
            , inVariant topic26
            , inVariant topic27
            , inVariant topic28
            ]
            outVariant

hex2Bin :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
hex2Bin arg1 arg2 =
  function1 "Hex2Bin"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

hex2Dec :: a1
        -> IWorksheetFunction a0
        -> IO String
hex2Dec arg1 =
  function1 "Hex2Dec"
            [inVariant arg1]
            outString

hex2Oct :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
hex2Oct arg1 arg2 =
  function1 "Hex2Oct"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

dec2Bin :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
dec2Bin arg1 arg2 =
  function1 "Dec2Bin"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

dec2Hex :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
dec2Hex arg1 arg2 =
  function1 "Dec2Hex"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

dec2Oct :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
dec2Oct arg1 arg2 =
  function1 "Dec2Oct"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

oct2Bin :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
oct2Bin arg1 arg2 =
  function1 "Oct2Bin"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

oct2Hex :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
oct2Hex arg1 arg2 =
  function1 "Oct2Hex"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

oct2Dec :: a1
        -> IWorksheetFunction a0
        -> IO String
oct2Dec arg1 =
  function1 "Oct2Dec"
            [inVariant arg1]
            outString

bin2Dec :: a1
        -> IWorksheetFunction a0
        -> IO String
bin2Dec arg1 =
  function1 "Bin2Dec"
            [inVariant arg1]
            outString

bin2Oct :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
bin2Oct arg1 arg2 =
  function1 "Bin2Oct"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

bin2Hex :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
bin2Hex arg1 arg2 =
  function1 "Bin2Hex"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imSub :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO String
imSub arg1 arg2 =
  function1 "ImSub"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imDiv :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO String
imDiv arg1 arg2 =
  function1 "ImDiv"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imPower :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO String
imPower arg1 arg2 =
  function1 "ImPower"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imAbs :: a1
      -> IWorksheetFunction a0
      -> IO String
imAbs arg1 =
  function1 "ImAbs"
            [inVariant arg1]
            outString

imSqrt :: a1
       -> IWorksheetFunction a0
       -> IO String
imSqrt arg1 =
  function1 "ImSqrt"
            [inVariant arg1]
            outString

imLn :: a1
     -> IWorksheetFunction a0
     -> IO String
imLn arg1 =
  function1 "ImLn"
            [inVariant arg1]
            outString

imLog2 :: a1
       -> IWorksheetFunction a0
       -> IO String
imLog2 arg1 =
  function1 "ImLog2"
            [inVariant arg1]
            outString

imLog10 :: a1
        -> IWorksheetFunction a0
        -> IO String
imLog10 arg1 =
  function1 "ImLog10"
            [inVariant arg1]
            outString

imSin :: a1
      -> IWorksheetFunction a0
      -> IO String
imSin arg1 =
  function1 "ImSin"
            [inVariant arg1]
            outString

imCos :: a1
      -> IWorksheetFunction a0
      -> IO String
imCos arg1 =
  function1 "ImCos"
            [inVariant arg1]
            outString

imExp :: a1
      -> IWorksheetFunction a0
      -> IO String
imExp arg1 =
  function1 "ImExp"
            [inVariant arg1]
            outString

imArgument :: a1
           -> IWorksheetFunction a0
           -> IO String
imArgument arg1 =
  function1 "ImArgument"
            [inVariant arg1]
            outString

imConjugate :: a1
            -> IWorksheetFunction a0
            -> IO String
imConjugate arg1 =
  function1 "ImConjugate"
            [inVariant arg1]
            outString

imaginary :: a1
          -> IWorksheetFunction a0
          -> IO Double
imaginary arg1 =
  function1 "Imaginary"
            [inVariant arg1]
            outDouble

imReal :: a1
       -> IWorksheetFunction a0
       -> IO Double
imReal arg1 =
  function1 "ImReal"
            [inVariant arg1]
            outDouble

complex :: (Variant a3)
        => a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO String
complex arg1 arg2 arg3 =
  function1 "Complex"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outString

imSum :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> IWorksheetFunction a0
      -> IO String
imSum arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "ImSum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outString

imProduct :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> a19
          -> a20
          -> a21
          -> a22
          -> a23
          -> a24
          -> a25
          -> a26
          -> a27
          -> a28
          -> a29
          -> a30
          -> IWorksheetFunction a0
          -> IO String
imProduct arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "ImProduct"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outString

seriesSum :: a1
          -> a2
          -> a3
          -> a4
          -> IWorksheetFunction a0
          -> IO Double
seriesSum arg1 arg2 arg3 arg4 =
  function1 "SeriesSum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

factDouble :: a1
           -> IWorksheetFunction a0
           -> IO Double
factDouble arg1 =
  function1 "FactDouble"
            [inVariant arg1]
            outDouble

sqrtPi :: a1
       -> IWorksheetFunction a0
       -> IO Double
sqrtPi arg1 =
  function1 "SqrtPi"
            [inVariant arg1]
            outDouble

quotient :: a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
quotient arg1 arg2 =
  function1 "Quotient"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

delta :: (Variant a2)
      => a1
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
delta arg1 arg2 =
  function1 "Delta"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

geStep :: (Variant a2)
       => a1
       -> a2
       -> IWorksheetFunction a0
       -> IO Double
geStep arg1 arg2 =
  function1 "GeStep"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

isEven :: a1
       -> IWorksheetFunction a0
       -> IO Bool
isEven arg1 =
  function1 "IsEven"
            [inVariant arg1]
            outBool

isOdd :: a1
      -> IWorksheetFunction a0
      -> IO Bool
isOdd arg1 =
  function1 "IsOdd"
            [inVariant arg1]
            outBool

mRound :: a1
       -> a2
       -> IWorksheetFunction a0
       -> IO Double
mRound arg1 arg2 =
  function1 "MRound"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

erf :: (Variant a2)
    => a1
    -> a2
    -> IWorksheetFunction a0
    -> IO Double
erf arg1 arg2 =
  function1 "Erf"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

erfC :: a1
     -> IWorksheetFunction a0
     -> IO Double
erfC arg1 =
  function1 "ErfC"
            [inVariant arg1]
            outDouble

besselJ :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
besselJ arg1 arg2 =
  function1 "BesselJ"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

besselK :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
besselK arg1 arg2 =
  function1 "BesselK"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

besselY :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
besselY arg1 arg2 =
  function1 "BesselY"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

besselI :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
besselI arg1 arg2 =
  function1 "BesselI"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

xirr :: (Variant a3)
     => a1
     -> a2
     -> a3
     -> IWorksheetFunction a0
     -> IO Double
xirr arg1 arg2 arg3 =
  function1 "Xirr"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

xnpv :: a1
     -> a2
     -> IWorksheetFunction a0
     -> IO Double
xnpv arg1 arg2 =
  function1 "Xnpv"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

priceMat :: (Variant a6)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> IWorksheetFunction a0
         -> IO Double
priceMat arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "PriceMat"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

yieldMat :: (Variant a6)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> IWorksheetFunction a0
         -> IO Double
yieldMat arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "YieldMat"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

intRate :: (Variant a5)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> IWorksheetFunction a0
        -> IO Double
intRate arg1 arg2 arg3 arg4 arg5 =
  function1 "IntRate"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

received :: (Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> IWorksheetFunction a0
         -> IO Double
received arg1 arg2 arg3 arg4 arg5 =
  function1 "Received"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

disc :: (Variant a5)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> IWorksheetFunction a0
     -> IO Double
disc arg1 arg2 arg3 arg4 arg5 =
  function1 "Disc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

priceDisc :: (Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> IWorksheetFunction a0
          -> IO Double
priceDisc arg1 arg2 arg3 arg4 arg5 =
  function1 "PriceDisc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

yieldDisc :: (Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> IWorksheetFunction a0
          -> IO Double
yieldDisc arg1 arg2 arg3 arg4 arg5 =
  function1 "YieldDisc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

tBillEq :: (Variant a3)
        => a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO Double
tBillEq arg1 arg2 arg3 =
  function1 "TBillEq"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

tBillPrice :: (Variant a3)
           => a1
           -> a2
           -> a3
           -> IWorksheetFunction a0
           -> IO Double
tBillPrice arg1 arg2 arg3 =
  function1 "TBillPrice"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

tBillYield :: (Variant a3)
           => a1
           -> a2
           -> a3
           -> IWorksheetFunction a0
           -> IO Double
tBillYield arg1 arg2 arg3 =
  function1 "TBillYield"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

price :: (Variant a7)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> IWorksheetFunction a0
      -> IO Double
price arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "Price"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

dollarDe :: a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
dollarDe arg1 arg2 =
  function1 "DollarDe"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

dollarFr :: a1
         -> a2
         -> IWorksheetFunction a0
         -> IO Double
dollarFr arg1 arg2 =
  function1 "DollarFr"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

nominal :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
nominal arg1 arg2 =
  function1 "Nominal"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

effect :: a1
       -> a2
       -> IWorksheetFunction a0
       -> IO Double
effect arg1 arg2 =
  function1 "Effect"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

cumPrinc :: a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> IWorksheetFunction a0
         -> IO Double
cumPrinc arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "CumPrinc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

cumIPmt :: a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> IWorksheetFunction a0
        -> IO Double
cumIPmt arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "CumIPmt"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

eDate :: a1
      -> a2
      -> IWorksheetFunction a0
      -> IO Double
eDate arg1 arg2 =
  function1 "EDate"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

eoMonth :: a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
eoMonth arg1 arg2 =
  function1 "EoMonth"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

yearFrac :: (Variant a3)
         => a1
         -> a2
         -> a3
         -> IWorksheetFunction a0
         -> IO Double
yearFrac arg1 arg2 arg3 =
  function1 "YearFrac"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

coupDayBs :: (Variant a4)
          => a1
          -> a2
          -> a3
          -> a4
          -> IWorksheetFunction a0
          -> IO Double
coupDayBs arg1 arg2 arg3 arg4 =
  function1 "CoupDayBs"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupDays :: (Variant a4)
         => a1
         -> a2
         -> a3
         -> a4
         -> IWorksheetFunction a0
         -> IO Double
coupDays arg1 arg2 arg3 arg4 =
  function1 "CoupDays"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupDaysNc :: (Variant a4)
           => a1
           -> a2
           -> a3
           -> a4
           -> IWorksheetFunction a0
           -> IO Double
coupDaysNc arg1 arg2 arg3 arg4 =
  function1 "CoupDaysNc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupNcd :: (Variant a4)
        => a1
        -> a2
        -> a3
        -> a4
        -> IWorksheetFunction a0
        -> IO Double
coupNcd arg1 arg2 arg3 arg4 =
  function1 "CoupNcd"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupNum :: (Variant a4)
        => a1
        -> a2
        -> a3
        -> a4
        -> IWorksheetFunction a0
        -> IO Double
coupNum arg1 arg2 arg3 arg4 =
  function1 "CoupNum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupPcd :: (Variant a4)
        => a1
        -> a2
        -> a3
        -> a4
        -> IWorksheetFunction a0
        -> IO Double
coupPcd arg1 arg2 arg3 arg4 =
  function1 "CoupPcd"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

duration :: (Variant a6)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> IWorksheetFunction a0
         -> IO Double
duration arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Duration"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

mDuration :: (Variant a6)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> IWorksheetFunction a0
          -> IO Double
mDuration arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "MDuration"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

oddLPrice :: (Variant a8)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> IWorksheetFunction a0
          -> IO Double
oddLPrice arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 =
  function1 "OddLPrice"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            ]
            outDouble

oddLYield :: (Variant a8)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> IWorksheetFunction a0
          -> IO Double
oddLYield arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 =
  function1 "OddLYield"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            ]
            outDouble

oddFPrice :: (Variant a9)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> IWorksheetFunction a0
          -> IO Double
oddFPrice arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 =
  function1 "OddFPrice"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            ]
            outDouble

oddFYield :: (Variant a9)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> IWorksheetFunction a0
          -> IO Double
oddFYield arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 =
  function1 "OddFYield"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            ]
            outDouble

randBetween :: a1
            -> a2
            -> IWorksheetFunction a0
            -> IO Double
randBetween arg1 arg2 =
  function1 "RandBetween"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

weekNum :: (Variant a2)
        => a1
        -> a2
        -> IWorksheetFunction a0
        -> IO Double
weekNum arg1 arg2 =
  function1 "WeekNum"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

amorDegrc :: (Variant a7)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> IWorksheetFunction a0
          -> IO Double
amorDegrc arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "AmorDegrc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

amorLinc :: (Variant a7)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> IWorksheetFunction a0
         -> IO Double
amorLinc arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "AmorLinc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

convert :: a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO Double
convert arg1 arg2 arg3 =
  function1 "Convert"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

accrInt :: (Variant a7)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> IWorksheetFunction a0
        -> IO Double
accrInt arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "AccrInt"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

accrIntM :: (Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> IWorksheetFunction a0
         -> IO Double
accrIntM arg1 arg2 arg3 arg4 arg5 =
  function1 "AccrIntM"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

workDay :: (Variant a3)
        => a1
        -> a2
        -> a3
        -> IWorksheetFunction a0
        -> IO Double
workDay arg1 arg2 arg3 =
  function1 "WorkDay"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

networkDays :: (Variant a3)
            => a1
            -> a2
            -> a3
            -> IWorksheetFunction a0
            -> IO Double
networkDays arg1 arg2 arg3 =
  function1 "NetworkDays"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

gcd :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Double
gcd arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Gcd"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

multiNomial :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> a17
            -> a18
            -> a19
            -> a20
            -> a21
            -> a22
            -> a23
            -> a24
            -> a25
            -> a26
            -> a27
            -> a28
            -> a29
            -> a30
            -> IWorksheetFunction a0
            -> IO Double
multiNomial arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "MultiNomial"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

lcm :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> IWorksheetFunction a0
    -> IO Double
lcm arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Lcm"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

fVSchedule :: a1
           -> a2
           -> IWorksheetFunction a0
           -> IO Double
fVSchedule arg1 arg2 =
  function1 "FVSchedule"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

sumIfs :: (Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
       => Range a1
       -> Range a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> IWorksheetFunction a0
       -> IO Double
sumIfs arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 =
  function1 "SumIfs"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            ]
            outDouble

countIfs :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
         => Range a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> a30
         -> IWorksheetFunction a0
         -> IO Double
countIfs arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "CountIfs"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

averageIf :: (Variant a3)
          => Range a1
          -> a2
          -> a3
          -> IWorksheetFunction a0
          -> IO Double
averageIf arg1 arg2 arg3 =
  function1 "AverageIf"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

averageIfs :: (Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
           => Range a1
           -> Range a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> a12
           -> a13
           -> a14
           -> a15
           -> a16
           -> a17
           -> a18
           -> a19
           -> a20
           -> a21
           -> a22
           -> a23
           -> a24
           -> a25
           -> a26
           -> a27
           -> a28
           -> a29
           -> IWorksheetFunction a0
           -> IO Double
averageIfs arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 =
  function1 "AverageIfs"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            ]
            outDouble

ifError :: (Variant a1)
        => a2
        -> a3
        -> IWorksheetFunction a0
        -> IO a1
ifError arg1 arg2 =
  function1 "IfError"
            [ inVariant arg1
            , inVariant arg2
            ]
            outVariant

-- --------------------------------------------------
-- 
-- interface IRange
-- 
-- --------------------------------------------------
data IRange_ a = IRange__ 
type IRange a = IDispatch (IRange_ a)
iidIRange :: IID (IRange ())
iidIRange = mkIID "{00020846-0001-0000-C000-000000000046}"

getApplication4 :: (Variant a1)
                => IRange a0
                -> IO a1
getApplication4 =
  propertyGet "Application"
              []
              outVariant

getCreator4 :: IRange a0
            -> IO XlCreator
getCreator4 =
  propertyGet "Creator"
              []
              outEnum

getParent19 :: IRange a0
            -> IO (IDispatch ())
getParent19 =
  propertyGet "Parent"
              []
              outIDispatch

activate0 :: (Variant a1)
          => IRange a0
          -> IO a1
activate0 =
  function1 "Activate"
            []
            outVariant

getAddIndent :: (Variant a1)
             => IRange a0
             -> IO a1
getAddIndent =
  propertyGet "AddIndent"
              []
              outVariant

setAddIndent :: a1
             -> IRange a0
             -> IO ()
setAddIndent rHS =
  propertySet "AddIndent"
              [inVariant rHS]

getAddress :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> Int32
           -> IRange a0
           -> IO String
getAddress rowAbsolute columnAbsolute referenceStyle external relativeTo lcid =
  propertyGet "Address"
              [ inVariant rowAbsolute
              , inVariant columnAbsolute
              , inDefaultValue (inInt32 1) inVariant referenceStyle
              , inVariant external
              , inVariant relativeTo
              , inInt32 lcid
              ]
              outString

getAddressLocal :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> IRange a0
                -> IO String
getAddressLocal rowAbsolute columnAbsolute referenceStyle external relativeTo =
  propertyGet "AddressLocal"
              [ inVariant rowAbsolute
              , inVariant columnAbsolute
              , inDefaultValue (inInt32 1) inVariant referenceStyle
              , inVariant external
              , inVariant relativeTo
              ]
              outString

advancedFilter :: (Variant a1, Variant a2, Variant a3, Variant a4)
               => XlFilterAction
               -> a2
               -> a3
               -> a4
               -> IRange a0
               -> IO a1
advancedFilter action criteriaRange copyToRange unique =
  function1 "AdvancedFilter"
            [ inEnum action
            , inVariant criteriaRange
            , inVariant copyToRange
            , inVariant unique
            ]
            outVariant

applyNames :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> IRange a0
           -> IO a1
applyNames names ignoreRelativeAbsolute useRowColumnNames omitColumn omitRow order appendLast =
  function1 "ApplyNames"
            [ inVariant names
            , inVariant ignoreRelativeAbsolute
            , inVariant useRowColumnNames
            , inVariant omitColumn
            , inVariant omitRow
            , inDefaultValue (inInt32 1) inVariant order
            , inVariant appendLast
            ]
            outVariant

applyOutlineStyles :: (Variant a1)
                   => IRange a0
                   -> IO a1
applyOutlineStyles =
  function1 "ApplyOutlineStyles"
            []
            outVariant

getAreas :: IRange a0
         -> IO (Areas ())
getAreas =
  propertyGet "Areas"
              []
              outIUnknown

autoComplete :: String
             -> IRange a0
             -> IO String
autoComplete string =
  function1 "AutoComplete"
            [inString string]
            outString

autoFill :: (Variant a1, Variant a3)
         => Range a2
         -> a3
         -> IRange a0
         -> IO a1
autoFill destination type0 =
  function1 "AutoFill"
            [ inIUnknown destination
            , inDefaultValue (inInt32 0) inVariant type0
            ]
            outVariant

autoFilter :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> IRange a0
           -> IO a1
autoFilter field criteria1 operator criteria2 visibleDropDown =
  function1 "AutoFilter"
            [ inVariant field
            , inVariant criteria1
            , inDefaultValue (inInt32 1) inVariant operator
            , inVariant criteria2
            , inVariant visibleDropDown
            ]
            outVariant

autoFit :: (Variant a1)
        => IRange a0
        -> IO a1
autoFit =
  function1 "AutoFit"
            []
            outVariant

autoFormat :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> IRange a0
           -> IO a1
autoFormat format number font alignment border pattern width =
  function1 "AutoFormat"
            [ inDefaultValue (inInt32 1) inVariant format
            , inVariant number
            , inVariant font
            , inVariant alignment
            , inVariant border
            , inVariant pattern
            , inVariant width
            ]
            outVariant

autoOutline :: (Variant a1)
            => IRange a0
            -> IO a1
autoOutline =
  function1 "AutoOutline"
            []
            outVariant

borderAround :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> IRange a0
             -> IO a1
borderAround lineStyle weight colorIndex color =
  function1 "BorderAround"
            [ inVariant lineStyle
            , inDefaultValue (inInt32 2) inVariant weight
            , inDefaultValue (inInt32 (-4105)) inVariant colorIndex
            , inVariant color
            ]
            outVariant

getBorders :: IRange a0
           -> IO (Borders ())
getBorders =
  propertyGet "Borders"
              []
              outIUnknown

calculate0 :: (Variant a1)
           => IRange a0
           -> IO a1
calculate0 =
  function1 "Calculate"
            []
            outVariant

getCells0 :: IRange a0
          -> IO (Range ())
getCells0 =
  propertyGet "Cells"
              []
              outIUnknown

getCharacters :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> IRange a0
              -> IO (Characters ())
getCharacters start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> IRange a0
               -> IO a1
checkSpelling0 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

clear :: (Variant a1)
      => IRange a0
      -> IO a1
clear =
  function1 "Clear"
            []
            outVariant

clearContents :: (Variant a1)
              => IRange a0
              -> IO a1
clearContents =
  function1 "ClearContents"
            []
            outVariant

clearFormats :: (Variant a1)
             => IRange a0
             -> IO a1
clearFormats =
  function1 "ClearFormats"
            []
            outVariant

clearNotes :: (Variant a1)
           => IRange a0
           -> IO a1
clearNotes =
  function1 "ClearNotes"
            []
            outVariant

clearOutline :: (Variant a1)
             => IRange a0
             -> IO a1
clearOutline =
  function1 "ClearOutline"
            []
            outVariant

getColumn0 :: IRange a0
           -> IO Int32
getColumn0 =
  propertyGet "Column"
              []
              outInt32

columnDifferences :: a1
                  -> IRange a0
                  -> IO (Range ())
columnDifferences comparison =
  function1 "ColumnDifferences"
            [inVariant comparison]
            outIUnknown

getColumns0 :: IRange a0
            -> IO (Range ())
getColumns0 =
  propertyGet "Columns"
              []
              outIUnknown

getColumnWidth :: (Variant a1)
               => IRange a0
               -> IO a1
getColumnWidth =
  propertyGet "ColumnWidth"
              []
              outVariant

setColumnWidth :: a1
               -> IRange a0
               -> IO ()
setColumnWidth rHS =
  propertySet "ColumnWidth"
              [inVariant rHS]

consolidate :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> IRange a0
            -> IO a1
consolidate sources function topRow leftColumn createLinks =
  function1 "Consolidate"
            [ inVariant sources
            , inVariant function
            , inVariant topRow
            , inVariant leftColumn
            , inVariant createLinks
            ]
            outVariant

copy :: (Variant a1, Variant a2)
     => a2
     -> IRange a0
     -> IO a1
copy destination =
  function1 "Copy"
            [inVariant destination]
            outVariant

copyFromRecordset :: (Variant a2, Variant a3)
                  => IUnknown a1
                  -> a2
                  -> a3
                  -> IRange a0
                  -> IO Int32
copyFromRecordset data0 maxRows maxColumns =
  function1 "CopyFromRecordset"
            [ inIUnknown data0
            , inVariant maxRows
            , inVariant maxColumns
            ]
            outInt32

copyPicture :: (Variant a1, Variant a2, Variant a3)
            => a2
            -> a3
            -> IRange a0
            -> IO a1
copyPicture appearance format =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 1) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format
            ]
            outVariant

getCount4 :: IRange a0
          -> IO Int32
getCount4 =
  propertyGet "Count"
              []
              outInt32

createNames :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
            => a2
            -> a3
            -> a4
            -> a5
            -> IRange a0
            -> IO a1
createNames top left bottom right =
  function1 "CreateNames"
            [ inVariant top
            , inVariant left
            , inVariant bottom
            , inVariant right
            ]
            outVariant

createPublisher :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                => a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> a7
                -> IRange a0
                -> IO a1
createPublisher edition appearance containsPICT containsBIFF containsRTF containsVALU =
  function1 "CreatePublisher"
            [ inVariant edition
            , inDefaultValue (inInt32 1) inVariant appearance
            , inVariant containsPICT
            , inVariant containsBIFF
            , inVariant containsRTF
            , inVariant containsVALU
            ]
            outVariant

getCurrentArray :: IRange a0
                -> IO (Range ())
getCurrentArray =
  propertyGet "CurrentArray"
              []
              outIUnknown

getCurrentRegion :: IRange a0
                 -> IO (Range ())
getCurrentRegion =
  propertyGet "CurrentRegion"
              []
              outIUnknown

cut :: (Variant a1, Variant a2)
    => a2
    -> IRange a0
    -> IO a1
cut destination =
  function1 "Cut"
            [inVariant destination]
            outVariant

dataSeries :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> IRange a0
           -> IO a1
dataSeries rowcol type0 date step stop trend0 =
  function1 "DataSeries"
            [ inVariant rowcol
            , inDefaultValue (inInt32 (-4132)) inVariant type0
            , inDefaultValue (inInt32 1) inVariant date
            , inVariant step
            , inVariant stop
            , inVariant trend0
            ]
            outVariant

getDefault1 :: (Variant a1, Variant a2, Variant a3)
            => a2
            -> a3
            -> Int32
            -> IRange a0
            -> IO a1
getDefault1 rowIndex columnIndex lcid =
  propertyGet "_Default"
              [ inVariant rowIndex
              , inVariant columnIndex
              , inInt32 lcid
              ]
              outVariant

setDefault :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Int32
           -> a3
           -> IRange a0
           -> IO ()
setDefault rowIndex columnIndex lcid rHS =
  propertySet "_Default"
              [ inVariant rowIndex
              , inVariant columnIndex
              , inInt32 lcid
              , inVariant rHS
              ]

delete1 :: (Variant a1, Variant a2)
        => a2
        -> IRange a0
        -> IO a1
delete1 shift =
  function1 "Delete"
            [inVariant shift]
            outVariant

getDependents :: IRange a0
              -> IO (Range ())
getDependents =
  propertyGet "Dependents"
              []
              outIUnknown

dialogBox :: (Variant a1)
          => IRange a0
          -> IO a1
dialogBox =
  function1 "DialogBox"
            []
            outVariant

getDirectDependents :: IRange a0
                    -> IO (Range ())
getDirectDependents =
  propertyGet "DirectDependents"
              []
              outIUnknown

getDirectPrecedents :: IRange a0
                    -> IO (Range ())
getDirectPrecedents =
  propertyGet "DirectPrecedents"
              []
              outIUnknown

editionOptions :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
               => XlEditionType
               -> XlEditionOptionsOption
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> IRange a0
               -> IO a1
editionOptions type0 option name reference appearance chartSize format =
  function1 "EditionOptions"
            [ inEnum type0
            , inEnum option
            , inVariant name
            , inVariant reference
            , inDefaultValue (inInt32 1) inVariant appearance
            , inDefaultValue (inInt32 1) inVariant chartSize
            , inVariant format
            ]
            outVariant

getEnd :: XlDirection
       -> IRange a0
       -> IO (Range ())
getEnd direction =
  propertyGet "End"
              [inEnum direction]
              outIUnknown

getEntireColumn :: IRange a0
                -> IO (Range ())
getEntireColumn =
  propertyGet "EntireColumn"
              []
              outIUnknown

getEntireRow :: IRange a0
             -> IO (Range ())
getEntireRow =
  propertyGet "EntireRow"
              []
              outIUnknown

fillDown :: (Variant a1)
         => IRange a0
         -> IO a1
fillDown =
  function1 "FillDown"
            []
            outVariant

fillLeft :: (Variant a1)
         => IRange a0
         -> IO a1
fillLeft =
  function1 "FillLeft"
            []
            outVariant

fillRight :: (Variant a1)
          => IRange a0
          -> IO a1
fillRight =
  function1 "FillRight"
            []
            outVariant

fillUp :: (Variant a1)
       => IRange a0
       -> IO a1
fillUp =
  function1 "FillUp"
            []
            outVariant

find0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> IRange a0
      -> IO (Range ())
find0 what after lookIn lookAt searchOrder searchDirection matchCase matchByte searchFormat =
  function1 "Find"
            [ inVariant what
            , inVariant after
            , inVariant lookIn
            , inVariant lookAt
            , inVariant searchOrder
            , inDefaultValue (inInt32 1) inVariant searchDirection
            , inVariant matchCase
            , inVariant matchByte
            , inVariant searchFormat
            ]
            outIUnknown

findNext :: (Variant a1)
         => a1
         -> IRange a0
         -> IO (Range ())
findNext after =
  function1 "FindNext"
            [inVariant after]
            outIUnknown

findPrevious :: (Variant a1)
             => a1
             -> IRange a0
             -> IO (Range ())
findPrevious after =
  function1 "FindPrevious"
            [inVariant after]
            outIUnknown

getFont :: IRange a0
        -> IO (Font ())
getFont =
  propertyGet "Font"
              []
              outIUnknown

getFormula :: (Variant a1)
           => Int32
           -> IRange a0
           -> IO a1
getFormula lcid =
  propertyGet "Formula"
              [inInt32 lcid]
              outVariant

setFormula :: Int32
           -> a1
           -> IRange a0
           -> IO ()
setFormula lcid rHS =
  propertySet "Formula"
              [ inInt32 lcid
              , inVariant rHS
              ]

getFormulaArray :: (Variant a1)
                => IRange a0
                -> IO a1
getFormulaArray =
  propertyGet "FormulaArray"
              []
              outVariant

setFormulaArray :: a1
                -> IRange a0
                -> IO ()
setFormulaArray rHS =
  propertySet "FormulaArray"
              [inVariant rHS]

getFormulaLabel :: IRange a0
                -> IO XlFormulaLabel
getFormulaLabel =
  propertyGet "FormulaLabel"
              []
              outEnum

setFormulaLabel :: XlFormulaLabel
                -> IRange a0
                -> IO ()
setFormulaLabel rHS =
  propertySet "FormulaLabel"
              [inEnum rHS]

getFormulaHidden :: (Variant a1)
                 => IRange a0
                 -> IO a1
getFormulaHidden =
  propertyGet "FormulaHidden"
              []
              outVariant

setFormulaHidden :: a1
                 -> IRange a0
                 -> IO ()
setFormulaHidden rHS =
  propertySet "FormulaHidden"
              [inVariant rHS]

getFormulaLocal :: (Variant a1)
                => IRange a0
                -> IO a1
getFormulaLocal =
  propertyGet "FormulaLocal"
              []
              outVariant

setFormulaLocal :: a1
                -> IRange a0
                -> IO ()
setFormulaLocal rHS =
  propertySet "FormulaLocal"
              [inVariant rHS]

getFormulaR1C1 :: (Variant a1)
               => Int32
               -> IRange a0
               -> IO a1
getFormulaR1C1 lcid =
  propertyGet "FormulaR1C1"
              [inInt32 lcid]
              outVariant

setFormulaR1C1 :: Int32
               -> a1
               -> IRange a0
               -> IO ()
setFormulaR1C1 lcid rHS =
  propertySet "FormulaR1C1"
              [ inInt32 lcid
              , inVariant rHS
              ]

getFormulaR1C1Local :: (Variant a1)
                    => IRange a0
                    -> IO a1
getFormulaR1C1Local =
  propertyGet "FormulaR1C1Local"
              []
              outVariant

setFormulaR1C1Local :: a1
                    -> IRange a0
                    -> IO ()
setFormulaR1C1Local rHS =
  propertySet "FormulaR1C1Local"
              [inVariant rHS]

functionWizard :: (Variant a1)
               => IRange a0
               -> IO a1
functionWizard =
  function1 "FunctionWizard"
            []
            outVariant

goalSeek :: a1
         -> Range a2
         -> IRange a0
         -> IO Bool
goalSeek goal changingCell =
  function1 "GoalSeek"
            [ inVariant goal
            , inIUnknown changingCell
            ]
            outBool

group :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
      => a2
      -> a3
      -> a4
      -> a5
      -> IRange a0
      -> IO a1
group start end by periods =
  function1 "Group"
            [ inVariant start
            , inVariant end
            , inVariant by
            , inVariant periods
            ]
            outVariant

getHasArray :: (Variant a1)
            => IRange a0
            -> IO a1
getHasArray =
  propertyGet "HasArray"
              []
              outVariant

getHasFormula :: (Variant a1)
              => IRange a0
              -> IO a1
getHasFormula =
  propertyGet "HasFormula"
              []
              outVariant

getHeight1 :: (Variant a1)
           => IRange a0
           -> IO a1
getHeight1 =
  propertyGet "Height"
              []
              outVariant

getHidden :: (Variant a1)
          => IRange a0
          -> IO a1
getHidden =
  propertyGet "Hidden"
              []
              outVariant

setHidden :: a1
          -> IRange a0
          -> IO ()
setHidden rHS =
  propertySet "Hidden"
              [inVariant rHS]

getHorizontalAlignment :: (Variant a1)
                       => IRange a0
                       -> IO a1
getHorizontalAlignment =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment :: a1
                       -> IRange a0
                       -> IO ()
setHorizontalAlignment rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getIndentLevel :: (Variant a1)
               => IRange a0
               -> IO a1
getIndentLevel =
  propertyGet "IndentLevel"
              []
              outVariant

setIndentLevel :: a1
               -> IRange a0
               -> IO ()
setIndentLevel rHS =
  propertySet "IndentLevel"
              [inVariant rHS]

insertIndent :: Int32
             -> IRange a0
             -> IO ()
insertIndent insertAmount =
  method0 "InsertIndent"
          [inInt32 insertAmount]

insert0 :: (Variant a1, Variant a2, Variant a3)
        => a2
        -> a3
        -> IRange a0
        -> IO a1
insert0 shift copyOrigin =
  function1 "Insert"
            [ inVariant shift
            , inVariant copyOrigin
            ]
            outVariant

getInterior :: IRange a0
            -> IO (Interior ())
getInterior =
  propertyGet "Interior"
              []
              outIUnknown

getItem1 :: (Variant a1, Variant a3)
         => a2
         -> a3
         -> Int32
         -> IRange a0
         -> IO a1
getItem1 rowIndex columnIndex lcid =
  propertyGet "Item"
              [ inVariant rowIndex
              , inVariant columnIndex
              , inInt32 lcid
              ]
              outVariant

setItem0 :: (Variant a2)
         => a1
         -> a2
         -> Int32
         -> a3
         -> IRange a0
         -> IO ()
setItem0 rowIndex columnIndex lcid rHS =
  propertySet "Item"
              [ inVariant rowIndex
              , inVariant columnIndex
              , inInt32 lcid
              , inVariant rHS
              ]

justify :: (Variant a1)
        => IRange a0
        -> IO a1
justify =
  function1 "Justify"
            []
            outVariant

getLeft1 :: (Variant a1)
         => IRange a0
         -> IO a1
getLeft1 =
  propertyGet "Left"
              []
              outVariant

getListHeaderRows :: IRange a0
                  -> IO Int32
getListHeaderRows =
  propertyGet "ListHeaderRows"
              []
              outInt32

listNames :: (Variant a1)
          => IRange a0
          -> IO a1
listNames =
  function1 "ListNames"
            []
            outVariant

getLocationInTable :: IRange a0
                   -> IO XlLocationInTable
getLocationInTable =
  propertyGet "LocationInTable"
              []
              outEnum

getLocked :: (Variant a1)
          => IRange a0
          -> IO a1
getLocked =
  propertyGet "Locked"
              []
              outVariant

setLocked :: a1
          -> IRange a0
          -> IO ()
setLocked rHS =
  propertySet "Locked"
              [inVariant rHS]

merge :: (Variant a1)
      => a1
      -> IRange a0
      -> IO ()
merge across =
  method0 "Merge"
          [inVariant across]

unMerge :: IRange a0
        -> IO ()
unMerge =
  method0 "UnMerge"
          []

getMergeArea :: IRange a0
             -> IO (Range ())
getMergeArea =
  propertyGet "MergeArea"
              []
              outIUnknown

getMergeCells :: (Variant a1)
              => IRange a0
              -> IO a1
getMergeCells =
  propertyGet "MergeCells"
              []
              outVariant

setMergeCells :: a1
              -> IRange a0
              -> IO ()
setMergeCells rHS =
  propertySet "MergeCells"
              [inVariant rHS]

getName1 :: (Variant a1)
         => IRange a0
         -> IO a1
getName1 =
  propertyGet "Name"
              []
              outVariant

setName0 :: a1
         -> IRange a0
         -> IO ()
setName0 rHS =
  propertySet "Name"
              [inVariant rHS]

navigateArrow :: (Variant a1, Variant a2, Variant a3, Variant a4)
              => a2
              -> a3
              -> a4
              -> IRange a0
              -> IO a1
navigateArrow towardPrecedent arrowNumber linkNumber =
  function1 "NavigateArrow"
            [ inVariant towardPrecedent
            , inVariant arrowNumber
            , inVariant linkNumber
            ]
            outVariant

getNewEnum3 :: IRange a0
            -> IO (IUnknown ())
getNewEnum3 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getNext :: IRange a0
        -> IO (Range ())
getNext =
  propertyGet "Next"
              []
              outIUnknown

noteText :: (Variant a1, Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> IRange a0
         -> IO String
noteText text0 start length =
  function1 "NoteText"
            [ inVariant text0
            , inVariant start
            , inVariant length
            ]
            outString

getNumberFormat :: (Variant a1)
                => IRange a0
                -> IO a1
getNumberFormat =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat :: a1
                -> IRange a0
                -> IO ()
setNumberFormat rHS =
  propertySet "NumberFormat"
              [inVariant rHS]

getNumberFormatLocal :: (Variant a1)
                     => IRange a0
                     -> IO a1
getNumberFormatLocal =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal :: a1
                     -> IRange a0
                     -> IO ()
setNumberFormatLocal rHS =
  propertySet "NumberFormatLocal"
              [inVariant rHS]

getOffset :: (Variant a1, Variant a2)
          => a1
          -> a2
          -> IRange a0
          -> IO (Range ())
getOffset rowOffset columnOffset =
  propertyGet "Offset"
              [ inVariant rowOffset
              , inVariant columnOffset
              ]
              outIUnknown

getOrientation0 :: (Variant a1)
                => IRange a0
                -> IO a1
getOrientation0 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation0 :: a1
                -> IRange a0
                -> IO ()
setOrientation0 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getOutlineLevel :: (Variant a1)
                => IRange a0
                -> IO a1
getOutlineLevel =
  propertyGet "OutlineLevel"
              []
              outVariant

setOutlineLevel :: a1
                -> IRange a0
                -> IO ()
setOutlineLevel rHS =
  propertySet "OutlineLevel"
              [inVariant rHS]

getPageBreak :: IRange a0
             -> IO Int32
getPageBreak =
  propertyGet "PageBreak"
              []
              outInt32

setPageBreak :: Int32
             -> IRange a0
             -> IO ()
setPageBreak rHS =
  propertySet "PageBreak"
              [inInt32 rHS]

parse :: (Variant a1, Variant a2, Variant a3)
      => a2
      -> a3
      -> IRange a0
      -> IO a1
parse parseLine destination =
  function1 "Parse"
            [ inVariant parseLine
            , inVariant destination
            ]
            outVariant

pasteSpecial :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> IRange a0
             -> IO a1
pasteSpecial paste operation skipBlanks transpose0 =
  function1 "_PasteSpecial"
            [ inDefaultValue (inInt32 (-4104)) inVariant paste
            , inDefaultValue (inInt32 (-4142)) inVariant operation
            , inVariant skipBlanks
            , inVariant transpose0
            ]
            outVariant

getPivotField :: IRange a0
              -> IO (PivotField ())
getPivotField =
  propertyGet "PivotField"
              []
              outIUnknown

getPivotItem :: IRange a0
             -> IO (PivotItem ())
getPivotItem =
  propertyGet "PivotItem"
              []
              outIUnknown

getPivotTable :: IRange a0
              -> IO (PivotTable ())
getPivotTable =
  propertyGet "PivotTable"
              []
              outIUnknown

getPrecedents :: IRange a0
              -> IO (Range ())
getPrecedents =
  propertyGet "Precedents"
              []
              outIUnknown

getPrefixCharacter :: (Variant a1)
                   => IRange a0
                   -> IO a1
getPrefixCharacter =
  propertyGet "PrefixCharacter"
              []
              outVariant

getPrevious :: IRange a0
            -> IO (Range ())
getPrevious =
  propertyGet "Previous"
              []
              outIUnknown

printOut1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
          => a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> IRange a0
          -> IO a1
printOut1 from to copies preview activePrinter printToFile collate =
  function1 "__PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            ]
            outVariant

printPreview0 :: (Variant a1, Variant a2)
              => a2
              -> IRange a0
              -> IO a1
printPreview0 enableChanges =
  function1 "PrintPreview"
            [inVariant enableChanges]
            outVariant

getQueryTable :: (Variant a1)
              => IRange a0
              -> IO a1
getQueryTable =
  propertyGet "QueryTable"
              []
              outVariant

getRange0 :: (Variant a2)
          => a1
          -> a2
          -> IRange a0
          -> IO (Range ())
getRange0 cell1 cell2 =
  propertyGet "Range"
              [ inVariant cell1
              , inVariant cell2
              ]
              outIUnknown

removeSubtotal :: (Variant a1)
               => IRange a0
               -> IO a1
removeSubtotal =
  function1 "RemoveSubtotal"
            []
            outVariant

replace0 :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> IRange a0
         -> IO Bool
replace0 what replacement lookAt searchOrder matchCase matchByte searchFormat replaceFormat =
  function1 "Replace"
            [ inVariant what
            , inVariant replacement
            , inVariant lookAt
            , inVariant searchOrder
            , inVariant matchCase
            , inVariant matchByte
            , inVariant searchFormat
            , inVariant replaceFormat
            ]
            outBool

getResize :: (Variant a1, Variant a2)
          => a1
          -> a2
          -> IRange a0
          -> IO (Range ())
getResize rowSize columnSize =
  propertyGet "Resize"
              [ inVariant rowSize
              , inVariant columnSize
              ]
              outIUnknown

getRow :: IRange a0
       -> IO Int32
getRow =
  propertyGet "Row"
              []
              outInt32

rowDifferences :: a1
               -> IRange a0
               -> IO (Range ())
rowDifferences comparison =
  function1 "RowDifferences"
            [inVariant comparison]
            outIUnknown

getRowHeight :: (Variant a1)
             => IRange a0
             -> IO a1
getRowHeight =
  propertyGet "RowHeight"
              []
              outVariant

setRowHeight :: a1
             -> IRange a0
             -> IO ()
setRowHeight rHS =
  propertySet "RowHeight"
              [inVariant rHS]

getRows0 :: IRange a0
         -> IO (Range ())
getRows0 =
  propertyGet "Rows"
              []
              outIUnknown

run0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
     => a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> a31
     -> IRange a0
     -> IO a1
run0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Run"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

select :: (Variant a1)
       => IRange a0
       -> IO a1
select =
  function1 "Select"
            []
            outVariant

show :: (Variant a1)
     => IRange a0
     -> IO a1
show =
  function1 "Show"
            []
            outVariant

showDependents :: (Variant a1, Variant a2)
               => a2
               -> IRange a0
               -> IO a1
showDependents remove =
  function1 "ShowDependents"
            [inVariant remove]
            outVariant

getShowDetail :: (Variant a1)
              => IRange a0
              -> IO a1
getShowDetail =
  propertyGet "ShowDetail"
              []
              outVariant

setShowDetail :: a1
              -> IRange a0
              -> IO ()
setShowDetail rHS =
  propertySet "ShowDetail"
              [inVariant rHS]

showErrors :: (Variant a1)
           => IRange a0
           -> IO a1
showErrors =
  function1 "ShowErrors"
            []
            outVariant

showPrecedents :: (Variant a1, Variant a2)
               => a2
               -> IRange a0
               -> IO a1
showPrecedents remove =
  function1 "ShowPrecedents"
            [inVariant remove]
            outVariant

getShrinkToFit :: (Variant a1)
               => IRange a0
               -> IO a1
getShrinkToFit =
  propertyGet "ShrinkToFit"
              []
              outVariant

setShrinkToFit :: a1
               -> IRange a0
               -> IO ()
setShrinkToFit rHS =
  propertySet "ShrinkToFit"
              [inVariant rHS]

sort :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
     => a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> IRange a0
     -> IO a1
sort key1 order1 key2 type0 order2 key3 order3 header orderCustom matchCase orientation sortMethod dataOption1 dataOption2 dataOption3 =
  function1 "Sort"
            [ inVariant key1
            , inDefaultValue (inInt32 1) inVariant order1
            , inVariant key2
            , inVariant type0
            , inDefaultValue (inInt32 1) inVariant order2
            , inVariant key3
            , inDefaultValue (inInt32 1) inVariant order3
            , inDefaultValue (inInt32 2) inVariant header
            , inVariant orderCustom
            , inVariant matchCase
            , inDefaultValue (inInt32 2) inVariant orientation
            , inDefaultValue (inInt32 1) inVariant sortMethod
            , inDefaultValue (inInt32 0) inVariant dataOption1
            , inDefaultValue (inInt32 0) inVariant dataOption2
            , inDefaultValue (inInt32 0) inVariant dataOption3
            ]
            outVariant

sortSpecial :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> IRange a0
            -> IO a1
sortSpecial sortMethod key1 order1 type0 key2 order2 key3 order3 header orderCustom matchCase orientation dataOption1 dataOption2 dataOption3 =
  function1 "SortSpecial"
            [ inDefaultValue (inInt32 1) inVariant sortMethod
            , inVariant key1
            , inDefaultValue (inInt32 1) inVariant order1
            , inVariant type0
            , inVariant key2
            , inDefaultValue (inInt32 1) inVariant order2
            , inVariant key3
            , inDefaultValue (inInt32 1) inVariant order3
            , inDefaultValue (inInt32 2) inVariant header
            , inVariant orderCustom
            , inVariant matchCase
            , inDefaultValue (inInt32 2) inVariant orientation
            , inDefaultValue (inInt32 0) inVariant dataOption1
            , inDefaultValue (inInt32 0) inVariant dataOption2
            , inDefaultValue (inInt32 0) inVariant dataOption3
            ]
            outVariant

getSoundNote :: IRange a0
             -> IO (SoundNote ())
getSoundNote =
  propertyGet "SoundNote"
              []
              outIUnknown

specialCells :: (Variant a1)
             => XlCellType
             -> a1
             -> IRange a0
             -> IO (Range ())
specialCells type0 value =
  function1 "SpecialCells"
            [ inEnum type0
            , inVariant value
            ]
            outIUnknown

getStyle1 :: (Variant a1)
          => IRange a0
          -> IO a1
getStyle1 =
  propertyGet "Style"
              []
              outVariant

setStyle1 :: a1
          -> IRange a0
          -> IO ()
setStyle1 rHS =
  propertySet "Style"
              [inVariant rHS]

subscribeTo :: (Variant a1, Variant a2)
            => String
            -> a2
            -> IRange a0
            -> IO a1
subscribeTo edition format =
  function1 "SubscribeTo"
            [ inString edition
            , inDefaultValue (inInt32 (-4158)) inVariant format
            ]
            outVariant

subtotal0 :: (Variant a1, Variant a3, Variant a4, Variant a5)
          => Int32
          -> XlConsolidationFunction
          -> a2
          -> a3
          -> a4
          -> a5
          -> IRange a0
          -> IO a1
subtotal0 groupBy function totalList replace1 pageBreaks summaryBelowData =
  function1 "Subtotal"
            [ inInt32 groupBy
            , inEnum function
            , inVariant totalList
            , inVariant replace1
            , inVariant pageBreaks
            , inDefaultValue (inInt32 1) inVariant summaryBelowData
            ]
            outVariant

getSummary :: (Variant a1)
           => IRange a0
           -> IO a1
getSummary =
  propertyGet "Summary"
              []
              outVariant

table :: (Variant a1, Variant a2, Variant a3)
      => a2
      -> a3
      -> IRange a0
      -> IO a1
table rowInput columnInput =
  function1 "Table"
            [ inVariant rowInput
            , inVariant columnInput
            ]
            outVariant

getText0 :: (Variant a1)
         => IRange a0
         -> IO a1
getText0 =
  propertyGet "Text"
              []
              outVariant

textToColumns :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
              => a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> a12
              -> a13
              -> a14
              -> a15
              -> IRange a0
              -> IO a1
textToColumns destination dataType textQualifier consecutiveDelimiter tab semicolon comma space other otherChar fieldInfo decimalSeparator thousandsSeparator trailingMinusNumbers =
  function1 "TextToColumns"
            [ inVariant destination
            , inDefaultValue (inInt32 1) inVariant dataType
            , inDefaultValue (inInt32 1) inVariant textQualifier
            , inVariant consecutiveDelimiter
            , inVariant tab
            , inVariant semicolon
            , inVariant comma
            , inVariant space
            , inVariant other
            , inVariant otherChar
            , inVariant fieldInfo
            , inVariant decimalSeparator
            , inVariant thousandsSeparator
            , inVariant trailingMinusNumbers
            ]
            outVariant

getTop1 :: (Variant a1)
        => IRange a0
        -> IO a1
getTop1 =
  propertyGet "Top"
              []
              outVariant

ungroup :: (Variant a1)
        => IRange a0
        -> IO a1
ungroup =
  function1 "Ungroup"
            []
            outVariant

getUseStandardHeight :: (Variant a1)
                     => IRange a0
                     -> IO a1
getUseStandardHeight =
  propertyGet "UseStandardHeight"
              []
              outVariant

setUseStandardHeight :: a1
                     -> IRange a0
                     -> IO ()
setUseStandardHeight rHS =
  propertySet "UseStandardHeight"
              [inVariant rHS]

getUseStandardWidth :: (Variant a1)
                    => IRange a0
                    -> IO a1
getUseStandardWidth =
  propertyGet "UseStandardWidth"
              []
              outVariant

setUseStandardWidth :: a1
                    -> IRange a0
                    -> IO ()
setUseStandardWidth rHS =
  propertySet "UseStandardWidth"
              [inVariant rHS]

getValidation :: IRange a0
              -> IO (Validation ())
getValidation =
  propertyGet "Validation"
              []
              outIUnknown

getValue0 :: (Variant a1, Variant a2)
          => a2
          -> Int32
          -> IRange a0
          -> IO a1
getValue0 rangeValueDataType lcid =
  propertyGet "Value"
              [ inVariant rangeValueDataType
              , inInt32 lcid
              ]
              outVariant

setValue :: (Variant a1)
         => a1
         -> Int32
         -> a2
         -> IRange a0
         -> IO ()
setValue rangeValueDataType lcid rHS =
  propertySet "Value"
              [ inVariant rangeValueDataType
              , inInt32 lcid
              , inVariant rHS
              ]

getValue2 :: (Variant a1)
          => Int32
          -> IRange a0
          -> IO a1
getValue2 lcid =
  propertyGet "Value2"
              [inInt32 lcid]
              outVariant

setValue2 :: Int32
          -> a1
          -> IRange a0
          -> IO ()
setValue2 lcid rHS =
  propertySet "Value2"
              [ inInt32 lcid
              , inVariant rHS
              ]

getVerticalAlignment :: (Variant a1)
                     => IRange a0
                     -> IO a1
getVerticalAlignment =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment :: a1
                     -> IRange a0
                     -> IO ()
setVerticalAlignment rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getWidth1 :: (Variant a1)
          => IRange a0
          -> IO a1
getWidth1 =
  propertyGet "Width"
              []
              outVariant

getWorksheet :: (Variant a1)
             => IRange a0
             -> IO a1
getWorksheet =
  propertyGet "Worksheet"
              []
              outVariant

getWrapText :: (Variant a1)
            => IRange a0
            -> IO a1
getWrapText =
  propertyGet "WrapText"
              []
              outVariant

setWrapText :: a1
            -> IRange a0
            -> IO ()
setWrapText rHS =
  propertySet "WrapText"
              [inVariant rHS]

addComment :: (Variant a1)
           => a1
           -> IRange a0
           -> IO (Comment ())
addComment text0 =
  function1 "AddComment"
            [inVariant text0]
            outIUnknown

getComment :: IRange a0
           -> IO (Comment ())
getComment =
  propertyGet "Comment"
              []
              outIUnknown

clearComments :: IRange a0
              -> IO ()
clearComments =
  method0 "ClearComments"
          []

getPhonetic0 :: IRange a0
             -> IO (Phonetic ())
getPhonetic0 =
  propertyGet "Phonetic"
              []
              outIUnknown

getFormatConditions :: IRange a0
                    -> IO (FormatConditions ())
getFormatConditions =
  propertyGet "FormatConditions"
              []
              outIUnknown

getReadingOrder :: IRange a0
                -> IO Int32
getReadingOrder =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder :: Int32
                -> IRange a0
                -> IO ()
setReadingOrder rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getHyperlinks :: IRange a0
              -> IO (Hyperlinks ())
getHyperlinks =
  propertyGet "Hyperlinks"
              []
              outIUnknown

getPhonetics :: IRange a0
             -> IO (Phonetics ())
getPhonetics =
  propertyGet "Phonetics"
              []
              outIUnknown

setPhonetic :: IRange a0
            -> IO ()
setPhonetic =
  method0 "SetPhonetic"
          []

getID :: IRange a0
      -> IO String
getID =
  propertyGet "ID"
              []
              outString

setID :: String
      -> IRange a0
      -> IO ()
setID rHS =
  propertySet "ID"
              [inString rHS]

printOut2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
          => a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> IRange a0
          -> IO a1
printOut2 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "_PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

getPivotCell :: IRange a0
             -> IO (PivotCell ())
getPivotCell =
  propertyGet "PivotCell"
              []
              outIUnknown

dirty :: IRange a0
      -> IO ()
dirty =
  method0 "Dirty"
          []

getErrors :: IRange a0
          -> IO (Errors ())
getErrors =
  propertyGet "Errors"
              []
              outIUnknown

getSmartTags :: IRange a0
             -> IO (SmartTags ())
getSmartTags =
  propertyGet "SmartTags"
              []
              outIUnknown

speak :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> IRange a0
      -> IO ()
speak speakDirection speakFormulas =
  method0 "Speak"
          [ inVariant speakDirection
          , inVariant speakFormulas
          ]

pasteSpecial0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
              => a2
              -> a3
              -> a4
              -> a5
              -> IRange a0
              -> IO a1
pasteSpecial0 paste operation skipBlanks transpose0 =
  function1 "PasteSpecial"
            [ inDefaultValue (inInt32 (-4104)) inVariant paste
            , inDefaultValue (inInt32 (-4142)) inVariant operation
            , inVariant skipBlanks
            , inVariant transpose0
            ]
            outVariant

getAllowEdit :: IRange a0
             -> IO Bool
getAllowEdit =
  propertyGet "AllowEdit"
              []
              outBool

getListObject :: IRange a0
              -> IO (ListObject ())
getListObject =
  propertyGet "ListObject"
              []
              outIUnknown

getXPath :: IRange a0
         -> IO (XPath ())
getXPath =
  propertyGet "XPath"
              []
              outIUnknown

getServerActions :: IRange a0
                 -> IO (Actions ())
getServerActions =
  propertyGet "ServerActions"
              []
              outIUnknown

removeDuplicates :: (Variant a1, Variant a2)
                 => a1
                 -> a2
                 -> IRange a0
                 -> IO ()
removeDuplicates columns header =
  method0 "RemoveDuplicates"
          [ inVariant columns
          , inDefaultValue (inInt32 2) inVariant header
          ]

printOut3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
          => a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> IRange a0
          -> IO a1
printOut3 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

getMDX :: IRange a0
       -> IO String
getMDX =
  propertyGet "MDX"
              []
              outString

exportAsFixedFormat :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                    => XlFixedFormatType
                    -> a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> IRange a0
                    -> IO ()
exportAsFixedFormat type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

getCountLarge :: (Variant a1)
              => IRange a0
              -> IO a1
getCountLarge =
  propertyGet "CountLarge"
              []
              outVariant

calculateRowMajorOrder :: (Variant a1)
                       => IRange a0
                       -> IO a1
calculateRowMajorOrder =
  function1 "CalculateRowMajorOrder"
            []
            outVariant

-- --------------------------------------------------
-- 
-- interface IChartEvents
-- 
-- --------------------------------------------------
data IChartEvents_ a = IChartEvents__ 
type IChartEvents a = IDispatch (IChartEvents_ a)
iidIChartEvents :: IID (IChartEvents ())
iidIChartEvents = mkIID "{0002440F-0001-0000-C000-000000000046}"

activate1 :: IChartEvents a0
          -> IO ()
activate1 =
  method0 "Activate"
          []

deactivate :: IChartEvents a0
           -> IO ()
deactivate =
  method0 "Deactivate"
          []

resize :: IChartEvents a0
       -> IO ()
resize =
  method0 "Resize"
          []

mouseDown :: Int32
          -> Int32
          -> Int32
          -> Int32
          -> IChartEvents a0
          -> IO ()
mouseDown button shift x y =
  method0 "MouseDown"
          [ inInt32 button
          , inInt32 shift
          , inInt32 x
          , inInt32 y
          ]

mouseUp :: Int32
        -> Int32
        -> Int32
        -> Int32
        -> IChartEvents a0
        -> IO ()
mouseUp button shift x y =
  method0 "MouseUp"
          [ inInt32 button
          , inInt32 shift
          , inInt32 x
          , inInt32 y
          ]

mouseMove :: Int32
          -> Int32
          -> Int32
          -> Int32
          -> IChartEvents a0
          -> IO ()
mouseMove button shift x y =
  method0 "MouseMove"
          [ inInt32 button
          , inInt32 shift
          , inInt32 x
          , inInt32 y
          ]

beforeRightClick :: Bool
                 -> IChartEvents a0
                 -> IO Bool
beforeRightClick cancel =
  method1 "BeforeRightClick"
          []
          (inoutBool cancel)

dragPlot :: IChartEvents a0
         -> IO ()
dragPlot =
  method0 "DragPlot"
          []

dragOver :: IChartEvents a0
         -> IO ()
dragOver =
  method0 "DragOver"
          []

beforeDoubleClick :: Int32
                  -> Int32
                  -> Int32
                  -> Bool
                  -> IChartEvents a0
                  -> IO Bool
beforeDoubleClick elementID arg1 arg2 cancel =
  method1 "BeforeDoubleClick"
          [ inInt32 elementID
          , inInt32 arg1
          , inInt32 arg2
          ]
          (inoutBool cancel)

select0 :: Int32
        -> Int32
        -> Int32
        -> IChartEvents a0
        -> IO ()
select0 elementID arg1 arg2 =
  method0 "Select"
          [ inInt32 elementID
          , inInt32 arg1
          , inInt32 arg2
          ]

seriesChange :: Int32
             -> Int32
             -> IChartEvents a0
             -> IO ()
seriesChange seriesIndex pointIndex =
  method0 "SeriesChange"
          [ inInt32 seriesIndex
          , inInt32 pointIndex
          ]

calculate1 :: IChartEvents a0
           -> IO ()
calculate1 =
  method0 "Calculate"
          []

-- --------------------------------------------------
-- 
-- interface _Chart
-- 
-- --------------------------------------------------
data Chart_ a = Chart__ 
type Chart a = IDispatch (Chart_ a)
iidChart :: IID (Chart ())
iidChart = mkIID "{000208D6-0000-0000-C000-000000000046}"

getApplication5 :: Chart a0
                -> IO (Maybe Application)
getApplication5 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator5 :: Chart a0
            -> IO XlCreator
getCreator5 =
  propertyGet "Creator"
              []
              outEnum

getParent20 :: Chart a0
            -> IO (IDispatch ())
getParent20 =
  propertyGet "Parent"
              []
              outIDispatch

activate2 :: Int32
          -> Chart a0
          -> IO ()
activate2 lcid =
  method0 "Activate"
          [inInt32 lcid]

copy0 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> Chart a0
      -> IO ()
copy0 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

delete2 :: Int32
        -> Chart a0
        -> IO ()
delete2 lcid =
  method0 "Delete"
          [inInt32 lcid]

getCodeName :: Chart a0
            -> IO String
getCodeName =
  propertyGet "CodeName"
              []
              outString

getCodeName0 :: Chart a0
             -> IO String
getCodeName0 =
  propertyGet "_CodeName"
              []
              outString

setCodeName :: String
            -> Chart a0
            -> IO ()
setCodeName rHS =
  propertySet "_CodeName"
              [inString rHS]

getIndex0 :: Int32
          -> Chart a0
          -> IO Int32
getIndex0 lcid =
  propertyGet "Index"
              [inInt32 lcid]
              outInt32

move :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Int32
     -> Chart a0
     -> IO ()
move before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getName2 :: Chart a0
         -> IO String
getName2 =
  propertyGet "Name"
              []
              outString

setName1 :: String
         -> Chart a0
         -> IO ()
setName1 rHS =
  propertySet "Name"
              [inString rHS]

getNext0 :: Chart a0
         -> IO (IDispatch ())
getNext0 =
  propertyGet "Next"
              []
              outIDispatch

getOnDoubleClick0 :: Int32
                  -> Chart a0
                  -> IO String
getOnDoubleClick0 lcid =
  propertyGet "OnDoubleClick"
              [inInt32 lcid]
              outString

setOnDoubleClick0 :: Int32
                  -> String
                  -> Chart a0
                  -> IO ()
setOnDoubleClick0 lcid rHS =
  propertySet "OnDoubleClick"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetActivate0 :: Int32
                    -> Chart a0
                    -> IO String
getOnSheetActivate0 lcid =
  propertyGet "OnSheetActivate"
              [inInt32 lcid]
              outString

setOnSheetActivate0 :: Int32
                    -> String
                    -> Chart a0
                    -> IO ()
setOnSheetActivate0 lcid rHS =
  propertySet "OnSheetActivate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetDeactivate0 :: Int32
                      -> Chart a0
                      -> IO String
getOnSheetDeactivate0 lcid =
  propertyGet "OnSheetDeactivate"
              [inInt32 lcid]
              outString

setOnSheetDeactivate0 :: Int32
                      -> String
                      -> Chart a0
                      -> IO ()
setOnSheetDeactivate0 lcid rHS =
  propertySet "OnSheetDeactivate"
              [ inInt32 lcid
              , inString rHS
              ]

getPageSetup :: Chart a0
             -> IO (PageSetup ())
getPageSetup =
  propertyGet "PageSetup"
              []
              outIUnknown

getPrevious0 :: Chart a0
             -> IO (IDispatch ())
getPrevious0 =
  propertyGet "Previous"
              []
              outIDispatch

printOut4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> Int32
          -> Chart a0
          -> IO ()
printOut4 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview1 :: (Variant a1)
              => a1
              -> Int32
              -> Chart a0
              -> IO ()
printPreview1 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

protect :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> Int32
        -> Chart a0
        -> IO ()
protect password drawingObjects contents scenarios userInterfaceOnly lcid =
  method0 "_Protect"
          [ inVariant password
          , inVariant drawingObjects
          , inVariant contents
          , inVariant scenarios
          , inVariant userInterfaceOnly
          , inInt32 lcid
          ]

getProtectContents :: Int32
                   -> Chart a0
                   -> IO Bool
getProtectContents lcid =
  propertyGet "ProtectContents"
              [inInt32 lcid]
              outBool

getProtectDrawingObjects :: Int32
                         -> Chart a0
                         -> IO Bool
getProtectDrawingObjects lcid =
  propertyGet "ProtectDrawingObjects"
              [inInt32 lcid]
              outBool

getProtectionMode :: Int32
                  -> Chart a0
                  -> IO Bool
getProtectionMode lcid =
  propertyGet "ProtectionMode"
              [inInt32 lcid]
              outBool

dummy23 :: Chart a0
        -> IO ()
dummy23 =
  method0 "_Dummy23"
          []

saveAs :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
       => String
       -> a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> Int32
       -> Chart a0
       -> IO ()
saveAs filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout lcid =
  method0 "_SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inInt32 lcid
          ]

select1 :: (Variant a1)
        => a1
        -> Int32
        -> Chart a0
        -> IO ()
select1 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

unprotect :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO ()
unprotect password lcid =
  method0 "Unprotect"
          [ inVariant password
          , inInt32 lcid
          ]

getVisible5 :: Int32
            -> Chart a0
            -> IO XlSheetVisibility
getVisible5 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outEnum

setVisible5 :: Int32
            -> XlSheetVisibility
            -> Chart a0
            -> IO ()
setVisible5 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inEnum rHS
              ]

getShapes :: Chart a0
          -> IO (Shapes ())
getShapes =
  propertyGet "Shapes"
              []
              outIUnknown

applyDataLabels :: (Variant a1, Variant a2, Variant a3, Variant a4)
                => a1
                -> a2
                -> a3
                -> a4
                -> Int32
                -> Chart a0
                -> IO ()
applyDataLabels type0 legendKey autoText hasLeaderLines lcid =
  method0 "_ApplyDataLabels"
          [ inDefaultValue (inInt32 2) inVariant type0
          , inVariant legendKey
          , inVariant autoText
          , inVariant hasLeaderLines
          , inInt32 lcid
          ]

arcs :: (Variant a1)
     => a1
     -> Int32
     -> Chart a0
     -> IO (IDispatch ())
arcs index0 lcid =
  function1 "Arcs"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getArea3DGroup :: Int32
               -> Chart a0
               -> IO (ChartGroup ())
getArea3DGroup lcid =
  propertyGet "Area3DGroup"
              [inInt32 lcid]
              outIUnknown

areaGroups :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
areaGroups index0 lcid =
  function1 "AreaGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

autoFormat0 :: (Variant a1)
            => Int32
            -> a1
            -> Chart a0
            -> IO ()
autoFormat0 gallery format =
  method0 "AutoFormat"
          [ inInt32 gallery
          , inVariant format
          ]

getAutoScaling :: Int32
               -> Chart a0
               -> IO Bool
getAutoScaling lcid =
  propertyGet "AutoScaling"
              [inInt32 lcid]
              outBool

setAutoScaling :: Int32
               -> Bool
               -> Chart a0
               -> IO ()
setAutoScaling lcid rHS =
  propertySet "AutoScaling"
              [ inInt32 lcid
              , inBool rHS
              ]

axes :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Int32
     -> Chart a0
     -> IO (IDispatch ())
axes type0 axisGroup lcid =
  function1 "Axes"
            [ inVariant type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            , inInt32 lcid
            ]
            outIDispatch

setBackgroundPicture :: String
                     -> Chart a0
                     -> IO ()
setBackgroundPicture filename =
  method0 "SetBackgroundPicture"
          [inString filename]

getBar3DGroup :: Int32
              -> Chart a0
              -> IO (ChartGroup ())
getBar3DGroup lcid =
  propertyGet "Bar3DGroup"
              [inInt32 lcid]
              outIUnknown

barGroups :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
barGroups index0 lcid =
  function1 "BarGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

buttons :: (Variant a1)
        => a1
        -> Int32
        -> Chart a0
        -> IO (IDispatch ())
buttons index0 lcid =
  function1 "Buttons"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getChartArea :: Int32
             -> Chart a0
             -> IO (ChartArea ())
getChartArea lcid =
  propertyGet "ChartArea"
              [inInt32 lcid]
              outIUnknown

chartGroups :: (Variant a1)
            => a1
            -> Int32
            -> Chart a0
            -> IO (IDispatch ())
chartGroups index0 lcid =
  function1 "ChartGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

chartObjects :: (Variant a1)
             => a1
             -> Int32
             -> Chart a0
             -> IO (IDispatch ())
chartObjects index0 lcid =
  function1 "ChartObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getChartTitle :: Int32
              -> Chart a0
              -> IO (ChartTitle ())
getChartTitle lcid =
  propertyGet "ChartTitle"
              [inInt32 lcid]
              outIUnknown

chartWizard :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> Int32
            -> Chart a0
            -> IO ()
chartWizard source gallery format plotBy categoryLabels seriesLabels hasLegend title categoryTitle valueTitle extraTitle lcid =
  method0 "ChartWizard"
          [ inVariant source
          , inVariant gallery
          , inVariant format
          , inVariant plotBy
          , inVariant categoryLabels
          , inVariant seriesLabels
          , inVariant hasLegend
          , inVariant title
          , inVariant categoryTitle
          , inVariant valueTitle
          , inVariant extraTitle
          , inInt32 lcid
          ]

checkBoxes :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
checkBoxes index0 lcid =
  function1 "CheckBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

checkSpelling1 :: (Variant a1, Variant a2, Variant a3, Variant a4)
               => a1
               -> a2
               -> a3
               -> a4
               -> Int32
               -> Chart a0
               -> IO ()
checkSpelling1 customDictionary ignoreUppercase alwaysSuggest spellLang lcid =
  method0 "CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          , inInt32 lcid
          ]

getColumn3DGroup :: Int32
                 -> Chart a0
                 -> IO (ChartGroup ())
getColumn3DGroup lcid =
  propertyGet "Column3DGroup"
              [inInt32 lcid]
              outIUnknown

columnGroups :: (Variant a1)
             => a1
             -> Int32
             -> Chart a0
             -> IO (IDispatch ())
columnGroups index0 lcid =
  function1 "ColumnGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

copyPicture0 :: (Variant a1, Variant a2, Variant a3)
             => a1
             -> a2
             -> a3
             -> Int32
             -> Chart a0
             -> IO ()
copyPicture0 appearance format size lcid =
  method0 "CopyPicture"
          [ inDefaultValue (inInt32 1) inVariant appearance
          , inDefaultValue (inInt32 (-4147)) inVariant format
          , inDefaultValue (inInt32 2) inVariant size
          , inInt32 lcid
          ]

getCorners :: Int32
           -> Chart a0
           -> IO (Corners ())
getCorners lcid =
  propertyGet "Corners"
              [inInt32 lcid]
              outIUnknown

createPublisher0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> Int32
                 -> Chart a0
                 -> IO ()
createPublisher0 edition appearance size containsPICT containsBIFF containsRTF containsVALU lcid =
  method0 "CreatePublisher"
          [ inVariant edition
          , inDefaultValue (inInt32 1) inVariant appearance
          , inDefaultValue (inInt32 1) inVariant size
          , inVariant containsPICT
          , inVariant containsBIFF
          , inVariant containsRTF
          , inVariant containsVALU
          , inInt32 lcid
          ]

getDataTable :: Chart a0
             -> IO (DataTable ())
getDataTable =
  propertyGet "DataTable"
              []
              outIUnknown

getDepthPercent :: Int32
                -> Chart a0
                -> IO Int32
getDepthPercent lcid =
  propertyGet "DepthPercent"
              [inInt32 lcid]
              outInt32

setDepthPercent :: Int32
                -> Int32
                -> Chart a0
                -> IO ()
setDepthPercent lcid rHS =
  propertySet "DepthPercent"
              [ inInt32 lcid
              , inInt32 rHS
              ]

deselect :: Int32
         -> Chart a0
         -> IO ()
deselect lcid =
  method0 "Deselect"
          [inInt32 lcid]

getDisplayBlanksAs :: Int32
                   -> Chart a0
                   -> IO XlDisplayBlanksAs
getDisplayBlanksAs lcid =
  propertyGet "DisplayBlanksAs"
              [inInt32 lcid]
              outEnum

setDisplayBlanksAs :: Int32
                   -> XlDisplayBlanksAs
                   -> Chart a0
                   -> IO ()
setDisplayBlanksAs lcid rHS =
  propertySet "DisplayBlanksAs"
              [ inInt32 lcid
              , inEnum rHS
              ]

doughnutGroups :: (Variant a1)
               => a1
               -> Int32
               -> Chart a0
               -> IO (IDispatch ())
doughnutGroups index0 lcid =
  function1 "DoughnutGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

drawings :: (Variant a1)
         => a1
         -> Int32
         -> Chart a0
         -> IO (IDispatch ())
drawings index0 lcid =
  function1 "Drawings"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

drawingObjects :: (Variant a1)
               => a1
               -> Int32
               -> Chart a0
               -> IO (IDispatch ())
drawingObjects index0 lcid =
  function1 "DrawingObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dropDowns :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
dropDowns index0 lcid =
  function1 "DropDowns"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getElevation :: Int32
             -> Chart a0
             -> IO Int32
getElevation lcid =
  propertyGet "Elevation"
              [inInt32 lcid]
              outInt32

setElevation :: Int32
             -> Int32
             -> Chart a0
             -> IO ()
setElevation lcid rHS =
  propertySet "Elevation"
              [ inInt32 lcid
              , inInt32 rHS
              ]

evaluate1 :: (Variant a1)
          => a2
          -> Int32
          -> Chart a0
          -> IO a1
evaluate1 name lcid =
  function1 "Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

evaluate2 :: (Variant a1)
          => a2
          -> Int32
          -> Chart a0
          -> IO a1
evaluate2 name lcid =
  function1 "_Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

getFloor :: Int32
         -> Chart a0
         -> IO (Floor ())
getFloor lcid =
  propertyGet "Floor"
              [inInt32 lcid]
              outIUnknown

getGapDepth :: Int32
            -> Chart a0
            -> IO Int32
getGapDepth lcid =
  propertyGet "GapDepth"
              [inInt32 lcid]
              outInt32

setGapDepth :: Int32
            -> Int32
            -> Chart a0
            -> IO ()
setGapDepth lcid rHS =
  propertySet "GapDepth"
              [ inInt32 lcid
              , inInt32 rHS
              ]

groupBoxes :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
groupBoxes index0 lcid =
  function1 "GroupBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

groupObjects :: (Variant a1)
             => a1
             -> Int32
             -> Chart a0
             -> IO (IDispatch ())
groupObjects index0 lcid =
  function1 "GroupObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getHasAxis :: (Variant a1, Variant a2, Variant a3)
           => a2
           -> a3
           -> Int32
           -> Chart a0
           -> IO a1
getHasAxis index1 index2 lcid =
  propertyGet "HasAxis"
              [ inVariant index1
              , inVariant index2
              , inInt32 lcid
              ]
              outVariant

setHasAxis :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Int32
           -> a3
           -> Chart a0
           -> IO ()
setHasAxis index1 index2 lcid rHS =
  propertySet "HasAxis"
              [ inVariant index1
              , inVariant index2
              , inInt32 lcid
              , inVariant rHS
              ]

getHasDataTable :: Chart a0
                -> IO Bool
getHasDataTable =
  propertyGet "HasDataTable"
              []
              outBool

setHasDataTable :: Bool
                -> Chart a0
                -> IO ()
setHasDataTable rHS =
  propertySet "HasDataTable"
              [inBool rHS]

getHasLegend :: Int32
             -> Chart a0
             -> IO Bool
getHasLegend lcid =
  propertyGet "HasLegend"
              [inInt32 lcid]
              outBool

setHasLegend :: Int32
             -> Bool
             -> Chart a0
             -> IO ()
setHasLegend lcid rHS =
  propertySet "HasLegend"
              [ inInt32 lcid
              , inBool rHS
              ]

getHasTitle :: Int32
            -> Chart a0
            -> IO Bool
getHasTitle lcid =
  propertyGet "HasTitle"
              [inInt32 lcid]
              outBool

setHasTitle :: Int32
            -> Bool
            -> Chart a0
            -> IO ()
setHasTitle lcid rHS =
  propertySet "HasTitle"
              [ inInt32 lcid
              , inBool rHS
              ]

getHeightPercent :: Int32
                 -> Chart a0
                 -> IO Int32
getHeightPercent lcid =
  propertyGet "HeightPercent"
              [inInt32 lcid]
              outInt32

setHeightPercent :: Int32
                 -> Int32
                 -> Chart a0
                 -> IO ()
setHeightPercent lcid rHS =
  propertySet "HeightPercent"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getHyperlinks0 :: Chart a0
               -> IO (Hyperlinks ())
getHyperlinks0 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

labels :: (Variant a1)
       => a1
       -> Int32
       -> Chart a0
       -> IO (IDispatch ())
labels index0 lcid =
  function1 "Labels"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getLegend :: Int32
          -> Chart a0
          -> IO (Legend ())
getLegend lcid =
  propertyGet "Legend"
              [inInt32 lcid]
              outIUnknown

getLine3DGroup :: Int32
               -> Chart a0
               -> IO (ChartGroup ())
getLine3DGroup lcid =
  propertyGet "Line3DGroup"
              [inInt32 lcid]
              outIUnknown

lineGroups :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
lineGroups index0 lcid =
  function1 "LineGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

lines :: (Variant a1)
      => a1
      -> Int32
      -> Chart a0
      -> IO (IDispatch ())
lines index0 lcid =
  function1 "Lines"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

listBoxes :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
listBoxes index0 lcid =
  function1 "ListBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

location :: (Variant a1)
         => XlChartLocation
         -> a1
         -> Chart a0
         -> IO (Maybe Chart)
location where0 name iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    where0 <- marshallEnum32 where0
    name <- marshallVariant name
    invokeAndCheck (\ methPtr iptr -> prim_Excel_location methPtr iptr where0 name rHS) 102 iptr
    doThenFree free (readunique readChart) rHS

foreign import stdcall "prim_Excel_location" prim_Excel_location :: Ptr () -> Ptr () -> Int32 -> VARIANT -> Ptr (Ptr Chart) -> IO Int32
oLEObjects :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
oLEObjects index0 lcid =
  function1 "OLEObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

optionButtons :: (Variant a1)
              => a1
              -> Int32
              -> Chart a0
              -> IO (IDispatch ())
optionButtons index0 lcid =
  function1 "OptionButtons"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

ovals :: (Variant a1)
      => a1
      -> Int32
      -> Chart a0
      -> IO (IDispatch ())
ovals index0 lcid =
  function1 "Ovals"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

paste :: (Variant a1)
      => a1
      -> Int32
      -> Chart a0
      -> IO ()
paste type0 lcid =
  method0 "Paste"
          [ inVariant type0
          , inInt32 lcid
          ]

getPerspective0 :: Int32
                -> Chart a0
                -> IO Int32
getPerspective0 lcid =
  propertyGet "Perspective"
              [inInt32 lcid]
              outInt32

setPerspective0 :: Int32
                -> Int32
                -> Chart a0
                -> IO ()
setPerspective0 lcid rHS =
  propertySet "Perspective"
              [ inInt32 lcid
              , inInt32 rHS
              ]

pictures :: (Variant a1)
         => a1
         -> Int32
         -> Chart a0
         -> IO (IDispatch ())
pictures index0 lcid =
  function1 "Pictures"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getPie3DGroup :: Int32
              -> Chart a0
              -> IO (ChartGroup ())
getPie3DGroup lcid =
  propertyGet "Pie3DGroup"
              [inInt32 lcid]
              outIUnknown

pieGroups :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
pieGroups index0 lcid =
  function1 "PieGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getPlotArea :: Int32
            -> Chart a0
            -> IO (PlotArea ())
getPlotArea lcid =
  propertyGet "PlotArea"
              [inInt32 lcid]
              outIUnknown

getPlotVisibleOnly :: Int32
                   -> Chart a0
                   -> IO Bool
getPlotVisibleOnly lcid =
  propertyGet "PlotVisibleOnly"
              [inInt32 lcid]
              outBool

setPlotVisibleOnly :: Int32
                   -> Bool
                   -> Chart a0
                   -> IO ()
setPlotVisibleOnly lcid rHS =
  propertySet "PlotVisibleOnly"
              [ inInt32 lcid
              , inBool rHS
              ]

radarGroups :: (Variant a1)
            => a1
            -> Int32
            -> Chart a0
            -> IO (IDispatch ())
radarGroups index0 lcid =
  function1 "RadarGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

rectangles :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
rectangles index0 lcid =
  function1 "Rectangles"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getRightAngleAxes :: (Variant a1)
                  => Int32
                  -> Chart a0
                  -> IO a1
getRightAngleAxes lcid =
  propertyGet "RightAngleAxes"
              [inInt32 lcid]
              outVariant

setRightAngleAxes :: Int32
                  -> a1
                  -> Chart a0
                  -> IO ()
setRightAngleAxes lcid rHS =
  propertySet "RightAngleAxes"
              [ inInt32 lcid
              , inVariant rHS
              ]

getRotation :: (Variant a1)
            => Int32
            -> Chart a0
            -> IO a1
getRotation lcid =
  propertyGet "Rotation"
              [inInt32 lcid]
              outVariant

setRotation :: Int32
            -> a1
            -> Chart a0
            -> IO ()
setRotation lcid rHS =
  propertySet "Rotation"
              [ inInt32 lcid
              , inVariant rHS
              ]

scrollBars :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
scrollBars index0 lcid =
  function1 "ScrollBars"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

seriesCollection :: (Variant a1)
                 => a1
                 -> Int32
                 -> Chart a0
                 -> IO (IDispatch ())
seriesCollection index0 lcid =
  function1 "SeriesCollection"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getSizeWithWindow :: Int32
                  -> Chart a0
                  -> IO Bool
getSizeWithWindow lcid =
  propertyGet "SizeWithWindow"
              [inInt32 lcid]
              outBool

setSizeWithWindow :: Int32
                  -> Bool
                  -> Chart a0
                  -> IO ()
setSizeWithWindow lcid rHS =
  propertySet "SizeWithWindow"
              [ inInt32 lcid
              , inBool rHS
              ]

getShowWindow :: Chart a0
              -> IO Bool
getShowWindow =
  propertyGet "ShowWindow"
              []
              outBool

setShowWindow :: Bool
              -> Chart a0
              -> IO ()
setShowWindow rHS =
  propertySet "ShowWindow"
              [inBool rHS]

spinners :: (Variant a1)
         => a1
         -> Int32
         -> Chart a0
         -> IO (IDispatch ())
spinners index0 lcid =
  function1 "Spinners"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getSubType :: Int32
           -> Chart a0
           -> IO Int32
getSubType lcid =
  propertyGet "SubType"
              [inInt32 lcid]
              outInt32

setSubType :: Int32
           -> Int32
           -> Chart a0
           -> IO ()
setSubType lcid rHS =
  propertySet "SubType"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getSurfaceGroup :: Int32
                -> Chart a0
                -> IO (ChartGroup ())
getSurfaceGroup lcid =
  propertyGet "SurfaceGroup"
              [inInt32 lcid]
              outIUnknown

textBoxes :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
textBoxes index0 lcid =
  function1 "TextBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getType4 :: Int32
         -> Chart a0
         -> IO Int32
getType4 lcid =
  propertyGet "Type"
              [inInt32 lcid]
              outInt32

setType1 :: Int32
         -> Int32
         -> Chart a0
         -> IO ()
setType1 lcid rHS =
  propertySet "Type"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getChartType :: Chart a0
             -> IO XlChartType
getChartType =
  propertyGet "ChartType"
              []
              outEnum

setChartType :: XlChartType
             -> Chart a0
             -> IO ()
setChartType rHS =
  propertySet "ChartType"
              [inEnum rHS]

applyCustomType :: (Variant a1)
                => XlChartType
                -> a1
                -> Chart a0
                -> IO ()
applyCustomType chartType typeName =
  method0 "ApplyCustomType"
          [ inEnum chartType
          , inVariant typeName
          ]

getWalls :: Int32
         -> Chart a0
         -> IO (Walls ())
getWalls lcid =
  propertyGet "Walls"
              [inInt32 lcid]
              outIUnknown

getWallsAndGridlines2D :: Int32
                       -> Chart a0
                       -> IO Bool
getWallsAndGridlines2D lcid =
  propertyGet "WallsAndGridlines2D"
              [inInt32 lcid]
              outBool

setWallsAndGridlines2D :: Int32
                       -> Bool
                       -> Chart a0
                       -> IO ()
setWallsAndGridlines2D lcid rHS =
  propertySet "WallsAndGridlines2D"
              [ inInt32 lcid
              , inBool rHS
              ]

xYGroups :: (Variant a1)
         => a1
         -> Int32
         -> Chart a0
         -> IO (IDispatch ())
xYGroups index0 lcid =
  function1 "XYGroups"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getBarShape :: Chart a0
            -> IO XlBarShape
getBarShape =
  propertyGet "BarShape"
              []
              outEnum

setBarShape :: XlBarShape
            -> Chart a0
            -> IO ()
setBarShape rHS =
  propertySet "BarShape"
              [inEnum rHS]

getPlotBy :: Chart a0
          -> IO XlRowCol
getPlotBy =
  propertyGet "PlotBy"
              []
              outEnum

setPlotBy :: XlRowCol
          -> Chart a0
          -> IO ()
setPlotBy rHS =
  propertySet "PlotBy"
              [inEnum rHS]

copyChartBuild :: Chart a0
               -> IO ()
copyChartBuild =
  method0 "CopyChartBuild"
          []

getProtectFormatting :: Chart a0
                     -> IO Bool
getProtectFormatting =
  propertyGet "ProtectFormatting"
              []
              outBool

setProtectFormatting :: Bool
                     -> Chart a0
                     -> IO ()
setProtectFormatting rHS =
  propertySet "ProtectFormatting"
              [inBool rHS]

getProtectData :: Chart a0
               -> IO Bool
getProtectData =
  propertyGet "ProtectData"
              []
              outBool

setProtectData :: Bool
               -> Chart a0
               -> IO ()
setProtectData rHS =
  propertySet "ProtectData"
              [inBool rHS]

getProtectGoalSeek :: Chart a0
                   -> IO Bool
getProtectGoalSeek =
  propertyGet "ProtectGoalSeek"
              []
              outBool

setProtectGoalSeek :: Bool
                   -> Chart a0
                   -> IO ()
setProtectGoalSeek rHS =
  propertySet "ProtectGoalSeek"
              [inBool rHS]

getProtectSelection :: Chart a0
                    -> IO Bool
getProtectSelection =
  propertyGet "ProtectSelection"
              []
              outBool

setProtectSelection :: Bool
                    -> Chart a0
                    -> IO ()
setProtectSelection rHS =
  propertySet "ProtectSelection"
              [inBool rHS]

getChartElement :: Int32
                -> Int32
                -> Int32
                -> Int32
                -> Int32
                -> Chart a0
                -> IO ()
getChartElement x y elementID arg1 arg2 =
  method0 "GetChartElement"
          [ inInt32 x
          , inInt32 y
          , inInt32 elementID
          , inInt32 arg1
          , inInt32 arg2
          ]

setSourceData :: (Variant a2)
              => Range a1
              -> a2
              -> Chart a0
              -> IO ()
setSourceData source plotBy =
  method0 "SetSourceData"
          [ inIUnknown source
          , inVariant plotBy
          ]

export :: (Variant a1, Variant a2)
       => String
       -> a1
       -> a2
       -> Chart a0
       -> IO Bool
export filename filterName interactive =
  function1 "Export"
            [ inString filename
            , inVariant filterName
            , inVariant interactive
            ]
            outBool

refresh :: Chart a0
        -> IO ()
refresh =
  method0 "Refresh"
          []

getPivotLayout :: Chart a0
               -> IO (PivotLayout ())
getPivotLayout =
  propertyGet "PivotLayout"
              []
              outIUnknown

getHasPivotFields :: Chart a0
                  -> IO Bool
getHasPivotFields =
  propertyGet "HasPivotFields"
              []
              outBool

setHasPivotFields :: Bool
                  -> Chart a0
                  -> IO ()
setHasPivotFields rHS =
  propertySet "HasPivotFields"
              [inBool rHS]

getScripts :: Chart a0
           -> IO (Maybe Scripts)
getScripts iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getScripts methPtr iptr rHS) 161 iptr
    doThenFree free (readunique readScripts) rHS

foreign import stdcall "dynamic" prim_Excel_getScripts :: Ptr () -> Ptr () -> Ptr (Ptr Scripts) -> IO Int32
printOut5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> Int32
          -> Chart a0
          -> IO ()
printOut5 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

getTab :: Chart a0
       -> IO (Tab ())
getTab =
  propertyGet "Tab"
              []
              outIUnknown

getMailEnvelope :: Chart a0
                -> IO (Maybe MsoEnvelope)
getMailEnvelope iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getMailEnvelope methPtr iptr rHS) 164 iptr
    doThenFree free (readunique readMsoEnvelope) rHS

foreign import stdcall "dynamic" prim_Excel_getMailEnvelope :: Ptr () -> Ptr () -> Ptr (Ptr MsoEnvelope) -> IO Int32
applyDataLabels0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> Int32
                 -> Chart a0
                 -> IO ()
applyDataLabels0 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator lcid =
  method0 "ApplyDataLabels"
          [ inDefaultValue (inInt32 2) inVariant type0
          , inVariant legendKey
          , inVariant autoText
          , inVariant hasLeaderLines
          , inVariant showSeriesName
          , inVariant showCategoryName
          , inVariant showValue
          , inVariant showPercentage
          , inVariant showBubbleSize
          , inVariant separator
          , inInt32 lcid
          ]

saveAs0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> Chart a0
        -> IO ()
saveAs0 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout local =
  method0 "SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inVariant local
          ]

protect0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Chart a0
         -> IO ()
protect0 password drawingObjects0 contents scenarios userInterfaceOnly =
  method0 "Protect"
          [ inVariant password
          , inVariant drawingObjects0
          , inVariant contents
          , inVariant scenarios
          , inVariant userInterfaceOnly
          ]

applyLayout :: (Variant a1)
            => Int32
            -> a1
            -> Chart a0
            -> IO ()
applyLayout layout chartType =
  method0 "ApplyLayout"
          [ inInt32 layout
          , inVariant chartType
          ]

setElement :: MsoChartElementType
           -> Chart a0
           -> IO ()
setElement element iptr =
  do
    element <- marshallMsoChartElementType element
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setElement methPtr iptr element) 169 iptr

foreign import stdcall "prim_Excel_setElement" prim_Excel_setElement :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getShowDataLabelsOverMaximum :: Chart a0
                             -> IO Bool
getShowDataLabelsOverMaximum =
  propertyGet "ShowDataLabelsOverMaximum"
              []
              outBool

setShowDataLabelsOverMaximum :: Bool
                             -> Chart a0
                             -> IO ()
setShowDataLabelsOverMaximum rHS =
  propertySet "ShowDataLabelsOverMaximum"
              [inBool rHS]

getSideWall :: Chart a0
            -> IO (Walls ())
getSideWall =
  propertyGet "SideWall"
              []
              outIUnknown

getBackWall :: Chart a0
            -> IO (Walls ())
getBackWall =
  propertyGet "BackWall"
              []
              outIUnknown

printOut6 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> Int32
          -> Chart a0
          -> IO ()
printOut6 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

applyChartTemplate :: String
                   -> Chart a0
                   -> IO ()
applyChartTemplate filename =
  method0 "ApplyChartTemplate"
          [inString filename]

saveChartTemplate :: String
                  -> Chart a0
                  -> IO ()
saveChartTemplate filename =
  method0 "SaveChartTemplate"
          [inString filename]

setDefaultChart0 :: a1
                 -> Chart a0
                 -> IO ()
setDefaultChart0 name =
  method0 "SetDefaultChart"
          [inVariant name]

exportAsFixedFormat0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                     => XlFixedFormatType
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> Chart a0
                     -> IO ()
exportAsFixedFormat0 type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

getChartStyle :: (Variant a1)
              => Chart a0
              -> IO a1
getChartStyle =
  propertyGet "ChartStyle"
              []
              outVariant

setChartStyle :: a1
              -> Chart a0
              -> IO ()
setChartStyle rHS =
  propertySet "ChartStyle"
              [inVariant rHS]

clearToMatchStyle :: Chart a0
                  -> IO ()
clearToMatchStyle =
  method0 "ClearToMatchStyle"
          []

-- --------------------------------------------------
-- 
-- interface Sheets
-- 
-- --------------------------------------------------
data Sheets_ a = Sheets__ 
type Sheets a = IDispatch (Sheets_ a)
iidSheets :: IID (Sheets ())
iidSheets = mkIID "{000208D7-0000-0000-C000-000000000046}"

getApplication6 :: Sheets a0
                -> IO (Maybe Application)
getApplication6 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator6 :: Sheets a0
            -> IO XlCreator
getCreator6 =
  propertyGet "Creator"
              []
              outEnum

getParent21 :: Sheets a0
            -> IO (IDispatch ())
getParent21 =
  propertyGet "Parent"
              []
              outIDispatch

add :: (Variant a1, Variant a2, Variant a3, Variant a4)
    => a1
    -> a2
    -> a3
    -> a4
    -> Int32
    -> Sheets a0
    -> IO (IDispatch ())
add before after count0 type0 lcid =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count0
            , inVariant type0
            , inInt32 lcid
            ]
            outIDispatch

copy1 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> Sheets a0
      -> IO ()
copy1 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getCount5 :: Sheets a0
          -> IO Int32
getCount5 =
  propertyGet "Count"
              []
              outInt32

delete3 :: Int32
        -> Sheets a0
        -> IO ()
delete3 lcid =
  method0 "Delete"
          [inInt32 lcid]

fillAcrossSheets :: (Variant a2)
                 => Range a1
                 -> a2
                 -> Int32
                 -> Sheets a0
                 -> IO ()
fillAcrossSheets range type0 lcid =
  method0 "FillAcrossSheets"
          [ inIUnknown range
          , inDefaultValue (inInt32 (-4104)) inVariant type0
          , inInt32 lcid
          ]

getItem2 :: a1
         -> Sheets a0
         -> IO (IDispatch ())
getItem2 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

move0 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> Sheets a0
      -> IO ()
move0 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getNewEnum4 :: Sheets a0
            -> IO (IUnknown ())
getNewEnum4 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut7 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> Int32
          -> Sheets a0
          -> IO ()
printOut7 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview2 :: (Variant a1)
              => a1
              -> Int32
              -> Sheets a0
              -> IO ()
printPreview2 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

select2 :: (Variant a1)
        => a1
        -> Int32
        -> Sheets a0
        -> IO ()
select2 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

getHPageBreaks :: Sheets a0
               -> IO (HPageBreaks ())
getHPageBreaks =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks :: Sheets a0
               -> IO (VPageBreaks ())
getVPageBreaks =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getVisible6 :: (Variant a1)
            => Int32
            -> Sheets a0
            -> IO a1
getVisible6 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outVariant

setVisible6 :: Int32
            -> a1
            -> Sheets a0
            -> IO ()
setVisible6 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inVariant rHS
              ]

getDefault2 :: a1
            -> Sheets a0
            -> IO (IDispatch ())
getDefault2 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

printOut8 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> Int32
          -> Sheets a0
          -> IO ()
printOut8 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

printOut9 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> Int32
          -> Sheets a0
          -> IO ()
printOut9 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas lcid =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          , inInt32 lcid
          ]

-- --------------------------------------------------
-- 
-- interface IVPageBreak
-- 
-- --------------------------------------------------
data IVPageBreak_ a = IVPageBreak__ 
type IVPageBreak a = IDispatch (IVPageBreak_ a)
iidIVPageBreak :: IID (IVPageBreak ())
iidIVPageBreak = mkIID "{00024402-0001-0000-C000-000000000046}"

getApplication7 :: (Variant a1)
                => IVPageBreak a0
                -> IO a1
getApplication7 =
  propertyGet "Application"
              []
              outVariant

getCreator7 :: IVPageBreak a0
            -> IO XlCreator
getCreator7 =
  propertyGet "Creator"
              []
              outEnum

getParent22 :: (Variant a1)
            => IVPageBreak a0
            -> IO a1
getParent22 =
  propertyGet "Parent"
              []
              outVariant

delete4 :: IVPageBreak a0
        -> IO ()
delete4 =
  method0 "Delete"
          []

dragOff :: XlDirection
        -> Int32
        -> IVPageBreak a0
        -> IO ()
dragOff direction regionIndex =
  method0 "DragOff"
          [ inEnum direction
          , inInt32 regionIndex
          ]

getType5 :: IVPageBreak a0
         -> IO XlPageBreak
getType5 =
  propertyGet "Type"
              []
              outEnum

setType2 :: XlPageBreak
         -> IVPageBreak a0
         -> IO ()
setType2 rHS =
  propertySet "Type"
              [inEnum rHS]

getExtent :: IVPageBreak a0
          -> IO XlPageBreakExtent
getExtent =
  propertyGet "Extent"
              []
              outEnum

getLocation :: IVPageBreak a0
            -> IO (Range ())
getLocation =
  propertyGet "Location"
              []
              outIUnknown

setLocation :: Range a1
            -> IVPageBreak a0
            -> IO ()
setLocation rHS =
  propertySet "Location"
              [inIUnknown rHS]

-- --------------------------------------------------
-- 
-- interface IHPageBreak
-- 
-- --------------------------------------------------
data IHPageBreak_ a = IHPageBreak__ 
type IHPageBreak a = IDispatch (IHPageBreak_ a)
iidIHPageBreak :: IID (IHPageBreak ())
iidIHPageBreak = mkIID "{00024401-0001-0000-C000-000000000046}"

getApplication8 :: (Variant a1)
                => IHPageBreak a0
                -> IO a1
getApplication8 =
  propertyGet "Application"
              []
              outVariant

getCreator8 :: IHPageBreak a0
            -> IO XlCreator
getCreator8 =
  propertyGet "Creator"
              []
              outEnum

getParent23 :: (Variant a1)
            => IHPageBreak a0
            -> IO a1
getParent23 =
  propertyGet "Parent"
              []
              outVariant

delete5 :: IHPageBreak a0
        -> IO ()
delete5 =
  method0 "Delete"
          []

dragOff0 :: XlDirection
         -> Int32
         -> IHPageBreak a0
         -> IO ()
dragOff0 direction regionIndex =
  method0 "DragOff"
          [ inEnum direction
          , inInt32 regionIndex
          ]

getType6 :: IHPageBreak a0
         -> IO XlPageBreak
getType6 =
  propertyGet "Type"
              []
              outEnum

setType3 :: XlPageBreak
         -> IHPageBreak a0
         -> IO ()
setType3 rHS =
  propertySet "Type"
              [inEnum rHS]

getExtent0 :: IHPageBreak a0
           -> IO XlPageBreakExtent
getExtent0 =
  propertyGet "Extent"
              []
              outEnum

getLocation0 :: IHPageBreak a0
             -> IO (Range ())
getLocation0 =
  propertyGet "Location"
              []
              outIUnknown

setLocation0 :: Range a1
             -> IHPageBreak a0
             -> IO ()
setLocation0 rHS =
  propertySet "Location"
              [inIUnknown rHS]

-- --------------------------------------------------
-- 
-- interface IHPageBreaks
-- 
-- --------------------------------------------------
data IHPageBreaks_ a = IHPageBreaks__ 
type IHPageBreaks a = IDispatch (IHPageBreaks_ a)
iidIHPageBreaks :: IID (IHPageBreaks ())
iidIHPageBreaks = mkIID "{00024404-0001-0000-C000-000000000046}"

getApplication9 :: (Variant a1)
                => IHPageBreaks a0
                -> IO a1
getApplication9 =
  propertyGet "Application"
              []
              outVariant

getCreator9 :: IHPageBreaks a0
            -> IO XlCreator
getCreator9 =
  propertyGet "Creator"
              []
              outEnum

getParent24 :: IHPageBreaks a0
            -> IO (IDispatch ())
getParent24 =
  propertyGet "Parent"
              []
              outIDispatch

getCount6 :: IHPageBreaks a0
          -> IO Int32
getCount6 =
  propertyGet "Count"
              []
              outInt32

getItem3 :: Int32
         -> IHPageBreaks a0
         -> IO (HPageBreak ())
getItem3 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getDefault3 :: Int32
            -> IHPageBreaks a0
            -> IO (HPageBreak ())
getDefault3 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

getNewEnum5 :: IHPageBreaks a0
            -> IO (IUnknown ())
getNewEnum5 =
  propertyGet "_NewEnum"
              []
              outIUnknown

add0 :: IDispatch a1
     -> IHPageBreaks a0
     -> IO (HPageBreak ())
add0 before =
  function1 "Add"
            [inIDispatch before]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IVPageBreaks
-- 
-- --------------------------------------------------
data IVPageBreaks_ a = IVPageBreaks__ 
type IVPageBreaks a = IDispatch (IVPageBreaks_ a)
iidIVPageBreaks :: IID (IVPageBreaks ())
iidIVPageBreaks = mkIID "{00024405-0001-0000-C000-000000000046}"

getApplication10 :: (Variant a1)
                 => IVPageBreaks a0
                 -> IO a1
getApplication10 =
  propertyGet "Application"
              []
              outVariant

getCreator10 :: IVPageBreaks a0
             -> IO XlCreator
getCreator10 =
  propertyGet "Creator"
              []
              outEnum

getParent25 :: IVPageBreaks a0
            -> IO (IDispatch ())
getParent25 =
  propertyGet "Parent"
              []
              outIDispatch

getCount7 :: IVPageBreaks a0
          -> IO Int32
getCount7 =
  propertyGet "Count"
              []
              outInt32

getItem4 :: Int32
         -> IVPageBreaks a0
         -> IO (VPageBreak ())
getItem4 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getDefault4 :: Int32
            -> IVPageBreaks a0
            -> IO (VPageBreak ())
getDefault4 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

getNewEnum6 :: IVPageBreaks a0
            -> IO (IUnknown ())
getNewEnum6 =
  propertyGet "_NewEnum"
              []
              outIUnknown

add1 :: IDispatch a1
     -> IVPageBreaks a0
     -> IO (VPageBreak ())
add1 before =
  function1 "Add"
            [inIDispatch before]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IRecentFile
-- 
-- --------------------------------------------------
data IRecentFile_ a = IRecentFile__ 
type IRecentFile a = IDispatch (IRecentFile_ a)
iidIRecentFile :: IID (IRecentFile ())
iidIRecentFile = mkIID "{00024407-0001-0000-C000-000000000046}"

getApplication11 :: (Variant a1)
                 => IRecentFile a0
                 -> IO a1
getApplication11 =
  propertyGet "Application"
              []
              outVariant

getCreator11 :: IRecentFile a0
             -> IO XlCreator
getCreator11 =
  propertyGet "Creator"
              []
              outEnum

getParent26 :: IRecentFile a0
            -> IO (IDispatch ())
getParent26 =
  propertyGet "Parent"
              []
              outIDispatch

getName3 :: IRecentFile a0
         -> IO String
getName3 =
  propertyGet "Name"
              []
              outString

getPath0 :: IRecentFile a0
         -> IO String
getPath0 =
  propertyGet "Path"
              []
              outString

getIndex1 :: IRecentFile a0
          -> IO Int32
getIndex1 =
  propertyGet "Index"
              []
              outInt32

open :: (Variant a1)
     => IRecentFile a0
     -> IO a1
open =
  function1 "Open"
            []
            outVariant

delete6 :: IRecentFile a0
        -> IO ()
delete6 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface IRecentFiles
-- 
-- --------------------------------------------------
data IRecentFiles_ a = IRecentFiles__ 
type IRecentFiles a = IDispatch (IRecentFiles_ a)
iidIRecentFiles :: IID (IRecentFiles ())
iidIRecentFiles = mkIID "{00024406-0001-0000-C000-000000000046}"

getApplication12 :: (Variant a1)
                 => IRecentFiles a0
                 -> IO a1
getApplication12 =
  propertyGet "Application"
              []
              outVariant

getCreator12 :: IRecentFiles a0
             -> IO XlCreator
getCreator12 =
  propertyGet "Creator"
              []
              outEnum

getParent27 :: IRecentFiles a0
            -> IO (IDispatch ())
getParent27 =
  propertyGet "Parent"
              []
              outIDispatch

getMaximum :: IRecentFiles a0
           -> IO Int32
getMaximum =
  propertyGet "Maximum"
              []
              outInt32

setMaximum :: Int32
           -> IRecentFiles a0
           -> IO ()
setMaximum rHS =
  propertySet "Maximum"
              [inInt32 rHS]

getCount8 :: IRecentFiles a0
          -> IO Int32
getCount8 =
  propertyGet "Count"
              []
              outInt32

getItem5 :: Int32
         -> IRecentFiles a0
         -> IO (RecentFile ())
getItem5 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getDefault5 :: Int32
            -> IRecentFiles a0
            -> IO (RecentFile ())
getDefault5 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

add2 :: String
     -> IRecentFiles a0
     -> IO (RecentFile ())
add2 name =
  function1 "Add"
            [inString name]
            outIUnknown

getNewEnum7 :: IRecentFiles a0
            -> IO (IUnknown ())
getNewEnum7 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDocEvents
-- 
-- --------------------------------------------------
data IDocEvents_ a = IDocEvents__ 
type IDocEvents a = IDispatch (IDocEvents_ a)
iidIDocEvents :: IID (IDocEvents ())
iidIDocEvents = mkIID "{00024411-0001-0000-C000-000000000046}"

selectionChange :: Range a1
                -> IDocEvents a0
                -> IO ()
selectionChange target =
  method0 "SelectionChange"
          [inIUnknown target]

beforeDoubleClick0 :: Range a1
                   -> Bool
                   -> IDocEvents a0
                   -> IO Bool
beforeDoubleClick0 target cancel =
  method1 "BeforeDoubleClick"
          [inIUnknown target]
          (inoutBool cancel)

beforeRightClick0 :: Range a1
                  -> Bool
                  -> IDocEvents a0
                  -> IO Bool
beforeRightClick0 target cancel =
  method1 "BeforeRightClick"
          [inIUnknown target]
          (inoutBool cancel)

activate3 :: IDocEvents a0
          -> IO ()
activate3 =
  method0 "Activate"
          []

deactivate0 :: IDocEvents a0
            -> IO ()
deactivate0 =
  method0 "Deactivate"
          []

calculate2 :: IDocEvents a0
           -> IO ()
calculate2 =
  method0 "Calculate"
          []

change :: Range a1
       -> IDocEvents a0
       -> IO ()
change target =
  method0 "Change"
          [inIUnknown target]

followHyperlink :: Hyperlink a1
                -> IDocEvents a0
                -> IO ()
followHyperlink target =
  method0 "FollowHyperlink"
          [inIUnknown target]

pivotTableUpdate :: PivotTable a1
                 -> IDocEvents a0
                 -> IO ()
pivotTableUpdate target =
  method0 "PivotTableUpdate"
          [inIUnknown target]

-- --------------------------------------------------
-- 
-- interface _Worksheet
-- 
-- --------------------------------------------------
data Worksheet_ a = Worksheet__ 
type Worksheet a = IDispatch (Worksheet_ a)
iidWorksheet :: IID (Worksheet ())
iidWorksheet = mkIID "{000208D8-0000-0000-C000-000000000046}"

getApplication13 :: Worksheet a0
                 -> IO (Maybe Application)
getApplication13 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator13 :: Worksheet a0
             -> IO XlCreator
getCreator13 =
  propertyGet "Creator"
              []
              outEnum

getParent28 :: Worksheet a0
            -> IO (IDispatch ())
getParent28 =
  propertyGet "Parent"
              []
              outIDispatch

activate4 :: Int32
          -> Worksheet a0
          -> IO ()
activate4 lcid =
  method0 "Activate"
          [inInt32 lcid]

copy2 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> Worksheet a0
      -> IO ()
copy2 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

delete7 :: Int32
        -> Worksheet a0
        -> IO ()
delete7 lcid =
  method0 "Delete"
          [inInt32 lcid]

getCodeName1 :: Worksheet a0
             -> IO String
getCodeName1 =
  propertyGet "CodeName"
              []
              outString

getCodeName2 :: Worksheet a0
             -> IO String
getCodeName2 =
  propertyGet "_CodeName"
              []
              outString

setCodeName0 :: String
             -> Worksheet a0
             -> IO ()
setCodeName0 rHS =
  propertySet "_CodeName"
              [inString rHS]

getIndex2 :: Int32
          -> Worksheet a0
          -> IO Int32
getIndex2 lcid =
  propertyGet "Index"
              [inInt32 lcid]
              outInt32

move1 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> Worksheet a0
      -> IO ()
move1 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getName4 :: Worksheet a0
         -> IO String
getName4 =
  propertyGet "Name"
              []
              outString

setName2 :: String
         -> Worksheet a0
         -> IO ()
setName2 rHS =
  propertySet "Name"
              [inString rHS]

getNext1 :: Worksheet a0
         -> IO (IDispatch ())
getNext1 =
  propertyGet "Next"
              []
              outIDispatch

getOnDoubleClick1 :: Int32
                  -> Worksheet a0
                  -> IO String
getOnDoubleClick1 lcid =
  propertyGet "OnDoubleClick"
              [inInt32 lcid]
              outString

setOnDoubleClick1 :: Int32
                  -> String
                  -> Worksheet a0
                  -> IO ()
setOnDoubleClick1 lcid rHS =
  propertySet "OnDoubleClick"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetActivate1 :: Int32
                    -> Worksheet a0
                    -> IO String
getOnSheetActivate1 lcid =
  propertyGet "OnSheetActivate"
              [inInt32 lcid]
              outString

setOnSheetActivate1 :: Int32
                    -> String
                    -> Worksheet a0
                    -> IO ()
setOnSheetActivate1 lcid rHS =
  propertySet "OnSheetActivate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetDeactivate1 :: Int32
                      -> Worksheet a0
                      -> IO String
getOnSheetDeactivate1 lcid =
  propertyGet "OnSheetDeactivate"
              [inInt32 lcid]
              outString

setOnSheetDeactivate1 :: Int32
                      -> String
                      -> Worksheet a0
                      -> IO ()
setOnSheetDeactivate1 lcid rHS =
  propertySet "OnSheetDeactivate"
              [ inInt32 lcid
              , inString rHS
              ]

getPageSetup0 :: Worksheet a0
              -> IO (PageSetup ())
getPageSetup0 =
  propertyGet "PageSetup"
              []
              outIUnknown

getPrevious1 :: Worksheet a0
             -> IO (IDispatch ())
getPrevious1 =
  propertyGet "Previous"
              []
              outIDispatch

printOut10 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> Worksheet a0
           -> IO ()
printOut10 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview3 :: (Variant a1)
              => a1
              -> Int32
              -> Worksheet a0
              -> IO ()
printPreview3 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

protect1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Int32
         -> Worksheet a0
         -> IO ()
protect1 password drawingObjects0 contents scenarios userInterfaceOnly lcid =
  method0 "_Protect"
          [ inVariant password
          , inVariant drawingObjects0
          , inVariant contents
          , inVariant scenarios
          , inVariant userInterfaceOnly
          , inInt32 lcid
          ]

getProtectContents0 :: Int32
                    -> Worksheet a0
                    -> IO Bool
getProtectContents0 lcid =
  propertyGet "ProtectContents"
              [inInt32 lcid]
              outBool

getProtectDrawingObjects0 :: Int32
                          -> Worksheet a0
                          -> IO Bool
getProtectDrawingObjects0 lcid =
  propertyGet "ProtectDrawingObjects"
              [inInt32 lcid]
              outBool

getProtectionMode0 :: Int32
                   -> Worksheet a0
                   -> IO Bool
getProtectionMode0 lcid =
  propertyGet "ProtectionMode"
              [inInt32 lcid]
              outBool

getProtectScenarios :: Int32
                    -> Worksheet a0
                    -> IO Bool
getProtectScenarios lcid =
  propertyGet "ProtectScenarios"
              [inInt32 lcid]
              outBool

saveAs1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> Int32
        -> Worksheet a0
        -> IO ()
saveAs1 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout lcid =
  method0 "_SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inInt32 lcid
          ]

select3 :: (Variant a1)
        => a1
        -> Int32
        -> Worksheet a0
        -> IO ()
select3 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

unprotect0 :: (Variant a1)
           => a1
           -> Int32
           -> Worksheet a0
           -> IO ()
unprotect0 password lcid =
  method0 "Unprotect"
          [ inVariant password
          , inInt32 lcid
          ]

getVisible7 :: Int32
            -> Worksheet a0
            -> IO XlSheetVisibility
getVisible7 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outEnum

setVisible7 :: Int32
            -> XlSheetVisibility
            -> Worksheet a0
            -> IO ()
setVisible7 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inEnum rHS
              ]

getShapes0 :: Worksheet a0
           -> IO (Shapes ())
getShapes0 =
  propertyGet "Shapes"
              []
              outIUnknown

getTransitionExpEval :: Int32
                     -> Worksheet a0
                     -> IO Bool
getTransitionExpEval lcid =
  propertyGet "TransitionExpEval"
              [inInt32 lcid]
              outBool

setTransitionExpEval :: Int32
                     -> Bool
                     -> Worksheet a0
                     -> IO ()
setTransitionExpEval lcid rHS =
  propertySet "TransitionExpEval"
              [ inInt32 lcid
              , inBool rHS
              ]

arcs0 :: (Variant a1)
      => a1
      -> Int32
      -> Worksheet a0
      -> IO (IDispatch ())
arcs0 index0 lcid =
  function1 "Arcs"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getAutoFilterMode :: Int32
                  -> Worksheet a0
                  -> IO Bool
getAutoFilterMode lcid =
  propertyGet "AutoFilterMode"
              [inInt32 lcid]
              outBool

setAutoFilterMode :: Int32
                  -> Bool
                  -> Worksheet a0
                  -> IO ()
setAutoFilterMode lcid rHS =
  propertySet "AutoFilterMode"
              [ inInt32 lcid
              , inBool rHS
              ]

setBackgroundPicture0 :: String
                      -> Worksheet a0
                      -> IO ()
setBackgroundPicture0 filename =
  method0 "SetBackgroundPicture"
          [inString filename]

buttons0 :: (Variant a1)
         => a1
         -> Int32
         -> Worksheet a0
         -> IO (IDispatch ())
buttons0 index0 lcid =
  function1 "Buttons"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

calculate3 :: Int32
           -> Worksheet a0
           -> IO ()
calculate3 lcid =
  method0 "Calculate"
          [inInt32 lcid]

getEnableCalculation :: Worksheet a0
                     -> IO Bool
getEnableCalculation =
  propertyGet "EnableCalculation"
              []
              outBool

setEnableCalculation :: Bool
                     -> Worksheet a0
                     -> IO ()
setEnableCalculation rHS =
  propertySet "EnableCalculation"
              [inBool rHS]

getCells1 :: Worksheet a0
          -> IO (Range ())
getCells1 =
  propertyGet "Cells"
              []
              outIUnknown

chartObjects0 :: (Variant a1)
              => a1
              -> Int32
              -> Worksheet a0
              -> IO (IDispatch ())
chartObjects0 index0 lcid =
  function1 "ChartObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

checkBoxes0 :: (Variant a1)
            => a1
            -> Int32
            -> Worksheet a0
            -> IO (IDispatch ())
checkBoxes0 index0 lcid =
  function1 "CheckBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

checkSpelling2 :: (Variant a1, Variant a2, Variant a3, Variant a4)
               => a1
               -> a2
               -> a3
               -> a4
               -> Int32
               -> Worksheet a0
               -> IO ()
checkSpelling2 customDictionary ignoreUppercase alwaysSuggest spellLang lcid =
  method0 "CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          , inInt32 lcid
          ]

getCircularReference :: Int32
                     -> Worksheet a0
                     -> IO (Range ())
getCircularReference lcid =
  propertyGet "CircularReference"
              [inInt32 lcid]
              outIUnknown

clearArrows :: Int32
            -> Worksheet a0
            -> IO ()
clearArrows lcid =
  method0 "ClearArrows"
          [inInt32 lcid]

getColumns1 :: Worksheet a0
            -> IO (Range ())
getColumns1 =
  propertyGet "Columns"
              []
              outIUnknown

getConsolidationFunction :: Int32
                         -> Worksheet a0
                         -> IO XlConsolidationFunction
getConsolidationFunction lcid =
  propertyGet "ConsolidationFunction"
              [inInt32 lcid]
              outEnum

getConsolidationOptions :: (Variant a1)
                        => Int32
                        -> Worksheet a0
                        -> IO a1
getConsolidationOptions lcid =
  propertyGet "ConsolidationOptions"
              [inInt32 lcid]
              outVariant

getConsolidationSources :: (Variant a1)
                        => Int32
                        -> Worksheet a0
                        -> IO a1
getConsolidationSources lcid =
  propertyGet "ConsolidationSources"
              [inInt32 lcid]
              outVariant

getDisplayAutomaticPageBreaks :: Int32
                              -> Worksheet a0
                              -> IO Bool
getDisplayAutomaticPageBreaks lcid =
  propertyGet "DisplayAutomaticPageBreaks"
              [inInt32 lcid]
              outBool

setDisplayAutomaticPageBreaks :: Int32
                              -> Bool
                              -> Worksheet a0
                              -> IO ()
setDisplayAutomaticPageBreaks lcid rHS =
  propertySet "DisplayAutomaticPageBreaks"
              [ inInt32 lcid
              , inBool rHS
              ]

drawings0 :: (Variant a1)
          => a1
          -> Int32
          -> Worksheet a0
          -> IO (IDispatch ())
drawings0 index0 lcid =
  function1 "Drawings"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

drawingObjects0 :: (Variant a1)
                => a1
                -> Int32
                -> Worksheet a0
                -> IO (IDispatch ())
drawingObjects0 index0 lcid =
  function1 "DrawingObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dropDowns0 :: (Variant a1)
           => a1
           -> Int32
           -> Worksheet a0
           -> IO (IDispatch ())
dropDowns0 index0 lcid =
  function1 "DropDowns"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getEnableAutoFilter :: Int32
                    -> Worksheet a0
                    -> IO Bool
getEnableAutoFilter lcid =
  propertyGet "EnableAutoFilter"
              [inInt32 lcid]
              outBool

setEnableAutoFilter :: Int32
                    -> Bool
                    -> Worksheet a0
                    -> IO ()
setEnableAutoFilter lcid rHS =
  propertySet "EnableAutoFilter"
              [ inInt32 lcid
              , inBool rHS
              ]

getEnableSelection :: Worksheet a0
                   -> IO XlEnableSelection
getEnableSelection =
  propertyGet "EnableSelection"
              []
              outEnum

setEnableSelection :: XlEnableSelection
                   -> Worksheet a0
                   -> IO ()
setEnableSelection rHS =
  propertySet "EnableSelection"
              [inEnum rHS]

getEnableOutlining :: Int32
                   -> Worksheet a0
                   -> IO Bool
getEnableOutlining lcid =
  propertyGet "EnableOutlining"
              [inInt32 lcid]
              outBool

setEnableOutlining :: Int32
                   -> Bool
                   -> Worksheet a0
                   -> IO ()
setEnableOutlining lcid rHS =
  propertySet "EnableOutlining"
              [ inInt32 lcid
              , inBool rHS
              ]

getEnablePivotTable :: Int32
                    -> Worksheet a0
                    -> IO Bool
getEnablePivotTable lcid =
  propertyGet "EnablePivotTable"
              [inInt32 lcid]
              outBool

setEnablePivotTable :: Int32
                    -> Bool
                    -> Worksheet a0
                    -> IO ()
setEnablePivotTable lcid rHS =
  propertySet "EnablePivotTable"
              [ inInt32 lcid
              , inBool rHS
              ]

evaluate3 :: (Variant a1)
          => a2
          -> Int32
          -> Worksheet a0
          -> IO a1
evaluate3 name lcid =
  function1 "Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

evaluate4 :: (Variant a1)
          => a2
          -> Int32
          -> Worksheet a0
          -> IO a1
evaluate4 name lcid =
  function1 "_Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

getFilterMode :: Int32
              -> Worksheet a0
              -> IO Bool
getFilterMode lcid =
  propertyGet "FilterMode"
              [inInt32 lcid]
              outBool

resetAllPageBreaks :: Worksheet a0
                   -> IO ()
resetAllPageBreaks =
  method0 "ResetAllPageBreaks"
          []

groupBoxes0 :: (Variant a1)
            => a1
            -> Int32
            -> Worksheet a0
            -> IO (IDispatch ())
groupBoxes0 index0 lcid =
  function1 "GroupBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

groupObjects0 :: (Variant a1)
              => a1
              -> Int32
              -> Worksheet a0
              -> IO (IDispatch ())
groupObjects0 index0 lcid =
  function1 "GroupObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

labels0 :: (Variant a1)
        => a1
        -> Int32
        -> Worksheet a0
        -> IO (IDispatch ())
labels0 index0 lcid =
  function1 "Labels"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

lines0 :: (Variant a1)
       => a1
       -> Int32
       -> Worksheet a0
       -> IO (IDispatch ())
lines0 index0 lcid =
  function1 "Lines"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

listBoxes0 :: (Variant a1)
           => a1
           -> Int32
           -> Worksheet a0
           -> IO (IDispatch ())
listBoxes0 index0 lcid =
  function1 "ListBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getNames0 :: Worksheet a0
          -> IO (Names ())
getNames0 =
  propertyGet "Names"
              []
              outIUnknown

oLEObjects0 :: (Variant a1)
            => a1
            -> Int32
            -> Worksheet a0
            -> IO (IDispatch ())
oLEObjects0 index0 lcid =
  function1 "OLEObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getOnCalculate0 :: Int32
                -> Worksheet a0
                -> IO String
getOnCalculate0 lcid =
  propertyGet "OnCalculate"
              [inInt32 lcid]
              outString

setOnCalculate0 :: Int32
                -> String
                -> Worksheet a0
                -> IO ()
setOnCalculate0 lcid rHS =
  propertySet "OnCalculate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnData0 :: Int32
           -> Worksheet a0
           -> IO String
getOnData0 lcid =
  propertyGet "OnData"
              [inInt32 lcid]
              outString

setOnData0 :: Int32
           -> String
           -> Worksheet a0
           -> IO ()
setOnData0 lcid rHS =
  propertySet "OnData"
              [ inInt32 lcid
              , inString rHS
              ]

getOnEntry0 :: Int32
            -> Worksheet a0
            -> IO String
getOnEntry0 lcid =
  propertyGet "OnEntry"
              [inInt32 lcid]
              outString

setOnEntry0 :: Int32
            -> String
            -> Worksheet a0
            -> IO ()
setOnEntry0 lcid rHS =
  propertySet "OnEntry"
              [ inInt32 lcid
              , inString rHS
              ]

optionButtons0 :: (Variant a1)
               => a1
               -> Int32
               -> Worksheet a0
               -> IO (IDispatch ())
optionButtons0 index0 lcid =
  function1 "OptionButtons"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getOutline :: Worksheet a0
           -> IO (Outline ())
getOutline =
  propertyGet "Outline"
              []
              outIUnknown

ovals0 :: (Variant a1)
       => a1
       -> Int32
       -> Worksheet a0
       -> IO (IDispatch ())
ovals0 index0 lcid =
  function1 "Ovals"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

paste0 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> Worksheet a0
       -> IO ()
paste0 destination link lcid =
  method0 "Paste"
          [ inVariant destination
          , inVariant link
          , inInt32 lcid
          ]

pasteSpecial1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> Int32
              -> Worksheet a0
              -> IO ()
pasteSpecial1 format link displayAsIcon iconFileName iconIndex iconLabel lcid =
  method0 "_PasteSpecial"
          [ inVariant format
          , inVariant link
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          , inInt32 lcid
          ]

pictures0 :: (Variant a1)
          => a1
          -> Int32
          -> Worksheet a0
          -> IO (IDispatch ())
pictures0 index0 lcid =
  function1 "Pictures"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

pivotTables :: (Variant a1)
            => a1
            -> Int32
            -> Worksheet a0
            -> IO (IDispatch ())
pivotTables index0 lcid =
  function1 "PivotTables"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

pivotTableWizard :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> a12
                 -> a13
                 -> a14
                 -> a15
                 -> a16
                 -> Int32
                 -> Worksheet a0
                 -> IO (PivotTable ())
pivotTableWizard sourceType sourceData tableDestination tableName rowGrand columnGrand saveData hasAutoFormat autoPage reserved backgroundQuery optimizeCache pageFieldOrder pageFieldWrapCount readData connection lcid =
  function1 "PivotTableWizard"
            [ inVariant sourceType
            , inVariant sourceData
            , inVariant tableDestination
            , inVariant tableName
            , inVariant rowGrand
            , inVariant columnGrand
            , inVariant saveData
            , inVariant hasAutoFormat
            , inVariant autoPage
            , inVariant reserved
            , inVariant backgroundQuery
            , inVariant optimizeCache
            , inVariant pageFieldOrder
            , inVariant pageFieldWrapCount
            , inVariant readData
            , inVariant connection
            , inInt32 lcid
            ]
            outIUnknown

getRange1 :: (Variant a2)
          => a1
          -> a2
          -> Worksheet a0
          -> IO (Range ())
getRange1 cell1 cell2 =
  propertyGet "Range"
              [ inVariant cell1
              , inVariant cell2
              ]
              outIUnknown

rectangles0 :: (Variant a1)
            => a1
            -> Int32
            -> Worksheet a0
            -> IO (IDispatch ())
rectangles0 index0 lcid =
  function1 "Rectangles"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getRows1 :: Worksheet a0
         -> IO (Range ())
getRows1 =
  propertyGet "Rows"
              []
              outIUnknown

scenarios :: (Variant a1)
          => a1
          -> Int32
          -> Worksheet a0
          -> IO (IDispatch ())
scenarios index0 lcid =
  function1 "Scenarios"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getScrollArea :: Worksheet a0
              -> IO String
getScrollArea =
  propertyGet "ScrollArea"
              []
              outString

setScrollArea :: String
              -> Worksheet a0
              -> IO ()
setScrollArea rHS =
  propertySet "ScrollArea"
              [inString rHS]

scrollBars0 :: (Variant a1)
            => a1
            -> Int32
            -> Worksheet a0
            -> IO (IDispatch ())
scrollBars0 index0 lcid =
  function1 "ScrollBars"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

showAllData :: Int32
            -> Worksheet a0
            -> IO ()
showAllData lcid =
  method0 "ShowAllData"
          [inInt32 lcid]

showDataForm :: Int32
             -> Worksheet a0
             -> IO ()
showDataForm lcid =
  method0 "ShowDataForm"
          [inInt32 lcid]

spinners0 :: (Variant a1)
          => a1
          -> Int32
          -> Worksheet a0
          -> IO (IDispatch ())
spinners0 index0 lcid =
  function1 "Spinners"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getStandardHeight :: Int32
                  -> Worksheet a0
                  -> IO Double
getStandardHeight lcid =
  propertyGet "StandardHeight"
              [inInt32 lcid]
              outDouble

getStandardWidth :: Int32
                 -> Worksheet a0
                 -> IO Double
getStandardWidth lcid =
  propertyGet "StandardWidth"
              [inInt32 lcid]
              outDouble

setStandardWidth :: Int32
                 -> Double
                 -> Worksheet a0
                 -> IO ()
setStandardWidth lcid rHS =
  propertySet "StandardWidth"
              [ inInt32 lcid
              , inDouble rHS
              ]

textBoxes0 :: (Variant a1)
           => a1
           -> Int32
           -> Worksheet a0
           -> IO (IDispatch ())
textBoxes0 index0 lcid =
  function1 "TextBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getTransitionFormEntry :: Int32
                       -> Worksheet a0
                       -> IO Bool
getTransitionFormEntry lcid =
  propertyGet "TransitionFormEntry"
              [inInt32 lcid]
              outBool

setTransitionFormEntry :: Int32
                       -> Bool
                       -> Worksheet a0
                       -> IO ()
setTransitionFormEntry lcid rHS =
  propertySet "TransitionFormEntry"
              [ inInt32 lcid
              , inBool rHS
              ]

getType7 :: Int32
         -> Worksheet a0
         -> IO XlSheetType
getType7 lcid =
  propertyGet "Type"
              [inInt32 lcid]
              outEnum

getUsedRange :: Int32
             -> Worksheet a0
             -> IO (Range ())
getUsedRange lcid =
  propertyGet "UsedRange"
              [inInt32 lcid]
              outIUnknown

getHPageBreaks0 :: Worksheet a0
                -> IO (HPageBreaks ())
getHPageBreaks0 =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks0 :: Worksheet a0
                -> IO (VPageBreaks ())
getVPageBreaks0 =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getQueryTables :: Worksheet a0
               -> IO (QueryTables ())
getQueryTables =
  propertyGet "QueryTables"
              []
              outIUnknown

getDisplayPageBreaks :: Worksheet a0
                     -> IO Bool
getDisplayPageBreaks =
  propertyGet "DisplayPageBreaks"
              []
              outBool

setDisplayPageBreaks :: Bool
                     -> Worksheet a0
                     -> IO ()
setDisplayPageBreaks rHS =
  propertySet "DisplayPageBreaks"
              [inBool rHS]

getComments :: Worksheet a0
            -> IO (Comments ())
getComments =
  propertyGet "Comments"
              []
              outIUnknown

getHyperlinks1 :: Worksheet a0
               -> IO (Hyperlinks ())
getHyperlinks1 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

clearCircles :: Worksheet a0
             -> IO ()
clearCircles =
  method0 "ClearCircles"
          []

circleInvalid :: Worksheet a0
              -> IO ()
circleInvalid =
  method0 "CircleInvalid"
          []

getDisplayRightToLeft1 :: Int32
                       -> Worksheet a0
                       -> IO Int32
getDisplayRightToLeft1 lcid =
  propertyGet "_DisplayRightToLeft"
              [inInt32 lcid]
              outInt32

setDisplayRightToLeft1 :: Int32
                       -> Int32
                       -> Worksheet a0
                       -> IO ()
setDisplayRightToLeft1 lcid rHS =
  propertySet "_DisplayRightToLeft"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getAutoFilter :: Worksheet a0
              -> IO (AutoFilter ())
getAutoFilter =
  propertyGet "AutoFilter"
              []
              outIUnknown

getDisplayRightToLeft2 :: Int32
                       -> Worksheet a0
                       -> IO Bool
getDisplayRightToLeft2 lcid =
  propertyGet "DisplayRightToLeft"
              [inInt32 lcid]
              outBool

setDisplayRightToLeft2 :: Int32
                       -> Bool
                       -> Worksheet a0
                       -> IO ()
setDisplayRightToLeft2 lcid rHS =
  propertySet "DisplayRightToLeft"
              [ inInt32 lcid
              , inBool rHS
              ]

getScripts0 :: Worksheet a0
            -> IO (Maybe Scripts)
getScripts0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getScripts methPtr iptr rHS) 132 iptr
    doThenFree free (readunique readScripts) rHS

printOut11 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> Worksheet a0
           -> IO ()
printOut11 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

checkSpelling3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> Int32
               -> Worksheet a0
               -> IO ()
checkSpelling3 customDictionary ignoreUppercase alwaysSuggest spellLang ignoreFinalYaa spellScript lcid =
  method0 "_CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          , inVariant ignoreFinalYaa
          , inVariant spellScript
          , inInt32 lcid
          ]

getTab0 :: Worksheet a0
        -> IO (Tab ())
getTab0 =
  propertyGet "Tab"
              []
              outIUnknown

getMailEnvelope0 :: Worksheet a0
                 -> IO (Maybe MsoEnvelope)
getMailEnvelope0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getMailEnvelope methPtr iptr rHS) 136 iptr
    doThenFree free (readunique readMsoEnvelope) rHS

saveAs2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> Worksheet a0
        -> IO ()
saveAs2 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout local =
  method0 "SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inVariant local
          ]

getCustomProperties :: Worksheet a0
                    -> IO (CustomProperties ())
getCustomProperties =
  propertyGet "CustomProperties"
              []
              outIUnknown

getSmartTags0 :: Worksheet a0
              -> IO (SmartTags ())
getSmartTags0 =
  propertyGet "SmartTags"
              []
              outIUnknown

getProtection :: Worksheet a0
              -> IO (Protection ())
getProtection =
  propertyGet "Protection"
              []
              outIUnknown

pasteSpecial2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> Int32
              -> Worksheet a0
              -> IO ()
pasteSpecial2 format link displayAsIcon iconFileName iconIndex iconLabel noHTMLFormatting lcid =
  method0 "PasteSpecial"
          [ inVariant format
          , inVariant link
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          , inVariant noHTMLFormatting
          , inInt32 lcid
          ]

protect2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> Worksheet a0
         -> IO ()
protect2 password drawingObjects1 contents scenarios0 userInterfaceOnly allowFormattingCells allowFormattingColumns allowFormattingRows allowInsertingColumns allowInsertingRows allowInsertingHyperlinks allowDeletingColumns allowDeletingRows allowSorting allowFiltering allowUsingPivotTables =
  method0 "Protect"
          [ inVariant password
          , inVariant drawingObjects1
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          , inVariant allowFormattingCells
          , inVariant allowFormattingColumns
          , inVariant allowFormattingRows
          , inVariant allowInsertingColumns
          , inVariant allowInsertingRows
          , inVariant allowInsertingHyperlinks
          , inVariant allowDeletingColumns
          , inVariant allowDeletingRows
          , inVariant allowSorting
          , inVariant allowFiltering
          , inVariant allowUsingPivotTables
          ]

getListObjects :: Worksheet a0
               -> IO (ListObjects ())
getListObjects =
  propertyGet "ListObjects"
              []
              outIUnknown

xmlDataQuery :: (Variant a1, Variant a2)
             => String
             -> a1
             -> a2
             -> Worksheet a0
             -> IO (Range ())
xmlDataQuery xPath selectionNamespaces map =
  function1 "XmlDataQuery"
            [ inString xPath
            , inVariant selectionNamespaces
            , inVariant map
            ]
            outIUnknown

xmlMapQuery :: (Variant a1, Variant a2)
            => String
            -> a1
            -> a2
            -> Worksheet a0
            -> IO (Range ())
xmlMapQuery xPath selectionNamespaces map =
  function1 "XmlMapQuery"
            [ inString xPath
            , inVariant selectionNamespaces
            , inVariant map
            ]
            outIUnknown

printOut12 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Int32
           -> Worksheet a0
           -> IO ()
printOut12 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas lcid =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          , inInt32 lcid
          ]

getEnableFormatConditionsCalculation :: Worksheet a0
                                     -> IO Bool
getEnableFormatConditionsCalculation =
  propertyGet "EnableFormatConditionsCalculation"
              []
              outBool

setEnableFormatConditionsCalculation :: Bool
                                     -> Worksheet a0
                                     -> IO ()
setEnableFormatConditionsCalculation rHS =
  propertySet "EnableFormatConditionsCalculation"
              [inBool rHS]

getSort :: Worksheet a0
        -> IO (Sort ())
getSort =
  propertyGet "Sort"
              []
              outIUnknown

exportAsFixedFormat1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                     => XlFixedFormatType
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> Worksheet a0
                     -> IO ()
exportAsFixedFormat1 type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

-- --------------------------------------------------
-- 
-- interface IStyle
-- 
-- --------------------------------------------------
data IStyle_ a = IStyle__ 
type IStyle a = IDispatch (IStyle_ a)
iidIStyle :: IID (IStyle ())
iidIStyle = mkIID "{00020852-0001-0000-C000-000000000046}"

getApplication14 :: (Variant a1)
                 => IStyle a0
                 -> IO a1
getApplication14 =
  propertyGet "Application"
              []
              outVariant

getCreator14 :: IStyle a0
             -> IO XlCreator
getCreator14 =
  propertyGet "Creator"
              []
              outEnum

getParent29 :: IStyle a0
            -> IO (IDispatch ())
getParent29 =
  propertyGet "Parent"
              []
              outIDispatch

getAddIndent0 :: IStyle a0
              -> IO Bool
getAddIndent0 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent0 :: Bool
              -> IStyle a0
              -> IO ()
setAddIndent0 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getBuiltIn :: IStyle a0
           -> IO Bool
getBuiltIn =
  propertyGet "BuiltIn"
              []
              outBool

getBorders0 :: IStyle a0
            -> IO (Borders ())
getBorders0 =
  propertyGet "Borders"
              []
              outIUnknown

delete8 :: (Variant a1)
        => IStyle a0
        -> IO a1
delete8 =
  function1 "Delete"
            []
            outVariant

getFont0 :: IStyle a0
         -> IO (Font ())
getFont0 =
  propertyGet "Font"
              []
              outIUnknown

getFormulaHidden0 :: IStyle a0
                  -> IO Bool
getFormulaHidden0 =
  propertyGet "FormulaHidden"
              []
              outBool

setFormulaHidden0 :: Bool
                  -> IStyle a0
                  -> IO ()
setFormulaHidden0 rHS =
  propertySet "FormulaHidden"
              [inBool rHS]

getHorizontalAlignment0 :: IStyle a0
                        -> IO XlHAlign
getHorizontalAlignment0 =
  propertyGet "HorizontalAlignment"
              []
              outEnum

setHorizontalAlignment0 :: XlHAlign
                        -> IStyle a0
                        -> IO ()
setHorizontalAlignment0 rHS =
  propertySet "HorizontalAlignment"
              [inEnum rHS]

getIncludeAlignment :: IStyle a0
                    -> IO Bool
getIncludeAlignment =
  propertyGet "IncludeAlignment"
              []
              outBool

setIncludeAlignment :: Bool
                    -> IStyle a0
                    -> IO ()
setIncludeAlignment rHS =
  propertySet "IncludeAlignment"
              [inBool rHS]

getIncludeBorder :: IStyle a0
                 -> IO Bool
getIncludeBorder =
  propertyGet "IncludeBorder"
              []
              outBool

setIncludeBorder :: Bool
                 -> IStyle a0
                 -> IO ()
setIncludeBorder rHS =
  propertySet "IncludeBorder"
              [inBool rHS]

getIncludeFont :: IStyle a0
               -> IO Bool
getIncludeFont =
  propertyGet "IncludeFont"
              []
              outBool

setIncludeFont :: Bool
               -> IStyle a0
               -> IO ()
setIncludeFont rHS =
  propertySet "IncludeFont"
              [inBool rHS]

getIncludeNumber :: IStyle a0
                 -> IO Bool
getIncludeNumber =
  propertyGet "IncludeNumber"
              []
              outBool

setIncludeNumber :: Bool
                 -> IStyle a0
                 -> IO ()
setIncludeNumber rHS =
  propertySet "IncludeNumber"
              [inBool rHS]

getIncludePatterns :: IStyle a0
                   -> IO Bool
getIncludePatterns =
  propertyGet "IncludePatterns"
              []
              outBool

setIncludePatterns :: Bool
                   -> IStyle a0
                   -> IO ()
setIncludePatterns rHS =
  propertySet "IncludePatterns"
              [inBool rHS]

getIncludeProtection :: IStyle a0
                     -> IO Bool
getIncludeProtection =
  propertyGet "IncludeProtection"
              []
              outBool

setIncludeProtection :: Bool
                     -> IStyle a0
                     -> IO ()
setIncludeProtection rHS =
  propertySet "IncludeProtection"
              [inBool rHS]

getIndentLevel0 :: IStyle a0
                -> IO Int32
getIndentLevel0 =
  propertyGet "IndentLevel"
              []
              outInt32

setIndentLevel0 :: Int32
                -> IStyle a0
                -> IO ()
setIndentLevel0 rHS =
  propertySet "IndentLevel"
              [inInt32 rHS]

getInterior0 :: IStyle a0
             -> IO (Interior ())
getInterior0 =
  propertyGet "Interior"
              []
              outIUnknown

getLocked0 :: IStyle a0
           -> IO Bool
getLocked0 =
  propertyGet "Locked"
              []
              outBool

setLocked0 :: Bool
           -> IStyle a0
           -> IO ()
setLocked0 rHS =
  propertySet "Locked"
              [inBool rHS]

getMergeCells0 :: (Variant a1)
               => IStyle a0
               -> IO a1
getMergeCells0 =
  propertyGet "MergeCells"
              []
              outVariant

setMergeCells0 :: a1
               -> IStyle a0
               -> IO ()
setMergeCells0 rHS =
  propertySet "MergeCells"
              [inVariant rHS]

getName5 :: Int32
         -> IStyle a0
         -> IO String
getName5 lcid =
  propertyGet "Name"
              [inInt32 lcid]
              outString

getNameLocal :: IStyle a0
             -> IO String
getNameLocal =
  propertyGet "NameLocal"
              []
              outString

getNumberFormat0 :: IStyle a0
                 -> IO String
getNumberFormat0 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat0 :: String
                 -> IStyle a0
                 -> IO ()
setNumberFormat0 rHS =
  propertySet "NumberFormat"
              [inString rHS]

getNumberFormatLocal0 :: IStyle a0
                      -> IO String
getNumberFormatLocal0 =
  propertyGet "NumberFormatLocal"
              []
              outString

setNumberFormatLocal0 :: String
                      -> IStyle a0
                      -> IO ()
setNumberFormatLocal0 rHS =
  propertySet "NumberFormatLocal"
              [inString rHS]

getOrientation1 :: IStyle a0
                -> IO XlOrientation
getOrientation1 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation1 :: XlOrientation
                -> IStyle a0
                -> IO ()
setOrientation1 rHS =
  propertySet "Orientation"
              [inEnum rHS]

getShrinkToFit0 :: IStyle a0
                -> IO Bool
getShrinkToFit0 =
  propertyGet "ShrinkToFit"
              []
              outBool

setShrinkToFit0 :: Bool
                -> IStyle a0
                -> IO ()
setShrinkToFit0 rHS =
  propertySet "ShrinkToFit"
              [inBool rHS]

getValue1 :: Int32
          -> IStyle a0
          -> IO String
getValue1 lcid =
  propertyGet "Value"
              [inInt32 lcid]
              outString

getVerticalAlignment0 :: IStyle a0
                      -> IO XlVAlign
getVerticalAlignment0 =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment0 :: XlVAlign
                      -> IStyle a0
                      -> IO ()
setVerticalAlignment0 rHS =
  propertySet "VerticalAlignment"
              [inEnum rHS]

getWrapText0 :: IStyle a0
             -> IO Bool
getWrapText0 =
  propertyGet "WrapText"
              []
              outBool

setWrapText0 :: Bool
             -> IStyle a0
             -> IO ()
setWrapText0 rHS =
  propertySet "WrapText"
              [inBool rHS]

getDefault6 :: Int32
            -> IStyle a0
            -> IO String
getDefault6 lcid =
  propertyGet "_Default"
              [inInt32 lcid]
              outString

getReadingOrder0 :: IStyle a0
                 -> IO Int32
getReadingOrder0 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder0 :: Int32
                 -> IStyle a0
                 -> IO ()
setReadingOrder0 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IStyles
-- 
-- --------------------------------------------------
data IStyles_ a = IStyles__ 
type IStyles a = IDispatch (IStyles_ a)
iidIStyles :: IID (IStyles ())
iidIStyles = mkIID "{00020853-0001-0000-C000-000000000046}"

getApplication15 :: (Variant a1)
                 => IStyles a0
                 -> IO a1
getApplication15 =
  propertyGet "Application"
              []
              outVariant

getCreator15 :: IStyles a0
             -> IO XlCreator
getCreator15 =
  propertyGet "Creator"
              []
              outEnum

getParent30 :: IStyles a0
            -> IO (IDispatch ())
getParent30 =
  propertyGet "Parent"
              []
              outIDispatch

add3 :: (Variant a1)
     => String
     -> a1
     -> IStyles a0
     -> IO (Style ())
add3 name basedOn =
  function1 "Add"
            [ inString name
            , inVariant basedOn
            ]
            outIUnknown

getCount9 :: IStyles a0
          -> IO Int32
getCount9 =
  propertyGet "Count"
              []
              outInt32

getItem6 :: a1
         -> Int32
         -> IStyles a0
         -> IO (Style ())
getItem6 index0 lcid =
  propertyGet "Item"
              [ inVariant index0
              , inInt32 lcid
              ]
              outIUnknown

merge0 :: (Variant a1)
       => a2
       -> IStyles a0
       -> IO a1
merge0 workbook =
  function1 "Merge"
            [inVariant workbook]
            outVariant

getNewEnum8 :: IStyles a0
            -> IO (IUnknown ())
getNewEnum8 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault7 :: a1
            -> Int32
            -> IStyles a0
            -> IO (Style ())
getDefault7 index0 lcid =
  propertyGet "_Default"
              [ inVariant index0
              , inInt32 lcid
              ]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IBorders
-- 
-- --------------------------------------------------
data IBorders_ a = IBorders__ 
type IBorders a = IDispatch (IBorders_ a)
iidIBorders :: IID (IBorders ())
iidIBorders = mkIID "{00020855-0001-0000-C000-000000000046}"

getApplication16 :: (Variant a1)
                 => IBorders a0
                 -> IO a1
getApplication16 =
  propertyGet "Application"
              []
              outVariant

getCreator16 :: IBorders a0
             -> IO XlCreator
getCreator16 =
  propertyGet "Creator"
              []
              outEnum

getParent31 :: IBorders a0
            -> IO (IDispatch ())
getParent31 =
  propertyGet "Parent"
              []
              outIDispatch

getColor0 :: (Variant a1)
          => IBorders a0
          -> IO a1
getColor0 =
  propertyGet "Color"
              []
              outVariant

setColor0 :: a1
          -> IBorders a0
          -> IO ()
setColor0 rHS =
  propertySet "Color"
              [inVariant rHS]

getColorIndex0 :: (Variant a1)
               => IBorders a0
               -> IO a1
getColorIndex0 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex0 :: a1
               -> IBorders a0
               -> IO ()
setColorIndex0 rHS =
  propertySet "ColorIndex"
              [inVariant rHS]

getCount10 :: IBorders a0
           -> IO Int32
getCount10 =
  propertyGet "Count"
              []
              outInt32

getItem7 :: XlBordersIndex
         -> IBorders a0
         -> IO (Border ())
getItem7 index0 =
  propertyGet "Item"
              [inEnum index0]
              outIUnknown

getLineStyle :: (Variant a1)
             => IBorders a0
             -> IO a1
getLineStyle =
  propertyGet "LineStyle"
              []
              outVariant

setLineStyle :: a1
             -> IBorders a0
             -> IO ()
setLineStyle rHS =
  propertySet "LineStyle"
              [inVariant rHS]

getNewEnum9 :: IBorders a0
            -> IO (IUnknown ())
getNewEnum9 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getValue3 :: (Variant a1)
          => IBorders a0
          -> IO a1
getValue3 =
  propertyGet "Value"
              []
              outVariant

setValue0 :: a1
          -> IBorders a0
          -> IO ()
setValue0 rHS =
  propertySet "Value"
              [inVariant rHS]

getWeight0 :: (Variant a1)
           => IBorders a0
           -> IO a1
getWeight0 =
  propertyGet "Weight"
              []
              outVariant

setWeight0 :: a1
           -> IBorders a0
           -> IO ()
setWeight0 rHS =
  propertySet "Weight"
              [inVariant rHS]

getDefault8 :: XlBordersIndex
            -> IBorders a0
            -> IO (Border ())
getDefault8 index0 =
  propertyGet "_Default"
              [inEnum index0]
              outIUnknown

getThemeColor0 :: (Variant a1)
               => IBorders a0
               -> IO a1
getThemeColor0 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor0 :: a1
               -> IBorders a0
               -> IO ()
setThemeColor0 rHS =
  propertySet "ThemeColor"
              [inVariant rHS]

getTintAndShade1 :: (Variant a1)
                 => IBorders a0
                 -> IO a1
getTintAndShade1 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade1 :: a1
                 -> IBorders a0
                 -> IO ()
setTintAndShade1 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface _Global
-- 
-- --------------------------------------------------
data Global_ a = Global__ 
type Global a = IDispatch (Global_ a)
iidGlobal :: IID (Global ())
iidGlobal = mkIID "{000208D9-0000-0000-C000-000000000046}"

getApplication17 :: Global a0
                 -> IO (Maybe Application)
getApplication17 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator17 :: Global a0
             -> IO XlCreator
getCreator17 =
  propertyGet "Creator"
              []
              outEnum

getParent32 :: Global a0
            -> IO (Maybe Application)
getParent32 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 9 iptr
    doThenFree free (readunique readApplication) rHS

getActiveCell1 :: Global a0
               -> IO (Range ())
getActiveCell1 =
  propertyGet "ActiveCell"
              []
              outIUnknown

getActiveChart1 :: Global a0
                -> IO (Maybe Chart)
getActiveChart1 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getActiveChart0 methPtr iptr rHS) 11 iptr
    doThenFree free (readunique readChart) rHS

getActiveDialog0 :: Global a0
                 -> IO (DialogSheet ())
getActiveDialog0 =
  propertyGet "ActiveDialog"
              []
              outIUnknown

getActiveMenuBar0 :: Global a0
                  -> IO (MenuBar ())
getActiveMenuBar0 =
  propertyGet "ActiveMenuBar"
              []
              outIUnknown

getActivePrinter0 :: Int32
                  -> Global a0
                  -> IO String
getActivePrinter0 lcid =
  propertyGet "ActivePrinter"
              [inInt32 lcid]
              outString

setActivePrinter0 :: Int32
                  -> String
                  -> Global a0
                  -> IO ()
setActivePrinter0 lcid rHS =
  propertySet "ActivePrinter"
              [ inInt32 lcid
              , inString rHS
              ]

getActiveSheet1 :: Global a0
                -> IO (IDispatch ())
getActiveSheet1 =
  propertyGet "ActiveSheet"
              []
              outIDispatch

getActiveWindow0 :: Global a0
                 -> IO (Window ())
getActiveWindow0 =
  propertyGet "ActiveWindow"
              []
              outIUnknown

getActiveWorkbook0 :: Global a0
                   -> IO (Maybe Workbook)
getActiveWorkbook0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getActiveWorkbook methPtr iptr rHS) 18 iptr
    doThenFree free (readunique readWorkbook) rHS

getAddIns0 :: Global a0
           -> IO (AddIns ())
getAddIns0 =
  propertyGet "AddIns"
              []
              outIUnknown

getAssistant0 :: Global a0
              -> IO (Maybe Assistant)
getAssistant0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getAssistant methPtr iptr rHS) 20 iptr
    doThenFree free (readunique readAssistant) rHS

calculate4 :: Int32
           -> Global a0
           -> IO ()
calculate4 lcid =
  method0 "Calculate"
          [inInt32 lcid]

getCells2 :: Global a0
          -> IO (Range ())
getCells2 =
  propertyGet "Cells"
              []
              outIUnknown

getCharts0 :: Global a0
           -> IO (Sheets ())
getCharts0 =
  propertyGet "Charts"
              []
              outIDispatch

getColumns2 :: Global a0
            -> IO (Range ())
getColumns2 =
  propertyGet "Columns"
              []
              outIUnknown

getCommandBars0 :: Global a0
                -> IO (Maybe CommandBars)
getCommandBars0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getCommandBars methPtr iptr rHS) 25 iptr
    doThenFree free (readunique readCommandBars) rHS

getDDEAppReturnCode0 :: Int32
                     -> Global a0
                     -> IO Int32
getDDEAppReturnCode0 lcid =
  propertyGet "DDEAppReturnCode"
              [inInt32 lcid]
              outInt32

dDEExecute0 :: Int32
            -> String
            -> Int32
            -> Global a0
            -> IO ()
dDEExecute0 channel string lcid =
  method0 "DDEExecute"
          [ inInt32 channel
          , inString string
          , inInt32 lcid
          ]

dDEInitiate0 :: String
             -> String
             -> Int32
             -> Global a0
             -> IO Int32
dDEInitiate0 app topic lcid =
  function1 "DDEInitiate"
            [ inString app
            , inString topic
            , inInt32 lcid
            ]
            outInt32

dDEPoke0 :: Int32
         -> a1
         -> a2
         -> Int32
         -> Global a0
         -> IO ()
dDEPoke0 channel item2 data0 lcid =
  method0 "DDEPoke"
          [ inInt32 channel
          , inVariant item2
          , inVariant data0
          , inInt32 lcid
          ]

dDERequest0 :: (Variant a1)
            => Int32
            -> String
            -> Int32
            -> Global a0
            -> IO a1
dDERequest0 channel item2 lcid =
  function1 "DDERequest"
            [ inInt32 channel
            , inString item2
            , inInt32 lcid
            ]
            outVariant

dDETerminate0 :: Int32
              -> Int32
              -> Global a0
              -> IO ()
dDETerminate0 channel lcid =
  method0 "DDETerminate"
          [ inInt32 channel
          , inInt32 lcid
          ]

getDialogSheets0 :: Global a0
                 -> IO (Sheets ())
getDialogSheets0 =
  propertyGet "DialogSheets"
              []
              outIDispatch

evaluate5 :: (Variant a1)
          => a2
          -> Int32
          -> Global a0
          -> IO a1
evaluate5 name lcid =
  function1 "Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

evaluate6 :: (Variant a1)
          => a2
          -> Int32
          -> Global a0
          -> IO a1
evaluate6 name lcid =
  function1 "_Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

executeExcel4Macro0 :: (Variant a1)
                    => String
                    -> Int32
                    -> Global a0
                    -> IO a1
executeExcel4Macro0 string lcid =
  function1 "ExecuteExcel4Macro"
            [ inString string
            , inInt32 lcid
            ]
            outVariant

intersect0 :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
           => Range a1
           -> Range a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> a12
           -> a13
           -> a14
           -> a15
           -> a16
           -> a17
           -> a18
           -> a19
           -> a20
           -> a21
           -> a22
           -> a23
           -> a24
           -> a25
           -> a26
           -> a27
           -> a28
           -> a29
           -> a30
           -> Int32
           -> Global a0
           -> IO (Range ())
intersect0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "Intersect"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outIUnknown

getMenuBars0 :: Global a0
             -> IO (MenuBars ())
getMenuBars0 =
  propertyGet "MenuBars"
              []
              outIUnknown

getModules0 :: Global a0
            -> IO (Modules ())
getModules0 =
  propertyGet "Modules"
              []
              outIUnknown

getNames1 :: Global a0
          -> IO (Names ())
getNames1 =
  propertyGet "Names"
              []
              outIUnknown

getRange2 :: (Variant a2)
          => a1
          -> a2
          -> Global a0
          -> IO (Range ())
getRange2 cell1 cell2 =
  propertyGet "Range"
              [ inVariant cell1
              , inVariant cell2
              ]
              outIUnknown

getRows2 :: Global a0
         -> IO (Range ())
getRows2 =
  propertyGet "Rows"
              []
              outIUnknown

run1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31, Variant a32)
     => a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> a31
     -> a32
     -> Global a0
     -> IO a1
run1 macro arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Run"
            [ inVariant macro
            , inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

run20 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31, Variant a32)
      => a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> a31
      -> a32
      -> Int32
      -> Global a0
      -> IO a1
run20 macro arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "_Run2"
            [ inVariant macro
            , inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outVariant

getSelection1 :: Int32
              -> Global a0
              -> IO (IDispatch ())
getSelection1 lcid =
  propertyGet "Selection"
              [inInt32 lcid]
              outIDispatch

sendKeys0 :: (Variant a2)
          => a1
          -> a2
          -> Int32
          -> Global a0
          -> IO ()
sendKeys0 keys wait1 lcid =
  method0 "SendKeys"
          [ inVariant keys
          , inVariant wait1
          , inInt32 lcid
          ]

getSheets0 :: Global a0
           -> IO (Sheets ())
getSheets0 =
  propertyGet "Sheets"
              []
              outIDispatch

getShortcutMenus0 :: Int32
                  -> Global a0
                  -> IO (Menu ())
getShortcutMenus0 index0 =
  propertyGet "ShortcutMenus"
              [inInt32 index0]
              outIUnknown

getThisWorkbook0 :: Int32
                 -> Global a0
                 -> IO (Maybe Workbook)
getThisWorkbook0 lcid iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getThisWorkbook methPtr iptr lcid rHS) 48 iptr
    doThenFree free (readunique readWorkbook) rHS

getToolbars0 :: Global a0
             -> IO (Toolbars ())
getToolbars0 =
  propertyGet "Toolbars"
              []
              outIUnknown

union0 :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => Range a1
       -> Range a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> Int32
       -> Global a0
       -> IO (Range ())
union0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 lcid =
  function1 "Union"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            , inInt32 lcid
            ]
            outIUnknown

getWindows0 :: Global a0
            -> IO (Windows ())
getWindows0 =
  propertyGet "Windows"
              []
              outIUnknown

getWorkbooks0 :: Global a0
              -> IO (Workbooks ())
getWorkbooks0 =
  propertyGet "Workbooks"
              []
              outIUnknown

getWorksheetFunction0 :: Global a0
                      -> IO (WorksheetFunction ())
getWorksheetFunction0 =
  propertyGet "WorksheetFunction"
              []
              outIUnknown

getWorksheets0 :: Global a0
               -> IO (Sheets ())
getWorksheets0 =
  propertyGet "Worksheets"
              []
              outIDispatch

getExcel4IntlMacroSheets0 :: Global a0
                          -> IO (Sheets ())
getExcel4IntlMacroSheets0 =
  propertyGet "Excel4IntlMacroSheets"
              []
              outIDispatch

getExcel4MacroSheets0 :: Global a0
                      -> IO (Sheets ())
getExcel4MacroSheets0 =
  propertyGet "Excel4MacroSheets"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface IAddIn
-- 
-- --------------------------------------------------
data IAddIn_ a = IAddIn__ 
type IAddIn a = IDispatch (IAddIn_ a)
iidIAddIn :: IID (IAddIn ())
iidIAddIn = mkIID "{00020857-0001-0000-C000-000000000046}"

getApplication18 :: (Variant a1)
                 => IAddIn a0
                 -> IO a1
getApplication18 =
  propertyGet "Application"
              []
              outVariant

getCreator18 :: IAddIn a0
             -> IO XlCreator
getCreator18 =
  propertyGet "Creator"
              []
              outEnum

getParent33 :: IAddIn a0
            -> IO (IDispatch ())
getParent33 =
  propertyGet "Parent"
              []
              outIDispatch

getAuthor :: IAddIn a0
          -> IO String
getAuthor =
  propertyGet "Author"
              []
              outString

getComments0 :: IAddIn a0
             -> IO String
getComments0 =
  propertyGet "Comments"
              []
              outString

getFullName :: IAddIn a0
            -> IO String
getFullName =
  propertyGet "FullName"
              []
              outString

getInstalled :: IAddIn a0
             -> IO Bool
getInstalled =
  propertyGet "Installed"
              []
              outBool

setInstalled :: Bool
             -> IAddIn a0
             -> IO ()
setInstalled rHS =
  propertySet "Installed"
              [inBool rHS]

getKeywords :: IAddIn a0
            -> IO String
getKeywords =
  propertyGet "Keywords"
              []
              outString

getName6 :: IAddIn a0
         -> IO String
getName6 =
  propertyGet "Name"
              []
              outString

getPath1 :: IAddIn a0
         -> IO String
getPath1 =
  propertyGet "Path"
              []
              outString

getSubject :: IAddIn a0
           -> IO String
getSubject =
  propertyGet "Subject"
              []
              outString

getTitle :: IAddIn a0
         -> IO String
getTitle =
  propertyGet "Title"
              []
              outString

getProgID :: IAddIn a0
          -> IO String
getProgID =
  propertyGet "progID"
              []
              outString

getCLSID :: IAddIn a0
         -> IO String
getCLSID =
  propertyGet "CLSID"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IAddIns
-- 
-- --------------------------------------------------
data IAddIns_ a = IAddIns__ 
type IAddIns a = IDispatch (IAddIns_ a)
iidIAddIns :: IID (IAddIns ())
iidIAddIns = mkIID "{00020858-0001-0000-C000-000000000046}"

getApplication19 :: (Variant a1)
                 => IAddIns a0
                 -> IO a1
getApplication19 =
  propertyGet "Application"
              []
              outVariant

getCreator19 :: IAddIns a0
             -> IO XlCreator
getCreator19 =
  propertyGet "Creator"
              []
              outEnum

getParent34 :: IAddIns a0
            -> IO (IDispatch ())
getParent34 =
  propertyGet "Parent"
              []
              outIDispatch

add4 :: (Variant a1)
     => String
     -> a1
     -> IAddIns a0
     -> IO (AddIn ())
add4 filename copyFile =
  function1 "Add"
            [ inString filename
            , inVariant copyFile
            ]
            outIUnknown

getCount11 :: IAddIns a0
           -> IO Int32
getCount11 =
  propertyGet "Count"
              []
              outInt32

getItem8 :: a1
         -> IAddIns a0
         -> IO (AddIn ())
getItem8 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum10 :: IAddIns a0
             -> IO (IUnknown ())
getNewEnum10 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault9 :: a1
            -> IAddIns a0
            -> IO (AddIn ())
getDefault9 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IToolbar
-- 
-- --------------------------------------------------
data IToolbar_ a = IToolbar__ 
type IToolbar a = IDispatch (IToolbar_ a)
iidIToolbar :: IID (IToolbar ())
iidIToolbar = mkIID "{0002085C-0001-0000-C000-000000000046}"

getApplication20 :: (Variant a1)
                 => IToolbar a0
                 -> IO a1
getApplication20 =
  propertyGet "Application"
              []
              outVariant

getCreator20 :: IToolbar a0
             -> IO XlCreator
getCreator20 =
  propertyGet "Creator"
              []
              outEnum

getParent35 :: IToolbar a0
            -> IO (IDispatch ())
getParent35 =
  propertyGet "Parent"
              []
              outIDispatch

getBuiltIn0 :: IToolbar a0
            -> IO Bool
getBuiltIn0 =
  propertyGet "BuiltIn"
              []
              outBool

delete9 :: IToolbar a0
        -> IO ()
delete9 =
  method0 "Delete"
          []

getHeight2 :: IToolbar a0
           -> IO Int32
getHeight2 =
  propertyGet "Height"
              []
              outInt32

setHeight1 :: Int32
           -> IToolbar a0
           -> IO ()
setHeight1 rHS =
  propertySet "Height"
              [inInt32 rHS]

getLeft2 :: IToolbar a0
         -> IO Int32
getLeft2 =
  propertyGet "Left"
              []
              outInt32

setLeft1 :: Int32
         -> IToolbar a0
         -> IO ()
setLeft1 rHS =
  propertySet "Left"
              [inInt32 rHS]

getName7 :: IToolbar a0
         -> IO String
getName7 =
  propertyGet "Name"
              []
              outString

getPosition :: IToolbar a0
            -> IO Int32
getPosition =
  propertyGet "Position"
              []
              outInt32

setPosition0 :: Int32
             -> IToolbar a0
             -> IO ()
setPosition0 rHS =
  propertySet "Position"
              [inInt32 rHS]

getProtection0 :: IToolbar a0
               -> IO XlToolbarProtection
getProtection0 =
  propertyGet "Protection"
              []
              outEnum

setProtection :: XlToolbarProtection
              -> IToolbar a0
              -> IO ()
setProtection rHS =
  propertySet "Protection"
              [inEnum rHS]

reset :: IToolbar a0
      -> IO ()
reset =
  method0 "Reset"
          []

getToolbarButtons :: IToolbar a0
                  -> IO (ToolbarButtons ())
getToolbarButtons =
  propertyGet "ToolbarButtons"
              []
              outIUnknown

getTop2 :: IToolbar a0
        -> IO Int32
getTop2 =
  propertyGet "Top"
              []
              outInt32

setTop1 :: Int32
        -> IToolbar a0
        -> IO ()
setTop1 rHS =
  propertySet "Top"
              [inInt32 rHS]

getVisible8 :: IToolbar a0
            -> IO Bool
getVisible8 =
  propertyGet "Visible"
              []
              outBool

setVisible8 :: Bool
            -> IToolbar a0
            -> IO ()
setVisible8 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth2 :: IToolbar a0
          -> IO Int32
getWidth2 =
  propertyGet "Width"
              []
              outInt32

setWidth1 :: Int32
          -> IToolbar a0
          -> IO ()
setWidth1 rHS =
  propertySet "Width"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IToolbars
-- 
-- --------------------------------------------------
data IToolbars_ a = IToolbars__ 
type IToolbars a = IDispatch (IToolbars_ a)
iidIToolbars :: IID (IToolbars ())
iidIToolbars = mkIID "{0002085D-0001-0000-C000-000000000046}"

getApplication21 :: (Variant a1)
                 => IToolbars a0
                 -> IO a1
getApplication21 =
  propertyGet "Application"
              []
              outVariant

getCreator21 :: IToolbars a0
             -> IO XlCreator
getCreator21 =
  propertyGet "Creator"
              []
              outEnum

getParent36 :: IToolbars a0
            -> IO (IDispatch ())
getParent36 =
  propertyGet "Parent"
              []
              outIDispatch

add5 :: (Variant a1)
     => a1
     -> IToolbars a0
     -> IO (Toolbar ())
add5 name =
  function1 "Add"
            [inVariant name]
            outIUnknown

getCount12 :: IToolbars a0
           -> IO Int32
getCount12 =
  propertyGet "Count"
              []
              outInt32

getDefault10 :: a1
             -> IToolbars a0
             -> IO (Toolbar ())
getDefault10 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem9 :: a1
         -> IToolbars a0
         -> IO (Toolbar ())
getItem9 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum11 :: IToolbars a0
             -> IO (IUnknown ())
getNewEnum11 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IToolbarButton
-- 
-- --------------------------------------------------
data IToolbarButton_ a = IToolbarButton__ 
type IToolbarButton a = IDispatch (IToolbarButton_ a)
iidIToolbarButton :: IID (IToolbarButton ())
iidIToolbarButton = mkIID "{0002085E-0001-0000-C000-000000000046}"

getApplication22 :: (Variant a1)
                 => IToolbarButton a0
                 -> IO a1
getApplication22 =
  propertyGet "Application"
              []
              outVariant

getCreator22 :: IToolbarButton a0
             -> IO XlCreator
getCreator22 =
  propertyGet "Creator"
              []
              outEnum

getParent37 :: IToolbarButton a0
            -> IO (IDispatch ())
getParent37 =
  propertyGet "Parent"
              []
              outIDispatch

getBuiltIn1 :: IToolbarButton a0
            -> IO Bool
getBuiltIn1 =
  propertyGet "BuiltIn"
              []
              outBool

getBuiltInFace :: IToolbarButton a0
               -> IO Bool
getBuiltInFace =
  propertyGet "BuiltInFace"
              []
              outBool

setBuiltInFace :: Bool
               -> IToolbarButton a0
               -> IO ()
setBuiltInFace rHS =
  propertySet "BuiltInFace"
              [inBool rHS]

copy3 :: Toolbar a1
      -> Int32
      -> IToolbarButton a0
      -> IO ()
copy3 toolbar before =
  method0 "Copy"
          [ inIUnknown toolbar
          , inInt32 before
          ]

copyFace :: IToolbarButton a0
         -> IO ()
copyFace =
  method0 "CopyFace"
          []

delete10 :: IToolbarButton a0
         -> IO ()
delete10 =
  method0 "Delete"
          []

edit :: IToolbarButton a0
     -> IO ()
edit =
  method0 "Edit"
          []

getEnabled :: IToolbarButton a0
           -> IO Bool
getEnabled =
  propertyGet "Enabled"
              []
              outBool

setEnabled :: Bool
           -> IToolbarButton a0
           -> IO ()
setEnabled rHS =
  propertySet "Enabled"
              [inBool rHS]

getHelpContextID :: IToolbarButton a0
                 -> IO Int32
getHelpContextID =
  propertyGet "HelpContextID"
              []
              outInt32

setHelpContextID :: Int32
                 -> IToolbarButton a0
                 -> IO ()
setHelpContextID rHS =
  propertySet "HelpContextID"
              [inInt32 rHS]

getHelpFile :: IToolbarButton a0
            -> IO String
getHelpFile =
  propertyGet "HelpFile"
              []
              outString

setHelpFile :: String
            -> IToolbarButton a0
            -> IO ()
setHelpFile rHS =
  propertySet "HelpFile"
              [inString rHS]

getID0 :: IToolbarButton a0
       -> IO Int32
getID0 =
  propertyGet "ID"
              []
              outInt32

getIsGap :: IToolbarButton a0
         -> IO Bool
getIsGap =
  propertyGet "IsGap"
              []
              outBool

move2 :: Toolbar a1
      -> Int32
      -> IToolbarButton a0
      -> IO ()
move2 toolbar before =
  method0 "Move"
          [ inIUnknown toolbar
          , inInt32 before
          ]

getName8 :: IToolbarButton a0
         -> IO String
getName8 =
  propertyGet "Name"
              []
              outString

setName3 :: String
         -> IToolbarButton a0
         -> IO ()
setName3 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction :: IToolbarButton a0
            -> IO String
getOnAction =
  propertyGet "OnAction"
              []
              outString

setOnAction :: String
            -> IToolbarButton a0
            -> IO ()
setOnAction rHS =
  propertySet "OnAction"
              [inString rHS]

pasteFace :: IToolbarButton a0
          -> IO ()
pasteFace =
  method0 "PasteFace"
          []

getPushed :: IToolbarButton a0
          -> IO Bool
getPushed =
  propertyGet "Pushed"
              []
              outBool

setPushed :: Bool
          -> IToolbarButton a0
          -> IO ()
setPushed rHS =
  propertySet "Pushed"
              [inBool rHS]

reset0 :: IToolbarButton a0
       -> IO ()
reset0 =
  method0 "Reset"
          []

getStatusBar0 :: IToolbarButton a0
              -> IO String
getStatusBar0 =
  propertyGet "StatusBar"
              []
              outString

setStatusBar0 :: String
              -> IToolbarButton a0
              -> IO ()
setStatusBar0 rHS =
  propertySet "StatusBar"
              [inString rHS]

getWidth3 :: IToolbarButton a0
          -> IO Int32
getWidth3 =
  propertyGet "Width"
              []
              outInt32

setWidth2 :: Int32
          -> IToolbarButton a0
          -> IO ()
setWidth2 rHS =
  propertySet "Width"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IToolbarButtons
-- 
-- --------------------------------------------------
data IToolbarButtons_ a = IToolbarButtons__ 
type IToolbarButtons a = IDispatch (IToolbarButtons_ a)
iidIToolbarButtons :: IID (IToolbarButtons ())
iidIToolbarButtons = mkIID "{0002085F-0001-0000-C000-000000000046}"

getApplication23 :: (Variant a1)
                 => IToolbarButtons a0
                 -> IO a1
getApplication23 =
  propertyGet "Application"
              []
              outVariant

getCreator23 :: IToolbarButtons a0
             -> IO XlCreator
getCreator23 =
  propertyGet "Creator"
              []
              outEnum

getParent38 :: IToolbarButtons a0
            -> IO (IDispatch ())
getParent38 =
  propertyGet "Parent"
              []
              outIDispatch

add6 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> IToolbarButtons a0
     -> IO (ToolbarButton ())
add6 button before onAction pushed enabled statusBar helpFile helpContextID =
  function1 "Add"
            [ inVariant button
            , inVariant before
            , inVariant onAction
            , inVariant pushed
            , inVariant enabled
            , inVariant statusBar
            , inVariant helpFile
            , inVariant helpContextID
            ]
            outIUnknown

getCount13 :: IToolbarButtons a0
           -> IO Int32
getCount13 =
  propertyGet "Count"
              []
              outInt32

getItem10 :: Int32
          -> IToolbarButtons a0
          -> IO (ToolbarButton ())
getItem10 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getNewEnum12 :: IToolbarButtons a0
             -> IO (IUnknown ())
getNewEnum12 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault11 :: Int32
             -> IToolbarButtons a0
             -> IO (ToolbarButton ())
getDefault11 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IAreas
-- 
-- --------------------------------------------------
data IAreas_ a = IAreas__ 
type IAreas a = IDispatch (IAreas_ a)
iidIAreas :: IID (IAreas ())
iidIAreas = mkIID "{00020860-0001-0000-C000-000000000046}"

getApplication24 :: (Variant a1)
                 => IAreas a0
                 -> IO a1
getApplication24 =
  propertyGet "Application"
              []
              outVariant

getCreator24 :: IAreas a0
             -> IO XlCreator
getCreator24 =
  propertyGet "Creator"
              []
              outEnum

getParent39 :: IAreas a0
            -> IO (IDispatch ())
getParent39 =
  propertyGet "Parent"
              []
              outIDispatch

getCount14 :: IAreas a0
           -> IO Int32
getCount14 =
  propertyGet "Count"
              []
              outInt32

getItem11 :: Int32
          -> IAreas a0
          -> IO (Range ())
getItem11 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getNewEnum13 :: IAreas a0
             -> IO (IUnknown ())
getNewEnum13 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault12 :: Int32
             -> IAreas a0
             -> IO (Range ())
getDefault12 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IWorkbookEvents
-- 
-- --------------------------------------------------
data IWorkbookEvents_ a = IWorkbookEvents__ 
type IWorkbookEvents a = IDispatch (IWorkbookEvents_ a)
iidIWorkbookEvents :: IID (IWorkbookEvents ())
iidIWorkbookEvents = mkIID "{00024412-0001-0000-C000-000000000046}"

open0 :: IWorkbookEvents a0
      -> IO ()
open0 =
  method0 "Open"
          []

activate5 :: IWorkbookEvents a0
          -> IO ()
activate5 =
  method0 "Activate"
          []

deactivate1 :: IWorkbookEvents a0
            -> IO ()
deactivate1 =
  method0 "Deactivate"
          []

beforeClose :: Bool
            -> IWorkbookEvents a0
            -> IO Bool
beforeClose cancel =
  method1 "BeforeClose"
          []
          (inoutBool cancel)

beforeSave :: Bool
           -> Bool
           -> IWorkbookEvents a0
           -> IO Bool
beforeSave saveAsUI cancel =
  method1 "BeforeSave"
          [inBool saveAsUI]
          (inoutBool cancel)

beforePrint :: Bool
            -> IWorkbookEvents a0
            -> IO Bool
beforePrint cancel =
  method1 "BeforePrint"
          []
          (inoutBool cancel)

newSheet :: IDispatch a1
         -> IWorkbookEvents a0
         -> IO ()
newSheet sh =
  method0 "NewSheet"
          [inIDispatch sh]

addinInstall :: IWorkbookEvents a0
             -> IO ()
addinInstall =
  method0 "AddinInstall"
          []

addinUninstall :: IWorkbookEvents a0
               -> IO ()
addinUninstall =
  method0 "AddinUninstall"
          []

windowResize0 :: Window a1
              -> IWorkbookEvents a0
              -> IO ()
windowResize0 wn =
  method0 "WindowResize"
          [inIUnknown wn]

windowActivate0 :: Window a1
                -> IWorkbookEvents a0
                -> IO ()
windowActivate0 wn =
  method0 "WindowActivate"
          [inIUnknown wn]

windowDeactivate0 :: Window a1
                  -> IWorkbookEvents a0
                  -> IO ()
windowDeactivate0 wn =
  method0 "WindowDeactivate"
          [inIUnknown wn]

sheetSelectionChange0 :: IDispatch a1
                      -> Range a2
                      -> IWorkbookEvents a0
                      -> IO ()
sheetSelectionChange0 sh target =
  method0 "SheetSelectionChange"
          [ inIDispatch sh
          , inIUnknown target
          ]

sheetBeforeDoubleClick0 :: IDispatch a1
                        -> Range a2
                        -> Bool
                        -> IWorkbookEvents a0
                        -> IO Bool
sheetBeforeDoubleClick0 sh target cancel =
  method1 "SheetBeforeDoubleClick"
          [ inIDispatch sh
          , inIUnknown target
          ]
          (inoutBool cancel)

sheetBeforeRightClick0 :: IDispatch a1
                       -> Range a2
                       -> Bool
                       -> IWorkbookEvents a0
                       -> IO Bool
sheetBeforeRightClick0 sh target cancel =
  method1 "SheetBeforeRightClick"
          [ inIDispatch sh
          , inIUnknown target
          ]
          (inoutBool cancel)

sheetActivate0 :: IDispatch a1
               -> IWorkbookEvents a0
               -> IO ()
sheetActivate0 sh =
  method0 "SheetActivate"
          [inIDispatch sh]

sheetDeactivate0 :: IDispatch a1
                 -> IWorkbookEvents a0
                 -> IO ()
sheetDeactivate0 sh =
  method0 "SheetDeactivate"
          [inIDispatch sh]

sheetCalculate0 :: IDispatch a1
                -> IWorkbookEvents a0
                -> IO ()
sheetCalculate0 sh =
  method0 "SheetCalculate"
          [inIDispatch sh]

sheetChange0 :: IDispatch a1
             -> Range a2
             -> IWorkbookEvents a0
             -> IO ()
sheetChange0 sh target =
  method0 "SheetChange"
          [ inIDispatch sh
          , inIUnknown target
          ]

sheetFollowHyperlink0 :: IDispatch a1
                      -> Hyperlink a2
                      -> IWorkbookEvents a0
                      -> IO ()
sheetFollowHyperlink0 sh target =
  method0 "SheetFollowHyperlink"
          [ inIDispatch sh
          , inIUnknown target
          ]

sheetPivotTableUpdate0 :: IDispatch a1
                       -> PivotTable a2
                       -> IWorkbookEvents a0
                       -> IO ()
sheetPivotTableUpdate0 sh target =
  method0 "SheetPivotTableUpdate"
          [ inIDispatch sh
          , inIUnknown target
          ]

pivotTableCloseConnection :: PivotTable a1
                          -> IWorkbookEvents a0
                          -> IO ()
pivotTableCloseConnection target =
  method0 "PivotTableCloseConnection"
          [inIUnknown target]

pivotTableOpenConnection :: PivotTable a1
                         -> IWorkbookEvents a0
                         -> IO ()
pivotTableOpenConnection target =
  method0 "PivotTableOpenConnection"
          [inIUnknown target]

sync :: (Variant a1)
     => a1
     -> IWorkbookEvents a0
     -> IO ()
sync syncEventType =
  method0 "Sync"
          [inVariant syncEventType]

beforeXmlImport :: XmlMap a1
                -> String
                -> Bool
                -> Bool
                -> IWorkbookEvents a0
                -> IO Bool
beforeXmlImport map url isRefresh cancel =
  method1 "BeforeXmlImport"
          [ inIUnknown map
          , inString url
          , inBool isRefresh
          ]
          (inoutBool cancel)

afterXmlImport :: XmlMap a1
               -> Bool
               -> XlXmlImportResult
               -> IWorkbookEvents a0
               -> IO ()
afterXmlImport map isRefresh result =
  method0 "AfterXmlImport"
          [ inIUnknown map
          , inBool isRefresh
          , inEnum result
          ]

beforeXmlExport :: XmlMap a1
                -> String
                -> Bool
                -> IWorkbookEvents a0
                -> IO Bool
beforeXmlExport map url cancel =
  method1 "BeforeXmlExport"
          [ inIUnknown map
          , inString url
          ]
          (inoutBool cancel)

afterXmlExport :: XmlMap a1
               -> String
               -> XlXmlExportResult
               -> IWorkbookEvents a0
               -> IO ()
afterXmlExport map url result =
  method0 "AfterXmlExport"
          [ inIUnknown map
          , inString url
          , inEnum result
          ]

rowsetComplete :: String
               -> String
               -> Bool
               -> IWorkbookEvents a0
               -> IO ()
rowsetComplete description sheet success =
  method0 "RowsetComplete"
          [ inString description
          , inString sheet
          , inBool success
          ]

-- --------------------------------------------------
-- 
-- interface _Workbook
-- 
-- --------------------------------------------------
data Workbook_ a = Workbook__ 
type Workbook a = IDispatch (Workbook_ a)
iidWorkbook :: IID (Workbook ())
iidWorkbook = mkIID "{000208DA-0000-0000-C000-000000000046}"

getApplication25 :: Workbook a0
                 -> IO (Maybe Application)
getApplication25 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator25 :: Workbook a0
             -> IO XlCreator
getCreator25 =
  propertyGet "Creator"
              []
              outEnum

getParent40 :: Workbook a0
            -> IO (IDispatch ())
getParent40 =
  propertyGet "Parent"
              []
              outIDispatch

getAcceptLabelsInFormulas :: Workbook a0
                          -> IO Bool
getAcceptLabelsInFormulas =
  propertyGet "AcceptLabelsInFormulas"
              []
              outBool

setAcceptLabelsInFormulas :: Bool
                          -> Workbook a0
                          -> IO ()
setAcceptLabelsInFormulas rHS =
  propertySet "AcceptLabelsInFormulas"
              [inBool rHS]

activate6 :: Int32
          -> Workbook a0
          -> IO ()
activate6 lcid =
  method0 "Activate"
          [inInt32 lcid]

getActiveChart2 :: Workbook a0
                -> IO (Maybe Chart)
getActiveChart2 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getActiveChart0 methPtr iptr rHS) 13 iptr
    doThenFree free (readunique readChart) rHS

getActiveSheet2 :: Workbook a0
                -> IO (IDispatch ())
getActiveSheet2 =
  propertyGet "ActiveSheet"
              []
              outIDispatch

getAuthor0 :: Int32
           -> Workbook a0
           -> IO String
getAuthor0 lcid =
  propertyGet "Author"
              [inInt32 lcid]
              outString

setAuthor :: Int32
          -> String
          -> Workbook a0
          -> IO ()
setAuthor lcid rHS =
  propertySet "Author"
              [ inInt32 lcid
              , inString rHS
              ]

getAutoUpdateFrequency :: Workbook a0
                       -> IO Int32
getAutoUpdateFrequency =
  propertyGet "AutoUpdateFrequency"
              []
              outInt32

setAutoUpdateFrequency :: Int32
                       -> Workbook a0
                       -> IO ()
setAutoUpdateFrequency rHS =
  propertySet "AutoUpdateFrequency"
              [inInt32 rHS]

getAutoUpdateSaveChanges :: Workbook a0
                         -> IO Bool
getAutoUpdateSaveChanges =
  propertyGet "AutoUpdateSaveChanges"
              []
              outBool

setAutoUpdateSaveChanges :: Bool
                         -> Workbook a0
                         -> IO ()
setAutoUpdateSaveChanges rHS =
  propertySet "AutoUpdateSaveChanges"
              [inBool rHS]

getChangeHistoryDuration :: Workbook a0
                         -> IO Int32
getChangeHistoryDuration =
  propertyGet "ChangeHistoryDuration"
              []
              outInt32

setChangeHistoryDuration :: Int32
                         -> Workbook a0
                         -> IO ()
setChangeHistoryDuration rHS =
  propertySet "ChangeHistoryDuration"
              [inInt32 rHS]

getBuiltinDocumentProperties :: Workbook a0
                             -> IO (IDispatch ())
getBuiltinDocumentProperties =
  propertyGet "BuiltinDocumentProperties"
              []
              outIDispatch

changeFileAccess :: (Variant a1, Variant a2)
                 => XlFileAccess
                 -> a1
                 -> a2
                 -> Int32
                 -> Workbook a0
                 -> IO ()
changeFileAccess mode0 writePassword notify lcid =
  method0 "ChangeFileAccess"
          [ inEnum mode0
          , inVariant writePassword
          , inVariant notify
          , inInt32 lcid
          ]

changeLink :: (Variant a1)
           => String
           -> String
           -> a1
           -> Int32
           -> Workbook a0
           -> IO ()
changeLink name newName type0 lcid =
  method0 "ChangeLink"
          [ inString name
          , inString newName
          , inDefaultValue (inInt32 1) inVariant type0
          , inInt32 lcid
          ]

getCharts1 :: Workbook a0
           -> IO (Sheets ())
getCharts1 =
  propertyGet "Charts"
              []
              outIDispatch

close0 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Int32
       -> Workbook a0
       -> IO ()
close0 saveChanges filename routeWorkbook lcid =
  method0 "Close"
          [ inVariant saveChanges
          , inVariant filename
          , inVariant routeWorkbook
          , inInt32 lcid
          ]

getCodeName3 :: Workbook a0
             -> IO String
getCodeName3 =
  propertyGet "CodeName"
              []
              outString

getCodeName4 :: Workbook a0
             -> IO String
getCodeName4 =
  propertyGet "_CodeName"
              []
              outString

setCodeName1 :: String
             -> Workbook a0
             -> IO ()
setCodeName1 rHS =
  propertySet "_CodeName"
              [inString rHS]

getColors :: (Variant a1, Variant a2)
          => a2
          -> Int32
          -> Workbook a0
          -> IO a1
getColors index0 lcid =
  propertyGet "Colors"
              [ inVariant index0
              , inInt32 lcid
              ]
              outVariant

setColors :: (Variant a1)
          => a1
          -> Int32
          -> a2
          -> Workbook a0
          -> IO ()
setColors index0 lcid rHS =
  propertySet "Colors"
              [ inVariant index0
              , inInt32 lcid
              , inVariant rHS
              ]

getCommandBars1 :: Workbook a0
                -> IO (Maybe CommandBars)
getCommandBars1 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getCommandBars methPtr iptr rHS) 33 iptr
    doThenFree free (readunique readCommandBars) rHS

getComments1 :: Int32
             -> Workbook a0
             -> IO String
getComments1 lcid =
  propertyGet "Comments"
              [inInt32 lcid]
              outString

setComments :: Int32
            -> String
            -> Workbook a0
            -> IO ()
setComments lcid rHS =
  propertySet "Comments"
              [ inInt32 lcid
              , inString rHS
              ]

getConflictResolution :: Workbook a0
                      -> IO XlSaveConflictResolution
getConflictResolution =
  propertyGet "ConflictResolution"
              []
              outEnum

setConflictResolution :: XlSaveConflictResolution
                      -> Workbook a0
                      -> IO ()
setConflictResolution rHS =
  propertySet "ConflictResolution"
              [inEnum rHS]

getContainer :: Workbook a0
             -> IO (IDispatch ())
getContainer =
  propertyGet "Container"
              []
              outIDispatch

getCreateBackup :: Int32
                -> Workbook a0
                -> IO Bool
getCreateBackup lcid =
  propertyGet "CreateBackup"
              [inInt32 lcid]
              outBool

getCustomDocumentProperties :: Workbook a0
                            -> IO (IDispatch ())
getCustomDocumentProperties =
  propertyGet "CustomDocumentProperties"
              []
              outIDispatch

getDate1904 :: Int32
            -> Workbook a0
            -> IO Bool
getDate1904 lcid =
  propertyGet "Date1904"
              [inInt32 lcid]
              outBool

setDate1904 :: Int32
            -> Bool
            -> Workbook a0
            -> IO ()
setDate1904 lcid rHS =
  propertySet "Date1904"
              [ inInt32 lcid
              , inBool rHS
              ]

deleteNumberFormat :: String
                   -> Int32
                   -> Workbook a0
                   -> IO ()
deleteNumberFormat numberFormat lcid =
  method0 "DeleteNumberFormat"
          [ inString numberFormat
          , inInt32 lcid
          ]

getDialogSheets1 :: Workbook a0
                 -> IO (Sheets ())
getDialogSheets1 =
  propertyGet "DialogSheets"
              []
              outIDispatch

getDisplayDrawingObjects :: Int32
                         -> Workbook a0
                         -> IO XlDisplayDrawingObjects
getDisplayDrawingObjects lcid =
  propertyGet "DisplayDrawingObjects"
              [inInt32 lcid]
              outEnum

setDisplayDrawingObjects :: Int32
                         -> XlDisplayDrawingObjects
                         -> Workbook a0
                         -> IO ()
setDisplayDrawingObjects lcid rHS =
  propertySet "DisplayDrawingObjects"
              [ inInt32 lcid
              , inEnum rHS
              ]

exclusiveAccess :: Int32
                -> Workbook a0
                -> IO Bool
exclusiveAccess lcid =
  function1 "ExclusiveAccess"
            [inInt32 lcid]
            outBool

getFileFormat :: Int32
              -> Workbook a0
              -> IO XlFileFormat
getFileFormat lcid =
  propertyGet "FileFormat"
              [inInt32 lcid]
              outEnum

forwardMailer :: Int32
              -> Workbook a0
              -> IO ()
forwardMailer lcid =
  method0 "ForwardMailer"
          [inInt32 lcid]

getFullName0 :: Int32
             -> Workbook a0
             -> IO String
getFullName0 lcid =
  propertyGet "FullName"
              [inInt32 lcid]
              outString

getHasMailer :: Int32
             -> Workbook a0
             -> IO Bool
getHasMailer lcid =
  propertyGet "HasMailer"
              [inInt32 lcid]
              outBool

setHasMailer :: Int32
             -> Bool
             -> Workbook a0
             -> IO ()
setHasMailer lcid rHS =
  propertySet "HasMailer"
              [ inInt32 lcid
              , inBool rHS
              ]

getHasPassword :: Int32
               -> Workbook a0
               -> IO Bool
getHasPassword lcid =
  propertyGet "HasPassword"
              [inInt32 lcid]
              outBool

getHasRoutingSlip :: Int32
                  -> Workbook a0
                  -> IO Bool
getHasRoutingSlip lcid =
  propertyGet "HasRoutingSlip"
              [inInt32 lcid]
              outBool

setHasRoutingSlip :: Int32
                  -> Bool
                  -> Workbook a0
                  -> IO ()
setHasRoutingSlip lcid rHS =
  propertySet "HasRoutingSlip"
              [ inInt32 lcid
              , inBool rHS
              ]

getIsAddin :: Workbook a0
           -> IO Bool
getIsAddin =
  propertyGet "IsAddin"
              []
              outBool

setIsAddin :: Bool
           -> Workbook a0
           -> IO ()
setIsAddin rHS =
  propertySet "IsAddin"
              [inBool rHS]

getKeywords0 :: Int32
             -> Workbook a0
             -> IO String
getKeywords0 lcid =
  propertyGet "Keywords"
              [inInt32 lcid]
              outString

setKeywords :: Int32
            -> String
            -> Workbook a0
            -> IO ()
setKeywords lcid rHS =
  propertySet "Keywords"
              [ inInt32 lcid
              , inString rHS
              ]

linkInfo :: (Variant a1, Variant a2, Variant a3)
         => String
         -> XlLinkInfo
         -> a2
         -> a3
         -> Int32
         -> Workbook a0
         -> IO a1
linkInfo name linkInfo0 type0 editionRef lcid =
  function1 "LinkInfo"
            [ inString name
            , inEnum linkInfo0
            , inVariant type0
            , inVariant editionRef
            , inInt32 lcid
            ]
            outVariant

linkSources :: (Variant a1, Variant a2)
            => a2
            -> Int32
            -> Workbook a0
            -> IO a1
linkSources type0 lcid =
  function1 "LinkSources"
            [ inVariant type0
            , inInt32 lcid
            ]
            outVariant

getMailer :: Workbook a0
          -> IO (Mailer ())
getMailer =
  propertyGet "Mailer"
              []
              outIUnknown

mergeWorkbook :: a1
              -> Workbook a0
              -> IO ()
mergeWorkbook filename =
  method0 "MergeWorkbook"
          [inVariant filename]

getModules1 :: Workbook a0
            -> IO (Sheets ())
getModules1 =
  propertyGet "Modules"
              []
              outIDispatch

getMultiUserEditing :: Int32
                    -> Workbook a0
                    -> IO Bool
getMultiUserEditing lcid =
  propertyGet "MultiUserEditing"
              [inInt32 lcid]
              outBool

getName9 :: Workbook a0
         -> IO String
getName9 =
  propertyGet "Name"
              []
              outString

getNames2 :: Workbook a0
          -> IO (Names ())
getNames2 =
  propertyGet "Names"
              []
              outIUnknown

newWindow0 :: Int32
           -> Workbook a0
           -> IO (Window ())
newWindow0 lcid =
  function1 "NewWindow"
            [inInt32 lcid]
            outIUnknown

getOnSave :: Int32
          -> Workbook a0
          -> IO String
getOnSave lcid =
  propertyGet "OnSave"
              [inInt32 lcid]
              outString

setOnSave :: Int32
          -> String
          -> Workbook a0
          -> IO ()
setOnSave lcid rHS =
  propertySet "OnSave"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetActivate2 :: Int32
                    -> Workbook a0
                    -> IO String
getOnSheetActivate2 lcid =
  propertyGet "OnSheetActivate"
              [inInt32 lcid]
              outString

setOnSheetActivate2 :: Int32
                    -> String
                    -> Workbook a0
                    -> IO ()
setOnSheetActivate2 lcid rHS =
  propertySet "OnSheetActivate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetDeactivate2 :: Int32
                      -> Workbook a0
                      -> IO String
getOnSheetDeactivate2 lcid =
  propertyGet "OnSheetDeactivate"
              [inInt32 lcid]
              outString

setOnSheetDeactivate2 :: Int32
                      -> String
                      -> Workbook a0
                      -> IO ()
setOnSheetDeactivate2 lcid rHS =
  propertySet "OnSheetDeactivate"
              [ inInt32 lcid
              , inString rHS
              ]

openLinks :: (Variant a1, Variant a2)
          => String
          -> a1
          -> a2
          -> Int32
          -> Workbook a0
          -> IO ()
openLinks name readOnly type0 lcid =
  method0 "OpenLinks"
          [ inString name
          , inVariant readOnly
          , inVariant type0
          , inInt32 lcid
          ]

getPath2 :: Int32
         -> Workbook a0
         -> IO String
getPath2 lcid =
  propertyGet "Path"
              [inInt32 lcid]
              outString

getPersonalViewListSettings :: Workbook a0
                            -> IO Bool
getPersonalViewListSettings =
  propertyGet "PersonalViewListSettings"
              []
              outBool

setPersonalViewListSettings :: Bool
                            -> Workbook a0
                            -> IO ()
setPersonalViewListSettings rHS =
  propertySet "PersonalViewListSettings"
              [inBool rHS]

getPersonalViewPrintSettings :: Workbook a0
                             -> IO Bool
getPersonalViewPrintSettings =
  propertyGet "PersonalViewPrintSettings"
              []
              outBool

setPersonalViewPrintSettings :: Bool
                             -> Workbook a0
                             -> IO ()
setPersonalViewPrintSettings rHS =
  propertySet "PersonalViewPrintSettings"
              [inBool rHS]

pivotCaches :: Workbook a0
            -> IO (PivotCaches ())
pivotCaches =
  function1 "PivotCaches"
            []
            outIUnknown

post :: (Variant a1)
     => a1
     -> Int32
     -> Workbook a0
     -> IO ()
post destName lcid =
  method0 "Post"
          [ inVariant destName
          , inInt32 lcid
          ]

getPrecisionAsDisplayed :: Int32
                        -> Workbook a0
                        -> IO Bool
getPrecisionAsDisplayed lcid =
  propertyGet "PrecisionAsDisplayed"
              [inInt32 lcid]
              outBool

setPrecisionAsDisplayed :: Int32
                        -> Bool
                        -> Workbook a0
                        -> IO ()
setPrecisionAsDisplayed lcid rHS =
  propertySet "PrecisionAsDisplayed"
              [ inInt32 lcid
              , inBool rHS
              ]

printOut13 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> Workbook a0
           -> IO ()
printOut13 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview4 :: (Variant a1)
              => a1
              -> Int32
              -> Workbook a0
              -> IO ()
printPreview4 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

protect3 :: (Variant a1, Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> Workbook a0
         -> IO ()
protect3 password structure windows =
  method0 "_Protect"
          [ inVariant password
          , inVariant structure
          , inVariant windows
          ]

protectSharing :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> Workbook a0
               -> IO ()
protectSharing filename password writeResPassword readOnlyRecommended createBackup sharingPassword =
  method0 "_ProtectSharing"
          [ inVariant filename
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant sharingPassword
          ]

getProtectStructure :: Workbook a0
                    -> IO Bool
getProtectStructure =
  propertyGet "ProtectStructure"
              []
              outBool

getProtectWindows :: Workbook a0
                  -> IO Bool
getProtectWindows =
  propertyGet "ProtectWindows"
              []
              outBool

getReadOnly :: Int32
            -> Workbook a0
            -> IO Bool
getReadOnly lcid =
  propertyGet "ReadOnly"
              [inInt32 lcid]
              outBool

getReadOnlyRecommended :: Int32
                       -> Workbook a0
                       -> IO Bool
getReadOnlyRecommended lcid =
  propertyGet "_ReadOnlyRecommended"
              [inInt32 lcid]
              outBool

refreshAll :: Workbook a0
           -> IO ()
refreshAll =
  method0 "RefreshAll"
          []

reply :: Int32
      -> Workbook a0
      -> IO ()
reply lcid =
  method0 "Reply"
          [inInt32 lcid]

replyAll :: Int32
         -> Workbook a0
         -> IO ()
replyAll lcid =
  method0 "ReplyAll"
          [inInt32 lcid]

removeUser :: Int32
           -> Workbook a0
           -> IO ()
removeUser index0 =
  method0 "RemoveUser"
          [inInt32 index0]

getRevisionNumber :: Int32
                  -> Workbook a0
                  -> IO Int32
getRevisionNumber lcid =
  propertyGet "RevisionNumber"
              [inInt32 lcid]
              outInt32

route :: Int32
      -> Workbook a0
      -> IO ()
route lcid =
  method0 "Route"
          [inInt32 lcid]

getRouted :: Int32
          -> Workbook a0
          -> IO Bool
getRouted lcid =
  propertyGet "Routed"
              [inInt32 lcid]
              outBool

getRoutingSlip :: Workbook a0
               -> IO (RoutingSlip ())
getRoutingSlip =
  propertyGet "RoutingSlip"
              []
              outIUnknown

runAutoMacros :: XlRunAutoMacro
              -> Int32
              -> Workbook a0
              -> IO ()
runAutoMacros which lcid =
  method0 "RunAutoMacros"
          [ inEnum which
          , inInt32 lcid
          ]

save0 :: Int32
      -> Workbook a0
      -> IO ()
save0 lcid =
  method0 "Save"
          [inInt32 lcid]

saveAs3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> Int32
        -> Workbook a0
        -> IO ()
saveAs3 filename fileFormat password writeResPassword readOnlyRecommended createBackup accessMode conflictResolution addToMru textCodepage textVisualLayout lcid =
  method0 "_SaveAs"
          [ inVariant filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inDefaultValue (inInt32 1) inVariant accessMode
          , inVariant conflictResolution
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inInt32 lcid
          ]

saveCopyAs :: (Variant a1)
           => a1
           -> Int32
           -> Workbook a0
           -> IO ()
saveCopyAs filename lcid =
  method0 "SaveCopyAs"
          [ inVariant filename
          , inInt32 lcid
          ]

getSaved :: Int32
         -> Workbook a0
         -> IO Bool
getSaved lcid =
  propertyGet "Saved"
              [inInt32 lcid]
              outBool

setSaved :: Int32
         -> Bool
         -> Workbook a0
         -> IO ()
setSaved lcid rHS =
  propertySet "Saved"
              [ inInt32 lcid
              , inBool rHS
              ]

getSaveLinkValues :: Int32
                  -> Workbook a0
                  -> IO Bool
getSaveLinkValues lcid =
  propertyGet "SaveLinkValues"
              [inInt32 lcid]
              outBool

setSaveLinkValues :: Int32
                  -> Bool
                  -> Workbook a0
                  -> IO ()
setSaveLinkValues lcid rHS =
  propertySet "SaveLinkValues"
              [ inInt32 lcid
              , inBool rHS
              ]

sendMail :: (Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> Int32
         -> Workbook a0
         -> IO ()
sendMail recipients subject returnReceipt lcid =
  method0 "SendMail"
          [ inVariant recipients
          , inVariant subject
          , inVariant returnReceipt
          , inInt32 lcid
          ]

sendMailer :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Int32
           -> Workbook a0
           -> IO ()
sendMailer fileFormat priority lcid =
  method0 "SendMailer"
          [ inVariant fileFormat
          , inDefaultValue (inInt32 (-4143)) inVariant priority
          , inInt32 lcid
          ]

setLinkOnData :: (Variant a1)
              => String
              -> a1
              -> Int32
              -> Workbook a0
              -> IO ()
setLinkOnData name procedure lcid =
  method0 "SetLinkOnData"
          [ inString name
          , inVariant procedure
          , inInt32 lcid
          ]

getSheets1 :: Workbook a0
           -> IO (Sheets ())
getSheets1 =
  propertyGet "Sheets"
              []
              outIDispatch

getShowConflictHistory :: Int32
                       -> Workbook a0
                       -> IO Bool
getShowConflictHistory lcid =
  propertyGet "ShowConflictHistory"
              [inInt32 lcid]
              outBool

setShowConflictHistory :: Int32
                       -> Bool
                       -> Workbook a0
                       -> IO ()
setShowConflictHistory lcid rHS =
  propertySet "ShowConflictHistory"
              [ inInt32 lcid
              , inBool rHS
              ]

getStyles :: Workbook a0
          -> IO (Styles ())
getStyles =
  propertyGet "Styles"
              []
              outIUnknown

getSubject0 :: Int32
            -> Workbook a0
            -> IO String
getSubject0 lcid =
  propertyGet "Subject"
              [inInt32 lcid]
              outString

setSubject :: Int32
           -> String
           -> Workbook a0
           -> IO ()
setSubject lcid rHS =
  propertySet "Subject"
              [ inInt32 lcid
              , inString rHS
              ]

getTitle0 :: Int32
          -> Workbook a0
          -> IO String
getTitle0 lcid =
  propertyGet "Title"
              [inInt32 lcid]
              outString

setTitle :: Int32
         -> String
         -> Workbook a0
         -> IO ()
setTitle lcid rHS =
  propertySet "Title"
              [ inInt32 lcid
              , inString rHS
              ]

unprotect1 :: (Variant a1)
           => a1
           -> Int32
           -> Workbook a0
           -> IO ()
unprotect1 password lcid =
  method0 "Unprotect"
          [ inVariant password
          , inInt32 lcid
          ]

unprotectSharing :: (Variant a1)
                 => a1
                 -> Workbook a0
                 -> IO ()
unprotectSharing sharingPassword =
  method0 "UnprotectSharing"
          [inVariant sharingPassword]

updateFromFile :: Int32
               -> Workbook a0
               -> IO ()
updateFromFile lcid =
  method0 "UpdateFromFile"
          [inInt32 lcid]

updateLink :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Int32
           -> Workbook a0
           -> IO ()
updateLink name type0 lcid =
  method0 "UpdateLink"
          [ inVariant name
          , inVariant type0
          , inInt32 lcid
          ]

getUpdateRemoteReferences :: Int32
                          -> Workbook a0
                          -> IO Bool
getUpdateRemoteReferences lcid =
  propertyGet "UpdateRemoteReferences"
              [inInt32 lcid]
              outBool

setUpdateRemoteReferences :: Int32
                          -> Bool
                          -> Workbook a0
                          -> IO ()
setUpdateRemoteReferences lcid rHS =
  propertySet "UpdateRemoteReferences"
              [ inInt32 lcid
              , inBool rHS
              ]

getUserControl0 :: Workbook a0
                -> IO Bool
getUserControl0 =
  propertyGet "UserControl"
              []
              outBool

setUserControl0 :: Bool
                -> Workbook a0
                -> IO ()
setUserControl0 rHS =
  propertySet "UserControl"
              [inBool rHS]

getUserStatus :: (Variant a1)
              => Int32
              -> Workbook a0
              -> IO a1
getUserStatus lcid =
  propertyGet "UserStatus"
              [inInt32 lcid]
              outVariant

getCustomViews :: Workbook a0
               -> IO (CustomViews ())
getCustomViews =
  propertyGet "CustomViews"
              []
              outIUnknown

getWindows1 :: Workbook a0
            -> IO (Windows ())
getWindows1 =
  propertyGet "Windows"
              []
              outIUnknown

getWorksheets1 :: Workbook a0
               -> IO (Sheets ())
getWorksheets1 =
  propertyGet "Worksheets"
              []
              outIDispatch

getWriteReserved :: Int32
                 -> Workbook a0
                 -> IO Bool
getWriteReserved lcid =
  propertyGet "WriteReserved"
              [inInt32 lcid]
              outBool

getWriteReservedBy :: Int32
                   -> Workbook a0
                   -> IO String
getWriteReservedBy lcid =
  propertyGet "WriteReservedBy"
              [inInt32 lcid]
              outString

getExcel4IntlMacroSheets1 :: Workbook a0
                          -> IO (Sheets ())
getExcel4IntlMacroSheets1 =
  propertyGet "Excel4IntlMacroSheets"
              []
              outIDispatch

getExcel4MacroSheets1 :: Workbook a0
                      -> IO (Sheets ())
getExcel4MacroSheets1 =
  propertyGet "Excel4MacroSheets"
              []
              outIDispatch

getTemplateRemoveExtData :: Workbook a0
                         -> IO Bool
getTemplateRemoveExtData =
  propertyGet "TemplateRemoveExtData"
              []
              outBool

setTemplateRemoveExtData :: Bool
                         -> Workbook a0
                         -> IO ()
setTemplateRemoveExtData rHS =
  propertySet "TemplateRemoveExtData"
              [inBool rHS]

highlightChangesOptions :: (Variant a1, Variant a2, Variant a3)
                        => a1
                        -> a2
                        -> a3
                        -> Workbook a0
                        -> IO ()
highlightChangesOptions when who where0 =
  method0 "HighlightChangesOptions"
          [ inVariant when
          , inVariant who
          , inVariant where0
          ]

getHighlightChangesOnScreen :: Workbook a0
                            -> IO Bool
getHighlightChangesOnScreen =
  propertyGet "HighlightChangesOnScreen"
              []
              outBool

setHighlightChangesOnScreen :: Bool
                            -> Workbook a0
                            -> IO ()
setHighlightChangesOnScreen rHS =
  propertySet "HighlightChangesOnScreen"
              [inBool rHS]

getKeepChangeHistory :: Workbook a0
                     -> IO Bool
getKeepChangeHistory =
  propertyGet "KeepChangeHistory"
              []
              outBool

setKeepChangeHistory :: Bool
                     -> Workbook a0
                     -> IO ()
setKeepChangeHistory rHS =
  propertySet "KeepChangeHistory"
              [inBool rHS]

getListChangesOnNewSheet :: Workbook a0
                         -> IO Bool
getListChangesOnNewSheet =
  propertyGet "ListChangesOnNewSheet"
              []
              outBool

setListChangesOnNewSheet :: Bool
                         -> Workbook a0
                         -> IO ()
setListChangesOnNewSheet rHS =
  propertySet "ListChangesOnNewSheet"
              [inBool rHS]

purgeChangeHistoryNow :: (Variant a1)
                      => Int32
                      -> a1
                      -> Workbook a0
                      -> IO ()
purgeChangeHistoryNow days sharingPassword =
  method0 "PurgeChangeHistoryNow"
          [ inInt32 days
          , inVariant sharingPassword
          ]

acceptAllChanges :: (Variant a1, Variant a2, Variant a3)
                 => a1
                 -> a2
                 -> a3
                 -> Workbook a0
                 -> IO ()
acceptAllChanges when who where0 =
  method0 "AcceptAllChanges"
          [ inVariant when
          , inVariant who
          , inVariant where0
          ]

rejectAllChanges :: (Variant a1, Variant a2, Variant a3)
                 => a1
                 -> a2
                 -> a3
                 -> Workbook a0
                 -> IO ()
rejectAllChanges when who where0 =
  method0 "RejectAllChanges"
          [ inVariant when
          , inVariant who
          , inVariant where0
          ]

pivotTableWizard0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
                  => a1
                  -> a2
                  -> a3
                  -> a4
                  -> a5
                  -> a6
                  -> a7
                  -> a8
                  -> a9
                  -> a10
                  -> a11
                  -> a12
                  -> a13
                  -> a14
                  -> a15
                  -> a16
                  -> Int32
                  -> Workbook a0
                  -> IO ()
pivotTableWizard0 sourceType sourceData tableDestination tableName rowGrand columnGrand saveData hasAutoFormat autoPage reserved backgroundQuery optimizeCache pageFieldOrder pageFieldWrapCount readData connection lcid =
  method0 "PivotTableWizard"
          [ inVariant sourceType
          , inVariant sourceData
          , inVariant tableDestination
          , inVariant tableName
          , inVariant rowGrand
          , inVariant columnGrand
          , inVariant saveData
          , inVariant hasAutoFormat
          , inVariant autoPage
          , inVariant reserved
          , inVariant backgroundQuery
          , inVariant optimizeCache
          , inVariant pageFieldOrder
          , inVariant pageFieldWrapCount
          , inVariant readData
          , inVariant connection
          , inInt32 lcid
          ]

resetColors :: Workbook a0
            -> IO ()
resetColors =
  method0 "ResetColors"
          []

getVBProject :: Workbook a0
             -> IO (Maybe VBProject)
getVBProject iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getVBProject methPtr iptr rHS) 150 iptr
    doThenFree free (readunique readVBProject) rHS

foreign import stdcall "dynamic" prim_Excel_getVBProject :: Ptr () -> Ptr () -> Ptr (Ptr VBProject) -> IO Int32
followHyperlink0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                 => String
                 -> a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> Workbook a0
                 -> IO ()
followHyperlink0 address subAddress newWindow1 addHistory extraInfo method headerInfo =
  method0 "FollowHyperlink"
          [ inString address
          , inVariant subAddress
          , inVariant newWindow1
          , inVariant addHistory
          , inVariant extraInfo
          , inVariant method
          , inVariant headerInfo
          ]

addToFavorites :: Workbook a0
               -> IO ()
addToFavorites =
  method0 "AddToFavorites"
          []

getIsInplace :: Workbook a0
             -> IO Bool
getIsInplace =
  propertyGet "IsInplace"
              []
              outBool

printOut14 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> Workbook a0
           -> IO ()
printOut14 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

webPagePreview :: Workbook a0
               -> IO ()
webPagePreview =
  method0 "WebPagePreview"
          []

getPublishObjects :: Workbook a0
                  -> IO (PublishObjects ())
getPublishObjects =
  propertyGet "PublishObjects"
              []
              outIUnknown

getWebOptions :: Workbook a0
              -> IO (WebOptions ())
getWebOptions =
  propertyGet "WebOptions"
              []
              outIUnknown

reloadAs :: MsoEncoding
         -> Workbook a0
         -> IO ()
reloadAs encoding iptr =
  do
    encoding <- marshallMsoEncoding encoding
    invokeAndCheck (\ methPtr iptr -> prim_Excel_reloadAs methPtr iptr encoding) 158 iptr

foreign import stdcall "prim_Excel_reloadAs" prim_Excel_reloadAs :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getHTMLProject :: Workbook a0
               -> IO (Maybe HTMLProject)
getHTMLProject iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getHTMLProject methPtr iptr rHS) 159 iptr
    doThenFree free (readunique readHTMLProject) rHS

foreign import stdcall "dynamic" prim_Excel_getHTMLProject :: Ptr () -> Ptr () -> Ptr (Ptr HTMLProject) -> IO Int32
getEnvelopeVisible :: Workbook a0
                   -> IO Bool
getEnvelopeVisible =
  propertyGet "EnvelopeVisible"
              []
              outBool

setEnvelopeVisible :: Bool
                   -> Workbook a0
                   -> IO ()
setEnvelopeVisible rHS =
  propertySet "EnvelopeVisible"
              [inBool rHS]

getCalculationVersion0 :: Workbook a0
                       -> IO Int32
getCalculationVersion0 =
  propertyGet "CalculationVersion"
              []
              outInt32

dummy17 :: Int32
        -> Workbook a0
        -> IO ()
dummy17 calcid =
  method0 "Dummy17"
          [inInt32 calcid]

sblt :: String
     -> Workbook a0
     -> IO ()
sblt s =
  method0 "sblt"
          [inString s]

getVBASigned :: Workbook a0
             -> IO Bool
getVBASigned =
  propertyGet "VBASigned"
              []
              outBool

getShowPivotTableFieldList :: Workbook a0
                           -> IO Bool
getShowPivotTableFieldList =
  propertyGet "ShowPivotTableFieldList"
              []
              outBool

setShowPivotTableFieldList :: Bool
                           -> Workbook a0
                           -> IO ()
setShowPivotTableFieldList rHS =
  propertySet "ShowPivotTableFieldList"
              [inBool rHS]

getUpdateLinks :: Workbook a0
               -> IO XlUpdateLinks
getUpdateLinks =
  propertyGet "UpdateLinks"
              []
              outEnum

setUpdateLinks :: XlUpdateLinks
               -> Workbook a0
               -> IO ()
setUpdateLinks rHS =
  propertySet "UpdateLinks"
              [inEnum rHS]

breakLink :: String
          -> XlLinkType
          -> Workbook a0
          -> IO ()
breakLink name type0 =
  method0 "BreakLink"
          [ inString name
          , inEnum type0
          ]

dummy16 :: Workbook a0
        -> IO ()
dummy16 =
  method0 "Dummy16"
          []

saveAs4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> Int32
        -> Workbook a0
        -> IO ()
saveAs4 filename fileFormat password writeResPassword readOnlyRecommended createBackup accessMode conflictResolution addToMru textCodepage textVisualLayout local lcid =
  method0 "SaveAs"
          [ inVariant filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inDefaultValue (inInt32 1) inVariant accessMode
          , inVariant conflictResolution
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inVariant local
          , inInt32 lcid
          ]

getEnableAutoRecover :: Workbook a0
                     -> IO Bool
getEnableAutoRecover =
  propertyGet "EnableAutoRecover"
              []
              outBool

setEnableAutoRecover :: Bool
                     -> Workbook a0
                     -> IO ()
setEnableAutoRecover rHS =
  propertySet "EnableAutoRecover"
              [inBool rHS]

getRemovePersonalInformation :: Workbook a0
                             -> IO Bool
getRemovePersonalInformation =
  propertyGet "RemovePersonalInformation"
              []
              outBool

setRemovePersonalInformation :: Bool
                             -> Workbook a0
                             -> IO ()
setRemovePersonalInformation rHS =
  propertySet "RemovePersonalInformation"
              [inBool rHS]

getFullNameURLEncoded :: Int32
                      -> Workbook a0
                      -> IO String
getFullNameURLEncoded lcid =
  propertyGet "FullNameURLEncoded"
              [inInt32 lcid]
              outString

checkIn :: (Variant a1, Variant a2, Variant a3)
        => a1
        -> a2
        -> a3
        -> Workbook a0
        -> IO ()
checkIn saveChanges comments makePublic =
  method0 "CheckIn"
          [ inVariant saveChanges
          , inVariant comments
          , inVariant makePublic
          ]

canCheckIn :: Workbook a0
           -> IO Bool
canCheckIn =
  function1 "CanCheckIn"
            []
            outBool

sendForReview :: (Variant a1, Variant a2, Variant a3, Variant a4)
              => a1
              -> a2
              -> a3
              -> a4
              -> Workbook a0
              -> IO ()
sendForReview recipients subject showMessage includeAttachment =
  method0 "SendForReview"
          [ inVariant recipients
          , inVariant subject
          , inVariant showMessage
          , inVariant includeAttachment
          ]

replyWithChanges :: (Variant a1)
                 => a1
                 -> Workbook a0
                 -> IO ()
replyWithChanges showMessage =
  method0 "ReplyWithChanges"
          [inVariant showMessage]

endReview :: Workbook a0
          -> IO ()
endReview =
  method0 "EndReview"
          []

getPassword :: Workbook a0
            -> IO String
getPassword =
  propertyGet "Password"
              []
              outString

setPassword :: String
            -> Workbook a0
            -> IO ()
setPassword rHS =
  propertySet "Password"
              [inString rHS]

getWritePassword :: Workbook a0
                 -> IO String
getWritePassword =
  propertyGet "WritePassword"
              []
              outString

setWritePassword :: String
                 -> Workbook a0
                 -> IO ()
setWritePassword rHS =
  propertySet "WritePassword"
              [inString rHS]

getPasswordEncryptionProvider :: Workbook a0
                              -> IO String
getPasswordEncryptionProvider =
  propertyGet "PasswordEncryptionProvider"
              []
              outString

getPasswordEncryptionAlgorithm :: Workbook a0
                               -> IO String
getPasswordEncryptionAlgorithm =
  propertyGet "PasswordEncryptionAlgorithm"
              []
              outString

getPasswordEncryptionKeyLength :: Workbook a0
                               -> IO Int32
getPasswordEncryptionKeyLength =
  propertyGet "PasswordEncryptionKeyLength"
              []
              outInt32

setPasswordEncryptionOptions :: (Variant a1, Variant a2, Variant a3, Variant a4)
                             => a1
                             -> a2
                             -> a3
                             -> a4
                             -> Workbook a0
                             -> IO ()
setPasswordEncryptionOptions passwordEncryptionProvider passwordEncryptionAlgorithm passwordEncryptionKeyLength passwordEncryptionFileProperties =
  method0 "SetPasswordEncryptionOptions"
          [ inVariant passwordEncryptionProvider
          , inVariant passwordEncryptionAlgorithm
          , inVariant passwordEncryptionKeyLength
          , inVariant passwordEncryptionFileProperties
          ]

getPasswordEncryptionFileProperties :: Workbook a0
                                    -> IO Bool
getPasswordEncryptionFileProperties =
  propertyGet "PasswordEncryptionFileProperties"
              []
              outBool

getReadOnlyRecommended0 :: Workbook a0
                        -> IO Bool
getReadOnlyRecommended0 =
  propertyGet "ReadOnlyRecommended"
              []
              outBool

setReadOnlyRecommended :: Bool
                       -> Workbook a0
                       -> IO ()
setReadOnlyRecommended rHS =
  propertySet "ReadOnlyRecommended"
              [inBool rHS]

protect4 :: (Variant a1, Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> Workbook a0
         -> IO ()
protect4 password structure windows =
  method0 "Protect"
          [ inVariant password
          , inVariant structure
          , inVariant windows
          ]

getSmartTagOptions :: Workbook a0
                   -> IO (SmartTagOptions ())
getSmartTagOptions =
  propertyGet "SmartTagOptions"
              []
              outIUnknown

recheckSmartTags :: Workbook a0
                 -> IO ()
recheckSmartTags =
  method0 "RecheckSmartTags"
          []

getPermission :: Workbook a0
              -> IO (Maybe Permission)
getPermission iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getPermission methPtr iptr rHS) 197 iptr
    doThenFree free (readunique readPermission) rHS

foreign import stdcall "dynamic" prim_Excel_getPermission :: Ptr () -> Ptr () -> Ptr (Ptr Permission) -> IO Int32
getSharedWorkspace :: Workbook a0
                   -> IO (Maybe SharedWorkspace)
getSharedWorkspace iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getSharedWorkspace methPtr iptr rHS) 198 iptr
    doThenFree free (readunique readSharedWorkspace) rHS

foreign import stdcall "dynamic" prim_Excel_getSharedWorkspace :: Ptr () -> Ptr () -> Ptr (Ptr SharedWorkspace) -> IO Int32
getSync :: Workbook a0
        -> IO (Maybe Sync)
getSync iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getSync methPtr iptr rHS) 199 iptr
    doThenFree free (readunique readSync) rHS

foreign import stdcall "dynamic" prim_Excel_getSync :: Ptr () -> Ptr () -> Ptr (Ptr Sync) -> IO Int32
sendFaxOverInternet :: (Variant a1, Variant a2, Variant a3)
                    => a1
                    -> a2
                    -> a3
                    -> Workbook a0
                    -> IO ()
sendFaxOverInternet recipients subject showMessage =
  method0 "SendFaxOverInternet"
          [ inVariant recipients
          , inVariant subject
          , inVariant showMessage
          ]

getXmlNamespaces :: Workbook a0
                 -> IO (XmlNamespaces ())
getXmlNamespaces =
  propertyGet "XmlNamespaces"
              []
              outIUnknown

getXmlMaps :: Workbook a0
           -> IO (XmlMaps ())
getXmlMaps =
  propertyGet "XmlMaps"
              []
              outIUnknown

xmlImport :: (Variant a1, Variant a2)
          => String
          -> a1
          -> a2
          -> Workbook a0
          -> IO (XmlMap (), XlXmlImportResult)
xmlImport url overwrite destination =
  function2 "XmlImport"
            [ inString url
            , inVariant overwrite
            , inVariant destination
            ]
            outIUnknown
            outEnum

getSmartDocument :: Workbook a0
                 -> IO (Maybe SmartDocument)
getSmartDocument iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getSmartDocument methPtr iptr rHS) 204 iptr
    doThenFree free (readunique readSmartDocument) rHS

foreign import stdcall "dynamic" prim_Excel_getSmartDocument :: Ptr () -> Ptr () -> Ptr (Ptr SmartDocument) -> IO Int32
getDocumentLibraryVersions :: Workbook a0
                           -> IO (Maybe DocumentLibraryVersions)
getDocumentLibraryVersions iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getDocumentLibraryVersions methPtr iptr rHS) 205 iptr
    doThenFree free (readunique readDocumentLibraryVersions) rHS

foreign import stdcall "dynamic" prim_Excel_getDocumentLibraryVersions :: Ptr () -> Ptr () -> Ptr (Ptr DocumentLibraryVersions) -> IO Int32
getInactiveListBorderVisible :: Workbook a0
                             -> IO Bool
getInactiveListBorderVisible =
  propertyGet "InactiveListBorderVisible"
              []
              outBool

setInactiveListBorderVisible :: Bool
                             -> Workbook a0
                             -> IO ()
setInactiveListBorderVisible rHS =
  propertySet "InactiveListBorderVisible"
              [inBool rHS]

getDisplayInkComments :: Workbook a0
                      -> IO Bool
getDisplayInkComments =
  propertyGet "DisplayInkComments"
              []
              outBool

setDisplayInkComments :: Bool
                      -> Workbook a0
                      -> IO ()
setDisplayInkComments rHS =
  propertySet "DisplayInkComments"
              [inBool rHS]

xmlImportXml :: (Variant a1, Variant a2)
             => String
             -> a1
             -> a2
             -> Workbook a0
             -> IO (XmlMap (), XlXmlImportResult)
xmlImportXml data0 overwrite destination =
  function2 "XmlImportXml"
            [ inString data0
            , inVariant overwrite
            , inVariant destination
            ]
            outIUnknown
            outEnum

saveAsXMLData :: String
              -> XmlMap a1
              -> Workbook a0
              -> IO ()
saveAsXMLData filename map =
  method0 "SaveAsXMLData"
          [ inString filename
          , inIUnknown map
          ]

toggleFormsDesign :: Workbook a0
                  -> IO ()
toggleFormsDesign =
  method0 "ToggleFormsDesign"
          []

getContentTypeProperties :: Workbook a0
                         -> IO (Maybe MetaProperties)
getContentTypeProperties iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getContentTypeProperties methPtr iptr rHS) 213 iptr
    doThenFree free (readunique readMetaProperties) rHS

foreign import stdcall "dynamic" prim_Excel_getContentTypeProperties :: Ptr () -> Ptr () -> Ptr (Ptr MetaProperties) -> IO Int32
getConnections :: Workbook a0
               -> IO (Connections ())
getConnections =
  propertyGet "Connections"
              []
              outIUnknown

removeDocumentInformation :: XlRemoveDocInfoType
                          -> Workbook a0
                          -> IO ()
removeDocumentInformation removeDocInfoType =
  method0 "RemoveDocumentInformation"
          [inEnum removeDocInfoType]

getSignatures :: Workbook a0
              -> IO (Maybe SignatureSet)
getSignatures iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getSignatures methPtr iptr rHS) 216 iptr
    doThenFree free (readunique readSignatureSet) rHS

foreign import stdcall "dynamic" prim_Excel_getSignatures :: Ptr () -> Ptr () -> Ptr (Ptr SignatureSet) -> IO Int32
checkInWithVersion :: (Variant a1, Variant a2, Variant a3, Variant a4)
                   => a1
                   -> a2
                   -> a3
                   -> a4
                   -> Workbook a0
                   -> IO ()
checkInWithVersion saveChanges comments makePublic versionType =
  method0 "CheckInWithVersion"
          [ inVariant saveChanges
          , inVariant comments
          , inVariant makePublic
          , inVariant versionType
          ]

getServerPolicy :: Workbook a0
                -> IO (Maybe ServerPolicy)
getServerPolicy iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getServerPolicy methPtr iptr rHS) 218 iptr
    doThenFree free (readunique readServerPolicy) rHS

foreign import stdcall "dynamic" prim_Excel_getServerPolicy :: Ptr () -> Ptr () -> Ptr (Ptr ServerPolicy) -> IO Int32
lockServerFile :: Workbook a0
               -> IO ()
lockServerFile =
  method0 "LockServerFile"
          []

getDocumentInspectors :: Workbook a0
                      -> IO (Maybe DocumentInspectors)
getDocumentInspectors iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getDocumentInspectors methPtr iptr rHS) 220 iptr
    doThenFree free (readunique readDocumentInspectors) rHS

foreign import stdcall "dynamic" prim_Excel_getDocumentInspectors :: Ptr () -> Ptr () -> Ptr (Ptr DocumentInspectors) -> IO Int32
getWorkflowTasks :: Workbook a0
                 -> IO (Maybe WorkflowTasks)
getWorkflowTasks iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getWorkflowTasks methPtr iptr rHS) 221 iptr
    doThenFree free (readunique readWorkflowTasks) rHS

foreign import stdcall "dynamic" prim_Excel_getWorkflowTasks :: Ptr () -> Ptr () -> Ptr (Ptr WorkflowTasks) -> IO Int32
getWorkflowTemplates :: Workbook a0
                     -> IO (Maybe WorkflowTemplates)
getWorkflowTemplates iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getWorkflowTemplates methPtr iptr rHS) 222 iptr
    doThenFree free (readunique readWorkflowTemplates) rHS

foreign import stdcall "dynamic" prim_Excel_getWorkflowTemplates :: Ptr () -> Ptr () -> Ptr (Ptr WorkflowTemplates) -> IO Int32
printOut15 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Int32
           -> Workbook a0
           -> IO ()
printOut15 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas lcid =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          , inInt32 lcid
          ]

getServerViewableItems :: Workbook a0
                       -> IO (ServerViewableItems ())
getServerViewableItems =
  propertyGet "ServerViewableItems"
              []
              outIUnknown

getTableStyles :: Workbook a0
               -> IO (TableStyles ())
getTableStyles =
  propertyGet "TableStyles"
              []
              outIUnknown

getDefaultTableStyle :: (Variant a1)
                     => Workbook a0
                     -> IO a1
getDefaultTableStyle =
  propertyGet "DefaultTableStyle"
              []
              outVariant

setDefaultTableStyle :: a1
                     -> Workbook a0
                     -> IO ()
setDefaultTableStyle rHS =
  propertySet "DefaultTableStyle"
              [inVariant rHS]

getDefaultPivotTableStyle :: (Variant a1)
                          => Workbook a0
                          -> IO a1
getDefaultPivotTableStyle =
  propertyGet "DefaultPivotTableStyle"
              []
              outVariant

setDefaultPivotTableStyle :: a1
                          -> Workbook a0
                          -> IO ()
setDefaultPivotTableStyle rHS =
  propertySet "DefaultPivotTableStyle"
              [inVariant rHS]

getCheckCompatibility :: Workbook a0
                      -> IO Bool
getCheckCompatibility =
  propertyGet "CheckCompatibility"
              []
              outBool

setCheckCompatibility :: Bool
                      -> Workbook a0
                      -> IO ()
setCheckCompatibility rHS =
  propertySet "CheckCompatibility"
              [inBool rHS]

getHasVBProject :: Workbook a0
                -> IO Bool
getHasVBProject =
  propertyGet "HasVBProject"
              []
              outBool

getCustomXMLParts :: Workbook a0
                  -> IO (Maybe CustomXMLParts)
getCustomXMLParts iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getCustomXMLParts methPtr iptr rHS) 233 iptr
    doThenFree free (readunique readCustomXMLParts) rHS

foreign import stdcall "dynamic" prim_Excel_getCustomXMLParts :: Ptr () -> Ptr () -> Ptr (Ptr CustomXMLParts) -> IO Int32
getFinal :: Workbook a0
         -> IO Bool
getFinal =
  propertyGet "Final"
              []
              outBool

setFinal :: Bool
         -> Workbook a0
         -> IO ()
setFinal rHS =
  propertySet "Final"
              [inBool rHS]

getResearch :: Workbook a0
            -> IO (Research ())
getResearch =
  propertyGet "Research"
              []
              outIUnknown

getTheme :: Workbook a0
         -> IO (Maybe OfficeTheme)
getTheme iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getTheme methPtr iptr rHS) 237 iptr
    doThenFree free (readunique readOfficeTheme) rHS

foreign import stdcall "dynamic" prim_Excel_getTheme :: Ptr () -> Ptr () -> Ptr (Ptr OfficeTheme) -> IO Int32
applyTheme :: String
           -> Workbook a0
           -> IO ()
applyTheme filename =
  method0 "ApplyTheme"
          [inString filename]

getExcel8CompatibilityMode :: Workbook a0
                           -> IO Bool
getExcel8CompatibilityMode =
  propertyGet "Excel8CompatibilityMode"
              []
              outBool

getConnectionsDisabled :: Workbook a0
                       -> IO Bool
getConnectionsDisabled =
  propertyGet "ConnectionsDisabled"
              []
              outBool

enableConnections :: Workbook a0
                  -> IO ()
enableConnections =
  method0 "EnableConnections"
          []

getShowPivotChartActiveFields :: Workbook a0
                              -> IO Bool
getShowPivotChartActiveFields =
  propertyGet "ShowPivotChartActiveFields"
              []
              outBool

setShowPivotChartActiveFields :: Bool
                              -> Workbook a0
                              -> IO ()
setShowPivotChartActiveFields rHS =
  propertySet "ShowPivotChartActiveFields"
              [inBool rHS]

exportAsFixedFormat2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                     => XlFixedFormatType
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> Workbook a0
                     -> IO ()
exportAsFixedFormat2 type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

getIconSets :: Workbook a0
            -> IO (IconSets ())
getIconSets =
  propertyGet "IconSets"
              []
              outIUnknown

getEncryptionProvider :: Workbook a0
                      -> IO String
getEncryptionProvider =
  propertyGet "EncryptionProvider"
              []
              outString

setEncryptionProvider :: String
                      -> Workbook a0
                      -> IO ()
setEncryptionProvider rHS =
  propertySet "EncryptionProvider"
              [inString rHS]

getDoNotPromptForConvert :: Workbook a0
                         -> IO Bool
getDoNotPromptForConvert =
  propertyGet "DoNotPromptForConvert"
              []
              outBool

setDoNotPromptForConvert :: Bool
                         -> Workbook a0
                         -> IO ()
setDoNotPromptForConvert rHS =
  propertySet "DoNotPromptForConvert"
              [inBool rHS]

getForceFullCalculation :: Workbook a0
                        -> IO Bool
getForceFullCalculation =
  propertyGet "ForceFullCalculation"
              []
              outBool

setForceFullCalculation :: Bool
                        -> Workbook a0
                        -> IO ()
setForceFullCalculation rHS =
  propertySet "ForceFullCalculation"
              [inBool rHS]

protectSharing0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> a7
                -> Workbook a0
                -> IO ()
protectSharing0 filename password writeResPassword readOnlyRecommended createBackup sharingPassword fileFormat =
  method0 "ProtectSharing"
          [ inVariant filename
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant sharingPassword
          , inVariant fileFormat
          ]

-- --------------------------------------------------
-- 
-- interface Workbooks
-- 
-- --------------------------------------------------
data Workbooks_ a = Workbooks__ 
type Workbooks a = IDispatch (Workbooks_ a)
iidWorkbooks :: IID (Workbooks ())
iidWorkbooks = mkIID "{000208DB-0000-0000-C000-000000000046}"

getApplication26 :: Workbooks a0
                 -> IO (Maybe Application)
getApplication26 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator26 :: Workbooks a0
             -> IO XlCreator
getCreator26 =
  propertyGet "Creator"
              []
              outEnum

getParent41 :: Workbooks a0
            -> IO (IDispatch ())
getParent41 =
  propertyGet "Parent"
              []
              outIDispatch

add7 :: (Variant a1)
     => a1
     -> Int32
     -> Workbooks a0
     -> IO (Maybe Workbook)
add7 template lcid iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    template <- marshallVariant template
    invokeAndCheck (\ methPtr iptr -> prim_Excel_add7 methPtr iptr template lcid rHS) 10 iptr
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_add7" prim_Excel_add7 :: Ptr () -> Ptr () -> VARIANT -> Int32 -> Ptr (Ptr Workbook) -> IO Int32
close1 :: Int32
       -> Workbooks a0
       -> IO ()
close1 lcid =
  method0 "Close"
          [inInt32 lcid]

getCount15 :: Workbooks a0
           -> IO Int32
getCount15 =
  propertyGet "Count"
              []
              outInt32

getItem12 :: (Variant a1)
          => a1
          -> Workbooks a0
          -> IO (Maybe Workbook)
getItem12 index0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    index0 <- marshallVariant index0
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getItem12 methPtr iptr index0 rHS) 13 iptr
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_getItem12" prim_Excel_getItem12 :: Ptr () -> Ptr () -> VARIANT -> Ptr (Ptr Workbook) -> IO Int32
getNewEnum14 :: Workbooks a0
             -> IO (IUnknown ())
getNewEnum14 =
  propertyGet "_NewEnum"
              []
              outIUnknown

open1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
      => String
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> Int32
      -> Workbooks a0
      -> IO (Maybe Workbook)
open1 filename updateLinks readOnly format password writeResPassword ignoreReadOnlyRecommended origin delimiter editable notify converter addToMru lcid iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    filename <- marshallBSTR filename
    updateLinks <- marshallVariant updateLinks
    readOnly <- marshallVariant readOnly
    format <- marshallVariant format
    password <- marshallVariant password
    writeResPassword <- marshallVariant writeResPassword
    ignoreReadOnlyRecommended <- marshallVariant ignoreReadOnlyRecommended
    origin <- marshallVariant origin
    delimiter <- marshallVariant delimiter
    editable <- marshallVariant editable
    notify <- marshallVariant notify
    converter <- marshallVariant converter
    addToMru <- marshallVariant addToMru
    invokeAndCheck (\ methPtr iptr -> prim_Excel_open1 methPtr iptr filename updateLinks readOnly format password writeResPassword ignoreReadOnlyRecommended origin delimiter editable notify converter addToMru lcid rHS) 15 iptr
    freeBSTR filename
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_open1" prim_Excel_open1 :: Ptr () -> Ptr () -> Ptr String -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Int32 -> Ptr (Ptr Workbook) -> IO Int32
openText :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
         => String
         -> a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> Int32
         -> Workbooks a0
         -> IO ()
openText filename origin startRow dataType textQualifier consecutiveDelimiter tab semicolon comma space other otherChar fieldInfo textVisualLayout lcid =
  method0 "__OpenText"
          [ inString filename
          , inVariant origin
          , inVariant startRow
          , inVariant dataType
          , inDefaultValue (inInt32 1) inVariant textQualifier
          , inVariant consecutiveDelimiter
          , inVariant tab
          , inVariant semicolon
          , inVariant comma
          , inVariant space
          , inVariant other
          , inVariant otherChar
          , inVariant fieldInfo
          , inVariant textVisualLayout
          , inInt32 lcid
          ]

getDefault13 :: (Variant a1)
             => a1
             -> Workbooks a0
             -> IO (Maybe Workbook)
getDefault13 index0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    index0 <- marshallVariant index0
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getDefault13 methPtr iptr index0 rHS) 17 iptr
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_getDefault13" prim_Excel_getDefault13 :: Ptr () -> Ptr () -> VARIANT -> Ptr (Ptr Workbook) -> IO Int32
openText0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
          => String
          -> a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> Int32
          -> Workbooks a0
          -> IO ()
openText0 filename origin startRow dataType textQualifier consecutiveDelimiter tab semicolon comma space other otherChar fieldInfo textVisualLayout decimalSeparator thousandsSeparator lcid =
  method0 "_OpenText"
          [ inString filename
          , inVariant origin
          , inVariant startRow
          , inVariant dataType
          , inDefaultValue (inInt32 1) inVariant textQualifier
          , inVariant consecutiveDelimiter
          , inVariant tab
          , inVariant semicolon
          , inVariant comma
          , inVariant space
          , inVariant other
          , inVariant otherChar
          , inVariant fieldInfo
          , inVariant textVisualLayout
          , inVariant decimalSeparator
          , inVariant thousandsSeparator
          , inInt32 lcid
          ]

open2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
      => String
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> Int32
      -> Workbooks a0
      -> IO (Maybe Workbook)
open2 filename updateLinks readOnly format password writeResPassword ignoreReadOnlyRecommended origin delimiter editable notify converter addToMru local corruptLoad lcid iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    filename <- marshallBSTR filename
    updateLinks <- marshallVariant updateLinks
    readOnly <- marshallVariant readOnly
    format <- marshallVariant format
    password <- marshallVariant password
    writeResPassword <- marshallVariant writeResPassword
    ignoreReadOnlyRecommended <- marshallVariant ignoreReadOnlyRecommended
    origin <- marshallVariant origin
    delimiter <- marshallVariant delimiter
    editable <- marshallVariant editable
    notify <- marshallVariant notify
    converter <- marshallVariant converter
    addToMru <- marshallVariant addToMru
    local <- marshallVariant local
    corruptLoad <- marshallVariant corruptLoad
    invokeAndCheck (\ methPtr iptr -> prim_Excel_open2 methPtr iptr filename updateLinks readOnly format password writeResPassword ignoreReadOnlyRecommended origin delimiter editable notify converter addToMru local corruptLoad lcid rHS) 19 iptr
    freeBSTR filename
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_open2" prim_Excel_open2 :: Ptr () -> Ptr () -> Ptr String -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Int32 -> Ptr (Ptr Workbook) -> IO Int32
openText1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17)
          => String
          -> a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> Int32
          -> Workbooks a0
          -> IO ()
openText1 filename origin startRow dataType textQualifier consecutiveDelimiter tab semicolon comma space other otherChar fieldInfo textVisualLayout decimalSeparator thousandsSeparator trailingMinusNumbers local lcid =
  method0 "OpenText"
          [ inString filename
          , inVariant origin
          , inVariant startRow
          , inVariant dataType
          , inDefaultValue (inInt32 1) inVariant textQualifier
          , inVariant consecutiveDelimiter
          , inVariant tab
          , inVariant semicolon
          , inVariant comma
          , inVariant space
          , inVariant other
          , inVariant otherChar
          , inVariant fieldInfo
          , inVariant textVisualLayout
          , inVariant decimalSeparator
          , inVariant thousandsSeparator
          , inVariant trailingMinusNumbers
          , inVariant local
          , inInt32 lcid
          ]

openDatabase :: (Variant a1, Variant a2, Variant a3, Variant a4)
             => String
             -> a1
             -> a2
             -> a3
             -> a4
             -> Workbooks a0
             -> IO (Maybe Workbook)
openDatabase filename commandText commandType backgroundQuery importDataAs iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    filename <- marshallBSTR filename
    commandText <- marshallVariant commandText
    commandType <- marshallVariant commandType
    backgroundQuery <- marshallVariant backgroundQuery
    importDataAs <- marshallVariant importDataAs
    invokeAndCheck (\ methPtr iptr -> prim_Excel_openDatabase methPtr iptr filename commandText commandType backgroundQuery importDataAs rHS) 21 iptr
    freeBSTR filename
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_openDatabase" prim_Excel_openDatabase :: Ptr () -> Ptr () -> Ptr String -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Workbook) -> IO Int32
checkOut :: String
         -> Workbooks a0
         -> IO ()
checkOut filename =
  method0 "CheckOut"
          [inString filename]

canCheckOut :: String
            -> Workbooks a0
            -> IO Bool
canCheckOut filename =
  function1 "CanCheckOut"
            [inString filename]
            outBool

openXML :: (Variant a1)
        => String
        -> a1
        -> Workbooks a0
        -> IO (Maybe Workbook)
openXML filename stylesheets iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    filename <- marshallBSTR filename
    stylesheets <- marshallVariant stylesheets
    invokeAndCheck (\ methPtr iptr -> prim_Excel_openXML methPtr iptr filename stylesheets rHS) 24 iptr
    freeBSTR filename
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_openXML" prim_Excel_openXML :: Ptr () -> Ptr () -> Ptr String -> VARIANT -> Ptr (Ptr Workbook) -> IO Int32
openXML0 :: (Variant a1, Variant a2)
         => String
         -> a1
         -> a2
         -> Workbooks a0
         -> IO (Maybe Workbook)
openXML0 filename stylesheets loadOption iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    filename <- marshallBSTR filename
    stylesheets <- marshallVariant stylesheets
    loadOption <- marshallVariant loadOption
    invokeAndCheck (\ methPtr iptr -> prim_Excel_openXML0 methPtr iptr filename stylesheets loadOption rHS) 25 iptr
    freeBSTR filename
    doThenFree free (readunique readWorkbook) rHS

foreign import stdcall "prim_Excel_openXML0" prim_Excel_openXML0 :: Ptr () -> Ptr () -> Ptr String -> VARIANT -> VARIANT -> Ptr (Ptr Workbook) -> IO Int32
-- --------------------------------------------------
-- 
-- interface IMenuBars
-- 
-- --------------------------------------------------
data IMenuBars_ a = IMenuBars__ 
type IMenuBars a = IDispatch (IMenuBars_ a)
iidIMenuBars :: IID (IMenuBars ())
iidIMenuBars = mkIID "{00020863-0001-0000-C000-000000000046}"

getApplication27 :: (Variant a1)
                 => IMenuBars a0
                 -> IO a1
getApplication27 =
  propertyGet "Application"
              []
              outVariant

getCreator27 :: IMenuBars a0
             -> IO XlCreator
getCreator27 =
  propertyGet "Creator"
              []
              outEnum

getParent42 :: IMenuBars a0
            -> IO (IDispatch ())
getParent42 =
  propertyGet "Parent"
              []
              outIDispatch

add8 :: (Variant a1)
     => a1
     -> IMenuBars a0
     -> IO (MenuBar ())
add8 name =
  function1 "Add"
            [inVariant name]
            outIUnknown

getCount16 :: IMenuBars a0
           -> IO Int32
getCount16 =
  propertyGet "Count"
              []
              outInt32

getDefault14 :: a1
             -> IMenuBars a0
             -> IO (MenuBar ())
getDefault14 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem13 :: a1
          -> IMenuBars a0
          -> IO (MenuBar ())
getItem13 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum15 :: IMenuBars a0
             -> IO (IUnknown ())
getNewEnum15 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IMenuBar
-- 
-- --------------------------------------------------
data IMenuBar_ a = IMenuBar__ 
type IMenuBar a = IDispatch (IMenuBar_ a)
iidIMenuBar :: IID (IMenuBar ())
iidIMenuBar = mkIID "{00020864-0001-0000-C000-000000000046}"

getApplication28 :: (Variant a1)
                 => IMenuBar a0
                 -> IO a1
getApplication28 =
  propertyGet "Application"
              []
              outVariant

getCreator28 :: IMenuBar a0
             -> IO XlCreator
getCreator28 =
  propertyGet "Creator"
              []
              outEnum

getParent43 :: IMenuBar a0
            -> IO (IDispatch ())
getParent43 =
  propertyGet "Parent"
              []
              outIDispatch

activate7 :: IMenuBar a0
          -> IO ()
activate7 =
  method0 "Activate"
          []

getBuiltIn2 :: IMenuBar a0
            -> IO Bool
getBuiltIn2 =
  propertyGet "BuiltIn"
              []
              outBool

getCaption1 :: IMenuBar a0
            -> IO String
getCaption1 =
  propertyGet "Caption"
              []
              outString

setCaption1 :: String
            -> IMenuBar a0
            -> IO ()
setCaption1 rHS =
  propertySet "Caption"
              [inString rHS]

delete11 :: IMenuBar a0
         -> IO ()
delete11 =
  method0 "Delete"
          []

getIndex3 :: IMenuBar a0
          -> IO Int32
getIndex3 =
  propertyGet "Index"
              []
              outInt32

getMenus :: IMenuBar a0
         -> IO (Menus ())
getMenus =
  propertyGet "Menus"
              []
              outIUnknown

reset1 :: IMenuBar a0
       -> IO ()
reset1 =
  method0 "Reset"
          []

-- --------------------------------------------------
-- 
-- interface IMenus
-- 
-- --------------------------------------------------
data IMenus_ a = IMenus__ 
type IMenus a = IDispatch (IMenus_ a)
iidIMenus :: IID (IMenus ())
iidIMenus = mkIID "{00020865-0001-0000-C000-000000000046}"

getApplication29 :: (Variant a1)
                 => IMenus a0
                 -> IO a1
getApplication29 =
  propertyGet "Application"
              []
              outVariant

getCreator29 :: IMenus a0
             -> IO XlCreator
getCreator29 =
  propertyGet "Creator"
              []
              outEnum

getParent44 :: IMenus a0
            -> IO (IDispatch ())
getParent44 =
  propertyGet "Parent"
              []
              outIDispatch

add9 :: (Variant a1, Variant a2)
     => String
     -> a1
     -> a2
     -> IMenus a0
     -> IO (Menu ())
add9 caption before restore =
  function1 "Add"
            [ inString caption
            , inVariant before
            , inVariant restore
            ]
            outIUnknown

getCount17 :: IMenus a0
           -> IO Int32
getCount17 =
  propertyGet "Count"
              []
              outInt32

getDefault15 :: a1
             -> IMenus a0
             -> IO (Menu ())
getDefault15 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem14 :: a1
          -> IMenus a0
          -> IO (Menu ())
getItem14 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum16 :: IMenus a0
             -> IO (IUnknown ())
getNewEnum16 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IMenu
-- 
-- --------------------------------------------------
data IMenu_ a = IMenu__ 
type IMenu a = IDispatch (IMenu_ a)
iidIMenu :: IID (IMenu ())
iidIMenu = mkIID "{00020866-0001-0000-C000-000000000046}"

getApplication30 :: (Variant a1)
                 => IMenu a0
                 -> IO a1
getApplication30 =
  propertyGet "Application"
              []
              outVariant

getCreator30 :: IMenu a0
             -> IO XlCreator
getCreator30 =
  propertyGet "Creator"
              []
              outEnum

getParent45 :: IMenu a0
            -> IO (IDispatch ())
getParent45 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption2 :: IMenu a0
            -> IO String
getCaption2 =
  propertyGet "Caption"
              []
              outString

setCaption2 :: String
            -> IMenu a0
            -> IO ()
setCaption2 rHS =
  propertySet "Caption"
              [inString rHS]

delete12 :: IMenu a0
         -> IO ()
delete12 =
  method0 "Delete"
          []

getEnabled0 :: IMenu a0
            -> IO Bool
getEnabled0 =
  propertyGet "Enabled"
              []
              outBool

setEnabled0 :: Bool
            -> IMenu a0
            -> IO ()
setEnabled0 rHS =
  propertySet "Enabled"
              [inBool rHS]

getIndex4 :: IMenu a0
          -> IO Int32
getIndex4 =
  propertyGet "Index"
              []
              outInt32

getMenuItems :: IMenu a0
             -> IO (MenuItems ())
getMenuItems =
  propertyGet "MenuItems"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IMenuItems
-- 
-- --------------------------------------------------
data IMenuItems_ a = IMenuItems__ 
type IMenuItems a = IDispatch (IMenuItems_ a)
iidIMenuItems :: IID (IMenuItems ())
iidIMenuItems = mkIID "{00020867-0001-0000-C000-000000000046}"

getApplication31 :: (Variant a1)
                 => IMenuItems a0
                 -> IO a1
getApplication31 =
  propertyGet "Application"
              []
              outVariant

getCreator31 :: IMenuItems a0
             -> IO XlCreator
getCreator31 =
  propertyGet "Creator"
              []
              outEnum

getParent46 :: IMenuItems a0
            -> IO (IDispatch ())
getParent46 =
  propertyGet "Parent"
              []
              outIDispatch

add10 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
      => String
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> IMenuItems a0
      -> IO (MenuItem ())
add10 caption onAction shortcutKey before restore statusBar helpFile helpContextID =
  function1 "Add"
            [ inString caption
            , inVariant onAction
            , inVariant shortcutKey
            , inVariant before
            , inVariant restore
            , inVariant statusBar
            , inVariant helpFile
            , inVariant helpContextID
            ]
            outIUnknown

addMenu :: (Variant a1, Variant a2)
        => String
        -> a1
        -> a2
        -> IMenuItems a0
        -> IO (Menu ())
addMenu caption before restore =
  function1 "AddMenu"
            [ inString caption
            , inVariant before
            , inVariant restore
            ]
            outIUnknown

getCount18 :: IMenuItems a0
           -> IO Int32
getCount18 =
  propertyGet "Count"
              []
              outInt32

getDefault16 :: a1
             -> IMenuItems a0
             -> IO (IDispatch ())
getDefault16 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

getItem15 :: a1
          -> IMenuItems a0
          -> IO (IDispatch ())
getItem15 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

getNewEnum17 :: IMenuItems a0
             -> IO (IUnknown ())
getNewEnum17 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IMenuItem
-- 
-- --------------------------------------------------
data IMenuItem_ a = IMenuItem__ 
type IMenuItem a = IDispatch (IMenuItem_ a)
iidIMenuItem :: IID (IMenuItem ())
iidIMenuItem = mkIID "{00020868-0001-0000-C000-000000000046}"

getApplication32 :: (Variant a1)
                 => IMenuItem a0
                 -> IO a1
getApplication32 =
  propertyGet "Application"
              []
              outVariant

getCreator32 :: IMenuItem a0
             -> IO XlCreator
getCreator32 =
  propertyGet "Creator"
              []
              outEnum

getParent47 :: IMenuItem a0
            -> IO (IDispatch ())
getParent47 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption3 :: IMenuItem a0
            -> IO String
getCaption3 =
  propertyGet "Caption"
              []
              outString

setCaption3 :: String
            -> IMenuItem a0
            -> IO ()
setCaption3 rHS =
  propertySet "Caption"
              [inString rHS]

getChecked :: IMenuItem a0
           -> IO Bool
getChecked =
  propertyGet "Checked"
              []
              outBool

setChecked :: Bool
           -> IMenuItem a0
           -> IO ()
setChecked rHS =
  propertySet "Checked"
              [inBool rHS]

delete13 :: IMenuItem a0
         -> IO ()
delete13 =
  method0 "Delete"
          []

getEnabled1 :: IMenuItem a0
            -> IO Bool
getEnabled1 =
  propertyGet "Enabled"
              []
              outBool

setEnabled1 :: Bool
            -> IMenuItem a0
            -> IO ()
setEnabled1 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHelpContextID0 :: IMenuItem a0
                  -> IO Int32
getHelpContextID0 =
  propertyGet "HelpContextID"
              []
              outInt32

setHelpContextID0 :: Int32
                  -> IMenuItem a0
                  -> IO ()
setHelpContextID0 rHS =
  propertySet "HelpContextID"
              [inInt32 rHS]

getHelpFile0 :: IMenuItem a0
             -> IO String
getHelpFile0 =
  propertyGet "HelpFile"
              []
              outString

setHelpFile0 :: String
             -> IMenuItem a0
             -> IO ()
setHelpFile0 rHS =
  propertySet "HelpFile"
              [inString rHS]

getIndex5 :: IMenuItem a0
          -> IO Int32
getIndex5 =
  propertyGet "Index"
              []
              outInt32

getOnAction0 :: IMenuItem a0
             -> IO String
getOnAction0 =
  propertyGet "OnAction"
              []
              outString

setOnAction0 :: String
             -> IMenuItem a0
             -> IO ()
setOnAction0 rHS =
  propertySet "OnAction"
              [inString rHS]

getStatusBar1 :: IMenuItem a0
              -> IO String
getStatusBar1 =
  propertyGet "StatusBar"
              []
              outString

setStatusBar1 :: String
              -> IMenuItem a0
              -> IO ()
setStatusBar1 rHS =
  propertySet "StatusBar"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface ICharts
-- 
-- --------------------------------------------------
data ICharts_ a = ICharts__ 
type ICharts a = IDispatch (ICharts_ a)
iidICharts :: IID (ICharts ())
iidICharts = mkIID "{0002086D-0001-0000-C000-000000000046}"

getApplication33 :: (Variant a1)
                 => ICharts a0
                 -> IO a1
getApplication33 =
  propertyGet "Application"
              []
              outVariant

getCreator33 :: ICharts a0
             -> IO XlCreator
getCreator33 =
  propertyGet "Creator"
              []
              outEnum

getParent48 :: ICharts a0
            -> IO (IDispatch ())
getParent48 =
  propertyGet "Parent"
              []
              outIDispatch

add11 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => a2
      -> a3
      -> a4
      -> ICharts a0
      -> IO a1
add11 before after count0 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count0
            ]
            outVariant

copy4 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> ICharts a0
      -> IO ()
copy4 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getCount19 :: ICharts a0
           -> IO Int32
getCount19 =
  propertyGet "Count"
              []
              outInt32

delete14 :: Int32
         -> ICharts a0
         -> IO ()
delete14 lcid =
  method0 "Delete"
          [inInt32 lcid]

dummy70 :: ICharts a0
        -> IO ()
dummy70 =
  method0 "_Dummy7"
          []

getItem16 :: a1
          -> ICharts a0
          -> IO (IDispatch ())
getItem16 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

move3 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> ICharts a0
      -> IO ()
move3 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getNewEnum18 :: ICharts a0
             -> IO (IUnknown ())
getNewEnum18 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut16 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> ICharts a0
           -> IO ()
printOut16 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview5 :: (Variant a1)
              => a1
              -> Int32
              -> ICharts a0
              -> IO ()
printPreview5 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

select4 :: (Variant a1)
        => a1
        -> Int32
        -> ICharts a0
        -> IO ()
select4 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

getHPageBreaks1 :: ICharts a0
                -> IO (HPageBreaks ())
getHPageBreaks1 =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks1 :: ICharts a0
                -> IO (VPageBreaks ())
getVPageBreaks1 =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getVisible9 :: (Variant a1)
            => Int32
            -> ICharts a0
            -> IO a1
getVisible9 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outVariant

setVisible9 :: Int32
            -> a1
            -> ICharts a0
            -> IO ()
setVisible9 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inVariant rHS
              ]

getDefault17 :: a1
             -> ICharts a0
             -> IO (IDispatch ())
getDefault17 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

printOut17 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> ICharts a0
           -> IO ()
printOut17 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

printOut18 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> ICharts a0
           -> IO ()
printOut18 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

-- --------------------------------------------------
-- 
-- interface IDrawingObjects
-- 
-- --------------------------------------------------
data IDrawingObjects_ a = IDrawingObjects__ 
type IDrawingObjects a = IDispatch (IDrawingObjects_ a)
iidIDrawingObjects :: IID (IDrawingObjects ())
iidIDrawingObjects = mkIID "{0002086F-0001-0000-C000-000000000046}"

getApplication34 :: (Variant a1)
                 => IDrawingObjects a0
                 -> IO a1
getApplication34 =
  propertyGet "Application"
              []
              outVariant

getCreator34 :: IDrawingObjects a0
             -> IO XlCreator
getCreator34 =
  propertyGet "Creator"
              []
              outEnum

getParent49 :: IDrawingObjects a0
            -> IO (IDispatch ())
getParent49 =
  propertyGet "Parent"
              []
              outIDispatch

dummy30 :: IDrawingObjects a0
        -> IO ()
dummy30 =
  method0 "_Dummy3"
          []

bringToFront :: (Variant a1)
             => IDrawingObjects a0
             -> IO a1
bringToFront =
  function1 "BringToFront"
            []
            outVariant

copy5 :: (Variant a1)
      => IDrawingObjects a0
      -> IO a1
copy5 =
  function1 "Copy"
            []
            outVariant

copyPicture1 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IDrawingObjects a0
             -> IO a1
copyPicture1 appearance format =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format
            ]
            outVariant

cut0 :: (Variant a1)
     => IDrawingObjects a0
     -> IO a1
cut0 =
  function1 "Cut"
            []
            outVariant

delete15 :: (Variant a1)
         => IDrawingObjects a0
         -> IO a1
delete15 =
  function1 "Delete"
            []
            outVariant

duplicate :: IDrawingObjects a0
          -> IO (IDispatch ())
duplicate =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled2 :: IDrawingObjects a0
            -> IO Bool
getEnabled2 =
  propertyGet "Enabled"
              []
              outBool

setEnabled2 :: Bool
            -> IDrawingObjects a0
            -> IO ()
setEnabled2 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight3 :: IDrawingObjects a0
           -> IO Double
getHeight3 =
  propertyGet "Height"
              []
              outDouble

setHeight2 :: Double
           -> IDrawingObjects a0
           -> IO ()
setHeight2 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy120 :: IDrawingObjects a0
         -> IO ()
dummy120 =
  method0 "_Dummy12"
          []

getLeft3 :: IDrawingObjects a0
         -> IO Double
getLeft3 =
  propertyGet "Left"
              []
              outDouble

setLeft2 :: Double
         -> IDrawingObjects a0
         -> IO ()
setLeft2 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked1 :: IDrawingObjects a0
           -> IO Bool
getLocked1 =
  propertyGet "Locked"
              []
              outBool

setLocked1 :: Bool
           -> IDrawingObjects a0
           -> IO ()
setLocked1 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy15 :: IDrawingObjects a0
        -> IO ()
dummy15 =
  method0 "_Dummy15"
          []

getOnAction1 :: IDrawingObjects a0
             -> IO String
getOnAction1 =
  propertyGet "OnAction"
              []
              outString

setOnAction1 :: String
             -> IDrawingObjects a0
             -> IO ()
setOnAction1 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement :: (Variant a1)
             => IDrawingObjects a0
             -> IO a1
getPlacement =
  propertyGet "Placement"
              []
              outVariant

setPlacement :: a1
             -> IDrawingObjects a0
             -> IO ()
setPlacement rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject :: IDrawingObjects a0
               -> IO Bool
getPrintObject =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject :: Bool
               -> IDrawingObjects a0
               -> IO ()
setPrintObject rHS =
  propertySet "PrintObject"
              [inBool rHS]

select5 :: (Variant a1, Variant a2)
        => a2
        -> IDrawingObjects a0
        -> IO a1
select5 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack :: (Variant a1)
           => IDrawingObjects a0
           -> IO a1
sendToBack =
  function1 "SendToBack"
            []
            outVariant

getTop3 :: IDrawingObjects a0
        -> IO Double
getTop3 =
  propertyGet "Top"
              []
              outDouble

setTop2 :: Double
        -> IDrawingObjects a0
        -> IO ()
setTop2 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy22 :: IDrawingObjects a0
        -> IO ()
dummy22 =
  method0 "_Dummy22"
          []

getVisible10 :: IDrawingObjects a0
             -> IO Bool
getVisible10 =
  propertyGet "Visible"
              []
              outBool

setVisible10 :: Bool
             -> IDrawingObjects a0
             -> IO ()
setVisible10 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth4 :: IDrawingObjects a0
          -> IO Double
getWidth4 =
  propertyGet "Width"
              []
              outDouble

setWidth3 :: Double
          -> IDrawingObjects a0
          -> IO ()
setWidth3 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder :: IDrawingObjects a0
          -> IO Int32
getZOrder =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange :: IDrawingObjects a0
              -> IO (ShapeRange ())
getShapeRange =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAccelerator :: (Variant a1)
               => IDrawingObjects a0
               -> IO a1
getAccelerator =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator :: a1
               -> IDrawingObjects a0
               -> IO ()
setAccelerator rHS =
  propertySet "Accelerator"
              [inVariant rHS]

dummy28 :: IDrawingObjects a0
        -> IO ()
dummy28 =
  method0 "_Dummy28"
          []

getAddIndent1 :: IDrawingObjects a0
              -> IO Bool
getAddIndent1 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent1 :: Bool
              -> IDrawingObjects a0
              -> IO ()
setAddIndent1 rHS =
  propertySet "AddIndent"
              [inBool rHS]

addItem :: (Variant a1, Variant a3)
        => a2
        -> a3
        -> IDrawingObjects a0
        -> IO a1
addItem text0 index0 =
  function1 "AddItem"
            [ inVariant text0
            , inVariant index0
            ]
            outVariant

getArrowHeadLength :: (Variant a1)
                   => IDrawingObjects a0
                   -> IO a1
getArrowHeadLength =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength :: a1
                   -> IDrawingObjects a0
                   -> IO ()
setArrowHeadLength rHS =
  propertySet "ArrowHeadLength"
              [inVariant rHS]

getArrowHeadStyle :: (Variant a1)
                  => IDrawingObjects a0
                  -> IO a1
getArrowHeadStyle =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle :: a1
                  -> IDrawingObjects a0
                  -> IO ()
setArrowHeadStyle rHS =
  propertySet "ArrowHeadStyle"
              [inVariant rHS]

getArrowHeadWidth :: (Variant a1)
                  => IDrawingObjects a0
                  -> IO a1
getArrowHeadWidth =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth :: a1
                  -> IDrawingObjects a0
                  -> IO ()
setArrowHeadWidth rHS =
  propertySet "ArrowHeadWidth"
              [inVariant rHS]

getAutoSize0 :: IDrawingObjects a0
             -> IO Bool
getAutoSize0 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize0 :: Bool
             -> IDrawingObjects a0
             -> IO ()
setAutoSize0 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getBorder0 :: IDrawingObjects a0
           -> IO (Border ())
getBorder0 =
  propertyGet "Border"
              []
              outIUnknown

getCancelButton :: IDrawingObjects a0
                -> IO Bool
getCancelButton =
  propertyGet "CancelButton"
              []
              outBool

setCancelButton :: Bool
                -> IDrawingObjects a0
                -> IO ()
setCancelButton rHS =
  propertySet "CancelButton"
              [inBool rHS]

getCaption4 :: IDrawingObjects a0
            -> IO String
getCaption4 =
  propertyGet "Caption"
              []
              outString

setCaption4 :: String
            -> IDrawingObjects a0
            -> IO ()
setCaption4 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters0 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IDrawingObjects a0
               -> IO (Characters ())
getCharacters0 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> IDrawingObjects a0
               -> IO a1
checkSpelling4 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getDefault18 :: IDrawingObjects a0
             -> IO Int32
getDefault18 =
  propertyGet "_Default"
              []
              outInt32

setDefault0 :: Int32
            -> IDrawingObjects a0
            -> IO ()
setDefault0 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDefaultButton :: IDrawingObjects a0
                 -> IO Bool
getDefaultButton =
  propertyGet "DefaultButton"
              []
              outBool

setDefaultButton :: Bool
                 -> IDrawingObjects a0
                 -> IO ()
setDefaultButton rHS =
  propertySet "DefaultButton"
              [inBool rHS]

getDismissButton :: IDrawingObjects a0
                 -> IO Bool
getDismissButton =
  propertyGet "DismissButton"
              []
              outBool

setDismissButton :: Bool
                 -> IDrawingObjects a0
                 -> IO ()
setDismissButton rHS =
  propertySet "DismissButton"
              [inBool rHS]

getDisplay3DShading :: IDrawingObjects a0
                    -> IO Bool
getDisplay3DShading =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading :: Bool
                    -> IDrawingObjects a0
                    -> IO ()
setDisplay3DShading rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getDisplayVerticalScrollBar0 :: IDrawingObjects a0
                             -> IO Bool
getDisplayVerticalScrollBar0 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar0 :: Bool
                             -> IDrawingObjects a0
                             -> IO ()
setDisplayVerticalScrollBar0 rHS =
  propertySet "DisplayVerticalScrollBar"
              [inBool rHS]

getDropDownLines :: IDrawingObjects a0
                 -> IO Int32
getDropDownLines =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines :: Int32
                 -> IDrawingObjects a0
                 -> IO ()
setDropDownLines rHS =
  propertySet "DropDownLines"
              [inInt32 rHS]

getFont1 :: IDrawingObjects a0
         -> IO (Font ())
getFont1 =
  propertyGet "Font"
              []
              outIUnknown

dummy47 :: IDrawingObjects a0
        -> IO ()
dummy47 =
  method0 "_Dummy47"
          []

getHelpButton :: IDrawingObjects a0
              -> IO Bool
getHelpButton =
  propertyGet "HelpButton"
              []
              outBool

setHelpButton :: Bool
              -> IDrawingObjects a0
              -> IO ()
setHelpButton rHS =
  propertySet "HelpButton"
              [inBool rHS]

getHorizontalAlignment1 :: (Variant a1)
                        => IDrawingObjects a0
                        -> IO a1
getHorizontalAlignment1 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment1 :: a1
                        -> IDrawingObjects a0
                        -> IO ()
setHorizontalAlignment1 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getInputType :: IDrawingObjects a0
             -> IO Int32
getInputType =
  propertyGet "InputType"
              []
              outInt32

setInputType :: Int32
             -> IDrawingObjects a0
             -> IO ()
setInputType rHS =
  propertySet "InputType"
              [inInt32 rHS]

getInterior1 :: IDrawingObjects a0
             -> IO (Interior ())
getInterior1 =
  propertyGet "Interior"
              []
              outIUnknown

getLargeChange :: IDrawingObjects a0
               -> IO Int32
getLargeChange =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange :: Int32
               -> IDrawingObjects a0
               -> IO ()
setLargeChange rHS =
  propertySet "LargeChange"
              [inInt32 rHS]

getLinkedCell :: IDrawingObjects a0
              -> IO String
getLinkedCell =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell :: String
              -> IDrawingObjects a0
              -> IO ()
setLinkedCell rHS =
  propertySet "LinkedCell"
              [inString rHS]

dummy54 :: IDrawingObjects a0
        -> IO ()
dummy54 =
  method0 "_Dummy54"
          []

list :: (Variant a1, Variant a2)
     => a2
     -> IDrawingObjects a0
     -> IO a1
list index0 =
  function1 "List"
            [inVariant index0]
            outVariant

dummy56 :: IDrawingObjects a0
        -> IO ()
dummy56 =
  method0 "_Dummy56"
          []

getListFillRange :: IDrawingObjects a0
                 -> IO String
getListFillRange =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange :: String
                 -> IDrawingObjects a0
                 -> IO ()
setListFillRange rHS =
  propertySet "ListFillRange"
              [inString rHS]

getListIndex :: IDrawingObjects a0
             -> IO Int32
getListIndex =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex :: Int32
             -> IDrawingObjects a0
             -> IO ()
setListIndex rHS =
  propertySet "ListIndex"
              [inInt32 rHS]

getLockedText :: IDrawingObjects a0
              -> IO Bool
getLockedText =
  propertyGet "LockedText"
              []
              outBool

setLockedText :: Bool
              -> IDrawingObjects a0
              -> IO ()
setLockedText rHS =
  propertySet "LockedText"
              [inBool rHS]

getMax :: IDrawingObjects a0
       -> IO Int32
getMax =
  propertyGet "Max"
              []
              outInt32

setMax :: Int32
       -> IDrawingObjects a0
       -> IO ()
setMax rHS =
  propertySet "Max"
              [inInt32 rHS]

getMin :: IDrawingObjects a0
       -> IO Int32
getMin =
  propertyGet "Min"
              []
              outInt32

setMin :: Int32
       -> IDrawingObjects a0
       -> IO ()
setMin rHS =
  propertySet "Min"
              [inInt32 rHS]

getMultiLine :: IDrawingObjects a0
             -> IO Bool
getMultiLine =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine :: Bool
             -> IDrawingObjects a0
             -> IO ()
setMultiLine rHS =
  propertySet "MultiLine"
              [inBool rHS]

getMultiSelect :: IDrawingObjects a0
               -> IO Bool
getMultiSelect =
  propertyGet "MultiSelect"
              []
              outBool

setMultiSelect :: Bool
               -> IDrawingObjects a0
               -> IO ()
setMultiSelect rHS =
  propertySet "MultiSelect"
              [inBool rHS]

getOrientation2 :: (Variant a1)
                => IDrawingObjects a0
                -> IO a1
getOrientation2 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation2 :: a1
                -> IDrawingObjects a0
                -> IO ()
setOrientation2 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getPhoneticAccelerator :: (Variant a1)
                       => IDrawingObjects a0
                       -> IO a1
getPhoneticAccelerator =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator :: a1
                       -> IDrawingObjects a0
                       -> IO ()
setPhoneticAccelerator rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

removeAllItems :: (Variant a1)
               => IDrawingObjects a0
               -> IO a1
removeAllItems =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem :: (Variant a1, Variant a2)
           => Int32
           -> a2
           -> IDrawingObjects a0
           -> IO a1
removeItem index0 count0 =
  function1 "RemoveItem"
            [ inInt32 index0
            , inVariant count0
            ]
            outVariant

reshape :: (Variant a1, Variant a3, Variant a4)
        => Int32
        -> a2
        -> a3
        -> a4
        -> IDrawingObjects a0
        -> IO a1
reshape vertex insert1 left top =
  function1 "Reshape"
            [ inInt32 vertex
            , inVariant insert1
            , inVariant left
            , inVariant top
            ]
            outVariant

getRoundedCorners :: IDrawingObjects a0
                  -> IO Bool
getRoundedCorners =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners :: Bool
                  -> IDrawingObjects a0
                  -> IO ()
setRoundedCorners rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

selected :: (Variant a1, Variant a2)
         => a2
         -> IDrawingObjects a0
         -> IO a1
selected index0 =
  function1 "Selected"
            [inVariant index0]
            outVariant

getShadow0 :: IDrawingObjects a0
           -> IO Bool
getShadow0 =
  propertyGet "Shadow"
              []
              outBool

setShadow0 :: Bool
           -> IDrawingObjects a0
           -> IO ()
setShadow0 rHS =
  propertySet "Shadow"
              [inBool rHS]

getSmallChange :: IDrawingObjects a0
               -> IO Int32
getSmallChange =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange :: Int32
               -> IDrawingObjects a0
               -> IO ()
setSmallChange rHS =
  propertySet "SmallChange"
              [inInt32 rHS]

getText1 :: IDrawingObjects a0
         -> IO String
getText1 =
  propertyGet "Text"
              []
              outString

setText0 :: String
         -> IDrawingObjects a0
         -> IO ()
setText0 rHS =
  propertySet "Text"
              [inString rHS]

ungroup0 :: IDrawingObjects a0
         -> IO (IDispatch ())
ungroup0 =
  function1 "Ungroup"
            []
            outIDispatch

getValue4 :: IDrawingObjects a0
          -> IO Int32
getValue4 =
  propertyGet "Value"
              []
              outInt32

setValue1 :: Int32
          -> IDrawingObjects a0
          -> IO ()
setValue1 rHS =
  propertySet "Value"
              [inInt32 rHS]

getVerticalAlignment1 :: (Variant a1)
                      => IDrawingObjects a0
                      -> IO a1
getVerticalAlignment1 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment1 :: a1
                      -> IDrawingObjects a0
                      -> IO ()
setVerticalAlignment1 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

vertices :: (Variant a1, Variant a2, Variant a3)
         => a2
         -> a3
         -> IDrawingObjects a0
         -> IO a1
vertices index1 index2 =
  function1 "Vertices"
            [ inVariant index1
            , inVariant index2
            ]
            outVariant

getReadingOrder1 :: IDrawingObjects a0
                 -> IO Int32
getReadingOrder1 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder1 :: Int32
                 -> IDrawingObjects a0
                 -> IO ()
setReadingOrder1 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getCount20 :: IDrawingObjects a0
           -> IO Int32
getCount20 =
  propertyGet "Count"
              []
              outInt32

item2 :: a1
      -> IDrawingObjects a0
      -> IO (IDispatch ())
item2 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

group0 :: IDrawingObjects a0
       -> IO (GroupObject ())
group0 =
  function1 "Group"
            []
            outIUnknown

linkCombo :: (Variant a1, Variant a2)
          => a2
          -> IDrawingObjects a0
          -> IO a1
linkCombo link =
  function1 "LinkCombo"
            [inVariant link]
            outVariant

newEnum :: IDrawingObjects a0
        -> IO (IUnknown ())
newEnum =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotCache
-- 
-- --------------------------------------------------
data IPivotCache_ a = IPivotCache__ 
type IPivotCache a = IDispatch (IPivotCache_ a)
iidIPivotCache :: IID (IPivotCache ())
iidIPivotCache = mkIID "{0002441C-0001-0000-C000-000000000046}"

getApplication35 :: (Variant a1)
                 => IPivotCache a0
                 -> IO a1
getApplication35 =
  propertyGet "Application"
              []
              outVariant

getCreator35 :: IPivotCache a0
             -> IO XlCreator
getCreator35 =
  propertyGet "Creator"
              []
              outEnum

getParent50 :: IPivotCache a0
            -> IO (IDispatch ())
getParent50 =
  propertyGet "Parent"
              []
              outIDispatch

getBackgroundQuery :: IPivotCache a0
                   -> IO Bool
getBackgroundQuery =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery :: Bool
                   -> IPivotCache a0
                   -> IO ()
setBackgroundQuery rHS =
  propertySet "BackgroundQuery"
              [inBool rHS]

getConnection :: (Variant a1)
              => IPivotCache a0
              -> IO a1
getConnection =
  propertyGet "Connection"
              []
              outVariant

setConnection :: a1
              -> IPivotCache a0
              -> IO ()
setConnection rHS =
  propertySet "Connection"
              [inVariant rHS]

getEnableRefresh :: IPivotCache a0
                 -> IO Bool
getEnableRefresh =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh :: Bool
                 -> IPivotCache a0
                 -> IO ()
setEnableRefresh rHS =
  propertySet "EnableRefresh"
              [inBool rHS]

getIndex6 :: IPivotCache a0
          -> IO Int32
getIndex6 =
  propertyGet "Index"
              []
              outInt32

getMemoryUsed0 :: IPivotCache a0
               -> IO Int32
getMemoryUsed0 =
  propertyGet "MemoryUsed"
              []
              outInt32

getOptimizeCache :: IPivotCache a0
                 -> IO Bool
getOptimizeCache =
  propertyGet "OptimizeCache"
              []
              outBool

setOptimizeCache :: Bool
                 -> IPivotCache a0
                 -> IO ()
setOptimizeCache rHS =
  propertySet "OptimizeCache"
              [inBool rHS]

getRecordCount :: IPivotCache a0
               -> IO Int32
getRecordCount =
  propertyGet "RecordCount"
              []
              outInt32

refresh0 :: IPivotCache a0
         -> IO ()
refresh0 =
  method0 "Refresh"
          []

getRefreshDate :: IPivotCache a0
               -> IO Int64
getRefreshDate =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshName :: IPivotCache a0
               -> IO String
getRefreshName =
  propertyGet "RefreshName"
              []
              outString

getRefreshOnFileOpen :: IPivotCache a0
                     -> IO Bool
getRefreshOnFileOpen =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen :: Bool
                     -> IPivotCache a0
                     -> IO ()
setRefreshOnFileOpen rHS =
  propertySet "RefreshOnFileOpen"
              [inBool rHS]

getSql :: (Variant a1)
       => IPivotCache a0
       -> IO a1
getSql =
  propertyGet "Sql"
              []
              outVariant

setSql :: a1
       -> IPivotCache a0
       -> IO ()
setSql rHS =
  propertySet "Sql"
              [inVariant rHS]

getSavePassword :: IPivotCache a0
                -> IO Bool
getSavePassword =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword :: Bool
                -> IPivotCache a0
                -> IO ()
setSavePassword rHS =
  propertySet "SavePassword"
              [inBool rHS]

getSourceData :: (Variant a1)
              => IPivotCache a0
              -> IO a1
getSourceData =
  propertyGet "SourceData"
              []
              outVariant

setSourceData0 :: a1
               -> IPivotCache a0
               -> IO ()
setSourceData0 rHS =
  propertySet "SourceData"
              [inVariant rHS]

getCommandText :: (Variant a1)
               => IPivotCache a0
               -> IO a1
getCommandText =
  propertyGet "CommandText"
              []
              outVariant

setCommandText :: a1
               -> IPivotCache a0
               -> IO ()
setCommandText rHS =
  propertySet "CommandText"
              [inVariant rHS]

getCommandType :: IPivotCache a0
               -> IO XlCmdType
getCommandType =
  propertyGet "CommandType"
              []
              outEnum

setCommandType :: XlCmdType
               -> IPivotCache a0
               -> IO ()
setCommandType rHS =
  propertySet "CommandType"
              [inEnum rHS]

getQueryType :: IPivotCache a0
             -> IO XlQueryType
getQueryType =
  propertyGet "QueryType"
              []
              outEnum

getMaintainConnection :: IPivotCache a0
                      -> IO Bool
getMaintainConnection =
  propertyGet "MaintainConnection"
              []
              outBool

setMaintainConnection :: Bool
                      -> IPivotCache a0
                      -> IO ()
setMaintainConnection rHS =
  propertySet "MaintainConnection"
              [inBool rHS]

getRefreshPeriod :: IPivotCache a0
                 -> IO Int32
getRefreshPeriod =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod :: Int32
                 -> IPivotCache a0
                 -> IO ()
setRefreshPeriod rHS =
  propertySet "RefreshPeriod"
              [inInt32 rHS]

getRecordset :: IPivotCache a0
             -> IO (IDispatch ())
getRecordset =
  propertyGet "Recordset"
              []
              outIDispatch

setRecordset :: IDispatch a1
             -> IPivotCache a0
             -> IO ()
setRecordset rHS =
  propertySet "Recordset"
              [inIDispatch rHS]

resetTimer :: IPivotCache a0
           -> IO ()
resetTimer =
  method0 "ResetTimer"
          []

getLocalConnection :: (Variant a1)
                   => IPivotCache a0
                   -> IO a1
getLocalConnection =
  propertyGet "LocalConnection"
              []
              outVariant

setLocalConnection :: a1
                   -> IPivotCache a0
                   -> IO ()
setLocalConnection rHS =
  propertySet "LocalConnection"
              [inVariant rHS]

createPivotTable :: (Variant a2, Variant a3, Variant a4)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> IPivotCache a0
                 -> IO (PivotTable ())
createPivotTable tableDestination tableName readData defaultVersion =
  function1 "CreatePivotTable"
            [ inVariant tableDestination
            , inVariant tableName
            , inVariant readData
            , inVariant defaultVersion
            ]
            outIUnknown

getUseLocalConnection :: IPivotCache a0
                      -> IO Bool
getUseLocalConnection =
  propertyGet "UseLocalConnection"
              []
              outBool

setUseLocalConnection :: Bool
                      -> IPivotCache a0
                      -> IO ()
setUseLocalConnection rHS =
  propertySet "UseLocalConnection"
              [inBool rHS]

getADOConnection :: IPivotCache a0
                 -> IO (IDispatch ())
getADOConnection =
  propertyGet "ADOConnection"
              []
              outIDispatch

getIsConnected :: IPivotCache a0
               -> IO Bool
getIsConnected =
  propertyGet "IsConnected"
              []
              outBool

makeConnection :: IPivotCache a0
               -> IO ()
makeConnection =
  method0 "MakeConnection"
          []

getOLAP :: IPivotCache a0
        -> IO Bool
getOLAP =
  propertyGet "OLAP"
              []
              outBool

getSourceType :: IPivotCache a0
              -> IO XlPivotTableSourceType
getSourceType =
  propertyGet "SourceType"
              []
              outEnum

getMissingItemsLimit :: IPivotCache a0
                     -> IO XlPivotTableMissingItems
getMissingItemsLimit =
  propertyGet "MissingItemsLimit"
              []
              outEnum

setMissingItemsLimit :: XlPivotTableMissingItems
                     -> IPivotCache a0
                     -> IO ()
setMissingItemsLimit rHS =
  propertySet "MissingItemsLimit"
              [inEnum rHS]

getSourceConnectionFile :: IPivotCache a0
                        -> IO String
getSourceConnectionFile =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile :: String
                        -> IPivotCache a0
                        -> IO ()
setSourceConnectionFile rHS =
  propertySet "SourceConnectionFile"
              [inString rHS]

getSourceDataFile :: IPivotCache a0
                  -> IO String
getSourceDataFile =
  propertyGet "SourceDataFile"
              []
              outString

getRobustConnect :: IPivotCache a0
                 -> IO XlRobustConnect
getRobustConnect =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect :: XlRobustConnect
                 -> IPivotCache a0
                 -> IO ()
setRobustConnect rHS =
  propertySet "RobustConnect"
              [inEnum rHS]

saveAsODC :: (Variant a1, Variant a2)
          => String
          -> a1
          -> a2
          -> IPivotCache a0
          -> IO ()
saveAsODC oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getWorkbookConnection :: IPivotCache a0
                      -> IO (WorkbookConnection ())
getWorkbookConnection =
  propertyGet "WorkbookConnection"
              []
              outIUnknown

getVersion0 :: IPivotCache a0
            -> IO XlPivotTableVersionList
getVersion0 =
  propertyGet "Version"
              []
              outEnum

getUpgradeOnRefresh :: IPivotCache a0
                    -> IO Bool
getUpgradeOnRefresh =
  propertyGet "UpgradeOnRefresh"
              []
              outBool

setUpgradeOnRefresh :: Bool
                    -> IPivotCache a0
                    -> IO ()
setUpgradeOnRefresh rHS =
  propertySet "UpgradeOnRefresh"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IPivotCaches
-- 
-- --------------------------------------------------
data IPivotCaches_ a = IPivotCaches__ 
type IPivotCaches a = IDispatch (IPivotCaches_ a)
iidIPivotCaches :: IID (IPivotCaches ())
iidIPivotCaches = mkIID "{0002441D-0001-0000-C000-000000000046}"

getApplication36 :: (Variant a1)
                 => IPivotCaches a0
                 -> IO a1
getApplication36 =
  propertyGet "Application"
              []
              outVariant

getCreator36 :: IPivotCaches a0
             -> IO XlCreator
getCreator36 =
  propertyGet "Creator"
              []
              outEnum

getParent51 :: IPivotCaches a0
            -> IO (IDispatch ())
getParent51 =
  propertyGet "Parent"
              []
              outIDispatch

getCount21 :: IPivotCaches a0
           -> IO Int32
getCount21 =
  propertyGet "Count"
              []
              outInt32

item3 :: a1
      -> IPivotCaches a0
      -> IO (PivotCache ())
item3 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault19 :: a1
             -> IPivotCaches a0
             -> IO (PivotCache ())
getDefault19 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

newEnum0 :: IPivotCaches a0
         -> IO (IUnknown ())
newEnum0 =
  function1 "_NewEnum"
            []
            outIUnknown

add12 :: (Variant a1)
      => XlPivotTableSourceType
      -> a1
      -> IPivotCaches a0
      -> IO (PivotCache ())
add12 sourceType sourceData =
  function1 "Add"
            [ inEnum sourceType
            , inVariant sourceData
            ]
            outIUnknown

create :: (Variant a1, Variant a2)
       => XlPivotTableSourceType
       -> a1
       -> a2
       -> IPivotCaches a0
       -> IO (PivotCache ())
create sourceType sourceData version =
  function1 "Create"
            [ inEnum sourceType
            , inVariant sourceData
            , inVariant version
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotFormula
-- 
-- --------------------------------------------------
data IPivotFormula_ a = IPivotFormula__ 
type IPivotFormula a = IDispatch (IPivotFormula_ a)
iidIPivotFormula :: IID (IPivotFormula ())
iidIPivotFormula = mkIID "{0002441E-0001-0000-C000-000000000046}"

getApplication37 :: (Variant a1)
                 => IPivotFormula a0
                 -> IO a1
getApplication37 =
  propertyGet "Application"
              []
              outVariant

getCreator37 :: IPivotFormula a0
             -> IO XlCreator
getCreator37 =
  propertyGet "Creator"
              []
              outEnum

getParent52 :: IPivotFormula a0
            -> IO (IDispatch ())
getParent52 =
  propertyGet "Parent"
              []
              outIDispatch

delete16 :: IPivotFormula a0
         -> IO ()
delete16 =
  method0 "Delete"
          []

getDefault20 :: IPivotFormula a0
             -> IO String
getDefault20 =
  propertyGet "_Default"
              []
              outString

setDefault1 :: String
            -> IPivotFormula a0
            -> IO ()
setDefault1 rHS =
  propertySet "_Default"
              [inString rHS]

getFormula0 :: IPivotFormula a0
            -> IO String
getFormula0 =
  propertyGet "Formula"
              []
              outString

setFormula0 :: String
            -> IPivotFormula a0
            -> IO ()
setFormula0 rHS =
  propertySet "Formula"
              [inString rHS]

getValue5 :: IPivotFormula a0
          -> IO String
getValue5 =
  propertyGet "Value"
              []
              outString

setValue3 :: String
          -> IPivotFormula a0
          -> IO ()
setValue3 rHS =
  propertySet "Value"
              [inString rHS]

getIndex7 :: IPivotFormula a0
          -> IO Int32
getIndex7 =
  propertyGet "Index"
              []
              outInt32

setIndex :: Int32
         -> IPivotFormula a0
         -> IO ()
setIndex rHS =
  propertySet "Index"
              [inInt32 rHS]

getStandardFormula :: IPivotFormula a0
                   -> IO String
getStandardFormula =
  propertyGet "StandardFormula"
              []
              outString

setStandardFormula :: String
                   -> IPivotFormula a0
                   -> IO ()
setStandardFormula rHS =
  propertySet "StandardFormula"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IPivotFormulas
-- 
-- --------------------------------------------------
data IPivotFormulas_ a = IPivotFormulas__ 
type IPivotFormulas a = IDispatch (IPivotFormulas_ a)
iidIPivotFormulas :: IID (IPivotFormulas ())
iidIPivotFormulas = mkIID "{0002441F-0001-0000-C000-000000000046}"

getApplication38 :: (Variant a1)
                 => IPivotFormulas a0
                 -> IO a1
getApplication38 =
  propertyGet "Application"
              []
              outVariant

getCreator38 :: IPivotFormulas a0
             -> IO XlCreator
getCreator38 =
  propertyGet "Creator"
              []
              outEnum

getParent53 :: IPivotFormulas a0
            -> IO (IDispatch ())
getParent53 =
  propertyGet "Parent"
              []
              outIDispatch

getCount22 :: IPivotFormulas a0
           -> IO Int32
getCount22 =
  propertyGet "Count"
              []
              outInt32

add13 :: String
      -> IPivotFormulas a0
      -> IO (PivotFormula ())
add13 formula =
  function1 "_Add"
            [inString formula]
            outIUnknown

item4 :: a1
      -> IPivotFormulas a0
      -> IO (PivotFormula ())
item4 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault21 :: a1
             -> IPivotFormulas a0
             -> IO (PivotFormula ())
getDefault21 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

newEnum1 :: IPivotFormulas a0
         -> IO (IUnknown ())
newEnum1 =
  function1 "_NewEnum"
            []
            outIUnknown

add14 :: (Variant a1)
      => String
      -> a1
      -> IPivotFormulas a0
      -> IO (PivotFormula ())
add14 formula useStandardFormula =
  function1 "Add"
            [ inString formula
            , inVariant useStandardFormula
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotTable
-- 
-- --------------------------------------------------
data IPivotTable_ a = IPivotTable__ 
type IPivotTable a = IDispatch (IPivotTable_ a)
iidIPivotTable :: IID (IPivotTable ())
iidIPivotTable = mkIID "{00020872-0001-0000-C000-000000000046}"

getApplication39 :: (Variant a1)
                 => IPivotTable a0
                 -> IO a1
getApplication39 =
  propertyGet "Application"
              []
              outVariant

getCreator39 :: IPivotTable a0
             -> IO XlCreator
getCreator39 =
  propertyGet "Creator"
              []
              outEnum

getParent54 :: IPivotTable a0
            -> IO (IDispatch ())
getParent54 =
  propertyGet "Parent"
              []
              outIDispatch

addFields :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
          => a2
          -> a3
          -> a4
          -> a5
          -> IPivotTable a0
          -> IO a1
addFields rowFields columnFields pageFields addToTable =
  function1 "AddFields"
            [ inVariant rowFields
            , inVariant columnFields
            , inVariant pageFields
            , inVariant addToTable
            ]
            outVariant

getColumnFields :: (Variant a1)
                => a1
                -> IPivotTable a0
                -> IO (IDispatch ())
getColumnFields index0 =
  propertyGet "ColumnFields"
              [inVariant index0]
              outIDispatch

getColumnGrand :: IPivotTable a0
               -> IO Bool
getColumnGrand =
  propertyGet "ColumnGrand"
              []
              outBool

setColumnGrand :: Bool
               -> IPivotTable a0
               -> IO ()
setColumnGrand rHS =
  propertySet "ColumnGrand"
              [inBool rHS]

getColumnRange :: IPivotTable a0
               -> IO (Range ())
getColumnRange =
  propertyGet "ColumnRange"
              []
              outIUnknown

showPages :: (Variant a1, Variant a2)
          => a2
          -> IPivotTable a0
          -> IO a1
showPages pageField =
  function1 "ShowPages"
            [inVariant pageField]
            outVariant

getDataBodyRange :: IPivotTable a0
                 -> IO (Range ())
getDataBodyRange =
  propertyGet "DataBodyRange"
              []
              outIUnknown

getDataFields :: (Variant a1)
              => a1
              -> IPivotTable a0
              -> IO (IDispatch ())
getDataFields index0 =
  propertyGet "DataFields"
              [inVariant index0]
              outIDispatch

getDataLabelRange :: IPivotTable a0
                  -> IO (Range ())
getDataLabelRange =
  propertyGet "DataLabelRange"
              []
              outIUnknown

getDefault22 :: IPivotTable a0
             -> IO String
getDefault22 =
  propertyGet "_Default"
              []
              outString

setDefault2 :: String
            -> IPivotTable a0
            -> IO ()
setDefault2 rHS =
  propertySet "_Default"
              [inString rHS]

getHasAutoFormat :: IPivotTable a0
                 -> IO Bool
getHasAutoFormat =
  propertyGet "HasAutoFormat"
              []
              outBool

setHasAutoFormat :: Bool
                 -> IPivotTable a0
                 -> IO ()
setHasAutoFormat rHS =
  propertySet "HasAutoFormat"
              [inBool rHS]

getHiddenFields :: (Variant a1)
                => a1
                -> IPivotTable a0
                -> IO (IDispatch ())
getHiddenFields index0 =
  propertyGet "HiddenFields"
              [inVariant index0]
              outIDispatch

getInnerDetail :: IPivotTable a0
               -> IO String
getInnerDetail =
  propertyGet "InnerDetail"
              []
              outString

setInnerDetail :: String
               -> IPivotTable a0
               -> IO ()
setInnerDetail rHS =
  propertySet "InnerDetail"
              [inString rHS]

getName10 :: IPivotTable a0
          -> IO String
getName10 =
  propertyGet "Name"
              []
              outString

setName4 :: String
         -> IPivotTable a0
         -> IO ()
setName4 rHS =
  propertySet "Name"
              [inString rHS]

getPageFields :: (Variant a1)
              => a1
              -> IPivotTable a0
              -> IO (IDispatch ())
getPageFields index0 =
  propertyGet "PageFields"
              [inVariant index0]
              outIDispatch

getPageRange :: IPivotTable a0
             -> IO (Range ())
getPageRange =
  propertyGet "PageRange"
              []
              outIUnknown

getPageRangeCells :: IPivotTable a0
                  -> IO (Range ())
getPageRangeCells =
  propertyGet "PageRangeCells"
              []
              outIUnknown

pivotFields :: (Variant a1)
            => a1
            -> IPivotTable a0
            -> IO (IDispatch ())
pivotFields index0 =
  function1 "PivotFields"
            [inVariant index0]
            outIDispatch

getRefreshDate0 :: IPivotTable a0
                -> IO Int64
getRefreshDate0 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshName0 :: IPivotTable a0
                -> IO String
getRefreshName0 =
  propertyGet "RefreshName"
              []
              outString

refreshTable :: IPivotTable a0
             -> IO Bool
refreshTable =
  function1 "RefreshTable"
            []
            outBool

getRowFields :: (Variant a1)
             => a1
             -> IPivotTable a0
             -> IO (IDispatch ())
getRowFields index0 =
  propertyGet "RowFields"
              [inVariant index0]
              outIDispatch

getRowGrand :: IPivotTable a0
            -> IO Bool
getRowGrand =
  propertyGet "RowGrand"
              []
              outBool

setRowGrand :: Bool
            -> IPivotTable a0
            -> IO ()
setRowGrand rHS =
  propertySet "RowGrand"
              [inBool rHS]

getRowRange :: IPivotTable a0
            -> IO (Range ())
getRowRange =
  propertyGet "RowRange"
              []
              outIUnknown

getSaveData :: IPivotTable a0
            -> IO Bool
getSaveData =
  propertyGet "SaveData"
              []
              outBool

setSaveData :: Bool
            -> IPivotTable a0
            -> IO ()
setSaveData rHS =
  propertySet "SaveData"
              [inBool rHS]

getSourceData0 :: (Variant a1)
               => IPivotTable a0
               -> IO a1
getSourceData0 =
  propertyGet "SourceData"
              []
              outVariant

setSourceData1 :: a1
               -> IPivotTable a0
               -> IO ()
setSourceData1 rHS =
  propertySet "SourceData"
              [inVariant rHS]

getTableRange1 :: IPivotTable a0
               -> IO (Range ())
getTableRange1 =
  propertyGet "TableRange1"
              []
              outIUnknown

getTableRange2 :: IPivotTable a0
               -> IO (Range ())
getTableRange2 =
  propertyGet "TableRange2"
              []
              outIUnknown

getValue6 :: IPivotTable a0
          -> IO String
getValue6 =
  propertyGet "Value"
              []
              outString

setValue4 :: String
          -> IPivotTable a0
          -> IO ()
setValue4 rHS =
  propertySet "Value"
              [inString rHS]

getVisibleFields :: (Variant a1)
                 => a1
                 -> IPivotTable a0
                 -> IO (IDispatch ())
getVisibleFields index0 =
  propertyGet "VisibleFields"
              [inVariant index0]
              outIDispatch

getCacheIndex :: IPivotTable a0
              -> IO Int32
getCacheIndex =
  propertyGet "CacheIndex"
              []
              outInt32

setCacheIndex :: Int32
              -> IPivotTable a0
              -> IO ()
setCacheIndex rHS =
  propertySet "CacheIndex"
              [inInt32 rHS]

calculatedFields :: IPivotTable a0
                 -> IO (CalculatedFields ())
calculatedFields =
  function1 "CalculatedFields"
            []
            outIUnknown

getDisplayErrorString :: IPivotTable a0
                      -> IO Bool
getDisplayErrorString =
  propertyGet "DisplayErrorString"
              []
              outBool

setDisplayErrorString :: Bool
                      -> IPivotTable a0
                      -> IO ()
setDisplayErrorString rHS =
  propertySet "DisplayErrorString"
              [inBool rHS]

getDisplayNullString :: IPivotTable a0
                     -> IO Bool
getDisplayNullString =
  propertyGet "DisplayNullString"
              []
              outBool

setDisplayNullString :: Bool
                     -> IPivotTable a0
                     -> IO ()
setDisplayNullString rHS =
  propertySet "DisplayNullString"
              [inBool rHS]

getEnableDrilldown :: IPivotTable a0
                   -> IO Bool
getEnableDrilldown =
  propertyGet "EnableDrilldown"
              []
              outBool

setEnableDrilldown :: Bool
                   -> IPivotTable a0
                   -> IO ()
setEnableDrilldown rHS =
  propertySet "EnableDrilldown"
              [inBool rHS]

getEnableFieldDialog :: IPivotTable a0
                     -> IO Bool
getEnableFieldDialog =
  propertyGet "EnableFieldDialog"
              []
              outBool

setEnableFieldDialog :: Bool
                     -> IPivotTable a0
                     -> IO ()
setEnableFieldDialog rHS =
  propertySet "EnableFieldDialog"
              [inBool rHS]

getEnableWizard :: IPivotTable a0
                -> IO Bool
getEnableWizard =
  propertyGet "EnableWizard"
              []
              outBool

setEnableWizard :: Bool
                -> IPivotTable a0
                -> IO ()
setEnableWizard rHS =
  propertySet "EnableWizard"
              [inBool rHS]

getErrorString :: IPivotTable a0
               -> IO String
getErrorString =
  propertyGet "ErrorString"
              []
              outString

setErrorString :: String
               -> IPivotTable a0
               -> IO ()
setErrorString rHS =
  propertySet "ErrorString"
              [inString rHS]

getData :: String
        -> IPivotTable a0
        -> IO Double
getData name =
  function1 "GetData"
            [inString name]
            outDouble

listFormulas :: IPivotTable a0
             -> IO ()
listFormulas =
  method0 "ListFormulas"
          []

getManualUpdate :: IPivotTable a0
                -> IO Bool
getManualUpdate =
  propertyGet "ManualUpdate"
              []
              outBool

setManualUpdate :: Bool
                -> IPivotTable a0
                -> IO ()
setManualUpdate rHS =
  propertySet "ManualUpdate"
              [inBool rHS]

getMergeLabels :: IPivotTable a0
               -> IO Bool
getMergeLabels =
  propertyGet "MergeLabels"
              []
              outBool

setMergeLabels :: Bool
               -> IPivotTable a0
               -> IO ()
setMergeLabels rHS =
  propertySet "MergeLabels"
              [inBool rHS]

getNullString :: IPivotTable a0
              -> IO String
getNullString =
  propertyGet "NullString"
              []
              outString

setNullString :: String
              -> IPivotTable a0
              -> IO ()
setNullString rHS =
  propertySet "NullString"
              [inString rHS]

pivotCache :: IPivotTable a0
           -> IO (PivotCache ())
pivotCache =
  function1 "PivotCache"
            []
            outIUnknown

getPivotFormulas :: IPivotTable a0
                 -> IO (PivotFormulas ())
getPivotFormulas =
  propertyGet "PivotFormulas"
              []
              outIUnknown

pivotTableWizard1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
                  => a1
                  -> a2
                  -> a3
                  -> a4
                  -> a5
                  -> a6
                  -> a7
                  -> a8
                  -> a9
                  -> a10
                  -> a11
                  -> a12
                  -> a13
                  -> a14
                  -> a15
                  -> a16
                  -> IPivotTable a0
                  -> IO ()
pivotTableWizard1 sourceType sourceData tableDestination tableName rowGrand columnGrand saveData hasAutoFormat autoPage reserved backgroundQuery optimizeCache pageFieldOrder pageFieldWrapCount readData connection =
  method0 "PivotTableWizard"
          [ inVariant sourceType
          , inVariant sourceData
          , inVariant tableDestination
          , inVariant tableName
          , inVariant rowGrand
          , inVariant columnGrand
          , inVariant saveData
          , inVariant hasAutoFormat
          , inVariant autoPage
          , inVariant reserved
          , inVariant backgroundQuery
          , inVariant optimizeCache
          , inVariant pageFieldOrder
          , inVariant pageFieldWrapCount
          , inVariant readData
          , inVariant connection
          ]

getSubtotalHiddenPageItems :: IPivotTable a0
                           -> IO Bool
getSubtotalHiddenPageItems =
  propertyGet "SubtotalHiddenPageItems"
              []
              outBool

setSubtotalHiddenPageItems :: Bool
                           -> IPivotTable a0
                           -> IO ()
setSubtotalHiddenPageItems rHS =
  propertySet "SubtotalHiddenPageItems"
              [inBool rHS]

getPageFieldOrder :: IPivotTable a0
                  -> IO Int32
getPageFieldOrder =
  propertyGet "PageFieldOrder"
              []
              outInt32

setPageFieldOrder :: Int32
                  -> IPivotTable a0
                  -> IO ()
setPageFieldOrder rHS =
  propertySet "PageFieldOrder"
              [inInt32 rHS]

getPageFieldStyle :: IPivotTable a0
                  -> IO String
getPageFieldStyle =
  propertyGet "PageFieldStyle"
              []
              outString

setPageFieldStyle :: String
                  -> IPivotTable a0
                  -> IO ()
setPageFieldStyle rHS =
  propertySet "PageFieldStyle"
              [inString rHS]

getPageFieldWrapCount :: IPivotTable a0
                      -> IO Int32
getPageFieldWrapCount =
  propertyGet "PageFieldWrapCount"
              []
              outInt32

setPageFieldWrapCount :: Int32
                      -> IPivotTable a0
                      -> IO ()
setPageFieldWrapCount rHS =
  propertySet "PageFieldWrapCount"
              [inInt32 rHS]

getPreserveFormatting :: IPivotTable a0
                      -> IO Bool
getPreserveFormatting =
  propertyGet "PreserveFormatting"
              []
              outBool

setPreserveFormatting :: Bool
                      -> IPivotTable a0
                      -> IO ()
setPreserveFormatting rHS =
  propertySet "PreserveFormatting"
              [inBool rHS]

pivotSelect :: (Variant a1)
            => String
            -> a1
            -> IPivotTable a0
            -> IO ()
pivotSelect name mode0 =
  method0 "_PivotSelect"
          [ inString name
          , inDefaultValue (inInt32 0) inVariant mode0
          ]

getPivotSelection :: IPivotTable a0
                  -> IO String
getPivotSelection =
  propertyGet "PivotSelection"
              []
              outString

setPivotSelection :: String
                  -> IPivotTable a0
                  -> IO ()
setPivotSelection rHS =
  propertySet "PivotSelection"
              [inString rHS]

getSelectionMode :: IPivotTable a0
                 -> IO XlPTSelectionMode
getSelectionMode =
  propertyGet "SelectionMode"
              []
              outEnum

setSelectionMode :: XlPTSelectionMode
                 -> IPivotTable a0
                 -> IO ()
setSelectionMode rHS =
  propertySet "SelectionMode"
              [inEnum rHS]

getTableStyle :: IPivotTable a0
              -> IO String
getTableStyle =
  propertyGet "TableStyle"
              []
              outString

setTableStyle :: String
              -> IPivotTable a0
              -> IO ()
setTableStyle rHS =
  propertySet "TableStyle"
              [inString rHS]

getTag :: IPivotTable a0
       -> IO String
getTag =
  propertyGet "Tag"
              []
              outString

setTag :: String
       -> IPivotTable a0
       -> IO ()
setTag rHS =
  propertySet "Tag"
              [inString rHS]

update :: IPivotTable a0
       -> IO ()
update =
  method0 "Update"
          []

getVacatedStyle :: IPivotTable a0
                -> IO String
getVacatedStyle =
  propertyGet "VacatedStyle"
              []
              outString

setVacatedStyle :: String
                -> IPivotTable a0
                -> IO ()
setVacatedStyle rHS =
  propertySet "VacatedStyle"
              [inString rHS]

format :: XlPivotFormatType
       -> IPivotTable a0
       -> IO ()
format format0 =
  method0 "Format"
          [inEnum format0]

getPrintTitles :: IPivotTable a0
               -> IO Bool
getPrintTitles =
  propertyGet "PrintTitles"
              []
              outBool

setPrintTitles :: Bool
               -> IPivotTable a0
               -> IO ()
setPrintTitles rHS =
  propertySet "PrintTitles"
              [inBool rHS]

getCubeFields :: IPivotTable a0
              -> IO (CubeFields ())
getCubeFields =
  propertyGet "CubeFields"
              []
              outIUnknown

getGrandTotalName :: IPivotTable a0
                  -> IO String
getGrandTotalName =
  propertyGet "GrandTotalName"
              []
              outString

setGrandTotalName :: String
                  -> IPivotTable a0
                  -> IO ()
setGrandTotalName rHS =
  propertySet "GrandTotalName"
              [inString rHS]

getSmallGrid :: IPivotTable a0
             -> IO Bool
getSmallGrid =
  propertyGet "SmallGrid"
              []
              outBool

setSmallGrid :: Bool
             -> IPivotTable a0
             -> IO ()
setSmallGrid rHS =
  propertySet "SmallGrid"
              [inBool rHS]

getRepeatItemsOnEachPrintedPage :: IPivotTable a0
                                -> IO Bool
getRepeatItemsOnEachPrintedPage =
  propertyGet "RepeatItemsOnEachPrintedPage"
              []
              outBool

setRepeatItemsOnEachPrintedPage :: Bool
                                -> IPivotTable a0
                                -> IO ()
setRepeatItemsOnEachPrintedPage rHS =
  propertySet "RepeatItemsOnEachPrintedPage"
              [inBool rHS]

getTotalsAnnotation :: IPivotTable a0
                    -> IO Bool
getTotalsAnnotation =
  propertyGet "TotalsAnnotation"
              []
              outBool

setTotalsAnnotation :: Bool
                    -> IPivotTable a0
                    -> IO ()
setTotalsAnnotation rHS =
  propertySet "TotalsAnnotation"
              [inBool rHS]

pivotSelect0 :: (Variant a1, Variant a2)
             => String
             -> a1
             -> a2
             -> IPivotTable a0
             -> IO ()
pivotSelect0 name mode0 useStandardName =
  method0 "PivotSelect"
          [ inString name
          , inDefaultValue (inInt32 0) inVariant mode0
          , inVariant useStandardName
          ]

getPivotSelectionStandard :: IPivotTable a0
                          -> IO String
getPivotSelectionStandard =
  propertyGet "PivotSelectionStandard"
              []
              outString

setPivotSelectionStandard :: String
                          -> IPivotTable a0
                          -> IO ()
setPivotSelectionStandard rHS =
  propertySet "PivotSelectionStandard"
              [inString rHS]

getPivotData :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> a15
             -> a16
             -> a17
             -> a18
             -> a19
             -> a20
             -> a21
             -> a22
             -> a23
             -> a24
             -> a25
             -> a26
             -> a27
             -> a28
             -> a29
             -> IPivotTable a0
             -> IO (Range ())
getPivotData dataField field1 item10 field2 item20 field3 item30 field4 item40 field5 item5 field6 item6 field7 item7 field8 item8 field9 item9 field10 item100 field11 item11 field12 item12 field13 item13 field14 item14 =
  function1 "GetPivotData"
            [ inVariant dataField
            , inVariant field1
            , inVariant item10
            , inVariant field2
            , inVariant item20
            , inVariant field3
            , inVariant item30
            , inVariant field4
            , inVariant item40
            , inVariant field5
            , inVariant item5
            , inVariant field6
            , inVariant item6
            , inVariant field7
            , inVariant item7
            , inVariant field8
            , inVariant item8
            , inVariant field9
            , inVariant item9
            , inVariant field10
            , inVariant item100
            , inVariant field11
            , inVariant item11
            , inVariant field12
            , inVariant item12
            , inVariant field13
            , inVariant item13
            , inVariant field14
            , inVariant item14
            ]
            outIUnknown

getDataPivotField :: IPivotTable a0
                  -> IO (PivotField ())
getDataPivotField =
  propertyGet "DataPivotField"
              []
              outIUnknown

getEnableDataValueEditing :: IPivotTable a0
                          -> IO Bool
getEnableDataValueEditing =
  propertyGet "EnableDataValueEditing"
              []
              outBool

setEnableDataValueEditing :: Bool
                          -> IPivotTable a0
                          -> IO ()
setEnableDataValueEditing rHS =
  propertySet "EnableDataValueEditing"
              [inBool rHS]

addDataField :: (Variant a2, Variant a3)
             => IDispatch a1
             -> a2
             -> a3
             -> IPivotTable a0
             -> IO (PivotField ())
addDataField field caption function =
  function1 "AddDataField"
            [ inIDispatch field
            , inVariant caption
            , inVariant function
            ]
            outIUnknown

getMDX0 :: IPivotTable a0
        -> IO String
getMDX0 =
  propertyGet "MDX"
              []
              outString

getViewCalculatedMembers :: IPivotTable a0
                         -> IO Bool
getViewCalculatedMembers =
  propertyGet "ViewCalculatedMembers"
              []
              outBool

setViewCalculatedMembers :: Bool
                         -> IPivotTable a0
                         -> IO ()
setViewCalculatedMembers rHS =
  propertySet "ViewCalculatedMembers"
              [inBool rHS]

getCalculatedMembers :: IPivotTable a0
                     -> IO (CalculatedMembers ())
getCalculatedMembers =
  propertyGet "CalculatedMembers"
              []
              outIUnknown

getDisplayImmediateItems :: IPivotTable a0
                         -> IO Bool
getDisplayImmediateItems =
  propertyGet "DisplayImmediateItems"
              []
              outBool

setDisplayImmediateItems :: Bool
                         -> IPivotTable a0
                         -> IO ()
setDisplayImmediateItems rHS =
  propertySet "DisplayImmediateItems"
              [inBool rHS]

dummy150 :: (Variant a1, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
         => a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> a30
         -> a31
         -> IPivotTable a0
         -> IO a1
dummy150 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Dummy15"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

getEnableFieldList :: IPivotTable a0
                   -> IO Bool
getEnableFieldList =
  propertyGet "EnableFieldList"
              []
              outBool

setEnableFieldList :: Bool
                   -> IPivotTable a0
                   -> IO ()
setEnableFieldList rHS =
  propertySet "EnableFieldList"
              [inBool rHS]

getVisualTotals :: IPivotTable a0
                -> IO Bool
getVisualTotals =
  propertyGet "VisualTotals"
              []
              outBool

setVisualTotals :: Bool
                -> IPivotTable a0
                -> IO ()
setVisualTotals rHS =
  propertySet "VisualTotals"
              [inBool rHS]

getShowPageMultipleItemLabel :: IPivotTable a0
                             -> IO Bool
getShowPageMultipleItemLabel =
  propertyGet "ShowPageMultipleItemLabel"
              []
              outBool

setShowPageMultipleItemLabel :: Bool
                             -> IPivotTable a0
                             -> IO ()
setShowPageMultipleItemLabel rHS =
  propertySet "ShowPageMultipleItemLabel"
              [inBool rHS]

getVersion1 :: IPivotTable a0
            -> IO XlPivotTableVersionList
getVersion1 =
  propertyGet "Version"
              []
              outEnum

createCubeFile :: (Variant a1, Variant a2, Variant a3, Variant a4)
               => String
               -> a1
               -> a2
               -> a3
               -> a4
               -> IPivotTable a0
               -> IO String
createCubeFile file measures levels members properties =
  function1 "CreateCubeFile"
            [ inString file
            , inVariant measures
            , inVariant levels
            , inVariant members
            , inVariant properties
            ]
            outString

getDisplayEmptyRow :: IPivotTable a0
                   -> IO Bool
getDisplayEmptyRow =
  propertyGet "DisplayEmptyRow"
              []
              outBool

setDisplayEmptyRow :: Bool
                   -> IPivotTable a0
                   -> IO ()
setDisplayEmptyRow rHS =
  propertySet "DisplayEmptyRow"
              [inBool rHS]

getDisplayEmptyColumn :: IPivotTable a0
                      -> IO Bool
getDisplayEmptyColumn =
  propertyGet "DisplayEmptyColumn"
              []
              outBool

setDisplayEmptyColumn :: Bool
                      -> IPivotTable a0
                      -> IO ()
setDisplayEmptyColumn rHS =
  propertySet "DisplayEmptyColumn"
              [inBool rHS]

getShowCellBackgroundFromOLAP :: IPivotTable a0
                              -> IO Bool
getShowCellBackgroundFromOLAP =
  propertyGet "ShowCellBackgroundFromOLAP"
              []
              outBool

setShowCellBackgroundFromOLAP :: Bool
                              -> IPivotTable a0
                              -> IO ()
setShowCellBackgroundFromOLAP rHS =
  propertySet "ShowCellBackgroundFromOLAP"
              [inBool rHS]

getPivotColumnAxis :: IPivotTable a0
                   -> IO (PivotAxis ())
getPivotColumnAxis =
  propertyGet "PivotColumnAxis"
              []
              outIUnknown

getPivotRowAxis :: IPivotTable a0
                -> IO (PivotAxis ())
getPivotRowAxis =
  propertyGet "PivotRowAxis"
              []
              outIUnknown

getShowDrillIndicators :: IPivotTable a0
                       -> IO Bool
getShowDrillIndicators =
  propertyGet "ShowDrillIndicators"
              []
              outBool

setShowDrillIndicators :: Bool
                       -> IPivotTable a0
                       -> IO ()
setShowDrillIndicators rHS =
  propertySet "ShowDrillIndicators"
              [inBool rHS]

getPrintDrillIndicators :: IPivotTable a0
                        -> IO Bool
getPrintDrillIndicators =
  propertyGet "PrintDrillIndicators"
              []
              outBool

setPrintDrillIndicators :: Bool
                        -> IPivotTable a0
                        -> IO ()
setPrintDrillIndicators rHS =
  propertySet "PrintDrillIndicators"
              [inBool rHS]

getDisplayMemberPropertyTooltips :: IPivotTable a0
                                 -> IO Bool
getDisplayMemberPropertyTooltips =
  propertyGet "DisplayMemberPropertyTooltips"
              []
              outBool

setDisplayMemberPropertyTooltips :: Bool
                                 -> IPivotTable a0
                                 -> IO ()
setDisplayMemberPropertyTooltips rHS =
  propertySet "DisplayMemberPropertyTooltips"
              [inBool rHS]

getDisplayContextTooltips :: IPivotTable a0
                          -> IO Bool
getDisplayContextTooltips =
  propertyGet "DisplayContextTooltips"
              []
              outBool

setDisplayContextTooltips :: Bool
                          -> IPivotTable a0
                          -> IO ()
setDisplayContextTooltips rHS =
  propertySet "DisplayContextTooltips"
              [inBool rHS]

clearTable :: IPivotTable a0
           -> IO ()
clearTable =
  method0 "ClearTable"
          []

getCompactRowIndent :: IPivotTable a0
                    -> IO Int32
getCompactRowIndent =
  propertyGet "CompactRowIndent"
              []
              outInt32

setCompactRowIndent :: Int32
                    -> IPivotTable a0
                    -> IO ()
setCompactRowIndent rHS =
  propertySet "CompactRowIndent"
              [inInt32 rHS]

getLayoutRowDefault :: IPivotTable a0
                    -> IO XlLayoutRowType
getLayoutRowDefault =
  propertyGet "LayoutRowDefault"
              []
              outEnum

setLayoutRowDefault :: XlLayoutRowType
                    -> IPivotTable a0
                    -> IO ()
setLayoutRowDefault rHS =
  propertySet "LayoutRowDefault"
              [inEnum rHS]

getDisplayFieldCaptions :: IPivotTable a0
                        -> IO Bool
getDisplayFieldCaptions =
  propertyGet "DisplayFieldCaptions"
              []
              outBool

setDisplayFieldCaptions :: Bool
                        -> IPivotTable a0
                        -> IO ()
setDisplayFieldCaptions rHS =
  propertySet "DisplayFieldCaptions"
              [inBool rHS]

rowAxisLayout :: XlLayoutRowType
              -> IPivotTable a0
              -> IO ()
rowAxisLayout rowLayout =
  method0 "RowAxisLayout"
          [inEnum rowLayout]

subtotalLocation :: XlSubtototalLocationType
                 -> IPivotTable a0
                 -> IO ()
subtotalLocation location0 =
  method0 "SubtotalLocation"
          [inEnum location0]

getActiveFilters :: IPivotTable a0
                 -> IO (PivotFilters ())
getActiveFilters =
  propertyGet "ActiveFilters"
              []
              outIUnknown

getInGridDropZones :: IPivotTable a0
                   -> IO Bool
getInGridDropZones =
  propertyGet "InGridDropZones"
              []
              outBool

setInGridDropZones :: Bool
                   -> IPivotTable a0
                   -> IO ()
setInGridDropZones rHS =
  propertySet "InGridDropZones"
              [inBool rHS]

clearAllFilters :: IPivotTable a0
                -> IO ()
clearAllFilters =
  method0 "ClearAllFilters"
          []

getTableStyle2 :: (Variant a1)
               => IPivotTable a0
               -> IO a1
getTableStyle2 =
  propertyGet "TableStyle2"
              []
              outVariant

setTableStyle2 :: a1
               -> IPivotTable a0
               -> IO ()
setTableStyle2 rHS =
  propertySet "TableStyle2"
              [inVariant rHS]

getShowTableStyleLastColumn :: IPivotTable a0
                            -> IO Bool
getShowTableStyleLastColumn =
  propertyGet "ShowTableStyleLastColumn"
              []
              outBool

setShowTableStyleLastColumn :: Bool
                            -> IPivotTable a0
                            -> IO ()
setShowTableStyleLastColumn rHS =
  propertySet "ShowTableStyleLastColumn"
              [inBool rHS]

getShowTableStyleRowStripes :: IPivotTable a0
                            -> IO Bool
getShowTableStyleRowStripes =
  propertyGet "ShowTableStyleRowStripes"
              []
              outBool

setShowTableStyleRowStripes :: Bool
                            -> IPivotTable a0
                            -> IO ()
setShowTableStyleRowStripes rHS =
  propertySet "ShowTableStyleRowStripes"
              [inBool rHS]

getShowTableStyleColumnStripes :: IPivotTable a0
                               -> IO Bool
getShowTableStyleColumnStripes =
  propertyGet "ShowTableStyleColumnStripes"
              []
              outBool

setShowTableStyleColumnStripes :: Bool
                               -> IPivotTable a0
                               -> IO ()
setShowTableStyleColumnStripes rHS =
  propertySet "ShowTableStyleColumnStripes"
              [inBool rHS]

getShowTableStyleRowHeaders :: IPivotTable a0
                            -> IO Bool
getShowTableStyleRowHeaders =
  propertyGet "ShowTableStyleRowHeaders"
              []
              outBool

setShowTableStyleRowHeaders :: Bool
                            -> IPivotTable a0
                            -> IO ()
setShowTableStyleRowHeaders rHS =
  propertySet "ShowTableStyleRowHeaders"
              [inBool rHS]

getShowTableStyleColumnHeaders :: IPivotTable a0
                               -> IO Bool
getShowTableStyleColumnHeaders =
  propertyGet "ShowTableStyleColumnHeaders"
              []
              outBool

setShowTableStyleColumnHeaders :: Bool
                               -> IPivotTable a0
                               -> IO ()
setShowTableStyleColumnHeaders rHS =
  propertySet "ShowTableStyleColumnHeaders"
              [inBool rHS]

convertToFormulas :: Bool
                  -> IPivotTable a0
                  -> IO ()
convertToFormulas convertFilters =
  method0 "ConvertToFormulas"
          [inBool convertFilters]

getAllowMultipleFilters :: IPivotTable a0
                        -> IO Bool
getAllowMultipleFilters =
  propertyGet "AllowMultipleFilters"
              []
              outBool

setAllowMultipleFilters :: Bool
                        -> IPivotTable a0
                        -> IO ()
setAllowMultipleFilters rHS =
  propertySet "AllowMultipleFilters"
              [inBool rHS]

getCompactLayoutRowHeader :: IPivotTable a0
                          -> IO String
getCompactLayoutRowHeader =
  propertyGet "CompactLayoutRowHeader"
              []
              outString

setCompactLayoutRowHeader :: String
                          -> IPivotTable a0
                          -> IO ()
setCompactLayoutRowHeader rHS =
  propertySet "CompactLayoutRowHeader"
              [inString rHS]

getCompactLayoutColumnHeader :: IPivotTable a0
                             -> IO String
getCompactLayoutColumnHeader =
  propertyGet "CompactLayoutColumnHeader"
              []
              outString

setCompactLayoutColumnHeader :: String
                             -> IPivotTable a0
                             -> IO ()
setCompactLayoutColumnHeader rHS =
  propertySet "CompactLayoutColumnHeader"
              [inString rHS]

getFieldListSortAscending :: IPivotTable a0
                          -> IO Bool
getFieldListSortAscending =
  propertyGet "FieldListSortAscending"
              []
              outBool

setFieldListSortAscending :: Bool
                          -> IPivotTable a0
                          -> IO ()
setFieldListSortAscending rHS =
  propertySet "FieldListSortAscending"
              [inBool rHS]

getSortUsingCustomLists :: IPivotTable a0
                        -> IO Bool
getSortUsingCustomLists =
  propertyGet "SortUsingCustomLists"
              []
              outBool

setSortUsingCustomLists :: Bool
                        -> IPivotTable a0
                        -> IO ()
setSortUsingCustomLists rHS =
  propertySet "SortUsingCustomLists"
              [inBool rHS]

changeConnection :: WorkbookConnection a1
                 -> IPivotTable a0
                 -> IO ()
changeConnection conn =
  method0 "ChangeConnection"
          [inIUnknown conn]

changePivotCache :: a1
                 -> IPivotTable a0
                 -> IO ()
changePivotCache pivotCache0 =
  method0 "ChangePivotCache"
          [inVariant pivotCache0]

getLocation1 :: IPivotTable a0
             -> IO String
getLocation1 =
  propertyGet "Location"
              []
              outString

setLocation1 :: String
             -> IPivotTable a0
             -> IO ()
setLocation1 rHS =
  propertySet "Location"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IPivotTables
-- 
-- --------------------------------------------------
data IPivotTables_ a = IPivotTables__ 
type IPivotTables a = IDispatch (IPivotTables_ a)
iidIPivotTables :: IID (IPivotTables ())
iidIPivotTables = mkIID "{00020873-0001-0000-C000-000000000046}"

getApplication40 :: (Variant a1)
                 => IPivotTables a0
                 -> IO a1
getApplication40 =
  propertyGet "Application"
              []
              outVariant

getCreator40 :: IPivotTables a0
             -> IO XlCreator
getCreator40 =
  propertyGet "Creator"
              []
              outEnum

getParent55 :: IPivotTables a0
            -> IO (IDispatch ())
getParent55 =
  propertyGet "Parent"
              []
              outIDispatch

getCount23 :: IPivotTables a0
           -> IO Int32
getCount23 =
  propertyGet "Count"
              []
              outInt32

item5 :: a1
      -> IPivotTables a0
      -> IO (PivotTable ())
item5 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

newEnum2 :: IPivotTables a0
         -> IO (IUnknown ())
newEnum2 =
  function1 "_NewEnum"
            []
            outIUnknown

add15 :: (Variant a3, Variant a4, Variant a5)
      => PivotCache a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> IPivotTables a0
      -> IO (PivotTable ())
add15 pivotCache0 tableDestination tableName readData defaultVersion =
  function1 "Add"
            [ inIUnknown pivotCache0
            , inVariant tableDestination
            , inVariant tableName
            , inVariant readData
            , inVariant defaultVersion
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotField
-- 
-- --------------------------------------------------
data IPivotField_ a = IPivotField__ 
type IPivotField a = IDispatch (IPivotField_ a)
iidIPivotField :: IID (IPivotField ())
iidIPivotField = mkIID "{00020874-0001-0000-C000-000000000046}"

getApplication41 :: (Variant a1)
                 => IPivotField a0
                 -> IO a1
getApplication41 =
  propertyGet "Application"
              []
              outVariant

getCreator41 :: IPivotField a0
             -> IO XlCreator
getCreator41 =
  propertyGet "Creator"
              []
              outEnum

getParent56 :: IPivotField a0
            -> IO (IDispatch ())
getParent56 =
  propertyGet "Parent"
              []
              outIDispatch

getCalculation0 :: IPivotField a0
                -> IO XlPivotFieldCalculation
getCalculation0 =
  propertyGet "Calculation"
              []
              outEnum

setCalculation0 :: XlPivotFieldCalculation
                -> IPivotField a0
                -> IO ()
setCalculation0 rHS =
  propertySet "Calculation"
              [inEnum rHS]

getChildField :: IPivotField a0
              -> IO (PivotField ())
getChildField =
  propertyGet "ChildField"
              []
              outIUnknown

getChildItems :: (Variant a1, Variant a2)
              => a2
              -> IPivotField a0
              -> IO a1
getChildItems index0 =
  propertyGet "ChildItems"
              [inVariant index0]
              outVariant

getCurrentPage :: (Variant a1)
               => IPivotField a0
               -> IO a1
getCurrentPage =
  propertyGet "CurrentPage"
              []
              outVariant

setCurrentPage :: a1
               -> IPivotField a0
               -> IO ()
setCurrentPage rHS =
  propertySet "CurrentPage"
              [inVariant rHS]

getDataRange :: IPivotField a0
             -> IO (Range ())
getDataRange =
  propertyGet "DataRange"
              []
              outIUnknown

getDataType :: IPivotField a0
            -> IO XlPivotFieldDataType
getDataType =
  propertyGet "DataType"
              []
              outEnum

getDefault23 :: IPivotField a0
             -> IO String
getDefault23 =
  propertyGet "_Default"
              []
              outString

setDefault3 :: String
            -> IPivotField a0
            -> IO ()
setDefault3 rHS =
  propertySet "_Default"
              [inString rHS]

getFunction :: IPivotField a0
            -> IO XlConsolidationFunction
getFunction =
  propertyGet "Function"
              []
              outEnum

setFunction :: XlConsolidationFunction
            -> IPivotField a0
            -> IO ()
setFunction rHS =
  propertySet "Function"
              [inEnum rHS]

getGroupLevel :: (Variant a1)
              => IPivotField a0
              -> IO a1
getGroupLevel =
  propertyGet "GroupLevel"
              []
              outVariant

getHiddenItems :: (Variant a1, Variant a2)
               => a2
               -> IPivotField a0
               -> IO a1
getHiddenItems index0 =
  propertyGet "HiddenItems"
              [inVariant index0]
              outVariant

getLabelRange :: IPivotField a0
              -> IO (Range ())
getLabelRange =
  propertyGet "LabelRange"
              []
              outIUnknown

getName11 :: IPivotField a0
          -> IO String
getName11 =
  propertyGet "Name"
              []
              outString

setName5 :: String
         -> IPivotField a0
         -> IO ()
setName5 rHS =
  propertySet "Name"
              [inString rHS]

getNumberFormat1 :: IPivotField a0
                 -> IO String
getNumberFormat1 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat1 :: String
                 -> IPivotField a0
                 -> IO ()
setNumberFormat1 rHS =
  propertySet "NumberFormat"
              [inString rHS]

getOrientation3 :: IPivotField a0
                -> IO XlPivotFieldOrientation
getOrientation3 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation3 :: XlPivotFieldOrientation
                -> IPivotField a0
                -> IO ()
setOrientation3 rHS =
  propertySet "Orientation"
              [inEnum rHS]

getShowAllItems :: IPivotField a0
                -> IO Bool
getShowAllItems =
  propertyGet "ShowAllItems"
              []
              outBool

setShowAllItems :: Bool
                -> IPivotField a0
                -> IO ()
setShowAllItems rHS =
  propertySet "ShowAllItems"
              [inBool rHS]

getParentField :: IPivotField a0
               -> IO (PivotField ())
getParentField =
  propertyGet "ParentField"
              []
              outIUnknown

getParentItems :: (Variant a1, Variant a2)
               => a2
               -> IPivotField a0
               -> IO a1
getParentItems index0 =
  propertyGet "ParentItems"
              [inVariant index0]
              outVariant

pivotItems :: (Variant a1, Variant a2)
           => a2
           -> IPivotField a0
           -> IO a1
pivotItems index0 =
  function1 "PivotItems"
            [inVariant index0]
            outVariant

getPosition0 :: (Variant a1)
             => IPivotField a0
             -> IO a1
getPosition0 =
  propertyGet "Position"
              []
              outVariant

setPosition1 :: a1
             -> IPivotField a0
             -> IO ()
setPosition1 rHS =
  propertySet "Position"
              [inVariant rHS]

getSourceName :: IPivotField a0
              -> IO String
getSourceName =
  propertyGet "SourceName"
              []
              outString

getSubtotals :: (Variant a1, Variant a2)
             => a2
             -> IPivotField a0
             -> IO a1
getSubtotals index0 =
  propertyGet "Subtotals"
              [inVariant index0]
              outVariant

setSubtotals :: (Variant a1)
             => a1
             -> a2
             -> IPivotField a0
             -> IO ()
setSubtotals index0 rHS =
  propertySet "Subtotals"
              [ inVariant index0
              , inVariant rHS
              ]

getBaseField :: (Variant a1)
             => IPivotField a0
             -> IO a1
getBaseField =
  propertyGet "BaseField"
              []
              outVariant

setBaseField :: a1
             -> IPivotField a0
             -> IO ()
setBaseField rHS =
  propertySet "BaseField"
              [inVariant rHS]

getBaseItem :: (Variant a1)
            => IPivotField a0
            -> IO a1
getBaseItem =
  propertyGet "BaseItem"
              []
              outVariant

setBaseItem :: a1
            -> IPivotField a0
            -> IO ()
setBaseItem rHS =
  propertySet "BaseItem"
              [inVariant rHS]

getTotalLevels :: (Variant a1)
               => IPivotField a0
               -> IO a1
getTotalLevels =
  propertyGet "TotalLevels"
              []
              outVariant

getValue7 :: IPivotField a0
          -> IO String
getValue7 =
  propertyGet "Value"
              []
              outString

setValue5 :: String
          -> IPivotField a0
          -> IO ()
setValue5 rHS =
  propertySet "Value"
              [inString rHS]

getVisibleItems :: (Variant a1, Variant a2)
                => a2
                -> IPivotField a0
                -> IO a1
getVisibleItems index0 =
  propertyGet "VisibleItems"
              [inVariant index0]
              outVariant

calculatedItems :: IPivotField a0
                -> IO (CalculatedItems ())
calculatedItems =
  function1 "CalculatedItems"
            []
            outIUnknown

delete17 :: IPivotField a0
         -> IO ()
delete17 =
  method0 "Delete"
          []

getDragToColumn :: IPivotField a0
                -> IO Bool
getDragToColumn =
  propertyGet "DragToColumn"
              []
              outBool

setDragToColumn :: Bool
                -> IPivotField a0
                -> IO ()
setDragToColumn rHS =
  propertySet "DragToColumn"
              [inBool rHS]

getDragToHide :: IPivotField a0
              -> IO Bool
getDragToHide =
  propertyGet "DragToHide"
              []
              outBool

setDragToHide :: Bool
              -> IPivotField a0
              -> IO ()
setDragToHide rHS =
  propertySet "DragToHide"
              [inBool rHS]

getDragToPage :: IPivotField a0
              -> IO Bool
getDragToPage =
  propertyGet "DragToPage"
              []
              outBool

setDragToPage :: Bool
              -> IPivotField a0
              -> IO ()
setDragToPage rHS =
  propertySet "DragToPage"
              [inBool rHS]

getDragToRow :: IPivotField a0
             -> IO Bool
getDragToRow =
  propertyGet "DragToRow"
              []
              outBool

setDragToRow :: Bool
             -> IPivotField a0
             -> IO ()
setDragToRow rHS =
  propertySet "DragToRow"
              [inBool rHS]

getDragToData :: IPivotField a0
              -> IO Bool
getDragToData =
  propertyGet "DragToData"
              []
              outBool

setDragToData :: Bool
              -> IPivotField a0
              -> IO ()
setDragToData rHS =
  propertySet "DragToData"
              [inBool rHS]

getFormula1 :: IPivotField a0
            -> IO String
getFormula1 =
  propertyGet "Formula"
              []
              outString

setFormula1 :: String
            -> IPivotField a0
            -> IO ()
setFormula1 rHS =
  propertySet "Formula"
              [inString rHS]

getIsCalculated :: IPivotField a0
                -> IO Bool
getIsCalculated =
  propertyGet "IsCalculated"
              []
              outBool

getMemoryUsed1 :: IPivotField a0
               -> IO Int32
getMemoryUsed1 =
  propertyGet "MemoryUsed"
              []
              outInt32

getServerBased :: IPivotField a0
               -> IO Bool
getServerBased =
  propertyGet "ServerBased"
              []
              outBool

setServerBased :: Bool
               -> IPivotField a0
               -> IO ()
setServerBased rHS =
  propertySet "ServerBased"
              [inBool rHS]

autoSort :: Int32
         -> String
         -> IPivotField a0
         -> IO ()
autoSort order field =
  method0 "_AutoSort"
          [ inInt32 order
          , inString field
          ]

autoShow :: Int32
         -> Int32
         -> Int32
         -> String
         -> IPivotField a0
         -> IO ()
autoShow type0 range count0 field =
  method0 "AutoShow"
          [ inInt32 type0
          , inInt32 range
          , inInt32 count0
          , inString field
          ]

getAutoSortOrder :: IPivotField a0
                 -> IO Int32
getAutoSortOrder =
  propertyGet "AutoSortOrder"
              []
              outInt32

getAutoSortField :: IPivotField a0
                 -> IO String
getAutoSortField =
  propertyGet "AutoSortField"
              []
              outString

getAutoShowType :: IPivotField a0
                -> IO Int32
getAutoShowType =
  propertyGet "AutoShowType"
              []
              outInt32

getAutoShowRange :: IPivotField a0
                 -> IO Int32
getAutoShowRange =
  propertyGet "AutoShowRange"
              []
              outInt32

getAutoShowCount :: IPivotField a0
                 -> IO Int32
getAutoShowCount =
  propertyGet "AutoShowCount"
              []
              outInt32

getAutoShowField :: IPivotField a0
                 -> IO String
getAutoShowField =
  propertyGet "AutoShowField"
              []
              outString

getLayoutBlankLine :: IPivotField a0
                   -> IO Bool
getLayoutBlankLine =
  propertyGet "LayoutBlankLine"
              []
              outBool

setLayoutBlankLine :: Bool
                   -> IPivotField a0
                   -> IO ()
setLayoutBlankLine rHS =
  propertySet "LayoutBlankLine"
              [inBool rHS]

getLayoutSubtotalLocation :: IPivotField a0
                          -> IO XlSubtototalLocationType
getLayoutSubtotalLocation =
  propertyGet "LayoutSubtotalLocation"
              []
              outEnum

setLayoutSubtotalLocation :: XlSubtototalLocationType
                          -> IPivotField a0
                          -> IO ()
setLayoutSubtotalLocation rHS =
  propertySet "LayoutSubtotalLocation"
              [inEnum rHS]

getLayoutPageBreak :: IPivotField a0
                   -> IO Bool
getLayoutPageBreak =
  propertyGet "LayoutPageBreak"
              []
              outBool

setLayoutPageBreak :: Bool
                   -> IPivotField a0
                   -> IO ()
setLayoutPageBreak rHS =
  propertySet "LayoutPageBreak"
              [inBool rHS]

getLayoutForm :: IPivotField a0
              -> IO XlLayoutFormType
getLayoutForm =
  propertyGet "LayoutForm"
              []
              outEnum

setLayoutForm :: XlLayoutFormType
              -> IPivotField a0
              -> IO ()
setLayoutForm rHS =
  propertySet "LayoutForm"
              [inEnum rHS]

getSubtotalName :: IPivotField a0
                -> IO String
getSubtotalName =
  propertyGet "SubtotalName"
              []
              outString

setSubtotalName :: String
                -> IPivotField a0
                -> IO ()
setSubtotalName rHS =
  propertySet "SubtotalName"
              [inString rHS]

getCaption5 :: IPivotField a0
            -> IO String
getCaption5 =
  propertyGet "Caption"
              []
              outString

setCaption5 :: String
            -> IPivotField a0
            -> IO ()
setCaption5 rHS =
  propertySet "Caption"
              [inString rHS]

getDrilledDown :: IPivotField a0
               -> IO Bool
getDrilledDown =
  propertyGet "DrilledDown"
              []
              outBool

setDrilledDown :: Bool
               -> IPivotField a0
               -> IO ()
setDrilledDown rHS =
  propertySet "DrilledDown"
              [inBool rHS]

getCubeField :: IPivotField a0
             -> IO (CubeField ())
getCubeField =
  propertyGet "CubeField"
              []
              outIUnknown

getCurrentPageName :: IPivotField a0
                   -> IO String
getCurrentPageName =
  propertyGet "CurrentPageName"
              []
              outString

setCurrentPageName :: String
                   -> IPivotField a0
                   -> IO ()
setCurrentPageName rHS =
  propertySet "CurrentPageName"
              [inString rHS]

getStandardFormula0 :: IPivotField a0
                    -> IO String
getStandardFormula0 =
  propertyGet "StandardFormula"
              []
              outString

setStandardFormula0 :: String
                    -> IPivotField a0
                    -> IO ()
setStandardFormula0 rHS =
  propertySet "StandardFormula"
              [inString rHS]

getHiddenItemsList :: (Variant a1)
                   => IPivotField a0
                   -> IO a1
getHiddenItemsList =
  propertyGet "HiddenItemsList"
              []
              outVariant

setHiddenItemsList :: a1
                   -> IPivotField a0
                   -> IO ()
setHiddenItemsList rHS =
  propertySet "HiddenItemsList"
              [inVariant rHS]

getDatabaseSort :: IPivotField a0
                -> IO Bool
getDatabaseSort =
  propertyGet "DatabaseSort"
              []
              outBool

setDatabaseSort :: Bool
                -> IPivotField a0
                -> IO ()
setDatabaseSort rHS =
  propertySet "DatabaseSort"
              [inBool rHS]

getIsMemberProperty :: IPivotField a0
                    -> IO Bool
getIsMemberProperty =
  propertyGet "IsMemberProperty"
              []
              outBool

getPropertyParentField :: IPivotField a0
                       -> IO (PivotField ())
getPropertyParentField =
  propertyGet "PropertyParentField"
              []
              outIUnknown

getPropertyOrder :: IPivotField a0
                 -> IO Int32
getPropertyOrder =
  propertyGet "PropertyOrder"
              []
              outInt32

setPropertyOrder :: Int32
                 -> IPivotField a0
                 -> IO ()
setPropertyOrder rHS =
  propertySet "PropertyOrder"
              [inInt32 rHS]

getEnableItemSelection :: IPivotField a0
                       -> IO Bool
getEnableItemSelection =
  propertyGet "EnableItemSelection"
              []
              outBool

setEnableItemSelection :: Bool
                       -> IPivotField a0
                       -> IO ()
setEnableItemSelection rHS =
  propertySet "EnableItemSelection"
              [inBool rHS]

getCurrentPageList :: (Variant a1)
                   => IPivotField a0
                   -> IO a1
getCurrentPageList =
  propertyGet "CurrentPageList"
              []
              outVariant

setCurrentPageList :: a1
                   -> IPivotField a0
                   -> IO ()
setCurrentPageList rHS =
  propertySet "CurrentPageList"
              [inVariant rHS]

addPageItem :: (Variant a1)
            => String
            -> a1
            -> IPivotField a0
            -> IO ()
addPageItem item6 clearList =
  method0 "AddPageItem"
          [ inString item6
          , inVariant clearList
          ]

getHidden0 :: IPivotField a0
           -> IO Bool
getHidden0 =
  propertyGet "Hidden"
              []
              outBool

setHidden0 :: Bool
           -> IPivotField a0
           -> IO ()
setHidden0 rHS =
  propertySet "Hidden"
              [inBool rHS]

drillTo :: String
        -> IPivotField a0
        -> IO ()
drillTo field =
  method0 "DrillTo"
          [inString field]

getUseMemberPropertyAsCaption :: IPivotField a0
                              -> IO Bool
getUseMemberPropertyAsCaption =
  propertyGet "UseMemberPropertyAsCaption"
              []
              outBool

setUseMemberPropertyAsCaption :: Bool
                              -> IPivotField a0
                              -> IO ()
setUseMemberPropertyAsCaption rHS =
  propertySet "UseMemberPropertyAsCaption"
              [inBool rHS]

getMemberPropertyCaption :: IPivotField a0
                         -> IO String
getMemberPropertyCaption =
  propertyGet "MemberPropertyCaption"
              []
              outString

setMemberPropertyCaption :: String
                         -> IPivotField a0
                         -> IO ()
setMemberPropertyCaption rHS =
  propertySet "MemberPropertyCaption"
              [inString rHS]

getDisplayAsTooltip :: IPivotField a0
                    -> IO Bool
getDisplayAsTooltip =
  propertyGet "DisplayAsTooltip"
              []
              outBool

setDisplayAsTooltip :: Bool
                    -> IPivotField a0
                    -> IO ()
setDisplayAsTooltip rHS =
  propertySet "DisplayAsTooltip"
              [inBool rHS]

getDisplayInReport :: IPivotField a0
                   -> IO Bool
getDisplayInReport =
  propertyGet "DisplayInReport"
              []
              outBool

setDisplayInReport :: Bool
                   -> IPivotField a0
                   -> IO ()
setDisplayInReport rHS =
  propertySet "DisplayInReport"
              [inBool rHS]

getDisplayAsCaption :: IPivotField a0
                    -> IO Bool
getDisplayAsCaption =
  propertyGet "DisplayAsCaption"
              []
              outBool

getLayoutCompactRow :: IPivotField a0
                    -> IO Bool
getLayoutCompactRow =
  propertyGet "LayoutCompactRow"
              []
              outBool

setLayoutCompactRow :: Bool
                    -> IPivotField a0
                    -> IO ()
setLayoutCompactRow rHS =
  propertySet "LayoutCompactRow"
              [inBool rHS]

getIncludeNewItemsInFilter :: IPivotField a0
                           -> IO Bool
getIncludeNewItemsInFilter =
  propertyGet "IncludeNewItemsInFilter"
              []
              outBool

setIncludeNewItemsInFilter :: Bool
                           -> IPivotField a0
                           -> IO ()
setIncludeNewItemsInFilter rHS =
  propertySet "IncludeNewItemsInFilter"
              [inBool rHS]

getVisibleItemsList :: (Variant a1)
                    => IPivotField a0
                    -> IO a1
getVisibleItemsList =
  propertyGet "VisibleItemsList"
              []
              outVariant

setVisibleItemsList :: a1
                    -> IPivotField a0
                    -> IO ()
setVisibleItemsList rHS =
  propertySet "VisibleItemsList"
              [inVariant rHS]

getPivotFilters :: IPivotField a0
                -> IO (PivotFilters ())
getPivotFilters =
  propertyGet "PivotFilters"
              []
              outIUnknown

getAutoSortPivotLine :: IPivotField a0
                     -> IO (PivotLine ())
getAutoSortPivotLine =
  propertyGet "AutoSortPivotLine"
              []
              outIUnknown

getAutoSortCustomSubtotal :: IPivotField a0
                          -> IO Int32
getAutoSortCustomSubtotal =
  propertyGet "AutoSortCustomSubtotal"
              []
              outInt32

getShowingInAxis :: IPivotField a0
                 -> IO Bool
getShowingInAxis =
  propertyGet "ShowingInAxis"
              []
              outBool

getEnableMultiplePageItems :: IPivotField a0
                           -> IO Bool
getEnableMultiplePageItems =
  propertyGet "EnableMultiplePageItems"
              []
              outBool

setEnableMultiplePageItems :: Bool
                           -> IPivotField a0
                           -> IO ()
setEnableMultiplePageItems rHS =
  propertySet "EnableMultiplePageItems"
              [inBool rHS]

getAllItemsVisible :: IPivotField a0
                   -> IO Bool
getAllItemsVisible =
  propertyGet "AllItemsVisible"
              []
              outBool

clearManualFilter :: IPivotField a0
                  -> IO ()
clearManualFilter =
  method0 "ClearManualFilter"
          []

clearAllFilters0 :: IPivotField a0
                 -> IO ()
clearAllFilters0 =
  method0 "ClearAllFilters"
          []

clearValueFilters :: IPivotField a0
                  -> IO ()
clearValueFilters =
  method0 "ClearValueFilters"
          []

clearLabelFilters :: IPivotField a0
                  -> IO ()
clearLabelFilters =
  method0 "ClearLabelFilters"
          []

autoSort0 :: (Variant a1, Variant a2)
          => Int32
          -> String
          -> a1
          -> a2
          -> IPivotField a0
          -> IO ()
autoSort0 order field pivotLine customSubtotal =
  method0 "AutoSort"
          [ inInt32 order
          , inString field
          , inVariant pivotLine
          , inVariant customSubtotal
          ]

getSourceCaption :: IPivotField a0
                 -> IO String
getSourceCaption =
  propertyGet "SourceCaption"
              []
              outString

getShowDetail0 :: IPivotField a0
               -> IO Bool
getShowDetail0 =
  propertyGet "ShowDetail"
              []
              outBool

setShowDetail0 :: Bool
               -> IPivotField a0
               -> IO ()
setShowDetail0 rHS =
  propertySet "ShowDetail"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IPivotFields
-- 
-- --------------------------------------------------
data IPivotFields_ a = IPivotFields__ 
type IPivotFields a = IDispatch (IPivotFields_ a)
iidIPivotFields :: IID (IPivotFields ())
iidIPivotFields = mkIID "{00020875-0001-0000-C000-000000000046}"

getApplication42 :: (Variant a1)
                 => IPivotFields a0
                 -> IO a1
getApplication42 =
  propertyGet "Application"
              []
              outVariant

getCreator42 :: IPivotFields a0
             -> IO XlCreator
getCreator42 =
  propertyGet "Creator"
              []
              outEnum

getParent57 :: IPivotFields a0
            -> IO (PivotTable ())
getParent57 =
  propertyGet "Parent"
              []
              outIUnknown

getCount24 :: IPivotFields a0
           -> IO Int32
getCount24 =
  propertyGet "Count"
              []
              outInt32

item6 :: a1
      -> IPivotFields a0
      -> IO (IDispatch ())
item6 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum3 :: IPivotFields a0
         -> IO (IUnknown ())
newEnum3 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ICalculatedFields
-- 
-- --------------------------------------------------
data ICalculatedFields_ a = ICalculatedFields__ 
type ICalculatedFields a = IDispatch (ICalculatedFields_ a)
iidICalculatedFields :: IID (ICalculatedFields ())
iidICalculatedFields =
  mkIID "{00024420-0001-0000-C000-000000000046}"

getApplication43 :: (Variant a1)
                 => ICalculatedFields a0
                 -> IO a1
getApplication43 =
  propertyGet "Application"
              []
              outVariant

getCreator43 :: ICalculatedFields a0
             -> IO XlCreator
getCreator43 =
  propertyGet "Creator"
              []
              outEnum

getParent58 :: ICalculatedFields a0
            -> IO (IDispatch ())
getParent58 =
  propertyGet "Parent"
              []
              outIDispatch

getCount25 :: ICalculatedFields a0
           -> IO Int32
getCount25 =
  propertyGet "Count"
              []
              outInt32

add16 :: String
      -> String
      -> ICalculatedFields a0
      -> IO (PivotField ())
add16 name formula =
  function1 "_Add"
            [ inString name
            , inString formula
            ]
            outIUnknown

item7 :: a1
      -> ICalculatedFields a0
      -> IO (PivotField ())
item7 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault24 :: a1
             -> ICalculatedFields a0
             -> IO (PivotField ())
getDefault24 field =
  propertyGet "_Default"
              [inVariant field]
              outIUnknown

newEnum4 :: ICalculatedFields a0
         -> IO (IUnknown ())
newEnum4 =
  function1 "_NewEnum"
            []
            outIUnknown

add17 :: (Variant a1)
      => String
      -> String
      -> a1
      -> ICalculatedFields a0
      -> IO (PivotField ())
add17 name formula useStandardFormula =
  function1 "Add"
            [ inString name
            , inString formula
            , inVariant useStandardFormula
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotItem
-- 
-- --------------------------------------------------
data IPivotItem_ a = IPivotItem__ 
type IPivotItem a = IDispatch (IPivotItem_ a)
iidIPivotItem :: IID (IPivotItem ())
iidIPivotItem = mkIID "{00020876-0001-0000-C000-000000000046}"

getApplication44 :: (Variant a1)
                 => IPivotItem a0
                 -> IO a1
getApplication44 =
  propertyGet "Application"
              []
              outVariant

getCreator44 :: IPivotItem a0
             -> IO XlCreator
getCreator44 =
  propertyGet "Creator"
              []
              outEnum

getParent59 :: IPivotItem a0
            -> IO (PivotField ())
getParent59 =
  propertyGet "Parent"
              []
              outIUnknown

getChildItems0 :: (Variant a1, Variant a2)
               => a2
               -> IPivotItem a0
               -> IO a1
getChildItems0 index0 =
  propertyGet "ChildItems"
              [inVariant index0]
              outVariant

getDataRange0 :: IPivotItem a0
              -> IO (Range ())
getDataRange0 =
  propertyGet "DataRange"
              []
              outIUnknown

getDefault25 :: IPivotItem a0
             -> IO String
getDefault25 =
  propertyGet "_Default"
              []
              outString

setDefault4 :: String
            -> IPivotItem a0
            -> IO ()
setDefault4 rHS =
  propertySet "_Default"
              [inString rHS]

getLabelRange0 :: IPivotItem a0
               -> IO (Range ())
getLabelRange0 =
  propertyGet "LabelRange"
              []
              outIUnknown

getName12 :: IPivotItem a0
          -> IO String
getName12 =
  propertyGet "Name"
              []
              outString

setName6 :: String
         -> IPivotItem a0
         -> IO ()
setName6 rHS =
  propertySet "Name"
              [inString rHS]

getParentItem :: IPivotItem a0
              -> IO (PivotItem ())
getParentItem =
  propertyGet "ParentItem"
              []
              outIUnknown

getParentShowDetail :: IPivotItem a0
                    -> IO Bool
getParentShowDetail =
  propertyGet "ParentShowDetail"
              []
              outBool

getPosition1 :: IPivotItem a0
             -> IO Int32
getPosition1 =
  propertyGet "Position"
              []
              outInt32

setPosition2 :: Int32
             -> IPivotItem a0
             -> IO ()
setPosition2 rHS =
  propertySet "Position"
              [inInt32 rHS]

getShowDetail1 :: IPivotItem a0
               -> IO Bool
getShowDetail1 =
  propertyGet "ShowDetail"
              []
              outBool

setShowDetail1 :: Bool
               -> IPivotItem a0
               -> IO ()
setShowDetail1 rHS =
  propertySet "ShowDetail"
              [inBool rHS]

getSourceName0 :: (Variant a1)
               => IPivotItem a0
               -> IO a1
getSourceName0 =
  propertyGet "SourceName"
              []
              outVariant

getValue8 :: IPivotItem a0
          -> IO String
getValue8 =
  propertyGet "Value"
              []
              outString

setValue6 :: String
          -> IPivotItem a0
          -> IO ()
setValue6 rHS =
  propertySet "Value"
              [inString rHS]

getVisible11 :: IPivotItem a0
             -> IO Bool
getVisible11 =
  propertyGet "Visible"
              []
              outBool

setVisible11 :: Bool
             -> IPivotItem a0
             -> IO ()
setVisible11 rHS =
  propertySet "Visible"
              [inBool rHS]

delete18 :: IPivotItem a0
         -> IO ()
delete18 =
  method0 "Delete"
          []

getIsCalculated0 :: IPivotItem a0
                 -> IO Bool
getIsCalculated0 =
  propertyGet "IsCalculated"
              []
              outBool

getRecordCount0 :: IPivotItem a0
                -> IO Int32
getRecordCount0 =
  propertyGet "RecordCount"
              []
              outInt32

getFormula2 :: IPivotItem a0
            -> IO String
getFormula2 =
  propertyGet "Formula"
              []
              outString

setFormula2 :: String
            -> IPivotItem a0
            -> IO ()
setFormula2 rHS =
  propertySet "Formula"
              [inString rHS]

getCaption6 :: IPivotItem a0
            -> IO String
getCaption6 =
  propertyGet "Caption"
              []
              outString

setCaption6 :: String
            -> IPivotItem a0
            -> IO ()
setCaption6 rHS =
  propertySet "Caption"
              [inString rHS]

getDrilledDown0 :: IPivotItem a0
                -> IO Bool
getDrilledDown0 =
  propertyGet "DrilledDown"
              []
              outBool

setDrilledDown0 :: Bool
                -> IPivotItem a0
                -> IO ()
setDrilledDown0 rHS =
  propertySet "DrilledDown"
              [inBool rHS]

getStandardFormula1 :: IPivotItem a0
                    -> IO String
getStandardFormula1 =
  propertyGet "StandardFormula"
              []
              outString

setStandardFormula1 :: String
                    -> IPivotItem a0
                    -> IO ()
setStandardFormula1 rHS =
  propertySet "StandardFormula"
              [inString rHS]

getSourceNameStandard :: IPivotItem a0
                      -> IO String
getSourceNameStandard =
  propertyGet "SourceNameStandard"
              []
              outString

drillTo0 :: String
         -> IPivotItem a0
         -> IO ()
drillTo0 field =
  method0 "DrillTo"
          [inString field]

-- --------------------------------------------------
-- 
-- interface IPivotItems
-- 
-- --------------------------------------------------
data IPivotItems_ a = IPivotItems__ 
type IPivotItems a = IDispatch (IPivotItems_ a)
iidIPivotItems :: IID (IPivotItems ())
iidIPivotItems = mkIID "{00020877-0001-0000-C000-000000000046}"

getApplication45 :: (Variant a1)
                 => IPivotItems a0
                 -> IO a1
getApplication45 =
  propertyGet "Application"
              []
              outVariant

getCreator45 :: IPivotItems a0
             -> IO XlCreator
getCreator45 =
  propertyGet "Creator"
              []
              outEnum

getParent60 :: IPivotItems a0
            -> IO (PivotField ())
getParent60 =
  propertyGet "Parent"
              []
              outIUnknown

add18 :: String
      -> IPivotItems a0
      -> IO ()
add18 name =
  method0 "Add"
          [inString name]

getCount26 :: IPivotItems a0
           -> IO Int32
getCount26 =
  propertyGet "Count"
              []
              outInt32

item8 :: a1
      -> IPivotItems a0
      -> IO (IDispatch ())
item8 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum5 :: IPivotItems a0
         -> IO (IUnknown ())
newEnum5 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ICalculatedItems
-- 
-- --------------------------------------------------
data ICalculatedItems_ a = ICalculatedItems__ 
type ICalculatedItems a = IDispatch (ICalculatedItems_ a)
iidICalculatedItems :: IID (ICalculatedItems ())
iidICalculatedItems =
  mkIID "{00024421-0001-0000-C000-000000000046}"

getApplication46 :: (Variant a1)
                 => ICalculatedItems a0
                 -> IO a1
getApplication46 =
  propertyGet "Application"
              []
              outVariant

getCreator46 :: ICalculatedItems a0
             -> IO XlCreator
getCreator46 =
  propertyGet "Creator"
              []
              outEnum

getParent61 :: ICalculatedItems a0
            -> IO (IDispatch ())
getParent61 =
  propertyGet "Parent"
              []
              outIDispatch

getCount27 :: ICalculatedItems a0
           -> IO Int32
getCount27 =
  propertyGet "Count"
              []
              outInt32

add19 :: String
      -> String
      -> ICalculatedItems a0
      -> IO (PivotItem ())
add19 name formula =
  function1 "_Add"
            [ inString name
            , inString formula
            ]
            outIUnknown

item9 :: a1
      -> ICalculatedItems a0
      -> IO (PivotItem ())
item9 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault26 :: a1
             -> ICalculatedItems a0
             -> IO (PivotItem ())
getDefault26 field =
  propertyGet "_Default"
              [inVariant field]
              outIUnknown

newEnum6 :: ICalculatedItems a0
         -> IO (IUnknown ())
newEnum6 =
  function1 "_NewEnum"
            []
            outIUnknown

add20 :: (Variant a1)
      => String
      -> String
      -> a1
      -> ICalculatedItems a0
      -> IO (PivotItem ())
add20 name formula useStandardFormula =
  function1 "Add"
            [ inString name
            , inString formula
            , inVariant useStandardFormula
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ICharacters
-- 
-- --------------------------------------------------
data ICharacters_ a = ICharacters__ 
type ICharacters a = IDispatch (ICharacters_ a)
iidICharacters :: IID (ICharacters ())
iidICharacters = mkIID "{00020878-0001-0000-C000-000000000046}"

getApplication47 :: (Variant a1)
                 => ICharacters a0
                 -> IO a1
getApplication47 =
  propertyGet "Application"
              []
              outVariant

getCreator47 :: ICharacters a0
             -> IO XlCreator
getCreator47 =
  propertyGet "Creator"
              []
              outEnum

getParent62 :: ICharacters a0
            -> IO (IDispatch ())
getParent62 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption7 :: ICharacters a0
            -> IO String
getCaption7 =
  propertyGet "Caption"
              []
              outString

setCaption7 :: String
            -> ICharacters a0
            -> IO ()
setCaption7 rHS =
  propertySet "Caption"
              [inString rHS]

getCount28 :: ICharacters a0
           -> IO Int32
getCount28 =
  propertyGet "Count"
              []
              outInt32

delete19 :: (Variant a1)
         => ICharacters a0
         -> IO a1
delete19 =
  function1 "Delete"
            []
            outVariant

getFont2 :: ICharacters a0
         -> IO (Font ())
getFont2 =
  propertyGet "Font"
              []
              outIUnknown

insert1 :: (Variant a1)
        => String
        -> ICharacters a0
        -> IO a1
insert1 string =
  function1 "Insert"
            [inString string]
            outVariant

getText2 :: ICharacters a0
         -> IO String
getText2 =
  propertyGet "Text"
              []
              outString

setText1 :: String
         -> ICharacters a0
         -> IO ()
setText1 rHS =
  propertySet "Text"
              [inString rHS]

getPhoneticCharacters :: ICharacters a0
                      -> IO String
getPhoneticCharacters =
  propertyGet "PhoneticCharacters"
              []
              outString

setPhoneticCharacters :: String
                      -> ICharacters a0
                      -> IO ()
setPhoneticCharacters rHS =
  propertySet "PhoneticCharacters"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IDialogs
-- 
-- --------------------------------------------------
data IDialogs_ a = IDialogs__ 
type IDialogs a = IDispatch (IDialogs_ a)
iidIDialogs :: IID (IDialogs ())
iidIDialogs = mkIID "{00020879-0001-0000-C000-000000000046}"

getApplication48 :: (Variant a1)
                 => IDialogs a0
                 -> IO a1
getApplication48 =
  propertyGet "Application"
              []
              outVariant

getCreator48 :: IDialogs a0
             -> IO XlCreator
getCreator48 =
  propertyGet "Creator"
              []
              outEnum

getParent63 :: IDialogs a0
            -> IO (IDispatch ())
getParent63 =
  propertyGet "Parent"
              []
              outIDispatch

getCount29 :: IDialogs a0
           -> IO Int32
getCount29 =
  propertyGet "Count"
              []
              outInt32

getItem17 :: XlBuiltInDialog
          -> IDialogs a0
          -> IO (Dialog ())
getItem17 index0 =
  propertyGet "Item"
              [inEnum index0]
              outIUnknown

getDefault27 :: XlBuiltInDialog
             -> IDialogs a0
             -> IO (Dialog ())
getDefault27 index0 =
  propertyGet "_Default"
              [inEnum index0]
              outIUnknown

getNewEnum19 :: IDialogs a0
             -> IO (IUnknown ())
getNewEnum19 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDialog
-- 
-- --------------------------------------------------
data IDialog_ a = IDialog__ 
type IDialog a = IDispatch (IDialog_ a)
iidIDialog :: IID (IDialog ())
iidIDialog = mkIID "{0002087A-0001-0000-C000-000000000046}"

getApplication49 :: (Variant a1)
                 => IDialog a0
                 -> IO a1
getApplication49 =
  propertyGet "Application"
              []
              outVariant

getCreator49 :: IDialog a0
             -> IO XlCreator
getCreator49 =
  propertyGet "Creator"
              []
              outEnum

getParent64 :: IDialog a0
            -> IO (IDispatch ())
getParent64 =
  propertyGet "Parent"
              []
              outIDispatch

show0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> IDialog a0
      -> IO Bool
show0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Show"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outBool

-- --------------------------------------------------
-- 
-- interface ISoundNote
-- 
-- --------------------------------------------------
data ISoundNote_ a = ISoundNote__ 
type ISoundNote a = IDispatch (ISoundNote_ a)
iidISoundNote :: IID (ISoundNote ())
iidISoundNote = mkIID "{0002087B-0001-0000-C000-000000000046}"

getApplication50 :: (Variant a1)
                 => ISoundNote a0
                 -> IO a1
getApplication50 =
  propertyGet "Application"
              []
              outVariant

getCreator50 :: ISoundNote a0
             -> IO XlCreator
getCreator50 =
  propertyGet "Creator"
              []
              outEnum

getParent65 :: ISoundNote a0
            -> IO (IDispatch ())
getParent65 =
  propertyGet "Parent"
              []
              outIDispatch

delete20 :: (Variant a1)
         => ISoundNote a0
         -> IO a1
delete20 =
  function1 "Delete"
            []
            outVariant

import0 :: (Variant a1)
        => String
        -> ISoundNote a0
        -> IO a1
import0 filename =
  function1 "Import"
            [inString filename]
            outVariant

play :: (Variant a1)
     => ISoundNote a0
     -> IO a1
play =
  function1 "Play"
            []
            outVariant

record :: (Variant a1)
       => ISoundNote a0
       -> IO a1
record =
  function1 "Record"
            []
            outVariant

-- --------------------------------------------------
-- 
-- interface IButton
-- 
-- --------------------------------------------------
data IButton_ a = IButton__ 
type IButton a = IDispatch (IButton_ a)
iidIButton :: IID (IButton ())
iidIButton = mkIID "{0002087D-0001-0000-C000-000000000046}"

getApplication51 :: (Variant a1)
                 => IButton a0
                 -> IO a1
getApplication51 =
  propertyGet "Application"
              []
              outVariant

getCreator51 :: IButton a0
             -> IO XlCreator
getCreator51 =
  propertyGet "Creator"
              []
              outEnum

getParent66 :: IButton a0
            -> IO (IDispatch ())
getParent66 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell :: IButton a0
                   -> IO (Range ())
getBottomRightCell =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront0 :: (Variant a1)
              => IButton a0
              -> IO a1
bringToFront0 =
  function1 "BringToFront"
            []
            outVariant

copy6 :: (Variant a1)
      => IButton a0
      -> IO a1
copy6 =
  function1 "Copy"
            []
            outVariant

copyPicture2 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IButton a0
             -> IO a1
copyPicture2 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut1 :: (Variant a1)
     => IButton a0
     -> IO a1
cut1 =
  function1 "Cut"
            []
            outVariant

delete21 :: (Variant a1)
         => IButton a0
         -> IO a1
delete21 =
  function1 "Delete"
            []
            outVariant

duplicate0 :: IButton a0
           -> IO (IDispatch ())
duplicate0 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled3 :: IButton a0
            -> IO Bool
getEnabled3 =
  propertyGet "Enabled"
              []
              outBool

setEnabled3 :: Bool
            -> IButton a0
            -> IO ()
setEnabled3 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight4 :: IButton a0
           -> IO Double
getHeight4 =
  propertyGet "Height"
              []
              outDouble

setHeight3 :: Double
           -> IButton a0
           -> IO ()
setHeight3 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex8 :: IButton a0
          -> IO Int32
getIndex8 =
  propertyGet "Index"
              []
              outInt32

getLeft4 :: IButton a0
         -> IO Double
getLeft4 =
  propertyGet "Left"
              []
              outDouble

setLeft3 :: Double
         -> IButton a0
         -> IO ()
setLeft3 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked2 :: IButton a0
           -> IO Bool
getLocked2 =
  propertyGet "Locked"
              []
              outBool

setLocked2 :: Bool
           -> IButton a0
           -> IO ()
setLocked2 rHS =
  propertySet "Locked"
              [inBool rHS]

getName13 :: IButton a0
          -> IO String
getName13 =
  propertyGet "Name"
              []
              outString

setName7 :: String
         -> IButton a0
         -> IO ()
setName7 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction2 :: IButton a0
             -> IO String
getOnAction2 =
  propertyGet "OnAction"
              []
              outString

setOnAction2 :: String
             -> IButton a0
             -> IO ()
setOnAction2 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement0 :: (Variant a1)
              => IButton a0
              -> IO a1
getPlacement0 =
  propertyGet "Placement"
              []
              outVariant

setPlacement0 :: a1
              -> IButton a0
              -> IO ()
setPlacement0 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject0 :: IButton a0
                -> IO Bool
getPrintObject0 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject0 :: Bool
                -> IButton a0
                -> IO ()
setPrintObject0 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select6 :: (Variant a1, Variant a2)
        => a2
        -> IButton a0
        -> IO a1
select6 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack0 :: (Variant a1)
            => IButton a0
            -> IO a1
sendToBack0 =
  function1 "SendToBack"
            []
            outVariant

getTop4 :: IButton a0
        -> IO Double
getTop4 =
  propertyGet "Top"
              []
              outDouble

setTop3 :: Double
        -> IButton a0
        -> IO ()
setTop3 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell :: IButton a0
               -> IO (Range ())
getTopLeftCell =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible12 :: IButton a0
             -> IO Bool
getVisible12 =
  propertyGet "Visible"
              []
              outBool

setVisible12 :: Bool
             -> IButton a0
             -> IO ()
setVisible12 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth5 :: IButton a0
          -> IO Double
getWidth5 =
  propertyGet "Width"
              []
              outDouble

setWidth4 :: Double
          -> IButton a0
          -> IO ()
setWidth4 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder0 :: IButton a0
           -> IO Int32
getZOrder0 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange0 :: IButton a0
               -> IO (ShapeRange ())
getShapeRange0 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent2 :: IButton a0
              -> IO Bool
getAddIndent2 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent2 :: Bool
              -> IButton a0
              -> IO ()
setAddIndent2 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont :: (Variant a1)
                 => IButton a0
                 -> IO a1
getAutoScaleFont =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont :: a1
                 -> IButton a0
                 -> IO ()
setAutoScaleFont rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize1 :: IButton a0
             -> IO Bool
getAutoSize1 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize1 :: Bool
             -> IButton a0
             -> IO ()
setAutoSize1 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption8 :: IButton a0
            -> IO String
getCaption8 =
  propertyGet "Caption"
              []
              outString

setCaption8 :: String
            -> IButton a0
            -> IO ()
setCaption8 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters1 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IButton a0
               -> IO (Characters ())
getCharacters1 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> IButton a0
               -> IO a1
checkSpelling5 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont3 :: IButton a0
         -> IO (Font ())
getFont3 =
  propertyGet "Font"
              []
              outIUnknown

getFormula3 :: IButton a0
            -> IO String
getFormula3 =
  propertyGet "Formula"
              []
              outString

setFormula3 :: String
            -> IButton a0
            -> IO ()
setFormula3 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment2 :: (Variant a1)
                        => IButton a0
                        -> IO a1
getHorizontalAlignment2 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment2 :: a1
                        -> IButton a0
                        -> IO ()
setHorizontalAlignment2 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText0 :: IButton a0
               -> IO Bool
getLockedText0 =
  propertyGet "LockedText"
              []
              outBool

setLockedText0 :: Bool
               -> IButton a0
               -> IO ()
setLockedText0 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation4 :: (Variant a1)
                => IButton a0
                -> IO a1
getOrientation4 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation4 :: a1
                -> IButton a0
                -> IO ()
setOrientation4 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText3 :: IButton a0
         -> IO String
getText3 =
  propertyGet "Text"
              []
              outString

setText2 :: String
         -> IButton a0
         -> IO ()
setText2 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment2 :: (Variant a1)
                      => IButton a0
                      -> IO a1
getVerticalAlignment2 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment2 :: a1
                      -> IButton a0
                      -> IO ()
setVerticalAlignment2 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder2 :: IButton a0
                 -> IO Int32
getReadingOrder2 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder2 :: Int32
                 -> IButton a0
                 -> IO ()
setReadingOrder2 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAccelerator0 :: (Variant a1)
                => IButton a0
                -> IO a1
getAccelerator0 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator0 :: a1
                -> IButton a0
                -> IO ()
setAccelerator0 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getCancelButton0 :: IButton a0
                 -> IO Bool
getCancelButton0 =
  propertyGet "CancelButton"
              []
              outBool

setCancelButton0 :: Bool
                 -> IButton a0
                 -> IO ()
setCancelButton0 rHS =
  propertySet "CancelButton"
              [inBool rHS]

getDefaultButton0 :: IButton a0
                  -> IO Bool
getDefaultButton0 =
  propertyGet "DefaultButton"
              []
              outBool

setDefaultButton0 :: Bool
                  -> IButton a0
                  -> IO ()
setDefaultButton0 rHS =
  propertySet "DefaultButton"
              [inBool rHS]

getDismissButton0 :: IButton a0
                  -> IO Bool
getDismissButton0 =
  propertyGet "DismissButton"
              []
              outBool

setDismissButton0 :: Bool
                  -> IButton a0
                  -> IO ()
setDismissButton0 rHS =
  propertySet "DismissButton"
              [inBool rHS]

getHelpButton0 :: IButton a0
               -> IO Bool
getHelpButton0 =
  propertyGet "HelpButton"
              []
              outBool

setHelpButton0 :: Bool
               -> IButton a0
               -> IO ()
setHelpButton0 rHS =
  propertySet "HelpButton"
              [inBool rHS]

getPhoneticAccelerator0 :: (Variant a1)
                        => IButton a0
                        -> IO a1
getPhoneticAccelerator0 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator0 :: a1
                        -> IButton a0
                        -> IO ()
setPhoneticAccelerator0 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IButtons
-- 
-- --------------------------------------------------
data IButtons_ a = IButtons__ 
type IButtons a = IDispatch (IButtons_ a)
iidIButtons :: IID (IButtons ())
iidIButtons = mkIID "{0002087E-0001-0000-C000-000000000046}"

getApplication52 :: (Variant a1)
                 => IButtons a0
                 -> IO a1
getApplication52 =
  propertyGet "Application"
              []
              outVariant

getCreator52 :: IButtons a0
             -> IO XlCreator
getCreator52 =
  propertyGet "Creator"
              []
              outEnum

getParent67 :: IButtons a0
            -> IO (IDispatch ())
getParent67 =
  propertyGet "Parent"
              []
              outIDispatch

dummy31 :: IButtons a0
        -> IO ()
dummy31 =
  method0 "_Dummy3"
          []

bringToFront1 :: (Variant a1)
              => IButtons a0
              -> IO a1
bringToFront1 =
  function1 "BringToFront"
            []
            outVariant

copy7 :: (Variant a1)
      => IButtons a0
      -> IO a1
copy7 =
  function1 "Copy"
            []
            outVariant

copyPicture3 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IButtons a0
             -> IO a1
copyPicture3 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut2 :: (Variant a1)
     => IButtons a0
     -> IO a1
cut2 =
  function1 "Cut"
            []
            outVariant

delete22 :: (Variant a1)
         => IButtons a0
         -> IO a1
delete22 =
  function1 "Delete"
            []
            outVariant

duplicate1 :: IButtons a0
           -> IO (IDispatch ())
duplicate1 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled4 :: IButtons a0
            -> IO Bool
getEnabled4 =
  propertyGet "Enabled"
              []
              outBool

setEnabled4 :: Bool
            -> IButtons a0
            -> IO ()
setEnabled4 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight5 :: IButtons a0
           -> IO Double
getHeight5 =
  propertyGet "Height"
              []
              outDouble

setHeight4 :: Double
           -> IButtons a0
           -> IO ()
setHeight4 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy121 :: IButtons a0
         -> IO ()
dummy121 =
  method0 "_Dummy12"
          []

getLeft5 :: IButtons a0
         -> IO Double
getLeft5 =
  propertyGet "Left"
              []
              outDouble

setLeft4 :: Double
         -> IButtons a0
         -> IO ()
setLeft4 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked3 :: IButtons a0
           -> IO Bool
getLocked3 =
  propertyGet "Locked"
              []
              outBool

setLocked3 :: Bool
           -> IButtons a0
           -> IO ()
setLocked3 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy151 :: IButtons a0
         -> IO ()
dummy151 =
  method0 "_Dummy15"
          []

getOnAction3 :: IButtons a0
             -> IO String
getOnAction3 =
  propertyGet "OnAction"
              []
              outString

setOnAction3 :: String
             -> IButtons a0
             -> IO ()
setOnAction3 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement1 :: (Variant a1)
              => IButtons a0
              -> IO a1
getPlacement1 =
  propertyGet "Placement"
              []
              outVariant

setPlacement1 :: a1
              -> IButtons a0
              -> IO ()
setPlacement1 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject1 :: IButtons a0
                -> IO Bool
getPrintObject1 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject1 :: Bool
                -> IButtons a0
                -> IO ()
setPrintObject1 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select7 :: (Variant a1, Variant a2)
        => a2
        -> IButtons a0
        -> IO a1
select7 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack1 :: (Variant a1)
            => IButtons a0
            -> IO a1
sendToBack1 =
  function1 "SendToBack"
            []
            outVariant

getTop5 :: IButtons a0
        -> IO Double
getTop5 =
  propertyGet "Top"
              []
              outDouble

setTop4 :: Double
        -> IButtons a0
        -> IO ()
setTop4 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy220 :: IButtons a0
         -> IO ()
dummy220 =
  method0 "_Dummy22"
          []

getVisible13 :: IButtons a0
             -> IO Bool
getVisible13 =
  propertyGet "Visible"
              []
              outBool

setVisible13 :: Bool
             -> IButtons a0
             -> IO ()
setVisible13 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth6 :: IButtons a0
          -> IO Double
getWidth6 =
  propertyGet "Width"
              []
              outDouble

setWidth5 :: Double
          -> IButtons a0
          -> IO ()
setWidth5 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder1 :: IButtons a0
           -> IO Int32
getZOrder1 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange1 :: IButtons a0
               -> IO (ShapeRange ())
getShapeRange1 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent3 :: IButtons a0
              -> IO Bool
getAddIndent3 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent3 :: Bool
              -> IButtons a0
              -> IO ()
setAddIndent3 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont0 :: (Variant a1)
                  => IButtons a0
                  -> IO a1
getAutoScaleFont0 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont0 :: a1
                  -> IButtons a0
                  -> IO ()
setAutoScaleFont0 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize2 :: IButtons a0
             -> IO Bool
getAutoSize2 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize2 :: Bool
             -> IButtons a0
             -> IO ()
setAutoSize2 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption9 :: IButtons a0
            -> IO String
getCaption9 =
  propertyGet "Caption"
              []
              outString

setCaption9 :: String
            -> IButtons a0
            -> IO ()
setCaption9 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters2 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IButtons a0
               -> IO (Characters ())
getCharacters2 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling6 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> IButtons a0
               -> IO a1
checkSpelling6 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont4 :: IButtons a0
         -> IO (Font ())
getFont4 =
  propertyGet "Font"
              []
              outIUnknown

getFormula4 :: IButtons a0
            -> IO String
getFormula4 =
  propertyGet "Formula"
              []
              outString

setFormula4 :: String
            -> IButtons a0
            -> IO ()
setFormula4 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment3 :: (Variant a1)
                        => IButtons a0
                        -> IO a1
getHorizontalAlignment3 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment3 :: a1
                        -> IButtons a0
                        -> IO ()
setHorizontalAlignment3 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText1 :: IButtons a0
               -> IO Bool
getLockedText1 =
  propertyGet "LockedText"
              []
              outBool

setLockedText1 :: Bool
               -> IButtons a0
               -> IO ()
setLockedText1 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation5 :: (Variant a1)
                => IButtons a0
                -> IO a1
getOrientation5 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation5 :: a1
                -> IButtons a0
                -> IO ()
setOrientation5 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText4 :: IButtons a0
         -> IO String
getText4 =
  propertyGet "Text"
              []
              outString

setText3 :: String
         -> IButtons a0
         -> IO ()
setText3 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment3 :: (Variant a1)
                      => IButtons a0
                      -> IO a1
getVerticalAlignment3 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment3 :: a1
                      -> IButtons a0
                      -> IO ()
setVerticalAlignment3 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder3 :: IButtons a0
                 -> IO Int32
getReadingOrder3 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder3 :: Int32
                 -> IButtons a0
                 -> IO ()
setReadingOrder3 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAccelerator1 :: (Variant a1)
                => IButtons a0
                -> IO a1
getAccelerator1 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator1 :: a1
                -> IButtons a0
                -> IO ()
setAccelerator1 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getCancelButton1 :: IButtons a0
                 -> IO Bool
getCancelButton1 =
  propertyGet "CancelButton"
              []
              outBool

setCancelButton1 :: Bool
                 -> IButtons a0
                 -> IO ()
setCancelButton1 rHS =
  propertySet "CancelButton"
              [inBool rHS]

getDefaultButton1 :: IButtons a0
                  -> IO Bool
getDefaultButton1 =
  propertyGet "DefaultButton"
              []
              outBool

setDefaultButton1 :: Bool
                  -> IButtons a0
                  -> IO ()
setDefaultButton1 rHS =
  propertySet "DefaultButton"
              [inBool rHS]

getDismissButton1 :: IButtons a0
                  -> IO Bool
getDismissButton1 =
  propertyGet "DismissButton"
              []
              outBool

setDismissButton1 :: Bool
                  -> IButtons a0
                  -> IO ()
setDismissButton1 rHS =
  propertySet "DismissButton"
              [inBool rHS]

getHelpButton1 :: IButtons a0
               -> IO Bool
getHelpButton1 =
  propertyGet "HelpButton"
              []
              outBool

setHelpButton1 :: Bool
               -> IButtons a0
               -> IO ()
setHelpButton1 rHS =
  propertySet "HelpButton"
              [inBool rHS]

getPhoneticAccelerator1 :: (Variant a1)
                        => IButtons a0
                        -> IO a1
getPhoneticAccelerator1 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator1 :: a1
                        -> IButtons a0
                        -> IO ()
setPhoneticAccelerator1 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

add21 :: Double
      -> Double
      -> Double
      -> Double
      -> IButtons a0
      -> IO (Button ())
add21 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount30 :: IButtons a0
           -> IO Int32
getCount30 =
  propertyGet "Count"
              []
              outInt32

group1 :: IButtons a0
       -> IO (GroupObject ())
group1 =
  function1 "Group"
            []
            outIUnknown

item10 :: a1
       -> IButtons a0
       -> IO (IDispatch ())
item10 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum7 :: IButtons a0
         -> IO (IUnknown ())
newEnum7 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ICheckBox
-- 
-- --------------------------------------------------
data ICheckBox_ a = ICheckBox__ 
type ICheckBox a = IDispatch (ICheckBox_ a)
iidICheckBox :: IID (ICheckBox ())
iidICheckBox = mkIID "{0002087F-0001-0000-C000-000000000046}"

getApplication53 :: (Variant a1)
                 => ICheckBox a0
                 -> IO a1
getApplication53 =
  propertyGet "Application"
              []
              outVariant

getCreator53 :: ICheckBox a0
             -> IO XlCreator
getCreator53 =
  propertyGet "Creator"
              []
              outEnum

getParent68 :: ICheckBox a0
            -> IO (IDispatch ())
getParent68 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell0 :: ICheckBox a0
                    -> IO (Range ())
getBottomRightCell0 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront2 :: (Variant a1)
              => ICheckBox a0
              -> IO a1
bringToFront2 =
  function1 "BringToFront"
            []
            outVariant

copy8 :: (Variant a1)
      => ICheckBox a0
      -> IO a1
copy8 =
  function1 "Copy"
            []
            outVariant

copyPicture4 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> ICheckBox a0
             -> IO a1
copyPicture4 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut3 :: (Variant a1)
     => ICheckBox a0
     -> IO a1
cut3 =
  function1 "Cut"
            []
            outVariant

delete23 :: (Variant a1)
         => ICheckBox a0
         -> IO a1
delete23 =
  function1 "Delete"
            []
            outVariant

duplicate2 :: ICheckBox a0
           -> IO (IDispatch ())
duplicate2 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled5 :: ICheckBox a0
            -> IO Bool
getEnabled5 =
  propertyGet "Enabled"
              []
              outBool

setEnabled5 :: Bool
            -> ICheckBox a0
            -> IO ()
setEnabled5 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight6 :: ICheckBox a0
           -> IO Double
getHeight6 =
  propertyGet "Height"
              []
              outDouble

setHeight5 :: Double
           -> ICheckBox a0
           -> IO ()
setHeight5 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex9 :: ICheckBox a0
          -> IO Int32
getIndex9 =
  propertyGet "Index"
              []
              outInt32

getLeft6 :: ICheckBox a0
         -> IO Double
getLeft6 =
  propertyGet "Left"
              []
              outDouble

setLeft5 :: Double
         -> ICheckBox a0
         -> IO ()
setLeft5 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked4 :: ICheckBox a0
           -> IO Bool
getLocked4 =
  propertyGet "Locked"
              []
              outBool

setLocked4 :: Bool
           -> ICheckBox a0
           -> IO ()
setLocked4 rHS =
  propertySet "Locked"
              [inBool rHS]

getName14 :: ICheckBox a0
          -> IO String
getName14 =
  propertyGet "Name"
              []
              outString

setName8 :: String
         -> ICheckBox a0
         -> IO ()
setName8 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction4 :: ICheckBox a0
             -> IO String
getOnAction4 =
  propertyGet "OnAction"
              []
              outString

setOnAction4 :: String
             -> ICheckBox a0
             -> IO ()
setOnAction4 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement2 :: (Variant a1)
              => ICheckBox a0
              -> IO a1
getPlacement2 =
  propertyGet "Placement"
              []
              outVariant

setPlacement2 :: a1
              -> ICheckBox a0
              -> IO ()
setPlacement2 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject2 :: ICheckBox a0
                -> IO Bool
getPrintObject2 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject2 :: Bool
                -> ICheckBox a0
                -> IO ()
setPrintObject2 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select8 :: (Variant a1, Variant a2)
        => a2
        -> ICheckBox a0
        -> IO a1
select8 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack2 :: (Variant a1)
            => ICheckBox a0
            -> IO a1
sendToBack2 =
  function1 "SendToBack"
            []
            outVariant

getTop6 :: ICheckBox a0
        -> IO Double
getTop6 =
  propertyGet "Top"
              []
              outDouble

setTop5 :: Double
        -> ICheckBox a0
        -> IO ()
setTop5 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell0 :: ICheckBox a0
                -> IO (Range ())
getTopLeftCell0 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible14 :: ICheckBox a0
             -> IO Bool
getVisible14 =
  propertyGet "Visible"
              []
              outBool

setVisible14 :: Bool
             -> ICheckBox a0
             -> IO ()
setVisible14 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth7 :: ICheckBox a0
          -> IO Double
getWidth7 =
  propertyGet "Width"
              []
              outDouble

setWidth6 :: Double
          -> ICheckBox a0
          -> IO ()
setWidth6 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder2 :: ICheckBox a0
           -> IO Int32
getZOrder2 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange2 :: ICheckBox a0
               -> IO (ShapeRange ())
getShapeRange2 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption10 :: ICheckBox a0
             -> IO String
getCaption10 =
  propertyGet "Caption"
              []
              outString

setCaption10 :: String
             -> ICheckBox a0
             -> IO ()
setCaption10 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters3 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> ICheckBox a0
               -> IO (Characters ())
getCharacters3 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling7 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> ICheckBox a0
               -> IO a1
checkSpelling7 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText2 :: ICheckBox a0
               -> IO Bool
getLockedText2 =
  propertyGet "LockedText"
              []
              outBool

setLockedText2 :: Bool
               -> ICheckBox a0
               -> IO ()
setLockedText2 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText5 :: ICheckBox a0
         -> IO String
getText5 =
  propertyGet "Text"
              []
              outString

setText4 :: String
         -> ICheckBox a0
         -> IO ()
setText4 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator2 :: (Variant a1)
                => ICheckBox a0
                -> IO a1
getAccelerator2 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator2 :: a1
                -> ICheckBox a0
                -> IO ()
setAccelerator2 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getBorder1 :: ICheckBox a0
           -> IO (Border ())
getBorder1 =
  propertyGet "Border"
              []
              outIUnknown

getDefault28 :: ICheckBox a0
             -> IO Int32
getDefault28 =
  propertyGet "_Default"
              []
              outInt32

setDefault5 :: Int32
            -> ICheckBox a0
            -> IO ()
setDefault5 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading0 :: ICheckBox a0
                     -> IO Bool
getDisplay3DShading0 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading0 :: Bool
                     -> ICheckBox a0
                     -> IO ()
setDisplay3DShading0 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getInterior2 :: ICheckBox a0
             -> IO (Interior ())
getInterior2 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell0 :: ICheckBox a0
               -> IO String
getLinkedCell0 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell0 :: String
               -> ICheckBox a0
               -> IO ()
setLinkedCell0 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getPhoneticAccelerator2 :: (Variant a1)
                        => ICheckBox a0
                        -> IO a1
getPhoneticAccelerator2 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator2 :: a1
                        -> ICheckBox a0
                        -> IO ()
setPhoneticAccelerator2 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

getValue9 :: (Variant a1)
          => ICheckBox a0
          -> IO a1
getValue9 =
  propertyGet "Value"
              []
              outVariant

setValue7 :: a1
          -> ICheckBox a0
          -> IO ()
setValue7 rHS =
  propertySet "Value"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface ICheckBoxes
-- 
-- --------------------------------------------------
data ICheckBoxes_ a = ICheckBoxes__ 
type ICheckBoxes a = IDispatch (ICheckBoxes_ a)
iidICheckBoxes :: IID (ICheckBoxes ())
iidICheckBoxes = mkIID "{00020880-0001-0000-C000-000000000046}"

getApplication54 :: (Variant a1)
                 => ICheckBoxes a0
                 -> IO a1
getApplication54 =
  propertyGet "Application"
              []
              outVariant

getCreator54 :: ICheckBoxes a0
             -> IO XlCreator
getCreator54 =
  propertyGet "Creator"
              []
              outEnum

getParent69 :: ICheckBoxes a0
            -> IO (IDispatch ())
getParent69 =
  propertyGet "Parent"
              []
              outIDispatch

dummy32 :: ICheckBoxes a0
        -> IO ()
dummy32 =
  method0 "_Dummy3"
          []

bringToFront3 :: (Variant a1)
              => ICheckBoxes a0
              -> IO a1
bringToFront3 =
  function1 "BringToFront"
            []
            outVariant

copy9 :: (Variant a1)
      => ICheckBoxes a0
      -> IO a1
copy9 =
  function1 "Copy"
            []
            outVariant

copyPicture5 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> ICheckBoxes a0
             -> IO a1
copyPicture5 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut4 :: (Variant a1)
     => ICheckBoxes a0
     -> IO a1
cut4 =
  function1 "Cut"
            []
            outVariant

delete24 :: (Variant a1)
         => ICheckBoxes a0
         -> IO a1
delete24 =
  function1 "Delete"
            []
            outVariant

duplicate3 :: ICheckBoxes a0
           -> IO (IDispatch ())
duplicate3 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled6 :: ICheckBoxes a0
            -> IO Bool
getEnabled6 =
  propertyGet "Enabled"
              []
              outBool

setEnabled6 :: Bool
            -> ICheckBoxes a0
            -> IO ()
setEnabled6 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight7 :: ICheckBoxes a0
           -> IO Double
getHeight7 =
  propertyGet "Height"
              []
              outDouble

setHeight6 :: Double
           -> ICheckBoxes a0
           -> IO ()
setHeight6 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy122 :: ICheckBoxes a0
         -> IO ()
dummy122 =
  method0 "_Dummy12"
          []

getLeft7 :: ICheckBoxes a0
         -> IO Double
getLeft7 =
  propertyGet "Left"
              []
              outDouble

setLeft6 :: Double
         -> ICheckBoxes a0
         -> IO ()
setLeft6 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked5 :: ICheckBoxes a0
           -> IO Bool
getLocked5 =
  propertyGet "Locked"
              []
              outBool

setLocked5 :: Bool
           -> ICheckBoxes a0
           -> IO ()
setLocked5 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy152 :: ICheckBoxes a0
         -> IO ()
dummy152 =
  method0 "_Dummy15"
          []

getOnAction5 :: ICheckBoxes a0
             -> IO String
getOnAction5 =
  propertyGet "OnAction"
              []
              outString

setOnAction5 :: String
             -> ICheckBoxes a0
             -> IO ()
setOnAction5 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement3 :: (Variant a1)
              => ICheckBoxes a0
              -> IO a1
getPlacement3 =
  propertyGet "Placement"
              []
              outVariant

setPlacement3 :: a1
              -> ICheckBoxes a0
              -> IO ()
setPlacement3 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject3 :: ICheckBoxes a0
                -> IO Bool
getPrintObject3 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject3 :: Bool
                -> ICheckBoxes a0
                -> IO ()
setPrintObject3 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select9 :: (Variant a1, Variant a2)
        => a2
        -> ICheckBoxes a0
        -> IO a1
select9 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack3 :: (Variant a1)
            => ICheckBoxes a0
            -> IO a1
sendToBack3 =
  function1 "SendToBack"
            []
            outVariant

getTop7 :: ICheckBoxes a0
        -> IO Double
getTop7 =
  propertyGet "Top"
              []
              outDouble

setTop6 :: Double
        -> ICheckBoxes a0
        -> IO ()
setTop6 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy221 :: ICheckBoxes a0
         -> IO ()
dummy221 =
  method0 "_Dummy22"
          []

getVisible15 :: ICheckBoxes a0
             -> IO Bool
getVisible15 =
  propertyGet "Visible"
              []
              outBool

setVisible15 :: Bool
             -> ICheckBoxes a0
             -> IO ()
setVisible15 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth8 :: ICheckBoxes a0
          -> IO Double
getWidth8 =
  propertyGet "Width"
              []
              outDouble

setWidth7 :: Double
          -> ICheckBoxes a0
          -> IO ()
setWidth7 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder3 :: ICheckBoxes a0
           -> IO Int32
getZOrder3 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange3 :: ICheckBoxes a0
               -> IO (ShapeRange ())
getShapeRange3 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption11 :: ICheckBoxes a0
             -> IO String
getCaption11 =
  propertyGet "Caption"
              []
              outString

setCaption11 :: String
             -> ICheckBoxes a0
             -> IO ()
setCaption11 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters4 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> ICheckBoxes a0
               -> IO (Characters ())
getCharacters4 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling8 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> ICheckBoxes a0
               -> IO a1
checkSpelling8 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText3 :: ICheckBoxes a0
               -> IO Bool
getLockedText3 =
  propertyGet "LockedText"
              []
              outBool

setLockedText3 :: Bool
               -> ICheckBoxes a0
               -> IO ()
setLockedText3 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText6 :: ICheckBoxes a0
         -> IO String
getText6 =
  propertyGet "Text"
              []
              outString

setText5 :: String
         -> ICheckBoxes a0
         -> IO ()
setText5 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator3 :: (Variant a1)
                => ICheckBoxes a0
                -> IO a1
getAccelerator3 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator3 :: a1
                -> ICheckBoxes a0
                -> IO ()
setAccelerator3 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getBorder2 :: ICheckBoxes a0
           -> IO (Border ())
getBorder2 =
  propertyGet "Border"
              []
              outIUnknown

getDefault29 :: ICheckBoxes a0
             -> IO Int32
getDefault29 =
  propertyGet "_Default"
              []
              outInt32

setDefault6 :: Int32
            -> ICheckBoxes a0
            -> IO ()
setDefault6 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading1 :: ICheckBoxes a0
                     -> IO Bool
getDisplay3DShading1 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading1 :: Bool
                     -> ICheckBoxes a0
                     -> IO ()
setDisplay3DShading1 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getInterior3 :: ICheckBoxes a0
             -> IO (Interior ())
getInterior3 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell1 :: ICheckBoxes a0
               -> IO String
getLinkedCell1 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell1 :: String
               -> ICheckBoxes a0
               -> IO ()
setLinkedCell1 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getPhoneticAccelerator3 :: (Variant a1)
                        => ICheckBoxes a0
                        -> IO a1
getPhoneticAccelerator3 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator3 :: a1
                        -> ICheckBoxes a0
                        -> IO ()
setPhoneticAccelerator3 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

getValue10 :: (Variant a1)
           => ICheckBoxes a0
           -> IO a1
getValue10 =
  propertyGet "Value"
              []
              outVariant

setValue8 :: a1
          -> ICheckBoxes a0
          -> IO ()
setValue8 rHS =
  propertySet "Value"
              [inVariant rHS]

add22 :: Double
      -> Double
      -> Double
      -> Double
      -> ICheckBoxes a0
      -> IO (CheckBox ())
add22 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount31 :: ICheckBoxes a0
           -> IO Int32
getCount31 =
  propertyGet "Count"
              []
              outInt32

group2 :: ICheckBoxes a0
       -> IO (GroupObject ())
group2 =
  function1 "Group"
            []
            outIUnknown

item11 :: a1
       -> ICheckBoxes a0
       -> IO (IDispatch ())
item11 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum8 :: ICheckBoxes a0
         -> IO (IUnknown ())
newEnum8 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IOptionButton
-- 
-- --------------------------------------------------
data IOptionButton_ a = IOptionButton__ 
type IOptionButton a = IDispatch (IOptionButton_ a)
iidIOptionButton :: IID (IOptionButton ())
iidIOptionButton = mkIID "{00020881-0001-0000-C000-000000000046}"

getApplication55 :: (Variant a1)
                 => IOptionButton a0
                 -> IO a1
getApplication55 =
  propertyGet "Application"
              []
              outVariant

getCreator55 :: IOptionButton a0
             -> IO XlCreator
getCreator55 =
  propertyGet "Creator"
              []
              outEnum

getParent70 :: IOptionButton a0
            -> IO (IDispatch ())
getParent70 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell1 :: IOptionButton a0
                    -> IO (Range ())
getBottomRightCell1 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront4 :: (Variant a1)
              => IOptionButton a0
              -> IO a1
bringToFront4 =
  function1 "BringToFront"
            []
            outVariant

copy10 :: (Variant a1)
       => IOptionButton a0
       -> IO a1
copy10 =
  function1 "Copy"
            []
            outVariant

copyPicture6 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IOptionButton a0
             -> IO a1
copyPicture6 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut5 :: (Variant a1)
     => IOptionButton a0
     -> IO a1
cut5 =
  function1 "Cut"
            []
            outVariant

delete25 :: (Variant a1)
         => IOptionButton a0
         -> IO a1
delete25 =
  function1 "Delete"
            []
            outVariant

duplicate4 :: IOptionButton a0
           -> IO (IDispatch ())
duplicate4 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled7 :: IOptionButton a0
            -> IO Bool
getEnabled7 =
  propertyGet "Enabled"
              []
              outBool

setEnabled7 :: Bool
            -> IOptionButton a0
            -> IO ()
setEnabled7 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight8 :: IOptionButton a0
           -> IO Double
getHeight8 =
  propertyGet "Height"
              []
              outDouble

setHeight7 :: Double
           -> IOptionButton a0
           -> IO ()
setHeight7 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex10 :: IOptionButton a0
           -> IO Int32
getIndex10 =
  propertyGet "Index"
              []
              outInt32

getLeft8 :: IOptionButton a0
         -> IO Double
getLeft8 =
  propertyGet "Left"
              []
              outDouble

setLeft7 :: Double
         -> IOptionButton a0
         -> IO ()
setLeft7 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked6 :: IOptionButton a0
           -> IO Bool
getLocked6 =
  propertyGet "Locked"
              []
              outBool

setLocked6 :: Bool
           -> IOptionButton a0
           -> IO ()
setLocked6 rHS =
  propertySet "Locked"
              [inBool rHS]

getName15 :: IOptionButton a0
          -> IO String
getName15 =
  propertyGet "Name"
              []
              outString

setName9 :: String
         -> IOptionButton a0
         -> IO ()
setName9 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction6 :: IOptionButton a0
             -> IO String
getOnAction6 =
  propertyGet "OnAction"
              []
              outString

setOnAction6 :: String
             -> IOptionButton a0
             -> IO ()
setOnAction6 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement4 :: (Variant a1)
              => IOptionButton a0
              -> IO a1
getPlacement4 =
  propertyGet "Placement"
              []
              outVariant

setPlacement4 :: a1
              -> IOptionButton a0
              -> IO ()
setPlacement4 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject4 :: IOptionButton a0
                -> IO Bool
getPrintObject4 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject4 :: Bool
                -> IOptionButton a0
                -> IO ()
setPrintObject4 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select10 :: (Variant a1, Variant a2)
         => a2
         -> IOptionButton a0
         -> IO a1
select10 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack4 :: (Variant a1)
            => IOptionButton a0
            -> IO a1
sendToBack4 =
  function1 "SendToBack"
            []
            outVariant

getTop8 :: IOptionButton a0
        -> IO Double
getTop8 =
  propertyGet "Top"
              []
              outDouble

setTop7 :: Double
        -> IOptionButton a0
        -> IO ()
setTop7 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell1 :: IOptionButton a0
                -> IO (Range ())
getTopLeftCell1 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible16 :: IOptionButton a0
             -> IO Bool
getVisible16 =
  propertyGet "Visible"
              []
              outBool

setVisible16 :: Bool
             -> IOptionButton a0
             -> IO ()
setVisible16 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth9 :: IOptionButton a0
          -> IO Double
getWidth9 =
  propertyGet "Width"
              []
              outDouble

setWidth8 :: Double
          -> IOptionButton a0
          -> IO ()
setWidth8 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder4 :: IOptionButton a0
           -> IO Int32
getZOrder4 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange4 :: IOptionButton a0
               -> IO (ShapeRange ())
getShapeRange4 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption12 :: IOptionButton a0
             -> IO String
getCaption12 =
  propertyGet "Caption"
              []
              outString

setCaption12 :: String
             -> IOptionButton a0
             -> IO ()
setCaption12 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters5 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IOptionButton a0
               -> IO (Characters ())
getCharacters5 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling9 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a2
               -> a3
               -> a4
               -> a5
               -> IOptionButton a0
               -> IO a1
checkSpelling9 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText4 :: IOptionButton a0
               -> IO Bool
getLockedText4 =
  propertyGet "LockedText"
              []
              outBool

setLockedText4 :: Bool
               -> IOptionButton a0
               -> IO ()
setLockedText4 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText7 :: IOptionButton a0
         -> IO String
getText7 =
  propertyGet "Text"
              []
              outString

setText6 :: String
         -> IOptionButton a0
         -> IO ()
setText6 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator4 :: (Variant a1)
                => IOptionButton a0
                -> IO a1
getAccelerator4 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator4 :: a1
                -> IOptionButton a0
                -> IO ()
setAccelerator4 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getBorder3 :: IOptionButton a0
           -> IO (Border ())
getBorder3 =
  propertyGet "Border"
              []
              outIUnknown

getDefault30 :: IOptionButton a0
             -> IO Int32
getDefault30 =
  propertyGet "_Default"
              []
              outInt32

setDefault7 :: Int32
            -> IOptionButton a0
            -> IO ()
setDefault7 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading2 :: IOptionButton a0
                     -> IO Bool
getDisplay3DShading2 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading2 :: Bool
                     -> IOptionButton a0
                     -> IO ()
setDisplay3DShading2 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getInterior4 :: IOptionButton a0
             -> IO (Interior ())
getInterior4 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell2 :: IOptionButton a0
               -> IO String
getLinkedCell2 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell2 :: String
               -> IOptionButton a0
               -> IO ()
setLinkedCell2 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getPhoneticAccelerator4 :: (Variant a1)
                        => IOptionButton a0
                        -> IO a1
getPhoneticAccelerator4 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator4 :: a1
                        -> IOptionButton a0
                        -> IO ()
setPhoneticAccelerator4 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

getValue11 :: (Variant a1)
           => IOptionButton a0
           -> IO a1
getValue11 =
  propertyGet "Value"
              []
              outVariant

setValue9 :: a1
          -> IOptionButton a0
          -> IO ()
setValue9 rHS =
  propertySet "Value"
              [inVariant rHS]

getGroupBox :: IOptionButton a0
            -> IO (GroupBox ())
getGroupBox =
  propertyGet "GroupBox"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IOptionButtons
-- 
-- --------------------------------------------------
data IOptionButtons_ a = IOptionButtons__ 
type IOptionButtons a = IDispatch (IOptionButtons_ a)
iidIOptionButtons :: IID (IOptionButtons ())
iidIOptionButtons = mkIID "{00020882-0001-0000-C000-000000000046}"

getApplication56 :: (Variant a1)
                 => IOptionButtons a0
                 -> IO a1
getApplication56 =
  propertyGet "Application"
              []
              outVariant

getCreator56 :: IOptionButtons a0
             -> IO XlCreator
getCreator56 =
  propertyGet "Creator"
              []
              outEnum

getParent71 :: IOptionButtons a0
            -> IO (IDispatch ())
getParent71 =
  propertyGet "Parent"
              []
              outIDispatch

dummy33 :: IOptionButtons a0
        -> IO ()
dummy33 =
  method0 "_Dummy3"
          []

bringToFront5 :: (Variant a1)
              => IOptionButtons a0
              -> IO a1
bringToFront5 =
  function1 "BringToFront"
            []
            outVariant

copy11 :: (Variant a1)
       => IOptionButtons a0
       -> IO a1
copy11 =
  function1 "Copy"
            []
            outVariant

copyPicture7 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IOptionButtons a0
             -> IO a1
copyPicture7 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut6 :: (Variant a1)
     => IOptionButtons a0
     -> IO a1
cut6 =
  function1 "Cut"
            []
            outVariant

delete26 :: (Variant a1)
         => IOptionButtons a0
         -> IO a1
delete26 =
  function1 "Delete"
            []
            outVariant

duplicate5 :: IOptionButtons a0
           -> IO (IDispatch ())
duplicate5 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled8 :: IOptionButtons a0
            -> IO Bool
getEnabled8 =
  propertyGet "Enabled"
              []
              outBool

setEnabled8 :: Bool
            -> IOptionButtons a0
            -> IO ()
setEnabled8 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight9 :: IOptionButtons a0
           -> IO Double
getHeight9 =
  propertyGet "Height"
              []
              outDouble

setHeight8 :: Double
           -> IOptionButtons a0
           -> IO ()
setHeight8 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy123 :: IOptionButtons a0
         -> IO ()
dummy123 =
  method0 "_Dummy12"
          []

getLeft9 :: IOptionButtons a0
         -> IO Double
getLeft9 =
  propertyGet "Left"
              []
              outDouble

setLeft8 :: Double
         -> IOptionButtons a0
         -> IO ()
setLeft8 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked7 :: IOptionButtons a0
           -> IO Bool
getLocked7 =
  propertyGet "Locked"
              []
              outBool

setLocked7 :: Bool
           -> IOptionButtons a0
           -> IO ()
setLocked7 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy153 :: IOptionButtons a0
         -> IO ()
dummy153 =
  method0 "_Dummy15"
          []

getOnAction7 :: IOptionButtons a0
             -> IO String
getOnAction7 =
  propertyGet "OnAction"
              []
              outString

setOnAction7 :: String
             -> IOptionButtons a0
             -> IO ()
setOnAction7 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement5 :: (Variant a1)
              => IOptionButtons a0
              -> IO a1
getPlacement5 =
  propertyGet "Placement"
              []
              outVariant

setPlacement5 :: a1
              -> IOptionButtons a0
              -> IO ()
setPlacement5 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject5 :: IOptionButtons a0
                -> IO Bool
getPrintObject5 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject5 :: Bool
                -> IOptionButtons a0
                -> IO ()
setPrintObject5 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select11 :: (Variant a1, Variant a2)
         => a2
         -> IOptionButtons a0
         -> IO a1
select11 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack5 :: (Variant a1)
            => IOptionButtons a0
            -> IO a1
sendToBack5 =
  function1 "SendToBack"
            []
            outVariant

getTop9 :: IOptionButtons a0
        -> IO Double
getTop9 =
  propertyGet "Top"
              []
              outDouble

setTop8 :: Double
        -> IOptionButtons a0
        -> IO ()
setTop8 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy222 :: IOptionButtons a0
         -> IO ()
dummy222 =
  method0 "_Dummy22"
          []

getVisible17 :: IOptionButtons a0
             -> IO Bool
getVisible17 =
  propertyGet "Visible"
              []
              outBool

setVisible17 :: Bool
             -> IOptionButtons a0
             -> IO ()
setVisible17 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth10 :: IOptionButtons a0
           -> IO Double
getWidth10 =
  propertyGet "Width"
              []
              outDouble

setWidth9 :: Double
          -> IOptionButtons a0
          -> IO ()
setWidth9 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder5 :: IOptionButtons a0
           -> IO Int32
getZOrder5 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange5 :: IOptionButtons a0
               -> IO (ShapeRange ())
getShapeRange5 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption13 :: IOptionButtons a0
             -> IO String
getCaption13 =
  propertyGet "Caption"
              []
              outString

setCaption13 :: String
             -> IOptionButtons a0
             -> IO ()
setCaption13 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters6 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IOptionButtons a0
               -> IO (Characters ())
getCharacters6 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling10 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IOptionButtons a0
                -> IO a1
checkSpelling10 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText5 :: IOptionButtons a0
               -> IO Bool
getLockedText5 =
  propertyGet "LockedText"
              []
              outBool

setLockedText5 :: Bool
               -> IOptionButtons a0
               -> IO ()
setLockedText5 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText8 :: IOptionButtons a0
         -> IO String
getText8 =
  propertyGet "Text"
              []
              outString

setText7 :: String
         -> IOptionButtons a0
         -> IO ()
setText7 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator5 :: (Variant a1)
                => IOptionButtons a0
                -> IO a1
getAccelerator5 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator5 :: a1
                -> IOptionButtons a0
                -> IO ()
setAccelerator5 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getBorder4 :: IOptionButtons a0
           -> IO (Border ())
getBorder4 =
  propertyGet "Border"
              []
              outIUnknown

getDefault31 :: IOptionButtons a0
             -> IO Int32
getDefault31 =
  propertyGet "_Default"
              []
              outInt32

setDefault8 :: Int32
            -> IOptionButtons a0
            -> IO ()
setDefault8 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading3 :: IOptionButtons a0
                     -> IO Bool
getDisplay3DShading3 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading3 :: Bool
                     -> IOptionButtons a0
                     -> IO ()
setDisplay3DShading3 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getInterior5 :: IOptionButtons a0
             -> IO (Interior ())
getInterior5 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell3 :: IOptionButtons a0
               -> IO String
getLinkedCell3 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell3 :: String
               -> IOptionButtons a0
               -> IO ()
setLinkedCell3 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getPhoneticAccelerator5 :: (Variant a1)
                        => IOptionButtons a0
                        -> IO a1
getPhoneticAccelerator5 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator5 :: a1
                        -> IOptionButtons a0
                        -> IO ()
setPhoneticAccelerator5 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

getValue12 :: (Variant a1)
           => IOptionButtons a0
           -> IO a1
getValue12 =
  propertyGet "Value"
              []
              outVariant

setValue10 :: a1
           -> IOptionButtons a0
           -> IO ()
setValue10 rHS =
  propertySet "Value"
              [inVariant rHS]

getGroupBox0 :: IOptionButtons a0
             -> IO (GroupBox ())
getGroupBox0 =
  propertyGet "GroupBox"
              []
              outIUnknown

add23 :: Double
      -> Double
      -> Double
      -> Double
      -> IOptionButtons a0
      -> IO (OptionButton ())
add23 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount32 :: IOptionButtons a0
           -> IO Int32
getCount32 =
  propertyGet "Count"
              []
              outInt32

group3 :: IOptionButtons a0
       -> IO (GroupObject ())
group3 =
  function1 "Group"
            []
            outIUnknown

item12 :: a1
       -> IOptionButtons a0
       -> IO (IDispatch ())
item12 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum9 :: IOptionButtons a0
         -> IO (IUnknown ())
newEnum9 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IEditBox
-- 
-- --------------------------------------------------
data IEditBox_ a = IEditBox__ 
type IEditBox a = IDispatch (IEditBox_ a)
iidIEditBox :: IID (IEditBox ())
iidIEditBox = mkIID "{00020883-0001-0000-C000-000000000046}"

getApplication57 :: (Variant a1)
                 => IEditBox a0
                 -> IO a1
getApplication57 =
  propertyGet "Application"
              []
              outVariant

getCreator57 :: IEditBox a0
             -> IO XlCreator
getCreator57 =
  propertyGet "Creator"
              []
              outEnum

getParent72 :: IEditBox a0
            -> IO (IDispatch ())
getParent72 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell2 :: IEditBox a0
                    -> IO (Range ())
getBottomRightCell2 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront6 :: (Variant a1)
              => IEditBox a0
              -> IO a1
bringToFront6 =
  function1 "BringToFront"
            []
            outVariant

copy12 :: (Variant a1)
       => IEditBox a0
       -> IO a1
copy12 =
  function1 "Copy"
            []
            outVariant

copyPicture8 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IEditBox a0
             -> IO a1
copyPicture8 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut7 :: (Variant a1)
     => IEditBox a0
     -> IO a1
cut7 =
  function1 "Cut"
            []
            outVariant

delete27 :: (Variant a1)
         => IEditBox a0
         -> IO a1
delete27 =
  function1 "Delete"
            []
            outVariant

duplicate6 :: IEditBox a0
           -> IO (IDispatch ())
duplicate6 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled9 :: IEditBox a0
            -> IO Bool
getEnabled9 =
  propertyGet "Enabled"
              []
              outBool

setEnabled9 :: Bool
            -> IEditBox a0
            -> IO ()
setEnabled9 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight10 :: IEditBox a0
            -> IO Double
getHeight10 =
  propertyGet "Height"
              []
              outDouble

setHeight9 :: Double
           -> IEditBox a0
           -> IO ()
setHeight9 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex11 :: IEditBox a0
           -> IO Int32
getIndex11 =
  propertyGet "Index"
              []
              outInt32

getLeft10 :: IEditBox a0
          -> IO Double
getLeft10 =
  propertyGet "Left"
              []
              outDouble

setLeft9 :: Double
         -> IEditBox a0
         -> IO ()
setLeft9 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked8 :: IEditBox a0
           -> IO Bool
getLocked8 =
  propertyGet "Locked"
              []
              outBool

setLocked8 :: Bool
           -> IEditBox a0
           -> IO ()
setLocked8 rHS =
  propertySet "Locked"
              [inBool rHS]

getName16 :: IEditBox a0
          -> IO String
getName16 =
  propertyGet "Name"
              []
              outString

setName10 :: String
          -> IEditBox a0
          -> IO ()
setName10 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction8 :: IEditBox a0
             -> IO String
getOnAction8 =
  propertyGet "OnAction"
              []
              outString

setOnAction8 :: String
             -> IEditBox a0
             -> IO ()
setOnAction8 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement6 :: (Variant a1)
              => IEditBox a0
              -> IO a1
getPlacement6 =
  propertyGet "Placement"
              []
              outVariant

setPlacement6 :: a1
              -> IEditBox a0
              -> IO ()
setPlacement6 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject6 :: IEditBox a0
                -> IO Bool
getPrintObject6 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject6 :: Bool
                -> IEditBox a0
                -> IO ()
setPrintObject6 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select12 :: (Variant a1, Variant a2)
         => a2
         -> IEditBox a0
         -> IO a1
select12 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack6 :: (Variant a1)
            => IEditBox a0
            -> IO a1
sendToBack6 =
  function1 "SendToBack"
            []
            outVariant

getTop10 :: IEditBox a0
         -> IO Double
getTop10 =
  propertyGet "Top"
              []
              outDouble

setTop9 :: Double
        -> IEditBox a0
        -> IO ()
setTop9 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell2 :: IEditBox a0
                -> IO (Range ())
getTopLeftCell2 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible18 :: IEditBox a0
             -> IO Bool
getVisible18 =
  propertyGet "Visible"
              []
              outBool

setVisible18 :: Bool
             -> IEditBox a0
             -> IO ()
setVisible18 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth11 :: IEditBox a0
           -> IO Double
getWidth11 =
  propertyGet "Width"
              []
              outDouble

setWidth10 :: Double
           -> IEditBox a0
           -> IO ()
setWidth10 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder6 :: IEditBox a0
           -> IO Int32
getZOrder6 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange6 :: IEditBox a0
               -> IO (ShapeRange ())
getShapeRange6 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption14 :: IEditBox a0
             -> IO String
getCaption14 =
  propertyGet "Caption"
              []
              outString

setCaption14 :: String
             -> IEditBox a0
             -> IO ()
setCaption14 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters7 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IEditBox a0
               -> IO (Characters ())
getCharacters7 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling11 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IEditBox a0
                -> IO a1
checkSpelling11 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText6 :: IEditBox a0
               -> IO Bool
getLockedText6 =
  propertyGet "LockedText"
              []
              outBool

setLockedText6 :: Bool
               -> IEditBox a0
               -> IO ()
setLockedText6 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText9 :: IEditBox a0
         -> IO String
getText9 =
  propertyGet "Text"
              []
              outString

setText8 :: String
         -> IEditBox a0
         -> IO ()
setText8 rHS =
  propertySet "Text"
              [inString rHS]

getDisplayVerticalScrollBar1 :: IEditBox a0
                             -> IO Bool
getDisplayVerticalScrollBar1 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar1 :: Bool
                             -> IEditBox a0
                             -> IO ()
setDisplayVerticalScrollBar1 rHS =
  propertySet "DisplayVerticalScrollBar"
              [inBool rHS]

getInputType0 :: IEditBox a0
              -> IO Int32
getInputType0 =
  propertyGet "InputType"
              []
              outInt32

setInputType0 :: Int32
              -> IEditBox a0
              -> IO ()
setInputType0 rHS =
  propertySet "InputType"
              [inInt32 rHS]

getLinkedObject :: IEditBox a0
                -> IO String
getLinkedObject =
  propertyGet "LinkedObject"
              []
              outString

getMultiLine0 :: IEditBox a0
              -> IO Bool
getMultiLine0 =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine0 :: Bool
              -> IEditBox a0
              -> IO ()
setMultiLine0 rHS =
  propertySet "MultiLine"
              [inBool rHS]

getPasswordEdit :: IEditBox a0
                -> IO Bool
getPasswordEdit =
  propertyGet "PasswordEdit"
              []
              outBool

setPasswordEdit :: Bool
                -> IEditBox a0
                -> IO ()
setPasswordEdit rHS =
  propertySet "PasswordEdit"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IEditBoxes
-- 
-- --------------------------------------------------
data IEditBoxes_ a = IEditBoxes__ 
type IEditBoxes a = IDispatch (IEditBoxes_ a)
iidIEditBoxes :: IID (IEditBoxes ())
iidIEditBoxes = mkIID "{00020884-0001-0000-C000-000000000046}"

getApplication58 :: (Variant a1)
                 => IEditBoxes a0
                 -> IO a1
getApplication58 =
  propertyGet "Application"
              []
              outVariant

getCreator58 :: IEditBoxes a0
             -> IO XlCreator
getCreator58 =
  propertyGet "Creator"
              []
              outEnum

getParent73 :: IEditBoxes a0
            -> IO (IDispatch ())
getParent73 =
  propertyGet "Parent"
              []
              outIDispatch

dummy34 :: IEditBoxes a0
        -> IO ()
dummy34 =
  method0 "_Dummy3"
          []

bringToFront7 :: (Variant a1)
              => IEditBoxes a0
              -> IO a1
bringToFront7 =
  function1 "BringToFront"
            []
            outVariant

copy13 :: (Variant a1)
       => IEditBoxes a0
       -> IO a1
copy13 =
  function1 "Copy"
            []
            outVariant

copyPicture9 :: (Variant a1, Variant a2, Variant a3)
             => a2
             -> a3
             -> IEditBoxes a0
             -> IO a1
copyPicture9 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut8 :: (Variant a1)
     => IEditBoxes a0
     -> IO a1
cut8 =
  function1 "Cut"
            []
            outVariant

delete28 :: (Variant a1)
         => IEditBoxes a0
         -> IO a1
delete28 =
  function1 "Delete"
            []
            outVariant

duplicate7 :: IEditBoxes a0
           -> IO (IDispatch ())
duplicate7 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled10 :: IEditBoxes a0
             -> IO Bool
getEnabled10 =
  propertyGet "Enabled"
              []
              outBool

setEnabled10 :: Bool
             -> IEditBoxes a0
             -> IO ()
setEnabled10 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight11 :: IEditBoxes a0
            -> IO Double
getHeight11 =
  propertyGet "Height"
              []
              outDouble

setHeight10 :: Double
            -> IEditBoxes a0
            -> IO ()
setHeight10 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy124 :: IEditBoxes a0
         -> IO ()
dummy124 =
  method0 "_Dummy12"
          []

getLeft11 :: IEditBoxes a0
          -> IO Double
getLeft11 =
  propertyGet "Left"
              []
              outDouble

setLeft10 :: Double
          -> IEditBoxes a0
          -> IO ()
setLeft10 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked9 :: IEditBoxes a0
           -> IO Bool
getLocked9 =
  propertyGet "Locked"
              []
              outBool

setLocked9 :: Bool
           -> IEditBoxes a0
           -> IO ()
setLocked9 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy154 :: IEditBoxes a0
         -> IO ()
dummy154 =
  method0 "_Dummy15"
          []

getOnAction9 :: IEditBoxes a0
             -> IO String
getOnAction9 =
  propertyGet "OnAction"
              []
              outString

setOnAction9 :: String
             -> IEditBoxes a0
             -> IO ()
setOnAction9 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement7 :: (Variant a1)
              => IEditBoxes a0
              -> IO a1
getPlacement7 =
  propertyGet "Placement"
              []
              outVariant

setPlacement7 :: a1
              -> IEditBoxes a0
              -> IO ()
setPlacement7 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject7 :: IEditBoxes a0
                -> IO Bool
getPrintObject7 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject7 :: Bool
                -> IEditBoxes a0
                -> IO ()
setPrintObject7 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select13 :: (Variant a1, Variant a2)
         => a2
         -> IEditBoxes a0
         -> IO a1
select13 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack7 :: (Variant a1)
            => IEditBoxes a0
            -> IO a1
sendToBack7 =
  function1 "SendToBack"
            []
            outVariant

getTop11 :: IEditBoxes a0
         -> IO Double
getTop11 =
  propertyGet "Top"
              []
              outDouble

setTop10 :: Double
         -> IEditBoxes a0
         -> IO ()
setTop10 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy223 :: IEditBoxes a0
         -> IO ()
dummy223 =
  method0 "_Dummy22"
          []

getVisible19 :: IEditBoxes a0
             -> IO Bool
getVisible19 =
  propertyGet "Visible"
              []
              outBool

setVisible19 :: Bool
             -> IEditBoxes a0
             -> IO ()
setVisible19 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth12 :: IEditBoxes a0
           -> IO Double
getWidth12 =
  propertyGet "Width"
              []
              outDouble

setWidth11 :: Double
           -> IEditBoxes a0
           -> IO ()
setWidth11 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder7 :: IEditBoxes a0
           -> IO Int32
getZOrder7 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange7 :: IEditBoxes a0
               -> IO (ShapeRange ())
getShapeRange7 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption15 :: IEditBoxes a0
             -> IO String
getCaption15 =
  propertyGet "Caption"
              []
              outString

setCaption15 :: String
             -> IEditBoxes a0
             -> IO ()
setCaption15 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters8 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IEditBoxes a0
               -> IO (Characters ())
getCharacters8 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling12 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IEditBoxes a0
                -> IO a1
checkSpelling12 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText7 :: IEditBoxes a0
               -> IO Bool
getLockedText7 =
  propertyGet "LockedText"
              []
              outBool

setLockedText7 :: Bool
               -> IEditBoxes a0
               -> IO ()
setLockedText7 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText10 :: IEditBoxes a0
          -> IO String
getText10 =
  propertyGet "Text"
              []
              outString

setText9 :: String
         -> IEditBoxes a0
         -> IO ()
setText9 rHS =
  propertySet "Text"
              [inString rHS]

getDisplayVerticalScrollBar2 :: IEditBoxes a0
                             -> IO Bool
getDisplayVerticalScrollBar2 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar2 :: Bool
                             -> IEditBoxes a0
                             -> IO ()
setDisplayVerticalScrollBar2 rHS =
  propertySet "DisplayVerticalScrollBar"
              [inBool rHS]

getInputType1 :: IEditBoxes a0
              -> IO Int32
getInputType1 =
  propertyGet "InputType"
              []
              outInt32

setInputType1 :: Int32
              -> IEditBoxes a0
              -> IO ()
setInputType1 rHS =
  propertySet "InputType"
              [inInt32 rHS]

dummy340 :: IEditBoxes a0
         -> IO ()
dummy340 =
  method0 "_Dummy34"
          []

getMultiLine1 :: IEditBoxes a0
              -> IO Bool
getMultiLine1 =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine1 :: Bool
              -> IEditBoxes a0
              -> IO ()
setMultiLine1 rHS =
  propertySet "MultiLine"
              [inBool rHS]

getPasswordEdit0 :: IEditBoxes a0
                 -> IO Bool
getPasswordEdit0 =
  propertyGet "PasswordEdit"
              []
              outBool

setPasswordEdit0 :: Bool
                 -> IEditBoxes a0
                 -> IO ()
setPasswordEdit0 rHS =
  propertySet "PasswordEdit"
              [inBool rHS]

add24 :: Double
      -> Double
      -> Double
      -> Double
      -> IEditBoxes a0
      -> IO (EditBox ())
add24 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount33 :: IEditBoxes a0
           -> IO Int32
getCount33 =
  propertyGet "Count"
              []
              outInt32

group4 :: IEditBoxes a0
       -> IO (GroupObject ())
group4 =
  function1 "Group"
            []
            outIUnknown

item13 :: (Variant a1)
       => a2
       -> IEditBoxes a0
       -> IO a1
item13 index0 =
  function1 "Item"
            [inVariant index0]
            outVariant

newEnum10 :: IEditBoxes a0
          -> IO (IUnknown ())
newEnum10 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IScrollBar
-- 
-- --------------------------------------------------
data IScrollBar_ a = IScrollBar__ 
type IScrollBar a = IDispatch (IScrollBar_ a)
iidIScrollBar :: IID (IScrollBar ())
iidIScrollBar = mkIID "{00020885-0001-0000-C000-000000000046}"

getApplication59 :: (Variant a1)
                 => IScrollBar a0
                 -> IO a1
getApplication59 =
  propertyGet "Application"
              []
              outVariant

getCreator59 :: IScrollBar a0
             -> IO XlCreator
getCreator59 =
  propertyGet "Creator"
              []
              outEnum

getParent74 :: IScrollBar a0
            -> IO (IDispatch ())
getParent74 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell3 :: IScrollBar a0
                    -> IO (Range ())
getBottomRightCell3 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront8 :: (Variant a1)
              => IScrollBar a0
              -> IO a1
bringToFront8 =
  function1 "BringToFront"
            []
            outVariant

copy14 :: (Variant a1)
       => IScrollBar a0
       -> IO a1
copy14 =
  function1 "Copy"
            []
            outVariant

copyPicture10 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IScrollBar a0
              -> IO a1
copyPicture10 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut9 :: (Variant a1)
     => IScrollBar a0
     -> IO a1
cut9 =
  function1 "Cut"
            []
            outVariant

delete29 :: (Variant a1)
         => IScrollBar a0
         -> IO a1
delete29 =
  function1 "Delete"
            []
            outVariant

duplicate8 :: IScrollBar a0
           -> IO (IDispatch ())
duplicate8 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled11 :: IScrollBar a0
             -> IO Bool
getEnabled11 =
  propertyGet "Enabled"
              []
              outBool

setEnabled11 :: Bool
             -> IScrollBar a0
             -> IO ()
setEnabled11 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight12 :: IScrollBar a0
            -> IO Double
getHeight12 =
  propertyGet "Height"
              []
              outDouble

setHeight11 :: Double
            -> IScrollBar a0
            -> IO ()
setHeight11 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex12 :: IScrollBar a0
           -> IO Int32
getIndex12 =
  propertyGet "Index"
              []
              outInt32

getLeft12 :: IScrollBar a0
          -> IO Double
getLeft12 =
  propertyGet "Left"
              []
              outDouble

setLeft11 :: Double
          -> IScrollBar a0
          -> IO ()
setLeft11 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked10 :: IScrollBar a0
            -> IO Bool
getLocked10 =
  propertyGet "Locked"
              []
              outBool

setLocked10 :: Bool
            -> IScrollBar a0
            -> IO ()
setLocked10 rHS =
  propertySet "Locked"
              [inBool rHS]

getName17 :: IScrollBar a0
          -> IO String
getName17 =
  propertyGet "Name"
              []
              outString

setName11 :: String
          -> IScrollBar a0
          -> IO ()
setName11 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction10 :: IScrollBar a0
              -> IO String
getOnAction10 =
  propertyGet "OnAction"
              []
              outString

setOnAction10 :: String
              -> IScrollBar a0
              -> IO ()
setOnAction10 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement8 :: (Variant a1)
              => IScrollBar a0
              -> IO a1
getPlacement8 =
  propertyGet "Placement"
              []
              outVariant

setPlacement8 :: a1
              -> IScrollBar a0
              -> IO ()
setPlacement8 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject8 :: IScrollBar a0
                -> IO Bool
getPrintObject8 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject8 :: Bool
                -> IScrollBar a0
                -> IO ()
setPrintObject8 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select14 :: (Variant a1, Variant a2)
         => a2
         -> IScrollBar a0
         -> IO a1
select14 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack8 :: (Variant a1)
            => IScrollBar a0
            -> IO a1
sendToBack8 =
  function1 "SendToBack"
            []
            outVariant

getTop12 :: IScrollBar a0
         -> IO Double
getTop12 =
  propertyGet "Top"
              []
              outDouble

setTop11 :: Double
         -> IScrollBar a0
         -> IO ()
setTop11 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell3 :: IScrollBar a0
                -> IO (Range ())
getTopLeftCell3 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible20 :: IScrollBar a0
             -> IO Bool
getVisible20 =
  propertyGet "Visible"
              []
              outBool

setVisible20 :: Bool
             -> IScrollBar a0
             -> IO ()
setVisible20 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth13 :: IScrollBar a0
           -> IO Double
getWidth13 =
  propertyGet "Width"
              []
              outDouble

setWidth12 :: Double
           -> IScrollBar a0
           -> IO ()
setWidth12 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder8 :: IScrollBar a0
           -> IO Int32
getZOrder8 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange8 :: IScrollBar a0
               -> IO (ShapeRange ())
getShapeRange8 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault32 :: IScrollBar a0
             -> IO Int32
getDefault32 =
  propertyGet "_Default"
              []
              outInt32

setDefault9 :: Int32
            -> IScrollBar a0
            -> IO ()
setDefault9 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading4 :: IScrollBar a0
                     -> IO Bool
getDisplay3DShading4 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading4 :: Bool
                     -> IScrollBar a0
                     -> IO ()
setDisplay3DShading4 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getLinkedCell4 :: IScrollBar a0
               -> IO String
getLinkedCell4 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell4 :: String
               -> IScrollBar a0
               -> IO ()
setLinkedCell4 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getMax0 :: IScrollBar a0
        -> IO Int32
getMax0 =
  propertyGet "Max"
              []
              outInt32

setMax0 :: Int32
        -> IScrollBar a0
        -> IO ()
setMax0 rHS =
  propertySet "Max"
              [inInt32 rHS]

getMin0 :: IScrollBar a0
        -> IO Int32
getMin0 =
  propertyGet "Min"
              []
              outInt32

setMin0 :: Int32
        -> IScrollBar a0
        -> IO ()
setMin0 rHS =
  propertySet "Min"
              [inInt32 rHS]

getSmallChange0 :: IScrollBar a0
                -> IO Int32
getSmallChange0 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange0 :: Int32
                -> IScrollBar a0
                -> IO ()
setSmallChange0 rHS =
  propertySet "SmallChange"
              [inInt32 rHS]

getValue13 :: IScrollBar a0
           -> IO Int32
getValue13 =
  propertyGet "Value"
              []
              outInt32

setValue11 :: Int32
           -> IScrollBar a0
           -> IO ()
setValue11 rHS =
  propertySet "Value"
              [inInt32 rHS]

getLargeChange0 :: IScrollBar a0
                -> IO Int32
getLargeChange0 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange0 :: Int32
                -> IScrollBar a0
                -> IO ()
setLargeChange0 rHS =
  propertySet "LargeChange"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IScrollBars
-- 
-- --------------------------------------------------
data IScrollBars_ a = IScrollBars__ 
type IScrollBars a = IDispatch (IScrollBars_ a)
iidIScrollBars :: IID (IScrollBars ())
iidIScrollBars = mkIID "{00020886-0001-0000-C000-000000000046}"

getApplication60 :: (Variant a1)
                 => IScrollBars a0
                 -> IO a1
getApplication60 =
  propertyGet "Application"
              []
              outVariant

getCreator60 :: IScrollBars a0
             -> IO XlCreator
getCreator60 =
  propertyGet "Creator"
              []
              outEnum

getParent75 :: IScrollBars a0
            -> IO (IDispatch ())
getParent75 =
  propertyGet "Parent"
              []
              outIDispatch

dummy35 :: IScrollBars a0
        -> IO ()
dummy35 =
  method0 "_Dummy3"
          []

bringToFront9 :: (Variant a1)
              => IScrollBars a0
              -> IO a1
bringToFront9 =
  function1 "BringToFront"
            []
            outVariant

copy15 :: (Variant a1)
       => IScrollBars a0
       -> IO a1
copy15 =
  function1 "Copy"
            []
            outVariant

copyPicture11 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IScrollBars a0
              -> IO a1
copyPicture11 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut10 :: (Variant a1)
      => IScrollBars a0
      -> IO a1
cut10 =
  function1 "Cut"
            []
            outVariant

delete30 :: (Variant a1)
         => IScrollBars a0
         -> IO a1
delete30 =
  function1 "Delete"
            []
            outVariant

duplicate9 :: IScrollBars a0
           -> IO (IDispatch ())
duplicate9 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled12 :: IScrollBars a0
             -> IO Bool
getEnabled12 =
  propertyGet "Enabled"
              []
              outBool

setEnabled12 :: Bool
             -> IScrollBars a0
             -> IO ()
setEnabled12 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight13 :: IScrollBars a0
            -> IO Double
getHeight13 =
  propertyGet "Height"
              []
              outDouble

setHeight12 :: Double
            -> IScrollBars a0
            -> IO ()
setHeight12 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy125 :: IScrollBars a0
         -> IO ()
dummy125 =
  method0 "_Dummy12"
          []

getLeft13 :: IScrollBars a0
          -> IO Double
getLeft13 =
  propertyGet "Left"
              []
              outDouble

setLeft12 :: Double
          -> IScrollBars a0
          -> IO ()
setLeft12 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked11 :: IScrollBars a0
            -> IO Bool
getLocked11 =
  propertyGet "Locked"
              []
              outBool

setLocked11 :: Bool
            -> IScrollBars a0
            -> IO ()
setLocked11 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy155 :: IScrollBars a0
         -> IO ()
dummy155 =
  method0 "_Dummy15"
          []

getOnAction11 :: IScrollBars a0
              -> IO String
getOnAction11 =
  propertyGet "OnAction"
              []
              outString

setOnAction11 :: String
              -> IScrollBars a0
              -> IO ()
setOnAction11 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement9 :: (Variant a1)
              => IScrollBars a0
              -> IO a1
getPlacement9 =
  propertyGet "Placement"
              []
              outVariant

setPlacement9 :: a1
              -> IScrollBars a0
              -> IO ()
setPlacement9 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject9 :: IScrollBars a0
                -> IO Bool
getPrintObject9 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject9 :: Bool
                -> IScrollBars a0
                -> IO ()
setPrintObject9 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select15 :: (Variant a1, Variant a2)
         => a2
         -> IScrollBars a0
         -> IO a1
select15 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack9 :: (Variant a1)
            => IScrollBars a0
            -> IO a1
sendToBack9 =
  function1 "SendToBack"
            []
            outVariant

getTop13 :: IScrollBars a0
         -> IO Double
getTop13 =
  propertyGet "Top"
              []
              outDouble

setTop12 :: Double
         -> IScrollBars a0
         -> IO ()
setTop12 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy224 :: IScrollBars a0
         -> IO ()
dummy224 =
  method0 "_Dummy22"
          []

getVisible21 :: IScrollBars a0
             -> IO Bool
getVisible21 =
  propertyGet "Visible"
              []
              outBool

setVisible21 :: Bool
             -> IScrollBars a0
             -> IO ()
setVisible21 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth14 :: IScrollBars a0
           -> IO Double
getWidth14 =
  propertyGet "Width"
              []
              outDouble

setWidth13 :: Double
           -> IScrollBars a0
           -> IO ()
setWidth13 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder9 :: IScrollBars a0
           -> IO Int32
getZOrder9 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange9 :: IScrollBars a0
               -> IO (ShapeRange ())
getShapeRange9 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault33 :: IScrollBars a0
             -> IO Int32
getDefault33 =
  propertyGet "_Default"
              []
              outInt32

setDefault10 :: Int32
             -> IScrollBars a0
             -> IO ()
setDefault10 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading5 :: IScrollBars a0
                     -> IO Bool
getDisplay3DShading5 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading5 :: Bool
                     -> IScrollBars a0
                     -> IO ()
setDisplay3DShading5 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getLinkedCell5 :: IScrollBars a0
               -> IO String
getLinkedCell5 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell5 :: String
               -> IScrollBars a0
               -> IO ()
setLinkedCell5 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getMax1 :: IScrollBars a0
        -> IO Int32
getMax1 =
  propertyGet "Max"
              []
              outInt32

setMax1 :: Int32
        -> IScrollBars a0
        -> IO ()
setMax1 rHS =
  propertySet "Max"
              [inInt32 rHS]

getMin1 :: IScrollBars a0
        -> IO Int32
getMin1 =
  propertyGet "Min"
              []
              outInt32

setMin1 :: Int32
        -> IScrollBars a0
        -> IO ()
setMin1 rHS =
  propertySet "Min"
              [inInt32 rHS]

getSmallChange1 :: IScrollBars a0
                -> IO Int32
getSmallChange1 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange1 :: Int32
                -> IScrollBars a0
                -> IO ()
setSmallChange1 rHS =
  propertySet "SmallChange"
              [inInt32 rHS]

getValue14 :: IScrollBars a0
           -> IO Int32
getValue14 =
  propertyGet "Value"
              []
              outInt32

setValue12 :: Int32
           -> IScrollBars a0
           -> IO ()
setValue12 rHS =
  propertySet "Value"
              [inInt32 rHS]

getLargeChange1 :: IScrollBars a0
                -> IO Int32
getLargeChange1 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange1 :: Int32
                -> IScrollBars a0
                -> IO ()
setLargeChange1 rHS =
  propertySet "LargeChange"
              [inInt32 rHS]

add25 :: Double
      -> Double
      -> Double
      -> Double
      -> IScrollBars a0
      -> IO (ScrollBar ())
add25 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount34 :: IScrollBars a0
           -> IO Int32
getCount34 =
  propertyGet "Count"
              []
              outInt32

group5 :: IScrollBars a0
       -> IO (GroupObject ())
group5 =
  function1 "Group"
            []
            outIUnknown

item14 :: a1
       -> IScrollBars a0
       -> IO (IDispatch ())
item14 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum11 :: IScrollBars a0
          -> IO (IUnknown ())
newEnum11 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IListBox
-- 
-- --------------------------------------------------
data IListBox_ a = IListBox__ 
type IListBox a = IDispatch (IListBox_ a)
iidIListBox :: IID (IListBox ())
iidIListBox = mkIID "{00020887-0001-0000-C000-000000000046}"

getApplication61 :: (Variant a1)
                 => IListBox a0
                 -> IO a1
getApplication61 =
  propertyGet "Application"
              []
              outVariant

getCreator61 :: IListBox a0
             -> IO XlCreator
getCreator61 =
  propertyGet "Creator"
              []
              outEnum

getParent76 :: IListBox a0
            -> IO (IDispatch ())
getParent76 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell4 :: IListBox a0
                    -> IO (Range ())
getBottomRightCell4 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront10 :: (Variant a1)
               => IListBox a0
               -> IO a1
bringToFront10 =
  function1 "BringToFront"
            []
            outVariant

copy16 :: (Variant a1)
       => IListBox a0
       -> IO a1
copy16 =
  function1 "Copy"
            []
            outVariant

copyPicture12 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IListBox a0
              -> IO a1
copyPicture12 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut11 :: (Variant a1)
      => IListBox a0
      -> IO a1
cut11 =
  function1 "Cut"
            []
            outVariant

delete31 :: (Variant a1)
         => IListBox a0
         -> IO a1
delete31 =
  function1 "Delete"
            []
            outVariant

duplicate10 :: IListBox a0
            -> IO (IDispatch ())
duplicate10 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled13 :: IListBox a0
             -> IO Bool
getEnabled13 =
  propertyGet "Enabled"
              []
              outBool

setEnabled13 :: Bool
             -> IListBox a0
             -> IO ()
setEnabled13 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight14 :: IListBox a0
            -> IO Double
getHeight14 =
  propertyGet "Height"
              []
              outDouble

setHeight13 :: Double
            -> IListBox a0
            -> IO ()
setHeight13 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex13 :: IListBox a0
           -> IO Int32
getIndex13 =
  propertyGet "Index"
              []
              outInt32

getLeft14 :: IListBox a0
          -> IO Double
getLeft14 =
  propertyGet "Left"
              []
              outDouble

setLeft13 :: Double
          -> IListBox a0
          -> IO ()
setLeft13 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked12 :: IListBox a0
            -> IO Bool
getLocked12 =
  propertyGet "Locked"
              []
              outBool

setLocked12 :: Bool
            -> IListBox a0
            -> IO ()
setLocked12 rHS =
  propertySet "Locked"
              [inBool rHS]

getName18 :: IListBox a0
          -> IO String
getName18 =
  propertyGet "Name"
              []
              outString

setName12 :: String
          -> IListBox a0
          -> IO ()
setName12 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction12 :: IListBox a0
              -> IO String
getOnAction12 =
  propertyGet "OnAction"
              []
              outString

setOnAction12 :: String
              -> IListBox a0
              -> IO ()
setOnAction12 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement10 :: (Variant a1)
               => IListBox a0
               -> IO a1
getPlacement10 =
  propertyGet "Placement"
              []
              outVariant

setPlacement10 :: a1
               -> IListBox a0
               -> IO ()
setPlacement10 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject10 :: IListBox a0
                 -> IO Bool
getPrintObject10 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject10 :: Bool
                 -> IListBox a0
                 -> IO ()
setPrintObject10 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select16 :: (Variant a1, Variant a2)
         => a2
         -> IListBox a0
         -> IO a1
select16 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack10 :: (Variant a1)
             => IListBox a0
             -> IO a1
sendToBack10 =
  function1 "SendToBack"
            []
            outVariant

getTop14 :: IListBox a0
         -> IO Double
getTop14 =
  propertyGet "Top"
              []
              outDouble

setTop13 :: Double
         -> IListBox a0
         -> IO ()
setTop13 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell4 :: IListBox a0
                -> IO (Range ())
getTopLeftCell4 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible22 :: IListBox a0
             -> IO Bool
getVisible22 =
  propertyGet "Visible"
              []
              outBool

setVisible22 :: Bool
             -> IListBox a0
             -> IO ()
setVisible22 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth15 :: IListBox a0
           -> IO Double
getWidth15 =
  propertyGet "Width"
              []
              outDouble

setWidth14 :: Double
           -> IListBox a0
           -> IO ()
setWidth14 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder10 :: IListBox a0
            -> IO Int32
getZOrder10 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange10 :: IListBox a0
                -> IO (ShapeRange ())
getShapeRange10 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem0 :: (Variant a1, Variant a3)
         => a2
         -> a3
         -> IListBox a0
         -> IO a1
addItem0 text0 index0 =
  function1 "AddItem"
            [ inVariant text0
            , inVariant index0
            ]
            outVariant

getDisplay3DShading6 :: IListBox a0
                     -> IO Bool
getDisplay3DShading6 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading6 :: Bool
                     -> IListBox a0
                     -> IO ()
setDisplay3DShading6 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getDefault34 :: IListBox a0
             -> IO Int32
getDefault34 =
  propertyGet "_Default"
              []
              outInt32

setDefault11 :: Int32
             -> IListBox a0
             -> IO ()
setDefault11 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getLinkedCell6 :: IListBox a0
               -> IO String
getLinkedCell6 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell6 :: String
               -> IListBox a0
               -> IO ()
setLinkedCell6 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getLinkedObject0 :: (Variant a1)
                 => IListBox a0
                 -> IO a1
getLinkedObject0 =
  propertyGet "LinkedObject"
              []
              outVariant

getList :: (Variant a1, Variant a2)
        => a2
        -> IListBox a0
        -> IO a1
getList index0 =
  propertyGet "List"
              [inVariant index0]
              outVariant

setList :: (Variant a1)
        => a1
        -> a2
        -> IListBox a0
        -> IO ()
setList index0 rHS =
  propertySet "List"
              [ inVariant index0
              , inVariant rHS
              ]

getListCount :: IListBox a0
             -> IO Int32
getListCount =
  propertyGet "ListCount"
              []
              outInt32

getListFillRange0 :: IListBox a0
                  -> IO String
getListFillRange0 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange0 :: String
                  -> IListBox a0
                  -> IO ()
setListFillRange0 rHS =
  propertySet "ListFillRange"
              [inString rHS]

getListIndex0 :: IListBox a0
              -> IO Int32
getListIndex0 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex0 :: Int32
              -> IListBox a0
              -> IO ()
setListIndex0 rHS =
  propertySet "ListIndex"
              [inInt32 rHS]

getMultiSelect0 :: IListBox a0
                -> IO Int32
getMultiSelect0 =
  propertyGet "MultiSelect"
              []
              outInt32

setMultiSelect0 :: Int32
                -> IListBox a0
                -> IO ()
setMultiSelect0 rHS =
  propertySet "MultiSelect"
              [inInt32 rHS]

removeAllItems0 :: (Variant a1)
                => IListBox a0
                -> IO a1
removeAllItems0 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem0 :: (Variant a1, Variant a2)
            => Int32
            -> a2
            -> IListBox a0
            -> IO a1
removeItem0 index0 count0 =
  function1 "RemoveItem"
            [ inInt32 index0
            , inVariant count0
            ]
            outVariant

getSelected :: (Variant a1, Variant a2)
            => a2
            -> IListBox a0
            -> IO a1
getSelected index0 =
  propertyGet "Selected"
              [inVariant index0]
              outVariant

setSelected :: (Variant a1)
            => a1
            -> a2
            -> IListBox a0
            -> IO ()
setSelected index0 rHS =
  propertySet "Selected"
              [ inVariant index0
              , inVariant rHS
              ]

getValue15 :: IListBox a0
           -> IO Int32
getValue15 =
  propertyGet "Value"
              []
              outInt32

setValue13 :: Int32
           -> IListBox a0
           -> IO ()
setValue13 rHS =
  propertySet "Value"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IListBoxes
-- 
-- --------------------------------------------------
data IListBoxes_ a = IListBoxes__ 
type IListBoxes a = IDispatch (IListBoxes_ a)
iidIListBoxes :: IID (IListBoxes ())
iidIListBoxes = mkIID "{00020888-0001-0000-C000-000000000046}"

getApplication62 :: (Variant a1)
                 => IListBoxes a0
                 -> IO a1
getApplication62 =
  propertyGet "Application"
              []
              outVariant

getCreator62 :: IListBoxes a0
             -> IO XlCreator
getCreator62 =
  propertyGet "Creator"
              []
              outEnum

getParent77 :: IListBoxes a0
            -> IO (IDispatch ())
getParent77 =
  propertyGet "Parent"
              []
              outIDispatch

dummy36 :: IListBoxes a0
        -> IO ()
dummy36 =
  method0 "_Dummy3"
          []

bringToFront11 :: (Variant a1)
               => IListBoxes a0
               -> IO a1
bringToFront11 =
  function1 "BringToFront"
            []
            outVariant

copy17 :: (Variant a1)
       => IListBoxes a0
       -> IO a1
copy17 =
  function1 "Copy"
            []
            outVariant

copyPicture13 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IListBoxes a0
              -> IO a1
copyPicture13 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut12 :: (Variant a1)
      => IListBoxes a0
      -> IO a1
cut12 =
  function1 "Cut"
            []
            outVariant

delete32 :: (Variant a1)
         => IListBoxes a0
         -> IO a1
delete32 =
  function1 "Delete"
            []
            outVariant

duplicate11 :: IListBoxes a0
            -> IO (IDispatch ())
duplicate11 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled14 :: IListBoxes a0
             -> IO Bool
getEnabled14 =
  propertyGet "Enabled"
              []
              outBool

setEnabled14 :: Bool
             -> IListBoxes a0
             -> IO ()
setEnabled14 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight15 :: IListBoxes a0
            -> IO Double
getHeight15 =
  propertyGet "Height"
              []
              outDouble

setHeight14 :: Double
            -> IListBoxes a0
            -> IO ()
setHeight14 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy126 :: IListBoxes a0
         -> IO ()
dummy126 =
  method0 "_Dummy12"
          []

getLeft15 :: IListBoxes a0
          -> IO Double
getLeft15 =
  propertyGet "Left"
              []
              outDouble

setLeft14 :: Double
          -> IListBoxes a0
          -> IO ()
setLeft14 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked13 :: IListBoxes a0
            -> IO Bool
getLocked13 =
  propertyGet "Locked"
              []
              outBool

setLocked13 :: Bool
            -> IListBoxes a0
            -> IO ()
setLocked13 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy156 :: IListBoxes a0
         -> IO ()
dummy156 =
  method0 "_Dummy15"
          []

getOnAction13 :: IListBoxes a0
              -> IO String
getOnAction13 =
  propertyGet "OnAction"
              []
              outString

setOnAction13 :: String
              -> IListBoxes a0
              -> IO ()
setOnAction13 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement11 :: (Variant a1)
               => IListBoxes a0
               -> IO a1
getPlacement11 =
  propertyGet "Placement"
              []
              outVariant

setPlacement11 :: a1
               -> IListBoxes a0
               -> IO ()
setPlacement11 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject11 :: IListBoxes a0
                 -> IO Bool
getPrintObject11 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject11 :: Bool
                 -> IListBoxes a0
                 -> IO ()
setPrintObject11 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select17 :: (Variant a1, Variant a2)
         => a2
         -> IListBoxes a0
         -> IO a1
select17 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack11 :: (Variant a1)
             => IListBoxes a0
             -> IO a1
sendToBack11 =
  function1 "SendToBack"
            []
            outVariant

getTop15 :: IListBoxes a0
         -> IO Double
getTop15 =
  propertyGet "Top"
              []
              outDouble

setTop14 :: Double
         -> IListBoxes a0
         -> IO ()
setTop14 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy225 :: IListBoxes a0
         -> IO ()
dummy225 =
  method0 "_Dummy22"
          []

getVisible23 :: IListBoxes a0
             -> IO Bool
getVisible23 =
  propertyGet "Visible"
              []
              outBool

setVisible23 :: Bool
             -> IListBoxes a0
             -> IO ()
setVisible23 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth16 :: IListBoxes a0
           -> IO Double
getWidth16 =
  propertyGet "Width"
              []
              outDouble

setWidth15 :: Double
           -> IListBoxes a0
           -> IO ()
setWidth15 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder11 :: IListBoxes a0
            -> IO Int32
getZOrder11 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange11 :: IListBoxes a0
                -> IO (ShapeRange ())
getShapeRange11 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem1 :: (Variant a1, Variant a3)
         => a2
         -> a3
         -> IListBoxes a0
         -> IO a1
addItem1 text0 index0 =
  function1 "AddItem"
            [ inVariant text0
            , inVariant index0
            ]
            outVariant

getDisplay3DShading7 :: IListBoxes a0
                     -> IO Bool
getDisplay3DShading7 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading7 :: Bool
                     -> IListBoxes a0
                     -> IO ()
setDisplay3DShading7 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getDefault35 :: IListBoxes a0
             -> IO Int32
getDefault35 =
  propertyGet "_Default"
              []
              outInt32

setDefault12 :: Int32
             -> IListBoxes a0
             -> IO ()
setDefault12 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getLinkedCell7 :: IListBoxes a0
               -> IO String
getLinkedCell7 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell7 :: String
               -> IListBoxes a0
               -> IO ()
setLinkedCell7 rHS =
  propertySet "LinkedCell"
              [inString rHS]

dummy310 :: IListBoxes a0
         -> IO ()
dummy310 =
  method0 "_Dummy31"
          []

getList0 :: (Variant a1, Variant a2)
         => a2
         -> IListBoxes a0
         -> IO a1
getList0 index0 =
  propertyGet "List"
              [inVariant index0]
              outVariant

setList0 :: (Variant a1)
         => a1
         -> a2
         -> IListBoxes a0
         -> IO ()
setList0 index0 rHS =
  propertySet "List"
              [ inVariant index0
              , inVariant rHS
              ]

dummy330 :: IListBoxes a0
         -> IO ()
dummy330 =
  method0 "_Dummy33"
          []

getListFillRange1 :: IListBoxes a0
                  -> IO String
getListFillRange1 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange1 :: String
                  -> IListBoxes a0
                  -> IO ()
setListFillRange1 rHS =
  propertySet "ListFillRange"
              [inString rHS]

getListIndex1 :: IListBoxes a0
              -> IO Int32
getListIndex1 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex1 :: Int32
              -> IListBoxes a0
              -> IO ()
setListIndex1 rHS =
  propertySet "ListIndex"
              [inInt32 rHS]

getMultiSelect1 :: IListBoxes a0
                -> IO Int32
getMultiSelect1 =
  propertyGet "MultiSelect"
              []
              outInt32

setMultiSelect1 :: Int32
                -> IListBoxes a0
                -> IO ()
setMultiSelect1 rHS =
  propertySet "MultiSelect"
              [inInt32 rHS]

removeAllItems1 :: (Variant a1)
                => IListBoxes a0
                -> IO a1
removeAllItems1 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem1 :: (Variant a1, Variant a2)
            => Int32
            -> a2
            -> IListBoxes a0
            -> IO a1
removeItem1 index0 count0 =
  function1 "RemoveItem"
            [ inInt32 index0
            , inVariant count0
            ]
            outVariant

getSelected0 :: (Variant a1, Variant a2)
             => a2
             -> IListBoxes a0
             -> IO a1
getSelected0 index0 =
  propertyGet "Selected"
              [inVariant index0]
              outVariant

setSelected0 :: (Variant a1)
             => a1
             -> a2
             -> IListBoxes a0
             -> IO ()
setSelected0 index0 rHS =
  propertySet "Selected"
              [ inVariant index0
              , inVariant rHS
              ]

getValue16 :: IListBoxes a0
           -> IO Int32
getValue16 =
  propertyGet "Value"
              []
              outInt32

setValue14 :: Int32
           -> IListBoxes a0
           -> IO ()
setValue14 rHS =
  propertySet "Value"
              [inInt32 rHS]

add26 :: Double
      -> Double
      -> Double
      -> Double
      -> IListBoxes a0
      -> IO (ListBox ())
add26 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount35 :: IListBoxes a0
           -> IO Int32
getCount35 =
  propertyGet "Count"
              []
              outInt32

group6 :: IListBoxes a0
       -> IO (GroupObject ())
group6 =
  function1 "Group"
            []
            outIUnknown

item15 :: a1
       -> IListBoxes a0
       -> IO (IDispatch ())
item15 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum12 :: IListBoxes a0
          -> IO (IUnknown ())
newEnum12 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IGroupBox
-- 
-- --------------------------------------------------
data IGroupBox_ a = IGroupBox__ 
type IGroupBox a = IDispatch (IGroupBox_ a)
iidIGroupBox :: IID (IGroupBox ())
iidIGroupBox = mkIID "{00020889-0001-0000-C000-000000000046}"

getApplication63 :: (Variant a1)
                 => IGroupBox a0
                 -> IO a1
getApplication63 =
  propertyGet "Application"
              []
              outVariant

getCreator63 :: IGroupBox a0
             -> IO XlCreator
getCreator63 =
  propertyGet "Creator"
              []
              outEnum

getParent78 :: IGroupBox a0
            -> IO (IDispatch ())
getParent78 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell5 :: IGroupBox a0
                    -> IO (Range ())
getBottomRightCell5 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront12 :: (Variant a1)
               => IGroupBox a0
               -> IO a1
bringToFront12 =
  function1 "BringToFront"
            []
            outVariant

copy18 :: (Variant a1)
       => IGroupBox a0
       -> IO a1
copy18 =
  function1 "Copy"
            []
            outVariant

copyPicture14 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IGroupBox a0
              -> IO a1
copyPicture14 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut13 :: (Variant a1)
      => IGroupBox a0
      -> IO a1
cut13 =
  function1 "Cut"
            []
            outVariant

delete33 :: (Variant a1)
         => IGroupBox a0
         -> IO a1
delete33 =
  function1 "Delete"
            []
            outVariant

duplicate12 :: IGroupBox a0
            -> IO (IDispatch ())
duplicate12 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled15 :: IGroupBox a0
             -> IO Bool
getEnabled15 =
  propertyGet "Enabled"
              []
              outBool

setEnabled15 :: Bool
             -> IGroupBox a0
             -> IO ()
setEnabled15 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight16 :: IGroupBox a0
            -> IO Double
getHeight16 =
  propertyGet "Height"
              []
              outDouble

setHeight15 :: Double
            -> IGroupBox a0
            -> IO ()
setHeight15 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex14 :: IGroupBox a0
           -> IO Int32
getIndex14 =
  propertyGet "Index"
              []
              outInt32

getLeft16 :: IGroupBox a0
          -> IO Double
getLeft16 =
  propertyGet "Left"
              []
              outDouble

setLeft15 :: Double
          -> IGroupBox a0
          -> IO ()
setLeft15 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked14 :: IGroupBox a0
            -> IO Bool
getLocked14 =
  propertyGet "Locked"
              []
              outBool

setLocked14 :: Bool
            -> IGroupBox a0
            -> IO ()
setLocked14 rHS =
  propertySet "Locked"
              [inBool rHS]

getName19 :: IGroupBox a0
          -> IO String
getName19 =
  propertyGet "Name"
              []
              outString

setName13 :: String
          -> IGroupBox a0
          -> IO ()
setName13 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction14 :: IGroupBox a0
              -> IO String
getOnAction14 =
  propertyGet "OnAction"
              []
              outString

setOnAction14 :: String
              -> IGroupBox a0
              -> IO ()
setOnAction14 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement12 :: (Variant a1)
               => IGroupBox a0
               -> IO a1
getPlacement12 =
  propertyGet "Placement"
              []
              outVariant

setPlacement12 :: a1
               -> IGroupBox a0
               -> IO ()
setPlacement12 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject12 :: IGroupBox a0
                 -> IO Bool
getPrintObject12 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject12 :: Bool
                 -> IGroupBox a0
                 -> IO ()
setPrintObject12 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select18 :: (Variant a1, Variant a2)
         => a2
         -> IGroupBox a0
         -> IO a1
select18 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack12 :: (Variant a1)
             => IGroupBox a0
             -> IO a1
sendToBack12 =
  function1 "SendToBack"
            []
            outVariant

getTop16 :: IGroupBox a0
         -> IO Double
getTop16 =
  propertyGet "Top"
              []
              outDouble

setTop15 :: Double
         -> IGroupBox a0
         -> IO ()
setTop15 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell5 :: IGroupBox a0
                -> IO (Range ())
getTopLeftCell5 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible24 :: IGroupBox a0
             -> IO Bool
getVisible24 =
  propertyGet "Visible"
              []
              outBool

setVisible24 :: Bool
             -> IGroupBox a0
             -> IO ()
setVisible24 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth17 :: IGroupBox a0
           -> IO Double
getWidth17 =
  propertyGet "Width"
              []
              outDouble

setWidth16 :: Double
           -> IGroupBox a0
           -> IO ()
setWidth16 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder12 :: IGroupBox a0
            -> IO Int32
getZOrder12 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange12 :: IGroupBox a0
                -> IO (ShapeRange ())
getShapeRange12 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption16 :: IGroupBox a0
             -> IO String
getCaption16 =
  propertyGet "Caption"
              []
              outString

setCaption16 :: String
             -> IGroupBox a0
             -> IO ()
setCaption16 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters9 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> IGroupBox a0
               -> IO (Characters ())
getCharacters9 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling13 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IGroupBox a0
                -> IO a1
checkSpelling13 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText8 :: IGroupBox a0
               -> IO Bool
getLockedText8 =
  propertyGet "LockedText"
              []
              outBool

setLockedText8 :: Bool
               -> IGroupBox a0
               -> IO ()
setLockedText8 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText11 :: IGroupBox a0
          -> IO String
getText11 =
  propertyGet "Text"
              []
              outString

setText10 :: String
          -> IGroupBox a0
          -> IO ()
setText10 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator6 :: (Variant a1)
                => IGroupBox a0
                -> IO a1
getAccelerator6 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator6 :: a1
                -> IGroupBox a0
                -> IO ()
setAccelerator6 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getDisplay3DShading8 :: IGroupBox a0
                     -> IO Bool
getDisplay3DShading8 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading8 :: Bool
                     -> IGroupBox a0
                     -> IO ()
setDisplay3DShading8 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getPhoneticAccelerator6 :: (Variant a1)
                        => IGroupBox a0
                        -> IO a1
getPhoneticAccelerator6 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator6 :: a1
                        -> IGroupBox a0
                        -> IO ()
setPhoneticAccelerator6 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IGroupBoxes
-- 
-- --------------------------------------------------
data IGroupBoxes_ a = IGroupBoxes__ 
type IGroupBoxes a = IDispatch (IGroupBoxes_ a)
iidIGroupBoxes :: IID (IGroupBoxes ())
iidIGroupBoxes = mkIID "{0002088A-0001-0000-C000-000000000046}"

getApplication64 :: (Variant a1)
                 => IGroupBoxes a0
                 -> IO a1
getApplication64 =
  propertyGet "Application"
              []
              outVariant

getCreator64 :: IGroupBoxes a0
             -> IO XlCreator
getCreator64 =
  propertyGet "Creator"
              []
              outEnum

getParent79 :: IGroupBoxes a0
            -> IO (IDispatch ())
getParent79 =
  propertyGet "Parent"
              []
              outIDispatch

dummy37 :: IGroupBoxes a0
        -> IO ()
dummy37 =
  method0 "_Dummy3"
          []

bringToFront13 :: (Variant a1)
               => IGroupBoxes a0
               -> IO a1
bringToFront13 =
  function1 "BringToFront"
            []
            outVariant

copy19 :: (Variant a1)
       => IGroupBoxes a0
       -> IO a1
copy19 =
  function1 "Copy"
            []
            outVariant

copyPicture15 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IGroupBoxes a0
              -> IO a1
copyPicture15 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut14 :: (Variant a1)
      => IGroupBoxes a0
      -> IO a1
cut14 =
  function1 "Cut"
            []
            outVariant

delete34 :: (Variant a1)
         => IGroupBoxes a0
         -> IO a1
delete34 =
  function1 "Delete"
            []
            outVariant

duplicate13 :: IGroupBoxes a0
            -> IO (IDispatch ())
duplicate13 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled16 :: IGroupBoxes a0
             -> IO Bool
getEnabled16 =
  propertyGet "Enabled"
              []
              outBool

setEnabled16 :: Bool
             -> IGroupBoxes a0
             -> IO ()
setEnabled16 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight17 :: IGroupBoxes a0
            -> IO Double
getHeight17 =
  propertyGet "Height"
              []
              outDouble

setHeight16 :: Double
            -> IGroupBoxes a0
            -> IO ()
setHeight16 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy127 :: IGroupBoxes a0
         -> IO ()
dummy127 =
  method0 "_Dummy12"
          []

getLeft17 :: IGroupBoxes a0
          -> IO Double
getLeft17 =
  propertyGet "Left"
              []
              outDouble

setLeft16 :: Double
          -> IGroupBoxes a0
          -> IO ()
setLeft16 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked15 :: IGroupBoxes a0
            -> IO Bool
getLocked15 =
  propertyGet "Locked"
              []
              outBool

setLocked15 :: Bool
            -> IGroupBoxes a0
            -> IO ()
setLocked15 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy157 :: IGroupBoxes a0
         -> IO ()
dummy157 =
  method0 "_Dummy15"
          []

getOnAction15 :: IGroupBoxes a0
              -> IO String
getOnAction15 =
  propertyGet "OnAction"
              []
              outString

setOnAction15 :: String
              -> IGroupBoxes a0
              -> IO ()
setOnAction15 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement13 :: (Variant a1)
               => IGroupBoxes a0
               -> IO a1
getPlacement13 =
  propertyGet "Placement"
              []
              outVariant

setPlacement13 :: a1
               -> IGroupBoxes a0
               -> IO ()
setPlacement13 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject13 :: IGroupBoxes a0
                 -> IO Bool
getPrintObject13 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject13 :: Bool
                 -> IGroupBoxes a0
                 -> IO ()
setPrintObject13 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select19 :: (Variant a1, Variant a2)
         => a2
         -> IGroupBoxes a0
         -> IO a1
select19 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack13 :: (Variant a1)
             => IGroupBoxes a0
             -> IO a1
sendToBack13 =
  function1 "SendToBack"
            []
            outVariant

getTop17 :: IGroupBoxes a0
         -> IO Double
getTop17 =
  propertyGet "Top"
              []
              outDouble

setTop16 :: Double
         -> IGroupBoxes a0
         -> IO ()
setTop16 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy226 :: IGroupBoxes a0
         -> IO ()
dummy226 =
  method0 "_Dummy22"
          []

getVisible25 :: IGroupBoxes a0
             -> IO Bool
getVisible25 =
  propertyGet "Visible"
              []
              outBool

setVisible25 :: Bool
             -> IGroupBoxes a0
             -> IO ()
setVisible25 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth18 :: IGroupBoxes a0
           -> IO Double
getWidth18 =
  propertyGet "Width"
              []
              outDouble

setWidth17 :: Double
           -> IGroupBoxes a0
           -> IO ()
setWidth17 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder13 :: IGroupBoxes a0
            -> IO Int32
getZOrder13 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange13 :: IGroupBoxes a0
                -> IO (ShapeRange ())
getShapeRange13 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption17 :: IGroupBoxes a0
             -> IO String
getCaption17 =
  propertyGet "Caption"
              []
              outString

setCaption17 :: String
             -> IGroupBoxes a0
             -> IO ()
setCaption17 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters10 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IGroupBoxes a0
                -> IO (Characters ())
getCharacters10 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling14 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IGroupBoxes a0
                -> IO a1
checkSpelling14 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText9 :: IGroupBoxes a0
               -> IO Bool
getLockedText9 =
  propertyGet "LockedText"
              []
              outBool

setLockedText9 :: Bool
               -> IGroupBoxes a0
               -> IO ()
setLockedText9 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText12 :: IGroupBoxes a0
          -> IO String
getText12 =
  propertyGet "Text"
              []
              outString

setText11 :: String
          -> IGroupBoxes a0
          -> IO ()
setText11 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator7 :: (Variant a1)
                => IGroupBoxes a0
                -> IO a1
getAccelerator7 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator7 :: a1
                -> IGroupBoxes a0
                -> IO ()
setAccelerator7 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

getDisplay3DShading9 :: IGroupBoxes a0
                     -> IO Bool
getDisplay3DShading9 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading9 :: Bool
                     -> IGroupBoxes a0
                     -> IO ()
setDisplay3DShading9 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getPhoneticAccelerator7 :: (Variant a1)
                        => IGroupBoxes a0
                        -> IO a1
getPhoneticAccelerator7 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator7 :: a1
                        -> IGroupBoxes a0
                        -> IO ()
setPhoneticAccelerator7 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

add27 :: Double
      -> Double
      -> Double
      -> Double
      -> IGroupBoxes a0
      -> IO (GroupBox ())
add27 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount36 :: IGroupBoxes a0
           -> IO Int32
getCount36 =
  propertyGet "Count"
              []
              outInt32

group7 :: IGroupBoxes a0
       -> IO (GroupObject ())
group7 =
  function1 "Group"
            []
            outIUnknown

item16 :: a1
       -> IGroupBoxes a0
       -> IO (IDispatch ())
item16 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum13 :: IGroupBoxes a0
          -> IO (IUnknown ())
newEnum13 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IDropDown
-- 
-- --------------------------------------------------
data IDropDown_ a = IDropDown__ 
type IDropDown a = IDispatch (IDropDown_ a)
iidIDropDown :: IID (IDropDown ())
iidIDropDown = mkIID "{0002088B-0001-0000-C000-000000000046}"

getApplication65 :: (Variant a1)
                 => IDropDown a0
                 -> IO a1
getApplication65 =
  propertyGet "Application"
              []
              outVariant

getCreator65 :: IDropDown a0
             -> IO XlCreator
getCreator65 =
  propertyGet "Creator"
              []
              outEnum

getParent80 :: IDropDown a0
            -> IO (IDispatch ())
getParent80 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell6 :: IDropDown a0
                    -> IO (Range ())
getBottomRightCell6 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront14 :: (Variant a1)
               => IDropDown a0
               -> IO a1
bringToFront14 =
  function1 "BringToFront"
            []
            outVariant

copy20 :: (Variant a1)
       => IDropDown a0
       -> IO a1
copy20 =
  function1 "Copy"
            []
            outVariant

copyPicture16 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IDropDown a0
              -> IO a1
copyPicture16 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut15 :: (Variant a1)
      => IDropDown a0
      -> IO a1
cut15 =
  function1 "Cut"
            []
            outVariant

delete35 :: (Variant a1)
         => IDropDown a0
         -> IO a1
delete35 =
  function1 "Delete"
            []
            outVariant

duplicate14 :: IDropDown a0
            -> IO (IDispatch ())
duplicate14 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled17 :: IDropDown a0
             -> IO Bool
getEnabled17 =
  propertyGet "Enabled"
              []
              outBool

setEnabled17 :: Bool
             -> IDropDown a0
             -> IO ()
setEnabled17 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight18 :: IDropDown a0
            -> IO Double
getHeight18 =
  propertyGet "Height"
              []
              outDouble

setHeight17 :: Double
            -> IDropDown a0
            -> IO ()
setHeight17 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex15 :: IDropDown a0
           -> IO Int32
getIndex15 =
  propertyGet "Index"
              []
              outInt32

getLeft18 :: IDropDown a0
          -> IO Double
getLeft18 =
  propertyGet "Left"
              []
              outDouble

setLeft17 :: Double
          -> IDropDown a0
          -> IO ()
setLeft17 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked16 :: IDropDown a0
            -> IO Bool
getLocked16 =
  propertyGet "Locked"
              []
              outBool

setLocked16 :: Bool
            -> IDropDown a0
            -> IO ()
setLocked16 rHS =
  propertySet "Locked"
              [inBool rHS]

getName20 :: IDropDown a0
          -> IO String
getName20 =
  propertyGet "Name"
              []
              outString

setName14 :: String
          -> IDropDown a0
          -> IO ()
setName14 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction16 :: IDropDown a0
              -> IO String
getOnAction16 =
  propertyGet "OnAction"
              []
              outString

setOnAction16 :: String
              -> IDropDown a0
              -> IO ()
setOnAction16 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement14 :: (Variant a1)
               => IDropDown a0
               -> IO a1
getPlacement14 =
  propertyGet "Placement"
              []
              outVariant

setPlacement14 :: a1
               -> IDropDown a0
               -> IO ()
setPlacement14 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject14 :: IDropDown a0
                 -> IO Bool
getPrintObject14 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject14 :: Bool
                 -> IDropDown a0
                 -> IO ()
setPrintObject14 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select20 :: (Variant a1, Variant a2)
         => a2
         -> IDropDown a0
         -> IO a1
select20 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack14 :: (Variant a1)
             => IDropDown a0
             -> IO a1
sendToBack14 =
  function1 "SendToBack"
            []
            outVariant

getTop18 :: IDropDown a0
         -> IO Double
getTop18 =
  propertyGet "Top"
              []
              outDouble

setTop17 :: Double
         -> IDropDown a0
         -> IO ()
setTop17 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell6 :: IDropDown a0
                -> IO (Range ())
getTopLeftCell6 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible26 :: IDropDown a0
             -> IO Bool
getVisible26 =
  propertyGet "Visible"
              []
              outBool

setVisible26 :: Bool
             -> IDropDown a0
             -> IO ()
setVisible26 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth19 :: IDropDown a0
           -> IO Double
getWidth19 =
  propertyGet "Width"
              []
              outDouble

setWidth18 :: Double
           -> IDropDown a0
           -> IO ()
setWidth18 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder14 :: IDropDown a0
            -> IO Int32
getZOrder14 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange14 :: IDropDown a0
                -> IO (ShapeRange ())
getShapeRange14 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem2 :: (Variant a1, Variant a3)
         => a2
         -> a3
         -> IDropDown a0
         -> IO a1
addItem2 text0 index0 =
  function1 "AddItem"
            [ inVariant text0
            , inVariant index0
            ]
            outVariant

getDisplay3DShading10 :: IDropDown a0
                      -> IO Bool
getDisplay3DShading10 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading10 :: Bool
                      -> IDropDown a0
                      -> IO ()
setDisplay3DShading10 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getDefault36 :: IDropDown a0
             -> IO Int32
getDefault36 =
  propertyGet "_Default"
              []
              outInt32

setDefault13 :: Int32
             -> IDropDown a0
             -> IO ()
setDefault13 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getLinkedCell8 :: IDropDown a0
               -> IO String
getLinkedCell8 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell8 :: String
               -> IDropDown a0
               -> IO ()
setLinkedCell8 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getLinkedObject1 :: (Variant a1)
                 => IDropDown a0
                 -> IO a1
getLinkedObject1 =
  propertyGet "LinkedObject"
              []
              outVariant

getList1 :: (Variant a1, Variant a2)
         => a2
         -> IDropDown a0
         -> IO a1
getList1 index0 =
  propertyGet "List"
              [inVariant index0]
              outVariant

setList1 :: (Variant a1)
         => a1
         -> a2
         -> IDropDown a0
         -> IO ()
setList1 index0 rHS =
  propertySet "List"
              [ inVariant index0
              , inVariant rHS
              ]

getListCount0 :: IDropDown a0
              -> IO Int32
getListCount0 =
  propertyGet "ListCount"
              []
              outInt32

getListFillRange2 :: IDropDown a0
                  -> IO String
getListFillRange2 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange2 :: String
                  -> IDropDown a0
                  -> IO ()
setListFillRange2 rHS =
  propertySet "ListFillRange"
              [inString rHS]

getListIndex2 :: IDropDown a0
              -> IO Int32
getListIndex2 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex2 :: Int32
              -> IDropDown a0
              -> IO ()
setListIndex2 rHS =
  propertySet "ListIndex"
              [inInt32 rHS]

dummy360 :: IDropDown a0
         -> IO ()
dummy360 =
  method0 "_Dummy36"
          []

removeAllItems2 :: (Variant a1)
                => IDropDown a0
                -> IO a1
removeAllItems2 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem2 :: (Variant a1, Variant a2)
            => Int32
            -> a2
            -> IDropDown a0
            -> IO a1
removeItem2 index0 count0 =
  function1 "RemoveItem"
            [ inInt32 index0
            , inVariant count0
            ]
            outVariant

getSelected1 :: (Variant a1, Variant a2)
             => a2
             -> IDropDown a0
             -> IO a1
getSelected1 index0 =
  propertyGet "Selected"
              [inVariant index0]
              outVariant

setSelected1 :: (Variant a1)
             => a1
             -> a2
             -> IDropDown a0
             -> IO ()
setSelected1 index0 rHS =
  propertySet "Selected"
              [ inVariant index0
              , inVariant rHS
              ]

getValue17 :: IDropDown a0
           -> IO Int32
getValue17 =
  propertyGet "Value"
              []
              outInt32

setValue15 :: Int32
           -> IDropDown a0
           -> IO ()
setValue15 rHS =
  propertySet "Value"
              [inInt32 rHS]

getCaption18 :: IDropDown a0
             -> IO String
getCaption18 =
  propertyGet "Caption"
              []
              outString

setCaption18 :: String
             -> IDropDown a0
             -> IO ()
setCaption18 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters11 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDropDown a0
                -> IO (Characters ())
getCharacters11 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getDropDownLines0 :: IDropDown a0
                  -> IO Int32
getDropDownLines0 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines0 :: Int32
                  -> IDropDown a0
                  -> IO ()
setDropDownLines0 rHS =
  propertySet "DropDownLines"
              [inInt32 rHS]

getText13 :: IDropDown a0
          -> IO String
getText13 =
  propertyGet "Text"
              []
              outString

setText12 :: String
          -> IDropDown a0
          -> IO ()
setText12 rHS =
  propertySet "Text"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IDropDowns
-- 
-- --------------------------------------------------
data IDropDowns_ a = IDropDowns__ 
type IDropDowns a = IDispatch (IDropDowns_ a)
iidIDropDowns :: IID (IDropDowns ())
iidIDropDowns = mkIID "{0002088C-0001-0000-C000-000000000046}"

getApplication66 :: (Variant a1)
                 => IDropDowns a0
                 -> IO a1
getApplication66 =
  propertyGet "Application"
              []
              outVariant

getCreator66 :: IDropDowns a0
             -> IO XlCreator
getCreator66 =
  propertyGet "Creator"
              []
              outEnum

getParent81 :: IDropDowns a0
            -> IO (IDispatch ())
getParent81 =
  propertyGet "Parent"
              []
              outIDispatch

dummy38 :: IDropDowns a0
        -> IO ()
dummy38 =
  method0 "_Dummy3"
          []

bringToFront15 :: (Variant a1)
               => IDropDowns a0
               -> IO a1
bringToFront15 =
  function1 "BringToFront"
            []
            outVariant

copy21 :: (Variant a1)
       => IDropDowns a0
       -> IO a1
copy21 =
  function1 "Copy"
            []
            outVariant

copyPicture17 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IDropDowns a0
              -> IO a1
copyPicture17 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut16 :: (Variant a1)
      => IDropDowns a0
      -> IO a1
cut16 =
  function1 "Cut"
            []
            outVariant

delete36 :: (Variant a1)
         => IDropDowns a0
         -> IO a1
delete36 =
  function1 "Delete"
            []
            outVariant

duplicate15 :: IDropDowns a0
            -> IO (IDispatch ())
duplicate15 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled18 :: IDropDowns a0
             -> IO Bool
getEnabled18 =
  propertyGet "Enabled"
              []
              outBool

setEnabled18 :: Bool
             -> IDropDowns a0
             -> IO ()
setEnabled18 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight19 :: IDropDowns a0
            -> IO Double
getHeight19 =
  propertyGet "Height"
              []
              outDouble

setHeight18 :: Double
            -> IDropDowns a0
            -> IO ()
setHeight18 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy128 :: IDropDowns a0
         -> IO ()
dummy128 =
  method0 "_Dummy12"
          []

getLeft19 :: IDropDowns a0
          -> IO Double
getLeft19 =
  propertyGet "Left"
              []
              outDouble

setLeft18 :: Double
          -> IDropDowns a0
          -> IO ()
setLeft18 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked17 :: IDropDowns a0
            -> IO Bool
getLocked17 =
  propertyGet "Locked"
              []
              outBool

setLocked17 :: Bool
            -> IDropDowns a0
            -> IO ()
setLocked17 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy158 :: IDropDowns a0
         -> IO ()
dummy158 =
  method0 "_Dummy15"
          []

getOnAction17 :: IDropDowns a0
              -> IO String
getOnAction17 =
  propertyGet "OnAction"
              []
              outString

setOnAction17 :: String
              -> IDropDowns a0
              -> IO ()
setOnAction17 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement15 :: (Variant a1)
               => IDropDowns a0
               -> IO a1
getPlacement15 =
  propertyGet "Placement"
              []
              outVariant

setPlacement15 :: a1
               -> IDropDowns a0
               -> IO ()
setPlacement15 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject15 :: IDropDowns a0
                 -> IO Bool
getPrintObject15 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject15 :: Bool
                 -> IDropDowns a0
                 -> IO ()
setPrintObject15 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select21 :: (Variant a1, Variant a2)
         => a2
         -> IDropDowns a0
         -> IO a1
select21 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack15 :: (Variant a1)
             => IDropDowns a0
             -> IO a1
sendToBack15 =
  function1 "SendToBack"
            []
            outVariant

getTop19 :: IDropDowns a0
         -> IO Double
getTop19 =
  propertyGet "Top"
              []
              outDouble

setTop18 :: Double
         -> IDropDowns a0
         -> IO ()
setTop18 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy227 :: IDropDowns a0
         -> IO ()
dummy227 =
  method0 "_Dummy22"
          []

getVisible27 :: IDropDowns a0
             -> IO Bool
getVisible27 =
  propertyGet "Visible"
              []
              outBool

setVisible27 :: Bool
             -> IDropDowns a0
             -> IO ()
setVisible27 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth20 :: IDropDowns a0
           -> IO Double
getWidth20 =
  propertyGet "Width"
              []
              outDouble

setWidth19 :: Double
           -> IDropDowns a0
           -> IO ()
setWidth19 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder15 :: IDropDowns a0
            -> IO Int32
getZOrder15 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange15 :: IDropDowns a0
                -> IO (ShapeRange ())
getShapeRange15 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem3 :: (Variant a1, Variant a3)
         => a2
         -> a3
         -> IDropDowns a0
         -> IO a1
addItem3 text0 index0 =
  function1 "AddItem"
            [ inVariant text0
            , inVariant index0
            ]
            outVariant

getDisplay3DShading11 :: IDropDowns a0
                      -> IO Bool
getDisplay3DShading11 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading11 :: Bool
                      -> IDropDowns a0
                      -> IO ()
setDisplay3DShading11 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getDefault37 :: IDropDowns a0
             -> IO Int32
getDefault37 =
  propertyGet "_Default"
              []
              outInt32

setDefault14 :: Int32
             -> IDropDowns a0
             -> IO ()
setDefault14 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getLinkedCell9 :: IDropDowns a0
               -> IO String
getLinkedCell9 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell9 :: String
               -> IDropDowns a0
               -> IO ()
setLinkedCell9 rHS =
  propertySet "LinkedCell"
              [inString rHS]

dummy311 :: IDropDowns a0
         -> IO ()
dummy311 =
  method0 "_Dummy31"
          []

getList2 :: (Variant a1, Variant a2)
         => a2
         -> IDropDowns a0
         -> IO a1
getList2 index0 =
  propertyGet "List"
              [inVariant index0]
              outVariant

setList2 :: (Variant a1)
         => a1
         -> a2
         -> IDropDowns a0
         -> IO ()
setList2 index0 rHS =
  propertySet "List"
              [ inVariant index0
              , inVariant rHS
              ]

dummy331 :: IDropDowns a0
         -> IO ()
dummy331 =
  method0 "_Dummy33"
          []

getListFillRange3 :: IDropDowns a0
                  -> IO String
getListFillRange3 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange3 :: String
                  -> IDropDowns a0
                  -> IO ()
setListFillRange3 rHS =
  propertySet "ListFillRange"
              [inString rHS]

getListIndex3 :: IDropDowns a0
              -> IO Int32
getListIndex3 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex3 :: Int32
              -> IDropDowns a0
              -> IO ()
setListIndex3 rHS =
  propertySet "ListIndex"
              [inInt32 rHS]

dummy361 :: IDropDowns a0
         -> IO ()
dummy361 =
  method0 "_Dummy36"
          []

removeAllItems3 :: (Variant a1)
                => IDropDowns a0
                -> IO a1
removeAllItems3 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem3 :: (Variant a1, Variant a2)
            => Int32
            -> a2
            -> IDropDowns a0
            -> IO a1
removeItem3 index0 count0 =
  function1 "RemoveItem"
            [ inInt32 index0
            , inVariant count0
            ]
            outVariant

getSelected2 :: (Variant a1, Variant a2)
             => a2
             -> IDropDowns a0
             -> IO a1
getSelected2 index0 =
  propertyGet "Selected"
              [inVariant index0]
              outVariant

setSelected2 :: (Variant a1)
             => a1
             -> a2
             -> IDropDowns a0
             -> IO ()
setSelected2 index0 rHS =
  propertySet "Selected"
              [ inVariant index0
              , inVariant rHS
              ]

getValue18 :: IDropDowns a0
           -> IO Int32
getValue18 =
  propertyGet "Value"
              []
              outInt32

setValue16 :: Int32
           -> IDropDowns a0
           -> IO ()
setValue16 rHS =
  propertySet "Value"
              [inInt32 rHS]

getCaption19 :: IDropDowns a0
             -> IO String
getCaption19 =
  propertyGet "Caption"
              []
              outString

setCaption19 :: String
             -> IDropDowns a0
             -> IO ()
setCaption19 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters12 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDropDowns a0
                -> IO (Characters ())
getCharacters12 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getDropDownLines1 :: IDropDowns a0
                  -> IO Int32
getDropDownLines1 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines1 :: Int32
                  -> IDropDowns a0
                  -> IO ()
setDropDownLines1 rHS =
  propertySet "DropDownLines"
              [inInt32 rHS]

getText14 :: IDropDowns a0
          -> IO String
getText14 =
  propertyGet "Text"
              []
              outString

setText13 :: String
          -> IDropDowns a0
          -> IO ()
setText13 rHS =
  propertySet "Text"
              [inString rHS]

add28 :: (Variant a1)
      => Double
      -> Double
      -> Double
      -> Double
      -> a1
      -> IDropDowns a0
      -> IO (DropDown ())
add28 left top width height editable =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            , inVariant editable
            ]
            outIUnknown

getCount37 :: IDropDowns a0
           -> IO Int32
getCount37 =
  propertyGet "Count"
              []
              outInt32

group8 :: IDropDowns a0
       -> IO (GroupObject ())
group8 =
  function1 "Group"
            []
            outIUnknown

item17 :: a1
       -> IDropDowns a0
       -> IO (IDispatch ())
item17 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum14 :: IDropDowns a0
          -> IO (IUnknown ())
newEnum14 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ISpinner
-- 
-- --------------------------------------------------
data ISpinner_ a = ISpinner__ 
type ISpinner a = IDispatch (ISpinner_ a)
iidISpinner :: IID (ISpinner ())
iidISpinner = mkIID "{0002088D-0001-0000-C000-000000000046}"

getApplication67 :: (Variant a1)
                 => ISpinner a0
                 -> IO a1
getApplication67 =
  propertyGet "Application"
              []
              outVariant

getCreator67 :: ISpinner a0
             -> IO XlCreator
getCreator67 =
  propertyGet "Creator"
              []
              outEnum

getParent82 :: ISpinner a0
            -> IO (IDispatch ())
getParent82 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell7 :: ISpinner a0
                    -> IO (Range ())
getBottomRightCell7 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront16 :: (Variant a1)
               => ISpinner a0
               -> IO a1
bringToFront16 =
  function1 "BringToFront"
            []
            outVariant

copy22 :: (Variant a1)
       => ISpinner a0
       -> IO a1
copy22 =
  function1 "Copy"
            []
            outVariant

copyPicture18 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ISpinner a0
              -> IO a1
copyPicture18 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut17 :: (Variant a1)
      => ISpinner a0
      -> IO a1
cut17 =
  function1 "Cut"
            []
            outVariant

delete37 :: (Variant a1)
         => ISpinner a0
         -> IO a1
delete37 =
  function1 "Delete"
            []
            outVariant

duplicate16 :: ISpinner a0
            -> IO (IDispatch ())
duplicate16 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled19 :: ISpinner a0
             -> IO Bool
getEnabled19 =
  propertyGet "Enabled"
              []
              outBool

setEnabled19 :: Bool
             -> ISpinner a0
             -> IO ()
setEnabled19 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight20 :: ISpinner a0
            -> IO Double
getHeight20 =
  propertyGet "Height"
              []
              outDouble

setHeight19 :: Double
            -> ISpinner a0
            -> IO ()
setHeight19 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex16 :: ISpinner a0
           -> IO Int32
getIndex16 =
  propertyGet "Index"
              []
              outInt32

getLeft20 :: ISpinner a0
          -> IO Double
getLeft20 =
  propertyGet "Left"
              []
              outDouble

setLeft19 :: Double
          -> ISpinner a0
          -> IO ()
setLeft19 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked18 :: ISpinner a0
            -> IO Bool
getLocked18 =
  propertyGet "Locked"
              []
              outBool

setLocked18 :: Bool
            -> ISpinner a0
            -> IO ()
setLocked18 rHS =
  propertySet "Locked"
              [inBool rHS]

getName21 :: ISpinner a0
          -> IO String
getName21 =
  propertyGet "Name"
              []
              outString

setName15 :: String
          -> ISpinner a0
          -> IO ()
setName15 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction18 :: ISpinner a0
              -> IO String
getOnAction18 =
  propertyGet "OnAction"
              []
              outString

setOnAction18 :: String
              -> ISpinner a0
              -> IO ()
setOnAction18 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement16 :: (Variant a1)
               => ISpinner a0
               -> IO a1
getPlacement16 =
  propertyGet "Placement"
              []
              outVariant

setPlacement16 :: a1
               -> ISpinner a0
               -> IO ()
setPlacement16 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject16 :: ISpinner a0
                 -> IO Bool
getPrintObject16 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject16 :: Bool
                 -> ISpinner a0
                 -> IO ()
setPrintObject16 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select22 :: (Variant a1, Variant a2)
         => a2
         -> ISpinner a0
         -> IO a1
select22 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack16 :: (Variant a1)
             => ISpinner a0
             -> IO a1
sendToBack16 =
  function1 "SendToBack"
            []
            outVariant

getTop20 :: ISpinner a0
         -> IO Double
getTop20 =
  propertyGet "Top"
              []
              outDouble

setTop19 :: Double
         -> ISpinner a0
         -> IO ()
setTop19 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell7 :: ISpinner a0
                -> IO (Range ())
getTopLeftCell7 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible28 :: ISpinner a0
             -> IO Bool
getVisible28 =
  propertyGet "Visible"
              []
              outBool

setVisible28 :: Bool
             -> ISpinner a0
             -> IO ()
setVisible28 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth21 :: ISpinner a0
           -> IO Double
getWidth21 =
  propertyGet "Width"
              []
              outDouble

setWidth20 :: Double
           -> ISpinner a0
           -> IO ()
setWidth20 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder16 :: ISpinner a0
            -> IO Int32
getZOrder16 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange16 :: ISpinner a0
                -> IO (ShapeRange ())
getShapeRange16 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault38 :: ISpinner a0
             -> IO Int32
getDefault38 =
  propertyGet "_Default"
              []
              outInt32

setDefault15 :: Int32
             -> ISpinner a0
             -> IO ()
setDefault15 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading12 :: ISpinner a0
                      -> IO Bool
getDisplay3DShading12 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading12 :: Bool
                      -> ISpinner a0
                      -> IO ()
setDisplay3DShading12 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getLinkedCell10 :: ISpinner a0
                -> IO String
getLinkedCell10 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell10 :: String
                -> ISpinner a0
                -> IO ()
setLinkedCell10 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getMax2 :: ISpinner a0
        -> IO Int32
getMax2 =
  propertyGet "Max"
              []
              outInt32

setMax2 :: Int32
        -> ISpinner a0
        -> IO ()
setMax2 rHS =
  propertySet "Max"
              [inInt32 rHS]

getMin2 :: ISpinner a0
        -> IO Int32
getMin2 =
  propertyGet "Min"
              []
              outInt32

setMin2 :: Int32
        -> ISpinner a0
        -> IO ()
setMin2 rHS =
  propertySet "Min"
              [inInt32 rHS]

getSmallChange2 :: ISpinner a0
                -> IO Int32
getSmallChange2 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange2 :: Int32
                -> ISpinner a0
                -> IO ()
setSmallChange2 rHS =
  propertySet "SmallChange"
              [inInt32 rHS]

getValue19 :: ISpinner a0
           -> IO Int32
getValue19 =
  propertyGet "Value"
              []
              outInt32

setValue17 :: Int32
           -> ISpinner a0
           -> IO ()
setValue17 rHS =
  propertySet "Value"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface ISpinners
-- 
-- --------------------------------------------------
data ISpinners_ a = ISpinners__ 
type ISpinners a = IDispatch (ISpinners_ a)
iidISpinners :: IID (ISpinners ())
iidISpinners = mkIID "{0002088E-0001-0000-C000-000000000046}"

getApplication68 :: (Variant a1)
                 => ISpinners a0
                 -> IO a1
getApplication68 =
  propertyGet "Application"
              []
              outVariant

getCreator68 :: ISpinners a0
             -> IO XlCreator
getCreator68 =
  propertyGet "Creator"
              []
              outEnum

getParent83 :: ISpinners a0
            -> IO (IDispatch ())
getParent83 =
  propertyGet "Parent"
              []
              outIDispatch

dummy39 :: ISpinners a0
        -> IO ()
dummy39 =
  method0 "_Dummy3"
          []

bringToFront17 :: (Variant a1)
               => ISpinners a0
               -> IO a1
bringToFront17 =
  function1 "BringToFront"
            []
            outVariant

copy23 :: (Variant a1)
       => ISpinners a0
       -> IO a1
copy23 =
  function1 "Copy"
            []
            outVariant

copyPicture19 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ISpinners a0
              -> IO a1
copyPicture19 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut18 :: (Variant a1)
      => ISpinners a0
      -> IO a1
cut18 =
  function1 "Cut"
            []
            outVariant

delete38 :: (Variant a1)
         => ISpinners a0
         -> IO a1
delete38 =
  function1 "Delete"
            []
            outVariant

duplicate17 :: ISpinners a0
            -> IO (IDispatch ())
duplicate17 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled20 :: ISpinners a0
             -> IO Bool
getEnabled20 =
  propertyGet "Enabled"
              []
              outBool

setEnabled20 :: Bool
             -> ISpinners a0
             -> IO ()
setEnabled20 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight21 :: ISpinners a0
            -> IO Double
getHeight21 =
  propertyGet "Height"
              []
              outDouble

setHeight20 :: Double
            -> ISpinners a0
            -> IO ()
setHeight20 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy129 :: ISpinners a0
         -> IO ()
dummy129 =
  method0 "_Dummy12"
          []

getLeft21 :: ISpinners a0
          -> IO Double
getLeft21 =
  propertyGet "Left"
              []
              outDouble

setLeft20 :: Double
          -> ISpinners a0
          -> IO ()
setLeft20 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked19 :: ISpinners a0
            -> IO Bool
getLocked19 =
  propertyGet "Locked"
              []
              outBool

setLocked19 :: Bool
            -> ISpinners a0
            -> IO ()
setLocked19 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy159 :: ISpinners a0
         -> IO ()
dummy159 =
  method0 "_Dummy15"
          []

getOnAction19 :: ISpinners a0
              -> IO String
getOnAction19 =
  propertyGet "OnAction"
              []
              outString

setOnAction19 :: String
              -> ISpinners a0
              -> IO ()
setOnAction19 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement17 :: (Variant a1)
               => ISpinners a0
               -> IO a1
getPlacement17 =
  propertyGet "Placement"
              []
              outVariant

setPlacement17 :: a1
               -> ISpinners a0
               -> IO ()
setPlacement17 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject17 :: ISpinners a0
                 -> IO Bool
getPrintObject17 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject17 :: Bool
                 -> ISpinners a0
                 -> IO ()
setPrintObject17 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select23 :: (Variant a1, Variant a2)
         => a2
         -> ISpinners a0
         -> IO a1
select23 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack17 :: (Variant a1)
             => ISpinners a0
             -> IO a1
sendToBack17 =
  function1 "SendToBack"
            []
            outVariant

getTop21 :: ISpinners a0
         -> IO Double
getTop21 =
  propertyGet "Top"
              []
              outDouble

setTop20 :: Double
         -> ISpinners a0
         -> IO ()
setTop20 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy228 :: ISpinners a0
         -> IO ()
dummy228 =
  method0 "_Dummy22"
          []

getVisible29 :: ISpinners a0
             -> IO Bool
getVisible29 =
  propertyGet "Visible"
              []
              outBool

setVisible29 :: Bool
             -> ISpinners a0
             -> IO ()
setVisible29 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth22 :: ISpinners a0
           -> IO Double
getWidth22 =
  propertyGet "Width"
              []
              outDouble

setWidth21 :: Double
           -> ISpinners a0
           -> IO ()
setWidth21 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder17 :: ISpinners a0
            -> IO Int32
getZOrder17 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange17 :: ISpinners a0
                -> IO (ShapeRange ())
getShapeRange17 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault39 :: ISpinners a0
             -> IO Int32
getDefault39 =
  propertyGet "_Default"
              []
              outInt32

setDefault16 :: Int32
             -> ISpinners a0
             -> IO ()
setDefault16 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getDisplay3DShading13 :: ISpinners a0
                      -> IO Bool
getDisplay3DShading13 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading13 :: Bool
                      -> ISpinners a0
                      -> IO ()
setDisplay3DShading13 rHS =
  propertySet "Display3DShading"
              [inBool rHS]

getLinkedCell11 :: ISpinners a0
                -> IO String
getLinkedCell11 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell11 :: String
                -> ISpinners a0
                -> IO ()
setLinkedCell11 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getMax3 :: ISpinners a0
        -> IO Int32
getMax3 =
  propertyGet "Max"
              []
              outInt32

setMax3 :: Int32
        -> ISpinners a0
        -> IO ()
setMax3 rHS =
  propertySet "Max"
              [inInt32 rHS]

getMin3 :: ISpinners a0
        -> IO Int32
getMin3 =
  propertyGet "Min"
              []
              outInt32

setMin3 :: Int32
        -> ISpinners a0
        -> IO ()
setMin3 rHS =
  propertySet "Min"
              [inInt32 rHS]

getSmallChange3 :: ISpinners a0
                -> IO Int32
getSmallChange3 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange3 :: Int32
                -> ISpinners a0
                -> IO ()
setSmallChange3 rHS =
  propertySet "SmallChange"
              [inInt32 rHS]

getValue20 :: ISpinners a0
           -> IO Int32
getValue20 =
  propertyGet "Value"
              []
              outInt32

setValue18 :: Int32
           -> ISpinners a0
           -> IO ()
setValue18 rHS =
  propertySet "Value"
              [inInt32 rHS]

add29 :: Double
      -> Double
      -> Double
      -> Double
      -> ISpinners a0
      -> IO (Spinner ())
add29 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount38 :: ISpinners a0
           -> IO Int32
getCount38 =
  propertyGet "Count"
              []
              outInt32

group9 :: ISpinners a0
       -> IO (GroupObject ())
group9 =
  function1 "Group"
            []
            outIUnknown

item18 :: a1
       -> ISpinners a0
       -> IO (IDispatch ())
item18 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum15 :: ISpinners a0
          -> IO (IUnknown ())
newEnum15 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IDialogFrame
-- 
-- --------------------------------------------------
data IDialogFrame_ a = IDialogFrame__ 
type IDialogFrame a = IDispatch (IDialogFrame_ a)
iidIDialogFrame :: IID (IDialogFrame ())
iidIDialogFrame = mkIID "{0002088F-0001-0000-C000-000000000046}"

getApplication69 :: (Variant a1)
                 => IDialogFrame a0
                 -> IO a1
getApplication69 =
  propertyGet "Application"
              []
              outVariant

getCreator69 :: IDialogFrame a0
             -> IO XlCreator
getCreator69 =
  propertyGet "Creator"
              []
              outEnum

getParent84 :: IDialogFrame a0
            -> IO (IDispatch ())
getParent84 =
  propertyGet "Parent"
              []
              outIDispatch

dummy312 :: IDialogFrame a0
         -> IO ()
dummy312 =
  method0 "_Dummy3"
          []

dummy40 :: IDialogFrame a0
        -> IO ()
dummy40 =
  method0 "_Dummy4"
          []

dummy50 :: IDialogFrame a0
        -> IO ()
dummy50 =
  method0 "_Dummy5"
          []

copyPicture20 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IDialogFrame a0
              -> IO a1
copyPicture20 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

dummy71 :: IDialogFrame a0
        -> IO ()
dummy71 =
  method0 "_Dummy7"
          []

dummy80 :: IDialogFrame a0
        -> IO ()
dummy80 =
  method0 "_Dummy8"
          []

dummy90 :: IDialogFrame a0
        -> IO ()
dummy90 =
  method0 "_Dummy9"
          []

dummy100 :: IDialogFrame a0
         -> IO ()
dummy100 =
  method0 "_Dummy10"
          []

getHeight22 :: IDialogFrame a0
            -> IO Double
getHeight22 =
  propertyGet "Height"
              []
              outDouble

setHeight21 :: Double
            -> IDialogFrame a0
            -> IO ()
setHeight21 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1210 :: IDialogFrame a0
          -> IO ()
dummy1210 =
  method0 "_Dummy12"
          []

getLeft22 :: IDialogFrame a0
          -> IO Double
getLeft22 =
  propertyGet "Left"
              []
              outDouble

setLeft21 :: Double
          -> IDialogFrame a0
          -> IO ()
setLeft21 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked20 :: IDialogFrame a0
            -> IO Bool
getLocked20 =
  propertyGet "Locked"
              []
              outBool

setLocked20 :: Bool
            -> IDialogFrame a0
            -> IO ()
setLocked20 rHS =
  propertySet "Locked"
              [inBool rHS]

getName22 :: IDialogFrame a0
          -> IO String
getName22 =
  propertyGet "Name"
              []
              outString

setName16 :: String
          -> IDialogFrame a0
          -> IO ()
setName16 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction20 :: IDialogFrame a0
              -> IO String
getOnAction20 =
  propertyGet "OnAction"
              []
              outString

setOnAction20 :: String
              -> IDialogFrame a0
              -> IO ()
setOnAction20 rHS =
  propertySet "OnAction"
              [inString rHS]

dummy170 :: IDialogFrame a0
         -> IO ()
dummy170 =
  method0 "_Dummy17"
          []

dummy18 :: IDialogFrame a0
        -> IO ()
dummy18 =
  method0 "_Dummy18"
          []

select24 :: (Variant a1, Variant a2)
         => a2
         -> IDialogFrame a0
         -> IO a1
select24 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

dummy200 :: IDialogFrame a0
         -> IO ()
dummy200 =
  method0 "_Dummy20"
          []

getTop22 :: IDialogFrame a0
         -> IO Double
getTop22 =
  propertyGet "Top"
              []
              outDouble

setTop21 :: Double
         -> IDialogFrame a0
         -> IO ()
setTop21 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy229 :: IDialogFrame a0
         -> IO ()
dummy229 =
  method0 "_Dummy22"
          []

dummy230 :: IDialogFrame a0
         -> IO ()
dummy230 =
  method0 "_Dummy23"
          []

getWidth23 :: IDialogFrame a0
           -> IO Double
getWidth23 =
  propertyGet "Width"
              []
              outDouble

setWidth22 :: Double
           -> IDialogFrame a0
           -> IO ()
setWidth22 rHS =
  propertySet "Width"
              [inDouble rHS]

dummy25 :: IDialogFrame a0
        -> IO ()
dummy25 =
  method0 "_Dummy25"
          []

getShapeRange18 :: IDialogFrame a0
                -> IO (ShapeRange ())
getShapeRange18 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption20 :: IDialogFrame a0
             -> IO String
getCaption20 =
  propertyGet "Caption"
              []
              outString

setCaption20 :: String
             -> IDialogFrame a0
             -> IO ()
setCaption20 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters13 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDialogFrame a0
                -> IO (Characters ())
getCharacters13 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling15 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IDialogFrame a0
                -> IO a1
checkSpelling15 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText10 :: IDialogFrame a0
                -> IO Bool
getLockedText10 =
  propertyGet "LockedText"
              []
              outBool

setLockedText10 :: Bool
                -> IDialogFrame a0
                -> IO ()
setLockedText10 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText15 :: IDialogFrame a0
          -> IO String
getText15 =
  propertyGet "Text"
              []
              outString

setText14 :: String
          -> IDialogFrame a0
          -> IO ()
setText14 rHS =
  propertySet "Text"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface ILabel
-- 
-- --------------------------------------------------
data ILabel_ a = ILabel__ 
type ILabel a = IDispatch (ILabel_ a)
iidILabel :: IID (ILabel ())
iidILabel = mkIID "{00020890-0001-0000-C000-000000000046}"

getApplication70 :: (Variant a1)
                 => ILabel a0
                 -> IO a1
getApplication70 =
  propertyGet "Application"
              []
              outVariant

getCreator70 :: ILabel a0
             -> IO XlCreator
getCreator70 =
  propertyGet "Creator"
              []
              outEnum

getParent85 :: ILabel a0
            -> IO (IDispatch ())
getParent85 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell8 :: ILabel a0
                    -> IO (Range ())
getBottomRightCell8 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront18 :: (Variant a1)
               => ILabel a0
               -> IO a1
bringToFront18 =
  function1 "BringToFront"
            []
            outVariant

copy24 :: (Variant a1)
       => ILabel a0
       -> IO a1
copy24 =
  function1 "Copy"
            []
            outVariant

copyPicture21 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ILabel a0
              -> IO a1
copyPicture21 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut19 :: (Variant a1)
      => ILabel a0
      -> IO a1
cut19 =
  function1 "Cut"
            []
            outVariant

delete39 :: (Variant a1)
         => ILabel a0
         -> IO a1
delete39 =
  function1 "Delete"
            []
            outVariant

duplicate18 :: ILabel a0
            -> IO (IDispatch ())
duplicate18 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled21 :: ILabel a0
             -> IO Bool
getEnabled21 =
  propertyGet "Enabled"
              []
              outBool

setEnabled21 :: Bool
             -> ILabel a0
             -> IO ()
setEnabled21 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight23 :: ILabel a0
            -> IO Double
getHeight23 =
  propertyGet "Height"
              []
              outDouble

setHeight22 :: Double
            -> ILabel a0
            -> IO ()
setHeight22 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex17 :: ILabel a0
           -> IO Int32
getIndex17 =
  propertyGet "Index"
              []
              outInt32

getLeft23 :: ILabel a0
          -> IO Double
getLeft23 =
  propertyGet "Left"
              []
              outDouble

setLeft22 :: Double
          -> ILabel a0
          -> IO ()
setLeft22 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked21 :: ILabel a0
            -> IO Bool
getLocked21 =
  propertyGet "Locked"
              []
              outBool

setLocked21 :: Bool
            -> ILabel a0
            -> IO ()
setLocked21 rHS =
  propertySet "Locked"
              [inBool rHS]

getName23 :: ILabel a0
          -> IO String
getName23 =
  propertyGet "Name"
              []
              outString

setName17 :: String
          -> ILabel a0
          -> IO ()
setName17 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction21 :: ILabel a0
              -> IO String
getOnAction21 =
  propertyGet "OnAction"
              []
              outString

setOnAction21 :: String
              -> ILabel a0
              -> IO ()
setOnAction21 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement18 :: (Variant a1)
               => ILabel a0
               -> IO a1
getPlacement18 =
  propertyGet "Placement"
              []
              outVariant

setPlacement18 :: a1
               -> ILabel a0
               -> IO ()
setPlacement18 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject18 :: ILabel a0
                 -> IO Bool
getPrintObject18 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject18 :: Bool
                 -> ILabel a0
                 -> IO ()
setPrintObject18 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select25 :: (Variant a1, Variant a2)
         => a2
         -> ILabel a0
         -> IO a1
select25 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack18 :: (Variant a1)
             => ILabel a0
             -> IO a1
sendToBack18 =
  function1 "SendToBack"
            []
            outVariant

getTop23 :: ILabel a0
         -> IO Double
getTop23 =
  propertyGet "Top"
              []
              outDouble

setTop22 :: Double
         -> ILabel a0
         -> IO ()
setTop22 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell8 :: ILabel a0
                -> IO (Range ())
getTopLeftCell8 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible30 :: ILabel a0
             -> IO Bool
getVisible30 =
  propertyGet "Visible"
              []
              outBool

setVisible30 :: Bool
             -> ILabel a0
             -> IO ()
setVisible30 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth24 :: ILabel a0
           -> IO Double
getWidth24 =
  propertyGet "Width"
              []
              outDouble

setWidth23 :: Double
           -> ILabel a0
           -> IO ()
setWidth23 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder18 :: ILabel a0
            -> IO Int32
getZOrder18 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange19 :: ILabel a0
                -> IO (ShapeRange ())
getShapeRange19 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption21 :: ILabel a0
             -> IO String
getCaption21 =
  propertyGet "Caption"
              []
              outString

setCaption21 :: String
             -> ILabel a0
             -> IO ()
setCaption21 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters14 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> ILabel a0
                -> IO (Characters ())
getCharacters14 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling16 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> ILabel a0
                -> IO a1
checkSpelling16 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText11 :: ILabel a0
                -> IO Bool
getLockedText11 =
  propertyGet "LockedText"
              []
              outBool

setLockedText11 :: Bool
                -> ILabel a0
                -> IO ()
setLockedText11 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText16 :: ILabel a0
          -> IO String
getText16 =
  propertyGet "Text"
              []
              outString

setText15 :: String
          -> ILabel a0
          -> IO ()
setText15 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator8 :: (Variant a1)
                => ILabel a0
                -> IO a1
getAccelerator8 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator8 :: a1
                -> ILabel a0
                -> IO ()
setAccelerator8 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

dummy332 :: ILabel a0
         -> IO ()
dummy332 =
  method0 "_Dummy33"
          []

getPhoneticAccelerator8 :: (Variant a1)
                        => ILabel a0
                        -> IO a1
getPhoneticAccelerator8 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator8 :: a1
                        -> ILabel a0
                        -> IO ()
setPhoneticAccelerator8 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface ILabels
-- 
-- --------------------------------------------------
data ILabels_ a = ILabels__ 
type ILabels a = IDispatch (ILabels_ a)
iidILabels :: IID (ILabels ())
iidILabels = mkIID "{00020891-0001-0000-C000-000000000046}"

getApplication71 :: (Variant a1)
                 => ILabels a0
                 -> IO a1
getApplication71 =
  propertyGet "Application"
              []
              outVariant

getCreator71 :: ILabels a0
             -> IO XlCreator
getCreator71 =
  propertyGet "Creator"
              []
              outEnum

getParent86 :: ILabels a0
            -> IO (IDispatch ())
getParent86 =
  propertyGet "Parent"
              []
              outIDispatch

dummy313 :: ILabels a0
         -> IO ()
dummy313 =
  method0 "_Dummy3"
          []

bringToFront19 :: (Variant a1)
               => ILabels a0
               -> IO a1
bringToFront19 =
  function1 "BringToFront"
            []
            outVariant

copy25 :: (Variant a1)
       => ILabels a0
       -> IO a1
copy25 =
  function1 "Copy"
            []
            outVariant

copyPicture22 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ILabels a0
              -> IO a1
copyPicture22 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut20 :: (Variant a1)
      => ILabels a0
      -> IO a1
cut20 =
  function1 "Cut"
            []
            outVariant

delete40 :: (Variant a1)
         => ILabels a0
         -> IO a1
delete40 =
  function1 "Delete"
            []
            outVariant

duplicate19 :: ILabels a0
            -> IO (IDispatch ())
duplicate19 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled22 :: ILabels a0
             -> IO Bool
getEnabled22 =
  propertyGet "Enabled"
              []
              outBool

setEnabled22 :: Bool
             -> ILabels a0
             -> IO ()
setEnabled22 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight24 :: ILabels a0
            -> IO Double
getHeight24 =
  propertyGet "Height"
              []
              outDouble

setHeight23 :: Double
            -> ILabels a0
            -> IO ()
setHeight23 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1211 :: ILabels a0
          -> IO ()
dummy1211 =
  method0 "_Dummy12"
          []

getLeft24 :: ILabels a0
          -> IO Double
getLeft24 =
  propertyGet "Left"
              []
              outDouble

setLeft23 :: Double
          -> ILabels a0
          -> IO ()
setLeft23 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked22 :: ILabels a0
            -> IO Bool
getLocked22 =
  propertyGet "Locked"
              []
              outBool

setLocked22 :: Bool
            -> ILabels a0
            -> IO ()
setLocked22 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1510 :: ILabels a0
          -> IO ()
dummy1510 =
  method0 "_Dummy15"
          []

getOnAction22 :: ILabels a0
              -> IO String
getOnAction22 =
  propertyGet "OnAction"
              []
              outString

setOnAction22 :: String
              -> ILabels a0
              -> IO ()
setOnAction22 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement19 :: (Variant a1)
               => ILabels a0
               -> IO a1
getPlacement19 =
  propertyGet "Placement"
              []
              outVariant

setPlacement19 :: a1
               -> ILabels a0
               -> IO ()
setPlacement19 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject19 :: ILabels a0
                 -> IO Bool
getPrintObject19 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject19 :: Bool
                 -> ILabels a0
                 -> IO ()
setPrintObject19 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select26 :: (Variant a1, Variant a2)
         => a2
         -> ILabels a0
         -> IO a1
select26 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack19 :: (Variant a1)
             => ILabels a0
             -> IO a1
sendToBack19 =
  function1 "SendToBack"
            []
            outVariant

getTop24 :: ILabels a0
         -> IO Double
getTop24 =
  propertyGet "Top"
              []
              outDouble

setTop23 :: Double
         -> ILabels a0
         -> IO ()
setTop23 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2210 :: ILabels a0
          -> IO ()
dummy2210 =
  method0 "_Dummy22"
          []

getVisible31 :: ILabels a0
             -> IO Bool
getVisible31 =
  propertyGet "Visible"
              []
              outBool

setVisible31 :: Bool
             -> ILabels a0
             -> IO ()
setVisible31 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth25 :: ILabels a0
           -> IO Double
getWidth25 =
  propertyGet "Width"
              []
              outDouble

setWidth24 :: Double
           -> ILabels a0
           -> IO ()
setWidth24 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder19 :: ILabels a0
            -> IO Int32
getZOrder19 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange20 :: ILabels a0
                -> IO (ShapeRange ())
getShapeRange20 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption22 :: ILabels a0
             -> IO String
getCaption22 =
  propertyGet "Caption"
              []
              outString

setCaption22 :: String
             -> ILabels a0
             -> IO ()
setCaption22 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters15 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> ILabels a0
                -> IO (Characters ())
getCharacters15 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling17 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> ILabels a0
                -> IO a1
checkSpelling17 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText12 :: ILabels a0
                -> IO Bool
getLockedText12 =
  propertyGet "LockedText"
              []
              outBool

setLockedText12 :: Bool
                -> ILabels a0
                -> IO ()
setLockedText12 rHS =
  propertySet "LockedText"
              [inBool rHS]

getText17 :: ILabels a0
          -> IO String
getText17 =
  propertyGet "Text"
              []
              outString

setText16 :: String
          -> ILabels a0
          -> IO ()
setText16 rHS =
  propertySet "Text"
              [inString rHS]

getAccelerator9 :: (Variant a1)
                => ILabels a0
                -> IO a1
getAccelerator9 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator9 :: a1
                -> ILabels a0
                -> IO ()
setAccelerator9 rHS =
  propertySet "Accelerator"
              [inVariant rHS]

dummy333 :: ILabels a0
         -> IO ()
dummy333 =
  method0 "_Dummy33"
          []

getPhoneticAccelerator9 :: (Variant a1)
                        => ILabels a0
                        -> IO a1
getPhoneticAccelerator9 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator9 :: a1
                        -> ILabels a0
                        -> IO ()
setPhoneticAccelerator9 rHS =
  propertySet "PhoneticAccelerator"
              [inVariant rHS]

add30 :: Double
      -> Double
      -> Double
      -> Double
      -> ILabels a0
      -> IO (Label ())
add30 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount39 :: ILabels a0
           -> IO Int32
getCount39 =
  propertyGet "Count"
              []
              outInt32

group10 :: ILabels a0
        -> IO (GroupObject ())
group10 =
  function1 "Group"
            []
            outIUnknown

item19 :: a1
       -> ILabels a0
       -> IO (IDispatch ())
item19 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum16 :: ILabels a0
          -> IO (IUnknown ())
newEnum16 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPanes
-- 
-- --------------------------------------------------
data IPanes_ a = IPanes__ 
type IPanes a = IDispatch (IPanes_ a)
iidIPanes :: IID (IPanes ())
iidIPanes = mkIID "{00020894-0001-0000-C000-000000000046}"

getApplication72 :: (Variant a1)
                 => IPanes a0
                 -> IO a1
getApplication72 =
  propertyGet "Application"
              []
              outVariant

getCreator72 :: IPanes a0
             -> IO XlCreator
getCreator72 =
  propertyGet "Creator"
              []
              outEnum

getParent87 :: IPanes a0
            -> IO (IDispatch ())
getParent87 =
  propertyGet "Parent"
              []
              outIDispatch

getCount40 :: IPanes a0
           -> IO Int32
getCount40 =
  propertyGet "Count"
              []
              outInt32

getItem18 :: Int32
          -> IPanes a0
          -> IO (Pane ())
getItem18 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getDefault40 :: Int32
             -> IPanes a0
             -> IO (Pane ())
getDefault40 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPane
-- 
-- --------------------------------------------------
data IPane_ a = IPane__ 
type IPane a = IDispatch (IPane_ a)
iidIPane :: IID (IPane ())
iidIPane = mkIID "{00020895-0001-0000-C000-000000000046}"

getApplication73 :: (Variant a1)
                 => IPane a0
                 -> IO a1
getApplication73 =
  propertyGet "Application"
              []
              outVariant

getCreator73 :: IPane a0
             -> IO XlCreator
getCreator73 =
  propertyGet "Creator"
              []
              outEnum

getParent88 :: IPane a0
            -> IO (IDispatch ())
getParent88 =
  propertyGet "Parent"
              []
              outIDispatch

activate8 :: IPane a0
          -> IO Bool
activate8 =
  function1 "Activate"
            []
            outBool

getIndex18 :: IPane a0
           -> IO Int32
getIndex18 =
  propertyGet "Index"
              []
              outInt32

largeScroll0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> IPane a0
             -> IO a1
largeScroll0 down up toRight toLeft =
  function1 "LargeScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getScrollColumn0 :: IPane a0
                 -> IO Int32
getScrollColumn0 =
  propertyGet "ScrollColumn"
              []
              outInt32

setScrollColumn0 :: Int32
                 -> IPane a0
                 -> IO ()
setScrollColumn0 rHS =
  propertySet "ScrollColumn"
              [inInt32 rHS]

getScrollRow0 :: IPane a0
              -> IO Int32
getScrollRow0 =
  propertyGet "ScrollRow"
              []
              outInt32

setScrollRow0 :: Int32
              -> IPane a0
              -> IO ()
setScrollRow0 rHS =
  propertySet "ScrollRow"
              [inInt32 rHS]

smallScroll0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> IPane a0
             -> IO a1
smallScroll0 down up toRight toLeft =
  function1 "SmallScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getVisibleRange0 :: IPane a0
                 -> IO (Range ())
getVisibleRange0 =
  propertyGet "VisibleRange"
              []
              outIUnknown

scrollIntoView0 :: (Variant a1)
                => Int32
                -> Int32
                -> Int32
                -> Int32
                -> a1
                -> IPane a0
                -> IO ()
scrollIntoView0 left top width height start =
  method0 "ScrollIntoView"
          [ inInt32 left
          , inInt32 top
          , inInt32 width
          , inInt32 height
          , inVariant start
          ]

pointsToScreenPixelsX0 :: Int32
                       -> IPane a0
                       -> IO Int32
pointsToScreenPixelsX0 points =
  function1 "PointsToScreenPixelsX"
            [inInt32 points]
            outInt32

pointsToScreenPixelsY0 :: Int32
                       -> IPane a0
                       -> IO Int32
pointsToScreenPixelsY0 points =
  function1 "PointsToScreenPixelsY"
            [inInt32 points]
            outInt32

-- --------------------------------------------------
-- 
-- interface IScenarios
-- 
-- --------------------------------------------------
data IScenarios_ a = IScenarios__ 
type IScenarios a = IDispatch (IScenarios_ a)
iidIScenarios :: IID (IScenarios ())
iidIScenarios = mkIID "{00020896-0001-0000-C000-000000000046}"

getApplication74 :: (Variant a1)
                 => IScenarios a0
                 -> IO a1
getApplication74 =
  propertyGet "Application"
              []
              outVariant

getCreator74 :: IScenarios a0
             -> IO XlCreator
getCreator74 =
  propertyGet "Creator"
              []
              outEnum

getParent89 :: IScenarios a0
            -> IO (IDispatch ())
getParent89 =
  propertyGet "Parent"
              []
              outIDispatch

add31 :: (Variant a2, Variant a3, Variant a4, Variant a5)
      => String
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> IScenarios a0
      -> IO (Scenario ())
add31 name changingCells values comment locked hidden =
  function1 "Add"
            [ inString name
            , inVariant changingCells
            , inVariant values
            , inVariant comment
            , inVariant locked
            , inVariant hidden
            ]
            outIUnknown

getCount41 :: IScenarios a0
           -> IO Int32
getCount41 =
  propertyGet "Count"
              []
              outInt32

createSummary :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IScenarios a0
              -> IO a1
createSummary reportType resultCells =
  function1 "CreateSummary"
            [ inDefaultValue (inInt32 1) inVariant reportType
            , inVariant resultCells
            ]
            outVariant

item20 :: a1
       -> IScenarios a0
       -> IO (Scenario ())
item20 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

merge1 :: (Variant a1)
       => a2
       -> IScenarios a0
       -> IO a1
merge1 source =
  function1 "Merge"
            [inVariant source]
            outVariant

newEnum17 :: IScenarios a0
          -> IO (IUnknown ())
newEnum17 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IScenario
-- 
-- --------------------------------------------------
data IScenario_ a = IScenario__ 
type IScenario a = IDispatch (IScenario_ a)
iidIScenario :: IID (IScenario ())
iidIScenario = mkIID "{00020897-0001-0000-C000-000000000046}"

getApplication75 :: (Variant a1)
                 => IScenario a0
                 -> IO a1
getApplication75 =
  propertyGet "Application"
              []
              outVariant

getCreator75 :: IScenario a0
             -> IO XlCreator
getCreator75 =
  propertyGet "Creator"
              []
              outEnum

getParent90 :: IScenario a0
            -> IO (IDispatch ())
getParent90 =
  propertyGet "Parent"
              []
              outIDispatch

changeScenario :: (Variant a1, Variant a3)
               => a2
               -> a3
               -> IScenario a0
               -> IO a1
changeScenario changingCells values =
  function1 "ChangeScenario"
            [ inVariant changingCells
            , inVariant values
            ]
            outVariant

getChangingCells :: IScenario a0
                 -> IO (Range ())
getChangingCells =
  propertyGet "ChangingCells"
              []
              outIUnknown

getComment0 :: IScenario a0
            -> IO String
getComment0 =
  propertyGet "Comment"
              []
              outString

setComment :: String
           -> IScenario a0
           -> IO ()
setComment rHS =
  propertySet "Comment"
              [inString rHS]

delete41 :: (Variant a1)
         => IScenario a0
         -> IO a1
delete41 =
  function1 "Delete"
            []
            outVariant

getHidden1 :: IScenario a0
           -> IO Bool
getHidden1 =
  propertyGet "Hidden"
              []
              outBool

setHidden1 :: Bool
           -> IScenario a0
           -> IO ()
setHidden1 rHS =
  propertySet "Hidden"
              [inBool rHS]

getIndex19 :: IScenario a0
           -> IO Int32
getIndex19 =
  propertyGet "Index"
              []
              outInt32

getLocked23 :: IScenario a0
            -> IO Bool
getLocked23 =
  propertyGet "Locked"
              []
              outBool

setLocked23 :: Bool
            -> IScenario a0
            -> IO ()
setLocked23 rHS =
  propertySet "Locked"
              [inBool rHS]

getName24 :: IScenario a0
          -> IO String
getName24 =
  propertyGet "Name"
              []
              outString

setName18 :: String
          -> IScenario a0
          -> IO ()
setName18 rHS =
  propertySet "Name"
              [inString rHS]

show1 :: (Variant a1)
      => IScenario a0
      -> IO a1
show1 =
  function1 "Show"
            []
            outVariant

getValues :: (Variant a1, Variant a2)
          => a2
          -> IScenario a0
          -> IO a1
getValues index0 =
  propertyGet "Values"
              [inVariant index0]
              outVariant

-- --------------------------------------------------
-- 
-- interface IGroupObject
-- 
-- --------------------------------------------------
data IGroupObject_ a = IGroupObject__ 
type IGroupObject a = IDispatch (IGroupObject_ a)
iidIGroupObject :: IID (IGroupObject ())
iidIGroupObject = mkIID "{00020898-0001-0000-C000-000000000046}"

getApplication76 :: (Variant a1)
                 => IGroupObject a0
                 -> IO a1
getApplication76 =
  propertyGet "Application"
              []
              outVariant

getCreator76 :: IGroupObject a0
             -> IO XlCreator
getCreator76 =
  propertyGet "Creator"
              []
              outEnum

getParent91 :: IGroupObject a0
            -> IO (IDispatch ())
getParent91 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell9 :: IGroupObject a0
                    -> IO (Range ())
getBottomRightCell9 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront20 :: (Variant a1)
               => IGroupObject a0
               -> IO a1
bringToFront20 =
  function1 "BringToFront"
            []
            outVariant

copy26 :: (Variant a1)
       => IGroupObject a0
       -> IO a1
copy26 =
  function1 "Copy"
            []
            outVariant

copyPicture23 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IGroupObject a0
              -> IO a1
copyPicture23 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut21 :: (Variant a1)
      => IGroupObject a0
      -> IO a1
cut21 =
  function1 "Cut"
            []
            outVariant

delete42 :: (Variant a1)
         => IGroupObject a0
         -> IO a1
delete42 =
  function1 "Delete"
            []
            outVariant

duplicate20 :: IGroupObject a0
            -> IO (IDispatch ())
duplicate20 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled23 :: IGroupObject a0
             -> IO Bool
getEnabled23 =
  propertyGet "Enabled"
              []
              outBool

setEnabled23 :: Bool
             -> IGroupObject a0
             -> IO ()
setEnabled23 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight25 :: IGroupObject a0
            -> IO Double
getHeight25 =
  propertyGet "Height"
              []
              outDouble

setHeight24 :: Double
            -> IGroupObject a0
            -> IO ()
setHeight24 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex20 :: IGroupObject a0
           -> IO Int32
getIndex20 =
  propertyGet "Index"
              []
              outInt32

getLeft25 :: IGroupObject a0
          -> IO Double
getLeft25 =
  propertyGet "Left"
              []
              outDouble

setLeft24 :: Double
          -> IGroupObject a0
          -> IO ()
setLeft24 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked24 :: IGroupObject a0
            -> IO Bool
getLocked24 =
  propertyGet "Locked"
              []
              outBool

setLocked24 :: Bool
            -> IGroupObject a0
            -> IO ()
setLocked24 rHS =
  propertySet "Locked"
              [inBool rHS]

getName25 :: IGroupObject a0
          -> IO String
getName25 =
  propertyGet "Name"
              []
              outString

setName19 :: String
          -> IGroupObject a0
          -> IO ()
setName19 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction23 :: IGroupObject a0
              -> IO String
getOnAction23 =
  propertyGet "OnAction"
              []
              outString

setOnAction23 :: String
              -> IGroupObject a0
              -> IO ()
setOnAction23 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement20 :: (Variant a1)
               => IGroupObject a0
               -> IO a1
getPlacement20 =
  propertyGet "Placement"
              []
              outVariant

setPlacement20 :: a1
               -> IGroupObject a0
               -> IO ()
setPlacement20 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject20 :: IGroupObject a0
                 -> IO Bool
getPrintObject20 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject20 :: Bool
                 -> IGroupObject a0
                 -> IO ()
setPrintObject20 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select27 :: (Variant a1, Variant a2)
         => a2
         -> IGroupObject a0
         -> IO a1
select27 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack20 :: (Variant a1)
             => IGroupObject a0
             -> IO a1
sendToBack20 =
  function1 "SendToBack"
            []
            outVariant

getTop25 :: IGroupObject a0
         -> IO Double
getTop25 =
  propertyGet "Top"
              []
              outDouble

setTop24 :: Double
         -> IGroupObject a0
         -> IO ()
setTop24 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell9 :: IGroupObject a0
                -> IO (Range ())
getTopLeftCell9 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible32 :: IGroupObject a0
             -> IO Bool
getVisible32 =
  propertyGet "Visible"
              []
              outBool

setVisible32 :: Bool
             -> IGroupObject a0
             -> IO ()
setVisible32 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth26 :: IGroupObject a0
           -> IO Double
getWidth26 =
  propertyGet "Width"
              []
              outDouble

setWidth25 :: Double
           -> IGroupObject a0
           -> IO ()
setWidth25 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder20 :: IGroupObject a0
            -> IO Int32
getZOrder20 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange21 :: IGroupObject a0
                -> IO (ShapeRange ())
getShapeRange21 =
  propertyGet "ShapeRange"
              []
              outIUnknown

dummy27 :: IGroupObject a0
        -> IO ()
dummy27 =
  method0 "_Dummy27"
          []

dummy280 :: IGroupObject a0
         -> IO ()
dummy280 =
  method0 "_Dummy28"
          []

getAddIndent4 :: IGroupObject a0
              -> IO Bool
getAddIndent4 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent4 :: Bool
              -> IGroupObject a0
              -> IO ()
setAddIndent4 rHS =
  propertySet "AddIndent"
              [inBool rHS]

dummy300 :: IGroupObject a0
         -> IO ()
dummy300 =
  method0 "_Dummy30"
          []

getArrowHeadLength0 :: (Variant a1)
                    => IGroupObject a0
                    -> IO a1
getArrowHeadLength0 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength0 :: a1
                    -> IGroupObject a0
                    -> IO ()
setArrowHeadLength0 rHS =
  propertySet "ArrowHeadLength"
              [inVariant rHS]

getArrowHeadStyle0 :: (Variant a1)
                   => IGroupObject a0
                   -> IO a1
getArrowHeadStyle0 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle0 :: a1
                   -> IGroupObject a0
                   -> IO ()
setArrowHeadStyle0 rHS =
  propertySet "ArrowHeadStyle"
              [inVariant rHS]

getArrowHeadWidth0 :: (Variant a1)
                   => IGroupObject a0
                   -> IO a1
getArrowHeadWidth0 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth0 :: a1
                   -> IGroupObject a0
                   -> IO ()
setArrowHeadWidth0 rHS =
  propertySet "ArrowHeadWidth"
              [inVariant rHS]

getAutoSize3 :: IGroupObject a0
             -> IO Bool
getAutoSize3 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize3 :: Bool
             -> IGroupObject a0
             -> IO ()
setAutoSize3 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getBorder5 :: IGroupObject a0
           -> IO (Border ())
getBorder5 =
  propertyGet "Border"
              []
              outIUnknown

dummy362 :: IGroupObject a0
         -> IO ()
dummy362 =
  method0 "_Dummy36"
          []

dummy370 :: IGroupObject a0
         -> IO ()
dummy370 =
  method0 "_Dummy37"
          []

dummy380 :: IGroupObject a0
         -> IO ()
dummy380 =
  method0 "_Dummy38"
          []

checkSpelling18 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IGroupObject a0
                -> IO a1
checkSpelling18 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getDefault41 :: IGroupObject a0
             -> IO Int32
getDefault41 =
  propertyGet "_Default"
              []
              outInt32

setDefault17 :: Int32
             -> IGroupObject a0
             -> IO ()
setDefault17 rHS =
  propertySet "_Default"
              [inInt32 rHS]

dummy41 :: IGroupObject a0
        -> IO ()
dummy41 =
  method0 "_Dummy41"
          []

dummy42 :: IGroupObject a0
        -> IO ()
dummy42 =
  method0 "_Dummy42"
          []

dummy43 :: IGroupObject a0
        -> IO ()
dummy43 =
  method0 "_Dummy43"
          []

dummy44 :: IGroupObject a0
        -> IO ()
dummy44 =
  method0 "_Dummy44"
          []

dummy45 :: IGroupObject a0
        -> IO ()
dummy45 =
  method0 "_Dummy45"
          []

getFont5 :: IGroupObject a0
         -> IO (Font ())
getFont5 =
  propertyGet "Font"
              []
              outIUnknown

dummy470 :: IGroupObject a0
         -> IO ()
dummy470 =
  method0 "_Dummy47"
          []

dummy48 :: IGroupObject a0
        -> IO ()
dummy48 =
  method0 "_Dummy48"
          []

getHorizontalAlignment4 :: (Variant a1)
                        => IGroupObject a0
                        -> IO a1
getHorizontalAlignment4 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment4 :: a1
                        -> IGroupObject a0
                        -> IO ()
setHorizontalAlignment4 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

dummy500 :: IGroupObject a0
         -> IO ()
dummy500 =
  method0 "_Dummy50"
          []

getInterior6 :: IGroupObject a0
             -> IO (Interior ())
getInterior6 =
  propertyGet "Interior"
              []
              outIUnknown

dummy52 :: IGroupObject a0
        -> IO ()
dummy52 =
  method0 "_Dummy52"
          []

dummy53 :: IGroupObject a0
        -> IO ()
dummy53 =
  method0 "_Dummy53"
          []

dummy540 :: IGroupObject a0
         -> IO ()
dummy540 =
  method0 "_Dummy54"
          []

dummy55 :: IGroupObject a0
        -> IO ()
dummy55 =
  method0 "_Dummy55"
          []

dummy560 :: IGroupObject a0
         -> IO ()
dummy560 =
  method0 "_Dummy56"
          []

dummy57 :: IGroupObject a0
        -> IO ()
dummy57 =
  method0 "_Dummy57"
          []

dummy58 :: IGroupObject a0
        -> IO ()
dummy58 =
  method0 "_Dummy58"
          []

dummy59 :: IGroupObject a0
        -> IO ()
dummy59 =
  method0 "_Dummy59"
          []

dummy60 :: IGroupObject a0
        -> IO ()
dummy60 =
  method0 "_Dummy60"
          []

dummy61 :: IGroupObject a0
        -> IO ()
dummy61 =
  method0 "_Dummy61"
          []

dummy62 :: IGroupObject a0
        -> IO ()
dummy62 =
  method0 "_Dummy62"
          []

dummy63 :: IGroupObject a0
        -> IO ()
dummy63 =
  method0 "_Dummy63"
          []

getOrientation6 :: (Variant a1)
                => IGroupObject a0
                -> IO a1
getOrientation6 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation6 :: a1
                -> IGroupObject a0
                -> IO ()
setOrientation6 rHS =
  propertySet "Orientation"
              [inVariant rHS]

dummy65 :: IGroupObject a0
        -> IO ()
dummy65 =
  method0 "_Dummy65"
          []

dummy66 :: IGroupObject a0
        -> IO ()
dummy66 =
  method0 "_Dummy66"
          []

dummy67 :: IGroupObject a0
        -> IO ()
dummy67 =
  method0 "_Dummy67"
          []

dummy68 :: IGroupObject a0
        -> IO ()
dummy68 =
  method0 "_Dummy68"
          []

getRoundedCorners0 :: IGroupObject a0
                   -> IO Bool
getRoundedCorners0 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners0 :: Bool
                   -> IGroupObject a0
                   -> IO ()
setRoundedCorners0 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

dummy700 :: IGroupObject a0
         -> IO ()
dummy700 =
  method0 "_Dummy70"
          []

getShadow1 :: IGroupObject a0
           -> IO Bool
getShadow1 =
  propertyGet "Shadow"
              []
              outBool

setShadow1 :: Bool
           -> IGroupObject a0
           -> IO ()
setShadow1 rHS =
  propertySet "Shadow"
              [inBool rHS]

dummy72 :: IGroupObject a0
        -> IO ()
dummy72 =
  method0 "_Dummy72"
          []

dummy73 :: IGroupObject a0
        -> IO ()
dummy73 =
  method0 "_Dummy73"
          []

ungroup1 :: IGroupObject a0
         -> IO (IDispatch ())
ungroup1 =
  function1 "Ungroup"
            []
            outIDispatch

dummy75 :: IGroupObject a0
        -> IO ()
dummy75 =
  method0 "_Dummy75"
          []

getVerticalAlignment4 :: (Variant a1)
                      => IGroupObject a0
                      -> IO a1
getVerticalAlignment4 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment4 :: a1
                      -> IGroupObject a0
                      -> IO ()
setVerticalAlignment4 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

dummy77 :: IGroupObject a0
        -> IO ()
dummy77 =
  method0 "_Dummy77"
          []

getReadingOrder4 :: IGroupObject a0
                 -> IO Int32
getReadingOrder4 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder4 :: Int32
                 -> IGroupObject a0
                 -> IO ()
setReadingOrder4 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IGroupObjects
-- 
-- --------------------------------------------------
data IGroupObjects_ a = IGroupObjects__ 
type IGroupObjects a = IDispatch (IGroupObjects_ a)
iidIGroupObjects :: IID (IGroupObjects ())
iidIGroupObjects = mkIID "{00020899-0001-0000-C000-000000000046}"

getApplication77 :: (Variant a1)
                 => IGroupObjects a0
                 -> IO a1
getApplication77 =
  propertyGet "Application"
              []
              outVariant

getCreator77 :: IGroupObjects a0
             -> IO XlCreator
getCreator77 =
  propertyGet "Creator"
              []
              outEnum

getParent92 :: IGroupObjects a0
            -> IO (IDispatch ())
getParent92 =
  propertyGet "Parent"
              []
              outIDispatch

dummy314 :: IGroupObjects a0
         -> IO ()
dummy314 =
  method0 "_Dummy3"
          []

bringToFront21 :: (Variant a1)
               => IGroupObjects a0
               -> IO a1
bringToFront21 =
  function1 "BringToFront"
            []
            outVariant

copy27 :: (Variant a1)
       => IGroupObjects a0
       -> IO a1
copy27 =
  function1 "Copy"
            []
            outVariant

copyPicture24 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IGroupObjects a0
              -> IO a1
copyPicture24 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut22 :: (Variant a1)
      => IGroupObjects a0
      -> IO a1
cut22 =
  function1 "Cut"
            []
            outVariant

delete43 :: (Variant a1)
         => IGroupObjects a0
         -> IO a1
delete43 =
  function1 "Delete"
            []
            outVariant

duplicate21 :: IGroupObjects a0
            -> IO (IDispatch ())
duplicate21 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled24 :: IGroupObjects a0
             -> IO Bool
getEnabled24 =
  propertyGet "Enabled"
              []
              outBool

setEnabled24 :: Bool
             -> IGroupObjects a0
             -> IO ()
setEnabled24 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight26 :: IGroupObjects a0
            -> IO Double
getHeight26 =
  propertyGet "Height"
              []
              outDouble

setHeight25 :: Double
            -> IGroupObjects a0
            -> IO ()
setHeight25 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1212 :: IGroupObjects a0
          -> IO ()
dummy1212 =
  method0 "_Dummy12"
          []

getLeft26 :: IGroupObjects a0
          -> IO Double
getLeft26 =
  propertyGet "Left"
              []
              outDouble

setLeft25 :: Double
          -> IGroupObjects a0
          -> IO ()
setLeft25 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked25 :: IGroupObjects a0
            -> IO Bool
getLocked25 =
  propertyGet "Locked"
              []
              outBool

setLocked25 :: Bool
            -> IGroupObjects a0
            -> IO ()
setLocked25 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1511 :: IGroupObjects a0
          -> IO ()
dummy1511 =
  method0 "_Dummy15"
          []

getOnAction24 :: IGroupObjects a0
              -> IO String
getOnAction24 =
  propertyGet "OnAction"
              []
              outString

setOnAction24 :: String
              -> IGroupObjects a0
              -> IO ()
setOnAction24 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement21 :: (Variant a1)
               => IGroupObjects a0
               -> IO a1
getPlacement21 =
  propertyGet "Placement"
              []
              outVariant

setPlacement21 :: a1
               -> IGroupObjects a0
               -> IO ()
setPlacement21 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject21 :: IGroupObjects a0
                 -> IO Bool
getPrintObject21 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject21 :: Bool
                 -> IGroupObjects a0
                 -> IO ()
setPrintObject21 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select28 :: (Variant a1, Variant a2)
         => a2
         -> IGroupObjects a0
         -> IO a1
select28 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack21 :: (Variant a1)
             => IGroupObjects a0
             -> IO a1
sendToBack21 =
  function1 "SendToBack"
            []
            outVariant

getTop26 :: IGroupObjects a0
         -> IO Double
getTop26 =
  propertyGet "Top"
              []
              outDouble

setTop25 :: Double
         -> IGroupObjects a0
         -> IO ()
setTop25 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2211 :: IGroupObjects a0
          -> IO ()
dummy2211 =
  method0 "_Dummy22"
          []

getVisible33 :: IGroupObjects a0
             -> IO Bool
getVisible33 =
  propertyGet "Visible"
              []
              outBool

setVisible33 :: Bool
             -> IGroupObjects a0
             -> IO ()
setVisible33 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth27 :: IGroupObjects a0
           -> IO Double
getWidth27 =
  propertyGet "Width"
              []
              outDouble

setWidth26 :: Double
           -> IGroupObjects a0
           -> IO ()
setWidth26 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder21 :: IGroupObjects a0
            -> IO Int32
getZOrder21 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange22 :: IGroupObjects a0
                -> IO (ShapeRange ())
getShapeRange22 =
  propertyGet "ShapeRange"
              []
              outIUnknown

dummy270 :: IGroupObjects a0
         -> IO ()
dummy270 =
  method0 "_Dummy27"
          []

dummy281 :: IGroupObjects a0
         -> IO ()
dummy281 =
  method0 "_Dummy28"
          []

getAddIndent5 :: IGroupObjects a0
              -> IO Bool
getAddIndent5 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent5 :: Bool
              -> IGroupObjects a0
              -> IO ()
setAddIndent5 rHS =
  propertySet "AddIndent"
              [inBool rHS]

dummy301 :: IGroupObjects a0
         -> IO ()
dummy301 =
  method0 "_Dummy30"
          []

getArrowHeadLength1 :: (Variant a1)
                    => IGroupObjects a0
                    -> IO a1
getArrowHeadLength1 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength1 :: a1
                    -> IGroupObjects a0
                    -> IO ()
setArrowHeadLength1 rHS =
  propertySet "ArrowHeadLength"
              [inVariant rHS]

getArrowHeadStyle1 :: (Variant a1)
                   => IGroupObjects a0
                   -> IO a1
getArrowHeadStyle1 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle1 :: a1
                   -> IGroupObjects a0
                   -> IO ()
setArrowHeadStyle1 rHS =
  propertySet "ArrowHeadStyle"
              [inVariant rHS]

getArrowHeadWidth1 :: (Variant a1)
                   => IGroupObjects a0
                   -> IO a1
getArrowHeadWidth1 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth1 :: a1
                   -> IGroupObjects a0
                   -> IO ()
setArrowHeadWidth1 rHS =
  propertySet "ArrowHeadWidth"
              [inVariant rHS]

getAutoSize4 :: IGroupObjects a0
             -> IO Bool
getAutoSize4 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize4 :: Bool
             -> IGroupObjects a0
             -> IO ()
setAutoSize4 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getBorder6 :: IGroupObjects a0
           -> IO (Border ())
getBorder6 =
  propertyGet "Border"
              []
              outIUnknown

dummy363 :: IGroupObjects a0
         -> IO ()
dummy363 =
  method0 "_Dummy36"
          []

dummy371 :: IGroupObjects a0
         -> IO ()
dummy371 =
  method0 "_Dummy37"
          []

dummy381 :: IGroupObjects a0
         -> IO ()
dummy381 =
  method0 "_Dummy38"
          []

checkSpelling19 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IGroupObjects a0
                -> IO a1
checkSpelling19 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getDefault42 :: IGroupObjects a0
             -> IO Int32
getDefault42 =
  propertyGet "_Default"
              []
              outInt32

setDefault18 :: Int32
             -> IGroupObjects a0
             -> IO ()
setDefault18 rHS =
  propertySet "_Default"
              [inInt32 rHS]

dummy410 :: IGroupObjects a0
         -> IO ()
dummy410 =
  method0 "_Dummy41"
          []

dummy420 :: IGroupObjects a0
         -> IO ()
dummy420 =
  method0 "_Dummy42"
          []

dummy430 :: IGroupObjects a0
         -> IO ()
dummy430 =
  method0 "_Dummy43"
          []

dummy440 :: IGroupObjects a0
         -> IO ()
dummy440 =
  method0 "_Dummy44"
          []

dummy450 :: IGroupObjects a0
         -> IO ()
dummy450 =
  method0 "_Dummy45"
          []

getFont6 :: IGroupObjects a0
         -> IO (Font ())
getFont6 =
  propertyGet "Font"
              []
              outIUnknown

dummy471 :: IGroupObjects a0
         -> IO ()
dummy471 =
  method0 "_Dummy47"
          []

dummy480 :: IGroupObjects a0
         -> IO ()
dummy480 =
  method0 "_Dummy48"
          []

getHorizontalAlignment5 :: (Variant a1)
                        => IGroupObjects a0
                        -> IO a1
getHorizontalAlignment5 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment5 :: a1
                        -> IGroupObjects a0
                        -> IO ()
setHorizontalAlignment5 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

dummy501 :: IGroupObjects a0
         -> IO ()
dummy501 =
  method0 "_Dummy50"
          []

getInterior7 :: IGroupObjects a0
             -> IO (Interior ())
getInterior7 =
  propertyGet "Interior"
              []
              outIUnknown

dummy520 :: IGroupObjects a0
         -> IO ()
dummy520 =
  method0 "_Dummy52"
          []

dummy530 :: IGroupObjects a0
         -> IO ()
dummy530 =
  method0 "_Dummy53"
          []

dummy541 :: IGroupObjects a0
         -> IO ()
dummy541 =
  method0 "_Dummy54"
          []

dummy550 :: IGroupObjects a0
         -> IO ()
dummy550 =
  method0 "_Dummy55"
          []

dummy561 :: IGroupObjects a0
         -> IO ()
dummy561 =
  method0 "_Dummy56"
          []

dummy570 :: IGroupObjects a0
         -> IO ()
dummy570 =
  method0 "_Dummy57"
          []

dummy580 :: IGroupObjects a0
         -> IO ()
dummy580 =
  method0 "_Dummy58"
          []

dummy590 :: IGroupObjects a0
         -> IO ()
dummy590 =
  method0 "_Dummy59"
          []

dummy600 :: IGroupObjects a0
         -> IO ()
dummy600 =
  method0 "_Dummy60"
          []

dummy610 :: IGroupObjects a0
         -> IO ()
dummy610 =
  method0 "_Dummy61"
          []

dummy620 :: IGroupObjects a0
         -> IO ()
dummy620 =
  method0 "_Dummy62"
          []

dummy630 :: IGroupObjects a0
         -> IO ()
dummy630 =
  method0 "_Dummy63"
          []

getOrientation7 :: (Variant a1)
                => IGroupObjects a0
                -> IO a1
getOrientation7 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation7 :: a1
                -> IGroupObjects a0
                -> IO ()
setOrientation7 rHS =
  propertySet "Orientation"
              [inVariant rHS]

dummy650 :: IGroupObjects a0
         -> IO ()
dummy650 =
  method0 "_Dummy65"
          []

dummy660 :: IGroupObjects a0
         -> IO ()
dummy660 =
  method0 "_Dummy66"
          []

dummy670 :: IGroupObjects a0
         -> IO ()
dummy670 =
  method0 "_Dummy67"
          []

dummy680 :: IGroupObjects a0
         -> IO ()
dummy680 =
  method0 "_Dummy68"
          []

getRoundedCorners1 :: IGroupObjects a0
                   -> IO Bool
getRoundedCorners1 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners1 :: Bool
                   -> IGroupObjects a0
                   -> IO ()
setRoundedCorners1 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

dummy701 :: IGroupObjects a0
         -> IO ()
dummy701 =
  method0 "_Dummy70"
          []

getShadow2 :: IGroupObjects a0
           -> IO Bool
getShadow2 =
  propertyGet "Shadow"
              []
              outBool

setShadow2 :: Bool
           -> IGroupObjects a0
           -> IO ()
setShadow2 rHS =
  propertySet "Shadow"
              [inBool rHS]

dummy720 :: IGroupObjects a0
         -> IO ()
dummy720 =
  method0 "_Dummy72"
          []

dummy730 :: IGroupObjects a0
         -> IO ()
dummy730 =
  method0 "_Dummy73"
          []

ungroup2 :: IGroupObjects a0
         -> IO (IDispatch ())
ungroup2 =
  function1 "Ungroup"
            []
            outIDispatch

dummy750 :: IGroupObjects a0
         -> IO ()
dummy750 =
  method0 "_Dummy75"
          []

getVerticalAlignment5 :: (Variant a1)
                      => IGroupObjects a0
                      -> IO a1
getVerticalAlignment5 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment5 :: a1
                      -> IGroupObjects a0
                      -> IO ()
setVerticalAlignment5 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

dummy770 :: IGroupObjects a0
         -> IO ()
dummy770 =
  method0 "_Dummy77"
          []

getReadingOrder5 :: IGroupObjects a0
                 -> IO Int32
getReadingOrder5 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder5 :: Int32
                 -> IGroupObjects a0
                 -> IO ()
setReadingOrder5 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getCount42 :: IGroupObjects a0
           -> IO Int32
getCount42 =
  propertyGet "Count"
              []
              outInt32

group11 :: IGroupObjects a0
        -> IO (GroupObject ())
group11 =
  function1 "Group"
            []
            outIUnknown

item21 :: a1
       -> IGroupObjects a0
       -> IO (IDispatch ())
item21 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum18 :: IGroupObjects a0
          -> IO (IUnknown ())
newEnum18 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ILine
-- 
-- --------------------------------------------------
data ILine_ a = ILine__ 
type ILine a = IDispatch (ILine_ a)
iidILine :: IID (ILine ())
iidILine = mkIID "{0002089A-0001-0000-C000-000000000046}"

getApplication78 :: (Variant a1)
                 => ILine a0
                 -> IO a1
getApplication78 =
  propertyGet "Application"
              []
              outVariant

getCreator78 :: ILine a0
             -> IO XlCreator
getCreator78 =
  propertyGet "Creator"
              []
              outEnum

getParent93 :: ILine a0
            -> IO (IDispatch ())
getParent93 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell10 :: ILine a0
                     -> IO (Range ())
getBottomRightCell10 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront22 :: (Variant a1)
               => ILine a0
               -> IO a1
bringToFront22 =
  function1 "BringToFront"
            []
            outVariant

copy28 :: (Variant a1)
       => ILine a0
       -> IO a1
copy28 =
  function1 "Copy"
            []
            outVariant

copyPicture25 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ILine a0
              -> IO a1
copyPicture25 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut23 :: (Variant a1)
      => ILine a0
      -> IO a1
cut23 =
  function1 "Cut"
            []
            outVariant

delete44 :: (Variant a1)
         => ILine a0
         -> IO a1
delete44 =
  function1 "Delete"
            []
            outVariant

duplicate22 :: ILine a0
            -> IO (IDispatch ())
duplicate22 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled25 :: ILine a0
             -> IO Bool
getEnabled25 =
  propertyGet "Enabled"
              []
              outBool

setEnabled25 :: Bool
             -> ILine a0
             -> IO ()
setEnabled25 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight27 :: ILine a0
            -> IO Double
getHeight27 =
  propertyGet "Height"
              []
              outDouble

setHeight26 :: Double
            -> ILine a0
            -> IO ()
setHeight26 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex21 :: ILine a0
           -> IO Int32
getIndex21 =
  propertyGet "Index"
              []
              outInt32

getLeft27 :: ILine a0
          -> IO Double
getLeft27 =
  propertyGet "Left"
              []
              outDouble

setLeft26 :: Double
          -> ILine a0
          -> IO ()
setLeft26 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked26 :: ILine a0
            -> IO Bool
getLocked26 =
  propertyGet "Locked"
              []
              outBool

setLocked26 :: Bool
            -> ILine a0
            -> IO ()
setLocked26 rHS =
  propertySet "Locked"
              [inBool rHS]

getName26 :: ILine a0
          -> IO String
getName26 =
  propertyGet "Name"
              []
              outString

setName20 :: String
          -> ILine a0
          -> IO ()
setName20 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction25 :: ILine a0
              -> IO String
getOnAction25 =
  propertyGet "OnAction"
              []
              outString

setOnAction25 :: String
              -> ILine a0
              -> IO ()
setOnAction25 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement22 :: (Variant a1)
               => ILine a0
               -> IO a1
getPlacement22 =
  propertyGet "Placement"
              []
              outVariant

setPlacement22 :: a1
               -> ILine a0
               -> IO ()
setPlacement22 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject22 :: ILine a0
                 -> IO Bool
getPrintObject22 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject22 :: Bool
                 -> ILine a0
                 -> IO ()
setPrintObject22 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select29 :: (Variant a1, Variant a2)
         => a2
         -> ILine a0
         -> IO a1
select29 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack22 :: (Variant a1)
             => ILine a0
             -> IO a1
sendToBack22 =
  function1 "SendToBack"
            []
            outVariant

getTop27 :: ILine a0
         -> IO Double
getTop27 =
  propertyGet "Top"
              []
              outDouble

setTop26 :: Double
         -> ILine a0
         -> IO ()
setTop26 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell10 :: ILine a0
                 -> IO (Range ())
getTopLeftCell10 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible34 :: ILine a0
             -> IO Bool
getVisible34 =
  propertyGet "Visible"
              []
              outBool

setVisible34 :: Bool
             -> ILine a0
             -> IO ()
setVisible34 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth28 :: ILine a0
           -> IO Double
getWidth28 =
  propertyGet "Width"
              []
              outDouble

setWidth27 :: Double
           -> ILine a0
           -> IO ()
setWidth27 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder22 :: ILine a0
            -> IO Int32
getZOrder22 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange23 :: ILine a0
                -> IO (ShapeRange ())
getShapeRange23 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getArrowHeadLength2 :: (Variant a1)
                    => ILine a0
                    -> IO a1
getArrowHeadLength2 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength2 :: a1
                    -> ILine a0
                    -> IO ()
setArrowHeadLength2 rHS =
  propertySet "ArrowHeadLength"
              [inVariant rHS]

getArrowHeadStyle2 :: (Variant a1)
                   => ILine a0
                   -> IO a1
getArrowHeadStyle2 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle2 :: a1
                   -> ILine a0
                   -> IO ()
setArrowHeadStyle2 rHS =
  propertySet "ArrowHeadStyle"
              [inVariant rHS]

getArrowHeadWidth2 :: (Variant a1)
                   => ILine a0
                   -> IO a1
getArrowHeadWidth2 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth2 :: a1
                   -> ILine a0
                   -> IO ()
setArrowHeadWidth2 rHS =
  propertySet "ArrowHeadWidth"
              [inVariant rHS]

getBorder7 :: ILine a0
           -> IO (Border ())
getBorder7 =
  propertyGet "Border"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ILines
-- 
-- --------------------------------------------------
data ILines_ a = ILines__ 
type ILines a = IDispatch (ILines_ a)
iidILines :: IID (ILines ())
iidILines = mkIID "{0002089B-0001-0000-C000-000000000046}"

getApplication79 :: (Variant a1)
                 => ILines a0
                 -> IO a1
getApplication79 =
  propertyGet "Application"
              []
              outVariant

getCreator79 :: ILines a0
             -> IO XlCreator
getCreator79 =
  propertyGet "Creator"
              []
              outEnum

getParent94 :: ILines a0
            -> IO (IDispatch ())
getParent94 =
  propertyGet "Parent"
              []
              outIDispatch

dummy315 :: ILines a0
         -> IO ()
dummy315 =
  method0 "_Dummy3"
          []

bringToFront23 :: (Variant a1)
               => ILines a0
               -> IO a1
bringToFront23 =
  function1 "BringToFront"
            []
            outVariant

copy29 :: (Variant a1)
       => ILines a0
       -> IO a1
copy29 =
  function1 "Copy"
            []
            outVariant

copyPicture26 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ILines a0
              -> IO a1
copyPicture26 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut24 :: (Variant a1)
      => ILines a0
      -> IO a1
cut24 =
  function1 "Cut"
            []
            outVariant

delete45 :: (Variant a1)
         => ILines a0
         -> IO a1
delete45 =
  function1 "Delete"
            []
            outVariant

duplicate23 :: ILines a0
            -> IO (IDispatch ())
duplicate23 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled26 :: ILines a0
             -> IO Bool
getEnabled26 =
  propertyGet "Enabled"
              []
              outBool

setEnabled26 :: Bool
             -> ILines a0
             -> IO ()
setEnabled26 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight28 :: ILines a0
            -> IO Double
getHeight28 =
  propertyGet "Height"
              []
              outDouble

setHeight27 :: Double
            -> ILines a0
            -> IO ()
setHeight27 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1213 :: ILines a0
          -> IO ()
dummy1213 =
  method0 "_Dummy12"
          []

getLeft28 :: ILines a0
          -> IO Double
getLeft28 =
  propertyGet "Left"
              []
              outDouble

setLeft27 :: Double
          -> ILines a0
          -> IO ()
setLeft27 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked27 :: ILines a0
            -> IO Bool
getLocked27 =
  propertyGet "Locked"
              []
              outBool

setLocked27 :: Bool
            -> ILines a0
            -> IO ()
setLocked27 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1512 :: ILines a0
          -> IO ()
dummy1512 =
  method0 "_Dummy15"
          []

getOnAction26 :: ILines a0
              -> IO String
getOnAction26 =
  propertyGet "OnAction"
              []
              outString

setOnAction26 :: String
              -> ILines a0
              -> IO ()
setOnAction26 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement23 :: (Variant a1)
               => ILines a0
               -> IO a1
getPlacement23 =
  propertyGet "Placement"
              []
              outVariant

setPlacement23 :: a1
               -> ILines a0
               -> IO ()
setPlacement23 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject23 :: ILines a0
                 -> IO Bool
getPrintObject23 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject23 :: Bool
                 -> ILines a0
                 -> IO ()
setPrintObject23 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select30 :: (Variant a1, Variant a2)
         => a2
         -> ILines a0
         -> IO a1
select30 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack23 :: (Variant a1)
             => ILines a0
             -> IO a1
sendToBack23 =
  function1 "SendToBack"
            []
            outVariant

getTop28 :: ILines a0
         -> IO Double
getTop28 =
  propertyGet "Top"
              []
              outDouble

setTop27 :: Double
         -> ILines a0
         -> IO ()
setTop27 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2212 :: ILines a0
          -> IO ()
dummy2212 =
  method0 "_Dummy22"
          []

getVisible35 :: ILines a0
             -> IO Bool
getVisible35 =
  propertyGet "Visible"
              []
              outBool

setVisible35 :: Bool
             -> ILines a0
             -> IO ()
setVisible35 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth29 :: ILines a0
           -> IO Double
getWidth29 =
  propertyGet "Width"
              []
              outDouble

setWidth28 :: Double
           -> ILines a0
           -> IO ()
setWidth28 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder23 :: ILines a0
            -> IO Int32
getZOrder23 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange24 :: ILines a0
                -> IO (ShapeRange ())
getShapeRange24 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getArrowHeadLength3 :: (Variant a1)
                    => ILines a0
                    -> IO a1
getArrowHeadLength3 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength3 :: a1
                    -> ILines a0
                    -> IO ()
setArrowHeadLength3 rHS =
  propertySet "ArrowHeadLength"
              [inVariant rHS]

getArrowHeadStyle3 :: (Variant a1)
                   => ILines a0
                   -> IO a1
getArrowHeadStyle3 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle3 :: a1
                   -> ILines a0
                   -> IO ()
setArrowHeadStyle3 rHS =
  propertySet "ArrowHeadStyle"
              [inVariant rHS]

getArrowHeadWidth3 :: (Variant a1)
                   => ILines a0
                   -> IO a1
getArrowHeadWidth3 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth3 :: a1
                   -> ILines a0
                   -> IO ()
setArrowHeadWidth3 rHS =
  propertySet "ArrowHeadWidth"
              [inVariant rHS]

getBorder8 :: ILines a0
           -> IO (Border ())
getBorder8 =
  propertyGet "Border"
              []
              outIUnknown

add32 :: Double
      -> Double
      -> Double
      -> Double
      -> ILines a0
      -> IO (Line ())
add32 x1 y1 x2 y2 =
  function1 "Add"
            [ inDouble x1
            , inDouble y1
            , inDouble x2
            , inDouble y2
            ]
            outIUnknown

getCount43 :: ILines a0
           -> IO Int32
getCount43 =
  propertyGet "Count"
              []
              outInt32

group12 :: ILines a0
        -> IO (GroupObject ())
group12 =
  function1 "Group"
            []
            outIUnknown

item22 :: a1
       -> ILines a0
       -> IO (IDispatch ())
item22 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum19 :: ILines a0
          -> IO (IUnknown ())
newEnum19 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IRectangle
-- 
-- --------------------------------------------------
data IRectangle_ a = IRectangle__ 
type IRectangle a = IDispatch (IRectangle_ a)
iidIRectangle :: IID (IRectangle ())
iidIRectangle = mkIID "{0002089C-0001-0000-C000-000000000046}"

getApplication80 :: (Variant a1)
                 => IRectangle a0
                 -> IO a1
getApplication80 =
  propertyGet "Application"
              []
              outVariant

getCreator80 :: IRectangle a0
             -> IO XlCreator
getCreator80 =
  propertyGet "Creator"
              []
              outEnum

getParent95 :: IRectangle a0
            -> IO (IDispatch ())
getParent95 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell11 :: IRectangle a0
                     -> IO (Range ())
getBottomRightCell11 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront24 :: (Variant a1)
               => IRectangle a0
               -> IO a1
bringToFront24 =
  function1 "BringToFront"
            []
            outVariant

copy30 :: (Variant a1)
       => IRectangle a0
       -> IO a1
copy30 =
  function1 "Copy"
            []
            outVariant

copyPicture27 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IRectangle a0
              -> IO a1
copyPicture27 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut25 :: (Variant a1)
      => IRectangle a0
      -> IO a1
cut25 =
  function1 "Cut"
            []
            outVariant

delete46 :: (Variant a1)
         => IRectangle a0
         -> IO a1
delete46 =
  function1 "Delete"
            []
            outVariant

duplicate24 :: IRectangle a0
            -> IO (IDispatch ())
duplicate24 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled27 :: IRectangle a0
             -> IO Bool
getEnabled27 =
  propertyGet "Enabled"
              []
              outBool

setEnabled27 :: Bool
             -> IRectangle a0
             -> IO ()
setEnabled27 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight29 :: IRectangle a0
            -> IO Double
getHeight29 =
  propertyGet "Height"
              []
              outDouble

setHeight28 :: Double
            -> IRectangle a0
            -> IO ()
setHeight28 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex22 :: IRectangle a0
           -> IO Int32
getIndex22 =
  propertyGet "Index"
              []
              outInt32

getLeft29 :: IRectangle a0
          -> IO Double
getLeft29 =
  propertyGet "Left"
              []
              outDouble

setLeft28 :: Double
          -> IRectangle a0
          -> IO ()
setLeft28 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked28 :: IRectangle a0
            -> IO Bool
getLocked28 =
  propertyGet "Locked"
              []
              outBool

setLocked28 :: Bool
            -> IRectangle a0
            -> IO ()
setLocked28 rHS =
  propertySet "Locked"
              [inBool rHS]

getName27 :: IRectangle a0
          -> IO String
getName27 =
  propertyGet "Name"
              []
              outString

setName21 :: String
          -> IRectangle a0
          -> IO ()
setName21 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction27 :: IRectangle a0
              -> IO String
getOnAction27 =
  propertyGet "OnAction"
              []
              outString

setOnAction27 :: String
              -> IRectangle a0
              -> IO ()
setOnAction27 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement24 :: (Variant a1)
               => IRectangle a0
               -> IO a1
getPlacement24 =
  propertyGet "Placement"
              []
              outVariant

setPlacement24 :: a1
               -> IRectangle a0
               -> IO ()
setPlacement24 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject24 :: IRectangle a0
                 -> IO Bool
getPrintObject24 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject24 :: Bool
                 -> IRectangle a0
                 -> IO ()
setPrintObject24 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select31 :: (Variant a1, Variant a2)
         => a2
         -> IRectangle a0
         -> IO a1
select31 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack24 :: (Variant a1)
             => IRectangle a0
             -> IO a1
sendToBack24 =
  function1 "SendToBack"
            []
            outVariant

getTop29 :: IRectangle a0
         -> IO Double
getTop29 =
  propertyGet "Top"
              []
              outDouble

setTop28 :: Double
         -> IRectangle a0
         -> IO ()
setTop28 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell11 :: IRectangle a0
                 -> IO (Range ())
getTopLeftCell11 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible36 :: IRectangle a0
             -> IO Bool
getVisible36 =
  propertyGet "Visible"
              []
              outBool

setVisible36 :: Bool
             -> IRectangle a0
             -> IO ()
setVisible36 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth30 :: IRectangle a0
           -> IO Double
getWidth30 =
  propertyGet "Width"
              []
              outDouble

setWidth29 :: Double
           -> IRectangle a0
           -> IO ()
setWidth29 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder24 :: IRectangle a0
            -> IO Int32
getZOrder24 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange25 :: IRectangle a0
                -> IO (ShapeRange ())
getShapeRange25 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent6 :: IRectangle a0
              -> IO Bool
getAddIndent6 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent6 :: Bool
              -> IRectangle a0
              -> IO ()
setAddIndent6 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont1 :: (Variant a1)
                  => IRectangle a0
                  -> IO a1
getAutoScaleFont1 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont1 :: a1
                  -> IRectangle a0
                  -> IO ()
setAutoScaleFont1 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize5 :: IRectangle a0
             -> IO Bool
getAutoSize5 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize5 :: Bool
             -> IRectangle a0
             -> IO ()
setAutoSize5 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption23 :: IRectangle a0
             -> IO String
getCaption23 =
  propertyGet "Caption"
              []
              outString

setCaption23 :: String
             -> IRectangle a0
             -> IO ()
setCaption23 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters16 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IRectangle a0
                -> IO (Characters ())
getCharacters16 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling20 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IRectangle a0
                -> IO a1
checkSpelling20 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont7 :: IRectangle a0
         -> IO (Font ())
getFont7 =
  propertyGet "Font"
              []
              outIUnknown

getFormula5 :: IRectangle a0
            -> IO String
getFormula5 =
  propertyGet "Formula"
              []
              outString

setFormula5 :: String
            -> IRectangle a0
            -> IO ()
setFormula5 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment6 :: (Variant a1)
                        => IRectangle a0
                        -> IO a1
getHorizontalAlignment6 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment6 :: a1
                        -> IRectangle a0
                        -> IO ()
setHorizontalAlignment6 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText13 :: IRectangle a0
                -> IO Bool
getLockedText13 =
  propertyGet "LockedText"
              []
              outBool

setLockedText13 :: Bool
                -> IRectangle a0
                -> IO ()
setLockedText13 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation8 :: (Variant a1)
                => IRectangle a0
                -> IO a1
getOrientation8 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation8 :: a1
                -> IRectangle a0
                -> IO ()
setOrientation8 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText18 :: IRectangle a0
          -> IO String
getText18 =
  propertyGet "Text"
              []
              outString

setText17 :: String
          -> IRectangle a0
          -> IO ()
setText17 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment6 :: (Variant a1)
                      => IRectangle a0
                      -> IO a1
getVerticalAlignment6 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment6 :: a1
                      -> IRectangle a0
                      -> IO ()
setVerticalAlignment6 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder6 :: IRectangle a0
                 -> IO Int32
getReadingOrder6 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder6 :: Int32
                 -> IRectangle a0
                 -> IO ()
setReadingOrder6 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder9 :: IRectangle a0
           -> IO (Border ())
getBorder9 =
  propertyGet "Border"
              []
              outIUnknown

getInterior8 :: IRectangle a0
             -> IO (Interior ())
getInterior8 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow3 :: IRectangle a0
           -> IO Bool
getShadow3 =
  propertyGet "Shadow"
              []
              outBool

setShadow3 :: Bool
           -> IRectangle a0
           -> IO ()
setShadow3 rHS =
  propertySet "Shadow"
              [inBool rHS]

getRoundedCorners2 :: IRectangle a0
                   -> IO Bool
getRoundedCorners2 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners2 :: Bool
                   -> IRectangle a0
                   -> IO ()
setRoundedCorners2 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IRectangles
-- 
-- --------------------------------------------------
data IRectangles_ a = IRectangles__ 
type IRectangles a = IDispatch (IRectangles_ a)
iidIRectangles :: IID (IRectangles ())
iidIRectangles = mkIID "{0002089D-0001-0000-C000-000000000046}"

getApplication81 :: (Variant a1)
                 => IRectangles a0
                 -> IO a1
getApplication81 =
  propertyGet "Application"
              []
              outVariant

getCreator81 :: IRectangles a0
             -> IO XlCreator
getCreator81 =
  propertyGet "Creator"
              []
              outEnum

getParent96 :: IRectangles a0
            -> IO (IDispatch ())
getParent96 =
  propertyGet "Parent"
              []
              outIDispatch

dummy316 :: IRectangles a0
         -> IO ()
dummy316 =
  method0 "_Dummy3"
          []

bringToFront25 :: (Variant a1)
               => IRectangles a0
               -> IO a1
bringToFront25 =
  function1 "BringToFront"
            []
            outVariant

copy31 :: (Variant a1)
       => IRectangles a0
       -> IO a1
copy31 =
  function1 "Copy"
            []
            outVariant

copyPicture28 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IRectangles a0
              -> IO a1
copyPicture28 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut26 :: (Variant a1)
      => IRectangles a0
      -> IO a1
cut26 =
  function1 "Cut"
            []
            outVariant

delete47 :: (Variant a1)
         => IRectangles a0
         -> IO a1
delete47 =
  function1 "Delete"
            []
            outVariant

duplicate25 :: IRectangles a0
            -> IO (IDispatch ())
duplicate25 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled28 :: IRectangles a0
             -> IO Bool
getEnabled28 =
  propertyGet "Enabled"
              []
              outBool

setEnabled28 :: Bool
             -> IRectangles a0
             -> IO ()
setEnabled28 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight30 :: IRectangles a0
            -> IO Double
getHeight30 =
  propertyGet "Height"
              []
              outDouble

setHeight29 :: Double
            -> IRectangles a0
            -> IO ()
setHeight29 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1214 :: IRectangles a0
          -> IO ()
dummy1214 =
  method0 "_Dummy12"
          []

getLeft30 :: IRectangles a0
          -> IO Double
getLeft30 =
  propertyGet "Left"
              []
              outDouble

setLeft29 :: Double
          -> IRectangles a0
          -> IO ()
setLeft29 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked29 :: IRectangles a0
            -> IO Bool
getLocked29 =
  propertyGet "Locked"
              []
              outBool

setLocked29 :: Bool
            -> IRectangles a0
            -> IO ()
setLocked29 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1513 :: IRectangles a0
          -> IO ()
dummy1513 =
  method0 "_Dummy15"
          []

getOnAction28 :: IRectangles a0
              -> IO String
getOnAction28 =
  propertyGet "OnAction"
              []
              outString

setOnAction28 :: String
              -> IRectangles a0
              -> IO ()
setOnAction28 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement25 :: (Variant a1)
               => IRectangles a0
               -> IO a1
getPlacement25 =
  propertyGet "Placement"
              []
              outVariant

setPlacement25 :: a1
               -> IRectangles a0
               -> IO ()
setPlacement25 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject25 :: IRectangles a0
                 -> IO Bool
getPrintObject25 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject25 :: Bool
                 -> IRectangles a0
                 -> IO ()
setPrintObject25 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select32 :: (Variant a1, Variant a2)
         => a2
         -> IRectangles a0
         -> IO a1
select32 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack25 :: (Variant a1)
             => IRectangles a0
             -> IO a1
sendToBack25 =
  function1 "SendToBack"
            []
            outVariant

getTop30 :: IRectangles a0
         -> IO Double
getTop30 =
  propertyGet "Top"
              []
              outDouble

setTop29 :: Double
         -> IRectangles a0
         -> IO ()
setTop29 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2213 :: IRectangles a0
          -> IO ()
dummy2213 =
  method0 "_Dummy22"
          []

getVisible37 :: IRectangles a0
             -> IO Bool
getVisible37 =
  propertyGet "Visible"
              []
              outBool

setVisible37 :: Bool
             -> IRectangles a0
             -> IO ()
setVisible37 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth31 :: IRectangles a0
           -> IO Double
getWidth31 =
  propertyGet "Width"
              []
              outDouble

setWidth30 :: Double
           -> IRectangles a0
           -> IO ()
setWidth30 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder25 :: IRectangles a0
            -> IO Int32
getZOrder25 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange26 :: IRectangles a0
                -> IO (ShapeRange ())
getShapeRange26 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent7 :: IRectangles a0
              -> IO Bool
getAddIndent7 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent7 :: Bool
              -> IRectangles a0
              -> IO ()
setAddIndent7 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont2 :: (Variant a1)
                  => IRectangles a0
                  -> IO a1
getAutoScaleFont2 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont2 :: a1
                  -> IRectangles a0
                  -> IO ()
setAutoScaleFont2 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize6 :: IRectangles a0
             -> IO Bool
getAutoSize6 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize6 :: Bool
             -> IRectangles a0
             -> IO ()
setAutoSize6 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption24 :: IRectangles a0
             -> IO String
getCaption24 =
  propertyGet "Caption"
              []
              outString

setCaption24 :: String
             -> IRectangles a0
             -> IO ()
setCaption24 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters17 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IRectangles a0
                -> IO (Characters ())
getCharacters17 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling21 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IRectangles a0
                -> IO a1
checkSpelling21 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont8 :: IRectangles a0
         -> IO (Font ())
getFont8 =
  propertyGet "Font"
              []
              outIUnknown

getFormula6 :: IRectangles a0
            -> IO String
getFormula6 =
  propertyGet "Formula"
              []
              outString

setFormula6 :: String
            -> IRectangles a0
            -> IO ()
setFormula6 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment7 :: (Variant a1)
                        => IRectangles a0
                        -> IO a1
getHorizontalAlignment7 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment7 :: a1
                        -> IRectangles a0
                        -> IO ()
setHorizontalAlignment7 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText14 :: IRectangles a0
                -> IO Bool
getLockedText14 =
  propertyGet "LockedText"
              []
              outBool

setLockedText14 :: Bool
                -> IRectangles a0
                -> IO ()
setLockedText14 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation9 :: (Variant a1)
                => IRectangles a0
                -> IO a1
getOrientation9 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation9 :: a1
                -> IRectangles a0
                -> IO ()
setOrientation9 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText19 :: IRectangles a0
          -> IO String
getText19 =
  propertyGet "Text"
              []
              outString

setText18 :: String
          -> IRectangles a0
          -> IO ()
setText18 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment7 :: (Variant a1)
                      => IRectangles a0
                      -> IO a1
getVerticalAlignment7 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment7 :: a1
                      -> IRectangles a0
                      -> IO ()
setVerticalAlignment7 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder7 :: IRectangles a0
                 -> IO Int32
getReadingOrder7 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder7 :: Int32
                 -> IRectangles a0
                 -> IO ()
setReadingOrder7 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder10 :: IRectangles a0
            -> IO (Border ())
getBorder10 =
  propertyGet "Border"
              []
              outIUnknown

getInterior9 :: IRectangles a0
             -> IO (Interior ())
getInterior9 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow4 :: IRectangles a0
           -> IO Bool
getShadow4 =
  propertyGet "Shadow"
              []
              outBool

setShadow4 :: Bool
           -> IRectangles a0
           -> IO ()
setShadow4 rHS =
  propertySet "Shadow"
              [inBool rHS]

getRoundedCorners3 :: IRectangles a0
                   -> IO Bool
getRoundedCorners3 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners3 :: Bool
                   -> IRectangles a0
                   -> IO ()
setRoundedCorners3 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

add33 :: Double
      -> Double
      -> Double
      -> Double
      -> IRectangles a0
      -> IO (Rectangle ())
add33 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount44 :: IRectangles a0
           -> IO Int32
getCount44 =
  propertyGet "Count"
              []
              outInt32

group13 :: IRectangles a0
        -> IO (GroupObject ())
group13 =
  function1 "Group"
            []
            outIUnknown

item23 :: a1
       -> IRectangles a0
       -> IO (IDispatch ())
item23 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum20 :: IRectangles a0
          -> IO (IUnknown ())
newEnum20 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IOval
-- 
-- --------------------------------------------------
data IOval_ a = IOval__ 
type IOval a = IDispatch (IOval_ a)
iidIOval :: IID (IOval ())
iidIOval = mkIID "{0002089E-0001-0000-C000-000000000046}"

getApplication82 :: (Variant a1)
                 => IOval a0
                 -> IO a1
getApplication82 =
  propertyGet "Application"
              []
              outVariant

getCreator82 :: IOval a0
             -> IO XlCreator
getCreator82 =
  propertyGet "Creator"
              []
              outEnum

getParent97 :: IOval a0
            -> IO (IDispatch ())
getParent97 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell12 :: IOval a0
                     -> IO (Range ())
getBottomRightCell12 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront26 :: (Variant a1)
               => IOval a0
               -> IO a1
bringToFront26 =
  function1 "BringToFront"
            []
            outVariant

copy32 :: (Variant a1)
       => IOval a0
       -> IO a1
copy32 =
  function1 "Copy"
            []
            outVariant

copyPicture29 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IOval a0
              -> IO a1
copyPicture29 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut27 :: (Variant a1)
      => IOval a0
      -> IO a1
cut27 =
  function1 "Cut"
            []
            outVariant

delete48 :: (Variant a1)
         => IOval a0
         -> IO a1
delete48 =
  function1 "Delete"
            []
            outVariant

duplicate26 :: IOval a0
            -> IO (IDispatch ())
duplicate26 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled29 :: IOval a0
             -> IO Bool
getEnabled29 =
  propertyGet "Enabled"
              []
              outBool

setEnabled29 :: Bool
             -> IOval a0
             -> IO ()
setEnabled29 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight31 :: IOval a0
            -> IO Double
getHeight31 =
  propertyGet "Height"
              []
              outDouble

setHeight30 :: Double
            -> IOval a0
            -> IO ()
setHeight30 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex23 :: IOval a0
           -> IO Int32
getIndex23 =
  propertyGet "Index"
              []
              outInt32

getLeft31 :: IOval a0
          -> IO Double
getLeft31 =
  propertyGet "Left"
              []
              outDouble

setLeft30 :: Double
          -> IOval a0
          -> IO ()
setLeft30 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked30 :: IOval a0
            -> IO Bool
getLocked30 =
  propertyGet "Locked"
              []
              outBool

setLocked30 :: Bool
            -> IOval a0
            -> IO ()
setLocked30 rHS =
  propertySet "Locked"
              [inBool rHS]

getName28 :: IOval a0
          -> IO String
getName28 =
  propertyGet "Name"
              []
              outString

setName22 :: String
          -> IOval a0
          -> IO ()
setName22 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction29 :: IOval a0
              -> IO String
getOnAction29 =
  propertyGet "OnAction"
              []
              outString

setOnAction29 :: String
              -> IOval a0
              -> IO ()
setOnAction29 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement26 :: (Variant a1)
               => IOval a0
               -> IO a1
getPlacement26 =
  propertyGet "Placement"
              []
              outVariant

setPlacement26 :: a1
               -> IOval a0
               -> IO ()
setPlacement26 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject26 :: IOval a0
                 -> IO Bool
getPrintObject26 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject26 :: Bool
                 -> IOval a0
                 -> IO ()
setPrintObject26 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select33 :: (Variant a1, Variant a2)
         => a2
         -> IOval a0
         -> IO a1
select33 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack26 :: (Variant a1)
             => IOval a0
             -> IO a1
sendToBack26 =
  function1 "SendToBack"
            []
            outVariant

getTop31 :: IOval a0
         -> IO Double
getTop31 =
  propertyGet "Top"
              []
              outDouble

setTop30 :: Double
         -> IOval a0
         -> IO ()
setTop30 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell12 :: IOval a0
                 -> IO (Range ())
getTopLeftCell12 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible38 :: IOval a0
             -> IO Bool
getVisible38 =
  propertyGet "Visible"
              []
              outBool

setVisible38 :: Bool
             -> IOval a0
             -> IO ()
setVisible38 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth32 :: IOval a0
           -> IO Double
getWidth32 =
  propertyGet "Width"
              []
              outDouble

setWidth31 :: Double
           -> IOval a0
           -> IO ()
setWidth31 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder26 :: IOval a0
            -> IO Int32
getZOrder26 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange27 :: IOval a0
                -> IO (ShapeRange ())
getShapeRange27 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent8 :: IOval a0
              -> IO Bool
getAddIndent8 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent8 :: Bool
              -> IOval a0
              -> IO ()
setAddIndent8 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont3 :: (Variant a1)
                  => IOval a0
                  -> IO a1
getAutoScaleFont3 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont3 :: a1
                  -> IOval a0
                  -> IO ()
setAutoScaleFont3 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize7 :: IOval a0
             -> IO Bool
getAutoSize7 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize7 :: Bool
             -> IOval a0
             -> IO ()
setAutoSize7 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption25 :: IOval a0
             -> IO String
getCaption25 =
  propertyGet "Caption"
              []
              outString

setCaption25 :: String
             -> IOval a0
             -> IO ()
setCaption25 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters18 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IOval a0
                -> IO (Characters ())
getCharacters18 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling22 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IOval a0
                -> IO a1
checkSpelling22 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont9 :: IOval a0
         -> IO (Font ())
getFont9 =
  propertyGet "Font"
              []
              outIUnknown

getFormula7 :: IOval a0
            -> IO String
getFormula7 =
  propertyGet "Formula"
              []
              outString

setFormula7 :: String
            -> IOval a0
            -> IO ()
setFormula7 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment8 :: (Variant a1)
                        => IOval a0
                        -> IO a1
getHorizontalAlignment8 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment8 :: a1
                        -> IOval a0
                        -> IO ()
setHorizontalAlignment8 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText15 :: IOval a0
                -> IO Bool
getLockedText15 =
  propertyGet "LockedText"
              []
              outBool

setLockedText15 :: Bool
                -> IOval a0
                -> IO ()
setLockedText15 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation10 :: (Variant a1)
                 => IOval a0
                 -> IO a1
getOrientation10 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation10 :: a1
                 -> IOval a0
                 -> IO ()
setOrientation10 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText20 :: IOval a0
          -> IO String
getText20 =
  propertyGet "Text"
              []
              outString

setText19 :: String
          -> IOval a0
          -> IO ()
setText19 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment8 :: (Variant a1)
                      => IOval a0
                      -> IO a1
getVerticalAlignment8 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment8 :: a1
                      -> IOval a0
                      -> IO ()
setVerticalAlignment8 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder8 :: IOval a0
                 -> IO Int32
getReadingOrder8 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder8 :: Int32
                 -> IOval a0
                 -> IO ()
setReadingOrder8 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder11 :: IOval a0
            -> IO (Border ())
getBorder11 =
  propertyGet "Border"
              []
              outIUnknown

getInterior10 :: IOval a0
              -> IO (Interior ())
getInterior10 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow5 :: IOval a0
           -> IO Bool
getShadow5 =
  propertyGet "Shadow"
              []
              outBool

setShadow5 :: Bool
           -> IOval a0
           -> IO ()
setShadow5 rHS =
  propertySet "Shadow"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IOvals
-- 
-- --------------------------------------------------
data IOvals_ a = IOvals__ 
type IOvals a = IDispatch (IOvals_ a)
iidIOvals :: IID (IOvals ())
iidIOvals = mkIID "{0002089F-0001-0000-C000-000000000046}"

getApplication83 :: (Variant a1)
                 => IOvals a0
                 -> IO a1
getApplication83 =
  propertyGet "Application"
              []
              outVariant

getCreator83 :: IOvals a0
             -> IO XlCreator
getCreator83 =
  propertyGet "Creator"
              []
              outEnum

getParent98 :: IOvals a0
            -> IO (IDispatch ())
getParent98 =
  propertyGet "Parent"
              []
              outIDispatch

dummy317 :: IOvals a0
         -> IO ()
dummy317 =
  method0 "_Dummy3"
          []

bringToFront27 :: (Variant a1)
               => IOvals a0
               -> IO a1
bringToFront27 =
  function1 "BringToFront"
            []
            outVariant

copy33 :: (Variant a1)
       => IOvals a0
       -> IO a1
copy33 =
  function1 "Copy"
            []
            outVariant

copyPicture30 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IOvals a0
              -> IO a1
copyPicture30 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut28 :: (Variant a1)
      => IOvals a0
      -> IO a1
cut28 =
  function1 "Cut"
            []
            outVariant

delete49 :: (Variant a1)
         => IOvals a0
         -> IO a1
delete49 =
  function1 "Delete"
            []
            outVariant

duplicate27 :: IOvals a0
            -> IO (IDispatch ())
duplicate27 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled30 :: IOvals a0
             -> IO Bool
getEnabled30 =
  propertyGet "Enabled"
              []
              outBool

setEnabled30 :: Bool
             -> IOvals a0
             -> IO ()
setEnabled30 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight32 :: IOvals a0
            -> IO Double
getHeight32 =
  propertyGet "Height"
              []
              outDouble

setHeight31 :: Double
            -> IOvals a0
            -> IO ()
setHeight31 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1215 :: IOvals a0
          -> IO ()
dummy1215 =
  method0 "_Dummy12"
          []

getLeft32 :: IOvals a0
          -> IO Double
getLeft32 =
  propertyGet "Left"
              []
              outDouble

setLeft31 :: Double
          -> IOvals a0
          -> IO ()
setLeft31 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked31 :: IOvals a0
            -> IO Bool
getLocked31 =
  propertyGet "Locked"
              []
              outBool

setLocked31 :: Bool
            -> IOvals a0
            -> IO ()
setLocked31 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1514 :: IOvals a0
          -> IO ()
dummy1514 =
  method0 "_Dummy15"
          []

getOnAction30 :: IOvals a0
              -> IO String
getOnAction30 =
  propertyGet "OnAction"
              []
              outString

setOnAction30 :: String
              -> IOvals a0
              -> IO ()
setOnAction30 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement27 :: (Variant a1)
               => IOvals a0
               -> IO a1
getPlacement27 =
  propertyGet "Placement"
              []
              outVariant

setPlacement27 :: a1
               -> IOvals a0
               -> IO ()
setPlacement27 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject27 :: IOvals a0
                 -> IO Bool
getPrintObject27 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject27 :: Bool
                 -> IOvals a0
                 -> IO ()
setPrintObject27 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select34 :: (Variant a1, Variant a2)
         => a2
         -> IOvals a0
         -> IO a1
select34 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack27 :: (Variant a1)
             => IOvals a0
             -> IO a1
sendToBack27 =
  function1 "SendToBack"
            []
            outVariant

getTop32 :: IOvals a0
         -> IO Double
getTop32 =
  propertyGet "Top"
              []
              outDouble

setTop31 :: Double
         -> IOvals a0
         -> IO ()
setTop31 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2214 :: IOvals a0
          -> IO ()
dummy2214 =
  method0 "_Dummy22"
          []

getVisible39 :: IOvals a0
             -> IO Bool
getVisible39 =
  propertyGet "Visible"
              []
              outBool

setVisible39 :: Bool
             -> IOvals a0
             -> IO ()
setVisible39 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth33 :: IOvals a0
           -> IO Double
getWidth33 =
  propertyGet "Width"
              []
              outDouble

setWidth32 :: Double
           -> IOvals a0
           -> IO ()
setWidth32 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder27 :: IOvals a0
            -> IO Int32
getZOrder27 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange28 :: IOvals a0
                -> IO (ShapeRange ())
getShapeRange28 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent9 :: IOvals a0
              -> IO Bool
getAddIndent9 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent9 :: Bool
              -> IOvals a0
              -> IO ()
setAddIndent9 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont4 :: (Variant a1)
                  => IOvals a0
                  -> IO a1
getAutoScaleFont4 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont4 :: a1
                  -> IOvals a0
                  -> IO ()
setAutoScaleFont4 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize8 :: IOvals a0
             -> IO Bool
getAutoSize8 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize8 :: Bool
             -> IOvals a0
             -> IO ()
setAutoSize8 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption26 :: IOvals a0
             -> IO String
getCaption26 =
  propertyGet "Caption"
              []
              outString

setCaption26 :: String
             -> IOvals a0
             -> IO ()
setCaption26 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters19 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IOvals a0
                -> IO (Characters ())
getCharacters19 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling23 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IOvals a0
                -> IO a1
checkSpelling23 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont10 :: IOvals a0
          -> IO (Font ())
getFont10 =
  propertyGet "Font"
              []
              outIUnknown

getFormula8 :: IOvals a0
            -> IO String
getFormula8 =
  propertyGet "Formula"
              []
              outString

setFormula8 :: String
            -> IOvals a0
            -> IO ()
setFormula8 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment9 :: (Variant a1)
                        => IOvals a0
                        -> IO a1
getHorizontalAlignment9 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment9 :: a1
                        -> IOvals a0
                        -> IO ()
setHorizontalAlignment9 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText16 :: IOvals a0
                -> IO Bool
getLockedText16 =
  propertyGet "LockedText"
              []
              outBool

setLockedText16 :: Bool
                -> IOvals a0
                -> IO ()
setLockedText16 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation11 :: (Variant a1)
                 => IOvals a0
                 -> IO a1
getOrientation11 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation11 :: a1
                 -> IOvals a0
                 -> IO ()
setOrientation11 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText21 :: IOvals a0
          -> IO String
getText21 =
  propertyGet "Text"
              []
              outString

setText20 :: String
          -> IOvals a0
          -> IO ()
setText20 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment9 :: (Variant a1)
                      => IOvals a0
                      -> IO a1
getVerticalAlignment9 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment9 :: a1
                      -> IOvals a0
                      -> IO ()
setVerticalAlignment9 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder9 :: IOvals a0
                 -> IO Int32
getReadingOrder9 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder9 :: Int32
                 -> IOvals a0
                 -> IO ()
setReadingOrder9 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder12 :: IOvals a0
            -> IO (Border ())
getBorder12 =
  propertyGet "Border"
              []
              outIUnknown

getInterior11 :: IOvals a0
              -> IO (Interior ())
getInterior11 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow6 :: IOvals a0
           -> IO Bool
getShadow6 =
  propertyGet "Shadow"
              []
              outBool

setShadow6 :: Bool
           -> IOvals a0
           -> IO ()
setShadow6 rHS =
  propertySet "Shadow"
              [inBool rHS]

add34 :: Double
      -> Double
      -> Double
      -> Double
      -> IOvals a0
      -> IO (Oval ())
add34 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount45 :: IOvals a0
           -> IO Int32
getCount45 =
  propertyGet "Count"
              []
              outInt32

group14 :: IOvals a0
        -> IO (GroupObject ())
group14 =
  function1 "Group"
            []
            outIUnknown

item24 :: a1
       -> IOvals a0
       -> IO (IDispatch ())
item24 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum21 :: IOvals a0
          -> IO (IUnknown ())
newEnum21 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IArc
-- 
-- --------------------------------------------------
data IArc_ a = IArc__ 
type IArc a = IDispatch (IArc_ a)
iidIArc :: IID (IArc ())
iidIArc = mkIID "{000208A0-0001-0000-C000-000000000046}"

getApplication84 :: (Variant a1)
                 => IArc a0
                 -> IO a1
getApplication84 =
  propertyGet "Application"
              []
              outVariant

getCreator84 :: IArc a0
             -> IO XlCreator
getCreator84 =
  propertyGet "Creator"
              []
              outEnum

getParent99 :: IArc a0
            -> IO (IDispatch ())
getParent99 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell13 :: IArc a0
                     -> IO (Range ())
getBottomRightCell13 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront28 :: (Variant a1)
               => IArc a0
               -> IO a1
bringToFront28 =
  function1 "BringToFront"
            []
            outVariant

copy34 :: (Variant a1)
       => IArc a0
       -> IO a1
copy34 =
  function1 "Copy"
            []
            outVariant

copyPicture31 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IArc a0
              -> IO a1
copyPicture31 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut29 :: (Variant a1)
      => IArc a0
      -> IO a1
cut29 =
  function1 "Cut"
            []
            outVariant

delete50 :: (Variant a1)
         => IArc a0
         -> IO a1
delete50 =
  function1 "Delete"
            []
            outVariant

duplicate28 :: IArc a0
            -> IO (IDispatch ())
duplicate28 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled31 :: IArc a0
             -> IO Bool
getEnabled31 =
  propertyGet "Enabled"
              []
              outBool

setEnabled31 :: Bool
             -> IArc a0
             -> IO ()
setEnabled31 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight33 :: IArc a0
            -> IO Double
getHeight33 =
  propertyGet "Height"
              []
              outDouble

setHeight32 :: Double
            -> IArc a0
            -> IO ()
setHeight32 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex24 :: IArc a0
           -> IO Int32
getIndex24 =
  propertyGet "Index"
              []
              outInt32

getLeft33 :: IArc a0
          -> IO Double
getLeft33 =
  propertyGet "Left"
              []
              outDouble

setLeft32 :: Double
          -> IArc a0
          -> IO ()
setLeft32 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked32 :: IArc a0
            -> IO Bool
getLocked32 =
  propertyGet "Locked"
              []
              outBool

setLocked32 :: Bool
            -> IArc a0
            -> IO ()
setLocked32 rHS =
  propertySet "Locked"
              [inBool rHS]

getName29 :: IArc a0
          -> IO String
getName29 =
  propertyGet "Name"
              []
              outString

setName23 :: String
          -> IArc a0
          -> IO ()
setName23 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction31 :: IArc a0
              -> IO String
getOnAction31 =
  propertyGet "OnAction"
              []
              outString

setOnAction31 :: String
              -> IArc a0
              -> IO ()
setOnAction31 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement28 :: (Variant a1)
               => IArc a0
               -> IO a1
getPlacement28 =
  propertyGet "Placement"
              []
              outVariant

setPlacement28 :: a1
               -> IArc a0
               -> IO ()
setPlacement28 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject28 :: IArc a0
                 -> IO Bool
getPrintObject28 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject28 :: Bool
                 -> IArc a0
                 -> IO ()
setPrintObject28 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select35 :: (Variant a1, Variant a2)
         => a2
         -> IArc a0
         -> IO a1
select35 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack28 :: (Variant a1)
             => IArc a0
             -> IO a1
sendToBack28 =
  function1 "SendToBack"
            []
            outVariant

getTop33 :: IArc a0
         -> IO Double
getTop33 =
  propertyGet "Top"
              []
              outDouble

setTop32 :: Double
         -> IArc a0
         -> IO ()
setTop32 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell13 :: IArc a0
                 -> IO (Range ())
getTopLeftCell13 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible40 :: IArc a0
             -> IO Bool
getVisible40 =
  propertyGet "Visible"
              []
              outBool

setVisible40 :: Bool
             -> IArc a0
             -> IO ()
setVisible40 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth34 :: IArc a0
           -> IO Double
getWidth34 =
  propertyGet "Width"
              []
              outDouble

setWidth33 :: Double
           -> IArc a0
           -> IO ()
setWidth33 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder28 :: IArc a0
            -> IO Int32
getZOrder28 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange29 :: IArc a0
                -> IO (ShapeRange ())
getShapeRange29 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent10 :: IArc a0
               -> IO Bool
getAddIndent10 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent10 :: Bool
               -> IArc a0
               -> IO ()
setAddIndent10 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont5 :: (Variant a1)
                  => IArc a0
                  -> IO a1
getAutoScaleFont5 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont5 :: a1
                  -> IArc a0
                  -> IO ()
setAutoScaleFont5 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize9 :: IArc a0
             -> IO Bool
getAutoSize9 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize9 :: Bool
             -> IArc a0
             -> IO ()
setAutoSize9 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption27 :: IArc a0
             -> IO String
getCaption27 =
  propertyGet "Caption"
              []
              outString

setCaption27 :: String
             -> IArc a0
             -> IO ()
setCaption27 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters20 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IArc a0
                -> IO (Characters ())
getCharacters20 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling24 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IArc a0
                -> IO a1
checkSpelling24 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont11 :: IArc a0
          -> IO (Font ())
getFont11 =
  propertyGet "Font"
              []
              outIUnknown

getFormula9 :: IArc a0
            -> IO String
getFormula9 =
  propertyGet "Formula"
              []
              outString

setFormula9 :: String
            -> IArc a0
            -> IO ()
setFormula9 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment10 :: (Variant a1)
                         => IArc a0
                         -> IO a1
getHorizontalAlignment10 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment10 :: a1
                         -> IArc a0
                         -> IO ()
setHorizontalAlignment10 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText17 :: IArc a0
                -> IO Bool
getLockedText17 =
  propertyGet "LockedText"
              []
              outBool

setLockedText17 :: Bool
                -> IArc a0
                -> IO ()
setLockedText17 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation12 :: (Variant a1)
                 => IArc a0
                 -> IO a1
getOrientation12 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation12 :: a1
                 -> IArc a0
                 -> IO ()
setOrientation12 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText22 :: IArc a0
          -> IO String
getText22 =
  propertyGet "Text"
              []
              outString

setText21 :: String
          -> IArc a0
          -> IO ()
setText21 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment10 :: (Variant a1)
                       => IArc a0
                       -> IO a1
getVerticalAlignment10 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment10 :: a1
                       -> IArc a0
                       -> IO ()
setVerticalAlignment10 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder10 :: IArc a0
                  -> IO Int32
getReadingOrder10 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder10 :: Int32
                  -> IArc a0
                  -> IO ()
setReadingOrder10 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder13 :: IArc a0
            -> IO (Border ())
getBorder13 =
  propertyGet "Border"
              []
              outIUnknown

getInterior12 :: IArc a0
              -> IO (Interior ())
getInterior12 =
  propertyGet "Interior"
              []
              outIUnknown

dummy431 :: IArc a0
         -> IO ()
dummy431 =
  method0 "_Dummy43"
          []

-- --------------------------------------------------
-- 
-- interface IArcs
-- 
-- --------------------------------------------------
data IArcs_ a = IArcs__ 
type IArcs a = IDispatch (IArcs_ a)
iidIArcs :: IID (IArcs ())
iidIArcs = mkIID "{000208A1-0001-0000-C000-000000000046}"

getApplication85 :: (Variant a1)
                 => IArcs a0
                 -> IO a1
getApplication85 =
  propertyGet "Application"
              []
              outVariant

getCreator85 :: IArcs a0
             -> IO XlCreator
getCreator85 =
  propertyGet "Creator"
              []
              outEnum

getParent100 :: IArcs a0
             -> IO (IDispatch ())
getParent100 =
  propertyGet "Parent"
              []
              outIDispatch

dummy318 :: IArcs a0
         -> IO ()
dummy318 =
  method0 "_Dummy3"
          []

bringToFront29 :: (Variant a1)
               => IArcs a0
               -> IO a1
bringToFront29 =
  function1 "BringToFront"
            []
            outVariant

copy35 :: (Variant a1)
       => IArcs a0
       -> IO a1
copy35 =
  function1 "Copy"
            []
            outVariant

copyPicture32 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IArcs a0
              -> IO a1
copyPicture32 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut30 :: (Variant a1)
      => IArcs a0
      -> IO a1
cut30 =
  function1 "Cut"
            []
            outVariant

delete51 :: (Variant a1)
         => IArcs a0
         -> IO a1
delete51 =
  function1 "Delete"
            []
            outVariant

duplicate29 :: IArcs a0
            -> IO (IDispatch ())
duplicate29 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled32 :: IArcs a0
             -> IO Bool
getEnabled32 =
  propertyGet "Enabled"
              []
              outBool

setEnabled32 :: Bool
             -> IArcs a0
             -> IO ()
setEnabled32 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight34 :: IArcs a0
            -> IO Double
getHeight34 =
  propertyGet "Height"
              []
              outDouble

setHeight33 :: Double
            -> IArcs a0
            -> IO ()
setHeight33 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1216 :: IArcs a0
          -> IO ()
dummy1216 =
  method0 "_Dummy12"
          []

getLeft34 :: IArcs a0
          -> IO Double
getLeft34 =
  propertyGet "Left"
              []
              outDouble

setLeft33 :: Double
          -> IArcs a0
          -> IO ()
setLeft33 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked33 :: IArcs a0
            -> IO Bool
getLocked33 =
  propertyGet "Locked"
              []
              outBool

setLocked33 :: Bool
            -> IArcs a0
            -> IO ()
setLocked33 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1515 :: IArcs a0
          -> IO ()
dummy1515 =
  method0 "_Dummy15"
          []

getOnAction32 :: IArcs a0
              -> IO String
getOnAction32 =
  propertyGet "OnAction"
              []
              outString

setOnAction32 :: String
              -> IArcs a0
              -> IO ()
setOnAction32 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement29 :: (Variant a1)
               => IArcs a0
               -> IO a1
getPlacement29 =
  propertyGet "Placement"
              []
              outVariant

setPlacement29 :: a1
               -> IArcs a0
               -> IO ()
setPlacement29 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject29 :: IArcs a0
                 -> IO Bool
getPrintObject29 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject29 :: Bool
                 -> IArcs a0
                 -> IO ()
setPrintObject29 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select36 :: (Variant a1, Variant a2)
         => a2
         -> IArcs a0
         -> IO a1
select36 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack29 :: (Variant a1)
             => IArcs a0
             -> IO a1
sendToBack29 =
  function1 "SendToBack"
            []
            outVariant

getTop34 :: IArcs a0
         -> IO Double
getTop34 =
  propertyGet "Top"
              []
              outDouble

setTop33 :: Double
         -> IArcs a0
         -> IO ()
setTop33 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2215 :: IArcs a0
          -> IO ()
dummy2215 =
  method0 "_Dummy22"
          []

getVisible41 :: IArcs a0
             -> IO Bool
getVisible41 =
  propertyGet "Visible"
              []
              outBool

setVisible41 :: Bool
             -> IArcs a0
             -> IO ()
setVisible41 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth35 :: IArcs a0
           -> IO Double
getWidth35 =
  propertyGet "Width"
              []
              outDouble

setWidth34 :: Double
           -> IArcs a0
           -> IO ()
setWidth34 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder29 :: IArcs a0
            -> IO Int32
getZOrder29 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange30 :: IArcs a0
                -> IO (ShapeRange ())
getShapeRange30 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent11 :: IArcs a0
               -> IO Bool
getAddIndent11 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent11 :: Bool
               -> IArcs a0
               -> IO ()
setAddIndent11 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont6 :: (Variant a1)
                  => IArcs a0
                  -> IO a1
getAutoScaleFont6 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont6 :: a1
                  -> IArcs a0
                  -> IO ()
setAutoScaleFont6 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize10 :: IArcs a0
              -> IO Bool
getAutoSize10 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize10 :: Bool
              -> IArcs a0
              -> IO ()
setAutoSize10 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption28 :: IArcs a0
             -> IO String
getCaption28 =
  propertyGet "Caption"
              []
              outString

setCaption28 :: String
             -> IArcs a0
             -> IO ()
setCaption28 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters21 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IArcs a0
                -> IO (Characters ())
getCharacters21 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling25 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IArcs a0
                -> IO a1
checkSpelling25 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont12 :: IArcs a0
          -> IO (Font ())
getFont12 =
  propertyGet "Font"
              []
              outIUnknown

getFormula10 :: IArcs a0
             -> IO String
getFormula10 =
  propertyGet "Formula"
              []
              outString

setFormula10 :: String
             -> IArcs a0
             -> IO ()
setFormula10 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment11 :: (Variant a1)
                         => IArcs a0
                         -> IO a1
getHorizontalAlignment11 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment11 :: a1
                         -> IArcs a0
                         -> IO ()
setHorizontalAlignment11 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText18 :: IArcs a0
                -> IO Bool
getLockedText18 =
  propertyGet "LockedText"
              []
              outBool

setLockedText18 :: Bool
                -> IArcs a0
                -> IO ()
setLockedText18 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation13 :: (Variant a1)
                 => IArcs a0
                 -> IO a1
getOrientation13 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation13 :: a1
                 -> IArcs a0
                 -> IO ()
setOrientation13 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText23 :: IArcs a0
          -> IO String
getText23 =
  propertyGet "Text"
              []
              outString

setText22 :: String
          -> IArcs a0
          -> IO ()
setText22 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment11 :: (Variant a1)
                       => IArcs a0
                       -> IO a1
getVerticalAlignment11 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment11 :: a1
                       -> IArcs a0
                       -> IO ()
setVerticalAlignment11 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder11 :: IArcs a0
                  -> IO Int32
getReadingOrder11 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder11 :: Int32
                  -> IArcs a0
                  -> IO ()
setReadingOrder11 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder14 :: IArcs a0
            -> IO (Border ())
getBorder14 =
  propertyGet "Border"
              []
              outIUnknown

getInterior13 :: IArcs a0
              -> IO (Interior ())
getInterior13 =
  propertyGet "Interior"
              []
              outIUnknown

dummy432 :: IArcs a0
         -> IO ()
dummy432 =
  method0 "_Dummy43"
          []

add35 :: Double
      -> Double
      -> Double
      -> Double
      -> IArcs a0
      -> IO (Arc ())
add35 x1 y1 x2 y2 =
  function1 "Add"
            [ inDouble x1
            , inDouble y1
            , inDouble x2
            , inDouble y2
            ]
            outIUnknown

getCount46 :: IArcs a0
           -> IO Int32
getCount46 =
  propertyGet "Count"
              []
              outInt32

group15 :: IArcs a0
        -> IO (GroupObject ())
group15 =
  function1 "Group"
            []
            outIUnknown

item25 :: a1
       -> IArcs a0
       -> IO (IDispatch ())
item25 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum22 :: IArcs a0
          -> IO (IUnknown ())
newEnum22 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IOLEObjectEvents
-- 
-- --------------------------------------------------
data IOLEObjectEvents_ a = IOLEObjectEvents__ 
type IOLEObjectEvents a = IDispatch (IOLEObjectEvents_ a)
iidIOLEObjectEvents :: IID (IOLEObjectEvents ())
iidIOLEObjectEvents =
  mkIID "{00024410-0001-0000-C000-000000000046}"

gotFocus :: IOLEObjectEvents a0
         -> IO ()
gotFocus =
  method0 "GotFocus"
          []

lostFocus :: IOLEObjectEvents a0
          -> IO ()
lostFocus =
  method0 "LostFocus"
          []

-- --------------------------------------------------
-- 
-- interface _IOLEObject
-- 
-- --------------------------------------------------
data IOLEObject_ a = IOLEObject__ 
type IOLEObject a = IDispatch (IOLEObject_ a)
iidIOLEObject :: IID (IOLEObject ())
iidIOLEObject = mkIID "{000208A2-0001-0000-C000-000000000046}"

getApplication86 :: (Variant a1)
                 => IOLEObject a0
                 -> IO a1
getApplication86 =
  propertyGet "Application"
              []
              outVariant

getCreator86 :: IOLEObject a0
             -> IO XlCreator
getCreator86 =
  propertyGet "Creator"
              []
              outEnum

getParent101 :: IOLEObject a0
             -> IO (IDispatch ())
getParent101 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell14 :: IOLEObject a0
                     -> IO (Range ())
getBottomRightCell14 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront30 :: (Variant a1)
               => IOLEObject a0
               -> IO a1
bringToFront30 =
  function1 "BringToFront"
            []
            outVariant

copy36 :: (Variant a1)
       => IOLEObject a0
       -> IO a1
copy36 =
  function1 "Copy"
            []
            outVariant

copyPicture33 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IOLEObject a0
              -> IO a1
copyPicture33 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut31 :: (Variant a1)
      => IOLEObject a0
      -> IO a1
cut31 =
  function1 "Cut"
            []
            outVariant

delete52 :: (Variant a1)
         => IOLEObject a0
         -> IO a1
delete52 =
  function1 "Delete"
            []
            outVariant

duplicate30 :: IOLEObject a0
            -> IO (IDispatch ())
duplicate30 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled33 :: IOLEObject a0
             -> IO Bool
getEnabled33 =
  propertyGet "Enabled"
              []
              outBool

setEnabled33 :: Bool
             -> IOLEObject a0
             -> IO ()
setEnabled33 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight35 :: IOLEObject a0
            -> IO Double
getHeight35 =
  propertyGet "Height"
              []
              outDouble

setHeight34 :: Double
            -> IOLEObject a0
            -> IO ()
setHeight34 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex25 :: IOLEObject a0
           -> IO Int32
getIndex25 =
  propertyGet "Index"
              []
              outInt32

getLeft35 :: IOLEObject a0
          -> IO Double
getLeft35 =
  propertyGet "Left"
              []
              outDouble

setLeft34 :: Double
          -> IOLEObject a0
          -> IO ()
setLeft34 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked34 :: IOLEObject a0
            -> IO Bool
getLocked34 =
  propertyGet "Locked"
              []
              outBool

setLocked34 :: Bool
            -> IOLEObject a0
            -> IO ()
setLocked34 rHS =
  propertySet "Locked"
              [inBool rHS]

getName30 :: IOLEObject a0
          -> IO String
getName30 =
  propertyGet "Name"
              []
              outString

setName24 :: String
          -> IOLEObject a0
          -> IO ()
setName24 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction33 :: IOLEObject a0
              -> IO String
getOnAction33 =
  propertyGet "OnAction"
              []
              outString

setOnAction33 :: String
              -> IOLEObject a0
              -> IO ()
setOnAction33 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement30 :: (Variant a1)
               => IOLEObject a0
               -> IO a1
getPlacement30 =
  propertyGet "Placement"
              []
              outVariant

setPlacement30 :: a1
               -> IOLEObject a0
               -> IO ()
setPlacement30 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject30 :: IOLEObject a0
                 -> IO Bool
getPrintObject30 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject30 :: Bool
                 -> IOLEObject a0
                 -> IO ()
setPrintObject30 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select37 :: (Variant a1, Variant a2)
         => a2
         -> IOLEObject a0
         -> IO a1
select37 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack30 :: (Variant a1)
             => IOLEObject a0
             -> IO a1
sendToBack30 =
  function1 "SendToBack"
            []
            outVariant

getTop35 :: IOLEObject a0
         -> IO Double
getTop35 =
  propertyGet "Top"
              []
              outDouble

setTop34 :: Double
         -> IOLEObject a0
         -> IO ()
setTop34 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell14 :: IOLEObject a0
                 -> IO (Range ())
getTopLeftCell14 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible42 :: IOLEObject a0
             -> IO Bool
getVisible42 =
  propertyGet "Visible"
              []
              outBool

setVisible42 :: Bool
             -> IOLEObject a0
             -> IO ()
setVisible42 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth36 :: IOLEObject a0
           -> IO Double
getWidth36 =
  propertyGet "Width"
              []
              outDouble

setWidth35 :: Double
           -> IOLEObject a0
           -> IO ()
setWidth35 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder30 :: IOLEObject a0
            -> IO Int32
getZOrder30 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange31 :: IOLEObject a0
                -> IO (ShapeRange ())
getShapeRange31 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder15 :: IOLEObject a0
            -> IO (Border ())
getBorder15 =
  propertyGet "Border"
              []
              outIUnknown

getInterior14 :: IOLEObject a0
              -> IO (Interior ())
getInterior14 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow7 :: IOLEObject a0
           -> IO Bool
getShadow7 =
  propertyGet "Shadow"
              []
              outBool

setShadow7 :: Bool
           -> IOLEObject a0
           -> IO ()
setShadow7 rHS =
  propertySet "Shadow"
              [inBool rHS]

activate9 :: (Variant a1)
          => IOLEObject a0
          -> IO a1
activate9 =
  function1 "Activate"
            []
            outVariant

getAutoLoad :: IOLEObject a0
            -> IO Bool
getAutoLoad =
  propertyGet "AutoLoad"
              []
              outBool

setAutoLoad :: Bool
            -> IOLEObject a0
            -> IO ()
setAutoLoad rHS =
  propertySet "AutoLoad"
              [inBool rHS]

getAutoUpdate :: IOLEObject a0
              -> IO Bool
getAutoUpdate =
  propertyGet "AutoUpdate"
              []
              outBool

setAutoUpdate :: Bool
              -> IOLEObject a0
              -> IO ()
setAutoUpdate rHS =
  propertySet "AutoUpdate"
              [inBool rHS]

getObject :: IOLEObject a0
          -> IO (IDispatch ())
getObject =
  propertyGet "Object"
              []
              outIDispatch

getOLEType :: (Variant a1)
           => IOLEObject a0
           -> IO a1
getOLEType =
  propertyGet "OLEType"
              []
              outVariant

getSourceName1 :: IOLEObject a0
               -> IO String
getSourceName1 =
  propertyGet "SourceName"
              []
              outString

setSourceName :: String
              -> IOLEObject a0
              -> IO ()
setSourceName rHS =
  propertySet "SourceName"
              [inString rHS]

update0 :: (Variant a1)
        => IOLEObject a0
        -> IO a1
update0 =
  function1 "Update"
            []
            outVariant

verb :: (Variant a1, Variant a2)
     => a2
     -> IOLEObject a0
     -> IO a1
verb verb0 =
  function1 "Verb"
            [inDefaultValue (inInt32 1) inVariant verb0]
            outVariant

getLinkedCell12 :: IOLEObject a0
                -> IO String
getLinkedCell12 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell12 :: String
                -> IOLEObject a0
                -> IO ()
setLinkedCell12 rHS =
  propertySet "LinkedCell"
              [inString rHS]

getListFillRange4 :: IOLEObject a0
                  -> IO String
getListFillRange4 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange4 :: String
                  -> IOLEObject a0
                  -> IO ()
setListFillRange4 rHS =
  propertySet "ListFillRange"
              [inString rHS]

getProgID0 :: IOLEObject a0
           -> IO String
getProgID0 =
  propertyGet "progID"
              []
              outString

getAltHTML :: IOLEObject a0
           -> IO String
getAltHTML =
  propertyGet "AltHTML"
              []
              outString

setAltHTML :: String
           -> IOLEObject a0
           -> IO ()
setAltHTML rHS =
  propertySet "AltHTML"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IOLEObjects
-- 
-- --------------------------------------------------
data IOLEObjects_ a = IOLEObjects__ 
type IOLEObjects a = IDispatch (IOLEObjects_ a)
iidIOLEObjects :: IID (IOLEObjects ())
iidIOLEObjects = mkIID "{000208A3-0001-0000-C000-000000000046}"

getApplication87 :: (Variant a1)
                 => IOLEObjects a0
                 -> IO a1
getApplication87 =
  propertyGet "Application"
              []
              outVariant

getCreator87 :: IOLEObjects a0
             -> IO XlCreator
getCreator87 =
  propertyGet "Creator"
              []
              outEnum

getParent102 :: IOLEObjects a0
             -> IO (IDispatch ())
getParent102 =
  propertyGet "Parent"
              []
              outIDispatch

dummy319 :: IOLEObjects a0
         -> IO ()
dummy319 =
  method0 "_Dummy3"
          []

bringToFront31 :: (Variant a1)
               => IOLEObjects a0
               -> IO a1
bringToFront31 =
  function1 "BringToFront"
            []
            outVariant

copy37 :: (Variant a1)
       => IOLEObjects a0
       -> IO a1
copy37 =
  function1 "Copy"
            []
            outVariant

copyPicture34 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IOLEObjects a0
              -> IO a1
copyPicture34 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut32 :: (Variant a1)
      => IOLEObjects a0
      -> IO a1
cut32 =
  function1 "Cut"
            []
            outVariant

delete53 :: (Variant a1)
         => IOLEObjects a0
         -> IO a1
delete53 =
  function1 "Delete"
            []
            outVariant

duplicate31 :: IOLEObjects a0
            -> IO (IDispatch ())
duplicate31 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled34 :: IOLEObjects a0
             -> IO Bool
getEnabled34 =
  propertyGet "Enabled"
              []
              outBool

setEnabled34 :: Bool
             -> IOLEObjects a0
             -> IO ()
setEnabled34 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight36 :: IOLEObjects a0
            -> IO Double
getHeight36 =
  propertyGet "Height"
              []
              outDouble

setHeight35 :: Double
            -> IOLEObjects a0
            -> IO ()
setHeight35 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1217 :: IOLEObjects a0
          -> IO ()
dummy1217 =
  method0 "_Dummy12"
          []

getLeft36 :: IOLEObjects a0
          -> IO Double
getLeft36 =
  propertyGet "Left"
              []
              outDouble

setLeft35 :: Double
          -> IOLEObjects a0
          -> IO ()
setLeft35 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked35 :: IOLEObjects a0
            -> IO Bool
getLocked35 =
  propertyGet "Locked"
              []
              outBool

setLocked35 :: Bool
            -> IOLEObjects a0
            -> IO ()
setLocked35 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1516 :: IOLEObjects a0
          -> IO ()
dummy1516 =
  method0 "_Dummy15"
          []

getOnAction34 :: IOLEObjects a0
              -> IO String
getOnAction34 =
  propertyGet "OnAction"
              []
              outString

setOnAction34 :: String
              -> IOLEObjects a0
              -> IO ()
setOnAction34 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement31 :: (Variant a1)
               => IOLEObjects a0
               -> IO a1
getPlacement31 =
  propertyGet "Placement"
              []
              outVariant

setPlacement31 :: a1
               -> IOLEObjects a0
               -> IO ()
setPlacement31 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject31 :: IOLEObjects a0
                 -> IO Bool
getPrintObject31 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject31 :: Bool
                 -> IOLEObjects a0
                 -> IO ()
setPrintObject31 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select38 :: (Variant a1, Variant a2)
         => a2
         -> IOLEObjects a0
         -> IO a1
select38 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack31 :: (Variant a1)
             => IOLEObjects a0
             -> IO a1
sendToBack31 =
  function1 "SendToBack"
            []
            outVariant

getTop36 :: IOLEObjects a0
         -> IO Double
getTop36 =
  propertyGet "Top"
              []
              outDouble

setTop35 :: Double
         -> IOLEObjects a0
         -> IO ()
setTop35 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2216 :: IOLEObjects a0
          -> IO ()
dummy2216 =
  method0 "_Dummy22"
          []

getVisible43 :: IOLEObjects a0
             -> IO Bool
getVisible43 =
  propertyGet "Visible"
              []
              outBool

setVisible43 :: Bool
             -> IOLEObjects a0
             -> IO ()
setVisible43 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth37 :: IOLEObjects a0
           -> IO Double
getWidth37 =
  propertyGet "Width"
              []
              outDouble

setWidth36 :: Double
           -> IOLEObjects a0
           -> IO ()
setWidth36 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder31 :: IOLEObjects a0
            -> IO Int32
getZOrder31 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange32 :: IOLEObjects a0
                -> IO (ShapeRange ())
getShapeRange32 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder16 :: IOLEObjects a0
            -> IO (Border ())
getBorder16 =
  propertyGet "Border"
              []
              outIUnknown

getInterior15 :: IOLEObjects a0
              -> IO (Interior ())
getInterior15 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow8 :: IOLEObjects a0
           -> IO Bool
getShadow8 =
  propertyGet "Shadow"
              []
              outBool

setShadow8 :: Bool
           -> IOLEObjects a0
           -> IO ()
setShadow8 rHS =
  propertySet "Shadow"
              [inBool rHS]

dummy302 :: IOLEObjects a0
         -> IO ()
dummy302 =
  method0 "_Dummy30"
          []

getAutoLoad0 :: IOLEObjects a0
             -> IO Bool
getAutoLoad0 =
  propertyGet "AutoLoad"
              []
              outBool

setAutoLoad0 :: Bool
             -> IOLEObjects a0
             -> IO ()
setAutoLoad0 rHS =
  propertySet "AutoLoad"
              [inBool rHS]

dummy320 :: IOLEObjects a0
         -> IO ()
dummy320 =
  method0 "_Dummy32"
          []

dummy334 :: IOLEObjects a0
         -> IO ()
dummy334 =
  method0 "_Dummy33"
          []

dummy341 :: IOLEObjects a0
         -> IO ()
dummy341 =
  method0 "_Dummy34"
          []

getSourceName2 :: IOLEObjects a0
               -> IO String
getSourceName2 =
  propertyGet "SourceName"
              []
              outString

setSourceName0 :: String
               -> IOLEObjects a0
               -> IO ()
setSourceName0 rHS =
  propertySet "SourceName"
              [inString rHS]

dummy364 :: IOLEObjects a0
         -> IO ()
dummy364 =
  method0 "_Dummy36"
          []

dummy372 :: IOLEObjects a0
         -> IO ()
dummy372 =
  method0 "_Dummy37"
          []

dummy382 :: IOLEObjects a0
         -> IO ()
dummy382 =
  method0 "_Dummy38"
          []

dummy390 :: IOLEObjects a0
         -> IO ()
dummy390 =
  method0 "_Dummy39"
          []

dummy400 :: IOLEObjects a0
         -> IO ()
dummy400 =
  method0 "_Dummy40"
          []

dummy411 :: IOLEObjects a0
         -> IO ()
dummy411 =
  method0 "_Dummy41"
          []

add36 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
      => a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> IOLEObjects a0
      -> IO a1
add36 classType filename link displayAsIcon iconFileName iconIndex iconLabel left top width height =
  function1 "Add"
            [ inVariant classType
            , inVariant filename
            , inVariant link
            , inVariant displayAsIcon
            , inVariant iconFileName
            , inVariant iconIndex
            , inVariant iconLabel
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outVariant

getCount47 :: IOLEObjects a0
           -> IO Int32
getCount47 =
  propertyGet "Count"
              []
              outInt32

group16 :: IOLEObjects a0
        -> IO (GroupObject ())
group16 =
  function1 "Group"
            []
            outIUnknown

item26 :: a1
       -> IOLEObjects a0
       -> IO (IDispatch ())
item26 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum23 :: IOLEObjects a0
          -> IO (IUnknown ())
newEnum23 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ITextBox
-- 
-- --------------------------------------------------
data ITextBox_ a = ITextBox__ 
type ITextBox a = IDispatch (ITextBox_ a)
iidITextBox :: IID (ITextBox ())
iidITextBox = mkIID "{000208A4-0001-0000-C000-000000000046}"

getApplication88 :: (Variant a1)
                 => ITextBox a0
                 -> IO a1
getApplication88 =
  propertyGet "Application"
              []
              outVariant

getCreator88 :: ITextBox a0
             -> IO XlCreator
getCreator88 =
  propertyGet "Creator"
              []
              outEnum

getParent103 :: ITextBox a0
             -> IO (IDispatch ())
getParent103 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell15 :: ITextBox a0
                     -> IO (Range ())
getBottomRightCell15 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront32 :: (Variant a1)
               => ITextBox a0
               -> IO a1
bringToFront32 =
  function1 "BringToFront"
            []
            outVariant

copy38 :: (Variant a1)
       => ITextBox a0
       -> IO a1
copy38 =
  function1 "Copy"
            []
            outVariant

copyPicture35 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ITextBox a0
              -> IO a1
copyPicture35 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut33 :: (Variant a1)
      => ITextBox a0
      -> IO a1
cut33 =
  function1 "Cut"
            []
            outVariant

delete54 :: (Variant a1)
         => ITextBox a0
         -> IO a1
delete54 =
  function1 "Delete"
            []
            outVariant

duplicate32 :: ITextBox a0
            -> IO (IDispatch ())
duplicate32 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled35 :: ITextBox a0
             -> IO Bool
getEnabled35 =
  propertyGet "Enabled"
              []
              outBool

setEnabled35 :: Bool
             -> ITextBox a0
             -> IO ()
setEnabled35 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight37 :: ITextBox a0
            -> IO Double
getHeight37 =
  propertyGet "Height"
              []
              outDouble

setHeight36 :: Double
            -> ITextBox a0
            -> IO ()
setHeight36 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex26 :: ITextBox a0
           -> IO Int32
getIndex26 =
  propertyGet "Index"
              []
              outInt32

getLeft37 :: ITextBox a0
          -> IO Double
getLeft37 =
  propertyGet "Left"
              []
              outDouble

setLeft36 :: Double
          -> ITextBox a0
          -> IO ()
setLeft36 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked36 :: ITextBox a0
            -> IO Bool
getLocked36 =
  propertyGet "Locked"
              []
              outBool

setLocked36 :: Bool
            -> ITextBox a0
            -> IO ()
setLocked36 rHS =
  propertySet "Locked"
              [inBool rHS]

getName31 :: ITextBox a0
          -> IO String
getName31 =
  propertyGet "Name"
              []
              outString

setName25 :: String
          -> ITextBox a0
          -> IO ()
setName25 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction35 :: ITextBox a0
              -> IO String
getOnAction35 =
  propertyGet "OnAction"
              []
              outString

setOnAction35 :: String
              -> ITextBox a0
              -> IO ()
setOnAction35 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement32 :: (Variant a1)
               => ITextBox a0
               -> IO a1
getPlacement32 =
  propertyGet "Placement"
              []
              outVariant

setPlacement32 :: a1
               -> ITextBox a0
               -> IO ()
setPlacement32 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject32 :: ITextBox a0
                 -> IO Bool
getPrintObject32 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject32 :: Bool
                 -> ITextBox a0
                 -> IO ()
setPrintObject32 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select39 :: (Variant a1, Variant a2)
         => a2
         -> ITextBox a0
         -> IO a1
select39 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack32 :: (Variant a1)
             => ITextBox a0
             -> IO a1
sendToBack32 =
  function1 "SendToBack"
            []
            outVariant

getTop37 :: ITextBox a0
         -> IO Double
getTop37 =
  propertyGet "Top"
              []
              outDouble

setTop36 :: Double
         -> ITextBox a0
         -> IO ()
setTop36 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell15 :: ITextBox a0
                 -> IO (Range ())
getTopLeftCell15 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible44 :: ITextBox a0
             -> IO Bool
getVisible44 =
  propertyGet "Visible"
              []
              outBool

setVisible44 :: Bool
             -> ITextBox a0
             -> IO ()
setVisible44 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth38 :: ITextBox a0
           -> IO Double
getWidth38 =
  propertyGet "Width"
              []
              outDouble

setWidth37 :: Double
           -> ITextBox a0
           -> IO ()
setWidth37 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder32 :: ITextBox a0
            -> IO Int32
getZOrder32 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange33 :: ITextBox a0
                -> IO (ShapeRange ())
getShapeRange33 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent12 :: ITextBox a0
               -> IO Bool
getAddIndent12 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent12 :: Bool
               -> ITextBox a0
               -> IO ()
setAddIndent12 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont7 :: (Variant a1)
                  => ITextBox a0
                  -> IO a1
getAutoScaleFont7 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont7 :: a1
                  -> ITextBox a0
                  -> IO ()
setAutoScaleFont7 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize11 :: ITextBox a0
              -> IO Bool
getAutoSize11 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize11 :: Bool
              -> ITextBox a0
              -> IO ()
setAutoSize11 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption29 :: ITextBox a0
             -> IO String
getCaption29 =
  propertyGet "Caption"
              []
              outString

setCaption29 :: String
             -> ITextBox a0
             -> IO ()
setCaption29 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters22 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> ITextBox a0
                -> IO (Characters ())
getCharacters22 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling26 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> ITextBox a0
                -> IO a1
checkSpelling26 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont13 :: ITextBox a0
          -> IO (Font ())
getFont13 =
  propertyGet "Font"
              []
              outIUnknown

getFormula11 :: ITextBox a0
             -> IO String
getFormula11 =
  propertyGet "Formula"
              []
              outString

setFormula11 :: String
             -> ITextBox a0
             -> IO ()
setFormula11 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment12 :: (Variant a1)
                         => ITextBox a0
                         -> IO a1
getHorizontalAlignment12 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment12 :: a1
                         -> ITextBox a0
                         -> IO ()
setHorizontalAlignment12 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText19 :: ITextBox a0
                -> IO Bool
getLockedText19 =
  propertyGet "LockedText"
              []
              outBool

setLockedText19 :: Bool
                -> ITextBox a0
                -> IO ()
setLockedText19 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation14 :: (Variant a1)
                 => ITextBox a0
                 -> IO a1
getOrientation14 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation14 :: a1
                 -> ITextBox a0
                 -> IO ()
setOrientation14 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText24 :: ITextBox a0
          -> IO String
getText24 =
  propertyGet "Text"
              []
              outString

setText23 :: String
          -> ITextBox a0
          -> IO ()
setText23 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment12 :: (Variant a1)
                       => ITextBox a0
                       -> IO a1
getVerticalAlignment12 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment12 :: a1
                       -> ITextBox a0
                       -> IO ()
setVerticalAlignment12 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder12 :: ITextBox a0
                  -> IO Int32
getReadingOrder12 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder12 :: Int32
                  -> ITextBox a0
                  -> IO ()
setReadingOrder12 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder17 :: ITextBox a0
            -> IO (Border ())
getBorder17 =
  propertyGet "Border"
              []
              outIUnknown

getInterior16 :: ITextBox a0
              -> IO (Interior ())
getInterior16 =
  propertyGet "Interior"
              []
              outIUnknown

getRoundedCorners4 :: ITextBox a0
                   -> IO Bool
getRoundedCorners4 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners4 :: Bool
                   -> ITextBox a0
                   -> IO ()
setRoundedCorners4 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

getShadow9 :: ITextBox a0
           -> IO Bool
getShadow9 =
  propertyGet "Shadow"
              []
              outBool

setShadow9 :: Bool
           -> ITextBox a0
           -> IO ()
setShadow9 rHS =
  propertySet "Shadow"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface ITextBoxes
-- 
-- --------------------------------------------------
data ITextBoxes_ a = ITextBoxes__ 
type ITextBoxes a = IDispatch (ITextBoxes_ a)
iidITextBoxes :: IID (ITextBoxes ())
iidITextBoxes = mkIID "{000208A5-0001-0000-C000-000000000046}"

getApplication89 :: (Variant a1)
                 => ITextBoxes a0
                 -> IO a1
getApplication89 =
  propertyGet "Application"
              []
              outVariant

getCreator89 :: ITextBoxes a0
             -> IO XlCreator
getCreator89 =
  propertyGet "Creator"
              []
              outEnum

getParent104 :: ITextBoxes a0
             -> IO (IDispatch ())
getParent104 =
  propertyGet "Parent"
              []
              outIDispatch

dummy321 :: ITextBoxes a0
         -> IO ()
dummy321 =
  method0 "_Dummy3"
          []

bringToFront33 :: (Variant a1)
               => ITextBoxes a0
               -> IO a1
bringToFront33 =
  function1 "BringToFront"
            []
            outVariant

copy39 :: (Variant a1)
       => ITextBoxes a0
       -> IO a1
copy39 =
  function1 "Copy"
            []
            outVariant

copyPicture36 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> ITextBoxes a0
              -> IO a1
copyPicture36 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut34 :: (Variant a1)
      => ITextBoxes a0
      -> IO a1
cut34 =
  function1 "Cut"
            []
            outVariant

delete55 :: (Variant a1)
         => ITextBoxes a0
         -> IO a1
delete55 =
  function1 "Delete"
            []
            outVariant

duplicate33 :: ITextBoxes a0
            -> IO (IDispatch ())
duplicate33 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled36 :: ITextBoxes a0
             -> IO Bool
getEnabled36 =
  propertyGet "Enabled"
              []
              outBool

setEnabled36 :: Bool
             -> ITextBoxes a0
             -> IO ()
setEnabled36 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight38 :: ITextBoxes a0
            -> IO Double
getHeight38 =
  propertyGet "Height"
              []
              outDouble

setHeight37 :: Double
            -> ITextBoxes a0
            -> IO ()
setHeight37 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1218 :: ITextBoxes a0
          -> IO ()
dummy1218 =
  method0 "_Dummy12"
          []

getLeft38 :: ITextBoxes a0
          -> IO Double
getLeft38 =
  propertyGet "Left"
              []
              outDouble

setLeft37 :: Double
          -> ITextBoxes a0
          -> IO ()
setLeft37 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked37 :: ITextBoxes a0
            -> IO Bool
getLocked37 =
  propertyGet "Locked"
              []
              outBool

setLocked37 :: Bool
            -> ITextBoxes a0
            -> IO ()
setLocked37 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1517 :: ITextBoxes a0
          -> IO ()
dummy1517 =
  method0 "_Dummy15"
          []

getOnAction36 :: ITextBoxes a0
              -> IO String
getOnAction36 =
  propertyGet "OnAction"
              []
              outString

setOnAction36 :: String
              -> ITextBoxes a0
              -> IO ()
setOnAction36 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement33 :: (Variant a1)
               => ITextBoxes a0
               -> IO a1
getPlacement33 =
  propertyGet "Placement"
              []
              outVariant

setPlacement33 :: a1
               -> ITextBoxes a0
               -> IO ()
setPlacement33 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject33 :: ITextBoxes a0
                 -> IO Bool
getPrintObject33 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject33 :: Bool
                 -> ITextBoxes a0
                 -> IO ()
setPrintObject33 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select40 :: (Variant a1, Variant a2)
         => a2
         -> ITextBoxes a0
         -> IO a1
select40 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack33 :: (Variant a1)
             => ITextBoxes a0
             -> IO a1
sendToBack33 =
  function1 "SendToBack"
            []
            outVariant

getTop38 :: ITextBoxes a0
         -> IO Double
getTop38 =
  propertyGet "Top"
              []
              outDouble

setTop37 :: Double
         -> ITextBoxes a0
         -> IO ()
setTop37 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2217 :: ITextBoxes a0
          -> IO ()
dummy2217 =
  method0 "_Dummy22"
          []

getVisible45 :: ITextBoxes a0
             -> IO Bool
getVisible45 =
  propertyGet "Visible"
              []
              outBool

setVisible45 :: Bool
             -> ITextBoxes a0
             -> IO ()
setVisible45 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth39 :: ITextBoxes a0
           -> IO Double
getWidth39 =
  propertyGet "Width"
              []
              outDouble

setWidth38 :: Double
           -> ITextBoxes a0
           -> IO ()
setWidth38 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder33 :: ITextBoxes a0
            -> IO Int32
getZOrder33 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange34 :: ITextBoxes a0
                -> IO (ShapeRange ())
getShapeRange34 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent13 :: ITextBoxes a0
               -> IO Bool
getAddIndent13 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent13 :: Bool
               -> ITextBoxes a0
               -> IO ()
setAddIndent13 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont8 :: (Variant a1)
                  => ITextBoxes a0
                  -> IO a1
getAutoScaleFont8 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont8 :: a1
                  -> ITextBoxes a0
                  -> IO ()
setAutoScaleFont8 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize12 :: ITextBoxes a0
              -> IO Bool
getAutoSize12 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize12 :: Bool
              -> ITextBoxes a0
              -> IO ()
setAutoSize12 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption30 :: ITextBoxes a0
             -> IO String
getCaption30 =
  propertyGet "Caption"
              []
              outString

setCaption30 :: String
             -> ITextBoxes a0
             -> IO ()
setCaption30 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters23 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> ITextBoxes a0
                -> IO (Characters ())
getCharacters23 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling27 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> ITextBoxes a0
                -> IO a1
checkSpelling27 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont14 :: ITextBoxes a0
          -> IO (Font ())
getFont14 =
  propertyGet "Font"
              []
              outIUnknown

getFormula12 :: ITextBoxes a0
             -> IO String
getFormula12 =
  propertyGet "Formula"
              []
              outString

setFormula12 :: String
             -> ITextBoxes a0
             -> IO ()
setFormula12 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment13 :: (Variant a1)
                         => ITextBoxes a0
                         -> IO a1
getHorizontalAlignment13 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment13 :: a1
                         -> ITextBoxes a0
                         -> IO ()
setHorizontalAlignment13 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText20 :: ITextBoxes a0
                -> IO Bool
getLockedText20 =
  propertyGet "LockedText"
              []
              outBool

setLockedText20 :: Bool
                -> ITextBoxes a0
                -> IO ()
setLockedText20 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation15 :: (Variant a1)
                 => ITextBoxes a0
                 -> IO a1
getOrientation15 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation15 :: a1
                 -> ITextBoxes a0
                 -> IO ()
setOrientation15 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText25 :: ITextBoxes a0
          -> IO String
getText25 =
  propertyGet "Text"
              []
              outString

setText24 :: String
          -> ITextBoxes a0
          -> IO ()
setText24 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment13 :: (Variant a1)
                       => ITextBoxes a0
                       -> IO a1
getVerticalAlignment13 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment13 :: a1
                       -> ITextBoxes a0
                       -> IO ()
setVerticalAlignment13 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder13 :: ITextBoxes a0
                  -> IO Int32
getReadingOrder13 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder13 :: Int32
                  -> ITextBoxes a0
                  -> IO ()
setReadingOrder13 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder18 :: ITextBoxes a0
            -> IO (Border ())
getBorder18 =
  propertyGet "Border"
              []
              outIUnknown

getInterior17 :: ITextBoxes a0
              -> IO (Interior ())
getInterior17 =
  propertyGet "Interior"
              []
              outIUnknown

getRoundedCorners5 :: ITextBoxes a0
                   -> IO Bool
getRoundedCorners5 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners5 :: Bool
                   -> ITextBoxes a0
                   -> IO ()
setRoundedCorners5 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

getShadow10 :: ITextBoxes a0
            -> IO Bool
getShadow10 =
  propertyGet "Shadow"
              []
              outBool

setShadow10 :: Bool
            -> ITextBoxes a0
            -> IO ()
setShadow10 rHS =
  propertySet "Shadow"
              [inBool rHS]

add37 :: Double
      -> Double
      -> Double
      -> Double
      -> ITextBoxes a0
      -> IO (TextBox ())
add37 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount48 :: ITextBoxes a0
           -> IO Int32
getCount48 =
  propertyGet "Count"
              []
              outInt32

group17 :: ITextBoxes a0
        -> IO (GroupObject ())
group17 =
  function1 "Group"
            []
            outIUnknown

item27 :: a1
       -> ITextBoxes a0
       -> IO (IDispatch ())
item27 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum24 :: ITextBoxes a0
          -> IO (IUnknown ())
newEnum24 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPicture
-- 
-- --------------------------------------------------
data IPicture_ a = IPicture__ 
type IPicture a = IDispatch (IPicture_ a)
iidIPicture :: IID (IPicture ())
iidIPicture = mkIID "{000208A6-0001-0000-C000-000000000046}"

getApplication90 :: (Variant a1)
                 => IPicture a0
                 -> IO a1
getApplication90 =
  propertyGet "Application"
              []
              outVariant

getCreator90 :: IPicture a0
             -> IO XlCreator
getCreator90 =
  propertyGet "Creator"
              []
              outEnum

getParent105 :: IPicture a0
             -> IO (IDispatch ())
getParent105 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell16 :: IPicture a0
                     -> IO (Range ())
getBottomRightCell16 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront34 :: (Variant a1)
               => IPicture a0
               -> IO a1
bringToFront34 =
  function1 "BringToFront"
            []
            outVariant

copy40 :: (Variant a1)
       => IPicture a0
       -> IO a1
copy40 =
  function1 "Copy"
            []
            outVariant

copyPicture37 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IPicture a0
              -> IO a1
copyPicture37 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut35 :: (Variant a1)
      => IPicture a0
      -> IO a1
cut35 =
  function1 "Cut"
            []
            outVariant

delete56 :: (Variant a1)
         => IPicture a0
         -> IO a1
delete56 =
  function1 "Delete"
            []
            outVariant

duplicate34 :: IPicture a0
            -> IO (IDispatch ())
duplicate34 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled37 :: IPicture a0
             -> IO Bool
getEnabled37 =
  propertyGet "Enabled"
              []
              outBool

setEnabled37 :: Bool
             -> IPicture a0
             -> IO ()
setEnabled37 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight39 :: IPicture a0
            -> IO Double
getHeight39 =
  propertyGet "Height"
              []
              outDouble

setHeight38 :: Double
            -> IPicture a0
            -> IO ()
setHeight38 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex27 :: IPicture a0
           -> IO Int32
getIndex27 =
  propertyGet "Index"
              []
              outInt32

getLeft39 :: IPicture a0
          -> IO Double
getLeft39 =
  propertyGet "Left"
              []
              outDouble

setLeft38 :: Double
          -> IPicture a0
          -> IO ()
setLeft38 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked38 :: IPicture a0
            -> IO Bool
getLocked38 =
  propertyGet "Locked"
              []
              outBool

setLocked38 :: Bool
            -> IPicture a0
            -> IO ()
setLocked38 rHS =
  propertySet "Locked"
              [inBool rHS]

getName32 :: IPicture a0
          -> IO String
getName32 =
  propertyGet "Name"
              []
              outString

setName26 :: String
          -> IPicture a0
          -> IO ()
setName26 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction37 :: IPicture a0
              -> IO String
getOnAction37 =
  propertyGet "OnAction"
              []
              outString

setOnAction37 :: String
              -> IPicture a0
              -> IO ()
setOnAction37 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement34 :: (Variant a1)
               => IPicture a0
               -> IO a1
getPlacement34 =
  propertyGet "Placement"
              []
              outVariant

setPlacement34 :: a1
               -> IPicture a0
               -> IO ()
setPlacement34 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject34 :: IPicture a0
                 -> IO Bool
getPrintObject34 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject34 :: Bool
                 -> IPicture a0
                 -> IO ()
setPrintObject34 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select41 :: (Variant a1, Variant a2)
         => a2
         -> IPicture a0
         -> IO a1
select41 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack34 :: (Variant a1)
             => IPicture a0
             -> IO a1
sendToBack34 =
  function1 "SendToBack"
            []
            outVariant

getTop39 :: IPicture a0
         -> IO Double
getTop39 =
  propertyGet "Top"
              []
              outDouble

setTop38 :: Double
         -> IPicture a0
         -> IO ()
setTop38 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell16 :: IPicture a0
                 -> IO (Range ())
getTopLeftCell16 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible46 :: IPicture a0
             -> IO Bool
getVisible46 =
  propertyGet "Visible"
              []
              outBool

setVisible46 :: Bool
             -> IPicture a0
             -> IO ()
setVisible46 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth40 :: IPicture a0
           -> IO Double
getWidth40 =
  propertyGet "Width"
              []
              outDouble

setWidth39 :: Double
           -> IPicture a0
           -> IO ()
setWidth39 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder34 :: IPicture a0
            -> IO Int32
getZOrder34 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange35 :: IPicture a0
                -> IO (ShapeRange ())
getShapeRange35 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder19 :: IPicture a0
            -> IO (Border ())
getBorder19 =
  propertyGet "Border"
              []
              outIUnknown

getInterior18 :: IPicture a0
              -> IO (Interior ())
getInterior18 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow11 :: IPicture a0
            -> IO Bool
getShadow11 =
  propertyGet "Shadow"
              []
              outBool

setShadow11 :: Bool
            -> IPicture a0
            -> IO ()
setShadow11 rHS =
  propertySet "Shadow"
              [inBool rHS]

getFormula13 :: IPicture a0
             -> IO String
getFormula13 =
  propertyGet "Formula"
              []
              outString

setFormula13 :: String
             -> IPicture a0
             -> IO ()
setFormula13 rHS =
  propertySet "Formula"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IPictures
-- 
-- --------------------------------------------------
data IPictures_ a = IPictures__ 
type IPictures a = IDispatch (IPictures_ a)
iidIPictures :: IID (IPictures ())
iidIPictures = mkIID "{000208A7-0001-0000-C000-000000000046}"

getApplication91 :: (Variant a1)
                 => IPictures a0
                 -> IO a1
getApplication91 =
  propertyGet "Application"
              []
              outVariant

getCreator91 :: IPictures a0
             -> IO XlCreator
getCreator91 =
  propertyGet "Creator"
              []
              outEnum

getParent106 :: IPictures a0
             -> IO (IDispatch ())
getParent106 =
  propertyGet "Parent"
              []
              outIDispatch

dummy322 :: IPictures a0
         -> IO ()
dummy322 =
  method0 "_Dummy3"
          []

bringToFront35 :: (Variant a1)
               => IPictures a0
               -> IO a1
bringToFront35 =
  function1 "BringToFront"
            []
            outVariant

copy41 :: (Variant a1)
       => IPictures a0
       -> IO a1
copy41 =
  function1 "Copy"
            []
            outVariant

copyPicture38 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IPictures a0
              -> IO a1
copyPicture38 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut36 :: (Variant a1)
      => IPictures a0
      -> IO a1
cut36 =
  function1 "Cut"
            []
            outVariant

delete57 :: (Variant a1)
         => IPictures a0
         -> IO a1
delete57 =
  function1 "Delete"
            []
            outVariant

duplicate35 :: IPictures a0
            -> IO (IDispatch ())
duplicate35 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled38 :: IPictures a0
             -> IO Bool
getEnabled38 =
  propertyGet "Enabled"
              []
              outBool

setEnabled38 :: Bool
             -> IPictures a0
             -> IO ()
setEnabled38 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight40 :: IPictures a0
            -> IO Double
getHeight40 =
  propertyGet "Height"
              []
              outDouble

setHeight39 :: Double
            -> IPictures a0
            -> IO ()
setHeight39 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1219 :: IPictures a0
          -> IO ()
dummy1219 =
  method0 "_Dummy12"
          []

getLeft40 :: IPictures a0
          -> IO Double
getLeft40 =
  propertyGet "Left"
              []
              outDouble

setLeft39 :: Double
          -> IPictures a0
          -> IO ()
setLeft39 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked39 :: IPictures a0
            -> IO Bool
getLocked39 =
  propertyGet "Locked"
              []
              outBool

setLocked39 :: Bool
            -> IPictures a0
            -> IO ()
setLocked39 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1518 :: IPictures a0
          -> IO ()
dummy1518 =
  method0 "_Dummy15"
          []

getOnAction38 :: IPictures a0
              -> IO String
getOnAction38 =
  propertyGet "OnAction"
              []
              outString

setOnAction38 :: String
              -> IPictures a0
              -> IO ()
setOnAction38 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement35 :: (Variant a1)
               => IPictures a0
               -> IO a1
getPlacement35 =
  propertyGet "Placement"
              []
              outVariant

setPlacement35 :: a1
               -> IPictures a0
               -> IO ()
setPlacement35 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject35 :: IPictures a0
                 -> IO Bool
getPrintObject35 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject35 :: Bool
                 -> IPictures a0
                 -> IO ()
setPrintObject35 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select42 :: (Variant a1, Variant a2)
         => a2
         -> IPictures a0
         -> IO a1
select42 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack35 :: (Variant a1)
             => IPictures a0
             -> IO a1
sendToBack35 =
  function1 "SendToBack"
            []
            outVariant

getTop40 :: IPictures a0
         -> IO Double
getTop40 =
  propertyGet "Top"
              []
              outDouble

setTop39 :: Double
         -> IPictures a0
         -> IO ()
setTop39 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2218 :: IPictures a0
          -> IO ()
dummy2218 =
  method0 "_Dummy22"
          []

getVisible47 :: IPictures a0
             -> IO Bool
getVisible47 =
  propertyGet "Visible"
              []
              outBool

setVisible47 :: Bool
             -> IPictures a0
             -> IO ()
setVisible47 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth41 :: IPictures a0
           -> IO Double
getWidth41 =
  propertyGet "Width"
              []
              outDouble

setWidth40 :: Double
           -> IPictures a0
           -> IO ()
setWidth40 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder35 :: IPictures a0
            -> IO Int32
getZOrder35 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange36 :: IPictures a0
                -> IO (ShapeRange ())
getShapeRange36 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder20 :: IPictures a0
            -> IO (Border ())
getBorder20 =
  propertyGet "Border"
              []
              outIUnknown

getInterior19 :: IPictures a0
              -> IO (Interior ())
getInterior19 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow12 :: IPictures a0
            -> IO Bool
getShadow12 =
  propertyGet "Shadow"
              []
              outBool

setShadow12 :: Bool
            -> IPictures a0
            -> IO ()
setShadow12 rHS =
  propertySet "Shadow"
              [inBool rHS]

getFormula14 :: IPictures a0
             -> IO String
getFormula14 =
  propertyGet "Formula"
              []
              outString

setFormula14 :: String
             -> IPictures a0
             -> IO ()
setFormula14 rHS =
  propertySet "Formula"
              [inString rHS]

add38 :: Double
      -> Double
      -> Double
      -> Double
      -> IPictures a0
      -> IO (Picture ())
add38 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount49 :: IPictures a0
           -> IO Int32
getCount49 =
  propertyGet "Count"
              []
              outInt32

group18 :: IPictures a0
        -> IO (GroupObject ())
group18 =
  function1 "Group"
            []
            outIUnknown

insert2 :: (Variant a1)
        => String
        -> a1
        -> IPictures a0
        -> IO (Picture ())
insert2 filename converter =
  function1 "Insert"
            [ inString filename
            , inVariant converter
            ]
            outIUnknown

item28 :: a1
       -> IPictures a0
       -> IO (IDispatch ())
item28 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum25 :: IPictures a0
          -> IO (IUnknown ())
newEnum25 =
  function1 "_NewEnum"
            []
            outIUnknown

paste1 :: (Variant a1)
       => a1
       -> IPictures a0
       -> IO (Picture ())
paste1 link =
  function1 "Paste"
            [inVariant link]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IDrawing
-- 
-- --------------------------------------------------
data IDrawing_ a = IDrawing__ 
type IDrawing a = IDispatch (IDrawing_ a)
iidIDrawing :: IID (IDrawing ())
iidIDrawing = mkIID "{000208A8-0001-0000-C000-000000000046}"

getApplication92 :: (Variant a1)
                 => IDrawing a0
                 -> IO a1
getApplication92 =
  propertyGet "Application"
              []
              outVariant

getCreator92 :: IDrawing a0
             -> IO XlCreator
getCreator92 =
  propertyGet "Creator"
              []
              outEnum

getParent107 :: IDrawing a0
             -> IO (IDispatch ())
getParent107 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell17 :: IDrawing a0
                     -> IO (Range ())
getBottomRightCell17 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront36 :: (Variant a1)
               => IDrawing a0
               -> IO a1
bringToFront36 =
  function1 "BringToFront"
            []
            outVariant

copy42 :: (Variant a1)
       => IDrawing a0
       -> IO a1
copy42 =
  function1 "Copy"
            []
            outVariant

copyPicture39 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IDrawing a0
              -> IO a1
copyPicture39 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut37 :: (Variant a1)
      => IDrawing a0
      -> IO a1
cut37 =
  function1 "Cut"
            []
            outVariant

delete58 :: (Variant a1)
         => IDrawing a0
         -> IO a1
delete58 =
  function1 "Delete"
            []
            outVariant

duplicate36 :: IDrawing a0
            -> IO (IDispatch ())
duplicate36 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled39 :: IDrawing a0
             -> IO Bool
getEnabled39 =
  propertyGet "Enabled"
              []
              outBool

setEnabled39 :: Bool
             -> IDrawing a0
             -> IO ()
setEnabled39 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight41 :: IDrawing a0
            -> IO Double
getHeight41 =
  propertyGet "Height"
              []
              outDouble

setHeight40 :: Double
            -> IDrawing a0
            -> IO ()
setHeight40 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex28 :: IDrawing a0
           -> IO Int32
getIndex28 =
  propertyGet "Index"
              []
              outInt32

getLeft41 :: IDrawing a0
          -> IO Double
getLeft41 =
  propertyGet "Left"
              []
              outDouble

setLeft40 :: Double
          -> IDrawing a0
          -> IO ()
setLeft40 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked40 :: IDrawing a0
            -> IO Bool
getLocked40 =
  propertyGet "Locked"
              []
              outBool

setLocked40 :: Bool
            -> IDrawing a0
            -> IO ()
setLocked40 rHS =
  propertySet "Locked"
              [inBool rHS]

getName33 :: IDrawing a0
          -> IO String
getName33 =
  propertyGet "Name"
              []
              outString

setName27 :: String
          -> IDrawing a0
          -> IO ()
setName27 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction39 :: IDrawing a0
              -> IO String
getOnAction39 =
  propertyGet "OnAction"
              []
              outString

setOnAction39 :: String
              -> IDrawing a0
              -> IO ()
setOnAction39 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement36 :: (Variant a1)
               => IDrawing a0
               -> IO a1
getPlacement36 =
  propertyGet "Placement"
              []
              outVariant

setPlacement36 :: a1
               -> IDrawing a0
               -> IO ()
setPlacement36 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject36 :: IDrawing a0
                 -> IO Bool
getPrintObject36 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject36 :: Bool
                 -> IDrawing a0
                 -> IO ()
setPrintObject36 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select43 :: (Variant a1, Variant a2)
         => a2
         -> IDrawing a0
         -> IO a1
select43 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack36 :: (Variant a1)
             => IDrawing a0
             -> IO a1
sendToBack36 =
  function1 "SendToBack"
            []
            outVariant

getTop41 :: IDrawing a0
         -> IO Double
getTop41 =
  propertyGet "Top"
              []
              outDouble

setTop40 :: Double
         -> IDrawing a0
         -> IO ()
setTop40 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell17 :: IDrawing a0
                 -> IO (Range ())
getTopLeftCell17 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible48 :: IDrawing a0
             -> IO Bool
getVisible48 =
  propertyGet "Visible"
              []
              outBool

setVisible48 :: Bool
             -> IDrawing a0
             -> IO ()
setVisible48 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth42 :: IDrawing a0
           -> IO Double
getWidth42 =
  propertyGet "Width"
              []
              outDouble

setWidth41 :: Double
           -> IDrawing a0
           -> IO ()
setWidth41 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder36 :: IDrawing a0
            -> IO Int32
getZOrder36 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange37 :: IDrawing a0
                -> IO (ShapeRange ())
getShapeRange37 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent14 :: IDrawing a0
               -> IO Bool
getAddIndent14 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent14 :: Bool
               -> IDrawing a0
               -> IO ()
setAddIndent14 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont9 :: (Variant a1)
                  => IDrawing a0
                  -> IO a1
getAutoScaleFont9 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont9 :: a1
                  -> IDrawing a0
                  -> IO ()
setAutoScaleFont9 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize13 :: IDrawing a0
              -> IO Bool
getAutoSize13 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize13 :: Bool
              -> IDrawing a0
              -> IO ()
setAutoSize13 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption31 :: IDrawing a0
             -> IO String
getCaption31 =
  propertyGet "Caption"
              []
              outString

setCaption31 :: String
             -> IDrawing a0
             -> IO ()
setCaption31 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters24 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDrawing a0
                -> IO (Characters ())
getCharacters24 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling28 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IDrawing a0
                -> IO a1
checkSpelling28 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont15 :: IDrawing a0
          -> IO (Font ())
getFont15 =
  propertyGet "Font"
              []
              outIUnknown

getFormula15 :: IDrawing a0
             -> IO String
getFormula15 =
  propertyGet "Formula"
              []
              outString

setFormula15 :: String
             -> IDrawing a0
             -> IO ()
setFormula15 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment14 :: (Variant a1)
                         => IDrawing a0
                         -> IO a1
getHorizontalAlignment14 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment14 :: a1
                         -> IDrawing a0
                         -> IO ()
setHorizontalAlignment14 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText21 :: IDrawing a0
                -> IO Bool
getLockedText21 =
  propertyGet "LockedText"
              []
              outBool

setLockedText21 :: Bool
                -> IDrawing a0
                -> IO ()
setLockedText21 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation16 :: (Variant a1)
                 => IDrawing a0
                 -> IO a1
getOrientation16 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation16 :: a1
                 -> IDrawing a0
                 -> IO ()
setOrientation16 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText26 :: IDrawing a0
          -> IO String
getText26 =
  propertyGet "Text"
              []
              outString

setText25 :: String
          -> IDrawing a0
          -> IO ()
setText25 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment14 :: (Variant a1)
                       => IDrawing a0
                       -> IO a1
getVerticalAlignment14 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment14 :: a1
                       -> IDrawing a0
                       -> IO ()
setVerticalAlignment14 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder14 :: IDrawing a0
                  -> IO Int32
getReadingOrder14 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder14 :: Int32
                  -> IDrawing a0
                  -> IO ()
setReadingOrder14 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder21 :: IDrawing a0
            -> IO (Border ())
getBorder21 =
  propertyGet "Border"
              []
              outIUnknown

getInterior20 :: IDrawing a0
              -> IO (Interior ())
getInterior20 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow13 :: IDrawing a0
            -> IO Bool
getShadow13 =
  propertyGet "Shadow"
              []
              outBool

setShadow13 :: Bool
            -> IDrawing a0
            -> IO ()
setShadow13 rHS =
  propertySet "Shadow"
              [inBool rHS]

addVertex :: (Variant a1)
          => Double
          -> Double
          -> IDrawing a0
          -> IO a1
addVertex left top =
  function1 "AddVertex"
            [ inDouble left
            , inDouble top
            ]
            outVariant

reshape0 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> Bool
         -> a2
         -> a3
         -> IDrawing a0
         -> IO a1
reshape0 vertex insert3 left top =
  function1 "Reshape"
            [ inInt32 vertex
            , inBool insert3
            , inVariant left
            , inVariant top
            ]
            outVariant

getVertices :: (Variant a1, Variant a2, Variant a3)
            => a2
            -> a3
            -> IDrawing a0
            -> IO a1
getVertices index1 index2 =
  propertyGet "Vertices"
              [ inVariant index1
              , inVariant index2
              ]
              outVariant

-- --------------------------------------------------
-- 
-- interface IDrawings
-- 
-- --------------------------------------------------
data IDrawings_ a = IDrawings__ 
type IDrawings a = IDispatch (IDrawings_ a)
iidIDrawings :: IID (IDrawings ())
iidIDrawings = mkIID "{000208A9-0001-0000-C000-000000000046}"

getApplication93 :: (Variant a1)
                 => IDrawings a0
                 -> IO a1
getApplication93 =
  propertyGet "Application"
              []
              outVariant

getCreator93 :: IDrawings a0
             -> IO XlCreator
getCreator93 =
  propertyGet "Creator"
              []
              outEnum

getParent108 :: IDrawings a0
             -> IO (IDispatch ())
getParent108 =
  propertyGet "Parent"
              []
              outIDispatch

dummy323 :: IDrawings a0
         -> IO ()
dummy323 =
  method0 "_Dummy3"
          []

bringToFront37 :: (Variant a1)
               => IDrawings a0
               -> IO a1
bringToFront37 =
  function1 "BringToFront"
            []
            outVariant

copy43 :: (Variant a1)
       => IDrawings a0
       -> IO a1
copy43 =
  function1 "Copy"
            []
            outVariant

copyPicture40 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IDrawings a0
              -> IO a1
copyPicture40 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut38 :: (Variant a1)
      => IDrawings a0
      -> IO a1
cut38 =
  function1 "Cut"
            []
            outVariant

delete59 :: (Variant a1)
         => IDrawings a0
         -> IO a1
delete59 =
  function1 "Delete"
            []
            outVariant

duplicate37 :: IDrawings a0
            -> IO (IDispatch ())
duplicate37 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled40 :: IDrawings a0
             -> IO Bool
getEnabled40 =
  propertyGet "Enabled"
              []
              outBool

setEnabled40 :: Bool
             -> IDrawings a0
             -> IO ()
setEnabled40 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight42 :: IDrawings a0
            -> IO Double
getHeight42 =
  propertyGet "Height"
              []
              outDouble

setHeight41 :: Double
            -> IDrawings a0
            -> IO ()
setHeight41 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1220 :: IDrawings a0
          -> IO ()
dummy1220 =
  method0 "_Dummy12"
          []

getLeft42 :: IDrawings a0
          -> IO Double
getLeft42 =
  propertyGet "Left"
              []
              outDouble

setLeft41 :: Double
          -> IDrawings a0
          -> IO ()
setLeft41 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked41 :: IDrawings a0
            -> IO Bool
getLocked41 =
  propertyGet "Locked"
              []
              outBool

setLocked41 :: Bool
            -> IDrawings a0
            -> IO ()
setLocked41 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1519 :: IDrawings a0
          -> IO ()
dummy1519 =
  method0 "_Dummy15"
          []

getOnAction40 :: IDrawings a0
              -> IO String
getOnAction40 =
  propertyGet "OnAction"
              []
              outString

setOnAction40 :: String
              -> IDrawings a0
              -> IO ()
setOnAction40 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement37 :: (Variant a1)
               => IDrawings a0
               -> IO a1
getPlacement37 =
  propertyGet "Placement"
              []
              outVariant

setPlacement37 :: a1
               -> IDrawings a0
               -> IO ()
setPlacement37 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject37 :: IDrawings a0
                 -> IO Bool
getPrintObject37 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject37 :: Bool
                 -> IDrawings a0
                 -> IO ()
setPrintObject37 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select44 :: (Variant a1, Variant a2)
         => a2
         -> IDrawings a0
         -> IO a1
select44 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack37 :: (Variant a1)
             => IDrawings a0
             -> IO a1
sendToBack37 =
  function1 "SendToBack"
            []
            outVariant

getTop42 :: IDrawings a0
         -> IO Double
getTop42 =
  propertyGet "Top"
              []
              outDouble

setTop41 :: Double
         -> IDrawings a0
         -> IO ()
setTop41 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2219 :: IDrawings a0
          -> IO ()
dummy2219 =
  method0 "_Dummy22"
          []

getVisible49 :: IDrawings a0
             -> IO Bool
getVisible49 =
  propertyGet "Visible"
              []
              outBool

setVisible49 :: Bool
             -> IDrawings a0
             -> IO ()
setVisible49 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth43 :: IDrawings a0
           -> IO Double
getWidth43 =
  propertyGet "Width"
              []
              outDouble

setWidth42 :: Double
           -> IDrawings a0
           -> IO ()
setWidth42 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder37 :: IDrawings a0
            -> IO Int32
getZOrder37 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange38 :: IDrawings a0
                -> IO (ShapeRange ())
getShapeRange38 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent15 :: IDrawings a0
               -> IO Bool
getAddIndent15 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent15 :: Bool
               -> IDrawings a0
               -> IO ()
setAddIndent15 rHS =
  propertySet "AddIndent"
              [inBool rHS]

getAutoScaleFont10 :: (Variant a1)
                   => IDrawings a0
                   -> IO a1
getAutoScaleFont10 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont10 :: a1
                   -> IDrawings a0
                   -> IO ()
setAutoScaleFont10 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoSize14 :: IDrawings a0
              -> IO Bool
getAutoSize14 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize14 :: Bool
              -> IDrawings a0
              -> IO ()
setAutoSize14 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getCaption32 :: IDrawings a0
             -> IO String
getCaption32 =
  propertyGet "Caption"
              []
              outString

setCaption32 :: String
             -> IDrawings a0
             -> IO ()
setCaption32 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters25 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDrawings a0
                -> IO (Characters ())
getCharacters25 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling29 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> IDrawings a0
                -> IO a1
checkSpelling29 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont16 :: IDrawings a0
          -> IO (Font ())
getFont16 =
  propertyGet "Font"
              []
              outIUnknown

getFormula16 :: IDrawings a0
             -> IO String
getFormula16 =
  propertyGet "Formula"
              []
              outString

setFormula16 :: String
             -> IDrawings a0
             -> IO ()
setFormula16 rHS =
  propertySet "Formula"
              [inString rHS]

getHorizontalAlignment15 :: (Variant a1)
                         => IDrawings a0
                         -> IO a1
getHorizontalAlignment15 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment15 :: a1
                         -> IDrawings a0
                         -> IO ()
setHorizontalAlignment15 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLockedText22 :: IDrawings a0
                -> IO Bool
getLockedText22 =
  propertyGet "LockedText"
              []
              outBool

setLockedText22 :: Bool
                -> IDrawings a0
                -> IO ()
setLockedText22 rHS =
  propertySet "LockedText"
              [inBool rHS]

getOrientation17 :: (Variant a1)
                 => IDrawings a0
                 -> IO a1
getOrientation17 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation17 :: a1
                 -> IDrawings a0
                 -> IO ()
setOrientation17 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getText27 :: IDrawings a0
          -> IO String
getText27 =
  propertyGet "Text"
              []
              outString

setText26 :: String
          -> IDrawings a0
          -> IO ()
setText26 rHS =
  propertySet "Text"
              [inString rHS]

getVerticalAlignment15 :: (Variant a1)
                       => IDrawings a0
                       -> IO a1
getVerticalAlignment15 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment15 :: a1
                       -> IDrawings a0
                       -> IO ()
setVerticalAlignment15 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder15 :: IDrawings a0
                  -> IO Int32
getReadingOrder15 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder15 :: Int32
                  -> IDrawings a0
                  -> IO ()
setReadingOrder15 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getBorder22 :: IDrawings a0
            -> IO (Border ())
getBorder22 =
  propertyGet "Border"
              []
              outIUnknown

getInterior21 :: IDrawings a0
              -> IO (Interior ())
getInterior21 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow14 :: IDrawings a0
            -> IO Bool
getShadow14 =
  propertyGet "Shadow"
              []
              outBool

setShadow14 :: Bool
            -> IDrawings a0
            -> IO ()
setShadow14 rHS =
  propertySet "Shadow"
              [inBool rHS]

dummy441 :: IDrawings a0
         -> IO ()
dummy441 =
  method0 "_Dummy44"
          []

reshape1 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> Bool
         -> a2
         -> a3
         -> IDrawings a0
         -> IO a1
reshape1 vertex insert3 left top =
  function1 "Reshape"
            [ inInt32 vertex
            , inBool insert3
            , inVariant left
            , inVariant top
            ]
            outVariant

dummy46 :: IDrawings a0
        -> IO ()
dummy46 =
  method0 "_Dummy46"
          []

add39 :: Double
      -> Double
      -> Double
      -> Double
      -> Bool
      -> IDrawings a0
      -> IO (Drawing ())
add39 x1 y1 x2 y2 closed =
  function1 "Add"
            [ inDouble x1
            , inDouble y1
            , inDouble x2
            , inDouble y2
            , inBool closed
            ]
            outIUnknown

getCount50 :: IDrawings a0
           -> IO Int32
getCount50 =
  propertyGet "Count"
              []
              outInt32

group19 :: IDrawings a0
        -> IO (GroupObject ())
group19 =
  function1 "Group"
            []
            outIUnknown

item29 :: a1
       -> IDrawings a0
       -> IO (IDispatch ())
item29 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum26 :: IDrawings a0
          -> IO (IUnknown ())
newEnum26 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IRoutingSlip
-- 
-- --------------------------------------------------
data IRoutingSlip_ a = IRoutingSlip__ 
type IRoutingSlip a = IDispatch (IRoutingSlip_ a)
iidIRoutingSlip :: IID (IRoutingSlip ())
iidIRoutingSlip = mkIID "{000208AA-0001-0000-C000-000000000046}"

getApplication94 :: (Variant a1)
                 => IRoutingSlip a0
                 -> IO a1
getApplication94 =
  propertyGet "Application"
              []
              outVariant

getCreator94 :: IRoutingSlip a0
             -> IO XlCreator
getCreator94 =
  propertyGet "Creator"
              []
              outEnum

getParent109 :: IRoutingSlip a0
             -> IO (IDispatch ())
getParent109 =
  propertyGet "Parent"
              []
              outIDispatch

getDelivery :: IRoutingSlip a0
            -> IO XlRoutingSlipDelivery
getDelivery =
  propertyGet "Delivery"
              []
              outEnum

setDelivery :: XlRoutingSlipDelivery
            -> IRoutingSlip a0
            -> IO ()
setDelivery rHS =
  propertySet "Delivery"
              [inEnum rHS]

getMessage :: (Variant a1)
           => IRoutingSlip a0
           -> IO a1
getMessage =
  propertyGet "Message"
              []
              outVariant

setMessage :: a1
           -> IRoutingSlip a0
           -> IO ()
setMessage rHS =
  propertySet "Message"
              [inVariant rHS]

getRecipients :: (Variant a1, Variant a2)
              => a2
              -> IRoutingSlip a0
              -> IO a1
getRecipients index0 =
  propertyGet "Recipients"
              [inVariant index0]
              outVariant

setRecipients :: (Variant a1)
              => a1
              -> a2
              -> IRoutingSlip a0
              -> IO ()
setRecipients index0 rHS =
  propertySet "Recipients"
              [ inVariant index0
              , inVariant rHS
              ]

reset2 :: (Variant a1)
       => IRoutingSlip a0
       -> IO a1
reset2 =
  function1 "Reset"
            []
            outVariant

getReturnWhenDone :: IRoutingSlip a0
                  -> IO Bool
getReturnWhenDone =
  propertyGet "ReturnWhenDone"
              []
              outBool

setReturnWhenDone :: Bool
                  -> IRoutingSlip a0
                  -> IO ()
setReturnWhenDone rHS =
  propertySet "ReturnWhenDone"
              [inBool rHS]

getStatus :: IRoutingSlip a0
          -> IO XlRoutingSlipStatus
getStatus =
  propertyGet "Status"
              []
              outEnum

getSubject1 :: (Variant a1)
            => IRoutingSlip a0
            -> IO a1
getSubject1 =
  propertyGet "Subject"
              []
              outVariant

setSubject0 :: a1
            -> IRoutingSlip a0
            -> IO ()
setSubject0 rHS =
  propertySet "Subject"
              [inVariant rHS]

getTrackStatus :: IRoutingSlip a0
               -> IO Bool
getTrackStatus =
  propertyGet "TrackStatus"
              []
              outBool

setTrackStatus :: Bool
               -> IRoutingSlip a0
               -> IO ()
setTrackStatus rHS =
  propertySet "TrackStatus"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IOutline
-- 
-- --------------------------------------------------
data IOutline_ a = IOutline__ 
type IOutline a = IDispatch (IOutline_ a)
iidIOutline :: IID (IOutline ())
iidIOutline = mkIID "{000208AB-0001-0000-C000-000000000046}"

getApplication95 :: (Variant a1)
                 => IOutline a0
                 -> IO a1
getApplication95 =
  propertyGet "Application"
              []
              outVariant

getCreator95 :: IOutline a0
             -> IO XlCreator
getCreator95 =
  propertyGet "Creator"
              []
              outEnum

getParent110 :: IOutline a0
             -> IO (IDispatch ())
getParent110 =
  propertyGet "Parent"
              []
              outIDispatch

getAutomaticStyles :: IOutline a0
                   -> IO Bool
getAutomaticStyles =
  propertyGet "AutomaticStyles"
              []
              outBool

setAutomaticStyles :: Bool
                   -> IOutline a0
                   -> IO ()
setAutomaticStyles rHS =
  propertySet "AutomaticStyles"
              [inBool rHS]

showLevels :: (Variant a1, Variant a2, Variant a3)
           => a2
           -> a3
           -> IOutline a0
           -> IO a1
showLevels rowLevels columnLevels =
  function1 "ShowLevels"
            [ inVariant rowLevels
            , inVariant columnLevels
            ]
            outVariant

getSummaryColumn :: IOutline a0
                 -> IO XlSummaryColumn
getSummaryColumn =
  propertyGet "SummaryColumn"
              []
              outEnum

setSummaryColumn :: XlSummaryColumn
                 -> IOutline a0
                 -> IO ()
setSummaryColumn rHS =
  propertySet "SummaryColumn"
              [inEnum rHS]

getSummaryRow :: IOutline a0
              -> IO XlSummaryRow
getSummaryRow =
  propertyGet "SummaryRow"
              []
              outEnum

setSummaryRow :: XlSummaryRow
              -> IOutline a0
              -> IO ()
setSummaryRow rHS =
  propertySet "SummaryRow"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface IModule
-- 
-- --------------------------------------------------
data IModule_ a = IModule__ 
type IModule a = IDispatch (IModule_ a)
iidIModule :: IID (IModule ())
iidIModule = mkIID "{000208AD-0001-0000-C000-000000000046}"

getApplication96 :: (Variant a1)
                 => IModule a0
                 -> IO a1
getApplication96 =
  propertyGet "Application"
              []
              outVariant

getCreator96 :: IModule a0
             -> IO XlCreator
getCreator96 =
  propertyGet "Creator"
              []
              outEnum

getParent111 :: IModule a0
             -> IO (IDispatch ())
getParent111 =
  propertyGet "Parent"
              []
              outIDispatch

activate10 :: Int32
           -> IModule a0
           -> IO ()
activate10 lcid =
  method0 "Activate"
          [inInt32 lcid]

copy44 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> IModule a0
       -> IO ()
copy44 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

delete60 :: Int32
         -> IModule a0
         -> IO ()
delete60 lcid =
  method0 "Delete"
          [inInt32 lcid]

getCodeName5 :: IModule a0
             -> IO String
getCodeName5 =
  propertyGet "CodeName"
              []
              outString

getCodeName6 :: IModule a0
             -> IO String
getCodeName6 =
  propertyGet "_CodeName"
              []
              outString

setCodeName2 :: String
             -> IModule a0
             -> IO ()
setCodeName2 rHS =
  propertySet "_CodeName"
              [inString rHS]

getIndex29 :: Int32
           -> IModule a0
           -> IO Int32
getIndex29 lcid =
  propertyGet "Index"
              [inInt32 lcid]
              outInt32

move4 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> IModule a0
      -> IO ()
move4 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getName34 :: IModule a0
          -> IO String
getName34 =
  propertyGet "Name"
              []
              outString

setName28 :: String
          -> IModule a0
          -> IO ()
setName28 rHS =
  propertySet "Name"
              [inString rHS]

getNext2 :: IModule a0
         -> IO (IDispatch ())
getNext2 =
  propertyGet "Next"
              []
              outIDispatch

getOnDoubleClick2 :: Int32
                  -> IModule a0
                  -> IO String
getOnDoubleClick2 lcid =
  propertyGet "OnDoubleClick"
              [inInt32 lcid]
              outString

setOnDoubleClick2 :: Int32
                  -> String
                  -> IModule a0
                  -> IO ()
setOnDoubleClick2 lcid rHS =
  propertySet "OnDoubleClick"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetActivate3 :: Int32
                    -> IModule a0
                    -> IO String
getOnSheetActivate3 lcid =
  propertyGet "OnSheetActivate"
              [inInt32 lcid]
              outString

setOnSheetActivate3 :: Int32
                    -> String
                    -> IModule a0
                    -> IO ()
setOnSheetActivate3 lcid rHS =
  propertySet "OnSheetActivate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetDeactivate3 :: Int32
                      -> IModule a0
                      -> IO String
getOnSheetDeactivate3 lcid =
  propertyGet "OnSheetDeactivate"
              [inInt32 lcid]
              outString

setOnSheetDeactivate3 :: Int32
                      -> String
                      -> IModule a0
                      -> IO ()
setOnSheetDeactivate3 lcid rHS =
  propertySet "OnSheetDeactivate"
              [ inInt32 lcid
              , inString rHS
              ]

getPageSetup1 :: IModule a0
              -> IO (PageSetup ())
getPageSetup1 =
  propertyGet "PageSetup"
              []
              outIUnknown

getPrevious2 :: IModule a0
             -> IO (IDispatch ())
getPrevious2 =
  propertyGet "Previous"
              []
              outIDispatch

printOut19 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> IModule a0
           -> IO ()
printOut19 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

dummy180 :: IModule a0
         -> IO ()
dummy180 =
  method0 "_Dummy18"
          []

protect5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Int32
         -> IModule a0
         -> IO ()
protect5 password drawingObjects1 contents scenarios0 userInterfaceOnly lcid =
  method0 "_Protect"
          [ inVariant password
          , inVariant drawingObjects1
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          , inInt32 lcid
          ]

getProtectContents1 :: Int32
                    -> IModule a0
                    -> IO Bool
getProtectContents1 lcid =
  propertyGet "ProtectContents"
              [inInt32 lcid]
              outBool

dummy21 :: IModule a0
        -> IO ()
dummy21 =
  method0 "_Dummy21"
          []

getProtectionMode1 :: Int32
                   -> IModule a0
                   -> IO Bool
getProtectionMode1 lcid =
  propertyGet "ProtectionMode"
              [inInt32 lcid]
              outBool

dummy231 :: IModule a0
         -> IO ()
dummy231 =
  method0 "_Dummy23"
          []

saveAs5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> Int32
        -> IModule a0
        -> IO ()
saveAs5 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout lcid =
  method0 "_SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inInt32 lcid
          ]

select45 :: (Variant a1)
         => a1
         -> Int32
         -> IModule a0
         -> IO ()
select45 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

unprotect2 :: (Variant a1)
           => a1
           -> Int32
           -> IModule a0
           -> IO ()
unprotect2 password lcid =
  method0 "Unprotect"
          [ inVariant password
          , inInt32 lcid
          ]

getVisible50 :: Int32
             -> IModule a0
             -> IO XlSheetVisibility
getVisible50 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outEnum

setVisible50 :: Int32
             -> XlSheetVisibility
             -> IModule a0
             -> IO ()
setVisible50 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inEnum rHS
              ]

getShapes1 :: IModule a0
           -> IO (Shapes ())
getShapes1 =
  propertyGet "Shapes"
              []
              outIUnknown

insertFile :: (Variant a1, Variant a3)
           => a2
           -> a3
           -> IModule a0
           -> IO a1
insertFile filename merge2 =
  function1 "InsertFile"
            [ inVariant filename
            , inVariant merge2
            ]
            outVariant

saveAs6 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> IModule a0
        -> IO ()
saveAs6 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout =
  method0 "SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          ]

protect6 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> IModule a0
         -> IO ()
protect6 password drawingObjects1 contents scenarios0 userInterfaceOnly =
  method0 "Protect"
          [ inVariant password
          , inVariant drawingObjects1
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          ]

printOut20 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> IModule a0
           -> IO ()
printOut20 from to copies preview activePrinter printToFile collate =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

printOut21 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> IModule a0
           -> IO ()
printOut21 from to copies preview activePrinter printToFile collate =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

-- --------------------------------------------------
-- 
-- interface IModules
-- 
-- --------------------------------------------------
data IModules_ a = IModules__ 
type IModules a = IDispatch (IModules_ a)
iidIModules :: IID (IModules ())
iidIModules = mkIID "{000208AE-0001-0000-C000-000000000046}"

getApplication97 :: (Variant a1)
                 => IModules a0
                 -> IO a1
getApplication97 =
  propertyGet "Application"
              []
              outVariant

getCreator97 :: IModules a0
             -> IO XlCreator
getCreator97 =
  propertyGet "Creator"
              []
              outEnum

getParent112 :: IModules a0
             -> IO (IDispatch ())
getParent112 =
  propertyGet "Parent"
              []
              outIDispatch

add40 :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> IModules a0
      -> IO (Module ())
add40 before after count0 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count0
            ]
            outIUnknown

copy45 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> IModules a0
       -> IO ()
copy45 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getCount51 :: IModules a0
           -> IO Int32
getCount51 =
  propertyGet "Count"
              []
              outInt32

delete61 :: Int32
         -> IModules a0
         -> IO ()
delete61 lcid =
  method0 "Delete"
          [inInt32 lcid]

dummy74 :: IModules a0
        -> IO ()
dummy74 =
  method0 "_Dummy7"
          []

getItem19 :: a1
          -> IModules a0
          -> IO (IDispatch ())
getItem19 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

move5 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> IModules a0
      -> IO ()
move5 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getNewEnum20 :: IModules a0
             -> IO (IUnknown ())
getNewEnum20 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut22 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> IModules a0
           -> IO ()
printOut22 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

dummy1221 :: IModules a0
          -> IO ()
dummy1221 =
  method0 "_Dummy12"
          []

select46 :: (Variant a1)
         => a1
         -> Int32
         -> IModules a0
         -> IO ()
select46 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

getHPageBreaks2 :: IModules a0
                -> IO (HPageBreaks ())
getHPageBreaks2 =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks2 :: IModules a0
                -> IO (VPageBreaks ())
getVPageBreaks2 =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getVisible51 :: (Variant a1)
             => Int32
             -> IModules a0
             -> IO a1
getVisible51 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outVariant

setVisible51 :: Int32
             -> a1
             -> IModules a0
             -> IO ()
setVisible51 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inVariant rHS
              ]

getDefault43 :: a1
             -> IModules a0
             -> IO (IDispatch ())
getDefault43 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

printOut23 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> IModules a0
           -> IO ()
printOut23 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

printOut24 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Int32
           -> IModules a0
           -> IO ()
printOut24 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas lcid =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          , inInt32 lcid
          ]

-- --------------------------------------------------
-- 
-- interface IDialogSheet
-- 
-- --------------------------------------------------
data IDialogSheet_ a = IDialogSheet__ 
type IDialogSheet a = IDispatch (IDialogSheet_ a)
iidIDialogSheet :: IID (IDialogSheet ())
iidIDialogSheet = mkIID "{000208AF-0001-0000-C000-000000000046}"

getApplication98 :: (Variant a1)
                 => IDialogSheet a0
                 -> IO a1
getApplication98 =
  propertyGet "Application"
              []
              outVariant

getCreator98 :: IDialogSheet a0
             -> IO XlCreator
getCreator98 =
  propertyGet "Creator"
              []
              outEnum

getParent113 :: IDialogSheet a0
             -> IO (IDispatch ())
getParent113 =
  propertyGet "Parent"
              []
              outIDispatch

activate11 :: Int32
           -> IDialogSheet a0
           -> IO ()
activate11 lcid =
  method0 "Activate"
          [inInt32 lcid]

copy46 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> IDialogSheet a0
       -> IO ()
copy46 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

delete62 :: Int32
         -> IDialogSheet a0
         -> IO ()
delete62 lcid =
  method0 "Delete"
          [inInt32 lcid]

getCodeName7 :: IDialogSheet a0
             -> IO String
getCodeName7 =
  propertyGet "CodeName"
              []
              outString

getCodeName8 :: IDialogSheet a0
             -> IO String
getCodeName8 =
  propertyGet "_CodeName"
              []
              outString

setCodeName3 :: String
             -> IDialogSheet a0
             -> IO ()
setCodeName3 rHS =
  propertySet "_CodeName"
              [inString rHS]

getIndex30 :: Int32
           -> IDialogSheet a0
           -> IO Int32
getIndex30 lcid =
  propertyGet "Index"
              [inInt32 lcid]
              outInt32

move6 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> IDialogSheet a0
      -> IO ()
move6 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getName35 :: IDialogSheet a0
          -> IO String
getName35 =
  propertyGet "Name"
              []
              outString

setName29 :: String
          -> IDialogSheet a0
          -> IO ()
setName29 rHS =
  propertySet "Name"
              [inString rHS]

getNext3 :: IDialogSheet a0
         -> IO (IDispatch ())
getNext3 =
  propertyGet "Next"
              []
              outIDispatch

getOnDoubleClick3 :: Int32
                  -> IDialogSheet a0
                  -> IO String
getOnDoubleClick3 lcid =
  propertyGet "OnDoubleClick"
              [inInt32 lcid]
              outString

setOnDoubleClick3 :: Int32
                  -> String
                  -> IDialogSheet a0
                  -> IO ()
setOnDoubleClick3 lcid rHS =
  propertySet "OnDoubleClick"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetActivate4 :: Int32
                    -> IDialogSheet a0
                    -> IO String
getOnSheetActivate4 lcid =
  propertyGet "OnSheetActivate"
              [inInt32 lcid]
              outString

setOnSheetActivate4 :: Int32
                    -> String
                    -> IDialogSheet a0
                    -> IO ()
setOnSheetActivate4 lcid rHS =
  propertySet "OnSheetActivate"
              [ inInt32 lcid
              , inString rHS
              ]

getOnSheetDeactivate4 :: Int32
                      -> IDialogSheet a0
                      -> IO String
getOnSheetDeactivate4 lcid =
  propertyGet "OnSheetDeactivate"
              [inInt32 lcid]
              outString

setOnSheetDeactivate4 :: Int32
                      -> String
                      -> IDialogSheet a0
                      -> IO ()
setOnSheetDeactivate4 lcid rHS =
  propertySet "OnSheetDeactivate"
              [ inInt32 lcid
              , inString rHS
              ]

getPageSetup2 :: IDialogSheet a0
              -> IO (PageSetup ())
getPageSetup2 =
  propertyGet "PageSetup"
              []
              outIUnknown

getPrevious3 :: IDialogSheet a0
             -> IO (IDispatch ())
getPrevious3 =
  propertyGet "Previous"
              []
              outIDispatch

printOut25 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> IDialogSheet a0
           -> IO ()
printOut25 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview6 :: (Variant a1)
              => a1
              -> Int32
              -> IDialogSheet a0
              -> IO ()
printPreview6 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

protect7 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Int32
         -> IDialogSheet a0
         -> IO ()
protect7 password drawingObjects1 contents scenarios0 userInterfaceOnly lcid =
  method0 "_Protect"
          [ inVariant password
          , inVariant drawingObjects1
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          , inInt32 lcid
          ]

getProtectContents2 :: Int32
                    -> IDialogSheet a0
                    -> IO Bool
getProtectContents2 lcid =
  propertyGet "ProtectContents"
              [inInt32 lcid]
              outBool

getProtectDrawingObjects1 :: Int32
                          -> IDialogSheet a0
                          -> IO Bool
getProtectDrawingObjects1 lcid =
  propertyGet "ProtectDrawingObjects"
              [inInt32 lcid]
              outBool

getProtectionMode2 :: Int32
                   -> IDialogSheet a0
                   -> IO Bool
getProtectionMode2 lcid =
  propertyGet "ProtectionMode"
              [inInt32 lcid]
              outBool

getProtectScenarios0 :: Int32
                     -> IDialogSheet a0
                     -> IO Bool
getProtectScenarios0 lcid =
  propertyGet "ProtectScenarios"
              [inInt32 lcid]
              outBool

saveAs7 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> Int32
        -> IDialogSheet a0
        -> IO ()
saveAs7 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout lcid =
  method0 "_SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inInt32 lcid
          ]

select47 :: (Variant a1)
         => a1
         -> Int32
         -> IDialogSheet a0
         -> IO ()
select47 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

unprotect3 :: (Variant a1)
           => a1
           -> Int32
           -> IDialogSheet a0
           -> IO ()
unprotect3 password lcid =
  method0 "Unprotect"
          [ inVariant password
          , inInt32 lcid
          ]

getVisible52 :: Int32
             -> IDialogSheet a0
             -> IO XlSheetVisibility
getVisible52 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outEnum

setVisible52 :: Int32
             -> XlSheetVisibility
             -> IDialogSheet a0
             -> IO ()
setVisible52 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inEnum rHS
              ]

getShapes2 :: IDialogSheet a0
           -> IO (Shapes ())
getShapes2 =
  propertyGet "Shapes"
              []
              outIUnknown

dummy29 :: IDialogSheet a0
        -> IO ()
dummy29 =
  method0 "_Dummy29"
          []

arcs1 :: (Variant a1)
      => a1
      -> Int32
      -> IDialogSheet a0
      -> IO (IDispatch ())
arcs1 index0 lcid =
  function1 "Arcs"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy3110 :: IDialogSheet a0
          -> IO ()
dummy3110 =
  method0 "_Dummy31"
          []

dummy324 :: IDialogSheet a0
         -> IO ()
dummy324 =
  method0 "_Dummy32"
          []

buttons1 :: (Variant a1)
         => a1
         -> Int32
         -> IDialogSheet a0
         -> IO (IDispatch ())
buttons1 index0 lcid =
  function1 "Buttons"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy342 :: IDialogSheet a0
         -> IO ()
dummy342 =
  method0 "_Dummy34"
          []

getEnableCalculation0 :: IDialogSheet a0
                      -> IO Bool
getEnableCalculation0 =
  propertyGet "EnableCalculation"
              []
              outBool

setEnableCalculation0 :: Bool
                      -> IDialogSheet a0
                      -> IO ()
setEnableCalculation0 rHS =
  propertySet "EnableCalculation"
              [inBool rHS]

dummy365 :: IDialogSheet a0
         -> IO ()
dummy365 =
  method0 "_Dummy36"
          []

chartObjects1 :: (Variant a1)
              => a1
              -> Int32
              -> IDialogSheet a0
              -> IO (IDispatch ())
chartObjects1 index0 lcid =
  function1 "ChartObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

checkBoxes1 :: (Variant a1)
            => a1
            -> Int32
            -> IDialogSheet a0
            -> IO (IDispatch ())
checkBoxes1 index0 lcid =
  function1 "CheckBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

checkSpelling30 :: (Variant a1, Variant a2, Variant a3, Variant a4)
                => a1
                -> a2
                -> a3
                -> a4
                -> Int32
                -> IDialogSheet a0
                -> IO ()
checkSpelling30 customDictionary ignoreUppercase alwaysSuggest spellLang lcid =
  method0 "CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          , inInt32 lcid
          ]

dummy401 :: IDialogSheet a0
         -> IO ()
dummy401 =
  method0 "_Dummy40"
          []

dummy412 :: IDialogSheet a0
         -> IO ()
dummy412 =
  method0 "_Dummy41"
          []

dummy421 :: IDialogSheet a0
         -> IO ()
dummy421 =
  method0 "_Dummy42"
          []

dummy433 :: IDialogSheet a0
         -> IO ()
dummy433 =
  method0 "_Dummy43"
          []

dummy442 :: IDialogSheet a0
         -> IO ()
dummy442 =
  method0 "_Dummy44"
          []

dummy451 :: IDialogSheet a0
         -> IO ()
dummy451 =
  method0 "_Dummy45"
          []

getDisplayAutomaticPageBreaks0 :: Int32
                               -> IDialogSheet a0
                               -> IO Bool
getDisplayAutomaticPageBreaks0 lcid =
  propertyGet "DisplayAutomaticPageBreaks"
              [inInt32 lcid]
              outBool

setDisplayAutomaticPageBreaks0 :: Int32
                               -> Bool
                               -> IDialogSheet a0
                               -> IO ()
setDisplayAutomaticPageBreaks0 lcid rHS =
  propertySet "DisplayAutomaticPageBreaks"
              [ inInt32 lcid
              , inBool rHS
              ]

drawings1 :: (Variant a1)
          => a1
          -> Int32
          -> IDialogSheet a0
          -> IO (IDispatch ())
drawings1 index0 lcid =
  function1 "Drawings"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

drawingObjects1 :: (Variant a1)
                => a1
                -> Int32
                -> IDialogSheet a0
                -> IO (IDispatch ())
drawingObjects1 index0 lcid =
  function1 "DrawingObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dropDowns1 :: (Variant a1)
           => a1
           -> Int32
           -> IDialogSheet a0
           -> IO (IDispatch ())
dropDowns1 index0 lcid =
  function1 "DropDowns"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getEnableAutoFilter0 :: Int32
                     -> IDialogSheet a0
                     -> IO Bool
getEnableAutoFilter0 lcid =
  propertyGet "EnableAutoFilter"
              [inInt32 lcid]
              outBool

setEnableAutoFilter0 :: Int32
                     -> Bool
                     -> IDialogSheet a0
                     -> IO ()
setEnableAutoFilter0 lcid rHS =
  propertySet "EnableAutoFilter"
              [ inInt32 lcid
              , inBool rHS
              ]

getEnableSelection0 :: IDialogSheet a0
                    -> IO XlEnableSelection
getEnableSelection0 =
  propertyGet "EnableSelection"
              []
              outEnum

setEnableSelection0 :: XlEnableSelection
                    -> IDialogSheet a0
                    -> IO ()
setEnableSelection0 rHS =
  propertySet "EnableSelection"
              [inEnum rHS]

getEnableOutlining0 :: Int32
                    -> IDialogSheet a0
                    -> IO Bool
getEnableOutlining0 lcid =
  propertyGet "EnableOutlining"
              [inInt32 lcid]
              outBool

setEnableOutlining0 :: Int32
                    -> Bool
                    -> IDialogSheet a0
                    -> IO ()
setEnableOutlining0 lcid rHS =
  propertySet "EnableOutlining"
              [ inInt32 lcid
              , inBool rHS
              ]

getEnablePivotTable0 :: Int32
                     -> IDialogSheet a0
                     -> IO Bool
getEnablePivotTable0 lcid =
  propertyGet "EnablePivotTable"
              [inInt32 lcid]
              outBool

setEnablePivotTable0 :: Int32
                     -> Bool
                     -> IDialogSheet a0
                     -> IO ()
setEnablePivotTable0 lcid rHS =
  propertySet "EnablePivotTable"
              [ inInt32 lcid
              , inBool rHS
              ]

evaluate7 :: (Variant a1)
          => a2
          -> Int32
          -> IDialogSheet a0
          -> IO a1
evaluate7 name lcid =
  function1 "Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

evaluate8 :: (Variant a1)
          => a2
          -> Int32
          -> IDialogSheet a0
          -> IO a1
evaluate8 name lcid =
  function1 "_Evaluate"
            [ inVariant name
            , inInt32 lcid
            ]
            outVariant

dummy562 :: IDialogSheet a0
         -> IO ()
dummy562 =
  method0 "_Dummy56"
          []

resetAllPageBreaks0 :: IDialogSheet a0
                    -> IO ()
resetAllPageBreaks0 =
  method0 "ResetAllPageBreaks"
          []

groupBoxes1 :: (Variant a1)
            => a1
            -> Int32
            -> IDialogSheet a0
            -> IO (IDispatch ())
groupBoxes1 index0 lcid =
  function1 "GroupBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

groupObjects1 :: (Variant a1)
              => a1
              -> Int32
              -> IDialogSheet a0
              -> IO (IDispatch ())
groupObjects1 index0 lcid =
  function1 "GroupObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

labels1 :: (Variant a1)
        => a1
        -> Int32
        -> IDialogSheet a0
        -> IO (IDispatch ())
labels1 index0 lcid =
  function1 "Labels"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

lines1 :: (Variant a1)
       => a1
       -> Int32
       -> IDialogSheet a0
       -> IO (IDispatch ())
lines1 index0 lcid =
  function1 "Lines"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

listBoxes1 :: (Variant a1)
           => a1
           -> Int32
           -> IDialogSheet a0
           -> IO (IDispatch ())
listBoxes1 index0 lcid =
  function1 "ListBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

getNames3 :: IDialogSheet a0
          -> IO (Names ())
getNames3 =
  propertyGet "Names"
              []
              outIUnknown

oLEObjects1 :: (Variant a1)
            => a1
            -> Int32
            -> IDialogSheet a0
            -> IO (IDispatch ())
oLEObjects1 index0 lcid =
  function1 "OLEObjects"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy651 :: IDialogSheet a0
         -> IO ()
dummy651 =
  method0 "_Dummy65"
          []

dummy661 :: IDialogSheet a0
         -> IO ()
dummy661 =
  method0 "_Dummy66"
          []

dummy671 :: IDialogSheet a0
         -> IO ()
dummy671 =
  method0 "_Dummy67"
          []

optionButtons1 :: (Variant a1)
               => a1
               -> Int32
               -> IDialogSheet a0
               -> IO (IDispatch ())
optionButtons1 index0 lcid =
  function1 "OptionButtons"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy69 :: IDialogSheet a0
        -> IO ()
dummy69 =
  method0 "_Dummy69"
          []

ovals1 :: (Variant a1)
       => a1
       -> Int32
       -> IDialogSheet a0
       -> IO (IDispatch ())
ovals1 index0 lcid =
  function1 "Ovals"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

paste2 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> IDialogSheet a0
       -> IO ()
paste2 destination link lcid =
  method0 "Paste"
          [ inVariant destination
          , inVariant link
          , inInt32 lcid
          ]

pasteSpecial3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> Int32
              -> IDialogSheet a0
              -> IO ()
pasteSpecial3 format0 link displayAsIcon iconFileName iconIndex iconLabel lcid =
  method0 "_PasteSpecial"
          [ inVariant format0
          , inVariant link
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          , inInt32 lcid
          ]

pictures1 :: (Variant a1)
          => a1
          -> Int32
          -> IDialogSheet a0
          -> IO (IDispatch ())
pictures1 index0 lcid =
  function1 "Pictures"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy740 :: IDialogSheet a0
         -> IO ()
dummy740 =
  method0 "_Dummy74"
          []

dummy751 :: IDialogSheet a0
         -> IO ()
dummy751 =
  method0 "_Dummy75"
          []

dummy76 :: IDialogSheet a0
        -> IO ()
dummy76 =
  method0 "_Dummy76"
          []

rectangles1 :: (Variant a1)
            => a1
            -> Int32
            -> IDialogSheet a0
            -> IO (IDispatch ())
rectangles1 index0 lcid =
  function1 "Rectangles"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy78 :: IDialogSheet a0
        -> IO ()
dummy78 =
  method0 "_Dummy78"
          []

dummy79 :: IDialogSheet a0
        -> IO ()
dummy79 =
  method0 "_Dummy79"
          []

getScrollArea0 :: IDialogSheet a0
               -> IO String
getScrollArea0 =
  propertyGet "ScrollArea"
              []
              outString

setScrollArea0 :: String
               -> IDialogSheet a0
               -> IO ()
setScrollArea0 rHS =
  propertySet "ScrollArea"
              [inString rHS]

scrollBars1 :: (Variant a1)
            => a1
            -> Int32
            -> IDialogSheet a0
            -> IO (IDispatch ())
scrollBars1 index0 lcid =
  function1 "ScrollBars"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy82 :: IDialogSheet a0
        -> IO ()
dummy82 =
  method0 "_Dummy82"
          []

dummy83 :: IDialogSheet a0
        -> IO ()
dummy83 =
  method0 "_Dummy83"
          []

spinners1 :: (Variant a1)
          => a1
          -> Int32
          -> IDialogSheet a0
          -> IO (IDispatch ())
spinners1 index0 lcid =
  function1 "Spinners"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy85 :: IDialogSheet a0
        -> IO ()
dummy85 =
  method0 "_Dummy85"
          []

dummy86 :: IDialogSheet a0
        -> IO ()
dummy86 =
  method0 "_Dummy86"
          []

textBoxes1 :: (Variant a1)
           => a1
           -> Int32
           -> IDialogSheet a0
           -> IO (IDispatch ())
textBoxes1 index0 lcid =
  function1 "TextBoxes"
            [ inVariant index0
            , inInt32 lcid
            ]
            outIDispatch

dummy88 :: IDialogSheet a0
        -> IO ()
dummy88 =
  method0 "_Dummy88"
          []

dummy89 :: IDialogSheet a0
        -> IO ()
dummy89 =
  method0 "_Dummy89"
          []

dummy900 :: IDialogSheet a0
         -> IO ()
dummy900 =
  method0 "_Dummy90"
          []

getHPageBreaks3 :: IDialogSheet a0
                -> IO (HPageBreaks ())
getHPageBreaks3 =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks3 :: IDialogSheet a0
                -> IO (VPageBreaks ())
getVPageBreaks3 =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getQueryTables0 :: IDialogSheet a0
                -> IO (QueryTables ())
getQueryTables0 =
  propertyGet "QueryTables"
              []
              outIUnknown

getDisplayPageBreaks0 :: IDialogSheet a0
                      -> IO Bool
getDisplayPageBreaks0 =
  propertyGet "DisplayPageBreaks"
              []
              outBool

setDisplayPageBreaks0 :: Bool
                      -> IDialogSheet a0
                      -> IO ()
setDisplayPageBreaks0 rHS =
  propertySet "DisplayPageBreaks"
              [inBool rHS]

getComments2 :: IDialogSheet a0
             -> IO (Comments ())
getComments2 =
  propertyGet "Comments"
              []
              outIUnknown

getHyperlinks2 :: IDialogSheet a0
               -> IO (Hyperlinks ())
getHyperlinks2 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

clearCircles0 :: IDialogSheet a0
              -> IO ()
clearCircles0 =
  method0 "ClearCircles"
          []

circleInvalid0 :: IDialogSheet a0
               -> IO ()
circleInvalid0 =
  method0 "CircleInvalid"
          []

getDisplayRightToLeft3 :: Int32
                       -> IDialogSheet a0
                       -> IO Int32
getDisplayRightToLeft3 lcid =
  propertyGet "_DisplayRightToLeft"
              [inInt32 lcid]
              outInt32

setDisplayRightToLeft3 :: Int32
                       -> Int32
                       -> IDialogSheet a0
                       -> IO ()
setDisplayRightToLeft3 lcid rHS =
  propertySet "_DisplayRightToLeft"
              [ inInt32 lcid
              , inInt32 rHS
              ]

getAutoFilter0 :: IDialogSheet a0
               -> IO (AutoFilter ())
getAutoFilter0 =
  propertyGet "AutoFilter"
              []
              outIUnknown

getDisplayRightToLeft4 :: Int32
                       -> IDialogSheet a0
                       -> IO Bool
getDisplayRightToLeft4 lcid =
  propertyGet "DisplayRightToLeft"
              [inInt32 lcid]
              outBool

setDisplayRightToLeft4 :: Int32
                       -> Bool
                       -> IDialogSheet a0
                       -> IO ()
setDisplayRightToLeft4 lcid rHS =
  propertySet "DisplayRightToLeft"
              [ inInt32 lcid
              , inBool rHS
              ]

getScripts1 :: (Variant a1)
            => IDialogSheet a0
            -> IO a1
getScripts1 =
  propertyGet "Scripts"
              []
              outVariant

printOut26 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> IDialogSheet a0
           -> IO ()
printOut26 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

checkSpelling31 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> Int32
                -> IDialogSheet a0
                -> IO ()
checkSpelling31 customDictionary ignoreUppercase alwaysSuggest spellLang ignoreFinalYaa spellScript lcid =
  method0 "_CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          , inVariant ignoreFinalYaa
          , inVariant spellScript
          , inInt32 lcid
          ]

getTab1 :: IDialogSheet a0
        -> IO (Tab ())
getTab1 =
  propertyGet "Tab"
              []
              outIUnknown

getMailEnvelope1 :: (Variant a1)
                 => IDialogSheet a0
                 -> IO a1
getMailEnvelope1 =
  propertyGet "MailEnvelope"
              []
              outVariant

saveAs8 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> IDialogSheet a0
        -> IO ()
saveAs8 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout local =
  method0 "SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inVariant local
          ]

getCustomProperties0 :: IDialogSheet a0
                     -> IO (CustomProperties ())
getCustomProperties0 =
  propertyGet "CustomProperties"
              []
              outIUnknown

getSmartTags1 :: IDialogSheet a0
              -> IO (SmartTags ())
getSmartTags1 =
  propertyGet "SmartTags"
              []
              outIUnknown

getProtection1 :: IDialogSheet a0
               -> IO (Protection ())
getProtection1 =
  propertyGet "Protection"
              []
              outIUnknown

pasteSpecial4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> Int32
              -> IDialogSheet a0
              -> IO ()
pasteSpecial4 format0 link displayAsIcon iconFileName iconIndex iconLabel noHTMLFormatting lcid =
  method0 "PasteSpecial"
          [ inVariant format0
          , inVariant link
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          , inVariant noHTMLFormatting
          , inInt32 lcid
          ]

protect8 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> IDialogSheet a0
         -> IO ()
protect8 password drawingObjects2 contents scenarios0 userInterfaceOnly allowFormattingCells allowFormattingColumns allowFormattingRows allowInsertingColumns allowInsertingRows allowInsertingHyperlinks allowDeletingColumns allowDeletingRows allowSorting allowFiltering allowUsingPivotTables =
  method0 "Protect"
          [ inVariant password
          , inVariant drawingObjects2
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          , inVariant allowFormattingCells
          , inVariant allowFormattingColumns
          , inVariant allowFormattingRows
          , inVariant allowInsertingColumns
          , inVariant allowInsertingRows
          , inVariant allowInsertingHyperlinks
          , inVariant allowDeletingColumns
          , inVariant allowDeletingRows
          , inVariant allowSorting
          , inVariant allowFiltering
          , inVariant allowUsingPivotTables
          ]

dummy113 :: IDialogSheet a0
         -> IO ()
dummy113 =
  method0 "_Dummy113"
          []

dummy114 :: IDialogSheet a0
         -> IO ()
dummy114 =
  method0 "_Dummy114"
          []

dummy115 :: IDialogSheet a0
         -> IO ()
dummy115 =
  method0 "_Dummy115"
          []

printOut27 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> IDialogSheet a0
           -> IO ()
printOut27 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

getEnableFormatConditionsCalculation0 :: IDialogSheet a0
                                      -> IO Bool
getEnableFormatConditionsCalculation0 =
  propertyGet "EnableFormatConditionsCalculation"
              []
              outBool

setEnableFormatConditionsCalculation0 :: Bool
                                      -> IDialogSheet a0
                                      -> IO ()
setEnableFormatConditionsCalculation0 rHS =
  propertySet "EnableFormatConditionsCalculation"
              [inBool rHS]

getSort0 :: IDialogSheet a0
         -> IO (Sort ())
getSort0 =
  propertyGet "Sort"
              []
              outIUnknown

exportAsFixedFormat3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                     => XlFixedFormatType
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> IDialogSheet a0
                     -> IO ()
exportAsFixedFormat3 type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

getDefaultButton2 :: (Variant a1)
                  => IDialogSheet a0
                  -> IO a1
getDefaultButton2 =
  propertyGet "DefaultButton"
              []
              outVariant

setDefaultButton2 :: a1
                  -> IDialogSheet a0
                  -> IO ()
setDefaultButton2 rHS =
  propertySet "DefaultButton"
              [inVariant rHS]

getDialogFrame :: IDialogSheet a0
               -> IO (DialogFrame ())
getDialogFrame =
  propertyGet "DialogFrame"
              []
              outIUnknown

editBoxes :: (Variant a1)
          => a1
          -> IDialogSheet a0
          -> IO (IDispatch ())
editBoxes index0 =
  function1 "EditBoxes"
            [inVariant index0]
            outIDispatch

getFocus :: (Variant a1)
         => IDialogSheet a0
         -> IO a1
getFocus =
  propertyGet "Focus"
              []
              outVariant

setFocus :: a1
         -> IDialogSheet a0
         -> IO ()
setFocus rHS =
  propertySet "Focus"
              [inVariant rHS]

hide :: (Variant a1)
     => a1
     -> IDialogSheet a0
     -> IO Bool
hide cancel =
  function1 "Hide"
            [inVariant cancel]
            outBool

show2 :: IDialogSheet a0
      -> IO Bool
show2 =
  function1 "Show"
            []
            outBool

-- --------------------------------------------------
-- 
-- interface IDialogSheets
-- 
-- --------------------------------------------------
data IDialogSheets_ a = IDialogSheets__ 
type IDialogSheets a = IDispatch (IDialogSheets_ a)
iidIDialogSheets :: IID (IDialogSheets ())
iidIDialogSheets = mkIID "{000208B0-0001-0000-C000-000000000046}"

getApplication99 :: (Variant a1)
                 => IDialogSheets a0
                 -> IO a1
getApplication99 =
  propertyGet "Application"
              []
              outVariant

getCreator99 :: IDialogSheets a0
             -> IO XlCreator
getCreator99 =
  propertyGet "Creator"
              []
              outEnum

getParent114 :: IDialogSheets a0
             -> IO (IDispatch ())
getParent114 =
  propertyGet "Parent"
              []
              outIDispatch

add41 :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> IDialogSheets a0
      -> IO (DialogSheet ())
add41 before after count0 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count0
            ]
            outIUnknown

copy47 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> IDialogSheets a0
       -> IO ()
copy47 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getCount52 :: IDialogSheets a0
           -> IO Int32
getCount52 =
  propertyGet "Count"
              []
              outInt32

delete63 :: Int32
         -> IDialogSheets a0
         -> IO ()
delete63 lcid =
  method0 "Delete"
          [inInt32 lcid]

dummy710 :: IDialogSheets a0
         -> IO ()
dummy710 =
  method0 "_Dummy7"
          []

getItem20 :: a1
          -> IDialogSheets a0
          -> IO (IDispatch ())
getItem20 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

move7 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> IDialogSheets a0
      -> IO ()
move7 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getNewEnum21 :: IDialogSheets a0
             -> IO (IUnknown ())
getNewEnum21 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut28 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> IDialogSheets a0
           -> IO ()
printOut28 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview7 :: (Variant a1)
              => a1
              -> Int32
              -> IDialogSheets a0
              -> IO ()
printPreview7 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

select48 :: (Variant a1)
         => a1
         -> Int32
         -> IDialogSheets a0
         -> IO ()
select48 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

getHPageBreaks4 :: IDialogSheets a0
                -> IO (HPageBreaks ())
getHPageBreaks4 =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks4 :: IDialogSheets a0
                -> IO (VPageBreaks ())
getVPageBreaks4 =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getVisible53 :: (Variant a1)
             => Int32
             -> IDialogSheets a0
             -> IO a1
getVisible53 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outVariant

setVisible53 :: Int32
             -> a1
             -> IDialogSheets a0
             -> IO ()
setVisible53 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inVariant rHS
              ]

getDefault44 :: a1
             -> IDialogSheets a0
             -> IO (IDispatch ())
getDefault44 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

printOut29 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> IDialogSheets a0
           -> IO ()
printOut29 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

printOut30 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> IDialogSheets a0
           -> IO ()
printOut30 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

-- --------------------------------------------------
-- 
-- interface IWorksheets
-- 
-- --------------------------------------------------
data IWorksheets_ a = IWorksheets__ 
type IWorksheets a = IDispatch (IWorksheets_ a)
iidIWorksheets :: IID (IWorksheets ())
iidIWorksheets = mkIID "{000208B1-0001-0000-C000-000000000046}"

getApplication100 :: (Variant a1)
                  => IWorksheets a0
                  -> IO a1
getApplication100 =
  propertyGet "Application"
              []
              outVariant

getCreator100 :: IWorksheets a0
              -> IO XlCreator
getCreator100 =
  propertyGet "Creator"
              []
              outEnum

getParent115 :: IWorksheets a0
             -> IO (IDispatch ())
getParent115 =
  propertyGet "Parent"
              []
              outIDispatch

add42 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => a1
      -> a2
      -> a3
      -> a4
      -> Int32
      -> IWorksheets a0
      -> IO (IDispatch ())
add42 before after count0 type0 lcid =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count0
            , inVariant type0
            , inInt32 lcid
            ]
            outIDispatch

copy48 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> IWorksheets a0
       -> IO ()
copy48 before after lcid =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getCount53 :: IWorksheets a0
           -> IO Int32
getCount53 =
  propertyGet "Count"
              []
              outInt32

delete64 :: Int32
         -> IWorksheets a0
         -> IO ()
delete64 lcid =
  method0 "Delete"
          [inInt32 lcid]

fillAcrossSheets0 :: (Variant a2)
                  => Range a1
                  -> a2
                  -> Int32
                  -> IWorksheets a0
                  -> IO ()
fillAcrossSheets0 range type0 lcid =
  method0 "FillAcrossSheets"
          [ inIUnknown range
          , inDefaultValue (inInt32 (-4104)) inVariant type0
          , inInt32 lcid
          ]

getItem21 :: a1
          -> IWorksheets a0
          -> IO (IDispatch ())
getItem21 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

move8 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Int32
      -> IWorksheets a0
      -> IO ()
move8 before after lcid =
  method0 "Move"
          [ inVariant before
          , inVariant after
          , inInt32 lcid
          ]

getNewEnum22 :: IWorksheets a0
             -> IO (IUnknown ())
getNewEnum22 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut31 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Int32
           -> IWorksheets a0
           -> IO ()
printOut31 from to copies preview activePrinter printToFile collate lcid =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inInt32 lcid
          ]

printPreview8 :: (Variant a1)
              => a1
              -> Int32
              -> IWorksheets a0
              -> IO ()
printPreview8 enableChanges lcid =
  method0 "PrintPreview"
          [ inVariant enableChanges
          , inInt32 lcid
          ]

select49 :: (Variant a1)
         => a1
         -> Int32
         -> IWorksheets a0
         -> IO ()
select49 replace1 lcid =
  method0 "Select"
          [ inVariant replace1
          , inInt32 lcid
          ]

getHPageBreaks5 :: IWorksheets a0
                -> IO (HPageBreaks ())
getHPageBreaks5 =
  propertyGet "HPageBreaks"
              []
              outIUnknown

getVPageBreaks5 :: IWorksheets a0
                -> IO (VPageBreaks ())
getVPageBreaks5 =
  propertyGet "VPageBreaks"
              []
              outIUnknown

getVisible54 :: (Variant a1)
             => Int32
             -> IWorksheets a0
             -> IO a1
getVisible54 lcid =
  propertyGet "Visible"
              [inInt32 lcid]
              outVariant

setVisible54 :: Int32
             -> a1
             -> IWorksheets a0
             -> IO ()
setVisible54 lcid rHS =
  propertySet "Visible"
              [ inInt32 lcid
              , inVariant rHS
              ]

getDefault45 :: a1
             -> IWorksheets a0
             -> IO (IDispatch ())
getDefault45 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

printOut32 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Int32
           -> IWorksheets a0
           -> IO ()
printOut32 from to copies preview activePrinter printToFile collate prToFileName lcid =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inInt32 lcid
          ]

printOut33 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Int32
           -> IWorksheets a0
           -> IO ()
printOut33 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas lcid =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          , inInt32 lcid
          ]

-- --------------------------------------------------
-- 
-- interface IPageSetup
-- 
-- --------------------------------------------------
data IPageSetup_ a = IPageSetup__ 
type IPageSetup a = IDispatch (IPageSetup_ a)
iidIPageSetup :: IID (IPageSetup ())
iidIPageSetup = mkIID "{000208B4-0001-0000-C000-000000000046}"

getApplication101 :: (Variant a1)
                  => IPageSetup a0
                  -> IO a1
getApplication101 =
  propertyGet "Application"
              []
              outVariant

getCreator101 :: IPageSetup a0
              -> IO XlCreator
getCreator101 =
  propertyGet "Creator"
              []
              outEnum

getParent116 :: IPageSetup a0
             -> IO (IDispatch ())
getParent116 =
  propertyGet "Parent"
              []
              outIDispatch

getBlackAndWhite :: IPageSetup a0
                 -> IO Bool
getBlackAndWhite =
  propertyGet "BlackAndWhite"
              []
              outBool

setBlackAndWhite :: Bool
                 -> IPageSetup a0
                 -> IO ()
setBlackAndWhite rHS =
  propertySet "BlackAndWhite"
              [inBool rHS]

getBottomMargin :: IPageSetup a0
                -> IO Double
getBottomMargin =
  propertyGet "BottomMargin"
              []
              outDouble

setBottomMargin :: Double
                -> IPageSetup a0
                -> IO ()
setBottomMargin rHS =
  propertySet "BottomMargin"
              [inDouble rHS]

getCenterFooter :: IPageSetup a0
                -> IO String
getCenterFooter =
  propertyGet "CenterFooter"
              []
              outString

setCenterFooter :: String
                -> IPageSetup a0
                -> IO ()
setCenterFooter rHS =
  propertySet "CenterFooter"
              [inString rHS]

getCenterHeader :: IPageSetup a0
                -> IO String
getCenterHeader =
  propertyGet "CenterHeader"
              []
              outString

setCenterHeader :: String
                -> IPageSetup a0
                -> IO ()
setCenterHeader rHS =
  propertySet "CenterHeader"
              [inString rHS]

getCenterHorizontally :: IPageSetup a0
                      -> IO Bool
getCenterHorizontally =
  propertyGet "CenterHorizontally"
              []
              outBool

setCenterHorizontally :: Bool
                      -> IPageSetup a0
                      -> IO ()
setCenterHorizontally rHS =
  propertySet "CenterHorizontally"
              [inBool rHS]

getCenterVertically :: IPageSetup a0
                    -> IO Bool
getCenterVertically =
  propertyGet "CenterVertically"
              []
              outBool

setCenterVertically :: Bool
                    -> IPageSetup a0
                    -> IO ()
setCenterVertically rHS =
  propertySet "CenterVertically"
              [inBool rHS]

getChartSize :: IPageSetup a0
             -> IO XlObjectSize
getChartSize =
  propertyGet "ChartSize"
              []
              outEnum

setChartSize :: XlObjectSize
             -> IPageSetup a0
             -> IO ()
setChartSize rHS =
  propertySet "ChartSize"
              [inEnum rHS]

getDraft :: IPageSetup a0
         -> IO Bool
getDraft =
  propertyGet "Draft"
              []
              outBool

setDraft :: Bool
         -> IPageSetup a0
         -> IO ()
setDraft rHS =
  propertySet "Draft"
              [inBool rHS]

getFirstPageNumber :: IPageSetup a0
                   -> IO Int32
getFirstPageNumber =
  propertyGet "FirstPageNumber"
              []
              outInt32

setFirstPageNumber :: Int32
                   -> IPageSetup a0
                   -> IO ()
setFirstPageNumber rHS =
  propertySet "FirstPageNumber"
              [inInt32 rHS]

getFitToPagesTall :: (Variant a1)
                  => IPageSetup a0
                  -> IO a1
getFitToPagesTall =
  propertyGet "FitToPagesTall"
              []
              outVariant

setFitToPagesTall :: a1
                  -> IPageSetup a0
                  -> IO ()
setFitToPagesTall rHS =
  propertySet "FitToPagesTall"
              [inVariant rHS]

getFitToPagesWide :: (Variant a1)
                  => IPageSetup a0
                  -> IO a1
getFitToPagesWide =
  propertyGet "FitToPagesWide"
              []
              outVariant

setFitToPagesWide :: a1
                  -> IPageSetup a0
                  -> IO ()
setFitToPagesWide rHS =
  propertySet "FitToPagesWide"
              [inVariant rHS]

getFooterMargin :: IPageSetup a0
                -> IO Double
getFooterMargin =
  propertyGet "FooterMargin"
              []
              outDouble

setFooterMargin :: Double
                -> IPageSetup a0
                -> IO ()
setFooterMargin rHS =
  propertySet "FooterMargin"
              [inDouble rHS]

getHeaderMargin :: IPageSetup a0
                -> IO Double
getHeaderMargin =
  propertyGet "HeaderMargin"
              []
              outDouble

setHeaderMargin :: Double
                -> IPageSetup a0
                -> IO ()
setHeaderMargin rHS =
  propertySet "HeaderMargin"
              [inDouble rHS]

getLeftFooter :: IPageSetup a0
              -> IO String
getLeftFooter =
  propertyGet "LeftFooter"
              []
              outString

setLeftFooter :: String
              -> IPageSetup a0
              -> IO ()
setLeftFooter rHS =
  propertySet "LeftFooter"
              [inString rHS]

getLeftHeader :: IPageSetup a0
              -> IO String
getLeftHeader =
  propertyGet "LeftHeader"
              []
              outString

setLeftHeader :: String
              -> IPageSetup a0
              -> IO ()
setLeftHeader rHS =
  propertySet "LeftHeader"
              [inString rHS]

getLeftMargin :: IPageSetup a0
              -> IO Double
getLeftMargin =
  propertyGet "LeftMargin"
              []
              outDouble

setLeftMargin :: Double
              -> IPageSetup a0
              -> IO ()
setLeftMargin rHS =
  propertySet "LeftMargin"
              [inDouble rHS]

getOrder :: IPageSetup a0
         -> IO XlOrder
getOrder =
  propertyGet "Order"
              []
              outEnum

setOrder :: XlOrder
         -> IPageSetup a0
         -> IO ()
setOrder rHS =
  propertySet "Order"
              [inEnum rHS]

getOrientation18 :: IPageSetup a0
                 -> IO XlPageOrientation
getOrientation18 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation18 :: XlPageOrientation
                 -> IPageSetup a0
                 -> IO ()
setOrientation18 rHS =
  propertySet "Orientation"
              [inEnum rHS]

getPaperSize :: IPageSetup a0
             -> IO XlPaperSize
getPaperSize =
  propertyGet "PaperSize"
              []
              outEnum

setPaperSize :: XlPaperSize
             -> IPageSetup a0
             -> IO ()
setPaperSize rHS =
  propertySet "PaperSize"
              [inEnum rHS]

getPrintArea :: IPageSetup a0
             -> IO String
getPrintArea =
  propertyGet "PrintArea"
              []
              outString

setPrintArea :: String
             -> IPageSetup a0
             -> IO ()
setPrintArea rHS =
  propertySet "PrintArea"
              [inString rHS]

getPrintGridlines :: IPageSetup a0
                  -> IO Bool
getPrintGridlines =
  propertyGet "PrintGridlines"
              []
              outBool

setPrintGridlines :: Bool
                  -> IPageSetup a0
                  -> IO ()
setPrintGridlines rHS =
  propertySet "PrintGridlines"
              [inBool rHS]

getPrintHeadings :: IPageSetup a0
                 -> IO Bool
getPrintHeadings =
  propertyGet "PrintHeadings"
              []
              outBool

setPrintHeadings :: Bool
                 -> IPageSetup a0
                 -> IO ()
setPrintHeadings rHS =
  propertySet "PrintHeadings"
              [inBool rHS]

getPrintNotes :: IPageSetup a0
              -> IO Bool
getPrintNotes =
  propertyGet "PrintNotes"
              []
              outBool

setPrintNotes :: Bool
              -> IPageSetup a0
              -> IO ()
setPrintNotes rHS =
  propertySet "PrintNotes"
              [inBool rHS]

getPrintQuality :: (Variant a1, Variant a2)
                => a2
                -> IPageSetup a0
                -> IO a1
getPrintQuality index0 =
  propertyGet "PrintQuality"
              [inVariant index0]
              outVariant

setPrintQuality :: (Variant a1)
                => a1
                -> a2
                -> IPageSetup a0
                -> IO ()
setPrintQuality index0 rHS =
  propertySet "PrintQuality"
              [ inVariant index0
              , inVariant rHS
              ]

getPrintTitleColumns :: IPageSetup a0
                     -> IO String
getPrintTitleColumns =
  propertyGet "PrintTitleColumns"
              []
              outString

setPrintTitleColumns :: String
                     -> IPageSetup a0
                     -> IO ()
setPrintTitleColumns rHS =
  propertySet "PrintTitleColumns"
              [inString rHS]

getPrintTitleRows :: IPageSetup a0
                  -> IO String
getPrintTitleRows =
  propertyGet "PrintTitleRows"
              []
              outString

setPrintTitleRows :: String
                  -> IPageSetup a0
                  -> IO ()
setPrintTitleRows rHS =
  propertySet "PrintTitleRows"
              [inString rHS]

getRightFooter :: IPageSetup a0
               -> IO String
getRightFooter =
  propertyGet "RightFooter"
              []
              outString

setRightFooter :: String
               -> IPageSetup a0
               -> IO ()
setRightFooter rHS =
  propertySet "RightFooter"
              [inString rHS]

getRightHeader :: IPageSetup a0
               -> IO String
getRightHeader =
  propertyGet "RightHeader"
              []
              outString

setRightHeader :: String
               -> IPageSetup a0
               -> IO ()
setRightHeader rHS =
  propertySet "RightHeader"
              [inString rHS]

getRightMargin :: IPageSetup a0
               -> IO Double
getRightMargin =
  propertyGet "RightMargin"
              []
              outDouble

setRightMargin :: Double
               -> IPageSetup a0
               -> IO ()
setRightMargin rHS =
  propertySet "RightMargin"
              [inDouble rHS]

getTopMargin :: IPageSetup a0
             -> IO Double
getTopMargin =
  propertyGet "TopMargin"
              []
              outDouble

setTopMargin :: Double
             -> IPageSetup a0
             -> IO ()
setTopMargin rHS =
  propertySet "TopMargin"
              [inDouble rHS]

getZoom0 :: (Variant a1)
         => IPageSetup a0
         -> IO a1
getZoom0 =
  propertyGet "Zoom"
              []
              outVariant

setZoom0 :: a1
         -> IPageSetup a0
         -> IO ()
setZoom0 rHS =
  propertySet "Zoom"
              [inVariant rHS]

getPrintComments :: IPageSetup a0
                 -> IO XlPrintLocation
getPrintComments =
  propertyGet "PrintComments"
              []
              outEnum

setPrintComments :: XlPrintLocation
                 -> IPageSetup a0
                 -> IO ()
setPrintComments rHS =
  propertySet "PrintComments"
              [inEnum rHS]

getPrintErrors :: IPageSetup a0
               -> IO XlPrintErrors
getPrintErrors =
  propertyGet "PrintErrors"
              []
              outEnum

setPrintErrors :: XlPrintErrors
               -> IPageSetup a0
               -> IO ()
setPrintErrors rHS =
  propertySet "PrintErrors"
              [inEnum rHS]

getCenterHeaderPicture :: IPageSetup a0
                       -> IO (Graphic ())
getCenterHeaderPicture =
  propertyGet "CenterHeaderPicture"
              []
              outIUnknown

getCenterFooterPicture :: IPageSetup a0
                       -> IO (Graphic ())
getCenterFooterPicture =
  propertyGet "CenterFooterPicture"
              []
              outIUnknown

getLeftHeaderPicture :: IPageSetup a0
                     -> IO (Graphic ())
getLeftHeaderPicture =
  propertyGet "LeftHeaderPicture"
              []
              outIUnknown

getLeftFooterPicture :: IPageSetup a0
                     -> IO (Graphic ())
getLeftFooterPicture =
  propertyGet "LeftFooterPicture"
              []
              outIUnknown

getRightHeaderPicture :: IPageSetup a0
                      -> IO (Graphic ())
getRightHeaderPicture =
  propertyGet "RightHeaderPicture"
              []
              outIUnknown

getRightFooterPicture :: IPageSetup a0
                      -> IO (Graphic ())
getRightFooterPicture =
  propertyGet "RightFooterPicture"
              []
              outIUnknown

getOddAndEvenPagesHeaderFooter :: IPageSetup a0
                               -> IO Bool
getOddAndEvenPagesHeaderFooter =
  propertyGet "OddAndEvenPagesHeaderFooter"
              []
              outBool

setOddAndEvenPagesHeaderFooter :: Bool
                               -> IPageSetup a0
                               -> IO ()
setOddAndEvenPagesHeaderFooter rHS =
  propertySet "OddAndEvenPagesHeaderFooter"
              [inBool rHS]

getDifferentFirstPageHeaderFooter :: IPageSetup a0
                                  -> IO Bool
getDifferentFirstPageHeaderFooter =
  propertyGet "DifferentFirstPageHeaderFooter"
              []
              outBool

setDifferentFirstPageHeaderFooter :: Bool
                                  -> IPageSetup a0
                                  -> IO ()
setDifferentFirstPageHeaderFooter rHS =
  propertySet "DifferentFirstPageHeaderFooter"
              [inBool rHS]

getScaleWithDocHeaderFooter :: IPageSetup a0
                            -> IO Bool
getScaleWithDocHeaderFooter =
  propertyGet "ScaleWithDocHeaderFooter"
              []
              outBool

setScaleWithDocHeaderFooter :: Bool
                            -> IPageSetup a0
                            -> IO ()
setScaleWithDocHeaderFooter rHS =
  propertySet "ScaleWithDocHeaderFooter"
              [inBool rHS]

getAlignMarginsHeaderFooter :: IPageSetup a0
                            -> IO Bool
getAlignMarginsHeaderFooter =
  propertyGet "AlignMarginsHeaderFooter"
              []
              outBool

setAlignMarginsHeaderFooter :: Bool
                            -> IPageSetup a0
                            -> IO ()
setAlignMarginsHeaderFooter rHS =
  propertySet "AlignMarginsHeaderFooter"
              [inBool rHS]

getPages :: IPageSetup a0
         -> IO (Pages ())
getPages =
  propertyGet "Pages"
              []
              outIUnknown

getEvenPage :: IPageSetup a0
            -> IO (Page ())
getEvenPage =
  propertyGet "EvenPage"
              []
              outIUnknown

getFirstPage :: IPageSetup a0
             -> IO (Page ())
getFirstPage =
  propertyGet "FirstPage"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface INames
-- 
-- --------------------------------------------------
data INames_ a = INames__ 
type INames a = IDispatch (INames_ a)
iidINames :: IID (INames ())
iidINames = mkIID "{000208B8-0001-0000-C000-000000000046}"

getApplication102 :: (Variant a1)
                  => INames a0
                  -> IO a1
getApplication102 =
  propertyGet "Application"
              []
              outVariant

getCreator102 :: INames a0
              -> IO XlCreator
getCreator102 =
  propertyGet "Creator"
              []
              outEnum

getParent117 :: INames a0
             -> IO (IDispatch ())
getParent117 =
  propertyGet "Parent"
              []
              outIDispatch

add43 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> INames a0
      -> IO (Name ())
add43 name refersTo visible macroType shortcutKey category nameLocal refersToLocal categoryLocal refersToR1C1 refersToR1C1Local =
  function1 "Add"
            [ inVariant name
            , inVariant refersTo
            , inVariant visible
            , inVariant macroType
            , inVariant shortcutKey
            , inVariant category
            , inVariant nameLocal
            , inVariant refersToLocal
            , inVariant categoryLocal
            , inVariant refersToR1C1
            , inVariant refersToR1C1Local
            ]
            outIUnknown

item30 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Int32
       -> INames a0
       -> IO (Name ())
item30 index0 indexLocal refersTo lcid =
  function1 "Item"
            [ inVariant index0
            , inVariant indexLocal
            , inVariant refersTo
            , inInt32 lcid
            ]
            outIUnknown

default0 :: (Variant a1, Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> Int32
         -> INames a0
         -> IO (Name ())
default0 index0 indexLocal refersTo lcid =
  function1 "_Default"
            [ inVariant index0
            , inVariant indexLocal
            , inVariant refersTo
            , inInt32 lcid
            ]
            outIUnknown

getCount54 :: INames a0
           -> IO Int32
getCount54 =
  propertyGet "Count"
              []
              outInt32

getNewEnum23 :: INames a0
             -> IO (IUnknown ())
getNewEnum23 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IName
-- 
-- --------------------------------------------------
data IName_ a = IName__ 
type IName a = IDispatch (IName_ a)
iidIName :: IID (IName ())
iidIName = mkIID "{000208B9-0001-0000-C000-000000000046}"

getApplication103 :: (Variant a1)
                  => IName a0
                  -> IO a1
getApplication103 =
  propertyGet "Application"
              []
              outVariant

getCreator103 :: IName a0
              -> IO XlCreator
getCreator103 =
  propertyGet "Creator"
              []
              outEnum

getParent118 :: IName a0
             -> IO (IDispatch ())
getParent118 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault46 :: IName a0
             -> IO String
getDefault46 =
  propertyGet "_Default"
              []
              outString

getIndex31 :: IName a0
           -> IO Int32
getIndex31 =
  propertyGet "Index"
              []
              outInt32

getCategory :: Int32
            -> IName a0
            -> IO String
getCategory lcidIn =
  propertyGet "Category"
              [inInt32 lcidIn]
              outString

setCategory :: Int32
            -> String
            -> IName a0
            -> IO ()
setCategory lcidIn rHS =
  propertySet "Category"
              [ inInt32 lcidIn
              , inString rHS
              ]

getCategoryLocal :: IName a0
                 -> IO String
getCategoryLocal =
  propertyGet "CategoryLocal"
              []
              outString

setCategoryLocal :: String
                 -> IName a0
                 -> IO ()
setCategoryLocal rHS =
  propertySet "CategoryLocal"
              [inString rHS]

delete65 :: IName a0
         -> IO ()
delete65 =
  method0 "Delete"
          []

getMacroType :: IName a0
             -> IO XlXLMMacroType
getMacroType =
  propertyGet "MacroType"
              []
              outEnum

setMacroType :: XlXLMMacroType
             -> IName a0
             -> IO ()
setMacroType rHS =
  propertySet "MacroType"
              [inEnum rHS]

getName36 :: Int32
          -> IName a0
          -> IO String
getName36 lcidIn =
  propertyGet "Name"
              [inInt32 lcidIn]
              outString

setName30 :: Int32
          -> String
          -> IName a0
          -> IO ()
setName30 lcidIn rHS =
  propertySet "Name"
              [ inInt32 lcidIn
              , inString rHS
              ]

getRefersTo :: (Variant a1)
            => Int32
            -> IName a0
            -> IO a1
getRefersTo lcidIn =
  propertyGet "RefersTo"
              [inInt32 lcidIn]
              outVariant

setRefersTo :: Int32
            -> a1
            -> IName a0
            -> IO ()
setRefersTo lcidIn rHS =
  propertySet "RefersTo"
              [ inInt32 lcidIn
              , inVariant rHS
              ]

getShortcutKey :: IName a0
               -> IO String
getShortcutKey =
  propertyGet "ShortcutKey"
              []
              outString

setShortcutKey :: String
               -> IName a0
               -> IO ()
setShortcutKey rHS =
  propertySet "ShortcutKey"
              [inString rHS]

getValue21 :: IName a0
           -> IO String
getValue21 =
  propertyGet "Value"
              []
              outString

setValue19 :: String
           -> IName a0
           -> IO ()
setValue19 rHS =
  propertySet "Value"
              [inString rHS]

getVisible55 :: IName a0
             -> IO Bool
getVisible55 =
  propertyGet "Visible"
              []
              outBool

setVisible55 :: Bool
             -> IName a0
             -> IO ()
setVisible55 rHS =
  propertySet "Visible"
              [inBool rHS]

getNameLocal0 :: IName a0
              -> IO String
getNameLocal0 =
  propertyGet "NameLocal"
              []
              outString

setNameLocal :: String
             -> IName a0
             -> IO ()
setNameLocal rHS =
  propertySet "NameLocal"
              [inString rHS]

getRefersToLocal :: (Variant a1)
                 => IName a0
                 -> IO a1
getRefersToLocal =
  propertyGet "RefersToLocal"
              []
              outVariant

setRefersToLocal :: a1
                 -> IName a0
                 -> IO ()
setRefersToLocal rHS =
  propertySet "RefersToLocal"
              [inVariant rHS]

getRefersToR1C1 :: (Variant a1)
                => Int32
                -> IName a0
                -> IO a1
getRefersToR1C1 lcidIn =
  propertyGet "RefersToR1C1"
              [inInt32 lcidIn]
              outVariant

setRefersToR1C1 :: Int32
                -> a1
                -> IName a0
                -> IO ()
setRefersToR1C1 lcidIn rHS =
  propertySet "RefersToR1C1"
              [ inInt32 lcidIn
              , inVariant rHS
              ]

getRefersToR1C1Local :: (Variant a1)
                     => IName a0
                     -> IO a1
getRefersToR1C1Local =
  propertyGet "RefersToR1C1Local"
              []
              outVariant

setRefersToR1C1Local :: a1
                     -> IName a0
                     -> IO ()
setRefersToR1C1Local rHS =
  propertySet "RefersToR1C1Local"
              [inVariant rHS]

getRefersToRange :: IName a0
                 -> IO (Range ())
getRefersToRange =
  propertyGet "RefersToRange"
              []
              outIUnknown

getComment1 :: IName a0
            -> IO String
getComment1 =
  propertyGet "Comment"
              []
              outString

setComment0 :: String
            -> IName a0
            -> IO ()
setComment0 rHS =
  propertySet "Comment"
              [inString rHS]

getWorkbookParameter :: IName a0
                     -> IO Bool
getWorkbookParameter =
  propertyGet "WorkbookParameter"
              []
              outBool

setWorkbookParameter :: Bool
                     -> IName a0
                     -> IO ()
setWorkbookParameter rHS =
  propertySet "WorkbookParameter"
              [inBool rHS]

getValidWorkbookParameter :: IName a0
                          -> IO Bool
getValidWorkbookParameter =
  propertyGet "ValidWorkbookParameter"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IChartObject
-- 
-- --------------------------------------------------
data IChartObject_ a = IChartObject__ 
type IChartObject a = IDispatch (IChartObject_ a)
iidIChartObject :: IID (IChartObject ())
iidIChartObject = mkIID "{000208CF-0001-0000-C000-000000000046}"

getApplication104 :: (Variant a1)
                  => IChartObject a0
                  -> IO a1
getApplication104 =
  propertyGet "Application"
              []
              outVariant

getCreator104 :: IChartObject a0
              -> IO XlCreator
getCreator104 =
  propertyGet "Creator"
              []
              outEnum

getParent119 :: IChartObject a0
             -> IO (IDispatch ())
getParent119 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell18 :: IChartObject a0
                     -> IO (Range ())
getBottomRightCell18 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

bringToFront38 :: (Variant a1)
               => IChartObject a0
               -> IO a1
bringToFront38 =
  function1 "BringToFront"
            []
            outVariant

copy49 :: (Variant a1)
       => IChartObject a0
       -> IO a1
copy49 =
  function1 "_Copy"
            []
            outVariant

copyPicture41 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IChartObject a0
              -> IO a1
copyPicture41 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut39 :: (Variant a1)
      => IChartObject a0
      -> IO a1
cut39 =
  function1 "Cut"
            []
            outVariant

delete66 :: (Variant a1)
         => IChartObject a0
         -> IO a1
delete66 =
  function1 "Delete"
            []
            outVariant

duplicate38 :: IChartObject a0
            -> IO (IDispatch ())
duplicate38 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled41 :: IChartObject a0
             -> IO Bool
getEnabled41 =
  propertyGet "Enabled"
              []
              outBool

setEnabled41 :: Bool
             -> IChartObject a0
             -> IO ()
setEnabled41 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight43 :: IChartObject a0
            -> IO Double
getHeight43 =
  propertyGet "Height"
              []
              outDouble

setHeight42 :: Double
            -> IChartObject a0
            -> IO ()
setHeight42 rHS =
  propertySet "Height"
              [inDouble rHS]

getIndex32 :: IChartObject a0
           -> IO Int32
getIndex32 =
  propertyGet "Index"
              []
              outInt32

getLeft43 :: IChartObject a0
          -> IO Double
getLeft43 =
  propertyGet "Left"
              []
              outDouble

setLeft42 :: Double
          -> IChartObject a0
          -> IO ()
setLeft42 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked42 :: IChartObject a0
            -> IO Bool
getLocked42 =
  propertyGet "Locked"
              []
              outBool

setLocked42 :: Bool
            -> IChartObject a0
            -> IO ()
setLocked42 rHS =
  propertySet "Locked"
              [inBool rHS]

getName37 :: IChartObject a0
          -> IO String
getName37 =
  propertyGet "Name"
              []
              outString

setName31 :: String
          -> IChartObject a0
          -> IO ()
setName31 rHS =
  propertySet "Name"
              [inString rHS]

getOnAction41 :: IChartObject a0
              -> IO String
getOnAction41 =
  propertyGet "OnAction"
              []
              outString

setOnAction41 :: String
              -> IChartObject a0
              -> IO ()
setOnAction41 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement38 :: (Variant a1)
               => IChartObject a0
               -> IO a1
getPlacement38 =
  propertyGet "Placement"
              []
              outVariant

setPlacement38 :: a1
               -> IChartObject a0
               -> IO ()
setPlacement38 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject38 :: IChartObject a0
                 -> IO Bool
getPrintObject38 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject38 :: Bool
                 -> IChartObject a0
                 -> IO ()
setPrintObject38 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select50 :: (Variant a1, Variant a2)
         => a2
         -> IChartObject a0
         -> IO a1
select50 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack38 :: (Variant a1)
             => IChartObject a0
             -> IO a1
sendToBack38 =
  function1 "SendToBack"
            []
            outVariant

getTop43 :: IChartObject a0
         -> IO Double
getTop43 =
  propertyGet "Top"
              []
              outDouble

setTop42 :: Double
         -> IChartObject a0
         -> IO ()
setTop42 rHS =
  propertySet "Top"
              [inDouble rHS]

getTopLeftCell18 :: IChartObject a0
                 -> IO (Range ())
getTopLeftCell18 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getVisible56 :: IChartObject a0
             -> IO Bool
getVisible56 =
  propertyGet "Visible"
              []
              outBool

setVisible56 :: Bool
             -> IChartObject a0
             -> IO ()
setVisible56 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth44 :: IChartObject a0
           -> IO Double
getWidth44 =
  propertyGet "Width"
              []
              outDouble

setWidth43 :: Double
           -> IChartObject a0
           -> IO ()
setWidth43 rHS =
  propertySet "Width"
              [inDouble rHS]

getZOrder38 :: IChartObject a0
            -> IO Int32
getZOrder38 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange39 :: IChartObject a0
                -> IO (ShapeRange ())
getShapeRange39 =
  propertyGet "ShapeRange"
              []
              outIUnknown

activate12 :: (Variant a1)
           => IChartObject a0
           -> IO a1
activate12 =
  function1 "Activate"
            []
            outVariant

getChart :: (Variant a1)
         => IChartObject a0
         -> IO a1
getChart =
  propertyGet "Chart"
              []
              outVariant

getProtectChartObject :: IChartObject a0
                      -> IO Bool
getProtectChartObject =
  propertyGet "ProtectChartObject"
              []
              outBool

setProtectChartObject :: Bool
                      -> IChartObject a0
                      -> IO ()
setProtectChartObject rHS =
  propertySet "ProtectChartObject"
              [inBool rHS]

getRoundedCorners6 :: IChartObject a0
                   -> IO Bool
getRoundedCorners6 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners6 :: Bool
                   -> IChartObject a0
                   -> IO ()
setRoundedCorners6 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

getBorder23 :: IChartObject a0
            -> IO (Border ())
getBorder23 =
  propertyGet "Border"
              []
              outIUnknown

getInterior22 :: IChartObject a0
              -> IO (Interior ())
getInterior22 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow15 :: IChartObject a0
            -> IO Bool
getShadow15 =
  propertyGet "Shadow"
              []
              outBool

setShadow15 :: Bool
            -> IChartObject a0
            -> IO ()
setShadow15 rHS =
  propertySet "Shadow"
              [inBool rHS]

copy50 :: (Variant a1)
       => IChartObject a0
       -> IO a1
copy50 =
  function1 "Copy"
            []
            outVariant

-- --------------------------------------------------
-- 
-- interface IChartObjects
-- 
-- --------------------------------------------------
data IChartObjects_ a = IChartObjects__ 
type IChartObjects a = IDispatch (IChartObjects_ a)
iidIChartObjects :: IID (IChartObjects ())
iidIChartObjects = mkIID "{000208D0-0001-0000-C000-000000000046}"

getApplication105 :: (Variant a1)
                  => IChartObjects a0
                  -> IO a1
getApplication105 =
  propertyGet "Application"
              []
              outVariant

getCreator105 :: IChartObjects a0
              -> IO XlCreator
getCreator105 =
  propertyGet "Creator"
              []
              outEnum

getParent120 :: IChartObjects a0
             -> IO (IDispatch ())
getParent120 =
  propertyGet "Parent"
              []
              outIDispatch

dummy325 :: IChartObjects a0
         -> IO ()
dummy325 =
  method0 "_Dummy3"
          []

bringToFront39 :: (Variant a1)
               => IChartObjects a0
               -> IO a1
bringToFront39 =
  function1 "BringToFront"
            []
            outVariant

copy51 :: (Variant a1)
       => IChartObjects a0
       -> IO a1
copy51 =
  function1 "_Copy"
            []
            outVariant

copyPicture42 :: (Variant a1, Variant a2, Variant a3)
              => a2
              -> a3
              -> IChartObjects a0
              -> IO a1
copyPicture42 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut40 :: (Variant a1)
      => IChartObjects a0
      -> IO a1
cut40 =
  function1 "Cut"
            []
            outVariant

delete67 :: (Variant a1)
         => IChartObjects a0
         -> IO a1
delete67 =
  function1 "Delete"
            []
            outVariant

duplicate39 :: IChartObjects a0
            -> IO (IDispatch ())
duplicate39 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled42 :: IChartObjects a0
             -> IO Bool
getEnabled42 =
  propertyGet "Enabled"
              []
              outBool

setEnabled42 :: Bool
             -> IChartObjects a0
             -> IO ()
setEnabled42 rHS =
  propertySet "Enabled"
              [inBool rHS]

getHeight44 :: IChartObjects a0
            -> IO Double
getHeight44 =
  propertyGet "Height"
              []
              outDouble

setHeight43 :: Double
            -> IChartObjects a0
            -> IO ()
setHeight43 rHS =
  propertySet "Height"
              [inDouble rHS]

dummy1222 :: IChartObjects a0
          -> IO ()
dummy1222 =
  method0 "_Dummy12"
          []

getLeft44 :: IChartObjects a0
          -> IO Double
getLeft44 =
  propertyGet "Left"
              []
              outDouble

setLeft43 :: Double
          -> IChartObjects a0
          -> IO ()
setLeft43 rHS =
  propertySet "Left"
              [inDouble rHS]

getLocked43 :: IChartObjects a0
            -> IO Bool
getLocked43 =
  propertyGet "Locked"
              []
              outBool

setLocked43 :: Bool
            -> IChartObjects a0
            -> IO ()
setLocked43 rHS =
  propertySet "Locked"
              [inBool rHS]

dummy1520 :: IChartObjects a0
          -> IO ()
dummy1520 =
  method0 "_Dummy15"
          []

getOnAction42 :: IChartObjects a0
              -> IO String
getOnAction42 =
  propertyGet "OnAction"
              []
              outString

setOnAction42 :: String
              -> IChartObjects a0
              -> IO ()
setOnAction42 rHS =
  propertySet "OnAction"
              [inString rHS]

getPlacement39 :: (Variant a1)
               => IChartObjects a0
               -> IO a1
getPlacement39 =
  propertyGet "Placement"
              []
              outVariant

setPlacement39 :: a1
               -> IChartObjects a0
               -> IO ()
setPlacement39 rHS =
  propertySet "Placement"
              [inVariant rHS]

getPrintObject39 :: IChartObjects a0
                 -> IO Bool
getPrintObject39 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject39 :: Bool
                 -> IChartObjects a0
                 -> IO ()
setPrintObject39 rHS =
  propertySet "PrintObject"
              [inBool rHS]

select51 :: (Variant a1, Variant a2)
         => a2
         -> IChartObjects a0
         -> IO a1
select51 replace1 =
  function1 "Select"
            [inVariant replace1]
            outVariant

sendToBack39 :: (Variant a1)
             => IChartObjects a0
             -> IO a1
sendToBack39 =
  function1 "SendToBack"
            []
            outVariant

getTop44 :: IChartObjects a0
         -> IO Double
getTop44 =
  propertyGet "Top"
              []
              outDouble

setTop43 :: Double
         -> IChartObjects a0
         -> IO ()
setTop43 rHS =
  propertySet "Top"
              [inDouble rHS]

dummy2220 :: IChartObjects a0
          -> IO ()
dummy2220 =
  method0 "_Dummy22"
          []

getVisible57 :: IChartObjects a0
             -> IO Bool
getVisible57 =
  propertyGet "Visible"
              []
              outBool

setVisible57 :: Bool
             -> IChartObjects a0
             -> IO ()
setVisible57 rHS =
  propertySet "Visible"
              [inBool rHS]

getWidth45 :: IChartObjects a0
           -> IO Double
getWidth45 =
  propertyGet "Width"
              []
              outDouble

setWidth44 :: Double
           -> IChartObjects a0
           -> IO ()
setWidth44 rHS =
  propertySet "Width"
              [inDouble rHS]

dummy250 :: IChartObjects a0
         -> IO ()
dummy250 =
  method0 "_Dummy25"
          []

getShapeRange40 :: IChartObjects a0
                -> IO (ShapeRange ())
getShapeRange40 =
  propertyGet "ShapeRange"
              []
              outIUnknown

dummy271 :: IChartObjects a0
         -> IO ()
dummy271 =
  method0 "_Dummy27"
          []

dummy282 :: IChartObjects a0
         -> IO ()
dummy282 =
  method0 "_Dummy28"
          []

getProtectChartObject0 :: IChartObjects a0
                       -> IO Bool
getProtectChartObject0 =
  propertyGet "ProtectChartObject"
              []
              outBool

setProtectChartObject0 :: Bool
                       -> IChartObjects a0
                       -> IO ()
setProtectChartObject0 rHS =
  propertySet "ProtectChartObject"
              [inBool rHS]

getRoundedCorners7 :: IChartObjects a0
                   -> IO Bool
getRoundedCorners7 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners7 :: Bool
                   -> IChartObjects a0
                   -> IO ()
setRoundedCorners7 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

getBorder24 :: IChartObjects a0
            -> IO (Border ())
getBorder24 =
  propertyGet "Border"
              []
              outIUnknown

getInterior23 :: IChartObjects a0
              -> IO (Interior ())
getInterior23 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow16 :: IChartObjects a0
            -> IO Bool
getShadow16 =
  propertyGet "Shadow"
              []
              outBool

setShadow16 :: Bool
            -> IChartObjects a0
            -> IO ()
setShadow16 rHS =
  propertySet "Shadow"
              [inBool rHS]

copy52 :: (Variant a1)
       => IChartObjects a0
       -> IO a1
copy52 =
  function1 "Copy"
            []
            outVariant

add44 :: Double
      -> Double
      -> Double
      -> Double
      -> IChartObjects a0
      -> IO (ChartObject ())
add44 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIUnknown

getCount55 :: IChartObjects a0
           -> IO Int32
getCount55 =
  propertyGet "Count"
              []
              outInt32

group20 :: IChartObjects a0
        -> IO (GroupObject ())
group20 =
  function1 "Group"
            []
            outIUnknown

item31 :: a1
       -> IChartObjects a0
       -> IO (IDispatch ())
item31 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

newEnum27 :: IChartObjects a0
          -> IO (IUnknown ())
newEnum27 =
  function1 "_NewEnum"
            []
            outIUnknown

default1 :: a1
         -> IChartObjects a0
         -> IO (IDispatch ())
default1 index0 =
  function1 "_Default"
            [inVariant index0]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface IMailer
-- 
-- --------------------------------------------------
data IMailer_ a = IMailer__ 
type IMailer a = IDispatch (IMailer_ a)
iidIMailer :: IID (IMailer ())
iidIMailer = mkIID "{000208D1-0001-0000-C000-000000000046}"

getApplication106 :: (Variant a1)
                  => IMailer a0
                  -> IO a1
getApplication106 =
  propertyGet "Application"
              []
              outVariant

getCreator106 :: IMailer a0
              -> IO XlCreator
getCreator106 =
  propertyGet "Creator"
              []
              outEnum

getParent121 :: IMailer a0
             -> IO (IDispatch ())
getParent121 =
  propertyGet "Parent"
              []
              outIDispatch

getBCCRecipients :: (Variant a1)
                 => IMailer a0
                 -> IO a1
getBCCRecipients =
  propertyGet "BCCRecipients"
              []
              outVariant

setBCCRecipients :: a1
                 -> IMailer a0
                 -> IO ()
setBCCRecipients rHS =
  propertySet "BCCRecipients"
              [inVariant rHS]

getCCRecipients :: (Variant a1)
                => IMailer a0
                -> IO a1
getCCRecipients =
  propertyGet "CCRecipients"
              []
              outVariant

setCCRecipients :: a1
                -> IMailer a0
                -> IO ()
setCCRecipients rHS =
  propertySet "CCRecipients"
              [inVariant rHS]

getEnclosures :: (Variant a1)
              => IMailer a0
              -> IO a1
getEnclosures =
  propertyGet "Enclosures"
              []
              outVariant

setEnclosures :: a1
              -> IMailer a0
              -> IO ()
setEnclosures rHS =
  propertySet "Enclosures"
              [inVariant rHS]

getReceived :: IMailer a0
            -> IO Bool
getReceived =
  propertyGet "Received"
              []
              outBool

getSendDateTime :: IMailer a0
                -> IO Int64
getSendDateTime =
  propertyGet "SendDateTime"
              []
              outDate

getSender :: IMailer a0
          -> IO String
getSender =
  propertyGet "Sender"
              []
              outString

getSubject2 :: IMailer a0
            -> IO String
getSubject2 =
  propertyGet "Subject"
              []
              outString

setSubject1 :: String
            -> IMailer a0
            -> IO ()
setSubject1 rHS =
  propertySet "Subject"
              [inString rHS]

getToRecipients :: (Variant a1)
                => IMailer a0
                -> IO a1
getToRecipients =
  propertyGet "ToRecipients"
              []
              outVariant

setToRecipients :: a1
                -> IMailer a0
                -> IO ()
setToRecipients rHS =
  propertySet "ToRecipients"
              [inVariant rHS]

getWhichAddress :: (Variant a1)
                => IMailer a0
                -> IO a1
getWhichAddress =
  propertyGet "WhichAddress"
              []
              outVariant

setWhichAddress :: a1
                -> IMailer a0
                -> IO ()
setWhichAddress rHS =
  propertySet "WhichAddress"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface ICustomViews
-- 
-- --------------------------------------------------
data ICustomViews_ a = ICustomViews__ 
type ICustomViews a = IDispatch (ICustomViews_ a)
iidICustomViews :: IID (ICustomViews ())
iidICustomViews = mkIID "{00024422-0001-0000-C000-000000000046}"

getApplication107 :: (Variant a1)
                  => ICustomViews a0
                  -> IO a1
getApplication107 =
  propertyGet "Application"
              []
              outVariant

getCreator107 :: ICustomViews a0
              -> IO XlCreator
getCreator107 =
  propertyGet "Creator"
              []
              outEnum

getParent122 :: ICustomViews a0
             -> IO (IDispatch ())
getParent122 =
  propertyGet "Parent"
              []
              outIDispatch

getCount56 :: ICustomViews a0
           -> IO Int32
getCount56 =
  propertyGet "Count"
              []
              outInt32

item32 :: a1
       -> ICustomViews a0
       -> IO (CustomView ())
item32 viewName =
  function1 "Item"
            [inVariant viewName]
            outIUnknown

add45 :: (Variant a1, Variant a2)
      => String
      -> a1
      -> a2
      -> ICustomViews a0
      -> IO (CustomView ())
add45 viewName printSettings rowColSettings =
  function1 "Add"
            [ inString viewName
            , inVariant printSettings
            , inVariant rowColSettings
            ]
            outIUnknown

getDefault47 :: a1
             -> ICustomViews a0
             -> IO (CustomView ())
getDefault47 viewName =
  propertyGet "_Default"
              [inVariant viewName]
              outIUnknown

getNewEnum24 :: ICustomViews a0
             -> IO (IUnknown ())
getNewEnum24 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ICustomView
-- 
-- --------------------------------------------------
data ICustomView_ a = ICustomView__ 
type ICustomView a = IDispatch (ICustomView_ a)
iidICustomView :: IID (ICustomView ())
iidICustomView = mkIID "{00024423-0001-0000-C000-000000000046}"

getApplication108 :: (Variant a1)
                  => ICustomView a0
                  -> IO a1
getApplication108 =
  propertyGet "Application"
              []
              outVariant

getCreator108 :: ICustomView a0
              -> IO XlCreator
getCreator108 =
  propertyGet "Creator"
              []
              outEnum

getParent123 :: ICustomView a0
             -> IO (IDispatch ())
getParent123 =
  propertyGet "Parent"
              []
              outIDispatch

getName38 :: ICustomView a0
          -> IO String
getName38 =
  propertyGet "Name"
              []
              outString

getPrintSettings :: ICustomView a0
                 -> IO Bool
getPrintSettings =
  propertyGet "PrintSettings"
              []
              outBool

getRowColSettings :: ICustomView a0
                  -> IO Bool
getRowColSettings =
  propertyGet "RowColSettings"
              []
              outBool

show3 :: ICustomView a0
      -> IO ()
show3 =
  method0 "Show"
          []

delete68 :: ICustomView a0
         -> IO ()
delete68 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface IFormatConditions
-- 
-- --------------------------------------------------
data IFormatConditions_ a = IFormatConditions__ 
type IFormatConditions a = IDispatch (IFormatConditions_ a)
iidIFormatConditions :: IID (IFormatConditions ())
iidIFormatConditions =
  mkIID "{00024424-0001-0000-C000-000000000046}"

getApplication109 :: (Variant a1)
                  => IFormatConditions a0
                  -> IO a1
getApplication109 =
  propertyGet "Application"
              []
              outVariant

getCreator109 :: IFormatConditions a0
              -> IO XlCreator
getCreator109 =
  propertyGet "Creator"
              []
              outEnum

getParent124 :: IFormatConditions a0
             -> IO (IDispatch ())
getParent124 =
  propertyGet "Parent"
              []
              outIDispatch

getCount57 :: IFormatConditions a0
           -> IO Int32
getCount57 =
  propertyGet "Count"
              []
              outInt32

item33 :: a1
       -> IFormatConditions a0
       -> IO (IDispatch ())
item33 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

add46 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
      => XlFormatConditionType
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> IFormatConditions a0
      -> IO (IDispatch ())
add46 type0 operator formula1 formula2 string textOperator dateOperator scopeType =
  function1 "Add"
            [ inEnum type0
            , inVariant operator
            , inVariant formula1
            , inVariant formula2
            , inVariant string
            , inVariant textOperator
            , inVariant dateOperator
            , inVariant scopeType
            ]
            outIDispatch

getDefault48 :: a1
             -> IFormatConditions a0
             -> IO (IDispatch ())
getDefault48 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

getNewEnum25 :: IFormatConditions a0
             -> IO (IUnknown ())
getNewEnum25 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete69 :: IFormatConditions a0
         -> IO ()
delete69 =
  method0 "Delete"
          []

addColorScale :: Int32
              -> IFormatConditions a0
              -> IO (IDispatch ())
addColorScale colorScaleType =
  function1 "AddColorScale"
            [inInt32 colorScaleType]
            outIDispatch

addDatabar :: IFormatConditions a0
           -> IO (IDispatch ())
addDatabar =
  function1 "AddDatabar"
            []
            outIDispatch

addIconSetCondition :: IFormatConditions a0
                    -> IO (IDispatch ())
addIconSetCondition =
  function1 "AddIconSetCondition"
            []
            outIDispatch

addTop10 :: IFormatConditions a0
         -> IO (IDispatch ())
addTop10 =
  function1 "AddTop10"
            []
            outIDispatch

addAboveAverage :: IFormatConditions a0
                -> IO (IDispatch ())
addAboveAverage =
  function1 "AddAboveAverage"
            []
            outIDispatch

addUniqueValues :: IFormatConditions a0
                -> IO (IDispatch ())
addUniqueValues =
  function1 "AddUniqueValues"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface IFormatCondition
-- 
-- --------------------------------------------------
data IFormatCondition_ a = IFormatCondition__ 
type IFormatCondition a = IDispatch (IFormatCondition_ a)
iidIFormatCondition :: IID (IFormatCondition ())
iidIFormatCondition =
  mkIID "{00024425-0001-0000-C000-000000000046}"

getApplication110 :: (Variant a1)
                  => IFormatCondition a0
                  -> IO a1
getApplication110 =
  propertyGet "Application"
              []
              outVariant

getCreator110 :: IFormatCondition a0
              -> IO XlCreator
getCreator110 =
  propertyGet "Creator"
              []
              outEnum

getParent125 :: IFormatCondition a0
             -> IO (IDispatch ())
getParent125 =
  propertyGet "Parent"
              []
              outIDispatch

modify :: (Variant a1, Variant a2, Variant a3)
       => XlFormatConditionType
       -> a1
       -> a2
       -> a3
       -> IFormatCondition a0
       -> IO ()
modify type0 operator formula1 formula2 =
  method0 "_Modify"
          [ inEnum type0
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          ]

getType8 :: IFormatCondition a0
         -> IO Int32
getType8 =
  propertyGet "Type"
              []
              outInt32

getOperator :: IFormatCondition a0
            -> IO Int32
getOperator =
  propertyGet "Operator"
              []
              outInt32

getFormula17 :: IFormatCondition a0
             -> IO String
getFormula17 =
  propertyGet "Formula1"
              []
              outString

getFormula20 :: IFormatCondition a0
             -> IO String
getFormula20 =
  propertyGet "Formula2"
              []
              outString

getInterior24 :: IFormatCondition a0
              -> IO (Interior ())
getInterior24 =
  propertyGet "Interior"
              []
              outIUnknown

getBorders1 :: IFormatCondition a0
            -> IO (Borders ())
getBorders1 =
  propertyGet "Borders"
              []
              outIUnknown

getFont17 :: IFormatCondition a0
          -> IO (Font ())
getFont17 =
  propertyGet "Font"
              []
              outIUnknown

delete70 :: IFormatCondition a0
         -> IO ()
delete70 =
  method0 "Delete"
          []

modify0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => XlFormatConditionType
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> IFormatCondition a0
        -> IO ()
modify0 type0 operator formula1 formula2 string operator2 =
  method0 "Modify"
          [ inEnum type0
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          , inVariant string
          , inVariant operator2
          ]

getText28 :: IFormatCondition a0
          -> IO String
getText28 =
  propertyGet "Text"
              []
              outString

setText27 :: String
          -> IFormatCondition a0
          -> IO ()
setText27 rHS =
  propertySet "Text"
              [inString rHS]

getTextOperator :: IFormatCondition a0
                -> IO XlContainsOperator
getTextOperator =
  propertyGet "TextOperator"
              []
              outEnum

setTextOperator :: XlContainsOperator
                -> IFormatCondition a0
                -> IO ()
setTextOperator rHS =
  propertySet "TextOperator"
              [inEnum rHS]

getDateOperator :: IFormatCondition a0
                -> IO XlTimePeriods
getDateOperator =
  propertyGet "DateOperator"
              []
              outEnum

setDateOperator :: XlTimePeriods
                -> IFormatCondition a0
                -> IO ()
setDateOperator rHS =
  propertySet "DateOperator"
              [inEnum rHS]

getNumberFormat2 :: (Variant a1)
                 => IFormatCondition a0
                 -> IO a1
getNumberFormat2 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat2 :: a1
                 -> IFormatCondition a0
                 -> IO ()
setNumberFormat2 rHS =
  propertySet "NumberFormat"
              [inVariant rHS]

getPriority :: IFormatCondition a0
            -> IO Int32
getPriority =
  propertyGet "Priority"
              []
              outInt32

setPriority :: Int32
            -> IFormatCondition a0
            -> IO ()
setPriority rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue :: IFormatCondition a0
              -> IO Bool
getStopIfTrue =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue :: Bool
              -> IFormatCondition a0
              -> IO ()
setStopIfTrue rHS =
  propertySet "StopIfTrue"
              [inBool rHS]

getAppliesTo :: IFormatCondition a0
             -> IO (Range ())
getAppliesTo =
  propertyGet "AppliesTo"
              []
              outIUnknown

modifyAppliesToRange :: Range a1
                     -> IFormatCondition a0
                     -> IO ()
modifyAppliesToRange range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

setFirstPriority :: IFormatCondition a0
                 -> IO ()
setFirstPriority =
  method0 "SetFirstPriority"
          []

setLastPriority :: IFormatCondition a0
                -> IO ()
setLastPriority =
  method0 "SetLastPriority"
          []

getPTCondition :: IFormatCondition a0
               -> IO Bool
getPTCondition =
  propertyGet "PTCondition"
              []
              outBool

getScopeType :: IFormatCondition a0
             -> IO XlPivotConditionScope
getScopeType =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType :: XlPivotConditionScope
             -> IFormatCondition a0
             -> IO ()
setScopeType rHS =
  propertySet "ScopeType"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface IComments
-- 
-- --------------------------------------------------
data IComments_ a = IComments__ 
type IComments a = IDispatch (IComments_ a)
iidIComments :: IID (IComments ())
iidIComments = mkIID "{00024426-0001-0000-C000-000000000046}"

getApplication111 :: (Variant a1)
                  => IComments a0
                  -> IO a1
getApplication111 =
  propertyGet "Application"
              []
              outVariant

getCreator111 :: IComments a0
              -> IO XlCreator
getCreator111 =
  propertyGet "Creator"
              []
              outEnum

getParent126 :: IComments a0
             -> IO (IDispatch ())
getParent126 =
  propertyGet "Parent"
              []
              outIDispatch

getCount58 :: IComments a0
           -> IO Int32
getCount58 =
  propertyGet "Count"
              []
              outInt32

item34 :: Int32
       -> IComments a0
       -> IO (Comment ())
item34 index0 =
  function1 "Item"
            [inInt32 index0]
            outIUnknown

getDefault49 :: Int32
             -> IComments a0
             -> IO (Comment ())
getDefault49 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

getNewEnum26 :: IComments a0
             -> IO (IUnknown ())
getNewEnum26 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IComment
-- 
-- --------------------------------------------------
data IComment_ a = IComment__ 
type IComment a = IDispatch (IComment_ a)
iidIComment :: IID (IComment ())
iidIComment = mkIID "{00024427-0001-0000-C000-000000000046}"

getApplication112 :: (Variant a1)
                  => IComment a0
                  -> IO a1
getApplication112 =
  propertyGet "Application"
              []
              outVariant

getCreator112 :: IComment a0
              -> IO XlCreator
getCreator112 =
  propertyGet "Creator"
              []
              outEnum

getParent127 :: IComment a0
             -> IO (IDispatch ())
getParent127 =
  propertyGet "Parent"
              []
              outIDispatch

getAuthor1 :: IComment a0
           -> IO String
getAuthor1 =
  propertyGet "Author"
              []
              outString

getShape0 :: IComment a0
          -> IO (Shape ())
getShape0 =
  propertyGet "Shape"
              []
              outIUnknown

getVisible58 :: IComment a0
             -> IO Bool
getVisible58 =
  propertyGet "Visible"
              []
              outBool

setVisible58 :: Bool
             -> IComment a0
             -> IO ()
setVisible58 rHS =
  propertySet "Visible"
              [inBool rHS]

text0 :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> IComment a0
      -> IO String
text0 text1 start overwrite =
  function1 "Text"
            [ inVariant text1
            , inVariant start
            , inVariant overwrite
            ]
            outString

delete71 :: IComment a0
         -> IO ()
delete71 =
  method0 "Delete"
          []

next :: IComment a0
     -> IO (Comment ())
next =
  function1 "Next"
            []
            outIUnknown

previous :: IComment a0
         -> IO (Comment ())
previous =
  function1 "Previous"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IRefreshEvents
-- 
-- --------------------------------------------------
data IRefreshEvents_ a = IRefreshEvents__ 
type IRefreshEvents a = IDispatch (IRefreshEvents_ a)
iidIRefreshEvents :: IID (IRefreshEvents ())
iidIRefreshEvents = mkIID "{0002441B-0001-0000-C000-000000000046}"

beforeRefresh :: Bool
              -> IRefreshEvents a0
              -> IO Bool
beforeRefresh cancel =
  method1 "BeforeRefresh"
          []
          (inoutBool cancel)

afterRefresh :: Bool
             -> IRefreshEvents a0
             -> IO ()
afterRefresh success =
  method0 "AfterRefresh"
          [inBool success]

-- --------------------------------------------------
-- 
-- interface _IQueryTable
-- 
-- --------------------------------------------------
data IQueryTable_ a = IQueryTable__ 
type IQueryTable a = IDispatch (IQueryTable_ a)
iidIQueryTable :: IID (IQueryTable ())
iidIQueryTable = mkIID "{00024428-0001-0000-C000-000000000046}"

getApplication113 :: (Variant a1)
                  => IQueryTable a0
                  -> IO a1
getApplication113 =
  propertyGet "Application"
              []
              outVariant

getCreator113 :: IQueryTable a0
              -> IO XlCreator
getCreator113 =
  propertyGet "Creator"
              []
              outEnum

getParent128 :: IQueryTable a0
             -> IO (IDispatch ())
getParent128 =
  propertyGet "Parent"
              []
              outIDispatch

getName39 :: IQueryTable a0
          -> IO String
getName39 =
  propertyGet "Name"
              []
              outString

setName32 :: String
          -> IQueryTable a0
          -> IO ()
setName32 rHS =
  propertySet "Name"
              [inString rHS]

getFieldNames :: IQueryTable a0
              -> IO Bool
getFieldNames =
  propertyGet "FieldNames"
              []
              outBool

setFieldNames :: Bool
              -> IQueryTable a0
              -> IO ()
setFieldNames rHS =
  propertySet "FieldNames"
              [inBool rHS]

getRowNumbers :: IQueryTable a0
              -> IO Bool
getRowNumbers =
  propertyGet "RowNumbers"
              []
              outBool

setRowNumbers :: Bool
              -> IQueryTable a0
              -> IO ()
setRowNumbers rHS =
  propertySet "RowNumbers"
              [inBool rHS]

getFillAdjacentFormulas :: IQueryTable a0
                        -> IO Bool
getFillAdjacentFormulas =
  propertyGet "FillAdjacentFormulas"
              []
              outBool

setFillAdjacentFormulas :: Bool
                        -> IQueryTable a0
                        -> IO ()
setFillAdjacentFormulas rHS =
  propertySet "FillAdjacentFormulas"
              [inBool rHS]

getHasAutoFormat0 :: IQueryTable a0
                  -> IO Bool
getHasAutoFormat0 =
  propertyGet "HasAutoFormat"
              []
              outBool

setHasAutoFormat0 :: Bool
                  -> IQueryTable a0
                  -> IO ()
setHasAutoFormat0 rHS =
  propertySet "HasAutoFormat"
              [inBool rHS]

getRefreshOnFileOpen0 :: IQueryTable a0
                      -> IO Bool
getRefreshOnFileOpen0 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen0 :: Bool
                      -> IQueryTable a0
                      -> IO ()
setRefreshOnFileOpen0 rHS =
  propertySet "RefreshOnFileOpen"
              [inBool rHS]

getRefreshing :: IQueryTable a0
              -> IO Bool
getRefreshing =
  propertyGet "Refreshing"
              []
              outBool

getFetchedRowOverflow :: IQueryTable a0
                      -> IO Bool
getFetchedRowOverflow =
  propertyGet "FetchedRowOverflow"
              []
              outBool

getBackgroundQuery0 :: IQueryTable a0
                    -> IO Bool
getBackgroundQuery0 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery0 :: Bool
                    -> IQueryTable a0
                    -> IO ()
setBackgroundQuery0 rHS =
  propertySet "BackgroundQuery"
              [inBool rHS]

cancelRefresh :: IQueryTable a0
              -> IO ()
cancelRefresh =
  method0 "CancelRefresh"
          []

getRefreshStyle :: IQueryTable a0
                -> IO XlCellInsertionMode
getRefreshStyle =
  propertyGet "RefreshStyle"
              []
              outEnum

setRefreshStyle :: XlCellInsertionMode
                -> IQueryTable a0
                -> IO ()
setRefreshStyle rHS =
  propertySet "RefreshStyle"
              [inEnum rHS]

getEnableRefresh0 :: IQueryTable a0
                  -> IO Bool
getEnableRefresh0 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh0 :: Bool
                  -> IQueryTable a0
                  -> IO ()
setEnableRefresh0 rHS =
  propertySet "EnableRefresh"
              [inBool rHS]

getSavePassword0 :: IQueryTable a0
                 -> IO Bool
getSavePassword0 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword0 :: Bool
                 -> IQueryTable a0
                 -> IO ()
setSavePassword0 rHS =
  propertySet "SavePassword"
              [inBool rHS]

getDestination :: IQueryTable a0
               -> IO (Range ())
getDestination =
  propertyGet "Destination"
              []
              outIUnknown

getConnection0 :: (Variant a1)
               => IQueryTable a0
               -> IO a1
getConnection0 =
  propertyGet "Connection"
              []
              outVariant

setConnection0 :: a1
               -> IQueryTable a0
               -> IO ()
setConnection0 rHS =
  propertySet "Connection"
              [inVariant rHS]

getSql0 :: (Variant a1)
        => IQueryTable a0
        -> IO a1
getSql0 =
  propertyGet "Sql"
              []
              outVariant

setSql0 :: a1
        -> IQueryTable a0
        -> IO ()
setSql0 rHS =
  propertySet "Sql"
              [inVariant rHS]

getPostText :: IQueryTable a0
            -> IO String
getPostText =
  propertyGet "PostText"
              []
              outString

setPostText :: String
            -> IQueryTable a0
            -> IO ()
setPostText rHS =
  propertySet "PostText"
              [inString rHS]

getResultRange :: IQueryTable a0
               -> IO (Range ())
getResultRange =
  propertyGet "ResultRange"
              []
              outIUnknown

delete72 :: IQueryTable a0
         -> IO ()
delete72 =
  method0 "Delete"
          []

refresh1 :: (Variant a1)
         => a1
         -> IQueryTable a0
         -> IO Bool
refresh1 backgroundQuery =
  function1 "Refresh"
            [inVariant backgroundQuery]
            outBool

getParameters :: IQueryTable a0
              -> IO (Parameters ())
getParameters =
  propertyGet "Parameters"
              []
              outIUnknown

getRecordset0 :: IQueryTable a0
              -> IO (IDispatch ())
getRecordset0 =
  propertyGet "Recordset"
              []
              outIDispatch

setRecordset0 :: IDispatch a1
              -> IQueryTable a0
              -> IO ()
setRecordset0 rHS =
  propertySet "Recordset"
              [inIDispatch rHS]

getSaveData0 :: IQueryTable a0
             -> IO Bool
getSaveData0 =
  propertyGet "SaveData"
              []
              outBool

setSaveData0 :: Bool
             -> IQueryTable a0
             -> IO ()
setSaveData0 rHS =
  propertySet "SaveData"
              [inBool rHS]

getTablesOnlyFromHTML :: IQueryTable a0
                      -> IO Bool
getTablesOnlyFromHTML =
  propertyGet "TablesOnlyFromHTML"
              []
              outBool

setTablesOnlyFromHTML :: Bool
                      -> IQueryTable a0
                      -> IO ()
setTablesOnlyFromHTML rHS =
  propertySet "TablesOnlyFromHTML"
              [inBool rHS]

getEnableEditing :: IQueryTable a0
                 -> IO Bool
getEnableEditing =
  propertyGet "EnableEditing"
              []
              outBool

setEnableEditing :: Bool
                 -> IQueryTable a0
                 -> IO ()
setEnableEditing rHS =
  propertySet "EnableEditing"
              [inBool rHS]

getTextFilePlatform :: IQueryTable a0
                    -> IO Int32
getTextFilePlatform =
  propertyGet "TextFilePlatform"
              []
              outInt32

setTextFilePlatform :: Int32
                    -> IQueryTable a0
                    -> IO ()
setTextFilePlatform rHS =
  propertySet "TextFilePlatform"
              [inInt32 rHS]

getTextFileStartRow :: IQueryTable a0
                    -> IO Int32
getTextFileStartRow =
  propertyGet "TextFileStartRow"
              []
              outInt32

setTextFileStartRow :: Int32
                    -> IQueryTable a0
                    -> IO ()
setTextFileStartRow rHS =
  propertySet "TextFileStartRow"
              [inInt32 rHS]

getTextFileParseType :: IQueryTable a0
                     -> IO XlTextParsingType
getTextFileParseType =
  propertyGet "TextFileParseType"
              []
              outEnum

setTextFileParseType :: XlTextParsingType
                     -> IQueryTable a0
                     -> IO ()
setTextFileParseType rHS =
  propertySet "TextFileParseType"
              [inEnum rHS]

getTextFileTextQualifier :: IQueryTable a0
                         -> IO XlTextQualifier
getTextFileTextQualifier =
  propertyGet "TextFileTextQualifier"
              []
              outEnum

setTextFileTextQualifier :: XlTextQualifier
                         -> IQueryTable a0
                         -> IO ()
setTextFileTextQualifier rHS =
  propertySet "TextFileTextQualifier"
              [inEnum rHS]

getTextFileConsecutiveDelimiter :: IQueryTable a0
                                -> IO Bool
getTextFileConsecutiveDelimiter =
  propertyGet "TextFileConsecutiveDelimiter"
              []
              outBool

setTextFileConsecutiveDelimiter :: Bool
                                -> IQueryTable a0
                                -> IO ()
setTextFileConsecutiveDelimiter rHS =
  propertySet "TextFileConsecutiveDelimiter"
              [inBool rHS]

getTextFileTabDelimiter :: IQueryTable a0
                        -> IO Bool
getTextFileTabDelimiter =
  propertyGet "TextFileTabDelimiter"
              []
              outBool

setTextFileTabDelimiter :: Bool
                        -> IQueryTable a0
                        -> IO ()
setTextFileTabDelimiter rHS =
  propertySet "TextFileTabDelimiter"
              [inBool rHS]

getTextFileSemicolonDelimiter :: IQueryTable a0
                              -> IO Bool
getTextFileSemicolonDelimiter =
  propertyGet "TextFileSemicolonDelimiter"
              []
              outBool

setTextFileSemicolonDelimiter :: Bool
                              -> IQueryTable a0
                              -> IO ()
setTextFileSemicolonDelimiter rHS =
  propertySet "TextFileSemicolonDelimiter"
              [inBool rHS]

getTextFileCommaDelimiter :: IQueryTable a0
                          -> IO Bool
getTextFileCommaDelimiter =
  propertyGet "TextFileCommaDelimiter"
              []
              outBool

setTextFileCommaDelimiter :: Bool
                          -> IQueryTable a0
                          -> IO ()
setTextFileCommaDelimiter rHS =
  propertySet "TextFileCommaDelimiter"
              [inBool rHS]

getTextFileSpaceDelimiter :: IQueryTable a0
                          -> IO Bool
getTextFileSpaceDelimiter =
  propertyGet "TextFileSpaceDelimiter"
              []
              outBool

setTextFileSpaceDelimiter :: Bool
                          -> IQueryTable a0
                          -> IO ()
setTextFileSpaceDelimiter rHS =
  propertySet "TextFileSpaceDelimiter"
              [inBool rHS]

getTextFileOtherDelimiter :: IQueryTable a0
                          -> IO String
getTextFileOtherDelimiter =
  propertyGet "TextFileOtherDelimiter"
              []
              outString

setTextFileOtherDelimiter :: String
                          -> IQueryTable a0
                          -> IO ()
setTextFileOtherDelimiter rHS =
  propertySet "TextFileOtherDelimiter"
              [inString rHS]

getTextFileColumnDataTypes :: (Variant a1)
                           => IQueryTable a0
                           -> IO a1
getTextFileColumnDataTypes =
  propertyGet "TextFileColumnDataTypes"
              []
              outVariant

setTextFileColumnDataTypes :: a1
                           -> IQueryTable a0
                           -> IO ()
setTextFileColumnDataTypes rHS =
  propertySet "TextFileColumnDataTypes"
              [inVariant rHS]

getTextFileFixedColumnWidths :: (Variant a1)
                             => IQueryTable a0
                             -> IO a1
getTextFileFixedColumnWidths =
  propertyGet "TextFileFixedColumnWidths"
              []
              outVariant

setTextFileFixedColumnWidths :: a1
                             -> IQueryTable a0
                             -> IO ()
setTextFileFixedColumnWidths rHS =
  propertySet "TextFileFixedColumnWidths"
              [inVariant rHS]

getPreserveColumnInfo :: IQueryTable a0
                      -> IO Bool
getPreserveColumnInfo =
  propertyGet "PreserveColumnInfo"
              []
              outBool

setPreserveColumnInfo :: Bool
                      -> IQueryTable a0
                      -> IO ()
setPreserveColumnInfo rHS =
  propertySet "PreserveColumnInfo"
              [inBool rHS]

getPreserveFormatting0 :: IQueryTable a0
                       -> IO Bool
getPreserveFormatting0 =
  propertyGet "PreserveFormatting"
              []
              outBool

setPreserveFormatting0 :: Bool
                       -> IQueryTable a0
                       -> IO ()
setPreserveFormatting0 rHS =
  propertySet "PreserveFormatting"
              [inBool rHS]

getAdjustColumnWidth :: IQueryTable a0
                     -> IO Bool
getAdjustColumnWidth =
  propertyGet "AdjustColumnWidth"
              []
              outBool

setAdjustColumnWidth :: Bool
                     -> IQueryTable a0
                     -> IO ()
setAdjustColumnWidth rHS =
  propertySet "AdjustColumnWidth"
              [inBool rHS]

getCommandText0 :: (Variant a1)
                => IQueryTable a0
                -> IO a1
getCommandText0 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText0 :: a1
                -> IQueryTable a0
                -> IO ()
setCommandText0 rHS =
  propertySet "CommandText"
              [inVariant rHS]

getCommandType0 :: IQueryTable a0
                -> IO XlCmdType
getCommandType0 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType0 :: XlCmdType
                -> IQueryTable a0
                -> IO ()
setCommandType0 rHS =
  propertySet "CommandType"
              [inEnum rHS]

getTextFilePromptOnRefresh :: IQueryTable a0
                           -> IO Bool
getTextFilePromptOnRefresh =
  propertyGet "TextFilePromptOnRefresh"
              []
              outBool

setTextFilePromptOnRefresh :: Bool
                           -> IQueryTable a0
                           -> IO ()
setTextFilePromptOnRefresh rHS =
  propertySet "TextFilePromptOnRefresh"
              [inBool rHS]

getQueryType0 :: IQueryTable a0
              -> IO XlQueryType
getQueryType0 =
  propertyGet "QueryType"
              []
              outEnum

getMaintainConnection0 :: IQueryTable a0
                       -> IO Bool
getMaintainConnection0 =
  propertyGet "MaintainConnection"
              []
              outBool

setMaintainConnection0 :: Bool
                       -> IQueryTable a0
                       -> IO ()
setMaintainConnection0 rHS =
  propertySet "MaintainConnection"
              [inBool rHS]

getTextFileDecimalSeparator :: IQueryTable a0
                            -> IO String
getTextFileDecimalSeparator =
  propertyGet "TextFileDecimalSeparator"
              []
              outString

setTextFileDecimalSeparator :: String
                            -> IQueryTable a0
                            -> IO ()
setTextFileDecimalSeparator rHS =
  propertySet "TextFileDecimalSeparator"
              [inString rHS]

getTextFileThousandsSeparator :: IQueryTable a0
                              -> IO String
getTextFileThousandsSeparator =
  propertyGet "TextFileThousandsSeparator"
              []
              outString

setTextFileThousandsSeparator :: String
                              -> IQueryTable a0
                              -> IO ()
setTextFileThousandsSeparator rHS =
  propertySet "TextFileThousandsSeparator"
              [inString rHS]

getRefreshPeriod0 :: IQueryTable a0
                  -> IO Int32
getRefreshPeriod0 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod0 :: Int32
                  -> IQueryTable a0
                  -> IO ()
setRefreshPeriod0 rHS =
  propertySet "RefreshPeriod"
              [inInt32 rHS]

resetTimer0 :: IQueryTable a0
            -> IO ()
resetTimer0 =
  method0 "ResetTimer"
          []

getWebSelectionType :: IQueryTable a0
                    -> IO XlWebSelectionType
getWebSelectionType =
  propertyGet "WebSelectionType"
              []
              outEnum

setWebSelectionType :: XlWebSelectionType
                    -> IQueryTable a0
                    -> IO ()
setWebSelectionType rHS =
  propertySet "WebSelectionType"
              [inEnum rHS]

getWebFormatting :: IQueryTable a0
                 -> IO XlWebFormatting
getWebFormatting =
  propertyGet "WebFormatting"
              []
              outEnum

setWebFormatting :: XlWebFormatting
                 -> IQueryTable a0
                 -> IO ()
setWebFormatting rHS =
  propertySet "WebFormatting"
              [inEnum rHS]

getWebTables :: IQueryTable a0
             -> IO String
getWebTables =
  propertyGet "WebTables"
              []
              outString

setWebTables :: String
             -> IQueryTable a0
             -> IO ()
setWebTables rHS =
  propertySet "WebTables"
              [inString rHS]

getWebPreFormattedTextToColumns :: IQueryTable a0
                                -> IO Bool
getWebPreFormattedTextToColumns =
  propertyGet "WebPreFormattedTextToColumns"
              []
              outBool

setWebPreFormattedTextToColumns :: Bool
                                -> IQueryTable a0
                                -> IO ()
setWebPreFormattedTextToColumns rHS =
  propertySet "WebPreFormattedTextToColumns"
              [inBool rHS]

getWebSingleBlockTextImport :: IQueryTable a0
                            -> IO Bool
getWebSingleBlockTextImport =
  propertyGet "WebSingleBlockTextImport"
              []
              outBool

setWebSingleBlockTextImport :: Bool
                            -> IQueryTable a0
                            -> IO ()
setWebSingleBlockTextImport rHS =
  propertySet "WebSingleBlockTextImport"
              [inBool rHS]

getWebDisableDateRecognition :: IQueryTable a0
                             -> IO Bool
getWebDisableDateRecognition =
  propertyGet "WebDisableDateRecognition"
              []
              outBool

setWebDisableDateRecognition :: Bool
                             -> IQueryTable a0
                             -> IO ()
setWebDisableDateRecognition rHS =
  propertySet "WebDisableDateRecognition"
              [inBool rHS]

getWebConsecutiveDelimitersAsOne :: IQueryTable a0
                                 -> IO Bool
getWebConsecutiveDelimitersAsOne =
  propertyGet "WebConsecutiveDelimitersAsOne"
              []
              outBool

setWebConsecutiveDelimitersAsOne :: Bool
                                 -> IQueryTable a0
                                 -> IO ()
setWebConsecutiveDelimitersAsOne rHS =
  propertySet "WebConsecutiveDelimitersAsOne"
              [inBool rHS]

getWebDisableRedirections :: IQueryTable a0
                          -> IO Bool
getWebDisableRedirections =
  propertyGet "WebDisableRedirections"
              []
              outBool

setWebDisableRedirections :: Bool
                          -> IQueryTable a0
                          -> IO ()
setWebDisableRedirections rHS =
  propertySet "WebDisableRedirections"
              [inBool rHS]

getEditWebPage :: (Variant a1)
               => IQueryTable a0
               -> IO a1
getEditWebPage =
  propertyGet "EditWebPage"
              []
              outVariant

setEditWebPage :: a1
               -> IQueryTable a0
               -> IO ()
setEditWebPage rHS =
  propertySet "EditWebPage"
              [inVariant rHS]

getSourceConnectionFile0 :: IQueryTable a0
                         -> IO String
getSourceConnectionFile0 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile0 :: String
                         -> IQueryTable a0
                         -> IO ()
setSourceConnectionFile0 rHS =
  propertySet "SourceConnectionFile"
              [inString rHS]

getSourceDataFile0 :: IQueryTable a0
                   -> IO String
getSourceDataFile0 =
  propertyGet "SourceDataFile"
              []
              outString

setSourceDataFile :: String
                  -> IQueryTable a0
                  -> IO ()
setSourceDataFile rHS =
  propertySet "SourceDataFile"
              [inString rHS]

getRobustConnect0 :: IQueryTable a0
                  -> IO XlRobustConnect
getRobustConnect0 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect0 :: XlRobustConnect
                  -> IQueryTable a0
                  -> IO ()
setRobustConnect0 rHS =
  propertySet "RobustConnect"
              [inEnum rHS]

getTextFileTrailingMinusNumbers :: IQueryTable a0
                                -> IO Bool
getTextFileTrailingMinusNumbers =
  propertyGet "TextFileTrailingMinusNumbers"
              []
              outBool

setTextFileTrailingMinusNumbers :: Bool
                                -> IQueryTable a0
                                -> IO ()
setTextFileTrailingMinusNumbers rHS =
  propertySet "TextFileTrailingMinusNumbers"
              [inBool rHS]

saveAsODC0 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> IQueryTable a0
           -> IO ()
saveAsODC0 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getListObject0 :: IQueryTable a0
               -> IO (ListObject ())
getListObject0 =
  propertyGet "ListObject"
              []
              outIUnknown

getTextFileVisualLayout :: IQueryTable a0
                        -> IO XlTextVisualLayoutType
getTextFileVisualLayout =
  propertyGet "TextFileVisualLayout"
              []
              outEnum

setTextFileVisualLayout :: XlTextVisualLayoutType
                        -> IQueryTable a0
                        -> IO ()
setTextFileVisualLayout rHS =
  propertySet "TextFileVisualLayout"
              [inEnum rHS]

getWorkbookConnection0 :: IQueryTable a0
                       -> IO (WorkbookConnection ())
getWorkbookConnection0 =
  propertyGet "WorkbookConnection"
              []
              outIUnknown

getSort1 :: IQueryTable a0
         -> IO (Sort ())
getSort1 =
  propertyGet "Sort"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IQueryTables
-- 
-- --------------------------------------------------
data IQueryTables_ a = IQueryTables__ 
type IQueryTables a = IDispatch (IQueryTables_ a)
iidIQueryTables :: IID (IQueryTables ())
iidIQueryTables = mkIID "{00024429-0001-0000-C000-000000000046}"

getApplication114 :: (Variant a1)
                  => IQueryTables a0
                  -> IO a1
getApplication114 =
  propertyGet "Application"
              []
              outVariant

getCreator114 :: IQueryTables a0
              -> IO XlCreator
getCreator114 =
  propertyGet "Creator"
              []
              outEnum

getParent129 :: IQueryTables a0
             -> IO (IDispatch ())
getParent129 =
  propertyGet "Parent"
              []
              outIDispatch

getCount59 :: IQueryTables a0
           -> IO Int32
getCount59 =
  propertyGet "Count"
              []
              outInt32

add47 :: (Variant a1, Variant a4)
      => a2
      -> Range a3
      -> a4
      -> IQueryTables a0
      -> IO a1
add47 connection destination sql =
  function1 "Add"
            [ inVariant connection
            , inIUnknown destination
            , inVariant sql
            ]
            outVariant

item35 :: (Variant a1)
       => a2
       -> IQueryTables a0
       -> IO a1
item35 index0 =
  function1 "Item"
            [inVariant index0]
            outVariant

getDefault50 :: (Variant a1)
             => a2
             -> IQueryTables a0
             -> IO a1
getDefault50 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outVariant

newEnum28 :: IQueryTables a0
          -> IO (IUnknown ())
newEnum28 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IParameter
-- 
-- --------------------------------------------------
data IParameter_ a = IParameter__ 
type IParameter a = IDispatch (IParameter_ a)
iidIParameter :: IID (IParameter ())
iidIParameter = mkIID "{0002442A-0001-0000-C000-000000000046}"

getApplication115 :: (Variant a1)
                  => IParameter a0
                  -> IO a1
getApplication115 =
  propertyGet "Application"
              []
              outVariant

getCreator115 :: IParameter a0
              -> IO XlCreator
getCreator115 =
  propertyGet "Creator"
              []
              outEnum

getParent130 :: IParameter a0
             -> IO (IDispatch ())
getParent130 =
  propertyGet "Parent"
              []
              outIDispatch

getDataType0 :: IParameter a0
             -> IO XlParameterDataType
getDataType0 =
  propertyGet "DataType"
              []
              outEnum

setDataType :: XlParameterDataType
            -> IParameter a0
            -> IO ()
setDataType rHS =
  propertySet "DataType"
              [inEnum rHS]

getType9 :: IParameter a0
         -> IO XlParameterType
getType9 =
  propertyGet "Type"
              []
              outEnum

getPromptString :: IParameter a0
                -> IO String
getPromptString =
  propertyGet "PromptString"
              []
              outString

getValue22 :: (Variant a1)
           => IParameter a0
           -> IO a1
getValue22 =
  propertyGet "Value"
              []
              outVariant

getSourceRange :: IParameter a0
               -> IO (Range ())
getSourceRange =
  propertyGet "SourceRange"
              []
              outIUnknown

getName40 :: IParameter a0
          -> IO String
getName40 =
  propertyGet "Name"
              []
              outString

setName33 :: String
          -> IParameter a0
          -> IO ()
setName33 rHS =
  propertySet "Name"
              [inString rHS]

setParam :: XlParameterType
         -> a1
         -> IParameter a0
         -> IO ()
setParam type0 value =
  method0 "SetParam"
          [ inEnum type0
          , inVariant value
          ]

getRefreshOnChange :: IParameter a0
                   -> IO Bool
getRefreshOnChange =
  propertyGet "RefreshOnChange"
              []
              outBool

setRefreshOnChange :: Bool
                   -> IParameter a0
                   -> IO ()
setRefreshOnChange rHS =
  propertySet "RefreshOnChange"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IParameters
-- 
-- --------------------------------------------------
data IParameters_ a = IParameters__ 
type IParameters a = IDispatch (IParameters_ a)
iidIParameters :: IID (IParameters ())
iidIParameters = mkIID "{0002442B-0001-0000-C000-000000000046}"

getApplication116 :: (Variant a1)
                  => IParameters a0
                  -> IO a1
getApplication116 =
  propertyGet "Application"
              []
              outVariant

getCreator116 :: IParameters a0
              -> IO XlCreator
getCreator116 =
  propertyGet "Creator"
              []
              outEnum

getParent131 :: IParameters a0
             -> IO (IDispatch ())
getParent131 =
  propertyGet "Parent"
              []
              outIDispatch

add48 :: (Variant a1)
      => String
      -> a1
      -> IParameters a0
      -> IO (Parameter ())
add48 name iDataType =
  function1 "Add"
            [ inString name
            , inVariant iDataType
            ]
            outIUnknown

getCount60 :: IParameters a0
           -> IO Int32
getCount60 =
  propertyGet "Count"
              []
              outInt32

item36 :: a1
       -> IParameters a0
       -> IO (Parameter ())
item36 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault51 :: a1
             -> IParameters a0
             -> IO (Parameter ())
getDefault51 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

delete73 :: IParameters a0
         -> IO ()
delete73 =
  method0 "Delete"
          []

newEnum29 :: IParameters a0
          -> IO (IUnknown ())
newEnum29 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IODBCError
-- 
-- --------------------------------------------------
data IODBCError_ a = IODBCError__ 
type IODBCError a = IDispatch (IODBCError_ a)
iidIODBCError :: IID (IODBCError ())
iidIODBCError = mkIID "{0002442C-0001-0000-C000-000000000046}"

getApplication117 :: (Variant a1)
                  => IODBCError a0
                  -> IO a1
getApplication117 =
  propertyGet "Application"
              []
              outVariant

getCreator117 :: IODBCError a0
              -> IO XlCreator
getCreator117 =
  propertyGet "Creator"
              []
              outEnum

getParent132 :: IODBCError a0
             -> IO (IDispatch ())
getParent132 =
  propertyGet "Parent"
              []
              outIDispatch

getSqlState :: IODBCError a0
            -> IO String
getSqlState =
  propertyGet "SqlState"
              []
              outString

getErrorString0 :: IODBCError a0
                -> IO String
getErrorString0 =
  propertyGet "ErrorString"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IODBCErrors
-- 
-- --------------------------------------------------
data IODBCErrors_ a = IODBCErrors__ 
type IODBCErrors a = IDispatch (IODBCErrors_ a)
iidIODBCErrors :: IID (IODBCErrors ())
iidIODBCErrors = mkIID "{0002442D-0001-0000-C000-000000000046}"

getApplication118 :: (Variant a1)
                  => IODBCErrors a0
                  -> IO a1
getApplication118 =
  propertyGet "Application"
              []
              outVariant

getCreator118 :: IODBCErrors a0
              -> IO XlCreator
getCreator118 =
  propertyGet "Creator"
              []
              outEnum

getParent133 :: IODBCErrors a0
             -> IO (IDispatch ())
getParent133 =
  propertyGet "Parent"
              []
              outIDispatch

getCount61 :: IODBCErrors a0
           -> IO Int32
getCount61 =
  propertyGet "Count"
              []
              outInt32

item37 :: Int32
       -> IODBCErrors a0
       -> IO (ODBCError ())
item37 index0 =
  function1 "Item"
            [inInt32 index0]
            outIUnknown

getDefault52 :: Int32
             -> IODBCErrors a0
             -> IO (ODBCError ())
getDefault52 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

newEnum30 :: IODBCErrors a0
          -> IO (IUnknown ())
newEnum30 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IValidation
-- 
-- --------------------------------------------------
data IValidation_ a = IValidation__ 
type IValidation a = IDispatch (IValidation_ a)
iidIValidation :: IID (IValidation ())
iidIValidation = mkIID "{0002442F-0001-0000-C000-000000000046}"

getApplication119 :: (Variant a1)
                  => IValidation a0
                  -> IO a1
getApplication119 =
  propertyGet "Application"
              []
              outVariant

getCreator119 :: IValidation a0
              -> IO XlCreator
getCreator119 =
  propertyGet "Creator"
              []
              outEnum

getParent134 :: IValidation a0
             -> IO (IDispatch ())
getParent134 =
  propertyGet "Parent"
              []
              outIDispatch

add49 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => XlDVType
      -> a1
      -> a2
      -> a3
      -> a4
      -> IValidation a0
      -> IO ()
add49 type0 alertStyle operator formula1 formula2 =
  method0 "Add"
          [ inEnum type0
          , inVariant alertStyle
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          ]

getAlertStyle :: IValidation a0
              -> IO Int32
getAlertStyle =
  propertyGet "AlertStyle"
              []
              outInt32

getIgnoreBlank :: IValidation a0
               -> IO Bool
getIgnoreBlank =
  propertyGet "IgnoreBlank"
              []
              outBool

setIgnoreBlank :: Bool
               -> IValidation a0
               -> IO ()
setIgnoreBlank rHS =
  propertySet "IgnoreBlank"
              [inBool rHS]

getIMEMode :: IValidation a0
           -> IO Int32
getIMEMode =
  propertyGet "IMEMode"
              []
              outInt32

setIMEMode :: Int32
           -> IValidation a0
           -> IO ()
setIMEMode rHS =
  propertySet "IMEMode"
              [inInt32 rHS]

getInCellDropdown :: IValidation a0
                  -> IO Bool
getInCellDropdown =
  propertyGet "InCellDropdown"
              []
              outBool

setInCellDropdown :: Bool
                  -> IValidation a0
                  -> IO ()
setInCellDropdown rHS =
  propertySet "InCellDropdown"
              [inBool rHS]

delete74 :: IValidation a0
         -> IO ()
delete74 =
  method0 "Delete"
          []

getErrorMessage :: IValidation a0
                -> IO String
getErrorMessage =
  propertyGet "ErrorMessage"
              []
              outString

setErrorMessage :: String
                -> IValidation a0
                -> IO ()
setErrorMessage rHS =
  propertySet "ErrorMessage"
              [inString rHS]

getErrorTitle :: IValidation a0
              -> IO String
getErrorTitle =
  propertyGet "ErrorTitle"
              []
              outString

setErrorTitle :: String
              -> IValidation a0
              -> IO ()
setErrorTitle rHS =
  propertySet "ErrorTitle"
              [inString rHS]

getInputMessage :: IValidation a0
                -> IO String
getInputMessage =
  propertyGet "InputMessage"
              []
              outString

setInputMessage :: String
                -> IValidation a0
                -> IO ()
setInputMessage rHS =
  propertySet "InputMessage"
              [inString rHS]

getInputTitle :: IValidation a0
              -> IO String
getInputTitle =
  propertyGet "InputTitle"
              []
              outString

setInputTitle :: String
              -> IValidation a0
              -> IO ()
setInputTitle rHS =
  propertySet "InputTitle"
              [inString rHS]

getFormula18 :: IValidation a0
             -> IO String
getFormula18 =
  propertyGet "Formula1"
              []
              outString

getFormula21 :: IValidation a0
             -> IO String
getFormula21 =
  propertyGet "Formula2"
              []
              outString

modify1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> IValidation a0
        -> IO ()
modify1 type0 alertStyle operator formula1 formula2 =
  method0 "Modify"
          [ inVariant type0
          , inVariant alertStyle
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          ]

getOperator0 :: IValidation a0
             -> IO Int32
getOperator0 =
  propertyGet "Operator"
              []
              outInt32

getShowError :: IValidation a0
             -> IO Bool
getShowError =
  propertyGet "ShowError"
              []
              outBool

setShowError :: Bool
             -> IValidation a0
             -> IO ()
setShowError rHS =
  propertySet "ShowError"
              [inBool rHS]

getShowInput :: IValidation a0
             -> IO Bool
getShowInput =
  propertyGet "ShowInput"
              []
              outBool

setShowInput :: Bool
             -> IValidation a0
             -> IO ()
setShowInput rHS =
  propertySet "ShowInput"
              [inBool rHS]

getType10 :: IValidation a0
          -> IO Int32
getType10 =
  propertyGet "Type"
              []
              outInt32

getValue23 :: IValidation a0
           -> IO Bool
getValue23 =
  propertyGet "Value"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IHyperlinks
-- 
-- --------------------------------------------------
data IHyperlinks_ a = IHyperlinks__ 
type IHyperlinks a = IDispatch (IHyperlinks_ a)
iidIHyperlinks :: IID (IHyperlinks ())
iidIHyperlinks = mkIID "{00024430-0001-0000-C000-000000000046}"

getApplication120 :: (Variant a1)
                  => IHyperlinks a0
                  -> IO a1
getApplication120 =
  propertyGet "Application"
              []
              outVariant

getCreator120 :: IHyperlinks a0
              -> IO XlCreator
getCreator120 =
  propertyGet "Creator"
              []
              outEnum

getParent135 :: IHyperlinks a0
             -> IO (IDispatch ())
getParent135 =
  propertyGet "Parent"
              []
              outIDispatch

add50 :: (Variant a2, Variant a3, Variant a4)
      => IDispatch a1
      -> String
      -> a2
      -> a3
      -> a4
      -> IHyperlinks a0
      -> IO (IDispatch ())
add50 anchor address subAddress screenTip textToDisplay =
  function1 "Add"
            [ inIDispatch anchor
            , inString address
            , inVariant subAddress
            , inVariant screenTip
            , inVariant textToDisplay
            ]
            outIDispatch

getCount62 :: IHyperlinks a0
           -> IO Int32
getCount62 =
  propertyGet "Count"
              []
              outInt32

getItem22 :: a1
          -> IHyperlinks a0
          -> IO (Hyperlink ())
getItem22 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getDefault53 :: a1
             -> IHyperlinks a0
             -> IO (Hyperlink ())
getDefault53 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum27 :: IHyperlinks a0
             -> IO (IUnknown ())
getNewEnum27 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete75 :: IHyperlinks a0
         -> IO ()
delete75 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface IHyperlink
-- 
-- --------------------------------------------------
data IHyperlink_ a = IHyperlink__ 
type IHyperlink a = IDispatch (IHyperlink_ a)
iidIHyperlink :: IID (IHyperlink ())
iidIHyperlink = mkIID "{00024431-0001-0000-C000-000000000046}"

getApplication121 :: (Variant a1)
                  => IHyperlink a0
                  -> IO a1
getApplication121 =
  propertyGet "Application"
              []
              outVariant

getCreator121 :: IHyperlink a0
              -> IO XlCreator
getCreator121 =
  propertyGet "Creator"
              []
              outEnum

getParent136 :: IHyperlink a0
             -> IO (IDispatch ())
getParent136 =
  propertyGet "Parent"
              []
              outIDispatch

getName41 :: IHyperlink a0
          -> IO String
getName41 =
  propertyGet "Name"
              []
              outString

getRange3 :: IHyperlink a0
          -> IO (Range ())
getRange3 =
  propertyGet "Range"
              []
              outIUnknown

getShape1 :: IHyperlink a0
          -> IO (Shape ())
getShape1 =
  propertyGet "Shape"
              []
              outIUnknown

getSubAddress :: IHyperlink a0
              -> IO String
getSubAddress =
  propertyGet "SubAddress"
              []
              outString

setSubAddress :: String
              -> IHyperlink a0
              -> IO ()
setSubAddress rHS =
  propertySet "SubAddress"
              [inString rHS]

getAddress0 :: IHyperlink a0
            -> IO String
getAddress0 =
  propertyGet "Address"
              []
              outString

setAddress :: String
           -> IHyperlink a0
           -> IO ()
setAddress rHS =
  propertySet "Address"
              [inString rHS]

getType11 :: IHyperlink a0
          -> IO Int32
getType11 =
  propertyGet "Type"
              []
              outInt32

addToFavorites0 :: IHyperlink a0
                -> IO ()
addToFavorites0 =
  method0 "AddToFavorites"
          []

delete76 :: IHyperlink a0
         -> IO ()
delete76 =
  method0 "Delete"
          []

follow :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> IHyperlink a0
       -> IO ()
follow newWindow1 addHistory extraInfo method headerInfo =
  method0 "Follow"
          [ inVariant newWindow1
          , inVariant addHistory
          , inVariant extraInfo
          , inVariant method
          , inVariant headerInfo
          ]

getEmailSubject :: IHyperlink a0
                -> IO String
getEmailSubject =
  propertyGet "EmailSubject"
              []
              outString

setEmailSubject :: String
                -> IHyperlink a0
                -> IO ()
setEmailSubject rHS =
  propertySet "EmailSubject"
              [inString rHS]

getScreenTip :: IHyperlink a0
             -> IO String
getScreenTip =
  propertyGet "ScreenTip"
              []
              outString

setScreenTip :: String
             -> IHyperlink a0
             -> IO ()
setScreenTip rHS =
  propertySet "ScreenTip"
              [inString rHS]

getTextToDisplay :: IHyperlink a0
                 -> IO String
getTextToDisplay =
  propertyGet "TextToDisplay"
              []
              outString

setTextToDisplay :: String
                 -> IHyperlink a0
                 -> IO ()
setTextToDisplay rHS =
  propertySet "TextToDisplay"
              [inString rHS]

createNewDocument :: String
                  -> Bool
                  -> Bool
                  -> IHyperlink a0
                  -> IO ()
createNewDocument filename editNow overwrite =
  method0 "CreateNewDocument"
          [ inString filename
          , inBool editNow
          , inBool overwrite
          ]

-- --------------------------------------------------
-- 
-- interface IAutoFilter
-- 
-- --------------------------------------------------
data IAutoFilter_ a = IAutoFilter__ 
type IAutoFilter a = IDispatch (IAutoFilter_ a)
iidIAutoFilter :: IID (IAutoFilter ())
iidIAutoFilter = mkIID "{00024432-0001-0000-C000-000000000046}"

getApplication122 :: (Variant a1)
                  => IAutoFilter a0
                  -> IO a1
getApplication122 =
  propertyGet "Application"
              []
              outVariant

getCreator122 :: IAutoFilter a0
              -> IO XlCreator
getCreator122 =
  propertyGet "Creator"
              []
              outEnum

getParent137 :: IAutoFilter a0
             -> IO (IDispatch ())
getParent137 =
  propertyGet "Parent"
              []
              outIDispatch

getRange4 :: IAutoFilter a0
          -> IO (Range ())
getRange4 =
  propertyGet "Range"
              []
              outIUnknown

getFilters :: IAutoFilter a0
           -> IO (Filters ())
getFilters =
  propertyGet "Filters"
              []
              outIUnknown

getFilterMode0 :: IAutoFilter a0
               -> IO Bool
getFilterMode0 =
  propertyGet "FilterMode"
              []
              outBool

getSort2 :: IAutoFilter a0
         -> IO (Sort ())
getSort2 =
  propertyGet "Sort"
              []
              outIUnknown

applyFilter :: IAutoFilter a0
            -> IO ()
applyFilter =
  method0 "ApplyFilter"
          []

showAllData0 :: IAutoFilter a0
             -> IO ()
showAllData0 =
  method0 "ShowAllData"
          []

-- --------------------------------------------------
-- 
-- interface IFilters
-- 
-- --------------------------------------------------
data IFilters_ a = IFilters__ 
type IFilters a = IDispatch (IFilters_ a)
iidIFilters :: IID (IFilters ())
iidIFilters = mkIID "{00024433-0001-0000-C000-000000000046}"

getApplication123 :: (Variant a1)
                  => IFilters a0
                  -> IO a1
getApplication123 =
  propertyGet "Application"
              []
              outVariant

getCreator123 :: IFilters a0
              -> IO XlCreator
getCreator123 =
  propertyGet "Creator"
              []
              outEnum

getParent138 :: IFilters a0
             -> IO (IDispatch ())
getParent138 =
  propertyGet "Parent"
              []
              outIDispatch

getCount63 :: IFilters a0
           -> IO Int32
getCount63 =
  propertyGet "Count"
              []
              outInt32

getDefault54 :: Int32
             -> IFilters a0
             -> IO (Filter ())
getDefault54 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

getItem23 :: Int32
          -> IFilters a0
          -> IO (Filter ())
getItem23 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIUnknown

getNewEnum28 :: IFilters a0
             -> IO (IUnknown ())
getNewEnum28 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IFilter
-- 
-- --------------------------------------------------
data IFilter_ a = IFilter__ 
type IFilter a = IDispatch (IFilter_ a)
iidIFilter :: IID (IFilter ())
iidIFilter = mkIID "{00024434-0001-0000-C000-000000000046}"

getApplication124 :: (Variant a1)
                  => IFilter a0
                  -> IO a1
getApplication124 =
  propertyGet "Application"
              []
              outVariant

getCreator124 :: IFilter a0
              -> IO XlCreator
getCreator124 =
  propertyGet "Creator"
              []
              outEnum

getParent139 :: IFilter a0
             -> IO (IDispatch ())
getParent139 =
  propertyGet "Parent"
              []
              outIDispatch

getOn :: IFilter a0
      -> IO Bool
getOn =
  propertyGet "On"
              []
              outBool

getCriteria1 :: (Variant a1)
             => IFilter a0
             -> IO a1
getCriteria1 =
  propertyGet "Criteria1"
              []
              outVariant

getOperator1 :: IFilter a0
             -> IO XlAutoFilterOperator
getOperator1 =
  propertyGet "_Operator"
              []
              outEnum

getCriteria2 :: (Variant a1)
             => IFilter a0
             -> IO a1
getCriteria2 =
  propertyGet "Criteria2"
              []
              outVariant

getOperator2 :: IFilter a0
             -> IO XlAutoFilterOperator
getOperator2 =
  propertyGet "Operator"
              []
              outEnum

setOperator :: XlAutoFilterOperator
            -> IFilter a0
            -> IO ()
setOperator rHS =
  propertySet "Operator"
              [inEnum rHS]

getCount64 :: IFilter a0
           -> IO Int32
getCount64 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IAutoCorrect
-- 
-- --------------------------------------------------
data IAutoCorrect_ a = IAutoCorrect__ 
type IAutoCorrect a = IDispatch (IAutoCorrect_ a)
iidIAutoCorrect :: IID (IAutoCorrect ())
iidIAutoCorrect = mkIID "{000208D4-0001-0000-C000-000000000046}"

getApplication125 :: (Variant a1)
                  => IAutoCorrect a0
                  -> IO a1
getApplication125 =
  propertyGet "Application"
              []
              outVariant

getCreator125 :: IAutoCorrect a0
              -> IO XlCreator
getCreator125 =
  propertyGet "Creator"
              []
              outEnum

getParent140 :: IAutoCorrect a0
             -> IO (IDispatch ())
getParent140 =
  propertyGet "Parent"
              []
              outIDispatch

addReplacement :: (Variant a1)
               => String
               -> String
               -> IAutoCorrect a0
               -> IO a1
addReplacement what replacement =
  function1 "AddReplacement"
            [ inString what
            , inString replacement
            ]
            outVariant

getCapitalizeNamesOfDays :: IAutoCorrect a0
                         -> IO Bool
getCapitalizeNamesOfDays =
  propertyGet "CapitalizeNamesOfDays"
              []
              outBool

setCapitalizeNamesOfDays :: Bool
                         -> IAutoCorrect a0
                         -> IO ()
setCapitalizeNamesOfDays rHS =
  propertySet "CapitalizeNamesOfDays"
              [inBool rHS]

deleteReplacement :: (Variant a1)
                  => String
                  -> IAutoCorrect a0
                  -> IO a1
deleteReplacement what =
  function1 "DeleteReplacement"
            [inString what]
            outVariant

getReplacementList :: (Variant a1, Variant a2)
                   => a2
                   -> IAutoCorrect a0
                   -> IO a1
getReplacementList index0 =
  propertyGet "ReplacementList"
              [inVariant index0]
              outVariant

setReplacementList :: (Variant a1)
                   => a1
                   -> a2
                   -> IAutoCorrect a0
                   -> IO ()
setReplacementList index0 rHS =
  propertySet "ReplacementList"
              [ inVariant index0
              , inVariant rHS
              ]

getReplaceText :: IAutoCorrect a0
               -> IO Bool
getReplaceText =
  propertyGet "ReplaceText"
              []
              outBool

setReplaceText :: Bool
               -> IAutoCorrect a0
               -> IO ()
setReplaceText rHS =
  propertySet "ReplaceText"
              [inBool rHS]

getTwoInitialCapitals :: IAutoCorrect a0
                      -> IO Bool
getTwoInitialCapitals =
  propertyGet "TwoInitialCapitals"
              []
              outBool

setTwoInitialCapitals :: Bool
                      -> IAutoCorrect a0
                      -> IO ()
setTwoInitialCapitals rHS =
  propertySet "TwoInitialCapitals"
              [inBool rHS]

getCorrectSentenceCap :: IAutoCorrect a0
                      -> IO Bool
getCorrectSentenceCap =
  propertyGet "CorrectSentenceCap"
              []
              outBool

setCorrectSentenceCap :: Bool
                      -> IAutoCorrect a0
                      -> IO ()
setCorrectSentenceCap rHS =
  propertySet "CorrectSentenceCap"
              [inBool rHS]

getCorrectCapsLock :: IAutoCorrect a0
                   -> IO Bool
getCorrectCapsLock =
  propertyGet "CorrectCapsLock"
              []
              outBool

setCorrectCapsLock :: Bool
                   -> IAutoCorrect a0
                   -> IO ()
setCorrectCapsLock rHS =
  propertySet "CorrectCapsLock"
              [inBool rHS]

getDisplayAutoCorrectOptions :: IAutoCorrect a0
                             -> IO Bool
getDisplayAutoCorrectOptions =
  propertyGet "DisplayAutoCorrectOptions"
              []
              outBool

setDisplayAutoCorrectOptions :: Bool
                             -> IAutoCorrect a0
                             -> IO ()
setDisplayAutoCorrectOptions rHS =
  propertySet "DisplayAutoCorrectOptions"
              [inBool rHS]

getAutoExpandListRange :: IAutoCorrect a0
                       -> IO Bool
getAutoExpandListRange =
  propertyGet "AutoExpandListRange"
              []
              outBool

setAutoExpandListRange :: Bool
                       -> IAutoCorrect a0
                       -> IO ()
setAutoExpandListRange rHS =
  propertySet "AutoExpandListRange"
              [inBool rHS]

getAutoFillFormulasInLists :: IAutoCorrect a0
                           -> IO Bool
getAutoFillFormulasInLists =
  propertyGet "AutoFillFormulasInLists"
              []
              outBool

setAutoFillFormulasInLists :: Bool
                           -> IAutoCorrect a0
                           -> IO ()
setAutoFillFormulasInLists rHS =
  propertySet "AutoFillFormulasInLists"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IBorder
-- 
-- --------------------------------------------------
data IBorder_ a = IBorder__ 
type IBorder a = IDispatch (IBorder_ a)
iidIBorder :: IID (IBorder ())
iidIBorder = mkIID "{00020854-0001-0000-C000-000000000046}"

getApplication126 :: (Variant a1)
                  => IBorder a0
                  -> IO a1
getApplication126 =
  propertyGet "Application"
              []
              outVariant

getCreator126 :: IBorder a0
              -> IO XlCreator
getCreator126 =
  propertyGet "Creator"
              []
              outEnum

getParent141 :: IBorder a0
             -> IO (IDispatch ())
getParent141 =
  propertyGet "Parent"
              []
              outIDispatch

getColor1 :: (Variant a1)
          => IBorder a0
          -> IO a1
getColor1 =
  propertyGet "Color"
              []
              outVariant

setColor1 :: a1
          -> IBorder a0
          -> IO ()
setColor1 rHS =
  propertySet "Color"
              [inVariant rHS]

getColorIndex1 :: (Variant a1)
               => IBorder a0
               -> IO a1
getColorIndex1 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex1 :: a1
               -> IBorder a0
               -> IO ()
setColorIndex1 rHS =
  propertySet "ColorIndex"
              [inVariant rHS]

getLineStyle0 :: (Variant a1)
              => IBorder a0
              -> IO a1
getLineStyle0 =
  propertyGet "LineStyle"
              []
              outVariant

setLineStyle0 :: a1
              -> IBorder a0
              -> IO ()
setLineStyle0 rHS =
  propertySet "LineStyle"
              [inVariant rHS]

getWeight1 :: (Variant a1)
           => IBorder a0
           -> IO a1
getWeight1 =
  propertyGet "Weight"
              []
              outVariant

setWeight1 :: a1
           -> IBorder a0
           -> IO ()
setWeight1 rHS =
  propertySet "Weight"
              [inVariant rHS]

getThemeColor1 :: (Variant a1)
               => IBorder a0
               -> IO a1
getThemeColor1 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor1 :: a1
               -> IBorder a0
               -> IO ()
setThemeColor1 rHS =
  propertySet "ThemeColor"
              [inVariant rHS]

getTintAndShade2 :: (Variant a1)
                 => IBorder a0
                 -> IO a1
getTintAndShade2 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade2 :: a1
                 -> IBorder a0
                 -> IO ()
setTintAndShade2 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IInterior
-- 
-- --------------------------------------------------
data IInterior_ a = IInterior__ 
type IInterior a = IDispatch (IInterior_ a)
iidIInterior :: IID (IInterior ())
iidIInterior = mkIID "{00020870-0001-0000-C000-000000000046}"

getApplication127 :: (Variant a1)
                  => IInterior a0
                  -> IO a1
getApplication127 =
  propertyGet "Application"
              []
              outVariant

getCreator127 :: IInterior a0
              -> IO XlCreator
getCreator127 =
  propertyGet "Creator"
              []
              outEnum

getParent142 :: IInterior a0
             -> IO (IDispatch ())
getParent142 =
  propertyGet "Parent"
              []
              outIDispatch

getColor2 :: (Variant a1)
          => IInterior a0
          -> IO a1
getColor2 =
  propertyGet "Color"
              []
              outVariant

setColor2 :: a1
          -> IInterior a0
          -> IO ()
setColor2 rHS =
  propertySet "Color"
              [inVariant rHS]

getColorIndex2 :: (Variant a1)
               => IInterior a0
               -> IO a1
getColorIndex2 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex2 :: a1
               -> IInterior a0
               -> IO ()
setColorIndex2 rHS =
  propertySet "ColorIndex"
              [inVariant rHS]

getInvertIfNegative :: (Variant a1)
                    => IInterior a0
                    -> IO a1
getInvertIfNegative =
  propertyGet "InvertIfNegative"
              []
              outVariant

setInvertIfNegative :: a1
                    -> IInterior a0
                    -> IO ()
setInvertIfNegative rHS =
  propertySet "InvertIfNegative"
              [inVariant rHS]

getPattern1 :: (Variant a1)
            => IInterior a0
            -> IO a1
getPattern1 =
  propertyGet "Pattern"
              []
              outVariant

setPattern0 :: a1
            -> IInterior a0
            -> IO ()
setPattern0 rHS =
  propertySet "Pattern"
              [inVariant rHS]

getPatternColor :: (Variant a1)
                => IInterior a0
                -> IO a1
getPatternColor =
  propertyGet "PatternColor"
              []
              outVariant

setPatternColor :: a1
                -> IInterior a0
                -> IO ()
setPatternColor rHS =
  propertySet "PatternColor"
              [inVariant rHS]

getPatternColorIndex :: (Variant a1)
                     => IInterior a0
                     -> IO a1
getPatternColorIndex =
  propertyGet "PatternColorIndex"
              []
              outVariant

setPatternColorIndex :: a1
                     -> IInterior a0
                     -> IO ()
setPatternColorIndex rHS =
  propertySet "PatternColorIndex"
              [inVariant rHS]

getThemeColor2 :: (Variant a1)
               => IInterior a0
               -> IO a1
getThemeColor2 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor2 :: a1
               -> IInterior a0
               -> IO ()
setThemeColor2 rHS =
  propertySet "ThemeColor"
              [inVariant rHS]

getTintAndShade3 :: (Variant a1)
                 => IInterior a0
                 -> IO a1
getTintAndShade3 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade3 :: a1
                 -> IInterior a0
                 -> IO ()
setTintAndShade3 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

getPatternThemeColor :: (Variant a1)
                     => IInterior a0
                     -> IO a1
getPatternThemeColor =
  propertyGet "PatternThemeColor"
              []
              outVariant

setPatternThemeColor :: a1
                     -> IInterior a0
                     -> IO ()
setPatternThemeColor rHS =
  propertySet "PatternThemeColor"
              [inVariant rHS]

getPatternTintAndShade :: (Variant a1)
                       => IInterior a0
                       -> IO a1
getPatternTintAndShade =
  propertyGet "PatternTintAndShade"
              []
              outVariant

setPatternTintAndShade :: a1
                       -> IInterior a0
                       -> IO ()
setPatternTintAndShade rHS =
  propertySet "PatternTintAndShade"
              [inVariant rHS]

getGradient :: IInterior a0
            -> IO (IDispatch ())
getGradient =
  propertyGet "Gradient"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface IChartFillFormat
-- 
-- --------------------------------------------------
data IChartFillFormat_ a = IChartFillFormat__ 
type IChartFillFormat a = IDispatch (IChartFillFormat_ a)
iidIChartFillFormat :: IID (IChartFillFormat ())
iidIChartFillFormat =
  mkIID "{00024435-0001-0000-C000-000000000046}"

getApplication128 :: (Variant a1)
                  => IChartFillFormat a0
                  -> IO a1
getApplication128 =
  propertyGet "Application"
              []
              outVariant

getCreator128 :: IChartFillFormat a0
              -> IO XlCreator
getCreator128 =
  propertyGet "Creator"
              []
              outEnum

getParent143 :: IChartFillFormat a0
             -> IO (IDispatch ())
getParent143 =
  propertyGet "Parent"
              []
              outIDispatch

oneColorGradient0 :: (Variant a1)
                  => a1
                  -> Int32
                  -> Float
                  -> IChartFillFormat a0
                  -> IO ()
oneColorGradient0 style variant degree =
  method0 "OneColorGradient"
          [ inVariant style
          , inInt32 variant
          , inFloat degree
          ]

twoColorGradient0 :: (Variant a1)
                  => a1
                  -> Int32
                  -> IChartFillFormat a0
                  -> IO ()
twoColorGradient0 style variant =
  method0 "TwoColorGradient"
          [ inVariant style
          , inInt32 variant
          ]

presetTextured0 :: (Variant a1)
                => a1
                -> IChartFillFormat a0
                -> IO ()
presetTextured0 presetTexture =
  method0 "PresetTextured"
          [inVariant presetTexture]

solid0 :: IChartFillFormat a0
       -> IO ()
solid0 =
  method0 "Solid"
          []

patterned0 :: (Variant a1)
           => a1
           -> IChartFillFormat a0
           -> IO ()
patterned0 pattern =
  method0 "Patterned"
          [inVariant pattern]

userPicture0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
             => a1
             -> a2
             -> a3
             -> a4
             -> IChartFillFormat a0
             -> IO ()
userPicture0 pictureFile pictureFormat pictureStackUnit picturePlacement =
  method0 "UserPicture"
          [ inVariant pictureFile
          , inVariant pictureFormat
          , inVariant pictureStackUnit
          , inVariant picturePlacement
          ]

userTextured0 :: String
              -> IChartFillFormat a0
              -> IO ()
userTextured0 textureFile =
  method0 "UserTextured"
          [inString textureFile]

presetGradient0 :: (Variant a1, Variant a2)
                => a1
                -> Int32
                -> a2
                -> IChartFillFormat a0
                -> IO ()
presetGradient0 style variant presetGradientType =
  method0 "PresetGradient"
          [ inVariant style
          , inInt32 variant
          , inVariant presetGradientType
          ]

getBackColor1 :: IChartFillFormat a0
              -> IO (ChartColorFormat ())
getBackColor1 =
  propertyGet "BackColor"
              []
              outIUnknown

getForeColor2 :: IChartFillFormat a0
              -> IO (ChartColorFormat ())
getForeColor2 =
  propertyGet "ForeColor"
              []
              outIUnknown

getGradientColorType0 :: (Variant a1)
                      => IChartFillFormat a0
                      -> IO a1
getGradientColorType0 =
  propertyGet "GradientColorType"
              []
              outVariant

getGradientDegree0 :: IChartFillFormat a0
                   -> IO Float
getGradientDegree0 =
  propertyGet "GradientDegree"
              []
              outFloat

getGradientStyle0 :: (Variant a1)
                  => IChartFillFormat a0
                  -> IO a1
getGradientStyle0 =
  propertyGet "GradientStyle"
              []
              outVariant

getGradientVariant0 :: IChartFillFormat a0
                    -> IO Int32
getGradientVariant0 =
  propertyGet "GradientVariant"
              []
              outInt32

getPattern2 :: (Variant a1)
            => IChartFillFormat a0
            -> IO a1
getPattern2 =
  propertyGet "Pattern"
              []
              outVariant

getPresetGradientType0 :: (Variant a1)
                       => IChartFillFormat a0
                       -> IO a1
getPresetGradientType0 =
  propertyGet "PresetGradientType"
              []
              outVariant

getPresetTexture0 :: (Variant a1)
                  => IChartFillFormat a0
                  -> IO a1
getPresetTexture0 =
  propertyGet "PresetTexture"
              []
              outVariant

getTextureName0 :: IChartFillFormat a0
                -> IO String
getTextureName0 =
  propertyGet "TextureName"
              []
              outString

getTextureType0 :: (Variant a1)
                => IChartFillFormat a0
                -> IO a1
getTextureType0 =
  propertyGet "TextureType"
              []
              outVariant

getType12 :: (Variant a1)
          => IChartFillFormat a0
          -> IO a1
getType12 =
  propertyGet "Type"
              []
              outVariant

getVisible59 :: (Variant a1)
             => IChartFillFormat a0
             -> IO a1
getVisible59 =
  propertyGet "Visible"
              []
              outVariant

setVisible59 :: (Variant a1)
             => a1
             -> IChartFillFormat a0
             -> IO ()
setVisible59 rHS =
  propertySet "Visible"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IChartColorFormat
-- 
-- --------------------------------------------------
data IChartColorFormat_ a = IChartColorFormat__ 
type IChartColorFormat a = IDispatch (IChartColorFormat_ a)
iidIChartColorFormat :: IID (IChartColorFormat ())
iidIChartColorFormat =
  mkIID "{00024436-0001-0000-C000-000000000046}"

getApplication129 :: (Variant a1)
                  => IChartColorFormat a0
                  -> IO a1
getApplication129 =
  propertyGet "Application"
              []
              outVariant

getCreator129 :: IChartColorFormat a0
              -> IO XlCreator
getCreator129 =
  propertyGet "Creator"
              []
              outEnum

getParent144 :: IChartColorFormat a0
             -> IO (IDispatch ())
getParent144 =
  propertyGet "Parent"
              []
              outIDispatch

getSchemeColor0 :: IChartColorFormat a0
                -> IO Int32
getSchemeColor0 =
  propertyGet "SchemeColor"
              []
              outInt32

setSchemeColor0 :: Int32
                -> IChartColorFormat a0
                -> IO ()
setSchemeColor0 rHS =
  propertySet "SchemeColor"
              [inInt32 rHS]

getRGB0 :: IChartColorFormat a0
        -> IO Int32
getRGB0 =
  propertyGet "RGB"
              []
              outInt32

getDefault55 :: IChartColorFormat a0
             -> IO Int32
getDefault55 =
  propertyGet "_Default"
              []
              outInt32

getType13 :: IChartColorFormat a0
          -> IO Int32
getType13 =
  propertyGet "Type"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IAxis
-- 
-- --------------------------------------------------
data IAxis_ a = IAxis__ 
type IAxis a = IDispatch (IAxis_ a)
iidIAxis :: IID (IAxis ())
iidIAxis = mkIID "{00020848-0001-0000-C000-000000000046}"

getApplication130 :: (Variant a1)
                  => IAxis a0
                  -> IO a1
getApplication130 =
  propertyGet "Application"
              []
              outVariant

getCreator130 :: IAxis a0
              -> IO XlCreator
getCreator130 =
  propertyGet "Creator"
              []
              outEnum

getParent145 :: IAxis a0
             -> IO (IDispatch ())
getParent145 =
  propertyGet "Parent"
              []
              outIDispatch

getAxisBetweenCategories :: IAxis a0
                         -> IO Bool
getAxisBetweenCategories =
  propertyGet "AxisBetweenCategories"
              []
              outBool

setAxisBetweenCategories :: Bool
                         -> IAxis a0
                         -> IO ()
setAxisBetweenCategories rHS =
  propertySet "AxisBetweenCategories"
              [inBool rHS]

getAxisGroup :: IAxis a0
             -> IO XlAxisGroup
getAxisGroup =
  propertyGet "AxisGroup"
              []
              outEnum

getAxisTitle :: IAxis a0
             -> IO (AxisTitle ())
getAxisTitle =
  propertyGet "AxisTitle"
              []
              outIUnknown

getBorder25 :: IAxis a0
            -> IO (Border ())
getBorder25 =
  propertyGet "Border"
              []
              outIUnknown

getCategoryNames :: (Variant a1)
                 => IAxis a0
                 -> IO a1
getCategoryNames =
  propertyGet "CategoryNames"
              []
              outVariant

setCategoryNames :: a1
                 -> IAxis a0
                 -> IO ()
setCategoryNames rHS =
  propertySet "CategoryNames"
              [inVariant rHS]

getCrosses :: IAxis a0
           -> IO XlAxisCrosses
getCrosses =
  propertyGet "Crosses"
              []
              outEnum

setCrosses :: XlAxisCrosses
           -> IAxis a0
           -> IO ()
setCrosses rHS =
  propertySet "Crosses"
              [inEnum rHS]

getCrossesAt :: IAxis a0
             -> IO Double
getCrossesAt =
  propertyGet "CrossesAt"
              []
              outDouble

setCrossesAt :: Double
             -> IAxis a0
             -> IO ()
setCrossesAt rHS =
  propertySet "CrossesAt"
              [inDouble rHS]

delete77 :: (Variant a1)
         => IAxis a0
         -> IO a1
delete77 =
  function1 "Delete"
            []
            outVariant

getHasMajorGridlines :: IAxis a0
                     -> IO Bool
getHasMajorGridlines =
  propertyGet "HasMajorGridlines"
              []
              outBool

setHasMajorGridlines :: Bool
                     -> IAxis a0
                     -> IO ()
setHasMajorGridlines rHS =
  propertySet "HasMajorGridlines"
              [inBool rHS]

getHasMinorGridlines :: IAxis a0
                     -> IO Bool
getHasMinorGridlines =
  propertyGet "HasMinorGridlines"
              []
              outBool

setHasMinorGridlines :: Bool
                     -> IAxis a0
                     -> IO ()
setHasMinorGridlines rHS =
  propertySet "HasMinorGridlines"
              [inBool rHS]

getHasTitle0 :: IAxis a0
             -> IO Bool
getHasTitle0 =
  propertyGet "HasTitle"
              []
              outBool

setHasTitle0 :: Bool
             -> IAxis a0
             -> IO ()
setHasTitle0 rHS =
  propertySet "HasTitle"
              [inBool rHS]

getMajorGridlines :: IAxis a0
                  -> IO (Gridlines ())
getMajorGridlines =
  propertyGet "MajorGridlines"
              []
              outIUnknown

getMajorTickMark :: IAxis a0
                 -> IO XlTickMark
getMajorTickMark =
  propertyGet "MajorTickMark"
              []
              outEnum

setMajorTickMark :: XlTickMark
                 -> IAxis a0
                 -> IO ()
setMajorTickMark rHS =
  propertySet "MajorTickMark"
              [inEnum rHS]

getMajorUnit :: IAxis a0
             -> IO Double
getMajorUnit =
  propertyGet "MajorUnit"
              []
              outDouble

setMajorUnit :: Double
             -> IAxis a0
             -> IO ()
setMajorUnit rHS =
  propertySet "MajorUnit"
              [inDouble rHS]

getMajorUnitIsAuto :: IAxis a0
                   -> IO Bool
getMajorUnitIsAuto =
  propertyGet "MajorUnitIsAuto"
              []
              outBool

setMajorUnitIsAuto :: Bool
                   -> IAxis a0
                   -> IO ()
setMajorUnitIsAuto rHS =
  propertySet "MajorUnitIsAuto"
              [inBool rHS]

getMaximumScale :: IAxis a0
                -> IO Double
getMaximumScale =
  propertyGet "MaximumScale"
              []
              outDouble

setMaximumScale :: Double
                -> IAxis a0
                -> IO ()
setMaximumScale rHS =
  propertySet "MaximumScale"
              [inDouble rHS]

getMaximumScaleIsAuto :: IAxis a0
                      -> IO Bool
getMaximumScaleIsAuto =
  propertyGet "MaximumScaleIsAuto"
              []
              outBool

setMaximumScaleIsAuto :: Bool
                      -> IAxis a0
                      -> IO ()
setMaximumScaleIsAuto rHS =
  propertySet "MaximumScaleIsAuto"
              [inBool rHS]

getMinimumScale :: IAxis a0
                -> IO Double
getMinimumScale =
  propertyGet "MinimumScale"
              []
              outDouble

setMinimumScale :: Double
                -> IAxis a0
                -> IO ()
setMinimumScale rHS =
  propertySet "MinimumScale"
              [inDouble rHS]

getMinimumScaleIsAuto :: IAxis a0
                      -> IO Bool
getMinimumScaleIsAuto =
  propertyGet "MinimumScaleIsAuto"
              []
              outBool

setMinimumScaleIsAuto :: Bool
                      -> IAxis a0
                      -> IO ()
setMinimumScaleIsAuto rHS =
  propertySet "MinimumScaleIsAuto"
              [inBool rHS]

getMinorGridlines :: IAxis a0
                  -> IO (Gridlines ())
getMinorGridlines =
  propertyGet "MinorGridlines"
              []
              outIUnknown

getMinorTickMark :: IAxis a0
                 -> IO XlTickMark
getMinorTickMark =
  propertyGet "MinorTickMark"
              []
              outEnum

setMinorTickMark :: XlTickMark
                 -> IAxis a0
                 -> IO ()
setMinorTickMark rHS =
  propertySet "MinorTickMark"
              [inEnum rHS]

getMinorUnit :: IAxis a0
             -> IO Double
getMinorUnit =
  propertyGet "MinorUnit"
              []
              outDouble

setMinorUnit :: Double
             -> IAxis a0
             -> IO ()
setMinorUnit rHS =
  propertySet "MinorUnit"
              [inDouble rHS]

getMinorUnitIsAuto :: IAxis a0
                   -> IO Bool
getMinorUnitIsAuto =
  propertyGet "MinorUnitIsAuto"
              []
              outBool

setMinorUnitIsAuto :: Bool
                   -> IAxis a0
                   -> IO ()
setMinorUnitIsAuto rHS =
  propertySet "MinorUnitIsAuto"
              [inBool rHS]

getReversePlotOrder :: IAxis a0
                    -> IO Bool
getReversePlotOrder =
  propertyGet "ReversePlotOrder"
              []
              outBool

setReversePlotOrder :: Bool
                    -> IAxis a0
                    -> IO ()
setReversePlotOrder rHS =
  propertySet "ReversePlotOrder"
              [inBool rHS]

getScaleType :: IAxis a0
             -> IO XlScaleType
getScaleType =
  propertyGet "ScaleType"
              []
              outEnum

setScaleType :: XlScaleType
             -> IAxis a0
             -> IO ()
setScaleType rHS =
  propertySet "ScaleType"
              [inEnum rHS]

select52 :: (Variant a1)
         => IAxis a0
         -> IO a1
select52 =
  function1 "Select"
            []
            outVariant

getTickLabelPosition :: IAxis a0
                     -> IO XlTickLabelPosition
getTickLabelPosition =
  propertyGet "TickLabelPosition"
              []
              outEnum

setTickLabelPosition :: XlTickLabelPosition
                     -> IAxis a0
                     -> IO ()
setTickLabelPosition rHS =
  propertySet "TickLabelPosition"
              [inEnum rHS]

getTickLabels :: IAxis a0
              -> IO (TickLabels ())
getTickLabels =
  propertyGet "TickLabels"
              []
              outIUnknown

getTickLabelSpacing :: IAxis a0
                    -> IO Int32
getTickLabelSpacing =
  propertyGet "TickLabelSpacing"
              []
              outInt32

setTickLabelSpacing :: Int32
                    -> IAxis a0
                    -> IO ()
setTickLabelSpacing rHS =
  propertySet "TickLabelSpacing"
              [inInt32 rHS]

getTickMarkSpacing :: IAxis a0
                   -> IO Int32
getTickMarkSpacing =
  propertyGet "TickMarkSpacing"
              []
              outInt32

setTickMarkSpacing :: Int32
                   -> IAxis a0
                   -> IO ()
setTickMarkSpacing rHS =
  propertySet "TickMarkSpacing"
              [inInt32 rHS]

getType14 :: IAxis a0
          -> IO XlAxisType
getType14 =
  propertyGet "Type"
              []
              outEnum

setType4 :: XlAxisType
         -> IAxis a0
         -> IO ()
setType4 rHS =
  propertySet "Type"
              [inEnum rHS]

getBaseUnit :: IAxis a0
            -> IO XlTimeUnit
getBaseUnit =
  propertyGet "BaseUnit"
              []
              outEnum

setBaseUnit :: XlTimeUnit
            -> IAxis a0
            -> IO ()
setBaseUnit rHS =
  propertySet "BaseUnit"
              [inEnum rHS]

getBaseUnitIsAuto :: IAxis a0
                  -> IO Bool
getBaseUnitIsAuto =
  propertyGet "BaseUnitIsAuto"
              []
              outBool

setBaseUnitIsAuto :: Bool
                  -> IAxis a0
                  -> IO ()
setBaseUnitIsAuto rHS =
  propertySet "BaseUnitIsAuto"
              [inBool rHS]

getMajorUnitScale :: IAxis a0
                  -> IO XlTimeUnit
getMajorUnitScale =
  propertyGet "MajorUnitScale"
              []
              outEnum

setMajorUnitScale :: XlTimeUnit
                  -> IAxis a0
                  -> IO ()
setMajorUnitScale rHS =
  propertySet "MajorUnitScale"
              [inEnum rHS]

getMinorUnitScale :: IAxis a0
                  -> IO XlTimeUnit
getMinorUnitScale =
  propertyGet "MinorUnitScale"
              []
              outEnum

setMinorUnitScale :: XlTimeUnit
                  -> IAxis a0
                  -> IO ()
setMinorUnitScale rHS =
  propertySet "MinorUnitScale"
              [inEnum rHS]

getCategoryType :: IAxis a0
                -> IO XlCategoryType
getCategoryType =
  propertyGet "CategoryType"
              []
              outEnum

setCategoryType :: XlCategoryType
                -> IAxis a0
                -> IO ()
setCategoryType rHS =
  propertySet "CategoryType"
              [inEnum rHS]

getLeft45 :: IAxis a0
          -> IO Double
getLeft45 =
  propertyGet "Left"
              []
              outDouble

getTop45 :: IAxis a0
         -> IO Double
getTop45 =
  propertyGet "Top"
              []
              outDouble

getWidth46 :: IAxis a0
           -> IO Double
getWidth46 =
  propertyGet "Width"
              []
              outDouble

getHeight45 :: IAxis a0
            -> IO Double
getHeight45 =
  propertyGet "Height"
              []
              outDouble

getDisplayUnit :: IAxis a0
               -> IO XlDisplayUnit
getDisplayUnit =
  propertyGet "DisplayUnit"
              []
              outEnum

setDisplayUnit :: XlDisplayUnit
               -> IAxis a0
               -> IO ()
setDisplayUnit rHS =
  propertySet "DisplayUnit"
              [inEnum rHS]

getDisplayUnitCustom :: IAxis a0
                     -> IO Double
getDisplayUnitCustom =
  propertyGet "DisplayUnitCustom"
              []
              outDouble

setDisplayUnitCustom :: Double
                     -> IAxis a0
                     -> IO ()
setDisplayUnitCustom rHS =
  propertySet "DisplayUnitCustom"
              [inDouble rHS]

getHasDisplayUnitLabel :: IAxis a0
                       -> IO Bool
getHasDisplayUnitLabel =
  propertyGet "HasDisplayUnitLabel"
              []
              outBool

setHasDisplayUnitLabel :: Bool
                       -> IAxis a0
                       -> IO ()
setHasDisplayUnitLabel rHS =
  propertySet "HasDisplayUnitLabel"
              [inBool rHS]

getDisplayUnitLabel :: IAxis a0
                    -> IO (DisplayUnitLabel ())
getDisplayUnitLabel =
  propertyGet "DisplayUnitLabel"
              []
              outIUnknown

getLogBase :: IAxis a0
           -> IO Double
getLogBase =
  propertyGet "LogBase"
              []
              outDouble

setLogBase :: Double
           -> IAxis a0
           -> IO ()
setLogBase rHS =
  propertySet "LogBase"
              [inDouble rHS]

getTickLabelSpacingIsAuto :: IAxis a0
                          -> IO Bool
getTickLabelSpacingIsAuto =
  propertyGet "TickLabelSpacingIsAuto"
              []
              outBool

setTickLabelSpacingIsAuto :: Bool
                          -> IAxis a0
                          -> IO ()
setTickLabelSpacingIsAuto rHS =
  propertySet "TickLabelSpacingIsAuto"
              [inBool rHS]

getFormat :: IAxis a0
          -> IO (ChartFormat ())
getFormat =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IChartTitle
-- 
-- --------------------------------------------------
data IChartTitle_ a = IChartTitle__ 
type IChartTitle a = IDispatch (IChartTitle_ a)
iidIChartTitle :: IID (IChartTitle ())
iidIChartTitle = mkIID "{00020849-0001-0000-C000-000000000046}"

getApplication131 :: (Variant a1)
                  => IChartTitle a0
                  -> IO a1
getApplication131 =
  propertyGet "Application"
              []
              outVariant

getCreator131 :: IChartTitle a0
              -> IO XlCreator
getCreator131 =
  propertyGet "Creator"
              []
              outEnum

getParent146 :: IChartTitle a0
             -> IO (IDispatch ())
getParent146 =
  propertyGet "Parent"
              []
              outIDispatch

getName42 :: IChartTitle a0
          -> IO String
getName42 =
  propertyGet "Name"
              []
              outString

select53 :: (Variant a1)
         => IChartTitle a0
         -> IO a1
select53 =
  function1 "Select"
            []
            outVariant

getBorder26 :: IChartTitle a0
            -> IO (Border ())
getBorder26 =
  propertyGet "Border"
              []
              outIUnknown

delete78 :: (Variant a1)
         => IChartTitle a0
         -> IO a1
delete78 =
  function1 "Delete"
            []
            outVariant

getInterior25 :: IChartTitle a0
              -> IO (Interior ())
getInterior25 =
  propertyGet "Interior"
              []
              outIUnknown

getFill :: IChartTitle a0
        -> IO (ChartFillFormat ())
getFill =
  propertyGet "Fill"
              []
              outIUnknown

getCaption33 :: IChartTitle a0
             -> IO String
getCaption33 =
  propertyGet "Caption"
              []
              outString

setCaption33 :: String
             -> IChartTitle a0
             -> IO ()
setCaption33 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters26 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IChartTitle a0
                -> IO (Characters ())
getCharacters26 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont18 :: IChartTitle a0
          -> IO (Font ())
getFont18 =
  propertyGet "Font"
              []
              outIUnknown

getHorizontalAlignment16 :: (Variant a1)
                         => IChartTitle a0
                         -> IO a1
getHorizontalAlignment16 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment16 :: a1
                         -> IChartTitle a0
                         -> IO ()
setHorizontalAlignment16 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLeft46 :: IChartTitle a0
          -> IO Double
getLeft46 =
  propertyGet "Left"
              []
              outDouble

setLeft44 :: Double
          -> IChartTitle a0
          -> IO ()
setLeft44 rHS =
  propertySet "Left"
              [inDouble rHS]

getOrientation19 :: (Variant a1)
                 => IChartTitle a0
                 -> IO a1
getOrientation19 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation19 :: a1
                 -> IChartTitle a0
                 -> IO ()
setOrientation19 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getShadow17 :: IChartTitle a0
            -> IO Bool
getShadow17 =
  propertyGet "Shadow"
              []
              outBool

setShadow17 :: Bool
            -> IChartTitle a0
            -> IO ()
setShadow17 rHS =
  propertySet "Shadow"
              [inBool rHS]

getText29 :: IChartTitle a0
          -> IO String
getText29 =
  propertyGet "Text"
              []
              outString

setText28 :: String
          -> IChartTitle a0
          -> IO ()
setText28 rHS =
  propertySet "Text"
              [inString rHS]

getTop46 :: IChartTitle a0
         -> IO Double
getTop46 =
  propertyGet "Top"
              []
              outDouble

setTop44 :: Double
         -> IChartTitle a0
         -> IO ()
setTop44 rHS =
  propertySet "Top"
              [inDouble rHS]

getVerticalAlignment16 :: (Variant a1)
                       => IChartTitle a0
                       -> IO a1
getVerticalAlignment16 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment16 :: a1
                       -> IChartTitle a0
                       -> IO ()
setVerticalAlignment16 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder16 :: IChartTitle a0
                  -> IO Int32
getReadingOrder16 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder16 :: Int32
                  -> IChartTitle a0
                  -> IO ()
setReadingOrder16 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoScaleFont11 :: (Variant a1)
                   => IChartTitle a0
                   -> IO a1
getAutoScaleFont11 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont11 :: a1
                   -> IChartTitle a0
                   -> IO ()
setAutoScaleFont11 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getIncludeInLayout :: IChartTitle a0
                   -> IO Bool
getIncludeInLayout =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout :: Bool
                   -> IChartTitle a0
                   -> IO ()
setIncludeInLayout rHS =
  propertySet "IncludeInLayout"
              [inBool rHS]

getPosition2 :: IChartTitle a0
             -> IO XlChartElementPosition
getPosition2 =
  propertyGet "Position"
              []
              outEnum

setPosition3 :: XlChartElementPosition
             -> IChartTitle a0
             -> IO ()
setPosition3 rHS =
  propertySet "Position"
              [inEnum rHS]

getFormat0 :: IChartTitle a0
           -> IO (ChartFormat ())
getFormat0 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IAxisTitle
-- 
-- --------------------------------------------------
data IAxisTitle_ a = IAxisTitle__ 
type IAxisTitle a = IDispatch (IAxisTitle_ a)
iidIAxisTitle :: IID (IAxisTitle ())
iidIAxisTitle = mkIID "{0002084A-0001-0000-C000-000000000046}"

getApplication132 :: (Variant a1)
                  => IAxisTitle a0
                  -> IO a1
getApplication132 =
  propertyGet "Application"
              []
              outVariant

getCreator132 :: IAxisTitle a0
              -> IO XlCreator
getCreator132 =
  propertyGet "Creator"
              []
              outEnum

getParent147 :: IAxisTitle a0
             -> IO (IDispatch ())
getParent147 =
  propertyGet "Parent"
              []
              outIDispatch

getName43 :: IAxisTitle a0
          -> IO String
getName43 =
  propertyGet "Name"
              []
              outString

select54 :: (Variant a1)
         => IAxisTitle a0
         -> IO a1
select54 =
  function1 "Select"
            []
            outVariant

getBorder27 :: IAxisTitle a0
            -> IO (Border ())
getBorder27 =
  propertyGet "Border"
              []
              outIUnknown

delete79 :: (Variant a1)
         => IAxisTitle a0
         -> IO a1
delete79 =
  function1 "Delete"
            []
            outVariant

getInterior26 :: IAxisTitle a0
              -> IO (Interior ())
getInterior26 =
  propertyGet "Interior"
              []
              outIUnknown

getFill0 :: IAxisTitle a0
         -> IO (ChartFillFormat ())
getFill0 =
  propertyGet "Fill"
              []
              outIUnknown

getCaption34 :: IAxisTitle a0
             -> IO String
getCaption34 =
  propertyGet "Caption"
              []
              outString

setCaption34 :: String
             -> IAxisTitle a0
             -> IO ()
setCaption34 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters27 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IAxisTitle a0
                -> IO (Characters ())
getCharacters27 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont19 :: IAxisTitle a0
          -> IO (Font ())
getFont19 =
  propertyGet "Font"
              []
              outIUnknown

getHorizontalAlignment17 :: (Variant a1)
                         => IAxisTitle a0
                         -> IO a1
getHorizontalAlignment17 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment17 :: a1
                         -> IAxisTitle a0
                         -> IO ()
setHorizontalAlignment17 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLeft47 :: IAxisTitle a0
          -> IO Double
getLeft47 =
  propertyGet "Left"
              []
              outDouble

setLeft45 :: Double
          -> IAxisTitle a0
          -> IO ()
setLeft45 rHS =
  propertySet "Left"
              [inDouble rHS]

getOrientation20 :: (Variant a1)
                 => IAxisTitle a0
                 -> IO a1
getOrientation20 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation20 :: a1
                 -> IAxisTitle a0
                 -> IO ()
setOrientation20 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getShadow18 :: IAxisTitle a0
            -> IO Bool
getShadow18 =
  propertyGet "Shadow"
              []
              outBool

setShadow18 :: Bool
            -> IAxisTitle a0
            -> IO ()
setShadow18 rHS =
  propertySet "Shadow"
              [inBool rHS]

getText30 :: IAxisTitle a0
          -> IO String
getText30 =
  propertyGet "Text"
              []
              outString

setText29 :: String
          -> IAxisTitle a0
          -> IO ()
setText29 rHS =
  propertySet "Text"
              [inString rHS]

getTop47 :: IAxisTitle a0
         -> IO Double
getTop47 =
  propertyGet "Top"
              []
              outDouble

setTop45 :: Double
         -> IAxisTitle a0
         -> IO ()
setTop45 rHS =
  propertySet "Top"
              [inDouble rHS]

getVerticalAlignment17 :: (Variant a1)
                       => IAxisTitle a0
                       -> IO a1
getVerticalAlignment17 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment17 :: a1
                       -> IAxisTitle a0
                       -> IO ()
setVerticalAlignment17 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder17 :: IAxisTitle a0
                  -> IO Int32
getReadingOrder17 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder17 :: Int32
                  -> IAxisTitle a0
                  -> IO ()
setReadingOrder17 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoScaleFont12 :: (Variant a1)
                   => IAxisTitle a0
                   -> IO a1
getAutoScaleFont12 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont12 :: a1
                   -> IAxisTitle a0
                   -> IO ()
setAutoScaleFont12 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getIncludeInLayout0 :: IAxisTitle a0
                    -> IO Bool
getIncludeInLayout0 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout0 :: Bool
                    -> IAxisTitle a0
                    -> IO ()
setIncludeInLayout0 rHS =
  propertySet "IncludeInLayout"
              [inBool rHS]

getPosition3 :: IAxisTitle a0
             -> IO XlChartElementPosition
getPosition3 =
  propertyGet "Position"
              []
              outEnum

setPosition4 :: XlChartElementPosition
             -> IAxisTitle a0
             -> IO ()
setPosition4 rHS =
  propertySet "Position"
              [inEnum rHS]

getFormat1 :: IAxisTitle a0
           -> IO (ChartFormat ())
getFormat1 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IChartGroup
-- 
-- --------------------------------------------------
data IChartGroup_ a = IChartGroup__ 
type IChartGroup a = IDispatch (IChartGroup_ a)
iidIChartGroup :: IID (IChartGroup ())
iidIChartGroup = mkIID "{00020859-0001-0000-C000-000000000046}"

getApplication133 :: (Variant a1)
                  => IChartGroup a0
                  -> IO a1
getApplication133 =
  propertyGet "Application"
              []
              outVariant

getCreator133 :: IChartGroup a0
              -> IO XlCreator
getCreator133 =
  propertyGet "Creator"
              []
              outEnum

getParent148 :: IChartGroup a0
             -> IO (IDispatch ())
getParent148 =
  propertyGet "Parent"
              []
              outIDispatch

getAxisGroup0 :: IChartGroup a0
              -> IO XlAxisGroup
getAxisGroup0 =
  propertyGet "AxisGroup"
              []
              outEnum

setAxisGroup :: XlAxisGroup
             -> IChartGroup a0
             -> IO ()
setAxisGroup rHS =
  propertySet "AxisGroup"
              [inEnum rHS]

getDoughnutHoleSize :: IChartGroup a0
                    -> IO Int32
getDoughnutHoleSize =
  propertyGet "DoughnutHoleSize"
              []
              outInt32

setDoughnutHoleSize :: Int32
                    -> IChartGroup a0
                    -> IO ()
setDoughnutHoleSize rHS =
  propertySet "DoughnutHoleSize"
              [inInt32 rHS]

getDownBars :: IChartGroup a0
            -> IO (DownBars ())
getDownBars =
  propertyGet "DownBars"
              []
              outIUnknown

getDropLines :: IChartGroup a0
             -> IO (DropLines ())
getDropLines =
  propertyGet "DropLines"
              []
              outIUnknown

getFirstSliceAngle :: IChartGroup a0
                   -> IO Int32
getFirstSliceAngle =
  propertyGet "FirstSliceAngle"
              []
              outInt32

setFirstSliceAngle :: Int32
                   -> IChartGroup a0
                   -> IO ()
setFirstSliceAngle rHS =
  propertySet "FirstSliceAngle"
              [inInt32 rHS]

getGapWidth :: IChartGroup a0
            -> IO Int32
getGapWidth =
  propertyGet "GapWidth"
              []
              outInt32

setGapWidth :: Int32
            -> IChartGroup a0
            -> IO ()
setGapWidth rHS =
  propertySet "GapWidth"
              [inInt32 rHS]

getHasDropLines :: IChartGroup a0
                -> IO Bool
getHasDropLines =
  propertyGet "HasDropLines"
              []
              outBool

setHasDropLines :: Bool
                -> IChartGroup a0
                -> IO ()
setHasDropLines rHS =
  propertySet "HasDropLines"
              [inBool rHS]

getHasHiLoLines :: IChartGroup a0
                -> IO Bool
getHasHiLoLines =
  propertyGet "HasHiLoLines"
              []
              outBool

setHasHiLoLines :: Bool
                -> IChartGroup a0
                -> IO ()
setHasHiLoLines rHS =
  propertySet "HasHiLoLines"
              [inBool rHS]

getHasRadarAxisLabels :: IChartGroup a0
                      -> IO Bool
getHasRadarAxisLabels =
  propertyGet "HasRadarAxisLabels"
              []
              outBool

setHasRadarAxisLabels :: Bool
                      -> IChartGroup a0
                      -> IO ()
setHasRadarAxisLabels rHS =
  propertySet "HasRadarAxisLabels"
              [inBool rHS]

getHasSeriesLines :: IChartGroup a0
                  -> IO Bool
getHasSeriesLines =
  propertyGet "HasSeriesLines"
              []
              outBool

setHasSeriesLines :: Bool
                  -> IChartGroup a0
                  -> IO ()
setHasSeriesLines rHS =
  propertySet "HasSeriesLines"
              [inBool rHS]

getHasUpDownBars :: IChartGroup a0
                 -> IO Bool
getHasUpDownBars =
  propertyGet "HasUpDownBars"
              []
              outBool

setHasUpDownBars :: Bool
                 -> IChartGroup a0
                 -> IO ()
setHasUpDownBars rHS =
  propertySet "HasUpDownBars"
              [inBool rHS]

getHiLoLines :: IChartGroup a0
             -> IO (HiLoLines ())
getHiLoLines =
  propertyGet "HiLoLines"
              []
              outIUnknown

getIndex33 :: IChartGroup a0
           -> IO Int32
getIndex33 =
  propertyGet "Index"
              []
              outInt32

getOverlap :: IChartGroup a0
           -> IO Int32
getOverlap =
  propertyGet "Overlap"
              []
              outInt32

setOverlap :: Int32
           -> IChartGroup a0
           -> IO ()
setOverlap rHS =
  propertySet "Overlap"
              [inInt32 rHS]

getRadarAxisLabels :: IChartGroup a0
                   -> IO (TickLabels ())
getRadarAxisLabels =
  propertyGet "RadarAxisLabels"
              []
              outIUnknown

seriesCollection0 :: (Variant a1)
                  => a1
                  -> IChartGroup a0
                  -> IO (IDispatch ())
seriesCollection0 index0 =
  function1 "SeriesCollection"
            [inVariant index0]
            outIDispatch

getSeriesLines :: IChartGroup a0
               -> IO (SeriesLines ())
getSeriesLines =
  propertyGet "SeriesLines"
              []
              outIUnknown

getSubType0 :: IChartGroup a0
            -> IO Int32
getSubType0 =
  propertyGet "SubType"
              []
              outInt32

setSubType0 :: Int32
            -> IChartGroup a0
            -> IO ()
setSubType0 rHS =
  propertySet "SubType"
              [inInt32 rHS]

getType15 :: IChartGroup a0
          -> IO Int32
getType15 =
  propertyGet "Type"
              []
              outInt32

setType5 :: Int32
         -> IChartGroup a0
         -> IO ()
setType5 rHS =
  propertySet "Type"
              [inInt32 rHS]

getUpBars :: IChartGroup a0
          -> IO (UpBars ())
getUpBars =
  propertyGet "UpBars"
              []
              outIUnknown

getVaryByCategories :: IChartGroup a0
                    -> IO Bool
getVaryByCategories =
  propertyGet "VaryByCategories"
              []
              outBool

setVaryByCategories :: Bool
                    -> IChartGroup a0
                    -> IO ()
setVaryByCategories rHS =
  propertySet "VaryByCategories"
              [inBool rHS]

getSizeRepresents :: IChartGroup a0
                  -> IO XlSizeRepresents
getSizeRepresents =
  propertyGet "SizeRepresents"
              []
              outEnum

setSizeRepresents :: XlSizeRepresents
                  -> IChartGroup a0
                  -> IO ()
setSizeRepresents rHS =
  propertySet "SizeRepresents"
              [inEnum rHS]

getBubbleScale :: IChartGroup a0
               -> IO Int32
getBubbleScale =
  propertyGet "BubbleScale"
              []
              outInt32

setBubbleScale :: Int32
               -> IChartGroup a0
               -> IO ()
setBubbleScale rHS =
  propertySet "BubbleScale"
              [inInt32 rHS]

getShowNegativeBubbles :: IChartGroup a0
                       -> IO Bool
getShowNegativeBubbles =
  propertyGet "ShowNegativeBubbles"
              []
              outBool

setShowNegativeBubbles :: Bool
                       -> IChartGroup a0
                       -> IO ()
setShowNegativeBubbles rHS =
  propertySet "ShowNegativeBubbles"
              [inBool rHS]

getSplitType :: IChartGroup a0
             -> IO XlChartSplitType
getSplitType =
  propertyGet "SplitType"
              []
              outEnum

setSplitType :: XlChartSplitType
             -> IChartGroup a0
             -> IO ()
setSplitType rHS =
  propertySet "SplitType"
              [inEnum rHS]

getSplitValue :: (Variant a1)
              => IChartGroup a0
              -> IO a1
getSplitValue =
  propertyGet "SplitValue"
              []
              outVariant

setSplitValue :: a1
              -> IChartGroup a0
              -> IO ()
setSplitValue rHS =
  propertySet "SplitValue"
              [inVariant rHS]

getSecondPlotSize :: IChartGroup a0
                  -> IO Int32
getSecondPlotSize =
  propertyGet "SecondPlotSize"
              []
              outInt32

setSecondPlotSize :: Int32
                  -> IChartGroup a0
                  -> IO ()
setSecondPlotSize rHS =
  propertySet "SecondPlotSize"
              [inInt32 rHS]

getHas3DShading :: IChartGroup a0
                -> IO Bool
getHas3DShading =
  propertyGet "Has3DShading"
              []
              outBool

setHas3DShading :: Bool
                -> IChartGroup a0
                -> IO ()
setHas3DShading rHS =
  propertySet "Has3DShading"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IChartGroups
-- 
-- --------------------------------------------------
data IChartGroups_ a = IChartGroups__ 
type IChartGroups a = IDispatch (IChartGroups_ a)
iidIChartGroups :: IID (IChartGroups ())
iidIChartGroups = mkIID "{0002085A-0001-0000-C000-000000000046}"

getApplication134 :: (Variant a1)
                  => IChartGroups a0
                  -> IO a1
getApplication134 =
  propertyGet "Application"
              []
              outVariant

getCreator134 :: IChartGroups a0
              -> IO XlCreator
getCreator134 =
  propertyGet "Creator"
              []
              outEnum

getParent149 :: IChartGroups a0
             -> IO (IDispatch ())
getParent149 =
  propertyGet "Parent"
              []
              outIDispatch

getCount65 :: IChartGroups a0
           -> IO Int32
getCount65 =
  propertyGet "Count"
              []
              outInt32

item38 :: a1
       -> IChartGroups a0
       -> IO (ChartGroup ())
item38 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

newEnum31 :: IChartGroups a0
          -> IO (IUnknown ())
newEnum31 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IAxes
-- 
-- --------------------------------------------------
data IAxes_ a = IAxes__ 
type IAxes a = IDispatch (IAxes_ a)
iidIAxes :: IID (IAxes ())
iidIAxes = mkIID "{0002085B-0001-0000-C000-000000000046}"

getApplication135 :: (Variant a1)
                  => IAxes a0
                  -> IO a1
getApplication135 =
  propertyGet "Application"
              []
              outVariant

getCreator135 :: IAxes a0
              -> IO XlCreator
getCreator135 =
  propertyGet "Creator"
              []
              outEnum

getParent150 :: IAxes a0
             -> IO (IDispatch ())
getParent150 =
  propertyGet "Parent"
              []
              outIDispatch

getCount66 :: IAxes a0
           -> IO Int32
getCount66 =
  propertyGet "Count"
              []
              outInt32

item39 :: (Variant a1)
       => XlAxisType
       -> a1
       -> IAxes a0
       -> IO (Axis ())
item39 type0 axisGroup =
  function1 "Item"
            [ inEnum type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            ]
            outIUnknown

newEnum32 :: IAxes a0
          -> IO (IUnknown ())
newEnum32 =
  function1 "_NewEnum"
            []
            outIUnknown

default2 :: (Variant a1)
         => XlAxisType
         -> a1
         -> IAxes a0
         -> IO (Axis ())
default2 type0 axisGroup =
  function1 "_Default"
            [ inEnum type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPoints
-- 
-- --------------------------------------------------
data IPoints_ a = IPoints__ 
type IPoints a = IDispatch (IPoints_ a)
iidIPoints :: IID (IPoints ())
iidIPoints = mkIID "{00020869-0001-0000-C000-000000000046}"

getApplication136 :: (Variant a1)
                  => IPoints a0
                  -> IO a1
getApplication136 =
  propertyGet "Application"
              []
              outVariant

getCreator136 :: IPoints a0
              -> IO XlCreator
getCreator136 =
  propertyGet "Creator"
              []
              outEnum

getParent151 :: IPoints a0
             -> IO (IDispatch ())
getParent151 =
  propertyGet "Parent"
              []
              outIDispatch

getCount67 :: IPoints a0
           -> IO Int32
getCount67 =
  propertyGet "Count"
              []
              outInt32

item40 :: Int32
       -> IPoints a0
       -> IO (Point ())
item40 index0 =
  function1 "Item"
            [inInt32 index0]
            outIUnknown

newEnum33 :: IPoints a0
          -> IO (IUnknown ())
newEnum33 =
  function1 "_NewEnum"
            []
            outIUnknown

default3 :: Int32
         -> IPoints a0
         -> IO (Point ())
default3 index0 =
  function1 "_Default"
            [inInt32 index0]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPoint
-- 
-- --------------------------------------------------
data IPoint_ a = IPoint__ 
type IPoint a = IDispatch (IPoint_ a)
iidIPoint :: IID (IPoint ())
iidIPoint = mkIID "{0002086A-0001-0000-C000-000000000046}"

getApplication137 :: (Variant a1)
                  => IPoint a0
                  -> IO a1
getApplication137 =
  propertyGet "Application"
              []
              outVariant

getCreator137 :: IPoint a0
              -> IO XlCreator
getCreator137 =
  propertyGet "Creator"
              []
              outEnum

getParent152 :: IPoint a0
             -> IO (IDispatch ())
getParent152 =
  propertyGet "Parent"
              []
              outIDispatch

applyDataLabels1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> IPoint a0
                 -> IO a1
applyDataLabels1 type0 legendKey autoText hasLeaderLines =
  function1 "_ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            ]
            outVariant

getBorder28 :: IPoint a0
            -> IO (Border ())
getBorder28 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats0 :: (Variant a1)
              => IPoint a0
              -> IO a1
clearFormats0 =
  function1 "ClearFormats"
            []
            outVariant

copy53 :: (Variant a1)
       => IPoint a0
       -> IO a1
copy53 =
  function1 "Copy"
            []
            outVariant

getDataLabel :: IPoint a0
             -> IO (DataLabel ())
getDataLabel =
  propertyGet "DataLabel"
              []
              outIUnknown

delete80 :: (Variant a1)
         => IPoint a0
         -> IO a1
delete80 =
  function1 "Delete"
            []
            outVariant

getExplosion :: IPoint a0
             -> IO Int32
getExplosion =
  propertyGet "Explosion"
              []
              outInt32

setExplosion :: Int32
             -> IPoint a0
             -> IO ()
setExplosion rHS =
  propertySet "Explosion"
              [inInt32 rHS]

getHasDataLabel :: IPoint a0
                -> IO Bool
getHasDataLabel =
  propertyGet "HasDataLabel"
              []
              outBool

setHasDataLabel :: Bool
                -> IPoint a0
                -> IO ()
setHasDataLabel rHS =
  propertySet "HasDataLabel"
              [inBool rHS]

getInterior27 :: IPoint a0
              -> IO (Interior ())
getInterior27 =
  propertyGet "Interior"
              []
              outIUnknown

getInvertIfNegative0 :: IPoint a0
                     -> IO Bool
getInvertIfNegative0 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative0 :: Bool
                     -> IPoint a0
                     -> IO ()
setInvertIfNegative0 rHS =
  propertySet "InvertIfNegative"
              [inBool rHS]

getMarkerBackgroundColor :: IPoint a0
                         -> IO Int32
getMarkerBackgroundColor =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor :: Int32
                         -> IPoint a0
                         -> IO ()
setMarkerBackgroundColor rHS =
  propertySet "MarkerBackgroundColor"
              [inInt32 rHS]

getMarkerBackgroundColorIndex :: IPoint a0
                              -> IO XlColorIndex
getMarkerBackgroundColorIndex =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex :: XlColorIndex
                              -> IPoint a0
                              -> IO ()
setMarkerBackgroundColorIndex rHS =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum rHS]

getMarkerForegroundColor :: IPoint a0
                         -> IO Int32
getMarkerForegroundColor =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor :: Int32
                         -> IPoint a0
                         -> IO ()
setMarkerForegroundColor rHS =
  propertySet "MarkerForegroundColor"
              [inInt32 rHS]

getMarkerForegroundColorIndex :: IPoint a0
                              -> IO XlColorIndex
getMarkerForegroundColorIndex =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex :: XlColorIndex
                              -> IPoint a0
                              -> IO ()
setMarkerForegroundColorIndex rHS =
  propertySet "MarkerForegroundColorIndex"
              [inEnum rHS]

getMarkerSize :: IPoint a0
              -> IO Int32
getMarkerSize =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize :: Int32
              -> IPoint a0
              -> IO ()
setMarkerSize rHS =
  propertySet "MarkerSize"
              [inInt32 rHS]

getMarkerStyle :: IPoint a0
               -> IO XlMarkerStyle
getMarkerStyle =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle :: XlMarkerStyle
               -> IPoint a0
               -> IO ()
setMarkerStyle rHS =
  propertySet "MarkerStyle"
              [inEnum rHS]

paste3 :: (Variant a1)
       => IPoint a0
       -> IO a1
paste3 =
  function1 "Paste"
            []
            outVariant

getPictureType :: IPoint a0
               -> IO XlChartPictureType
getPictureType =
  propertyGet "PictureType"
              []
              outEnum

setPictureType :: XlChartPictureType
               -> IPoint a0
               -> IO ()
setPictureType rHS =
  propertySet "PictureType"
              [inEnum rHS]

getPictureUnit :: IPoint a0
               -> IO Int32
getPictureUnit =
  propertyGet "PictureUnit"
              []
              outInt32

setPictureUnit :: Int32
               -> IPoint a0
               -> IO ()
setPictureUnit rHS =
  propertySet "PictureUnit"
              [inInt32 rHS]

select55 :: (Variant a1)
         => IPoint a0
         -> IO a1
select55 =
  function1 "Select"
            []
            outVariant

getApplyPictToSides :: IPoint a0
                    -> IO Bool
getApplyPictToSides =
  propertyGet "ApplyPictToSides"
              []
              outBool

setApplyPictToSides :: Bool
                    -> IPoint a0
                    -> IO ()
setApplyPictToSides rHS =
  propertySet "ApplyPictToSides"
              [inBool rHS]

getApplyPictToFront :: IPoint a0
                    -> IO Bool
getApplyPictToFront =
  propertyGet "ApplyPictToFront"
              []
              outBool

setApplyPictToFront :: Bool
                    -> IPoint a0
                    -> IO ()
setApplyPictToFront rHS =
  propertySet "ApplyPictToFront"
              [inBool rHS]

getApplyPictToEnd :: IPoint a0
                  -> IO Bool
getApplyPictToEnd =
  propertyGet "ApplyPictToEnd"
              []
              outBool

setApplyPictToEnd :: Bool
                  -> IPoint a0
                  -> IO ()
setApplyPictToEnd rHS =
  propertySet "ApplyPictToEnd"
              [inBool rHS]

getShadow19 :: IPoint a0
            -> IO Bool
getShadow19 =
  propertyGet "Shadow"
              []
              outBool

setShadow19 :: Bool
            -> IPoint a0
            -> IO ()
setShadow19 rHS =
  propertySet "Shadow"
              [inBool rHS]

getSecondaryPlot :: IPoint a0
                 -> IO Bool
getSecondaryPlot =
  propertyGet "SecondaryPlot"
              []
              outBool

setSecondaryPlot :: Bool
                 -> IPoint a0
                 -> IO ()
setSecondaryPlot rHS =
  propertySet "SecondaryPlot"
              [inBool rHS]

getFill1 :: IPoint a0
         -> IO (ChartFillFormat ())
getFill1 =
  propertyGet "Fill"
              []
              outIUnknown

applyDataLabels2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> IPoint a0
                 -> IO a1
applyDataLabels2 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator =
  function1 "ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            , inVariant showSeriesName
            , inVariant showCategoryName
            , inVariant showValue
            , inVariant showPercentage
            , inVariant showBubbleSize
            , inVariant separator
            ]
            outVariant

getHas3DEffect :: IPoint a0
               -> IO Bool
getHas3DEffect =
  propertyGet "Has3DEffect"
              []
              outBool

setHas3DEffect :: Bool
               -> IPoint a0
               -> IO ()
setHas3DEffect rHS =
  propertySet "Has3DEffect"
              [inBool rHS]

getPictureUnit2 :: IPoint a0
                -> IO Double
getPictureUnit2 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit2 :: Double
                -> IPoint a0
                -> IO ()
setPictureUnit2 rHS =
  propertySet "PictureUnit2"
              [inDouble rHS]

getFormat2 :: IPoint a0
           -> IO (ChartFormat ())
getFormat2 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISeries
-- 
-- --------------------------------------------------
data ISeries_ a = ISeries__ 
type ISeries a = IDispatch (ISeries_ a)
iidISeries :: IID (ISeries ())
iidISeries = mkIID "{0002086B-0001-0000-C000-000000000046}"

getApplication138 :: (Variant a1)
                  => ISeries a0
                  -> IO a1
getApplication138 =
  propertyGet "Application"
              []
              outVariant

getCreator138 :: ISeries a0
              -> IO XlCreator
getCreator138 =
  propertyGet "Creator"
              []
              outEnum

getParent153 :: ISeries a0
             -> IO (IDispatch ())
getParent153 =
  propertyGet "Parent"
              []
              outIDispatch

applyDataLabels3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> ISeries a0
                 -> IO a1
applyDataLabels3 type0 legendKey autoText hasLeaderLines =
  function1 "_ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            ]
            outVariant

getAxisGroup1 :: ISeries a0
              -> IO XlAxisGroup
getAxisGroup1 =
  propertyGet "AxisGroup"
              []
              outEnum

setAxisGroup0 :: XlAxisGroup
              -> ISeries a0
              -> IO ()
setAxisGroup0 rHS =
  propertySet "AxisGroup"
              [inEnum rHS]

getBorder29 :: ISeries a0
            -> IO (Border ())
getBorder29 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats1 :: (Variant a1)
              => ISeries a0
              -> IO a1
clearFormats1 =
  function1 "ClearFormats"
            []
            outVariant

copy54 :: (Variant a1)
       => ISeries a0
       -> IO a1
copy54 =
  function1 "Copy"
            []
            outVariant

dataLabels :: (Variant a1)
           => a1
           -> ISeries a0
           -> IO (IDispatch ())
dataLabels index0 =
  function1 "DataLabels"
            [inVariant index0]
            outIDispatch

delete81 :: (Variant a1)
         => ISeries a0
         -> IO a1
delete81 =
  function1 "Delete"
            []
            outVariant

errorBar :: (Variant a1, Variant a2, Variant a3)
         => XlErrorBarDirection
         -> XlErrorBarInclude
         -> XlErrorBarType
         -> a2
         -> a3
         -> ISeries a0
         -> IO a1
errorBar direction include type0 amount minusValues =
  function1 "ErrorBar"
            [ inEnum direction
            , inEnum include
            , inEnum type0
            , inVariant amount
            , inVariant minusValues
            ]
            outVariant

getErrorBars :: ISeries a0
             -> IO (ErrorBars ())
getErrorBars =
  propertyGet "ErrorBars"
              []
              outIUnknown

getExplosion0 :: ISeries a0
              -> IO Int32
getExplosion0 =
  propertyGet "Explosion"
              []
              outInt32

setExplosion0 :: Int32
              -> ISeries a0
              -> IO ()
setExplosion0 rHS =
  propertySet "Explosion"
              [inInt32 rHS]

getFormula19 :: ISeries a0
             -> IO String
getFormula19 =
  propertyGet "Formula"
              []
              outString

setFormula17 :: String
             -> ISeries a0
             -> IO ()
setFormula17 rHS =
  propertySet "Formula"
              [inString rHS]

getFormulaLocal0 :: ISeries a0
                 -> IO String
getFormulaLocal0 =
  propertyGet "FormulaLocal"
              []
              outString

setFormulaLocal0 :: String
                 -> ISeries a0
                 -> IO ()
setFormulaLocal0 rHS =
  propertySet "FormulaLocal"
              [inString rHS]

getFormulaR1C10 :: ISeries a0
                -> IO String
getFormulaR1C10 =
  propertyGet "FormulaR1C1"
              []
              outString

setFormulaR1C10 :: String
                -> ISeries a0
                -> IO ()
setFormulaR1C10 rHS =
  propertySet "FormulaR1C1"
              [inString rHS]

getFormulaR1C1Local0 :: ISeries a0
                     -> IO String
getFormulaR1C1Local0 =
  propertyGet "FormulaR1C1Local"
              []
              outString

setFormulaR1C1Local0 :: String
                     -> ISeries a0
                     -> IO ()
setFormulaR1C1Local0 rHS =
  propertySet "FormulaR1C1Local"
              [inString rHS]

getHasDataLabels :: ISeries a0
                 -> IO Bool
getHasDataLabels =
  propertyGet "HasDataLabels"
              []
              outBool

setHasDataLabels :: Bool
                 -> ISeries a0
                 -> IO ()
setHasDataLabels rHS =
  propertySet "HasDataLabels"
              [inBool rHS]

getHasErrorBars :: ISeries a0
                -> IO Bool
getHasErrorBars =
  propertyGet "HasErrorBars"
              []
              outBool

setHasErrorBars :: Bool
                -> ISeries a0
                -> IO ()
setHasErrorBars rHS =
  propertySet "HasErrorBars"
              [inBool rHS]

getInterior28 :: ISeries a0
              -> IO (Interior ())
getInterior28 =
  propertyGet "Interior"
              []
              outIUnknown

getFill2 :: ISeries a0
         -> IO (ChartFillFormat ())
getFill2 =
  propertyGet "Fill"
              []
              outIUnknown

getInvertIfNegative1 :: ISeries a0
                     -> IO Bool
getInvertIfNegative1 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative1 :: Bool
                     -> ISeries a0
                     -> IO ()
setInvertIfNegative1 rHS =
  propertySet "InvertIfNegative"
              [inBool rHS]

getMarkerBackgroundColor0 :: ISeries a0
                          -> IO Int32
getMarkerBackgroundColor0 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor0 :: Int32
                          -> ISeries a0
                          -> IO ()
setMarkerBackgroundColor0 rHS =
  propertySet "MarkerBackgroundColor"
              [inInt32 rHS]

getMarkerBackgroundColorIndex0 :: ISeries a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex0 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex0 :: XlColorIndex
                               -> ISeries a0
                               -> IO ()
setMarkerBackgroundColorIndex0 rHS =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum rHS]

getMarkerForegroundColor0 :: ISeries a0
                          -> IO Int32
getMarkerForegroundColor0 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor0 :: Int32
                          -> ISeries a0
                          -> IO ()
setMarkerForegroundColor0 rHS =
  propertySet "MarkerForegroundColor"
              [inInt32 rHS]

getMarkerForegroundColorIndex0 :: ISeries a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex0 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex0 :: XlColorIndex
                               -> ISeries a0
                               -> IO ()
setMarkerForegroundColorIndex0 rHS =
  propertySet "MarkerForegroundColorIndex"
              [inEnum rHS]

getMarkerSize0 :: ISeries a0
               -> IO Int32
getMarkerSize0 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize0 :: Int32
               -> ISeries a0
               -> IO ()
setMarkerSize0 rHS =
  propertySet "MarkerSize"
              [inInt32 rHS]

getMarkerStyle0 :: ISeries a0
                -> IO XlMarkerStyle
getMarkerStyle0 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle0 :: XlMarkerStyle
                -> ISeries a0
                -> IO ()
setMarkerStyle0 rHS =
  propertySet "MarkerStyle"
              [inEnum rHS]

getName44 :: ISeries a0
          -> IO String
getName44 =
  propertyGet "Name"
              []
              outString

setName34 :: String
          -> ISeries a0
          -> IO ()
setName34 rHS =
  propertySet "Name"
              [inString rHS]

paste4 :: (Variant a1)
       => ISeries a0
       -> IO a1
paste4 =
  function1 "Paste"
            []
            outVariant

getPictureType0 :: ISeries a0
                -> IO XlChartPictureType
getPictureType0 =
  propertyGet "PictureType"
              []
              outEnum

setPictureType0 :: XlChartPictureType
                -> ISeries a0
                -> IO ()
setPictureType0 rHS =
  propertySet "PictureType"
              [inEnum rHS]

getPictureUnit0 :: ISeries a0
                -> IO Int32
getPictureUnit0 =
  propertyGet "PictureUnit"
              []
              outInt32

setPictureUnit0 :: Int32
                -> ISeries a0
                -> IO ()
setPictureUnit0 rHS =
  propertySet "PictureUnit"
              [inInt32 rHS]

getPlotOrder :: ISeries a0
             -> IO Int32
getPlotOrder =
  propertyGet "PlotOrder"
              []
              outInt32

setPlotOrder :: Int32
             -> ISeries a0
             -> IO ()
setPlotOrder rHS =
  propertySet "PlotOrder"
              [inInt32 rHS]

points :: (Variant a1)
       => a1
       -> ISeries a0
       -> IO (IDispatch ())
points index0 =
  function1 "Points"
            [inVariant index0]
            outIDispatch

select56 :: (Variant a1)
         => ISeries a0
         -> IO a1
select56 =
  function1 "Select"
            []
            outVariant

getSmooth :: ISeries a0
          -> IO Bool
getSmooth =
  propertyGet "Smooth"
              []
              outBool

setSmooth :: Bool
          -> ISeries a0
          -> IO ()
setSmooth rHS =
  propertySet "Smooth"
              [inBool rHS]

trendlines :: (Variant a1)
           => a1
           -> ISeries a0
           -> IO (IDispatch ())
trendlines index0 =
  function1 "Trendlines"
            [inVariant index0]
            outIDispatch

getType16 :: ISeries a0
          -> IO Int32
getType16 =
  propertyGet "Type"
              []
              outInt32

setType6 :: Int32
         -> ISeries a0
         -> IO ()
setType6 rHS =
  propertySet "Type"
              [inInt32 rHS]

getChartType0 :: ISeries a0
              -> IO XlChartType
getChartType0 =
  propertyGet "ChartType"
              []
              outEnum

setChartType0 :: XlChartType
              -> ISeries a0
              -> IO ()
setChartType0 rHS =
  propertySet "ChartType"
              [inEnum rHS]

applyCustomType0 :: XlChartType
                 -> ISeries a0
                 -> IO ()
applyCustomType0 chartType =
  method0 "ApplyCustomType"
          [inEnum chartType]

getValues0 :: (Variant a1)
           => ISeries a0
           -> IO a1
getValues0 =
  propertyGet "Values"
              []
              outVariant

setValues :: a1
          -> ISeries a0
          -> IO ()
setValues rHS =
  propertySet "Values"
              [inVariant rHS]

getXValues :: (Variant a1)
           => ISeries a0
           -> IO a1
getXValues =
  propertyGet "XValues"
              []
              outVariant

setXValues :: a1
           -> ISeries a0
           -> IO ()
setXValues rHS =
  propertySet "XValues"
              [inVariant rHS]

getBubbleSizes :: (Variant a1)
               => ISeries a0
               -> IO a1
getBubbleSizes =
  propertyGet "BubbleSizes"
              []
              outVariant

setBubbleSizes :: a1
               -> ISeries a0
               -> IO ()
setBubbleSizes rHS =
  propertySet "BubbleSizes"
              [inVariant rHS]

getBarShape0 :: ISeries a0
             -> IO XlBarShape
getBarShape0 =
  propertyGet "BarShape"
              []
              outEnum

setBarShape0 :: XlBarShape
             -> ISeries a0
             -> IO ()
setBarShape0 rHS =
  propertySet "BarShape"
              [inEnum rHS]

getApplyPictToSides0 :: ISeries a0
                     -> IO Bool
getApplyPictToSides0 =
  propertyGet "ApplyPictToSides"
              []
              outBool

setApplyPictToSides0 :: Bool
                     -> ISeries a0
                     -> IO ()
setApplyPictToSides0 rHS =
  propertySet "ApplyPictToSides"
              [inBool rHS]

getApplyPictToFront0 :: ISeries a0
                     -> IO Bool
getApplyPictToFront0 =
  propertyGet "ApplyPictToFront"
              []
              outBool

setApplyPictToFront0 :: Bool
                     -> ISeries a0
                     -> IO ()
setApplyPictToFront0 rHS =
  propertySet "ApplyPictToFront"
              [inBool rHS]

getApplyPictToEnd0 :: ISeries a0
                   -> IO Bool
getApplyPictToEnd0 =
  propertyGet "ApplyPictToEnd"
              []
              outBool

setApplyPictToEnd0 :: Bool
                   -> ISeries a0
                   -> IO ()
setApplyPictToEnd0 rHS =
  propertySet "ApplyPictToEnd"
              [inBool rHS]

getHas3DEffect0 :: ISeries a0
                -> IO Bool
getHas3DEffect0 =
  propertyGet "Has3DEffect"
              []
              outBool

setHas3DEffect0 :: Bool
                -> ISeries a0
                -> IO ()
setHas3DEffect0 rHS =
  propertySet "Has3DEffect"
              [inBool rHS]

getShadow20 :: ISeries a0
            -> IO Bool
getShadow20 =
  propertyGet "Shadow"
              []
              outBool

setShadow20 :: Bool
            -> ISeries a0
            -> IO ()
setShadow20 rHS =
  propertySet "Shadow"
              [inBool rHS]

getHasLeaderLines :: ISeries a0
                  -> IO Bool
getHasLeaderLines =
  propertyGet "HasLeaderLines"
              []
              outBool

setHasLeaderLines :: Bool
                  -> ISeries a0
                  -> IO ()
setHasLeaderLines rHS =
  propertySet "HasLeaderLines"
              [inBool rHS]

getLeaderLines :: ISeries a0
               -> IO (LeaderLines ())
getLeaderLines =
  propertyGet "LeaderLines"
              []
              outIUnknown

applyDataLabels4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> ISeries a0
                 -> IO a1
applyDataLabels4 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator =
  function1 "ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            , inVariant showSeriesName
            , inVariant showCategoryName
            , inVariant showValue
            , inVariant showPercentage
            , inVariant showBubbleSize
            , inVariant separator
            ]
            outVariant

getPictureUnit20 :: ISeries a0
                 -> IO Double
getPictureUnit20 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit20 :: Double
                 -> ISeries a0
                 -> IO ()
setPictureUnit20 rHS =
  propertySet "PictureUnit2"
              [inDouble rHS]

getFormat3 :: ISeries a0
           -> IO (ChartFormat ())
getFormat3 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISeriesCollection
-- 
-- --------------------------------------------------
data ISeriesCollection_ a = ISeriesCollection__ 
type ISeriesCollection a = IDispatch (ISeriesCollection_ a)
iidISeriesCollection :: IID (ISeriesCollection ())
iidISeriesCollection =
  mkIID "{0002086C-0001-0000-C000-000000000046}"

getApplication139 :: (Variant a1)
                  => ISeriesCollection a0
                  -> IO a1
getApplication139 =
  propertyGet "Application"
              []
              outVariant

getCreator139 :: ISeriesCollection a0
              -> IO XlCreator
getCreator139 =
  propertyGet "Creator"
              []
              outEnum

getParent154 :: ISeriesCollection a0
             -> IO (IDispatch ())
getParent154 =
  propertyGet "Parent"
              []
              outIDispatch

add51 :: (Variant a2, Variant a3, Variant a4, Variant a5)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> ISeriesCollection a0
      -> IO (Series ())
add51 source rowcol seriesLabels categoryLabels replace1 =
  function1 "Add"
            [ inVariant source
            , inDefaultValue (inInt32 (-4105)) inVariant rowcol
            , inVariant seriesLabels
            , inVariant categoryLabels
            , inVariant replace1
            ]
            outIUnknown

getCount68 :: ISeriesCollection a0
           -> IO Int32
getCount68 =
  propertyGet "Count"
              []
              outInt32

extend :: (Variant a1, Variant a3, Variant a4)
       => a2
       -> a3
       -> a4
       -> ISeriesCollection a0
       -> IO a1
extend source rowcol categoryLabels =
  function1 "Extend"
            [ inVariant source
            , inVariant rowcol
            , inVariant categoryLabels
            ]
            outVariant

item41 :: a1
       -> ISeriesCollection a0
       -> IO (Series ())
item41 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

newEnum34 :: ISeriesCollection a0
          -> IO (IUnknown ())
newEnum34 =
  function1 "_NewEnum"
            []
            outIUnknown

paste5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
       => a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> ISeriesCollection a0
       -> IO a1
paste5 rowcol seriesLabels categoryLabels replace1 newSeries =
  function1 "Paste"
            [ inDefaultValue (inInt32 (-4105)) inVariant rowcol
            , inVariant seriesLabels
            , inVariant categoryLabels
            , inVariant replace1
            , inVariant newSeries
            ]
            outVariant

newSeries :: ISeriesCollection a0
          -> IO (Series ())
newSeries =
  function1 "NewSeries"
            []
            outIUnknown

default4 :: a1
         -> ISeriesCollection a0
         -> IO (Series ())
default4 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IDataLabel
-- 
-- --------------------------------------------------
data IDataLabel_ a = IDataLabel__ 
type IDataLabel a = IDispatch (IDataLabel_ a)
iidIDataLabel :: IID (IDataLabel ())
iidIDataLabel = mkIID "{000208B2-0001-0000-C000-000000000046}"

getApplication140 :: (Variant a1)
                  => IDataLabel a0
                  -> IO a1
getApplication140 =
  propertyGet "Application"
              []
              outVariant

getCreator140 :: IDataLabel a0
              -> IO XlCreator
getCreator140 =
  propertyGet "Creator"
              []
              outEnum

getParent155 :: IDataLabel a0
             -> IO (IDispatch ())
getParent155 =
  propertyGet "Parent"
              []
              outIDispatch

getName45 :: IDataLabel a0
          -> IO String
getName45 =
  propertyGet "Name"
              []
              outString

select57 :: (Variant a1)
         => IDataLabel a0
         -> IO a1
select57 =
  function1 "Select"
            []
            outVariant

getBorder30 :: IDataLabel a0
            -> IO (Border ())
getBorder30 =
  propertyGet "Border"
              []
              outIUnknown

delete82 :: (Variant a1)
         => IDataLabel a0
         -> IO a1
delete82 =
  function1 "Delete"
            []
            outVariant

getInterior29 :: IDataLabel a0
              -> IO (Interior ())
getInterior29 =
  propertyGet "Interior"
              []
              outIUnknown

getFill3 :: IDataLabel a0
         -> IO (ChartFillFormat ())
getFill3 =
  propertyGet "Fill"
              []
              outIUnknown

getCaption35 :: IDataLabel a0
             -> IO String
getCaption35 =
  propertyGet "Caption"
              []
              outString

setCaption35 :: String
             -> IDataLabel a0
             -> IO ()
setCaption35 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters28 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDataLabel a0
                -> IO (Characters ())
getCharacters28 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont20 :: IDataLabel a0
          -> IO (Font ())
getFont20 =
  propertyGet "Font"
              []
              outIUnknown

getHorizontalAlignment18 :: (Variant a1)
                         => IDataLabel a0
                         -> IO a1
getHorizontalAlignment18 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment18 :: a1
                         -> IDataLabel a0
                         -> IO ()
setHorizontalAlignment18 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLeft48 :: IDataLabel a0
          -> IO Double
getLeft48 =
  propertyGet "Left"
              []
              outDouble

setLeft46 :: Double
          -> IDataLabel a0
          -> IO ()
setLeft46 rHS =
  propertySet "Left"
              [inDouble rHS]

getOrientation21 :: (Variant a1)
                 => IDataLabel a0
                 -> IO a1
getOrientation21 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation21 :: a1
                 -> IDataLabel a0
                 -> IO ()
setOrientation21 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getShadow21 :: IDataLabel a0
            -> IO Bool
getShadow21 =
  propertyGet "Shadow"
              []
              outBool

setShadow21 :: Bool
            -> IDataLabel a0
            -> IO ()
setShadow21 rHS =
  propertySet "Shadow"
              [inBool rHS]

getText31 :: IDataLabel a0
          -> IO String
getText31 =
  propertyGet "Text"
              []
              outString

setText30 :: String
          -> IDataLabel a0
          -> IO ()
setText30 rHS =
  propertySet "Text"
              [inString rHS]

getTop48 :: IDataLabel a0
         -> IO Double
getTop48 =
  propertyGet "Top"
              []
              outDouble

setTop46 :: Double
         -> IDataLabel a0
         -> IO ()
setTop46 rHS =
  propertySet "Top"
              [inDouble rHS]

getVerticalAlignment18 :: (Variant a1)
                       => IDataLabel a0
                       -> IO a1
getVerticalAlignment18 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment18 :: a1
                       -> IDataLabel a0
                       -> IO ()
setVerticalAlignment18 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder18 :: IDataLabel a0
                  -> IO Int32
getReadingOrder18 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder18 :: Int32
                  -> IDataLabel a0
                  -> IO ()
setReadingOrder18 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoScaleFont13 :: (Variant a1)
                   => IDataLabel a0
                   -> IO a1
getAutoScaleFont13 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont13 :: a1
                   -> IDataLabel a0
                   -> IO ()
setAutoScaleFont13 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoText :: IDataLabel a0
            -> IO Bool
getAutoText =
  propertyGet "AutoText"
              []
              outBool

setAutoText :: Bool
            -> IDataLabel a0
            -> IO ()
setAutoText rHS =
  propertySet "AutoText"
              [inBool rHS]

getNumberFormat3 :: IDataLabel a0
                 -> IO String
getNumberFormat3 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat3 :: String
                 -> IDataLabel a0
                 -> IO ()
setNumberFormat3 rHS =
  propertySet "NumberFormat"
              [inString rHS]

getNumberFormatLinked :: IDataLabel a0
                      -> IO Bool
getNumberFormatLinked =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked :: Bool
                      -> IDataLabel a0
                      -> IO ()
setNumberFormatLinked rHS =
  propertySet "NumberFormatLinked"
              [inBool rHS]

getNumberFormatLocal1 :: (Variant a1)
                      => IDataLabel a0
                      -> IO a1
getNumberFormatLocal1 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal1 :: a1
                      -> IDataLabel a0
                      -> IO ()
setNumberFormatLocal1 rHS =
  propertySet "NumberFormatLocal"
              [inVariant rHS]

getShowLegendKey :: IDataLabel a0
                 -> IO Bool
getShowLegendKey =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey :: Bool
                 -> IDataLabel a0
                 -> IO ()
setShowLegendKey rHS =
  propertySet "ShowLegendKey"
              [inBool rHS]

getType17 :: (Variant a1)
          => IDataLabel a0
          -> IO a1
getType17 =
  propertyGet "Type"
              []
              outVariant

setType7 :: a1
         -> IDataLabel a0
         -> IO ()
setType7 rHS =
  propertySet "Type"
              [inVariant rHS]

getPosition4 :: IDataLabel a0
             -> IO XlDataLabelPosition
getPosition4 =
  propertyGet "Position"
              []
              outEnum

setPosition5 :: XlDataLabelPosition
             -> IDataLabel a0
             -> IO ()
setPosition5 rHS =
  propertySet "Position"
              [inEnum rHS]

getShowSeriesName :: IDataLabel a0
                  -> IO Bool
getShowSeriesName =
  propertyGet "ShowSeriesName"
              []
              outBool

setShowSeriesName :: Bool
                  -> IDataLabel a0
                  -> IO ()
setShowSeriesName rHS =
  propertySet "ShowSeriesName"
              [inBool rHS]

getShowCategoryName :: IDataLabel a0
                    -> IO Bool
getShowCategoryName =
  propertyGet "ShowCategoryName"
              []
              outBool

setShowCategoryName :: Bool
                    -> IDataLabel a0
                    -> IO ()
setShowCategoryName rHS =
  propertySet "ShowCategoryName"
              [inBool rHS]

getShowValue :: IDataLabel a0
             -> IO Bool
getShowValue =
  propertyGet "ShowValue"
              []
              outBool

setShowValue :: Bool
             -> IDataLabel a0
             -> IO ()
setShowValue rHS =
  propertySet "ShowValue"
              [inBool rHS]

getShowPercentage :: IDataLabel a0
                  -> IO Bool
getShowPercentage =
  propertyGet "ShowPercentage"
              []
              outBool

setShowPercentage :: Bool
                  -> IDataLabel a0
                  -> IO ()
setShowPercentage rHS =
  propertySet "ShowPercentage"
              [inBool rHS]

getShowBubbleSize :: IDataLabel a0
                  -> IO Bool
getShowBubbleSize =
  propertyGet "ShowBubbleSize"
              []
              outBool

setShowBubbleSize :: Bool
                  -> IDataLabel a0
                  -> IO ()
setShowBubbleSize rHS =
  propertySet "ShowBubbleSize"
              [inBool rHS]

getSeparator :: (Variant a1)
             => IDataLabel a0
             -> IO a1
getSeparator =
  propertyGet "Separator"
              []
              outVariant

setSeparator :: a1
             -> IDataLabel a0
             -> IO ()
setSeparator rHS =
  propertySet "Separator"
              [inVariant rHS]

getFormat4 :: IDataLabel a0
           -> IO (ChartFormat ())
getFormat4 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDataLabels
-- 
-- --------------------------------------------------
data IDataLabels_ a = IDataLabels__ 
type IDataLabels a = IDispatch (IDataLabels_ a)
iidIDataLabels :: IID (IDataLabels ())
iidIDataLabels = mkIID "{000208B3-0001-0000-C000-000000000046}"

getApplication141 :: (Variant a1)
                  => IDataLabels a0
                  -> IO a1
getApplication141 =
  propertyGet "Application"
              []
              outVariant

getCreator141 :: IDataLabels a0
              -> IO XlCreator
getCreator141 =
  propertyGet "Creator"
              []
              outEnum

getParent156 :: IDataLabels a0
             -> IO (IDispatch ())
getParent156 =
  propertyGet "Parent"
              []
              outIDispatch

getName46 :: IDataLabels a0
          -> IO String
getName46 =
  propertyGet "Name"
              []
              outString

select58 :: (Variant a1)
         => IDataLabels a0
         -> IO a1
select58 =
  function1 "Select"
            []
            outVariant

getBorder31 :: IDataLabels a0
            -> IO (Border ())
getBorder31 =
  propertyGet "Border"
              []
              outIUnknown

delete83 :: (Variant a1)
         => IDataLabels a0
         -> IO a1
delete83 =
  function1 "Delete"
            []
            outVariant

getInterior30 :: IDataLabels a0
              -> IO (Interior ())
getInterior30 =
  propertyGet "Interior"
              []
              outIUnknown

getFill4 :: IDataLabels a0
         -> IO (ChartFillFormat ())
getFill4 =
  propertyGet "Fill"
              []
              outIUnknown

dummy91 :: IDataLabels a0
        -> IO ()
dummy91 =
  method0 "_Dummy9"
          []

dummy101 :: IDataLabels a0
         -> IO ()
dummy101 =
  method0 "_Dummy10"
          []

getFont21 :: IDataLabels a0
          -> IO (Font ())
getFont21 =
  propertyGet "Font"
              []
              outIUnknown

getHorizontalAlignment19 :: (Variant a1)
                         => IDataLabels a0
                         -> IO a1
getHorizontalAlignment19 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment19 :: a1
                         -> IDataLabels a0
                         -> IO ()
setHorizontalAlignment19 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

dummy130 :: IDataLabels a0
         -> IO ()
dummy130 =
  method0 "_Dummy13"
          []

getOrientation22 :: (Variant a1)
                 => IDataLabels a0
                 -> IO a1
getOrientation22 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation22 :: a1
                 -> IDataLabels a0
                 -> IO ()
setOrientation22 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getShadow22 :: IDataLabels a0
            -> IO Bool
getShadow22 =
  propertyGet "Shadow"
              []
              outBool

setShadow22 :: Bool
            -> IDataLabels a0
            -> IO ()
setShadow22 rHS =
  propertySet "Shadow"
              [inBool rHS]

dummy160 :: IDataLabels a0
         -> IO ()
dummy160 =
  method0 "_Dummy16"
          []

dummy171 :: IDataLabels a0
         -> IO ()
dummy171 =
  method0 "_Dummy17"
          []

getVerticalAlignment19 :: (Variant a1)
                       => IDataLabels a0
                       -> IO a1
getVerticalAlignment19 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment19 :: a1
                       -> IDataLabels a0
                       -> IO ()
setVerticalAlignment19 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder19 :: IDataLabels a0
                  -> IO Int32
getReadingOrder19 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder19 :: Int32
                  -> IDataLabels a0
                  -> IO ()
setReadingOrder19 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoScaleFont14 :: (Variant a1)
                   => IDataLabels a0
                   -> IO a1
getAutoScaleFont14 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont14 :: a1
                   -> IDataLabels a0
                   -> IO ()
setAutoScaleFont14 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getAutoText0 :: IDataLabels a0
             -> IO Bool
getAutoText0 =
  propertyGet "AutoText"
              []
              outBool

setAutoText0 :: Bool
             -> IDataLabels a0
             -> IO ()
setAutoText0 rHS =
  propertySet "AutoText"
              [inBool rHS]

getNumberFormat4 :: IDataLabels a0
                 -> IO String
getNumberFormat4 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat4 :: String
                 -> IDataLabels a0
                 -> IO ()
setNumberFormat4 rHS =
  propertySet "NumberFormat"
              [inString rHS]

getNumberFormatLinked0 :: IDataLabels a0
                       -> IO Bool
getNumberFormatLinked0 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked0 :: Bool
                       -> IDataLabels a0
                       -> IO ()
setNumberFormatLinked0 rHS =
  propertySet "NumberFormatLinked"
              [inBool rHS]

getNumberFormatLocal2 :: (Variant a1)
                      => IDataLabels a0
                      -> IO a1
getNumberFormatLocal2 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal2 :: a1
                      -> IDataLabels a0
                      -> IO ()
setNumberFormatLocal2 rHS =
  propertySet "NumberFormatLocal"
              [inVariant rHS]

getShowLegendKey0 :: IDataLabels a0
                  -> IO Bool
getShowLegendKey0 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey0 :: Bool
                  -> IDataLabels a0
                  -> IO ()
setShowLegendKey0 rHS =
  propertySet "ShowLegendKey"
              [inBool rHS]

getType18 :: (Variant a1)
          => IDataLabels a0
          -> IO a1
getType18 =
  propertyGet "Type"
              []
              outVariant

setType8 :: a1
         -> IDataLabels a0
         -> IO ()
setType8 rHS =
  propertySet "Type"
              [inVariant rHS]

getPosition5 :: IDataLabels a0
             -> IO XlDataLabelPosition
getPosition5 =
  propertyGet "Position"
              []
              outEnum

setPosition6 :: XlDataLabelPosition
             -> IDataLabels a0
             -> IO ()
setPosition6 rHS =
  propertySet "Position"
              [inEnum rHS]

getShowSeriesName0 :: IDataLabels a0
                   -> IO Bool
getShowSeriesName0 =
  propertyGet "ShowSeriesName"
              []
              outBool

setShowSeriesName0 :: Bool
                   -> IDataLabels a0
                   -> IO ()
setShowSeriesName0 rHS =
  propertySet "ShowSeriesName"
              [inBool rHS]

getShowCategoryName0 :: IDataLabels a0
                     -> IO Bool
getShowCategoryName0 =
  propertyGet "ShowCategoryName"
              []
              outBool

setShowCategoryName0 :: Bool
                     -> IDataLabels a0
                     -> IO ()
setShowCategoryName0 rHS =
  propertySet "ShowCategoryName"
              [inBool rHS]

getShowValue0 :: IDataLabels a0
              -> IO Bool
getShowValue0 =
  propertyGet "ShowValue"
              []
              outBool

setShowValue0 :: Bool
              -> IDataLabels a0
              -> IO ()
setShowValue0 rHS =
  propertySet "ShowValue"
              [inBool rHS]

getShowPercentage0 :: IDataLabels a0
                   -> IO Bool
getShowPercentage0 =
  propertyGet "ShowPercentage"
              []
              outBool

setShowPercentage0 :: Bool
                   -> IDataLabels a0
                   -> IO ()
setShowPercentage0 rHS =
  propertySet "ShowPercentage"
              [inBool rHS]

getShowBubbleSize0 :: IDataLabels a0
                   -> IO Bool
getShowBubbleSize0 =
  propertyGet "ShowBubbleSize"
              []
              outBool

setShowBubbleSize0 :: Bool
                   -> IDataLabels a0
                   -> IO ()
setShowBubbleSize0 rHS =
  propertySet "ShowBubbleSize"
              [inBool rHS]

getSeparator0 :: (Variant a1)
              => IDataLabels a0
              -> IO a1
getSeparator0 =
  propertyGet "Separator"
              []
              outVariant

setSeparator0 :: a1
              -> IDataLabels a0
              -> IO ()
setSeparator0 rHS =
  propertySet "Separator"
              [inVariant rHS]

getCount69 :: IDataLabels a0
           -> IO Int32
getCount69 =
  propertyGet "Count"
              []
              outInt32

item42 :: a1
       -> IDataLabels a0
       -> IO (DataLabel ())
item42 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

newEnum35 :: IDataLabels a0
          -> IO (IUnknown ())
newEnum35 =
  function1 "_NewEnum"
            []
            outIUnknown

default5 :: a1
         -> IDataLabels a0
         -> IO (DataLabel ())
default5 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

getFormat5 :: IDataLabels a0
           -> IO (ChartFormat ())
getFormat5 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ILegendEntry
-- 
-- --------------------------------------------------
data ILegendEntry_ a = ILegendEntry__ 
type ILegendEntry a = IDispatch (ILegendEntry_ a)
iidILegendEntry :: IID (ILegendEntry ())
iidILegendEntry = mkIID "{000208BA-0001-0000-C000-000000000046}"

getApplication142 :: (Variant a1)
                  => ILegendEntry a0
                  -> IO a1
getApplication142 =
  propertyGet "Application"
              []
              outVariant

getCreator142 :: ILegendEntry a0
              -> IO XlCreator
getCreator142 =
  propertyGet "Creator"
              []
              outEnum

getParent157 :: ILegendEntry a0
             -> IO (IDispatch ())
getParent157 =
  propertyGet "Parent"
              []
              outIDispatch

delete84 :: (Variant a1)
         => ILegendEntry a0
         -> IO a1
delete84 =
  function1 "Delete"
            []
            outVariant

getFont22 :: ILegendEntry a0
          -> IO (Font ())
getFont22 =
  propertyGet "Font"
              []
              outIUnknown

getIndex34 :: ILegendEntry a0
           -> IO Int32
getIndex34 =
  propertyGet "Index"
              []
              outInt32

getLegendKey :: ILegendEntry a0
             -> IO (LegendKey ())
getLegendKey =
  propertyGet "LegendKey"
              []
              outIUnknown

select59 :: (Variant a1)
         => ILegendEntry a0
         -> IO a1
select59 =
  function1 "Select"
            []
            outVariant

getAutoScaleFont15 :: (Variant a1)
                   => ILegendEntry a0
                   -> IO a1
getAutoScaleFont15 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont15 :: a1
                   -> ILegendEntry a0
                   -> IO ()
setAutoScaleFont15 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getLeft49 :: ILegendEntry a0
          -> IO Double
getLeft49 =
  propertyGet "Left"
              []
              outDouble

getTop49 :: ILegendEntry a0
         -> IO Double
getTop49 =
  propertyGet "Top"
              []
              outDouble

getWidth47 :: ILegendEntry a0
           -> IO Double
getWidth47 =
  propertyGet "Width"
              []
              outDouble

getHeight46 :: ILegendEntry a0
            -> IO Double
getHeight46 =
  propertyGet "Height"
              []
              outDouble

getFormat6 :: ILegendEntry a0
           -> IO (ChartFormat ())
getFormat6 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ILegendEntries
-- 
-- --------------------------------------------------
data ILegendEntries_ a = ILegendEntries__ 
type ILegendEntries a = IDispatch (ILegendEntries_ a)
iidILegendEntries :: IID (ILegendEntries ())
iidILegendEntries = mkIID "{000208BB-0001-0000-C000-000000000046}"

getApplication143 :: (Variant a1)
                  => ILegendEntries a0
                  -> IO a1
getApplication143 =
  propertyGet "Application"
              []
              outVariant

getCreator143 :: ILegendEntries a0
              -> IO XlCreator
getCreator143 =
  propertyGet "Creator"
              []
              outEnum

getParent158 :: ILegendEntries a0
             -> IO (IDispatch ())
getParent158 =
  propertyGet "Parent"
              []
              outIDispatch

getCount70 :: ILegendEntries a0
           -> IO Int32
getCount70 =
  propertyGet "Count"
              []
              outInt32

item43 :: a1
       -> ILegendEntries a0
       -> IO (LegendEntry ())
item43 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

newEnum36 :: ILegendEntries a0
          -> IO (IUnknown ())
newEnum36 =
  function1 "_NewEnum"
            []
            outIUnknown

default6 :: a1
         -> ILegendEntries a0
         -> IO (LegendEntry ())
default6 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ILegendKey
-- 
-- --------------------------------------------------
data ILegendKey_ a = ILegendKey__ 
type ILegendKey a = IDispatch (ILegendKey_ a)
iidILegendKey :: IID (ILegendKey ())
iidILegendKey = mkIID "{000208BC-0001-0000-C000-000000000046}"

getApplication144 :: (Variant a1)
                  => ILegendKey a0
                  -> IO a1
getApplication144 =
  propertyGet "Application"
              []
              outVariant

getCreator144 :: ILegendKey a0
              -> IO XlCreator
getCreator144 =
  propertyGet "Creator"
              []
              outEnum

getParent159 :: ILegendKey a0
             -> IO (IDispatch ())
getParent159 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder32 :: ILegendKey a0
            -> IO (Border ())
getBorder32 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats2 :: (Variant a1)
              => ILegendKey a0
              -> IO a1
clearFormats2 =
  function1 "ClearFormats"
            []
            outVariant

delete85 :: (Variant a1)
         => ILegendKey a0
         -> IO a1
delete85 =
  function1 "Delete"
            []
            outVariant

getInterior31 :: ILegendKey a0
              -> IO (Interior ())
getInterior31 =
  propertyGet "Interior"
              []
              outIUnknown

getFill5 :: ILegendKey a0
         -> IO (ChartFillFormat ())
getFill5 =
  propertyGet "Fill"
              []
              outIUnknown

getInvertIfNegative2 :: ILegendKey a0
                     -> IO Bool
getInvertIfNegative2 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative2 :: Bool
                     -> ILegendKey a0
                     -> IO ()
setInvertIfNegative2 rHS =
  propertySet "InvertIfNegative"
              [inBool rHS]

getMarkerBackgroundColor1 :: ILegendKey a0
                          -> IO Int32
getMarkerBackgroundColor1 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor1 :: Int32
                          -> ILegendKey a0
                          -> IO ()
setMarkerBackgroundColor1 rHS =
  propertySet "MarkerBackgroundColor"
              [inInt32 rHS]

getMarkerBackgroundColorIndex1 :: ILegendKey a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex1 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex1 :: XlColorIndex
                               -> ILegendKey a0
                               -> IO ()
setMarkerBackgroundColorIndex1 rHS =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum rHS]

getMarkerForegroundColor1 :: ILegendKey a0
                          -> IO Int32
getMarkerForegroundColor1 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor1 :: Int32
                          -> ILegendKey a0
                          -> IO ()
setMarkerForegroundColor1 rHS =
  propertySet "MarkerForegroundColor"
              [inInt32 rHS]

getMarkerForegroundColorIndex1 :: ILegendKey a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex1 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex1 :: XlColorIndex
                               -> ILegendKey a0
                               -> IO ()
setMarkerForegroundColorIndex1 rHS =
  propertySet "MarkerForegroundColorIndex"
              [inEnum rHS]

getMarkerSize1 :: ILegendKey a0
               -> IO Int32
getMarkerSize1 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize1 :: Int32
               -> ILegendKey a0
               -> IO ()
setMarkerSize1 rHS =
  propertySet "MarkerSize"
              [inInt32 rHS]

getMarkerStyle1 :: ILegendKey a0
                -> IO XlMarkerStyle
getMarkerStyle1 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle1 :: XlMarkerStyle
                -> ILegendKey a0
                -> IO ()
setMarkerStyle1 rHS =
  propertySet "MarkerStyle"
              [inEnum rHS]

getPictureType1 :: ILegendKey a0
                -> IO Int32
getPictureType1 =
  propertyGet "PictureType"
              []
              outInt32

setPictureType1 :: Int32
                -> ILegendKey a0
                -> IO ()
setPictureType1 rHS =
  propertySet "PictureType"
              [inInt32 rHS]

getPictureUnit1 :: ILegendKey a0
                -> IO Int32
getPictureUnit1 =
  propertyGet "PictureUnit"
              []
              outInt32

setPictureUnit1 :: Int32
                -> ILegendKey a0
                -> IO ()
setPictureUnit1 rHS =
  propertySet "PictureUnit"
              [inInt32 rHS]

select60 :: (Variant a1)
         => ILegendKey a0
         -> IO a1
select60 =
  function1 "Select"
            []
            outVariant

getSmooth0 :: ILegendKey a0
           -> IO Bool
getSmooth0 =
  propertyGet "Smooth"
              []
              outBool

setSmooth0 :: Bool
           -> ILegendKey a0
           -> IO ()
setSmooth0 rHS =
  propertySet "Smooth"
              [inBool rHS]

getLeft50 :: ILegendKey a0
          -> IO Double
getLeft50 =
  propertyGet "Left"
              []
              outDouble

getTop50 :: ILegendKey a0
         -> IO Double
getTop50 =
  propertyGet "Top"
              []
              outDouble

getWidth48 :: ILegendKey a0
           -> IO Double
getWidth48 =
  propertyGet "Width"
              []
              outDouble

getHeight47 :: ILegendKey a0
            -> IO Double
getHeight47 =
  propertyGet "Height"
              []
              outDouble

getShadow23 :: ILegendKey a0
            -> IO Bool
getShadow23 =
  propertyGet "Shadow"
              []
              outBool

setShadow23 :: Bool
            -> ILegendKey a0
            -> IO ()
setShadow23 rHS =
  propertySet "Shadow"
              [inBool rHS]

getPictureUnit21 :: ILegendKey a0
                 -> IO Double
getPictureUnit21 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit21 :: Double
                 -> ILegendKey a0
                 -> IO ()
setPictureUnit21 rHS =
  propertySet "PictureUnit2"
              [inDouble rHS]

getFormat7 :: ILegendKey a0
           -> IO (ChartFormat ())
getFormat7 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ITrendlines
-- 
-- --------------------------------------------------
data ITrendlines_ a = ITrendlines__ 
type ITrendlines a = IDispatch (ITrendlines_ a)
iidITrendlines :: IID (ITrendlines ())
iidITrendlines = mkIID "{000208BD-0001-0000-C000-000000000046}"

getApplication145 :: (Variant a1)
                  => ITrendlines a0
                  -> IO a1
getApplication145 =
  propertyGet "Application"
              []
              outVariant

getCreator145 :: ITrendlines a0
              -> IO XlCreator
getCreator145 =
  propertyGet "Creator"
              []
              outEnum

getParent160 :: ITrendlines a0
             -> IO (IDispatch ())
getParent160 =
  propertyGet "Parent"
              []
              outIDispatch

add52 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> ITrendlines a0
      -> IO (Trendline ())
add52 type0 order period forward backward intercept0 displayEquation displayRSquared name =
  function1 "Add"
            [ inDefaultValue (inInt32 (-4132)) inVariant type0
            , inVariant order
            , inVariant period
            , inVariant forward
            , inVariant backward
            , inVariant intercept0
            , inVariant displayEquation
            , inVariant displayRSquared
            , inVariant name
            ]
            outIUnknown

getCount71 :: ITrendlines a0
           -> IO Int32
getCount71 =
  propertyGet "Count"
              []
              outInt32

item44 :: (Variant a1)
       => a1
       -> ITrendlines a0
       -> IO (Trendline ())
item44 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

newEnum37 :: ITrendlines a0
          -> IO (IUnknown ())
newEnum37 =
  function1 "_NewEnum"
            []
            outIUnknown

default7 :: (Variant a1)
         => a1
         -> ITrendlines a0
         -> IO (Trendline ())
default7 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ITrendline
-- 
-- --------------------------------------------------
data ITrendline_ a = ITrendline__ 
type ITrendline a = IDispatch (ITrendline_ a)
iidITrendline :: IID (ITrendline ())
iidITrendline = mkIID "{000208BE-0001-0000-C000-000000000046}"

getApplication146 :: (Variant a1)
                  => ITrendline a0
                  -> IO a1
getApplication146 =
  propertyGet "Application"
              []
              outVariant

getCreator146 :: ITrendline a0
              -> IO XlCreator
getCreator146 =
  propertyGet "Creator"
              []
              outEnum

getParent161 :: ITrendline a0
             -> IO (IDispatch ())
getParent161 =
  propertyGet "Parent"
              []
              outIDispatch

getBackward :: ITrendline a0
            -> IO Int32
getBackward =
  propertyGet "Backward"
              []
              outInt32

setBackward :: Int32
            -> ITrendline a0
            -> IO ()
setBackward rHS =
  propertySet "Backward"
              [inInt32 rHS]

getBorder33 :: ITrendline a0
            -> IO (Border ())
getBorder33 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats3 :: (Variant a1)
              => ITrendline a0
              -> IO a1
clearFormats3 =
  function1 "ClearFormats"
            []
            outVariant

getDataLabel0 :: ITrendline a0
              -> IO (DataLabel ())
getDataLabel0 =
  propertyGet "DataLabel"
              []
              outIUnknown

delete86 :: (Variant a1)
         => ITrendline a0
         -> IO a1
delete86 =
  function1 "Delete"
            []
            outVariant

getDisplayEquation :: ITrendline a0
                   -> IO Bool
getDisplayEquation =
  propertyGet "DisplayEquation"
              []
              outBool

setDisplayEquation :: Bool
                   -> ITrendline a0
                   -> IO ()
setDisplayEquation rHS =
  propertySet "DisplayEquation"
              [inBool rHS]

getDisplayRSquared :: ITrendline a0
                   -> IO Bool
getDisplayRSquared =
  propertyGet "DisplayRSquared"
              []
              outBool

setDisplayRSquared :: Bool
                   -> ITrendline a0
                   -> IO ()
setDisplayRSquared rHS =
  propertySet "DisplayRSquared"
              [inBool rHS]

getForward :: ITrendline a0
           -> IO Int32
getForward =
  propertyGet "Forward"
              []
              outInt32

setForward :: Int32
           -> ITrendline a0
           -> IO ()
setForward rHS =
  propertySet "Forward"
              [inInt32 rHS]

getIndex35 :: ITrendline a0
           -> IO Int32
getIndex35 =
  propertyGet "Index"
              []
              outInt32

getIntercept :: ITrendline a0
             -> IO Double
getIntercept =
  propertyGet "Intercept"
              []
              outDouble

setIntercept :: Double
             -> ITrendline a0
             -> IO ()
setIntercept rHS =
  propertySet "Intercept"
              [inDouble rHS]

getInterceptIsAuto :: ITrendline a0
                   -> IO Bool
getInterceptIsAuto =
  propertyGet "InterceptIsAuto"
              []
              outBool

setInterceptIsAuto :: Bool
                   -> ITrendline a0
                   -> IO ()
setInterceptIsAuto rHS =
  propertySet "InterceptIsAuto"
              [inBool rHS]

getName47 :: ITrendline a0
          -> IO String
getName47 =
  propertyGet "Name"
              []
              outString

setName35 :: String
          -> ITrendline a0
          -> IO ()
setName35 rHS =
  propertySet "Name"
              [inString rHS]

getNameIsAuto :: ITrendline a0
              -> IO Bool
getNameIsAuto =
  propertyGet "NameIsAuto"
              []
              outBool

setNameIsAuto :: Bool
              -> ITrendline a0
              -> IO ()
setNameIsAuto rHS =
  propertySet "NameIsAuto"
              [inBool rHS]

getOrder0 :: ITrendline a0
          -> IO Int32
getOrder0 =
  propertyGet "Order"
              []
              outInt32

setOrder0 :: Int32
          -> ITrendline a0
          -> IO ()
setOrder0 rHS =
  propertySet "Order"
              [inInt32 rHS]

getPeriod :: ITrendline a0
          -> IO Int32
getPeriod =
  propertyGet "Period"
              []
              outInt32

setPeriod :: Int32
          -> ITrendline a0
          -> IO ()
setPeriod rHS =
  propertySet "Period"
              [inInt32 rHS]

select61 :: (Variant a1)
         => ITrendline a0
         -> IO a1
select61 =
  function1 "Select"
            []
            outVariant

getType19 :: ITrendline a0
          -> IO XlTrendlineType
getType19 =
  propertyGet "Type"
              []
              outEnum

setType9 :: XlTrendlineType
         -> ITrendline a0
         -> IO ()
setType9 rHS =
  propertySet "Type"
              [inEnum rHS]

getBackward2 :: ITrendline a0
             -> IO Double
getBackward2 =
  propertyGet "Backward2"
              []
              outDouble

setBackward2 :: Double
             -> ITrendline a0
             -> IO ()
setBackward2 rHS =
  propertySet "Backward2"
              [inDouble rHS]

getForward2 :: ITrendline a0
            -> IO Double
getForward2 =
  propertyGet "Forward2"
              []
              outDouble

setForward2 :: Double
            -> ITrendline a0
            -> IO ()
setForward2 rHS =
  propertySet "Forward2"
              [inDouble rHS]

getFormat8 :: ITrendline a0
           -> IO (ChartFormat ())
getFormat8 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ICorners
-- 
-- --------------------------------------------------
data ICorners_ a = ICorners__ 
type ICorners a = IDispatch (ICorners_ a)
iidICorners :: IID (ICorners ())
iidICorners = mkIID "{000208C0-0001-0000-C000-000000000046}"

getApplication147 :: (Variant a1)
                  => ICorners a0
                  -> IO a1
getApplication147 =
  propertyGet "Application"
              []
              outVariant

getCreator147 :: ICorners a0
              -> IO XlCreator
getCreator147 =
  propertyGet "Creator"
              []
              outEnum

getParent162 :: ICorners a0
             -> IO (IDispatch ())
getParent162 =
  propertyGet "Parent"
              []
              outIDispatch

getName48 :: ICorners a0
          -> IO String
getName48 =
  propertyGet "Name"
              []
              outString

select62 :: (Variant a1)
         => ICorners a0
         -> IO a1
select62 =
  function1 "Select"
            []
            outVariant

-- --------------------------------------------------
-- 
-- interface ISeriesLines
-- 
-- --------------------------------------------------
data ISeriesLines_ a = ISeriesLines__ 
type ISeriesLines a = IDispatch (ISeriesLines_ a)
iidISeriesLines :: IID (ISeriesLines ())
iidISeriesLines = mkIID "{000208C1-0001-0000-C000-000000000046}"

getApplication148 :: (Variant a1)
                  => ISeriesLines a0
                  -> IO a1
getApplication148 =
  propertyGet "Application"
              []
              outVariant

getCreator148 :: ISeriesLines a0
              -> IO XlCreator
getCreator148 =
  propertyGet "Creator"
              []
              outEnum

getParent163 :: ISeriesLines a0
             -> IO (IDispatch ())
getParent163 =
  propertyGet "Parent"
              []
              outIDispatch

getName49 :: ISeriesLines a0
          -> IO String
getName49 =
  propertyGet "Name"
              []
              outString

select63 :: (Variant a1)
         => ISeriesLines a0
         -> IO a1
select63 =
  function1 "Select"
            []
            outVariant

getBorder34 :: ISeriesLines a0
            -> IO (Border ())
getBorder34 =
  propertyGet "Border"
              []
              outIUnknown

delete87 :: (Variant a1)
         => ISeriesLines a0
         -> IO a1
delete87 =
  function1 "Delete"
            []
            outVariant

getFormat9 :: ISeriesLines a0
           -> IO (ChartFormat ())
getFormat9 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IHiLoLines
-- 
-- --------------------------------------------------
data IHiLoLines_ a = IHiLoLines__ 
type IHiLoLines a = IDispatch (IHiLoLines_ a)
iidIHiLoLines :: IID (IHiLoLines ())
iidIHiLoLines = mkIID "{000208C2-0001-0000-C000-000000000046}"

getApplication149 :: (Variant a1)
                  => IHiLoLines a0
                  -> IO a1
getApplication149 =
  propertyGet "Application"
              []
              outVariant

getCreator149 :: IHiLoLines a0
              -> IO XlCreator
getCreator149 =
  propertyGet "Creator"
              []
              outEnum

getParent164 :: IHiLoLines a0
             -> IO (IDispatch ())
getParent164 =
  propertyGet "Parent"
              []
              outIDispatch

getName50 :: IHiLoLines a0
          -> IO String
getName50 =
  propertyGet "Name"
              []
              outString

select64 :: (Variant a1)
         => IHiLoLines a0
         -> IO a1
select64 =
  function1 "Select"
            []
            outVariant

getBorder35 :: IHiLoLines a0
            -> IO (Border ())
getBorder35 =
  propertyGet "Border"
              []
              outIUnknown

delete88 :: (Variant a1)
         => IHiLoLines a0
         -> IO a1
delete88 =
  function1 "Delete"
            []
            outVariant

getFormat10 :: IHiLoLines a0
            -> IO (ChartFormat ())
getFormat10 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IGridlines
-- 
-- --------------------------------------------------
data IGridlines_ a = IGridlines__ 
type IGridlines a = IDispatch (IGridlines_ a)
iidIGridlines :: IID (IGridlines ())
iidIGridlines = mkIID "{000208C3-0001-0000-C000-000000000046}"

getApplication150 :: (Variant a1)
                  => IGridlines a0
                  -> IO a1
getApplication150 =
  propertyGet "Application"
              []
              outVariant

getCreator150 :: IGridlines a0
              -> IO XlCreator
getCreator150 =
  propertyGet "Creator"
              []
              outEnum

getParent165 :: IGridlines a0
             -> IO (IDispatch ())
getParent165 =
  propertyGet "Parent"
              []
              outIDispatch

getName51 :: IGridlines a0
          -> IO String
getName51 =
  propertyGet "Name"
              []
              outString

select65 :: (Variant a1)
         => IGridlines a0
         -> IO a1
select65 =
  function1 "Select"
            []
            outVariant

getBorder36 :: IGridlines a0
            -> IO (Border ())
getBorder36 =
  propertyGet "Border"
              []
              outIUnknown

delete89 :: (Variant a1)
         => IGridlines a0
         -> IO a1
delete89 =
  function1 "Delete"
            []
            outVariant

getFormat11 :: IGridlines a0
            -> IO (ChartFormat ())
getFormat11 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDropLines
-- 
-- --------------------------------------------------
data IDropLines_ a = IDropLines__ 
type IDropLines a = IDispatch (IDropLines_ a)
iidIDropLines :: IID (IDropLines ())
iidIDropLines = mkIID "{000208C4-0001-0000-C000-000000000046}"

getApplication151 :: (Variant a1)
                  => IDropLines a0
                  -> IO a1
getApplication151 =
  propertyGet "Application"
              []
              outVariant

getCreator151 :: IDropLines a0
              -> IO XlCreator
getCreator151 =
  propertyGet "Creator"
              []
              outEnum

getParent166 :: IDropLines a0
             -> IO (IDispatch ())
getParent166 =
  propertyGet "Parent"
              []
              outIDispatch

getName52 :: IDropLines a0
          -> IO String
getName52 =
  propertyGet "Name"
              []
              outString

select66 :: (Variant a1)
         => IDropLines a0
         -> IO a1
select66 =
  function1 "Select"
            []
            outVariant

getBorder37 :: IDropLines a0
            -> IO (Border ())
getBorder37 =
  propertyGet "Border"
              []
              outIUnknown

delete90 :: (Variant a1)
         => IDropLines a0
         -> IO a1
delete90 =
  function1 "Delete"
            []
            outVariant

getFormat12 :: IDropLines a0
            -> IO (ChartFormat ())
getFormat12 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ILeaderLines
-- 
-- --------------------------------------------------
data ILeaderLines_ a = ILeaderLines__ 
type ILeaderLines a = IDispatch (ILeaderLines_ a)
iidILeaderLines :: IID (ILeaderLines ())
iidILeaderLines = mkIID "{00024437-0001-0000-C000-000000000046}"

getApplication152 :: (Variant a1)
                  => ILeaderLines a0
                  -> IO a1
getApplication152 =
  propertyGet "Application"
              []
              outVariant

getCreator152 :: ILeaderLines a0
              -> IO XlCreator
getCreator152 =
  propertyGet "Creator"
              []
              outEnum

getParent167 :: ILeaderLines a0
             -> IO (IDispatch ())
getParent167 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder38 :: ILeaderLines a0
            -> IO (Border ())
getBorder38 =
  propertyGet "Border"
              []
              outIUnknown

delete91 :: ILeaderLines a0
         -> IO ()
delete91 =
  method0 "Delete"
          []

select67 :: ILeaderLines a0
         -> IO ()
select67 =
  method0 "Select"
          []

getFormat13 :: ILeaderLines a0
            -> IO (ChartFormat ())
getFormat13 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IUpBars
-- 
-- --------------------------------------------------
data IUpBars_ a = IUpBars__ 
type IUpBars a = IDispatch (IUpBars_ a)
iidIUpBars :: IID (IUpBars ())
iidIUpBars = mkIID "{000208C5-0001-0000-C000-000000000046}"

getApplication153 :: (Variant a1)
                  => IUpBars a0
                  -> IO a1
getApplication153 =
  propertyGet "Application"
              []
              outVariant

getCreator153 :: IUpBars a0
              -> IO XlCreator
getCreator153 =
  propertyGet "Creator"
              []
              outEnum

getParent168 :: IUpBars a0
             -> IO (IDispatch ())
getParent168 =
  propertyGet "Parent"
              []
              outIDispatch

getName53 :: IUpBars a0
          -> IO String
getName53 =
  propertyGet "Name"
              []
              outString

select68 :: (Variant a1)
         => IUpBars a0
         -> IO a1
select68 =
  function1 "Select"
            []
            outVariant

getBorder39 :: IUpBars a0
            -> IO (Border ())
getBorder39 =
  propertyGet "Border"
              []
              outIUnknown

delete92 :: (Variant a1)
         => IUpBars a0
         -> IO a1
delete92 =
  function1 "Delete"
            []
            outVariant

getInterior32 :: IUpBars a0
              -> IO (Interior ())
getInterior32 =
  propertyGet "Interior"
              []
              outIUnknown

getFill6 :: IUpBars a0
         -> IO (ChartFillFormat ())
getFill6 =
  propertyGet "Fill"
              []
              outIUnknown

getFormat14 :: IUpBars a0
            -> IO (ChartFormat ())
getFormat14 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDownBars
-- 
-- --------------------------------------------------
data IDownBars_ a = IDownBars__ 
type IDownBars a = IDispatch (IDownBars_ a)
iidIDownBars :: IID (IDownBars ())
iidIDownBars = mkIID "{000208C6-0001-0000-C000-000000000046}"

getApplication154 :: (Variant a1)
                  => IDownBars a0
                  -> IO a1
getApplication154 =
  propertyGet "Application"
              []
              outVariant

getCreator154 :: IDownBars a0
              -> IO XlCreator
getCreator154 =
  propertyGet "Creator"
              []
              outEnum

getParent169 :: IDownBars a0
             -> IO (IDispatch ())
getParent169 =
  propertyGet "Parent"
              []
              outIDispatch

getName54 :: IDownBars a0
          -> IO String
getName54 =
  propertyGet "Name"
              []
              outString

select69 :: (Variant a1)
         => IDownBars a0
         -> IO a1
select69 =
  function1 "Select"
            []
            outVariant

getBorder40 :: IDownBars a0
            -> IO (Border ())
getBorder40 =
  propertyGet "Border"
              []
              outIUnknown

delete93 :: (Variant a1)
         => IDownBars a0
         -> IO a1
delete93 =
  function1 "Delete"
            []
            outVariant

getInterior33 :: IDownBars a0
              -> IO (Interior ())
getInterior33 =
  propertyGet "Interior"
              []
              outIUnknown

getFill7 :: IDownBars a0
         -> IO (ChartFillFormat ())
getFill7 =
  propertyGet "Fill"
              []
              outIUnknown

getFormat15 :: IDownBars a0
            -> IO (ChartFormat ())
getFormat15 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IFloor
-- 
-- --------------------------------------------------
data IFloor_ a = IFloor__ 
type IFloor a = IDispatch (IFloor_ a)
iidIFloor :: IID (IFloor ())
iidIFloor = mkIID "{000208C7-0001-0000-C000-000000000046}"

getApplication155 :: (Variant a1)
                  => IFloor a0
                  -> IO a1
getApplication155 =
  propertyGet "Application"
              []
              outVariant

getCreator155 :: IFloor a0
              -> IO XlCreator
getCreator155 =
  propertyGet "Creator"
              []
              outEnum

getParent170 :: IFloor a0
             -> IO (IDispatch ())
getParent170 =
  propertyGet "Parent"
              []
              outIDispatch

getName55 :: IFloor a0
          -> IO String
getName55 =
  propertyGet "Name"
              []
              outString

select70 :: (Variant a1)
         => IFloor a0
         -> IO a1
select70 =
  function1 "Select"
            []
            outVariant

getBorder41 :: IFloor a0
            -> IO (Border ())
getBorder41 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats4 :: (Variant a1)
              => IFloor a0
              -> IO a1
clearFormats4 =
  function1 "ClearFormats"
            []
            outVariant

getInterior34 :: IFloor a0
              -> IO (Interior ())
getInterior34 =
  propertyGet "Interior"
              []
              outIUnknown

getFill8 :: IFloor a0
         -> IO (ChartFillFormat ())
getFill8 =
  propertyGet "Fill"
              []
              outIUnknown

getPictureType2 :: (Variant a1)
                => IFloor a0
                -> IO a1
getPictureType2 =
  propertyGet "PictureType"
              []
              outVariant

setPictureType2 :: a1
                -> IFloor a0
                -> IO ()
setPictureType2 rHS =
  propertySet "PictureType"
              [inVariant rHS]

paste6 :: IFloor a0
       -> IO ()
paste6 =
  method0 "Paste"
          []

getThickness :: IFloor a0
             -> IO Int32
getThickness =
  propertyGet "Thickness"
              []
              outInt32

setThickness :: Int32
             -> IFloor a0
             -> IO ()
setThickness rHS =
  propertySet "Thickness"
              [inInt32 rHS]

getFormat16 :: IFloor a0
            -> IO (ChartFormat ())
getFormat16 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IWalls
-- 
-- --------------------------------------------------
data IWalls_ a = IWalls__ 
type IWalls a = IDispatch (IWalls_ a)
iidIWalls :: IID (IWalls ())
iidIWalls = mkIID "{000208C8-0001-0000-C000-000000000046}"

getApplication156 :: (Variant a1)
                  => IWalls a0
                  -> IO a1
getApplication156 =
  propertyGet "Application"
              []
              outVariant

getCreator156 :: IWalls a0
              -> IO XlCreator
getCreator156 =
  propertyGet "Creator"
              []
              outEnum

getParent171 :: IWalls a0
             -> IO (IDispatch ())
getParent171 =
  propertyGet "Parent"
              []
              outIDispatch

getName56 :: IWalls a0
          -> IO String
getName56 =
  propertyGet "Name"
              []
              outString

select71 :: (Variant a1)
         => IWalls a0
         -> IO a1
select71 =
  function1 "Select"
            []
            outVariant

getBorder42 :: IWalls a0
            -> IO (Border ())
getBorder42 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats5 :: (Variant a1)
              => IWalls a0
              -> IO a1
clearFormats5 =
  function1 "ClearFormats"
            []
            outVariant

getInterior35 :: IWalls a0
              -> IO (Interior ())
getInterior35 =
  propertyGet "Interior"
              []
              outIUnknown

getFill9 :: IWalls a0
         -> IO (ChartFillFormat ())
getFill9 =
  propertyGet "Fill"
              []
              outIUnknown

getPictureType3 :: (Variant a1)
                => IWalls a0
                -> IO a1
getPictureType3 =
  propertyGet "PictureType"
              []
              outVariant

setPictureType3 :: a1
                -> IWalls a0
                -> IO ()
setPictureType3 rHS =
  propertySet "PictureType"
              [inVariant rHS]

paste7 :: IWalls a0
       -> IO ()
paste7 =
  method0 "Paste"
          []

getPictureUnit3 :: (Variant a1)
                => IWalls a0
                -> IO a1
getPictureUnit3 =
  propertyGet "PictureUnit"
              []
              outVariant

setPictureUnit3 :: a1
                -> IWalls a0
                -> IO ()
setPictureUnit3 rHS =
  propertySet "PictureUnit"
              [inVariant rHS]

getThickness0 :: IWalls a0
              -> IO Int32
getThickness0 =
  propertyGet "Thickness"
              []
              outInt32

setThickness0 :: Int32
              -> IWalls a0
              -> IO ()
setThickness0 rHS =
  propertySet "Thickness"
              [inInt32 rHS]

getFormat17 :: IWalls a0
            -> IO (ChartFormat ())
getFormat17 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ITickLabels
-- 
-- --------------------------------------------------
data ITickLabels_ a = ITickLabels__ 
type ITickLabels a = IDispatch (ITickLabels_ a)
iidITickLabels :: IID (ITickLabels ())
iidITickLabels = mkIID "{000208C9-0001-0000-C000-000000000046}"

getApplication157 :: (Variant a1)
                  => ITickLabels a0
                  -> IO a1
getApplication157 =
  propertyGet "Application"
              []
              outVariant

getCreator157 :: ITickLabels a0
              -> IO XlCreator
getCreator157 =
  propertyGet "Creator"
              []
              outEnum

getParent172 :: ITickLabels a0
             -> IO (IDispatch ())
getParent172 =
  propertyGet "Parent"
              []
              outIDispatch

delete94 :: (Variant a1)
         => ITickLabels a0
         -> IO a1
delete94 =
  function1 "Delete"
            []
            outVariant

getFont23 :: ITickLabels a0
          -> IO (Font ())
getFont23 =
  propertyGet "Font"
              []
              outIUnknown

getName57 :: ITickLabels a0
          -> IO String
getName57 =
  propertyGet "Name"
              []
              outString

getNumberFormat5 :: ITickLabels a0
                 -> IO String
getNumberFormat5 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat5 :: String
                 -> ITickLabels a0
                 -> IO ()
setNumberFormat5 rHS =
  propertySet "NumberFormat"
              [inString rHS]

getNumberFormatLinked1 :: ITickLabels a0
                       -> IO Bool
getNumberFormatLinked1 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked1 :: Bool
                       -> ITickLabels a0
                       -> IO ()
setNumberFormatLinked1 rHS =
  propertySet "NumberFormatLinked"
              [inBool rHS]

getNumberFormatLocal3 :: (Variant a1)
                      => ITickLabels a0
                      -> IO a1
getNumberFormatLocal3 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal3 :: a1
                      -> ITickLabels a0
                      -> IO ()
setNumberFormatLocal3 rHS =
  propertySet "NumberFormatLocal"
              [inVariant rHS]

getOrientation23 :: ITickLabels a0
                 -> IO XlTickLabelOrientation
getOrientation23 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation23 :: XlTickLabelOrientation
                 -> ITickLabels a0
                 -> IO ()
setOrientation23 rHS =
  propertySet "Orientation"
              [inEnum rHS]

select72 :: (Variant a1)
         => ITickLabels a0
         -> IO a1
select72 =
  function1 "Select"
            []
            outVariant

getReadingOrder20 :: ITickLabels a0
                  -> IO Int32
getReadingOrder20 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder20 :: Int32
                  -> ITickLabels a0
                  -> IO ()
setReadingOrder20 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoScaleFont16 :: (Variant a1)
                   => ITickLabels a0
                   -> IO a1
getAutoScaleFont16 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont16 :: a1
                   -> ITickLabels a0
                   -> IO ()
setAutoScaleFont16 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getDepth0 :: ITickLabels a0
          -> IO Int32
getDepth0 =
  propertyGet "Depth"
              []
              outInt32

getOffset0 :: ITickLabels a0
           -> IO Int32
getOffset0 =
  propertyGet "Offset"
              []
              outInt32

setOffset :: Int32
          -> ITickLabels a0
          -> IO ()
setOffset rHS =
  propertySet "Offset"
              [inInt32 rHS]

getAlignment0 :: ITickLabels a0
              -> IO Int32
getAlignment0 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment0 :: Int32
              -> ITickLabels a0
              -> IO ()
setAlignment0 rHS =
  propertySet "Alignment"
              [inInt32 rHS]

getMultiLevel :: ITickLabels a0
              -> IO Bool
getMultiLevel =
  propertyGet "MultiLevel"
              []
              outBool

setMultiLevel :: Bool
              -> ITickLabels a0
              -> IO ()
setMultiLevel rHS =
  propertySet "MultiLevel"
              [inBool rHS]

getFormat18 :: ITickLabels a0
            -> IO (ChartFormat ())
getFormat18 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPlotArea
-- 
-- --------------------------------------------------
data IPlotArea_ a = IPlotArea__ 
type IPlotArea a = IDispatch (IPlotArea_ a)
iidIPlotArea :: IID (IPlotArea ())
iidIPlotArea = mkIID "{000208CB-0001-0000-C000-000000000046}"

getApplication158 :: (Variant a1)
                  => IPlotArea a0
                  -> IO a1
getApplication158 =
  propertyGet "Application"
              []
              outVariant

getCreator158 :: IPlotArea a0
              -> IO XlCreator
getCreator158 =
  propertyGet "Creator"
              []
              outEnum

getParent173 :: IPlotArea a0
             -> IO (IDispatch ())
getParent173 =
  propertyGet "Parent"
              []
              outIDispatch

getName58 :: IPlotArea a0
          -> IO String
getName58 =
  propertyGet "Name"
              []
              outString

select73 :: (Variant a1)
         => IPlotArea a0
         -> IO a1
select73 =
  function1 "Select"
            []
            outVariant

getBorder43 :: IPlotArea a0
            -> IO (Border ())
getBorder43 =
  propertyGet "Border"
              []
              outIUnknown

clearFormats6 :: (Variant a1)
              => IPlotArea a0
              -> IO a1
clearFormats6 =
  function1 "ClearFormats"
            []
            outVariant

getHeight48 :: IPlotArea a0
            -> IO Double
getHeight48 =
  propertyGet "Height"
              []
              outDouble

setHeight44 :: Double
            -> IPlotArea a0
            -> IO ()
setHeight44 rHS =
  propertySet "Height"
              [inDouble rHS]

getInterior36 :: IPlotArea a0
              -> IO (Interior ())
getInterior36 =
  propertyGet "Interior"
              []
              outIUnknown

getFill10 :: IPlotArea a0
          -> IO (ChartFillFormat ())
getFill10 =
  propertyGet "Fill"
              []
              outIUnknown

getLeft51 :: IPlotArea a0
          -> IO Double
getLeft51 =
  propertyGet "Left"
              []
              outDouble

setLeft47 :: Double
          -> IPlotArea a0
          -> IO ()
setLeft47 rHS =
  propertySet "Left"
              [inDouble rHS]

getTop51 :: IPlotArea a0
         -> IO Double
getTop51 =
  propertyGet "Top"
              []
              outDouble

setTop47 :: Double
         -> IPlotArea a0
         -> IO ()
setTop47 rHS =
  propertySet "Top"
              [inDouble rHS]

getWidth49 :: IPlotArea a0
           -> IO Double
getWidth49 =
  propertyGet "Width"
              []
              outDouble

setWidth45 :: Double
           -> IPlotArea a0
           -> IO ()
setWidth45 rHS =
  propertySet "Width"
              [inDouble rHS]

getInsideLeft :: IPlotArea a0
              -> IO Double
getInsideLeft =
  propertyGet "_InsideLeft"
              []
              outDouble

getInsideTop :: IPlotArea a0
             -> IO Double
getInsideTop =
  propertyGet "_InsideTop"
              []
              outDouble

getInsideWidth :: IPlotArea a0
               -> IO Double
getInsideWidth =
  propertyGet "_InsideWidth"
              []
              outDouble

getInsideHeight :: IPlotArea a0
                -> IO Double
getInsideHeight =
  propertyGet "_InsideHeight"
              []
              outDouble

getInsideLeft0 :: IPlotArea a0
               -> IO Double
getInsideLeft0 =
  propertyGet "InsideLeft"
              []
              outDouble

setInsideLeft :: Double
              -> IPlotArea a0
              -> IO ()
setInsideLeft rHS =
  propertySet "InsideLeft"
              [inDouble rHS]

getInsideTop0 :: IPlotArea a0
              -> IO Double
getInsideTop0 =
  propertyGet "InsideTop"
              []
              outDouble

setInsideTop :: Double
             -> IPlotArea a0
             -> IO ()
setInsideTop rHS =
  propertySet "InsideTop"
              [inDouble rHS]

getInsideWidth0 :: IPlotArea a0
                -> IO Double
getInsideWidth0 =
  propertyGet "InsideWidth"
              []
              outDouble

setInsideWidth :: Double
               -> IPlotArea a0
               -> IO ()
setInsideWidth rHS =
  propertySet "InsideWidth"
              [inDouble rHS]

getInsideHeight0 :: IPlotArea a0
                 -> IO Double
getInsideHeight0 =
  propertyGet "InsideHeight"
              []
              outDouble

setInsideHeight :: Double
                -> IPlotArea a0
                -> IO ()
setInsideHeight rHS =
  propertySet "InsideHeight"
              [inDouble rHS]

getPosition6 :: IPlotArea a0
             -> IO XlChartElementPosition
getPosition6 =
  propertyGet "Position"
              []
              outEnum

setPosition7 :: XlChartElementPosition
             -> IPlotArea a0
             -> IO ()
setPosition7 rHS =
  propertySet "Position"
              [inEnum rHS]

getFormat19 :: IPlotArea a0
            -> IO (ChartFormat ())
getFormat19 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IChartArea
-- 
-- --------------------------------------------------
data IChartArea_ a = IChartArea__ 
type IChartArea a = IDispatch (IChartArea_ a)
iidIChartArea :: IID (IChartArea ())
iidIChartArea = mkIID "{000208CC-0001-0000-C000-000000000046}"

getApplication159 :: (Variant a1)
                  => IChartArea a0
                  -> IO a1
getApplication159 =
  propertyGet "Application"
              []
              outVariant

getCreator159 :: IChartArea a0
              -> IO XlCreator
getCreator159 =
  propertyGet "Creator"
              []
              outEnum

getParent174 :: IChartArea a0
             -> IO (IDispatch ())
getParent174 =
  propertyGet "Parent"
              []
              outIDispatch

getName59 :: IChartArea a0
          -> IO String
getName59 =
  propertyGet "Name"
              []
              outString

select74 :: (Variant a1)
         => IChartArea a0
         -> IO a1
select74 =
  function1 "Select"
            []
            outVariant

getBorder44 :: IChartArea a0
            -> IO (Border ())
getBorder44 =
  propertyGet "Border"
              []
              outIUnknown

clear0 :: (Variant a1)
       => IChartArea a0
       -> IO a1
clear0 =
  function1 "Clear"
            []
            outVariant

clearContents0 :: (Variant a1)
               => IChartArea a0
               -> IO a1
clearContents0 =
  function1 "ClearContents"
            []
            outVariant

copy55 :: (Variant a1)
       => IChartArea a0
       -> IO a1
copy55 =
  function1 "Copy"
            []
            outVariant

getFont24 :: IChartArea a0
          -> IO (Font ())
getFont24 =
  propertyGet "Font"
              []
              outIUnknown

getShadow24 :: IChartArea a0
            -> IO Bool
getShadow24 =
  propertyGet "Shadow"
              []
              outBool

setShadow24 :: Bool
            -> IChartArea a0
            -> IO ()
setShadow24 rHS =
  propertySet "Shadow"
              [inBool rHS]

clearFormats7 :: (Variant a1)
              => IChartArea a0
              -> IO a1
clearFormats7 =
  function1 "ClearFormats"
            []
            outVariant

getHeight49 :: IChartArea a0
            -> IO Double
getHeight49 =
  propertyGet "Height"
              []
              outDouble

setHeight45 :: Double
            -> IChartArea a0
            -> IO ()
setHeight45 rHS =
  propertySet "Height"
              [inDouble rHS]

getInterior37 :: IChartArea a0
              -> IO (Interior ())
getInterior37 =
  propertyGet "Interior"
              []
              outIUnknown

getFill11 :: IChartArea a0
          -> IO (ChartFillFormat ())
getFill11 =
  propertyGet "Fill"
              []
              outIUnknown

getLeft52 :: IChartArea a0
          -> IO Double
getLeft52 =
  propertyGet "Left"
              []
              outDouble

setLeft48 :: Double
          -> IChartArea a0
          -> IO ()
setLeft48 rHS =
  propertySet "Left"
              [inDouble rHS]

getTop52 :: IChartArea a0
         -> IO Double
getTop52 =
  propertyGet "Top"
              []
              outDouble

setTop48 :: Double
         -> IChartArea a0
         -> IO ()
setTop48 rHS =
  propertySet "Top"
              [inDouble rHS]

getWidth50 :: IChartArea a0
           -> IO Double
getWidth50 =
  propertyGet "Width"
              []
              outDouble

setWidth46 :: Double
           -> IChartArea a0
           -> IO ()
setWidth46 rHS =
  propertySet "Width"
              [inDouble rHS]

getAutoScaleFont17 :: (Variant a1)
                   => IChartArea a0
                   -> IO a1
getAutoScaleFont17 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont17 :: a1
                   -> IChartArea a0
                   -> IO ()
setAutoScaleFont17 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getFormat20 :: IChartArea a0
            -> IO (ChartFormat ())
getFormat20 =
  propertyGet "Format"
              []
              outIUnknown

getRoundedCorners8 :: IChartArea a0
                   -> IO Bool
getRoundedCorners8 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners8 :: Bool
                   -> IChartArea a0
                   -> IO ()
setRoundedCorners8 rHS =
  propertySet "RoundedCorners"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface ILegend
-- 
-- --------------------------------------------------
data ILegend_ a = ILegend__ 
type ILegend a = IDispatch (ILegend_ a)
iidILegend :: IID (ILegend ())
iidILegend = mkIID "{000208CD-0001-0000-C000-000000000046}"

getApplication160 :: (Variant a1)
                  => ILegend a0
                  -> IO a1
getApplication160 =
  propertyGet "Application"
              []
              outVariant

getCreator160 :: ILegend a0
              -> IO XlCreator
getCreator160 =
  propertyGet "Creator"
              []
              outEnum

getParent175 :: ILegend a0
             -> IO (IDispatch ())
getParent175 =
  propertyGet "Parent"
              []
              outIDispatch

getName60 :: ILegend a0
          -> IO String
getName60 =
  propertyGet "Name"
              []
              outString

select75 :: (Variant a1)
         => ILegend a0
         -> IO a1
select75 =
  function1 "Select"
            []
            outVariant

getBorder45 :: ILegend a0
            -> IO (Border ())
getBorder45 =
  propertyGet "Border"
              []
              outIUnknown

delete95 :: (Variant a1)
         => ILegend a0
         -> IO a1
delete95 =
  function1 "Delete"
            []
            outVariant

getFont25 :: ILegend a0
          -> IO (Font ())
getFont25 =
  propertyGet "Font"
              []
              outIUnknown

legendEntries :: (Variant a1)
              => a1
              -> ILegend a0
              -> IO (IDispatch ())
legendEntries index0 =
  function1 "LegendEntries"
            [inVariant index0]
            outIDispatch

getPosition7 :: ILegend a0
             -> IO XlLegendPosition
getPosition7 =
  propertyGet "Position"
              []
              outEnum

setPosition8 :: XlLegendPosition
             -> ILegend a0
             -> IO ()
setPosition8 rHS =
  propertySet "Position"
              [inEnum rHS]

getShadow25 :: ILegend a0
            -> IO Bool
getShadow25 =
  propertyGet "Shadow"
              []
              outBool

setShadow25 :: Bool
            -> ILegend a0
            -> IO ()
setShadow25 rHS =
  propertySet "Shadow"
              [inBool rHS]

clear1 :: (Variant a1)
       => ILegend a0
       -> IO a1
clear1 =
  function1 "Clear"
            []
            outVariant

getHeight50 :: ILegend a0
            -> IO Double
getHeight50 =
  propertyGet "Height"
              []
              outDouble

setHeight46 :: Double
            -> ILegend a0
            -> IO ()
setHeight46 rHS =
  propertySet "Height"
              [inDouble rHS]

getInterior38 :: ILegend a0
              -> IO (Interior ())
getInterior38 =
  propertyGet "Interior"
              []
              outIUnknown

getFill12 :: ILegend a0
          -> IO (ChartFillFormat ())
getFill12 =
  propertyGet "Fill"
              []
              outIUnknown

getLeft53 :: ILegend a0
          -> IO Double
getLeft53 =
  propertyGet "Left"
              []
              outDouble

setLeft49 :: Double
          -> ILegend a0
          -> IO ()
setLeft49 rHS =
  propertySet "Left"
              [inDouble rHS]

getTop53 :: ILegend a0
         -> IO Double
getTop53 =
  propertyGet "Top"
              []
              outDouble

setTop49 :: Double
         -> ILegend a0
         -> IO ()
setTop49 rHS =
  propertySet "Top"
              [inDouble rHS]

getWidth51 :: ILegend a0
           -> IO Double
getWidth51 =
  propertyGet "Width"
              []
              outDouble

setWidth47 :: Double
           -> ILegend a0
           -> IO ()
setWidth47 rHS =
  propertySet "Width"
              [inDouble rHS]

getAutoScaleFont18 :: (Variant a1)
                   => ILegend a0
                   -> IO a1
getAutoScaleFont18 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont18 :: a1
                   -> ILegend a0
                   -> IO ()
setAutoScaleFont18 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getIncludeInLayout1 :: ILegend a0
                    -> IO Bool
getIncludeInLayout1 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout1 :: Bool
                    -> ILegend a0
                    -> IO ()
setIncludeInLayout1 rHS =
  propertySet "IncludeInLayout"
              [inBool rHS]

getFormat21 :: ILegend a0
            -> IO (ChartFormat ())
getFormat21 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IErrorBars
-- 
-- --------------------------------------------------
data IErrorBars_ a = IErrorBars__ 
type IErrorBars a = IDispatch (IErrorBars_ a)
iidIErrorBars :: IID (IErrorBars ())
iidIErrorBars = mkIID "{000208CE-0001-0000-C000-000000000046}"

getApplication161 :: (Variant a1)
                  => IErrorBars a0
                  -> IO a1
getApplication161 =
  propertyGet "Application"
              []
              outVariant

getCreator161 :: IErrorBars a0
              -> IO XlCreator
getCreator161 =
  propertyGet "Creator"
              []
              outEnum

getParent176 :: IErrorBars a0
             -> IO (IDispatch ())
getParent176 =
  propertyGet "Parent"
              []
              outIDispatch

getName61 :: IErrorBars a0
          -> IO String
getName61 =
  propertyGet "Name"
              []
              outString

select76 :: (Variant a1)
         => IErrorBars a0
         -> IO a1
select76 =
  function1 "Select"
            []
            outVariant

getBorder46 :: IErrorBars a0
            -> IO (Border ())
getBorder46 =
  propertyGet "Border"
              []
              outIUnknown

delete96 :: (Variant a1)
         => IErrorBars a0
         -> IO a1
delete96 =
  function1 "Delete"
            []
            outVariant

clearFormats8 :: (Variant a1)
              => IErrorBars a0
              -> IO a1
clearFormats8 =
  function1 "ClearFormats"
            []
            outVariant

getEndStyle :: IErrorBars a0
            -> IO XlEndStyleCap
getEndStyle =
  propertyGet "EndStyle"
              []
              outEnum

setEndStyle :: XlEndStyleCap
            -> IErrorBars a0
            -> IO ()
setEndStyle rHS =
  propertySet "EndStyle"
              [inEnum rHS]

getFormat22 :: IErrorBars a0
            -> IO (ChartFormat ())
getFormat22 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDataTable
-- 
-- --------------------------------------------------
data IDataTable_ a = IDataTable__ 
type IDataTable a = IDispatch (IDataTable_ a)
iidIDataTable :: IID (IDataTable ())
iidIDataTable = mkIID "{00020843-0001-0000-C000-000000000046}"

getApplication162 :: (Variant a1)
                  => IDataTable a0
                  -> IO a1
getApplication162 =
  propertyGet "Application"
              []
              outVariant

getCreator162 :: IDataTable a0
              -> IO XlCreator
getCreator162 =
  propertyGet "Creator"
              []
              outEnum

getParent177 :: IDataTable a0
             -> IO (IDispatch ())
getParent177 =
  propertyGet "Parent"
              []
              outIDispatch

getShowLegendKey1 :: IDataTable a0
                  -> IO Bool
getShowLegendKey1 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey1 :: Bool
                  -> IDataTable a0
                  -> IO ()
setShowLegendKey1 rHS =
  propertySet "ShowLegendKey"
              [inBool rHS]

getHasBorderHorizontal :: IDataTable a0
                       -> IO Bool
getHasBorderHorizontal =
  propertyGet "HasBorderHorizontal"
              []
              outBool

setHasBorderHorizontal :: Bool
                       -> IDataTable a0
                       -> IO ()
setHasBorderHorizontal rHS =
  propertySet "HasBorderHorizontal"
              [inBool rHS]

getHasBorderVertical :: IDataTable a0
                     -> IO Bool
getHasBorderVertical =
  propertyGet "HasBorderVertical"
              []
              outBool

setHasBorderVertical :: Bool
                     -> IDataTable a0
                     -> IO ()
setHasBorderVertical rHS =
  propertySet "HasBorderVertical"
              [inBool rHS]

getHasBorderOutline :: IDataTable a0
                    -> IO Bool
getHasBorderOutline =
  propertyGet "HasBorderOutline"
              []
              outBool

setHasBorderOutline :: Bool
                    -> IDataTable a0
                    -> IO ()
setHasBorderOutline rHS =
  propertySet "HasBorderOutline"
              [inBool rHS]

getBorder47 :: IDataTable a0
            -> IO (Border ())
getBorder47 =
  propertyGet "Border"
              []
              outIUnknown

getFont26 :: IDataTable a0
          -> IO (Font ())
getFont26 =
  propertyGet "Font"
              []
              outIUnknown

select77 :: IDataTable a0
         -> IO ()
select77 =
  method0 "Select"
          []

delete97 :: IDataTable a0
         -> IO ()
delete97 =
  method0 "Delete"
          []

getAutoScaleFont19 :: (Variant a1)
                   => IDataTable a0
                   -> IO a1
getAutoScaleFont19 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont19 :: a1
                   -> IDataTable a0
                   -> IO ()
setAutoScaleFont19 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

getFormat23 :: IDataTable a0
            -> IO (ChartFormat ())
getFormat23 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPhonetic
-- 
-- --------------------------------------------------
data IPhonetic_ a = IPhonetic__ 
type IPhonetic a = IDispatch (IPhonetic_ a)
iidIPhonetic :: IID (IPhonetic ())
iidIPhonetic = mkIID "{00024438-0001-0000-C000-000000000046}"

getApplication163 :: (Variant a1)
                  => IPhonetic a0
                  -> IO a1
getApplication163 =
  propertyGet "Application"
              []
              outVariant

getCreator163 :: IPhonetic a0
              -> IO XlCreator
getCreator163 =
  propertyGet "Creator"
              []
              outEnum

getParent178 :: IPhonetic a0
             -> IO (IDispatch ())
getParent178 =
  propertyGet "Parent"
              []
              outIDispatch

getVisible60 :: IPhonetic a0
             -> IO Bool
getVisible60 =
  propertyGet "Visible"
              []
              outBool

setVisible60 :: Bool
             -> IPhonetic a0
             -> IO ()
setVisible60 rHS =
  propertySet "Visible"
              [inBool rHS]

getCharacterType :: IPhonetic a0
                 -> IO Int32
getCharacterType =
  propertyGet "CharacterType"
              []
              outInt32

setCharacterType :: Int32
                 -> IPhonetic a0
                 -> IO ()
setCharacterType rHS =
  propertySet "CharacterType"
              [inInt32 rHS]

getAlignment1 :: IPhonetic a0
              -> IO Int32
getAlignment1 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment1 :: Int32
              -> IPhonetic a0
              -> IO ()
setAlignment1 rHS =
  propertySet "Alignment"
              [inInt32 rHS]

getFont27 :: IPhonetic a0
          -> IO (Font ())
getFont27 =
  propertyGet "Font"
              []
              outIUnknown

getText32 :: IPhonetic a0
          -> IO String
getText32 =
  propertyGet "Text"
              []
              outString

setText31 :: String
          -> IPhonetic a0
          -> IO ()
setText31 rHS =
  propertySet "Text"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IShape
-- 
-- --------------------------------------------------
data IShape_ a = IShape__ 
type IShape a = IDispatch (IShape_ a)
iidIShape :: IID (IShape ())
iidIShape = mkIID "{00024439-0001-0000-C000-000000000046}"

getApplication164 :: (Variant a1)
                  => IShape a0
                  -> IO a1
getApplication164 =
  propertyGet "Application"
              []
              outVariant

getCreator164 :: IShape a0
              -> IO XlCreator
getCreator164 =
  propertyGet "Creator"
              []
              outEnum

getParent179 :: IShape a0
             -> IO (IDispatch ())
getParent179 =
  propertyGet "Parent"
              []
              outIDispatch

apply :: IShape a0
      -> IO ()
apply =
  method0 "Apply"
          []

delete98 :: IShape a0
         -> IO ()
delete98 =
  method0 "Delete"
          []

duplicate40 :: IShape a0
            -> IO (Shape ())
duplicate40 =
  function1 "Duplicate"
            []
            outIUnknown

flip :: (Variant a1)
     => a1
     -> IShape a0
     -> IO ()
flip flipCmd =
  method0 "Flip"
          [inVariant flipCmd]

incrementLeft :: Float
              -> IShape a0
              -> IO ()
incrementLeft increment =
  method0 "IncrementLeft"
          [inFloat increment]

incrementRotation :: Float
                  -> IShape a0
                  -> IO ()
incrementRotation increment =
  method0 "IncrementRotation"
          [inFloat increment]

incrementTop :: Float
             -> IShape a0
             -> IO ()
incrementTop increment =
  method0 "IncrementTop"
          [inFloat increment]

pickUp :: IShape a0
       -> IO ()
pickUp =
  method0 "PickUp"
          []

rerouteConnections :: IShape a0
                   -> IO ()
rerouteConnections =
  method0 "RerouteConnections"
          []

scaleHeight :: (Variant a1, Variant a2)
            => Float
            -> a1
            -> a2
            -> IShape a0
            -> IO ()
scaleHeight factor relativeToOriginalSize scale =
  method0 "ScaleHeight"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

scaleWidth :: (Variant a1, Variant a2)
           => Float
           -> a1
           -> a2
           -> IShape a0
           -> IO ()
scaleWidth factor relativeToOriginalSize scale =
  method0 "ScaleWidth"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

select78 :: (Variant a1)
         => a1
         -> IShape a0
         -> IO ()
select78 replace1 =
  method0 "Select"
          [inVariant replace1]

setShapesDefaultProperties :: IShape a0
                           -> IO ()
setShapesDefaultProperties =
  method0 "SetShapesDefaultProperties"
          []

ungroup3 :: IShape a0
         -> IO (ShapeRange ())
ungroup3 =
  function1 "Ungroup"
            []
            outIUnknown

zOrder :: (Variant a1)
       => a1
       -> IShape a0
       -> IO ()
zOrder zOrderCmd =
  method0 "ZOrder"
          [inVariant zOrderCmd]

getAdjustments :: IShape a0
               -> IO (Adjustments ())
getAdjustments =
  propertyGet "Adjustments"
              []
              outIUnknown

getTextFrame :: IShape a0
             -> IO (TextFrame ())
getTextFrame =
  propertyGet "TextFrame"
              []
              outIUnknown

getAutoShapeType :: (Variant a1)
                 => IShape a0
                 -> IO a1
getAutoShapeType =
  propertyGet "AutoShapeType"
              []
              outVariant

setAutoShapeType :: (Variant a1)
                 => a1
                 -> IShape a0
                 -> IO ()
setAutoShapeType rHS =
  propertySet "AutoShapeType"
              [inVariant rHS]

getCallout :: IShape a0
           -> IO (CalloutFormat ())
getCallout =
  propertyGet "Callout"
              []
              outIUnknown

getConnectionSiteCount :: IShape a0
                       -> IO Int32
getConnectionSiteCount =
  propertyGet "ConnectionSiteCount"
              []
              outInt32

getConnector :: (Variant a1)
             => IShape a0
             -> IO a1
getConnector =
  propertyGet "Connector"
              []
              outVariant

getConnectorFormat :: IShape a0
                   -> IO (ConnectorFormat ())
getConnectorFormat =
  propertyGet "ConnectorFormat"
              []
              outIUnknown

getFill13 :: IShape a0
          -> IO (FillFormat ())
getFill13 =
  propertyGet "Fill"
              []
              outIUnknown

getGroupItems :: IShape a0
              -> IO (GroupShapes ())
getGroupItems =
  propertyGet "GroupItems"
              []
              outIUnknown

getHeight51 :: IShape a0
            -> IO Float
getHeight51 =
  propertyGet "Height"
              []
              outFloat

setHeight47 :: Float
            -> IShape a0
            -> IO ()
setHeight47 rHS =
  propertySet "Height"
              [inFloat rHS]

getHorizontalFlip :: (Variant a1)
                  => IShape a0
                  -> IO a1
getHorizontalFlip =
  propertyGet "HorizontalFlip"
              []
              outVariant

getLeft54 :: IShape a0
          -> IO Float
getLeft54 =
  propertyGet "Left"
              []
              outFloat

setLeft50 :: Float
          -> IShape a0
          -> IO ()
setLeft50 rHS =
  propertySet "Left"
              [inFloat rHS]

getLine :: IShape a0
        -> IO (LineFormat ())
getLine =
  propertyGet "Line"
              []
              outIUnknown

getLockAspectRatio :: (Variant a1)
                   => IShape a0
                   -> IO a1
getLockAspectRatio =
  propertyGet "LockAspectRatio"
              []
              outVariant

setLockAspectRatio :: (Variant a1)
                   => a1
                   -> IShape a0
                   -> IO ()
setLockAspectRatio rHS =
  propertySet "LockAspectRatio"
              [inVariant rHS]

getName62 :: IShape a0
          -> IO String
getName62 =
  propertyGet "Name"
              []
              outString

setName36 :: String
          -> IShape a0
          -> IO ()
setName36 rHS =
  propertySet "Name"
              [inString rHS]

getNodes :: IShape a0
         -> IO (ShapeNodes ())
getNodes =
  propertyGet "Nodes"
              []
              outIUnknown

getRotation0 :: IShape a0
             -> IO Float
getRotation0 =
  propertyGet "Rotation"
              []
              outFloat

setRotation0 :: Float
             -> IShape a0
             -> IO ()
setRotation0 rHS =
  propertySet "Rotation"
              [inFloat rHS]

getPictureFormat :: IShape a0
                 -> IO (PictureFormat ())
getPictureFormat =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow26 :: IShape a0
            -> IO (ShadowFormat ())
getShadow26 =
  propertyGet "Shadow"
              []
              outIUnknown

getTextEffect :: IShape a0
              -> IO (TextEffectFormat ())
getTextEffect =
  propertyGet "TextEffect"
              []
              outIUnknown

getThreeD0 :: IShape a0
           -> IO (ThreeDFormat ())
getThreeD0 =
  propertyGet "ThreeD"
              []
              outIUnknown

getTop54 :: IShape a0
         -> IO Float
getTop54 =
  propertyGet "Top"
              []
              outFloat

setTop50 :: Float
         -> IShape a0
         -> IO ()
setTop50 rHS =
  propertySet "Top"
              [inFloat rHS]

getType20 :: (Variant a1)
          => IShape a0
          -> IO a1
getType20 =
  propertyGet "Type"
              []
              outVariant

getVerticalFlip :: (Variant a1)
                => IShape a0
                -> IO a1
getVerticalFlip =
  propertyGet "VerticalFlip"
              []
              outVariant

getVertices0 :: (Variant a1)
             => IShape a0
             -> IO a1
getVertices0 =
  propertyGet "Vertices"
              []
              outVariant

getVisible61 :: (Variant a1)
             => IShape a0
             -> IO a1
getVisible61 =
  propertyGet "Visible"
              []
              outVariant

setVisible61 :: (Variant a1)
             => a1
             -> IShape a0
             -> IO ()
setVisible61 rHS =
  propertySet "Visible"
              [inVariant rHS]

getWidth52 :: IShape a0
           -> IO Float
getWidth52 =
  propertyGet "Width"
              []
              outFloat

setWidth48 :: Float
           -> IShape a0
           -> IO ()
setWidth48 rHS =
  propertySet "Width"
              [inFloat rHS]

getZOrderPosition :: IShape a0
                  -> IO Int32
getZOrderPosition =
  propertyGet "ZOrderPosition"
              []
              outInt32

getHyperlink :: IShape a0
             -> IO (Hyperlink ())
getHyperlink =
  propertyGet "Hyperlink"
              []
              outIUnknown

getBlackWhiteMode :: (Variant a1)
                  => IShape a0
                  -> IO a1
getBlackWhiteMode =
  propertyGet "BlackWhiteMode"
              []
              outVariant

setBlackWhiteMode :: (Variant a1)
                  => a1
                  -> IShape a0
                  -> IO ()
setBlackWhiteMode rHS =
  propertySet "BlackWhiteMode"
              [inVariant rHS]

getDrawingObject :: IShape a0
                 -> IO (IDispatch ())
getDrawingObject =
  propertyGet "DrawingObject"
              []
              outIDispatch

getOnAction43 :: IShape a0
              -> IO String
getOnAction43 =
  propertyGet "OnAction"
              []
              outString

setOnAction43 :: String
              -> IShape a0
              -> IO ()
setOnAction43 rHS =
  propertySet "OnAction"
              [inString rHS]

getLocked44 :: IShape a0
            -> IO Bool
getLocked44 =
  propertyGet "Locked"
              []
              outBool

setLocked44 :: Bool
            -> IShape a0
            -> IO ()
setLocked44 rHS =
  propertySet "Locked"
              [inBool rHS]

getTopLeftCell19 :: IShape a0
                 -> IO (Range ())
getTopLeftCell19 =
  propertyGet "TopLeftCell"
              []
              outIUnknown

getBottomRightCell19 :: IShape a0
                     -> IO (Range ())
getBottomRightCell19 =
  propertyGet "BottomRightCell"
              []
              outIUnknown

getPlacement40 :: IShape a0
               -> IO XlPlacement
getPlacement40 =
  propertyGet "Placement"
              []
              outEnum

setPlacement40 :: XlPlacement
               -> IShape a0
               -> IO ()
setPlacement40 rHS =
  propertySet "Placement"
              [inEnum rHS]

copy56 :: IShape a0
       -> IO ()
copy56 =
  method0 "Copy"
          []

cut41 :: IShape a0
      -> IO ()
cut41 =
  method0 "Cut"
          []

copyPicture43 :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> IShape a0
              -> IO ()
copyPicture43 appearance format0 =
  method0 "CopyPicture"
          [ inVariant appearance
          , inVariant format0
          ]

getControlFormat :: IShape a0
                 -> IO (ControlFormat ())
getControlFormat =
  propertyGet "ControlFormat"
              []
              outIUnknown

getLinkFormat :: IShape a0
              -> IO (LinkFormat ())
getLinkFormat =
  propertyGet "LinkFormat"
              []
              outIUnknown

getOLEFormat :: IShape a0
             -> IO (OLEFormat ())
getOLEFormat =
  propertyGet "OLEFormat"
              []
              outIUnknown

getFormControlType :: IShape a0
                   -> IO XlFormControl
getFormControlType =
  propertyGet "FormControlType"
              []
              outEnum

getAlternativeText :: IShape a0
                   -> IO String
getAlternativeText =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText :: String
                   -> IShape a0
                   -> IO ()
setAlternativeText rHS =
  propertySet "AlternativeText"
              [inString rHS]

getScript :: (Variant a1)
          => IShape a0
          -> IO a1
getScript =
  propertyGet "Script"
              []
              outVariant

getDiagramNode :: IShape a0
               -> IO (DiagramNode ())
getDiagramNode =
  propertyGet "DiagramNode"
              []
              outIUnknown

getHasDiagramNode :: (Variant a1)
                  => IShape a0
                  -> IO a1
getHasDiagramNode =
  propertyGet "HasDiagramNode"
              []
              outVariant

getDiagram0 :: IShape a0
            -> IO (Diagram ())
getDiagram0 =
  propertyGet "Diagram"
              []
              outIUnknown

getHasDiagram :: (Variant a1)
              => IShape a0
              -> IO a1
getHasDiagram =
  propertyGet "HasDiagram"
              []
              outVariant

getChild :: (Variant a1)
         => IShape a0
         -> IO a1
getChild =
  propertyGet "Child"
              []
              outVariant

getParentGroup :: IShape a0
               -> IO (Shape ())
getParentGroup =
  propertyGet "ParentGroup"
              []
              outIUnknown

getCanvasItems :: (Variant a1)
               => IShape a0
               -> IO a1
getCanvasItems =
  propertyGet "CanvasItems"
              []
              outVariant

getID1 :: IShape a0
       -> IO Int32
getID1 =
  propertyGet "ID"
              []
              outInt32

canvasCropLeft :: Float
               -> IShape a0
               -> IO ()
canvasCropLeft increment =
  method0 "CanvasCropLeft"
          [inFloat increment]

canvasCropTop :: Float
              -> IShape a0
              -> IO ()
canvasCropTop increment =
  method0 "CanvasCropTop"
          [inFloat increment]

canvasCropRight :: Float
                -> IShape a0
                -> IO ()
canvasCropRight increment =
  method0 "CanvasCropRight"
          [inFloat increment]

canvasCropBottom :: Float
                 -> IShape a0
                 -> IO ()
canvasCropBottom increment =
  method0 "CanvasCropBottom"
          [inFloat increment]

getChart0 :: (Variant a1)
          => IShape a0
          -> IO a1
getChart0 =
  propertyGet "Chart"
              []
              outVariant

getHasChart :: (Variant a1)
            => IShape a0
            -> IO a1
getHasChart =
  propertyGet "HasChart"
              []
              outVariant

getTextFrame2 :: IShape a0
              -> IO (TextFrame2 ())
getTextFrame2 =
  propertyGet "TextFrame2"
              []
              outIUnknown

getShapeStyle :: (Variant a1)
              => IShape a0
              -> IO a1
getShapeStyle =
  propertyGet "ShapeStyle"
              []
              outVariant

setShapeStyle :: (Variant a1)
              => a1
              -> IShape a0
              -> IO ()
setShapeStyle rHS =
  propertySet "ShapeStyle"
              [inVariant rHS]

getBackgroundStyle :: (Variant a1)
                   => IShape a0
                   -> IO a1
getBackgroundStyle =
  propertyGet "BackgroundStyle"
              []
              outVariant

setBackgroundStyle :: (Variant a1)
                   => a1
                   -> IShape a0
                   -> IO ()
setBackgroundStyle rHS =
  propertySet "BackgroundStyle"
              [inVariant rHS]

getSoftEdge :: (Variant a1)
            => IShape a0
            -> IO a1
getSoftEdge =
  propertyGet "SoftEdge"
              []
              outVariant

getGlow :: (Variant a1)
        => IShape a0
        -> IO a1
getGlow =
  propertyGet "Glow"
              []
              outVariant

getReflection :: (Variant a1)
              => IShape a0
              -> IO a1
getReflection =
  propertyGet "Reflection"
              []
              outVariant

-- --------------------------------------------------
-- 
-- interface IShapes
-- 
-- --------------------------------------------------
data IShapes_ a = IShapes__ 
type IShapes a = IDispatch (IShapes_ a)
iidIShapes :: IID (IShapes ())
iidIShapes = mkIID "{0002443A-0001-0000-C000-000000000046}"

getApplication165 :: (Variant a1)
                  => IShapes a0
                  -> IO a1
getApplication165 =
  propertyGet "Application"
              []
              outVariant

getCreator165 :: IShapes a0
              -> IO XlCreator
getCreator165 =
  propertyGet "Creator"
              []
              outEnum

getParent180 :: IShapes a0
             -> IO (IDispatch ())
getParent180 =
  propertyGet "Parent"
              []
              outIDispatch

getCount72 :: IShapes a0
           -> IO Int32
getCount72 =
  propertyGet "Count"
              []
              outInt32

item45 :: a1
       -> IShapes a0
       -> IO (Shape ())
item45 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

default8 :: a1
         -> IShapes a0
         -> IO (Shape ())
default8 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

getNewEnum29 :: IShapes a0
             -> IO (IUnknown ())
getNewEnum29 =
  propertyGet "_NewEnum"
              []
              outIUnknown

addCallout :: (Variant a1)
           => a1
           -> Float
           -> Float
           -> Float
           -> Float
           -> IShapes a0
           -> IO (Shape ())
addCallout type0 left top width height =
  function1 "AddCallout"
            [ inVariant type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

addConnector :: (Variant a1)
             => a1
             -> Float
             -> Float
             -> Float
             -> Float
             -> IShapes a0
             -> IO (Shape ())
addConnector type0 beginX beginY endX endY =
  function1 "AddConnector"
            [ inVariant type0
            , inFloat beginX
            , inFloat beginY
            , inFloat endX
            , inFloat endY
            ]
            outIUnknown

addCurve :: a1
         -> IShapes a0
         -> IO (Shape ())
addCurve safeArrayOfPoints =
  function1 "AddCurve"
            [inVariant safeArrayOfPoints]
            outIUnknown

addLabel :: (Variant a1)
         => a1
         -> Float
         -> Float
         -> Float
         -> Float
         -> IShapes a0
         -> IO (Shape ())
addLabel orientation left top width height =
  function1 "AddLabel"
            [ inVariant orientation
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

addLine :: Float
        -> Float
        -> Float
        -> Float
        -> IShapes a0
        -> IO (Shape ())
addLine beginX beginY endX endY =
  function1 "AddLine"
            [ inFloat beginX
            , inFloat beginY
            , inFloat endX
            , inFloat endY
            ]
            outIUnknown

addPicture :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> Float
           -> Float
           -> Float
           -> Float
           -> IShapes a0
           -> IO (Shape ())
addPicture filename linkToFile saveWithDocument left top width height =
  function1 "AddPicture"
            [ inString filename
            , inVariant linkToFile
            , inVariant saveWithDocument
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

addPolyline :: a1
            -> IShapes a0
            -> IO (Shape ())
addPolyline safeArrayOfPoints =
  function1 "AddPolyline"
            [inVariant safeArrayOfPoints]
            outIUnknown

addShape :: (Variant a1)
         => a1
         -> Float
         -> Float
         -> Float
         -> Float
         -> IShapes a0
         -> IO (Shape ())
addShape type0 left top width height =
  function1 "AddShape"
            [ inVariant type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

addTextEffect :: (Variant a1, Variant a2, Variant a3)
              => a1
              -> String
              -> String
              -> Float
              -> a2
              -> a3
              -> Float
              -> Float
              -> IShapes a0
              -> IO (Shape ())
addTextEffect presetTextEffect text1 fontName fontSize fontBold fontItalic left top =
  function1 "AddTextEffect"
            [ inVariant presetTextEffect
            , inString text1
            , inString fontName
            , inFloat fontSize
            , inVariant fontBold
            , inVariant fontItalic
            , inFloat left
            , inFloat top
            ]
            outIUnknown

addTextbox :: (Variant a1)
           => a1
           -> Float
           -> Float
           -> Float
           -> Float
           -> IShapes a0
           -> IO (Shape ())
addTextbox orientation left top width height =
  function1 "AddTextbox"
            [ inVariant orientation
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

buildFreeform :: (Variant a1)
              => a1
              -> Float
              -> Float
              -> IShapes a0
              -> IO (FreeformBuilder ())
buildFreeform editingType x1 y1 =
  function1 "BuildFreeform"
            [ inVariant editingType
            , inFloat x1
            , inFloat y1
            ]
            outIUnknown

getRange5 :: a1
          -> IShapes a0
          -> IO (ShapeRange ())
getRange5 index0 =
  propertyGet "Range"
              [inVariant index0]
              outIUnknown

selectAll1 :: IShapes a0
           -> IO ()
selectAll1 =
  method0 "SelectAll"
          []

addFormControl :: XlFormControl
               -> Int32
               -> Int32
               -> Int32
               -> Int32
               -> IShapes a0
               -> IO (Shape ())
addFormControl type0 left top width height =
  function1 "AddFormControl"
            [ inEnum type0
            , inInt32 left
            , inInt32 top
            , inInt32 width
            , inInt32 height
            ]
            outIUnknown

addOLEObject :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> IShapes a0
             -> IO (Shape ())
addOLEObject classType filename link displayAsIcon iconFileName iconIndex iconLabel left top width height =
  function1 "AddOLEObject"
            [ inVariant classType
            , inVariant filename
            , inVariant link
            , inVariant displayAsIcon
            , inVariant iconFileName
            , inVariant iconIndex
            , inVariant iconLabel
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outIUnknown

addDiagram :: (Variant a1)
           => a1
           -> Float
           -> Float
           -> Float
           -> Float
           -> IShapes a0
           -> IO (Shape ())
addDiagram type0 left top width height =
  function1 "AddDiagram"
            [ inVariant type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

addCanvas :: Float
          -> Float
          -> Float
          -> Float
          -> IShapes a0
          -> IO (Shape ())
addCanvas left top width height =
  function1 "AddCanvas"
            [ inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIUnknown

addChart :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> IShapes a0
         -> IO (Shape ())
addChart xlChartType left top width height =
  function1 "AddChart"
            [ inVariant xlChartType
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IShapeRange
-- 
-- --------------------------------------------------
data IShapeRange_ a = IShapeRange__ 
type IShapeRange a = IDispatch (IShapeRange_ a)
iidIShapeRange :: IID (IShapeRange ())
iidIShapeRange = mkIID "{0002443B-0001-0000-C000-000000000046}"

getApplication166 :: (Variant a1)
                  => IShapeRange a0
                  -> IO a1
getApplication166 =
  propertyGet "Application"
              []
              outVariant

getCreator166 :: IShapeRange a0
              -> IO XlCreator
getCreator166 =
  propertyGet "Creator"
              []
              outEnum

getParent181 :: IShapeRange a0
             -> IO (IDispatch ())
getParent181 =
  propertyGet "Parent"
              []
              outIDispatch

getCount73 :: IShapeRange a0
           -> IO Int32
getCount73 =
  propertyGet "Count"
              []
              outInt32

item46 :: a1
       -> IShapeRange a0
       -> IO (Shape ())
item46 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

default9 :: a1
         -> IShapeRange a0
         -> IO (Shape ())
default9 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

getNewEnum30 :: IShapeRange a0
             -> IO (IUnknown ())
getNewEnum30 =
  propertyGet "_NewEnum"
              []
              outIUnknown

align :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> IShapeRange a0
      -> IO ()
align alignCmd relativeTo =
  method0 "Align"
          [ inVariant alignCmd
          , inVariant relativeTo
          ]

apply0 :: IShapeRange a0
       -> IO ()
apply0 =
  method0 "Apply"
          []

delete99 :: IShapeRange a0
         -> IO ()
delete99 =
  method0 "Delete"
          []

distribute :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> IShapeRange a0
           -> IO ()
distribute distributeCmd relativeTo =
  method0 "Distribute"
          [ inVariant distributeCmd
          , inVariant relativeTo
          ]

duplicate41 :: IShapeRange a0
            -> IO (ShapeRange ())
duplicate41 =
  function1 "Duplicate"
            []
            outIUnknown

flip0 :: (Variant a1)
      => a1
      -> IShapeRange a0
      -> IO ()
flip0 flipCmd =
  method0 "Flip"
          [inVariant flipCmd]

incrementLeft0 :: Float
               -> IShapeRange a0
               -> IO ()
incrementLeft0 increment =
  method0 "IncrementLeft"
          [inFloat increment]

incrementRotation0 :: Float
                   -> IShapeRange a0
                   -> IO ()
incrementRotation0 increment =
  method0 "IncrementRotation"
          [inFloat increment]

incrementTop0 :: Float
              -> IShapeRange a0
              -> IO ()
incrementTop0 increment =
  method0 "IncrementTop"
          [inFloat increment]

group21 :: IShapeRange a0
        -> IO (Shape ())
group21 =
  function1 "Group"
            []
            outIUnknown

pickUp0 :: IShapeRange a0
        -> IO ()
pickUp0 =
  method0 "PickUp"
          []

rerouteConnections0 :: IShapeRange a0
                    -> IO ()
rerouteConnections0 =
  method0 "RerouteConnections"
          []

regroup :: IShapeRange a0
        -> IO (Shape ())
regroup =
  function1 "Regroup"
            []
            outIUnknown

scaleHeight0 :: (Variant a1, Variant a2)
             => Float
             -> a1
             -> a2
             -> IShapeRange a0
             -> IO ()
scaleHeight0 factor relativeToOriginalSize scale =
  method0 "ScaleHeight"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

scaleWidth0 :: (Variant a1, Variant a2)
            => Float
            -> a1
            -> a2
            -> IShapeRange a0
            -> IO ()
scaleWidth0 factor relativeToOriginalSize scale =
  method0 "ScaleWidth"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

select79 :: (Variant a1)
         => a1
         -> IShapeRange a0
         -> IO ()
select79 replace1 =
  method0 "Select"
          [inVariant replace1]

setShapesDefaultProperties0 :: IShapeRange a0
                            -> IO ()
setShapesDefaultProperties0 =
  method0 "SetShapesDefaultProperties"
          []

ungroup4 :: IShapeRange a0
         -> IO (ShapeRange ())
ungroup4 =
  function1 "Ungroup"
            []
            outIUnknown

zOrder0 :: (Variant a1)
        => a1
        -> IShapeRange a0
        -> IO ()
zOrder0 zOrderCmd =
  method0 "ZOrder"
          [inVariant zOrderCmd]

getAdjustments0 :: IShapeRange a0
                -> IO (Adjustments ())
getAdjustments0 =
  propertyGet "Adjustments"
              []
              outIUnknown

getTextFrame0 :: IShapeRange a0
              -> IO (TextFrame ())
getTextFrame0 =
  propertyGet "TextFrame"
              []
              outIUnknown

getAutoShapeType0 :: (Variant a1)
                  => IShapeRange a0
                  -> IO a1
getAutoShapeType0 =
  propertyGet "AutoShapeType"
              []
              outVariant

setAutoShapeType0 :: (Variant a1)
                  => a1
                  -> IShapeRange a0
                  -> IO ()
setAutoShapeType0 rHS =
  propertySet "AutoShapeType"
              [inVariant rHS]

getCallout0 :: IShapeRange a0
            -> IO (CalloutFormat ())
getCallout0 =
  propertyGet "Callout"
              []
              outIUnknown

getConnectionSiteCount0 :: IShapeRange a0
                        -> IO Int32
getConnectionSiteCount0 =
  propertyGet "ConnectionSiteCount"
              []
              outInt32

getConnector0 :: (Variant a1)
              => IShapeRange a0
              -> IO a1
getConnector0 =
  propertyGet "Connector"
              []
              outVariant

getConnectorFormat0 :: IShapeRange a0
                    -> IO (ConnectorFormat ())
getConnectorFormat0 =
  propertyGet "ConnectorFormat"
              []
              outIUnknown

getFill14 :: IShapeRange a0
          -> IO (FillFormat ())
getFill14 =
  propertyGet "Fill"
              []
              outIUnknown

getGroupItems0 :: IShapeRange a0
               -> IO (GroupShapes ())
getGroupItems0 =
  propertyGet "GroupItems"
              []
              outIUnknown

getHeight52 :: IShapeRange a0
            -> IO Float
getHeight52 =
  propertyGet "Height"
              []
              outFloat

setHeight48 :: Float
            -> IShapeRange a0
            -> IO ()
setHeight48 rHS =
  propertySet "Height"
              [inFloat rHS]

getHorizontalFlip0 :: (Variant a1)
                   => IShapeRange a0
                   -> IO a1
getHorizontalFlip0 =
  propertyGet "HorizontalFlip"
              []
              outVariant

getLeft55 :: IShapeRange a0
          -> IO Float
getLeft55 =
  propertyGet "Left"
              []
              outFloat

setLeft51 :: Float
          -> IShapeRange a0
          -> IO ()
setLeft51 rHS =
  propertySet "Left"
              [inFloat rHS]

getLine0 :: IShapeRange a0
         -> IO (LineFormat ())
getLine0 =
  propertyGet "Line"
              []
              outIUnknown

getLockAspectRatio0 :: (Variant a1)
                    => IShapeRange a0
                    -> IO a1
getLockAspectRatio0 =
  propertyGet "LockAspectRatio"
              []
              outVariant

setLockAspectRatio0 :: (Variant a1)
                    => a1
                    -> IShapeRange a0
                    -> IO ()
setLockAspectRatio0 rHS =
  propertySet "LockAspectRatio"
              [inVariant rHS]

getName63 :: IShapeRange a0
          -> IO String
getName63 =
  propertyGet "Name"
              []
              outString

setName37 :: String
          -> IShapeRange a0
          -> IO ()
setName37 rHS =
  propertySet "Name"
              [inString rHS]

getNodes0 :: IShapeRange a0
          -> IO (ShapeNodes ())
getNodes0 =
  propertyGet "Nodes"
              []
              outIUnknown

getRotation1 :: IShapeRange a0
             -> IO Float
getRotation1 =
  propertyGet "Rotation"
              []
              outFloat

setRotation1 :: Float
             -> IShapeRange a0
             -> IO ()
setRotation1 rHS =
  propertySet "Rotation"
              [inFloat rHS]

getPictureFormat0 :: IShapeRange a0
                  -> IO (PictureFormat ())
getPictureFormat0 =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow27 :: IShapeRange a0
            -> IO (ShadowFormat ())
getShadow27 =
  propertyGet "Shadow"
              []
              outIUnknown

getTextEffect0 :: IShapeRange a0
               -> IO (TextEffectFormat ())
getTextEffect0 =
  propertyGet "TextEffect"
              []
              outIUnknown

getThreeD1 :: IShapeRange a0
           -> IO (ThreeDFormat ())
getThreeD1 =
  propertyGet "ThreeD"
              []
              outIUnknown

getTop55 :: IShapeRange a0
         -> IO Float
getTop55 =
  propertyGet "Top"
              []
              outFloat

setTop51 :: Float
         -> IShapeRange a0
         -> IO ()
setTop51 rHS =
  propertySet "Top"
              [inFloat rHS]

getType21 :: (Variant a1)
          => IShapeRange a0
          -> IO a1
getType21 =
  propertyGet "Type"
              []
              outVariant

getVerticalFlip0 :: (Variant a1)
                 => IShapeRange a0
                 -> IO a1
getVerticalFlip0 =
  propertyGet "VerticalFlip"
              []
              outVariant

getVertices1 :: (Variant a1)
             => IShapeRange a0
             -> IO a1
getVertices1 =
  propertyGet "Vertices"
              []
              outVariant

getVisible62 :: (Variant a1)
             => IShapeRange a0
             -> IO a1
getVisible62 =
  propertyGet "Visible"
              []
              outVariant

setVisible62 :: (Variant a1)
             => a1
             -> IShapeRange a0
             -> IO ()
setVisible62 rHS =
  propertySet "Visible"
              [inVariant rHS]

getWidth53 :: IShapeRange a0
           -> IO Float
getWidth53 =
  propertyGet "Width"
              []
              outFloat

setWidth49 :: Float
           -> IShapeRange a0
           -> IO ()
setWidth49 rHS =
  propertySet "Width"
              [inFloat rHS]

getZOrderPosition0 :: IShapeRange a0
                   -> IO Int32
getZOrderPosition0 =
  propertyGet "ZOrderPosition"
              []
              outInt32

getBlackWhiteMode0 :: (Variant a1)
                   => IShapeRange a0
                   -> IO a1
getBlackWhiteMode0 =
  propertyGet "BlackWhiteMode"
              []
              outVariant

setBlackWhiteMode0 :: (Variant a1)
                   => a1
                   -> IShapeRange a0
                   -> IO ()
setBlackWhiteMode0 rHS =
  propertySet "BlackWhiteMode"
              [inVariant rHS]

getAlternativeText0 :: IShapeRange a0
                    -> IO String
getAlternativeText0 =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText0 :: String
                    -> IShapeRange a0
                    -> IO ()
setAlternativeText0 rHS =
  propertySet "AlternativeText"
              [inString rHS]

getDiagramNode0 :: IShapeRange a0
                -> IO (DiagramNode ())
getDiagramNode0 =
  propertyGet "DiagramNode"
              []
              outIUnknown

getHasDiagramNode0 :: (Variant a1)
                   => IShapeRange a0
                   -> IO a1
getHasDiagramNode0 =
  propertyGet "HasDiagramNode"
              []
              outVariant

getDiagram1 :: IShapeRange a0
            -> IO (Diagram ())
getDiagram1 =
  propertyGet "Diagram"
              []
              outIUnknown

getHasDiagram0 :: (Variant a1)
               => IShapeRange a0
               -> IO a1
getHasDiagram0 =
  propertyGet "HasDiagram"
              []
              outVariant

getChild0 :: (Variant a1)
          => IShapeRange a0
          -> IO a1
getChild0 =
  propertyGet "Child"
              []
              outVariant

getParentGroup0 :: IShapeRange a0
                -> IO (Shape ())
getParentGroup0 =
  propertyGet "ParentGroup"
              []
              outIUnknown

getCanvasItems0 :: (Variant a1)
                => IShapeRange a0
                -> IO a1
getCanvasItems0 =
  propertyGet "CanvasItems"
              []
              outVariant

getID2 :: IShapeRange a0
       -> IO Int32
getID2 =
  propertyGet "ID"
              []
              outInt32

canvasCropLeft0 :: Float
                -> IShapeRange a0
                -> IO ()
canvasCropLeft0 increment =
  method0 "CanvasCropLeft"
          [inFloat increment]

canvasCropTop0 :: Float
               -> IShapeRange a0
               -> IO ()
canvasCropTop0 increment =
  method0 "CanvasCropTop"
          [inFloat increment]

canvasCropRight0 :: Float
                 -> IShapeRange a0
                 -> IO ()
canvasCropRight0 increment =
  method0 "CanvasCropRight"
          [inFloat increment]

canvasCropBottom0 :: Float
                  -> IShapeRange a0
                  -> IO ()
canvasCropBottom0 increment =
  method0 "CanvasCropBottom"
          [inFloat increment]

getChart1 :: (Variant a1)
          => IShapeRange a0
          -> IO a1
getChart1 =
  propertyGet "Chart"
              []
              outVariant

getHasChart0 :: (Variant a1)
             => IShapeRange a0
             -> IO a1
getHasChart0 =
  propertyGet "HasChart"
              []
              outVariant

getTextFrame20 :: IShapeRange a0
               -> IO (TextFrame2 ())
getTextFrame20 =
  propertyGet "TextFrame2"
              []
              outIUnknown

getShapeStyle0 :: (Variant a1)
               => IShapeRange a0
               -> IO a1
getShapeStyle0 =
  propertyGet "ShapeStyle"
              []
              outVariant

setShapeStyle0 :: (Variant a1)
               => a1
               -> IShapeRange a0
               -> IO ()
setShapeStyle0 rHS =
  propertySet "ShapeStyle"
              [inVariant rHS]

getBackgroundStyle0 :: (Variant a1)
                    => IShapeRange a0
                    -> IO a1
getBackgroundStyle0 =
  propertyGet "BackgroundStyle"
              []
              outVariant

setBackgroundStyle0 :: (Variant a1)
                    => a1
                    -> IShapeRange a0
                    -> IO ()
setBackgroundStyle0 rHS =
  propertySet "BackgroundStyle"
              [inVariant rHS]

getSoftEdge0 :: (Variant a1)
             => IShapeRange a0
             -> IO a1
getSoftEdge0 =
  propertyGet "SoftEdge"
              []
              outVariant

getGlow0 :: (Variant a1)
         => IShapeRange a0
         -> IO a1
getGlow0 =
  propertyGet "Glow"
              []
              outVariant

getReflection0 :: (Variant a1)
               => IShapeRange a0
               -> IO a1
getReflection0 =
  propertyGet "Reflection"
              []
              outVariant

-- --------------------------------------------------
-- 
-- interface IGroupShapes
-- 
-- --------------------------------------------------
data IGroupShapes_ a = IGroupShapes__ 
type IGroupShapes a = IDispatch (IGroupShapes_ a)
iidIGroupShapes :: IID (IGroupShapes ())
iidIGroupShapes = mkIID "{0002443C-0001-0000-C000-000000000046}"

getApplication167 :: (Variant a1)
                  => IGroupShapes a0
                  -> IO a1
getApplication167 =
  propertyGet "Application"
              []
              outVariant

getCreator167 :: IGroupShapes a0
              -> IO XlCreator
getCreator167 =
  propertyGet "Creator"
              []
              outEnum

getParent182 :: IGroupShapes a0
             -> IO (IDispatch ())
getParent182 =
  propertyGet "Parent"
              []
              outIDispatch

getCount74 :: IGroupShapes a0
           -> IO Int32
getCount74 =
  propertyGet "Count"
              []
              outInt32

item47 :: a1
       -> IGroupShapes a0
       -> IO (Shape ())
item47 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

default10 :: a1
          -> IGroupShapes a0
          -> IO (Shape ())
default10 index0 =
  function1 "_Default"
            [inVariant index0]
            outIUnknown

getNewEnum31 :: IGroupShapes a0
             -> IO (IUnknown ())
getNewEnum31 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getRange6 :: a1
          -> IGroupShapes a0
          -> IO (ShapeRange ())
getRange6 index0 =
  propertyGet "Range"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ITextFrame
-- 
-- --------------------------------------------------
data ITextFrame_ a = ITextFrame__ 
type ITextFrame a = IDispatch (ITextFrame_ a)
iidITextFrame :: IID (ITextFrame ())
iidITextFrame = mkIID "{0002443D-0001-0000-C000-000000000046}"

getApplication168 :: (Variant a1)
                  => ITextFrame a0
                  -> IO a1
getApplication168 =
  propertyGet "Application"
              []
              outVariant

getCreator168 :: ITextFrame a0
              -> IO XlCreator
getCreator168 =
  propertyGet "Creator"
              []
              outEnum

getParent183 :: ITextFrame a0
             -> IO (IDispatch ())
getParent183 =
  propertyGet "Parent"
              []
              outIDispatch

getMarginBottom0 :: ITextFrame a0
                 -> IO Float
getMarginBottom0 =
  propertyGet "MarginBottom"
              []
              outFloat

setMarginBottom0 :: Float
                 -> ITextFrame a0
                 -> IO ()
setMarginBottom0 rHS =
  propertySet "MarginBottom"
              [inFloat rHS]

getMarginLeft0 :: ITextFrame a0
               -> IO Float
getMarginLeft0 =
  propertyGet "MarginLeft"
              []
              outFloat

setMarginLeft0 :: Float
               -> ITextFrame a0
               -> IO ()
setMarginLeft0 rHS =
  propertySet "MarginLeft"
              [inFloat rHS]

getMarginRight0 :: ITextFrame a0
                -> IO Float
getMarginRight0 =
  propertyGet "MarginRight"
              []
              outFloat

setMarginRight0 :: Float
                -> ITextFrame a0
                -> IO ()
setMarginRight0 rHS =
  propertySet "MarginRight"
              [inFloat rHS]

getMarginTop0 :: ITextFrame a0
              -> IO Float
getMarginTop0 =
  propertyGet "MarginTop"
              []
              outFloat

setMarginTop0 :: Float
              -> ITextFrame a0
              -> IO ()
setMarginTop0 rHS =
  propertySet "MarginTop"
              [inFloat rHS]

getOrientation24 :: (Variant a1)
                 => ITextFrame a0
                 -> IO a1
getOrientation24 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation24 :: (Variant a1)
                 => a1
                 -> ITextFrame a0
                 -> IO ()
setOrientation24 rHS =
  propertySet "Orientation"
              [inVariant rHS]

characters :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> ITextFrame a0
           -> IO (Characters ())
characters start length =
  function1 "Characters"
            [ inVariant start
            , inVariant length
            ]
            outIUnknown

getHorizontalAlignment20 :: ITextFrame a0
                         -> IO XlHAlign
getHorizontalAlignment20 =
  propertyGet "HorizontalAlignment"
              []
              outEnum

setHorizontalAlignment20 :: XlHAlign
                         -> ITextFrame a0
                         -> IO ()
setHorizontalAlignment20 rHS =
  propertySet "HorizontalAlignment"
              [inEnum rHS]

getVerticalAlignment20 :: ITextFrame a0
                       -> IO XlVAlign
getVerticalAlignment20 =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment20 :: XlVAlign
                       -> ITextFrame a0
                       -> IO ()
setVerticalAlignment20 rHS =
  propertySet "VerticalAlignment"
              [inEnum rHS]

getAutoSize15 :: ITextFrame a0
              -> IO Bool
getAutoSize15 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize15 :: Bool
              -> ITextFrame a0
              -> IO ()
setAutoSize15 rHS =
  propertySet "AutoSize"
              [inBool rHS]

getReadingOrder21 :: ITextFrame a0
                  -> IO Int32
getReadingOrder21 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder21 :: Int32
                  -> ITextFrame a0
                  -> IO ()
setReadingOrder21 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoMargins :: ITextFrame a0
               -> IO Bool
getAutoMargins =
  propertyGet "AutoMargins"
              []
              outBool

setAutoMargins :: Bool
               -> ITextFrame a0
               -> IO ()
setAutoMargins rHS =
  propertySet "AutoMargins"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IConnectorFormat
-- 
-- --------------------------------------------------
data IConnectorFormat_ a = IConnectorFormat__ 
type IConnectorFormat a = IDispatch (IConnectorFormat_ a)
iidIConnectorFormat :: IID (IConnectorFormat ())
iidIConnectorFormat =
  mkIID "{0002443E-0001-0000-C000-000000000046}"

getApplication169 :: (Variant a1)
                  => IConnectorFormat a0
                  -> IO a1
getApplication169 =
  propertyGet "Application"
              []
              outVariant

getCreator169 :: IConnectorFormat a0
              -> IO XlCreator
getCreator169 =
  propertyGet "Creator"
              []
              outEnum

getParent184 :: IConnectorFormat a0
             -> IO (IDispatch ())
getParent184 =
  propertyGet "Parent"
              []
              outIDispatch

beginConnect :: Shape a1
             -> Int32
             -> IConnectorFormat a0
             -> IO ()
beginConnect connectedShape connectionSite =
  method0 "BeginConnect"
          [ inIUnknown connectedShape
          , inInt32 connectionSite
          ]

beginDisconnect :: IConnectorFormat a0
                -> IO ()
beginDisconnect =
  method0 "BeginDisconnect"
          []

endConnect :: Shape a1
           -> Int32
           -> IConnectorFormat a0
           -> IO ()
endConnect connectedShape connectionSite =
  method0 "EndConnect"
          [ inIUnknown connectedShape
          , inInt32 connectionSite
          ]

endDisconnect :: IConnectorFormat a0
              -> IO ()
endDisconnect =
  method0 "EndDisconnect"
          []

getBeginConnected :: (Variant a1)
                  => IConnectorFormat a0
                  -> IO a1
getBeginConnected =
  propertyGet "BeginConnected"
              []
              outVariant

getBeginConnectedShape :: IConnectorFormat a0
                       -> IO (Shape ())
getBeginConnectedShape =
  propertyGet "BeginConnectedShape"
              []
              outIUnknown

getBeginConnectionSite :: IConnectorFormat a0
                       -> IO Int32
getBeginConnectionSite =
  propertyGet "BeginConnectionSite"
              []
              outInt32

getEndConnected :: (Variant a1)
                => IConnectorFormat a0
                -> IO a1
getEndConnected =
  propertyGet "EndConnected"
              []
              outVariant

getEndConnectedShape :: IConnectorFormat a0
                     -> IO (Shape ())
getEndConnectedShape =
  propertyGet "EndConnectedShape"
              []
              outIUnknown

getEndConnectionSite :: IConnectorFormat a0
                     -> IO Int32
getEndConnectionSite =
  propertyGet "EndConnectionSite"
              []
              outInt32

getType22 :: (Variant a1)
          => IConnectorFormat a0
          -> IO a1
getType22 =
  propertyGet "Type"
              []
              outVariant

setType10 :: (Variant a1)
          => a1
          -> IConnectorFormat a0
          -> IO ()
setType10 rHS =
  propertySet "Type"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IFreeformBuilder
-- 
-- --------------------------------------------------
data IFreeformBuilder_ a = IFreeformBuilder__ 
type IFreeformBuilder a = IDispatch (IFreeformBuilder_ a)
iidIFreeformBuilder :: IID (IFreeformBuilder ())
iidIFreeformBuilder =
  mkIID "{0002443F-0001-0000-C000-000000000046}"

getApplication170 :: (Variant a1)
                  => IFreeformBuilder a0
                  -> IO a1
getApplication170 =
  propertyGet "Application"
              []
              outVariant

getCreator170 :: IFreeformBuilder a0
              -> IO XlCreator
getCreator170 =
  propertyGet "Creator"
              []
              outEnum

getParent185 :: IFreeformBuilder a0
             -> IO (IDispatch ())
getParent185 =
  propertyGet "Parent"
              []
              outIDispatch

addNodes :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
         => a1
         -> a2
         -> Float
         -> Float
         -> a3
         -> a4
         -> a5
         -> a6
         -> IFreeformBuilder a0
         -> IO ()
addNodes segmentType editingType x1 y1 x2 y2 x3 y3 =
  method0 "AddNodes"
          [ inVariant segmentType
          , inVariant editingType
          , inFloat x1
          , inFloat y1
          , inVariant x2
          , inVariant y2
          , inVariant x3
          , inVariant y3
          ]

convertToShape :: IFreeformBuilder a0
               -> IO (Shape ())
convertToShape =
  function1 "ConvertToShape"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IControlFormat
-- 
-- --------------------------------------------------
data IControlFormat_ a = IControlFormat__ 
type IControlFormat a = IDispatch (IControlFormat_ a)
iidIControlFormat :: IID (IControlFormat ())
iidIControlFormat = mkIID "{00024440-0001-0000-C000-000000000046}"

getApplication171 :: (Variant a1)
                  => IControlFormat a0
                  -> IO a1
getApplication171 =
  propertyGet "Application"
              []
              outVariant

getCreator171 :: IControlFormat a0
              -> IO XlCreator
getCreator171 =
  propertyGet "Creator"
              []
              outEnum

getParent186 :: IControlFormat a0
             -> IO (IDispatch ())
getParent186 =
  propertyGet "Parent"
              []
              outIDispatch

addItem4 :: (Variant a1)
         => String
         -> a1
         -> IControlFormat a0
         -> IO ()
addItem4 text1 index0 =
  method0 "AddItem"
          [ inString text1
          , inVariant index0
          ]

removeAllItems4 :: IControlFormat a0
                -> IO ()
removeAllItems4 =
  method0 "RemoveAllItems"
          []

removeItem4 :: (Variant a1)
            => Int32
            -> a1
            -> IControlFormat a0
            -> IO ()
removeItem4 index0 count0 =
  method0 "RemoveItem"
          [ inInt32 index0
          , inVariant count0
          ]

getDropDownLines2 :: IControlFormat a0
                  -> IO Int32
getDropDownLines2 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines2 :: Int32
                  -> IControlFormat a0
                  -> IO ()
setDropDownLines2 rHS =
  propertySet "DropDownLines"
              [inInt32 rHS]

getEnabled43 :: IControlFormat a0
             -> IO Bool
getEnabled43 =
  propertyGet "Enabled"
              []
              outBool

setEnabled43 :: Bool
             -> IControlFormat a0
             -> IO ()
setEnabled43 rHS =
  propertySet "Enabled"
              [inBool rHS]

getLargeChange2 :: IControlFormat a0
                -> IO Int32
getLargeChange2 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange2 :: Int32
                -> IControlFormat a0
                -> IO ()
setLargeChange2 rHS =
  propertySet "LargeChange"
              [inInt32 rHS]

getLinkedCell13 :: IControlFormat a0
                -> IO String
getLinkedCell13 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell13 :: String
                -> IControlFormat a0
                -> IO ()
setLinkedCell13 rHS =
  propertySet "LinkedCell"
              [inString rHS]

list0 :: (Variant a1, Variant a2)
      => a2
      -> IControlFormat a0
      -> IO a1
list0 index0 =
  function1 "List"
            [inVariant index0]
            outVariant

getListCount1 :: IControlFormat a0
              -> IO Int32
getListCount1 =
  propertyGet "ListCount"
              []
              outInt32

setListCount :: Int32
             -> IControlFormat a0
             -> IO ()
setListCount rHS =
  propertySet "ListCount"
              [inInt32 rHS]

getListFillRange5 :: IControlFormat a0
                  -> IO String
getListFillRange5 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange5 :: String
                  -> IControlFormat a0
                  -> IO ()
setListFillRange5 rHS =
  propertySet "ListFillRange"
              [inString rHS]

getListIndex4 :: IControlFormat a0
              -> IO Int32
getListIndex4 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex4 :: Int32
              -> IControlFormat a0
              -> IO ()
setListIndex4 rHS =
  propertySet "ListIndex"
              [inInt32 rHS]

getLockedText23 :: IControlFormat a0
                -> IO Bool
getLockedText23 =
  propertyGet "LockedText"
              []
              outBool

setLockedText23 :: Bool
                -> IControlFormat a0
                -> IO ()
setLockedText23 rHS =
  propertySet "LockedText"
              [inBool rHS]

getMax4 :: IControlFormat a0
        -> IO Int32
getMax4 =
  propertyGet "Max"
              []
              outInt32

setMax4 :: Int32
        -> IControlFormat a0
        -> IO ()
setMax4 rHS =
  propertySet "Max"
              [inInt32 rHS]

getMin4 :: IControlFormat a0
        -> IO Int32
getMin4 =
  propertyGet "Min"
              []
              outInt32

setMin4 :: Int32
        -> IControlFormat a0
        -> IO ()
setMin4 rHS =
  propertySet "Min"
              [inInt32 rHS]

getMultiSelect2 :: IControlFormat a0
                -> IO Int32
getMultiSelect2 =
  propertyGet "MultiSelect"
              []
              outInt32

setMultiSelect2 :: Int32
                -> IControlFormat a0
                -> IO ()
setMultiSelect2 rHS =
  propertySet "MultiSelect"
              [inInt32 rHS]

getPrintObject40 :: IControlFormat a0
                 -> IO Bool
getPrintObject40 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject40 :: Bool
                 -> IControlFormat a0
                 -> IO ()
setPrintObject40 rHS =
  propertySet "PrintObject"
              [inBool rHS]

getSmallChange4 :: IControlFormat a0
                -> IO Int32
getSmallChange4 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange4 :: Int32
                -> IControlFormat a0
                -> IO ()
setSmallChange4 rHS =
  propertySet "SmallChange"
              [inInt32 rHS]

getDefault56 :: IControlFormat a0
             -> IO Int32
getDefault56 =
  propertyGet "_Default"
              []
              outInt32

setDefault19 :: Int32
             -> IControlFormat a0
             -> IO ()
setDefault19 rHS =
  propertySet "_Default"
              [inInt32 rHS]

getValue24 :: IControlFormat a0
           -> IO Int32
getValue24 =
  propertyGet "Value"
              []
              outInt32

setValue20 :: Int32
           -> IControlFormat a0
           -> IO ()
setValue20 rHS =
  propertySet "Value"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IOLEFormat
-- 
-- --------------------------------------------------
data IOLEFormat_ a = IOLEFormat__ 
type IOLEFormat a = IDispatch (IOLEFormat_ a)
iidIOLEFormat :: IID (IOLEFormat ())
iidIOLEFormat = mkIID "{00024441-0001-0000-C000-000000000046}"

getApplication172 :: (Variant a1)
                  => IOLEFormat a0
                  -> IO a1
getApplication172 =
  propertyGet "Application"
              []
              outVariant

getCreator172 :: IOLEFormat a0
              -> IO XlCreator
getCreator172 =
  propertyGet "Creator"
              []
              outEnum

getParent187 :: IOLEFormat a0
             -> IO (IDispatch ())
getParent187 =
  propertyGet "Parent"
              []
              outIDispatch

activate13 :: IOLEFormat a0
           -> IO ()
activate13 =
  method0 "Activate"
          []

getObject0 :: IOLEFormat a0
           -> IO (IDispatch ())
getObject0 =
  propertyGet "Object"
              []
              outIDispatch

getProgID1 :: IOLEFormat a0
           -> IO String
getProgID1 =
  propertyGet "progID"
              []
              outString

verb0 :: (Variant a1)
      => a1
      -> IOLEFormat a0
      -> IO ()
verb0 verb1 =
  method0 "Verb"
          [inVariant verb1]

-- --------------------------------------------------
-- 
-- interface ILinkFormat
-- 
-- --------------------------------------------------
data ILinkFormat_ a = ILinkFormat__ 
type ILinkFormat a = IDispatch (ILinkFormat_ a)
iidILinkFormat :: IID (ILinkFormat ())
iidILinkFormat = mkIID "{00024442-0001-0000-C000-000000000046}"

getApplication173 :: (Variant a1)
                  => ILinkFormat a0
                  -> IO a1
getApplication173 =
  propertyGet "Application"
              []
              outVariant

getCreator173 :: ILinkFormat a0
              -> IO XlCreator
getCreator173 =
  propertyGet "Creator"
              []
              outEnum

getParent188 :: ILinkFormat a0
             -> IO (IDispatch ())
getParent188 =
  propertyGet "Parent"
              []
              outIDispatch

getAutoUpdate0 :: ILinkFormat a0
               -> IO Bool
getAutoUpdate0 =
  propertyGet "AutoUpdate"
              []
              outBool

setAutoUpdate0 :: Bool
               -> ILinkFormat a0
               -> IO ()
setAutoUpdate0 rHS =
  propertySet "AutoUpdate"
              [inBool rHS]

getLocked45 :: ILinkFormat a0
            -> IO Bool
getLocked45 =
  propertyGet "Locked"
              []
              outBool

setLocked45 :: Bool
            -> ILinkFormat a0
            -> IO ()
setLocked45 rHS =
  propertySet "Locked"
              [inBool rHS]

update1 :: ILinkFormat a0
        -> IO ()
update1 =
  method0 "Update"
          []

-- --------------------------------------------------
-- 
-- interface IPublishObjects
-- 
-- --------------------------------------------------
data IPublishObjects_ a = IPublishObjects__ 
type IPublishObjects a = IDispatch (IPublishObjects_ a)
iidIPublishObjects :: IID (IPublishObjects ())
iidIPublishObjects = mkIID "{00024443-0001-0000-C000-000000000046}"

getApplication174 :: (Variant a1)
                  => IPublishObjects a0
                  -> IO a1
getApplication174 =
  propertyGet "Application"
              []
              outVariant

getCreator174 :: IPublishObjects a0
              -> IO XlCreator
getCreator174 =
  propertyGet "Creator"
              []
              outEnum

getParent189 :: IPublishObjects a0
             -> IO (IDispatch ())
getParent189 =
  propertyGet "Parent"
              []
              outIDispatch

add53 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
      => XlSourceType
      -> String
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> IPublishObjects a0
      -> IO (PublishObject ())
add53 sourceType filename sheet source htmlType divID title =
  function1 "Add"
            [ inEnum sourceType
            , inString filename
            , inVariant sheet
            , inVariant source
            , inVariant htmlType
            , inVariant divID
            , inVariant title
            ]
            outIUnknown

getCount75 :: IPublishObjects a0
           -> IO Int32
getCount75 =
  propertyGet "Count"
              []
              outInt32

getItem24 :: a1
          -> IPublishObjects a0
          -> IO (PublishObject ())
getItem24 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getDefault57 :: a1
             -> IPublishObjects a0
             -> IO (PublishObject ())
getDefault57 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum32 :: IPublishObjects a0
             -> IO (IUnknown ())
getNewEnum32 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete100 :: IPublishObjects a0
          -> IO ()
delete100 =
  method0 "Delete"
          []

publish :: IPublishObjects a0
        -> IO ()
publish =
  method0 "Publish"
          []

-- --------------------------------------------------
-- 
-- interface PublishObject
-- 
-- --------------------------------------------------
data PublishObject_ a = PublishObject__ 
type PublishObject a = IDispatch (PublishObject_ a)
iidPublishObject :: IID (PublishObject ())
iidPublishObject = mkIID "{00024444-0000-0000-C000-000000000046}"

getApplication175 :: PublishObject a0
                  -> IO (Maybe Application)
getApplication175 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator175 :: PublishObject a0
              -> IO XlCreator
getCreator175 =
  propertyGet "Creator"
              []
              outEnum

getParent190 :: PublishObject a0
             -> IO (IDispatch ())
getParent190 =
  propertyGet "Parent"
              []
              outIDispatch

delete101 :: PublishObject a0
          -> IO ()
delete101 =
  method0 "Delete"
          []

publish0 :: (Variant a1)
         => a1
         -> PublishObject a0
         -> IO ()
publish0 create0 =
  method0 "Publish"
          [inVariant create0]

getDivID :: PublishObject a0
         -> IO String
getDivID =
  propertyGet "DivID"
              []
              outString

getSheet :: PublishObject a0
         -> IO String
getSheet =
  propertyGet "Sheet"
              []
              outString

getSourceType0 :: PublishObject a0
               -> IO XlSourceType
getSourceType0 =
  propertyGet "SourceType"
              []
              outEnum

getSource :: PublishObject a0
          -> IO String
getSource =
  propertyGet "Source"
              []
              outString

getHtmlType :: PublishObject a0
            -> IO XlHtmlType
getHtmlType =
  propertyGet "HtmlType"
              []
              outEnum

setHtmlType :: XlHtmlType
            -> PublishObject a0
            -> IO ()
setHtmlType rHS =
  propertySet "HtmlType"
              [inEnum rHS]

getTitle1 :: PublishObject a0
          -> IO String
getTitle1 =
  propertyGet "Title"
              []
              outString

setTitle0 :: String
          -> PublishObject a0
          -> IO ()
setTitle0 rHS =
  propertySet "Title"
              [inString rHS]

getFilename :: PublishObject a0
            -> IO String
getFilename =
  propertyGet "Filename"
              []
              outString

setFilename :: String
            -> PublishObject a0
            -> IO ()
setFilename rHS =
  propertySet "Filename"
              [inString rHS]

getAutoRepublish :: PublishObject a0
                 -> IO Bool
getAutoRepublish =
  propertyGet "AutoRepublish"
              []
              outBool

setAutoRepublish :: Bool
                 -> PublishObject a0
                 -> IO ()
setAutoRepublish rHS =
  propertySet "AutoRepublish"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IOLEDBError
-- 
-- --------------------------------------------------
data IOLEDBError_ a = IOLEDBError__ 
type IOLEDBError a = IDispatch (IOLEDBError_ a)
iidIOLEDBError :: IID (IOLEDBError ())
iidIOLEDBError = mkIID "{00024445-0001-0000-C000-000000000046}"

getApplication176 :: (Variant a1)
                  => IOLEDBError a0
                  -> IO a1
getApplication176 =
  propertyGet "Application"
              []
              outVariant

getCreator176 :: IOLEDBError a0
              -> IO XlCreator
getCreator176 =
  propertyGet "Creator"
              []
              outEnum

getParent191 :: IOLEDBError a0
             -> IO (IDispatch ())
getParent191 =
  propertyGet "Parent"
              []
              outIDispatch

getSqlState0 :: IOLEDBError a0
             -> IO String
getSqlState0 =
  propertyGet "SqlState"
              []
              outString

getErrorString1 :: IOLEDBError a0
                -> IO String
getErrorString1 =
  propertyGet "ErrorString"
              []
              outString

getNative :: IOLEDBError a0
          -> IO Int32
getNative =
  propertyGet "Native"
              []
              outInt32

getNumber :: IOLEDBError a0
          -> IO Int32
getNumber =
  propertyGet "Number"
              []
              outInt32

getStage :: IOLEDBError a0
         -> IO Int32
getStage =
  propertyGet "Stage"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IOLEDBErrors
-- 
-- --------------------------------------------------
data IOLEDBErrors_ a = IOLEDBErrors__ 
type IOLEDBErrors a = IDispatch (IOLEDBErrors_ a)
iidIOLEDBErrors :: IID (IOLEDBErrors ())
iidIOLEDBErrors = mkIID "{00024446-0001-0000-C000-000000000046}"

getApplication177 :: (Variant a1)
                  => IOLEDBErrors a0
                  -> IO a1
getApplication177 =
  propertyGet "Application"
              []
              outVariant

getCreator177 :: IOLEDBErrors a0
              -> IO XlCreator
getCreator177 =
  propertyGet "Creator"
              []
              outEnum

getParent192 :: IOLEDBErrors a0
             -> IO (IDispatch ())
getParent192 =
  propertyGet "Parent"
              []
              outIDispatch

getCount76 :: IOLEDBErrors a0
           -> IO Int32
getCount76 =
  propertyGet "Count"
              []
              outInt32

item48 :: Int32
       -> IOLEDBErrors a0
       -> IO (OLEDBError ())
item48 index0 =
  function1 "Item"
            [inInt32 index0]
            outIUnknown

getDefault58 :: Int32
             -> IOLEDBErrors a0
             -> IO (OLEDBError ())
getDefault58 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIUnknown

newEnum38 :: IOLEDBErrors a0
          -> IO (IUnknown ())
newEnum38 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IPhonetics
-- 
-- --------------------------------------------------
data IPhonetics_ a = IPhonetics__ 
type IPhonetics a = IDispatch (IPhonetics_ a)
iidIPhonetics :: IID (IPhonetics ())
iidIPhonetics = mkIID "{00024447-0001-0000-C000-000000000046}"

getApplication178 :: (Variant a1)
                  => IPhonetics a0
                  -> IO a1
getApplication178 =
  propertyGet "Application"
              []
              outVariant

getCreator178 :: IPhonetics a0
              -> IO XlCreator
getCreator178 =
  propertyGet "Creator"
              []
              outEnum

getParent193 :: IPhonetics a0
             -> IO (IDispatch ())
getParent193 =
  propertyGet "Parent"
              []
              outIDispatch

getCount77 :: IPhonetics a0
           -> IO Int32
getCount77 =
  propertyGet "Count"
              []
              outInt32

getStart :: IPhonetics a0
         -> IO Int32
getStart =
  propertyGet "Start"
              []
              outInt32

getLength0 :: IPhonetics a0
           -> IO Int32
getLength0 =
  propertyGet "Length"
              []
              outInt32

getVisible63 :: IPhonetics a0
             -> IO Bool
getVisible63 =
  propertyGet "Visible"
              []
              outBool

setVisible63 :: Bool
             -> IPhonetics a0
             -> IO ()
setVisible63 rHS =
  propertySet "Visible"
              [inBool rHS]

getCharacterType0 :: IPhonetics a0
                  -> IO Int32
getCharacterType0 =
  propertyGet "CharacterType"
              []
              outInt32

setCharacterType0 :: Int32
                  -> IPhonetics a0
                  -> IO ()
setCharacterType0 rHS =
  propertySet "CharacterType"
              [inInt32 rHS]

getAlignment2 :: IPhonetics a0
              -> IO Int32
getAlignment2 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment2 :: Int32
              -> IPhonetics a0
              -> IO ()
setAlignment2 rHS =
  propertySet "Alignment"
              [inInt32 rHS]

getFont28 :: IPhonetics a0
          -> IO (Font ())
getFont28 =
  propertyGet "Font"
              []
              outIUnknown

getItem25 :: Int32
          -> IPhonetics a0
          -> IO (IDispatch ())
getItem25 index0 =
  propertyGet "Item"
              [inInt32 index0]
              outIDispatch

delete102 :: IPhonetics a0
          -> IO ()
delete102 =
  method0 "Delete"
          []

add54 :: Int32
      -> Int32
      -> String
      -> IPhonetics a0
      -> IO ()
add54 start length text1 =
  method0 "Add"
          [ inInt32 start
          , inInt32 length
          , inString text1
          ]

getText33 :: IPhonetics a0
          -> IO String
getText33 =
  propertyGet "Text"
              []
              outString

setText32 :: String
          -> IPhonetics a0
          -> IO ()
setText32 rHS =
  propertySet "Text"
              [inString rHS]

getDefault59 :: Int32
             -> IPhonetics a0
             -> IO (IDispatch ())
getDefault59 index0 =
  propertyGet "_Default"
              [inInt32 index0]
              outIDispatch

getNewEnum33 :: IPhonetics a0
             -> IO (IUnknown ())
getNewEnum33 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface DefaultWebOptions
-- 
-- --------------------------------------------------
data DefaultWebOptions_ a = DefaultWebOptions__ 
type DefaultWebOptions a = IDispatch (DefaultWebOptions_ a)
iidDefaultWebOptions :: IID (DefaultWebOptions ())
iidDefaultWebOptions =
  mkIID "{00024448-0000-0000-C000-000000000046}"

getApplication179 :: DefaultWebOptions a0
                  -> IO (Maybe Application)
getApplication179 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator179 :: DefaultWebOptions a0
              -> IO XlCreator
getCreator179 =
  propertyGet "Creator"
              []
              outEnum

getParent194 :: DefaultWebOptions a0
             -> IO (IDispatch ())
getParent194 =
  propertyGet "Parent"
              []
              outIDispatch

getRelyOnCSS :: DefaultWebOptions a0
             -> IO Bool
getRelyOnCSS =
  propertyGet "RelyOnCSS"
              []
              outBool

setRelyOnCSS :: Bool
             -> DefaultWebOptions a0
             -> IO ()
setRelyOnCSS rHS =
  propertySet "RelyOnCSS"
              [inBool rHS]

getSaveHiddenData :: DefaultWebOptions a0
                  -> IO Bool
getSaveHiddenData =
  propertyGet "SaveHiddenData"
              []
              outBool

setSaveHiddenData :: Bool
                  -> DefaultWebOptions a0
                  -> IO ()
setSaveHiddenData rHS =
  propertySet "SaveHiddenData"
              [inBool rHS]

getLoadPictures :: DefaultWebOptions a0
                -> IO Bool
getLoadPictures =
  propertyGet "LoadPictures"
              []
              outBool

setLoadPictures :: Bool
                -> DefaultWebOptions a0
                -> IO ()
setLoadPictures rHS =
  propertySet "LoadPictures"
              [inBool rHS]

getOrganizeInFolder :: DefaultWebOptions a0
                    -> IO Bool
getOrganizeInFolder =
  propertyGet "OrganizeInFolder"
              []
              outBool

setOrganizeInFolder :: Bool
                    -> DefaultWebOptions a0
                    -> IO ()
setOrganizeInFolder rHS =
  propertySet "OrganizeInFolder"
              [inBool rHS]

getUpdateLinksOnSave :: DefaultWebOptions a0
                     -> IO Bool
getUpdateLinksOnSave =
  propertyGet "UpdateLinksOnSave"
              []
              outBool

setUpdateLinksOnSave :: Bool
                     -> DefaultWebOptions a0
                     -> IO ()
setUpdateLinksOnSave rHS =
  propertySet "UpdateLinksOnSave"
              [inBool rHS]

getUseLongFileNames :: DefaultWebOptions a0
                    -> IO Bool
getUseLongFileNames =
  propertyGet "UseLongFileNames"
              []
              outBool

setUseLongFileNames :: Bool
                    -> DefaultWebOptions a0
                    -> IO ()
setUseLongFileNames rHS =
  propertySet "UseLongFileNames"
              [inBool rHS]

getCheckIfOfficeIsHTMLEditor :: DefaultWebOptions a0
                             -> IO Bool
getCheckIfOfficeIsHTMLEditor =
  propertyGet "CheckIfOfficeIsHTMLEditor"
              []
              outBool

setCheckIfOfficeIsHTMLEditor :: Bool
                             -> DefaultWebOptions a0
                             -> IO ()
setCheckIfOfficeIsHTMLEditor rHS =
  propertySet "CheckIfOfficeIsHTMLEditor"
              [inBool rHS]

getDownloadComponents :: DefaultWebOptions a0
                      -> IO Bool
getDownloadComponents =
  propertyGet "DownloadComponents"
              []
              outBool

setDownloadComponents :: Bool
                      -> DefaultWebOptions a0
                      -> IO ()
setDownloadComponents rHS =
  propertySet "DownloadComponents"
              [inBool rHS]

getRelyOnVML :: DefaultWebOptions a0
             -> IO Bool
getRelyOnVML =
  propertyGet "RelyOnVML"
              []
              outBool

setRelyOnVML :: Bool
             -> DefaultWebOptions a0
             -> IO ()
setRelyOnVML rHS =
  propertySet "RelyOnVML"
              [inBool rHS]

getAllowPNG :: DefaultWebOptions a0
            -> IO Bool
getAllowPNG =
  propertyGet "AllowPNG"
              []
              outBool

setAllowPNG :: Bool
            -> DefaultWebOptions a0
            -> IO ()
setAllowPNG rHS =
  propertySet "AllowPNG"
              [inBool rHS]

getScreenSize :: DefaultWebOptions a0
              -> IO MsoScreenSize
getScreenSize iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoScreenSize)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getScreenSize methPtr iptr rHS) 30 iptr
    doThenFree free readMsoScreenSize rHS

foreign import stdcall "dynamic" prim_Excel_getScreenSize :: Ptr () -> Ptr () -> Ptr MsoScreenSize -> IO Int32
setScreenSize :: MsoScreenSize
              -> DefaultWebOptions a0
              -> IO ()
setScreenSize rHS iptr =
  do
    rHS <- marshallMsoScreenSize rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setScreenSize methPtr iptr rHS) 31 iptr

foreign import stdcall "prim_Excel_setScreenSize" prim_Excel_setScreenSize :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPixelsPerInch :: DefaultWebOptions a0
                 -> IO Int32
getPixelsPerInch =
  propertyGet "PixelsPerInch"
              []
              outInt32

setPixelsPerInch :: Int32
                 -> DefaultWebOptions a0
                 -> IO ()
setPixelsPerInch rHS =
  propertySet "PixelsPerInch"
              [inInt32 rHS]

getLocationOfComponents :: DefaultWebOptions a0
                        -> IO String
getLocationOfComponents =
  propertyGet "LocationOfComponents"
              []
              outString

setLocationOfComponents :: String
                        -> DefaultWebOptions a0
                        -> IO ()
setLocationOfComponents rHS =
  propertySet "LocationOfComponents"
              [inString rHS]

getEncoding :: DefaultWebOptions a0
            -> IO MsoEncoding
getEncoding iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getEncoding methPtr iptr rHS) 36 iptr
    doThenFree free readMsoEncoding rHS

foreign import stdcall "dynamic" prim_Excel_getEncoding :: Ptr () -> Ptr () -> Ptr MsoEncoding -> IO Int32
setEncoding :: MsoEncoding
            -> DefaultWebOptions a0
            -> IO ()
setEncoding rHS iptr =
  do
    rHS <- marshallMsoEncoding rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setEncoding methPtr iptr rHS) 37 iptr

foreign import stdcall "prim_Excel_setEncoding" prim_Excel_setEncoding :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAlwaysSaveInDefaultEncoding :: DefaultWebOptions a0
                               -> IO Bool
getAlwaysSaveInDefaultEncoding =
  propertyGet "AlwaysSaveInDefaultEncoding"
              []
              outBool

setAlwaysSaveInDefaultEncoding :: Bool
                               -> DefaultWebOptions a0
                               -> IO ()
setAlwaysSaveInDefaultEncoding rHS =
  propertySet "AlwaysSaveInDefaultEncoding"
              [inBool rHS]

getFonts :: DefaultWebOptions a0
         -> IO (Maybe WebPageFonts)
getFonts iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getFonts methPtr iptr rHS) 40 iptr
    doThenFree free (readunique readWebPageFonts) rHS

foreign import stdcall "dynamic" prim_Excel_getFonts :: Ptr () -> Ptr () -> Ptr (Ptr WebPageFonts) -> IO Int32
getFolderSuffix :: DefaultWebOptions a0
                -> IO String
getFolderSuffix =
  propertyGet "FolderSuffix"
              []
              outString

getTargetBrowser :: DefaultWebOptions a0
                 -> IO MsoTargetBrowser
getTargetBrowser iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoTargetBrowser)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getTargetBrowser methPtr iptr rHS) 42 iptr
    doThenFree free readMsoTargetBrowser rHS

foreign import stdcall "dynamic" prim_Excel_getTargetBrowser :: Ptr () -> Ptr () -> Ptr MsoTargetBrowser -> IO Int32
setTargetBrowser :: MsoTargetBrowser
                 -> DefaultWebOptions a0
                 -> IO ()
setTargetBrowser rHS iptr =
  do
    rHS <- marshallMsoTargetBrowser rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setTargetBrowser methPtr iptr rHS) 43 iptr

foreign import stdcall "prim_Excel_setTargetBrowser" prim_Excel_setTargetBrowser :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getSaveNewWebPagesAsWebArchives :: DefaultWebOptions a0
                                -> IO Bool
getSaveNewWebPagesAsWebArchives =
  propertyGet "SaveNewWebPagesAsWebArchives"
              []
              outBool

setSaveNewWebPagesAsWebArchives :: Bool
                                -> DefaultWebOptions a0
                                -> IO ()
setSaveNewWebPagesAsWebArchives rHS =
  propertySet "SaveNewWebPagesAsWebArchives"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface WebOptions
-- 
-- --------------------------------------------------
data WebOptions_ a = WebOptions__ 
type WebOptions a = IDispatch (WebOptions_ a)
iidWebOptions :: IID (WebOptions ())
iidWebOptions = mkIID "{00024449-0000-0000-C000-000000000046}"

getApplication180 :: WebOptions a0
                  -> IO (Maybe Application)
getApplication180 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator180 :: WebOptions a0
              -> IO XlCreator
getCreator180 =
  propertyGet "Creator"
              []
              outEnum

getParent195 :: WebOptions a0
             -> IO (IDispatch ())
getParent195 =
  propertyGet "Parent"
              []
              outIDispatch

getRelyOnCSS0 :: WebOptions a0
              -> IO Bool
getRelyOnCSS0 =
  propertyGet "RelyOnCSS"
              []
              outBool

setRelyOnCSS0 :: Bool
              -> WebOptions a0
              -> IO ()
setRelyOnCSS0 rHS =
  propertySet "RelyOnCSS"
              [inBool rHS]

getOrganizeInFolder0 :: WebOptions a0
                     -> IO Bool
getOrganizeInFolder0 =
  propertyGet "OrganizeInFolder"
              []
              outBool

setOrganizeInFolder0 :: Bool
                     -> WebOptions a0
                     -> IO ()
setOrganizeInFolder0 rHS =
  propertySet "OrganizeInFolder"
              [inBool rHS]

getUseLongFileNames0 :: WebOptions a0
                     -> IO Bool
getUseLongFileNames0 =
  propertyGet "UseLongFileNames"
              []
              outBool

setUseLongFileNames0 :: Bool
                     -> WebOptions a0
                     -> IO ()
setUseLongFileNames0 rHS =
  propertySet "UseLongFileNames"
              [inBool rHS]

getDownloadComponents0 :: WebOptions a0
                       -> IO Bool
getDownloadComponents0 =
  propertyGet "DownloadComponents"
              []
              outBool

setDownloadComponents0 :: Bool
                       -> WebOptions a0
                       -> IO ()
setDownloadComponents0 rHS =
  propertySet "DownloadComponents"
              [inBool rHS]

getRelyOnVML0 :: WebOptions a0
              -> IO Bool
getRelyOnVML0 =
  propertyGet "RelyOnVML"
              []
              outBool

setRelyOnVML0 :: Bool
              -> WebOptions a0
              -> IO ()
setRelyOnVML0 rHS =
  propertySet "RelyOnVML"
              [inBool rHS]

getAllowPNG0 :: WebOptions a0
             -> IO Bool
getAllowPNG0 =
  propertyGet "AllowPNG"
              []
              outBool

setAllowPNG0 :: Bool
             -> WebOptions a0
             -> IO ()
setAllowPNG0 rHS =
  propertySet "AllowPNG"
              [inBool rHS]

getScreenSize0 :: WebOptions a0
               -> IO MsoScreenSize
getScreenSize0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoScreenSize)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getScreenSize methPtr iptr rHS) 22 iptr
    doThenFree free readMsoScreenSize rHS

setScreenSize0 :: MsoScreenSize
               -> WebOptions a0
               -> IO ()
setScreenSize0 rHS iptr =
  do
    rHS <- marshallMsoScreenSize rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setScreenSize0 methPtr iptr rHS) 23 iptr

foreign import stdcall "prim_Excel_setScreenSize0" prim_Excel_setScreenSize0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPixelsPerInch0 :: WebOptions a0
                  -> IO Int32
getPixelsPerInch0 =
  propertyGet "PixelsPerInch"
              []
              outInt32

setPixelsPerInch0 :: Int32
                  -> WebOptions a0
                  -> IO ()
setPixelsPerInch0 rHS =
  propertySet "PixelsPerInch"
              [inInt32 rHS]

getLocationOfComponents0 :: WebOptions a0
                         -> IO String
getLocationOfComponents0 =
  propertyGet "LocationOfComponents"
              []
              outString

setLocationOfComponents0 :: String
                         -> WebOptions a0
                         -> IO ()
setLocationOfComponents0 rHS =
  propertySet "LocationOfComponents"
              [inString rHS]

getEncoding0 :: WebOptions a0
             -> IO MsoEncoding
getEncoding0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getEncoding methPtr iptr rHS) 28 iptr
    doThenFree free readMsoEncoding rHS

setEncoding0 :: MsoEncoding
             -> WebOptions a0
             -> IO ()
setEncoding0 rHS iptr =
  do
    rHS <- marshallMsoEncoding rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setEncoding0 methPtr iptr rHS) 29 iptr

foreign import stdcall "prim_Excel_setEncoding0" prim_Excel_setEncoding0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFolderSuffix0 :: WebOptions a0
                 -> IO String
getFolderSuffix0 =
  propertyGet "FolderSuffix"
              []
              outString

useDefaultFolderSuffix :: WebOptions a0
                       -> IO ()
useDefaultFolderSuffix =
  method0 "UseDefaultFolderSuffix"
          []

getTargetBrowser0 :: WebOptions a0
                  -> IO MsoTargetBrowser
getTargetBrowser0 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofMsoTargetBrowser)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getTargetBrowser methPtr iptr rHS) 32 iptr
    doThenFree free readMsoTargetBrowser rHS

setTargetBrowser0 :: MsoTargetBrowser
                  -> WebOptions a0
                  -> IO ()
setTargetBrowser0 rHS iptr =
  do
    rHS <- marshallMsoTargetBrowser rHS
    invokeAndCheck (\ methPtr iptr -> prim_Excel_setTargetBrowser0 methPtr iptr rHS) 33 iptr

foreign import stdcall "prim_Excel_setTargetBrowser0" prim_Excel_setTargetBrowser0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface IPivotLayout
-- 
-- --------------------------------------------------
data IPivotLayout_ a = IPivotLayout__ 
type IPivotLayout a = IDispatch (IPivotLayout_ a)
iidIPivotLayout :: IID (IPivotLayout ())
iidIPivotLayout = mkIID "{0002444A-0001-0000-C000-000000000046}"

getApplication181 :: (Variant a1)
                  => IPivotLayout a0
                  -> IO a1
getApplication181 =
  propertyGet "Application"
              []
              outVariant

getCreator181 :: IPivotLayout a0
              -> IO XlCreator
getCreator181 =
  propertyGet "Creator"
              []
              outEnum

getParent196 :: IPivotLayout a0
             -> IO (IDispatch ())
getParent196 =
  propertyGet "Parent"
              []
              outIDispatch

getColumnFields0 :: (Variant a1)
                 => a1
                 -> IPivotLayout a0
                 -> IO (IDispatch ())
getColumnFields0 index0 =
  propertyGet "ColumnFields"
              [inVariant index0]
              outIDispatch

getDataFields0 :: (Variant a1)
               => a1
               -> IPivotLayout a0
               -> IO (IDispatch ())
getDataFields0 index0 =
  propertyGet "DataFields"
              [inVariant index0]
              outIDispatch

getPageFields0 :: (Variant a1)
               => a1
               -> IPivotLayout a0
               -> IO (IDispatch ())
getPageFields0 index0 =
  propertyGet "PageFields"
              [inVariant index0]
              outIDispatch

getRowFields0 :: (Variant a1)
              => a1
              -> IPivotLayout a0
              -> IO (IDispatch ())
getRowFields0 index0 =
  propertyGet "RowFields"
              [inVariant index0]
              outIDispatch

getHiddenFields0 :: (Variant a1)
                 => a1
                 -> IPivotLayout a0
                 -> IO (IDispatch ())
getHiddenFields0 index0 =
  propertyGet "HiddenFields"
              [inVariant index0]
              outIDispatch

getVisibleFields0 :: (Variant a1)
                  => a1
                  -> IPivotLayout a0
                  -> IO (IDispatch ())
getVisibleFields0 index0 =
  propertyGet "VisibleFields"
              [inVariant index0]
              outIDispatch

getPivotFields :: (Variant a1)
               => a1
               -> IPivotLayout a0
               -> IO (IDispatch ())
getPivotFields index0 =
  propertyGet "PivotFields"
              [inVariant index0]
              outIDispatch

getCubeFields0 :: IPivotLayout a0
               -> IO (CubeFields ())
getCubeFields0 =
  propertyGet "CubeFields"
              []
              outIUnknown

getPivotCache :: IPivotLayout a0
              -> IO (PivotCache ())
getPivotCache =
  propertyGet "PivotCache"
              []
              outIUnknown

getPivotTable0 :: IPivotLayout a0
               -> IO (PivotTable ())
getPivotTable0 =
  propertyGet "PivotTable"
              []
              outIUnknown

getInnerDetail0 :: IPivotLayout a0
                -> IO String
getInnerDetail0 =
  propertyGet "InnerDetail"
              []
              outString

setInnerDetail0 :: String
                -> IPivotLayout a0
                -> IO ()
setInnerDetail0 rHS =
  propertySet "InnerDetail"
              [inString rHS]

addFields0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
           => a1
           -> a2
           -> a3
           -> a4
           -> IPivotLayout a0
           -> IO ()
addFields0 rowFields columnFields pageFields appendField =
  method0 "AddFields"
          [ inVariant rowFields
          , inVariant columnFields
          , inVariant pageFields
          , inVariant appendField
          ]

-- --------------------------------------------------
-- 
-- interface TreeviewControl
-- 
-- --------------------------------------------------
data TreeviewControl_ a = TreeviewControl__ 
type TreeviewControl a = IDispatch (TreeviewControl_ a)
iidTreeviewControl :: IID (TreeviewControl ())
iidTreeviewControl = mkIID "{0002444B-0000-0000-C000-000000000046}"

getApplication182 :: TreeviewControl a0
                  -> IO (Maybe Application)
getApplication182 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator182 :: TreeviewControl a0
              -> IO XlCreator
getCreator182 =
  propertyGet "Creator"
              []
              outEnum

getParent197 :: TreeviewControl a0
             -> IO (IDispatch ())
getParent197 =
  propertyGet "Parent"
              []
              outIDispatch

getHidden2 :: (Variant a1)
           => TreeviewControl a0
           -> IO a1
getHidden2 =
  propertyGet "Hidden"
              []
              outVariant

setHidden2 :: a1
           -> TreeviewControl a0
           -> IO ()
setHidden2 rHS =
  propertySet "Hidden"
              [inVariant rHS]

getDrilled :: (Variant a1)
           => TreeviewControl a0
           -> IO a1
getDrilled =
  propertyGet "Drilled"
              []
              outVariant

setDrilled :: a1
           -> TreeviewControl a0
           -> IO ()
setDrilled rHS =
  propertySet "Drilled"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface CubeField
-- 
-- --------------------------------------------------
data CubeField_ a = CubeField__ 
type CubeField a = IDispatch (CubeField_ a)
iidCubeField :: IID (CubeField ())
iidCubeField = mkIID "{0002444C-0000-0000-C000-000000000046}"

getApplication183 :: CubeField a0
                  -> IO (Maybe Application)
getApplication183 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator183 :: CubeField a0
              -> IO XlCreator
getCreator183 =
  propertyGet "Creator"
              []
              outEnum

getParent198 :: CubeField a0
             -> IO (IDispatch ())
getParent198 =
  propertyGet "Parent"
              []
              outIDispatch

getCubeFieldType :: CubeField a0
                 -> IO XlCubeFieldType
getCubeFieldType =
  propertyGet "CubeFieldType"
              []
              outEnum

getCaption36 :: CubeField a0
             -> IO String
getCaption36 =
  propertyGet "_Caption"
              []
              outString

getName64 :: CubeField a0
          -> IO String
getName64 =
  propertyGet "Name"
              []
              outString

getValue25 :: CubeField a0
           -> IO String
getValue25 =
  propertyGet "Value"
              []
              outString

getOrientation25 :: CubeField a0
                 -> IO XlPivotFieldOrientation
getOrientation25 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation25 :: XlPivotFieldOrientation
                 -> CubeField a0
                 -> IO ()
setOrientation25 rHS =
  propertySet "Orientation"
              [inEnum rHS]

getPosition8 :: CubeField a0
             -> IO Int32
getPosition8 =
  propertyGet "Position"
              []
              outInt32

setPosition9 :: Int32
             -> CubeField a0
             -> IO ()
setPosition9 rHS =
  propertySet "Position"
              [inInt32 rHS]

getTreeviewControl :: CubeField a0
                   -> IO (TreeviewControl ())
getTreeviewControl =
  propertyGet "TreeviewControl"
              []
              outIDispatch

getDragToColumn0 :: CubeField a0
                 -> IO Bool
getDragToColumn0 =
  propertyGet "DragToColumn"
              []
              outBool

setDragToColumn0 :: Bool
                 -> CubeField a0
                 -> IO ()
setDragToColumn0 rHS =
  propertySet "DragToColumn"
              [inBool rHS]

getDragToHide0 :: CubeField a0
               -> IO Bool
getDragToHide0 =
  propertyGet "DragToHide"
              []
              outBool

setDragToHide0 :: Bool
               -> CubeField a0
               -> IO ()
setDragToHide0 rHS =
  propertySet "DragToHide"
              [inBool rHS]

getDragToPage0 :: CubeField a0
               -> IO Bool
getDragToPage0 =
  propertyGet "DragToPage"
              []
              outBool

setDragToPage0 :: Bool
               -> CubeField a0
               -> IO ()
setDragToPage0 rHS =
  propertySet "DragToPage"
              [inBool rHS]

getDragToRow0 :: CubeField a0
              -> IO Bool
getDragToRow0 =
  propertyGet "DragToRow"
              []
              outBool

setDragToRow0 :: Bool
              -> CubeField a0
              -> IO ()
setDragToRow0 rHS =
  propertySet "DragToRow"
              [inBool rHS]

getDragToData0 :: CubeField a0
               -> IO Bool
getDragToData0 =
  propertyGet "DragToData"
              []
              outBool

setDragToData0 :: Bool
               -> CubeField a0
               -> IO ()
setDragToData0 rHS =
  propertySet "DragToData"
              [inBool rHS]

getHiddenLevels :: CubeField a0
                -> IO Int32
getHiddenLevels =
  propertyGet "HiddenLevels"
              []
              outInt32

setHiddenLevels :: Int32
                -> CubeField a0
                -> IO ()
setHiddenLevels rHS =
  propertySet "HiddenLevels"
              [inInt32 rHS]

getHasMemberProperties :: CubeField a0
                       -> IO Bool
getHasMemberProperties =
  propertyGet "HasMemberProperties"
              []
              outBool

getLayoutForm0 :: CubeField a0
               -> IO XlLayoutFormType
getLayoutForm0 =
  propertyGet "LayoutForm"
              []
              outEnum

setLayoutForm0 :: XlLayoutFormType
               -> CubeField a0
               -> IO ()
setLayoutForm0 rHS =
  propertySet "LayoutForm"
              [inEnum rHS]

getPivotFields0 :: CubeField a0
                -> IO (PivotFields ())
getPivotFields0 =
  propertyGet "PivotFields"
              []
              outIUnknown

addMemberPropertyField :: (Variant a1)
                       => String
                       -> a1
                       -> CubeField a0
                       -> IO ()
addMemberPropertyField property propertyOrder =
  method0 "_AddMemberPropertyField"
          [ inString property
          , inVariant propertyOrder
          ]

getEnableMultiplePageItems0 :: CubeField a0
                            -> IO Bool
getEnableMultiplePageItems0 =
  propertyGet "EnableMultiplePageItems"
              []
              outBool

setEnableMultiplePageItems0 :: Bool
                            -> CubeField a0
                            -> IO ()
setEnableMultiplePageItems0 rHS =
  propertySet "EnableMultiplePageItems"
              [inBool rHS]

getLayoutSubtotalLocation0 :: CubeField a0
                           -> IO XlSubtototalLocationType
getLayoutSubtotalLocation0 =
  propertyGet "LayoutSubtotalLocation"
              []
              outEnum

setLayoutSubtotalLocation0 :: XlSubtototalLocationType
                           -> CubeField a0
                           -> IO ()
setLayoutSubtotalLocation0 rHS =
  propertySet "LayoutSubtotalLocation"
              [inEnum rHS]

getShowInFieldList :: CubeField a0
                   -> IO Bool
getShowInFieldList =
  propertyGet "ShowInFieldList"
              []
              outBool

setShowInFieldList :: Bool
                   -> CubeField a0
                   -> IO ()
setShowInFieldList rHS =
  propertySet "ShowInFieldList"
              [inBool rHS]

delete103 :: CubeField a0
          -> IO ()
delete103 =
  method0 "Delete"
          []

addMemberPropertyField0 :: (Variant a1, Variant a2)
                        => String
                        -> a1
                        -> a2
                        -> CubeField a0
                        -> IO ()
addMemberPropertyField0 property propertyOrder propertyDisplayedIn =
  method0 "AddMemberPropertyField"
          [ inString property
          , inVariant propertyOrder
          , inVariant propertyDisplayedIn
          ]

getIncludeNewItemsInFilter0 :: CubeField a0
                            -> IO Bool
getIncludeNewItemsInFilter0 =
  propertyGet "IncludeNewItemsInFilter"
              []
              outBool

setIncludeNewItemsInFilter0 :: Bool
                            -> CubeField a0
                            -> IO ()
setIncludeNewItemsInFilter0 rHS =
  propertySet "IncludeNewItemsInFilter"
              [inBool rHS]

getCubeFieldSubType :: CubeField a0
                    -> IO XlCubeFieldSubType
getCubeFieldSubType =
  propertyGet "CubeFieldSubType"
              []
              outEnum

getAllItemsVisible0 :: CubeField a0
                    -> IO Bool
getAllItemsVisible0 =
  propertyGet "AllItemsVisible"
              []
              outBool

clearManualFilter0 :: CubeField a0
                   -> IO ()
clearManualFilter0 =
  method0 "ClearManualFilter"
          []

createPivotFields :: CubeField a0
                  -> IO ()
createPivotFields =
  method0 "CreatePivotFields"
          []

getCurrentPageName0 :: CubeField a0
                    -> IO String
getCurrentPageName0 =
  propertyGet "CurrentPageName"
              []
              outString

setCurrentPageName0 :: String
                    -> CubeField a0
                    -> IO ()
setCurrentPageName0 rHS =
  propertySet "CurrentPageName"
              [inString rHS]

getIsDate :: CubeField a0
          -> IO Bool
getIsDate =
  propertyGet "IsDate"
              []
              outBool

getCaption37 :: CubeField a0
             -> IO String
getCaption37 =
  propertyGet "Caption"
              []
              outString

setCaption36 :: String
             -> CubeField a0
             -> IO ()
setCaption36 rHS =
  propertySet "Caption"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface CubeFields
-- 
-- --------------------------------------------------
data CubeFields_ a = CubeFields__ 
type CubeFields a = IDispatch (CubeFields_ a)
iidCubeFields :: IID (CubeFields ())
iidCubeFields = mkIID "{0002444D-0000-0000-C000-000000000046}"

getApplication184 :: CubeFields a0
                  -> IO (Maybe Application)
getApplication184 iptr =
  do
    rHS <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Excel_getApplication2 methPtr iptr rHS) 7 iptr
    doThenFree free (readunique readApplication) rHS

getCreator184 :: CubeFields a0
              -> IO XlCreator
getCreator184 =
  propertyGet "Creator"
              []
              outEnum

getParent199 :: CubeFields a0
             -> IO (IDispatch ())
getParent199 =
  propertyGet "Parent"
              []
              outIDispatch

getCount78 :: CubeFields a0
           -> IO Int32
getCount78 =
  propertyGet "Count"
              []
              outInt32

getItem26 :: a1
          -> CubeFields a0
          -> IO (CubeField ())
getItem26 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

getDefault60 :: a1
             -> CubeFields a0
             -> IO (CubeField ())
getDefault60 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

getNewEnum34 :: CubeFields a0
             -> IO (IUnknown ())
getNewEnum34 =
  propertyGet "_NewEnum"
              []
              outIUnknown

addSet :: String
       -> String
       -> CubeFields a0
       -> IO (CubeField ())
addSet name caption =
  function1 "AddSet"
            [ inString name
            , inString caption
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface IDisplayUnitLabel
-- 
-- --------------------------------------------------
data IDisplayUnitLabel_ a = IDisplayUnitLabel__ 
type IDisplayUnitLabel a = IDispatch (IDisplayUnitLabel_ a)
iidIDisplayUnitLabel :: IID (IDisplayUnitLabel ())
iidIDisplayUnitLabel =
  mkIID "{0002084C-0001-0000-C000-000000000046}"

getApplication185 :: (Variant a1)
                  => IDisplayUnitLabel a0
                  -> IO a1
getApplication185 =
  propertyGet "Application"
              []
              outVariant

getCreator185 :: IDisplayUnitLabel a0
              -> IO XlCreator
getCreator185 =
  propertyGet "Creator"
              []
              outEnum

getParent200 :: IDisplayUnitLabel a0
             -> IO (IDispatch ())
getParent200 =
  propertyGet "Parent"
              []
              outIDispatch

getName65 :: IDisplayUnitLabel a0
          -> IO String
getName65 =
  propertyGet "Name"
              []
              outString

select80 :: (Variant a1)
         => IDisplayUnitLabel a0
         -> IO a1
select80 =
  function1 "Select"
            []
            outVariant

getBorder48 :: IDisplayUnitLabel a0
            -> IO (Border ())
getBorder48 =
  propertyGet "Border"
              []
              outIUnknown

delete104 :: (Variant a1)
          => IDisplayUnitLabel a0
          -> IO a1
delete104 =
  function1 "Delete"
            []
            outVariant

getInterior39 :: IDisplayUnitLabel a0
              -> IO (Interior ())
getInterior39 =
  propertyGet "Interior"
              []
              outIUnknown

getFill15 :: IDisplayUnitLabel a0
          -> IO (ChartFillFormat ())
getFill15 =
  propertyGet "Fill"
              []
              outIUnknown

getCaption38 :: IDisplayUnitLabel a0
             -> IO String
getCaption38 =
  propertyGet "Caption"
              []
              outString

setCaption37 :: String
             -> IDisplayUnitLabel a0
             -> IO ()
setCaption37 rHS =
  propertySet "Caption"
              [inString rHS]

getCharacters29 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> IDisplayUnitLabel a0
                -> IO (Characters ())
getCharacters29 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont29 :: IDisplayUnitLabel a0
          -> IO (Font ())
getFont29 =
  propertyGet "Font"
              []
              outIUnknown

getHorizontalAlignment21 :: (Variant a1)
                         => IDisplayUnitLabel a0
                         -> IO a1
getHorizontalAlignment21 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment21 :: a1
                         -> IDisplayUnitLabel a0
                         -> IO ()
setHorizontalAlignment21 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getLeft56 :: IDisplayUnitLabel a0
          -> IO Double
getLeft56 =
  propertyGet "Left"
              []
              outDouble

setLeft52 :: Double
          -> IDisplayUnitLabel a0
          -> IO ()
setLeft52 rHS =
  propertySet "Left"
              [inDouble rHS]

getOrientation26 :: (Variant a1)
                 => IDisplayUnitLabel a0
                 -> IO a1
getOrientation26 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation26 :: a1
                 -> IDisplayUnitLabel a0
                 -> IO ()
setOrientation26 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getShadow28 :: IDisplayUnitLabel a0
            -> IO Bool
getShadow28 =
  propertyGet "Shadow"
              []
              outBool

setShadow26 :: Bool
            -> IDisplayUnitLabel a0
            -> IO ()
setShadow26 rHS =
  propertySet "Shadow"
              [inBool rHS]

getText34 :: IDisplayUnitLabel a0
          -> IO String
getText34 =
  propertyGet "Text"
              []
              outString

setText33 :: String
          -> IDisplayUnitLabel a0
          -> IO ()
setText33 rHS =
  propertySet "Text"
              [inString rHS]

getTop56 :: IDisplayUnitLabel a0
         -> IO Double
getTop56 =
  propertyGet "Top"
              []
              outDouble

setTop52 :: Double
         -> IDisplayUnitLabel a0
         -> IO ()
setTop52 rHS =
  propertySet "Top"
              [inDouble rHS]

getVerticalAlignment21 :: (Variant a1)
                       => IDisplayUnitLabel a0
                       -> IO a1
getVerticalAlignment21 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment21 :: a1
                       -> IDisplayUnitLabel a0
                       -> IO ()
setVerticalAlignment21 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getReadingOrder22 :: IDisplayUnitLabel a0
                  -> IO Int32
getReadingOrder22 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder22 :: Int32
                  -> IDisplayUnitLabel a0
                  -> IO ()
setReadingOrder22 rHS =
  propertySet "ReadingOrder"
              [inInt32 rHS]

getAutoScaleFont20 :: (Variant a1)
                   => IDisplayUnitLabel a0
                   -> IO a1
getAutoScaleFont20 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont20 :: a1
                   -> IDisplayUnitLabel a0
                   -> IO ()
setAutoScaleFont20 rHS =
  propertySet "AutoScaleFont"
              [inVariant rHS]

dummy210 :: IDisplayUnitLabel a0
         -> IO ()
dummy210 =
  method0 "_Dummy21"
          []

getPosition9 :: IDisplayUnitLabel a0
             -> IO XlChartElementPosition
getPosition9 =
  propertyGet "Position"
              []
              outEnum

setPosition10 :: XlChartElementPosition
              -> IDisplayUnitLabel a0
              -> IO ()
setPosition10 rHS =
  propertySet "Position"
              [inEnum rHS]

getFormat24 :: IDisplayUnitLabel a0
            -> IO (ChartFormat ())
getFormat24 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ICellFormat
-- 
-- --------------------------------------------------
data ICellFormat_ a = ICellFormat__ 
type ICellFormat a = IDispatch (ICellFormat_ a)
iidICellFormat :: IID (ICellFormat ())
iidICellFormat = mkIID "{00024450-0001-0000-C000-000000000046}"

getApplication186 :: (Variant a1)
                  => ICellFormat a0
                  -> IO a1
getApplication186 =
  propertyGet "Application"
              []
              outVariant

getCreator186 :: ICellFormat a0
              -> IO XlCreator
getCreator186 =
  propertyGet "Creator"
              []
              outEnum

getParent201 :: ICellFormat a0
             -> IO (IDispatch ())
getParent201 =
  propertyGet "Parent"
              []
              outIDispatch

getBorders2 :: ICellFormat a0
            -> IO (Borders ())
getBorders2 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders :: Borders a1
           -> ICellFormat a0
           -> IO ()
setBorders rHS =
  propertySet "Borders"
              [inIUnknown rHS]

getFont30 :: ICellFormat a0
          -> IO (Font ())
getFont30 =
  propertyGet "Font"
              []
              outIUnknown

setFont :: Font a1
        -> ICellFormat a0
        -> IO ()
setFont rHS =
  propertySet "Font"
              [inIUnknown rHS]

getInterior40 :: ICellFormat a0
              -> IO (Interior ())
getInterior40 =
  propertyGet "Interior"
              []
              outIUnknown

setInterior :: Interior a1
            -> ICellFormat a0
            -> IO ()
setInterior rHS =
  propertySet "Interior"
              [inIUnknown rHS]

getNumberFormat6 :: (Variant a1)
                 => Int32
                 -> ICellFormat a0
                 -> IO a1
getNumberFormat6 lcid =
  propertyGet "NumberFormat"
              [inInt32 lcid]
              outVariant

setNumberFormat6 :: Int32
                 -> a1
                 -> ICellFormat a0
                 -> IO ()
setNumberFormat6 lcid rHS =
  propertySet "NumberFormat"
              [ inInt32 lcid
              , inVariant rHS
              ]

getNumberFormatLocal4 :: (Variant a1)
                      => ICellFormat a0
                      -> IO a1
getNumberFormatLocal4 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal4 :: a1
                      -> ICellFormat a0
                      -> IO ()
setNumberFormatLocal4 rHS =
  propertySet "NumberFormatLocal"
              [inVariant rHS]

getAddIndent16 :: (Variant a1)
               => ICellFormat a0
               -> IO a1
getAddIndent16 =
  propertyGet "AddIndent"
              []
              outVariant

setAddIndent16 :: a1
               -> ICellFormat a0
               -> IO ()
setAddIndent16 rHS =
  propertySet "AddIndent"
              [inVariant rHS]

getIndentLevel1 :: (Variant a1)
                => ICellFormat a0
                -> IO a1
getIndentLevel1 =
  propertyGet "IndentLevel"
              []
              outVariant

setIndentLevel1 :: a1
                -> ICellFormat a0
                -> IO ()
setIndentLevel1 rHS =
  propertySet "IndentLevel"
              [inVariant rHS]

getHorizontalAlignment22 :: (Variant a1)
                         => ICellFormat a0
                         -> IO a1
getHorizontalAlignment22 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment22 :: a1
                         -> ICellFormat a0
                         -> IO ()
setHorizontalAlignment22 rHS =
  propertySet "HorizontalAlignment"
              [inVariant rHS]

getVerticalAlignment22 :: (Variant a1)
                       => ICellFormat a0
                       -> IO a1
getVerticalAlignment22 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment22 :: a1
                       -> ICellFormat a0
                       -> IO ()
setVerticalAlignment22 rHS =
  propertySet "VerticalAlignment"
              [inVariant rHS]

getOrientation27 :: (Variant a1)
                 => ICellFormat a0
                 -> IO a1
getOrientation27 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation27 :: a1
                 -> ICellFormat a0
                 -> IO ()
setOrientation27 rHS =
  propertySet "Orientation"
              [inVariant rHS]

getShrinkToFit1 :: (Variant a1)
                => ICellFormat a0
                -> IO a1
getShrinkToFit1 =
  propertyGet "ShrinkToFit"
              []
              outVariant

setShrinkToFit1 :: a1
                -> ICellFormat a0
                -> IO ()
setShrinkToFit1 rHS =
  propertySet "ShrinkToFit"
              [inVariant rHS]

getWrapText1 :: (Variant a1)
             => ICellFormat a0
             -> IO a1
getWrapText1 =
  propertyGet "WrapText"
              []
              outVariant

setWrapText1 :: a1
             -> ICellFormat a0
             -> IO ()
setWrapText1 rHS =
  propertySet "WrapText"
              [inVariant rHS]

getLocked46 :: (Variant a1)
            => ICellFormat a0
            -> IO a1
getLocked46 =
  propertyGet "Locked"
              []
              outVariant

setLocked46 :: a1
            -> ICellFormat a0
            -> IO ()
setLocked46 rHS =
  propertySet "Locked"
              [inVariant rHS]

getFormulaHidden1 :: (Variant a1)
                  => ICellFormat a0
                  -> IO a1
getFormulaHidden1 =
  propertyGet "FormulaHidden"
              []
              outVariant

setFormulaHidden1 :: a1
                  -> ICellFormat a0
                  -> IO ()
setFormulaHidden1 rHS =
  propertySet "FormulaHidden"
              [inVariant rHS]

getMergeCells1 :: (Variant a1)
               => ICellFormat a0
               -> IO a1
getMergeCells1 =
  propertyGet "MergeCells"
              []
              outVariant

setMergeCells1 :: a1
               -> ICellFormat a0
               -> IO ()
setMergeCells1 rHS =
  propertySet "MergeCells"
              [inVariant rHS]

clear2 :: ICellFormat a0
       -> IO ()
clear2 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- interface IUsedObjects
-- 
-- --------------------------------------------------
data IUsedObjects_ a = IUsedObjects__ 
type IUsedObjects a = IDispatch (IUsedObjects_ a)
iidIUsedObjects :: IID (IUsedObjects ())
iidIUsedObjects = mkIID "{00024451-0001-0000-C000-000000000046}"

getApplication187 :: (Variant a1)
                  => IUsedObjects a0
                  -> IO a1
getApplication187 =
  propertyGet "Application"
              []
              outVariant

getCreator187 :: IUsedObjects a0
              -> IO XlCreator
getCreator187 =
  propertyGet "Creator"
              []
              outEnum

getParent202 :: IUsedObjects a0
             -> IO (IDispatch ())
getParent202 =
  propertyGet "Parent"
              []
              outIDispatch

getCount79 :: IUsedObjects a0
           -> IO Int32
getCount79 =
  propertyGet "Count"
              []
              outInt32

getNewEnum35 :: IUsedObjects a0
             -> IO (IUnknown ())
getNewEnum35 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault61 :: a1
             -> IUsedObjects a0
             -> IO (IDispatch ())
getDefault61 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

getItem27 :: a1
          -> IUsedObjects a0
          -> IO (IDispatch ())
getItem27 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ICustomProperties
-- 
-- --------------------------------------------------
data ICustomProperties_ a = ICustomProperties__ 
type ICustomProperties a = IDispatch (ICustomProperties_ a)
iidICustomProperties :: IID (ICustomProperties ())
iidICustomProperties =
  mkIID "{00024452-0001-0000-C000-000000000046}"

getApplication188 :: (Variant a1)
                  => ICustomProperties a0
                  -> IO a1
getApplication188 =
  propertyGet "Application"
              []
              outVariant

getCreator188 :: ICustomProperties a0
              -> IO XlCreator
getCreator188 =
  propertyGet "Creator"
              []
              outEnum

getParent203 :: ICustomProperties a0
             -> IO (IDispatch ())
getParent203 =
  propertyGet "Parent"
              []
              outIDispatch

add55 :: String
      -> a1
      -> ICustomProperties a0
      -> IO (CustomProperty ())
add55 name value =
  function1 "Add"
            [ inString name
            , inVariant value
            ]
            outIUnknown

getCount80 :: ICustomProperties a0
           -> IO Int32
getCount80 =
  propertyGet "Count"
              []
              outInt32

getDefault62 :: a1
             -> ICustomProperties a0
             -> IO (CustomProperty ())
getDefault62 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem28 :: a1
          -> ICustomProperties a0
          -> IO (CustomProperty ())
getItem28 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum36 :: ICustomProperties a0
             -> IO (IUnknown ())
getNewEnum36 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ICustomProperty
-- 
-- --------------------------------------------------
data ICustomProperty_ a = ICustomProperty__ 
type ICustomProperty a = IDispatch (ICustomProperty_ a)
iidICustomProperty :: IID (ICustomProperty ())
iidICustomProperty = mkIID "{00024453-0001-0000-C000-000000000046}"

getApplication189 :: (Variant a1)
                  => ICustomProperty a0
                  -> IO a1
getApplication189 =
  propertyGet "Application"
              []
              outVariant

getCreator189 :: ICustomProperty a0
              -> IO XlCreator
getCreator189 =
  propertyGet "Creator"
              []
              outEnum

getParent204 :: ICustomProperty a0
             -> IO (IDispatch ())
getParent204 =
  propertyGet "Parent"
              []
              outIDispatch

getName66 :: ICustomProperty a0
          -> IO String
getName66 =
  propertyGet "Name"
              []
              outString

setName38 :: String
          -> ICustomProperty a0
          -> IO ()
setName38 rHS =
  propertySet "Name"
              [inString rHS]

getValue26 :: (Variant a1)
           => ICustomProperty a0
           -> IO a1
getValue26 =
  propertyGet "Value"
              []
              outVariant

setValue21 :: a1
           -> ICustomProperty a0
           -> IO ()
setValue21 rHS =
  propertySet "Value"
              [inVariant rHS]

getDefault63 :: (Variant a1)
             => ICustomProperty a0
             -> IO a1
getDefault63 =
  propertyGet "_Default"
              []
              outVariant

delete105 :: ICustomProperty a0
          -> IO ()
delete105 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface ICalculatedMembers
-- 
-- --------------------------------------------------
data ICalculatedMembers_ a = ICalculatedMembers__ 
type ICalculatedMembers a = IDispatch (ICalculatedMembers_ a)
iidICalculatedMembers :: IID (ICalculatedMembers ())
iidICalculatedMembers =
  mkIID "{00024454-0001-0000-C000-000000000046}"

getApplication190 :: (Variant a1)
                  => ICalculatedMembers a0
                  -> IO a1
getApplication190 =
  propertyGet "Application"
              []
              outVariant

getCreator190 :: ICalculatedMembers a0
              -> IO XlCreator
getCreator190 =
  propertyGet "Creator"
              []
              outEnum

getParent205 :: ICalculatedMembers a0
             -> IO (IDispatch ())
getParent205 =
  propertyGet "Parent"
              []
              outIDispatch

getCount81 :: ICalculatedMembers a0
           -> IO Int32
getCount81 =
  propertyGet "Count"
              []
              outInt32

getItem29 :: a1
          -> ICalculatedMembers a0
          -> IO (CalculatedMember ())
getItem29 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getDefault64 :: a1
             -> ICalculatedMembers a0
             -> IO (CalculatedMember ())
getDefault64 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum37 :: ICalculatedMembers a0
             -> IO (IUnknown ())
getNewEnum37 =
  propertyGet "_NewEnum"
              []
              outIUnknown

add56 :: (Variant a1, Variant a2)
      => String
      -> String
      -> a1
      -> a2
      -> ICalculatedMembers a0
      -> IO (CalculatedMember ())
add56 name formula solveOrder type0 =
  function1 "Add"
            [ inString name
            , inString formula
            , inVariant solveOrder
            , inVariant type0
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ICalculatedMember
-- 
-- --------------------------------------------------
data ICalculatedMember_ a = ICalculatedMember__ 
type ICalculatedMember a = IDispatch (ICalculatedMember_ a)
iidICalculatedMember :: IID (ICalculatedMember ())
iidICalculatedMember =
  mkIID "{00024455-0001-0000-C000-000000000046}"

getApplication191 :: (Variant a1)
                  => ICalculatedMember a0
                  -> IO a1
getApplication191 =
  propertyGet "Application"
              []
              outVariant

getCreator191 :: ICalculatedMember a0
              -> IO XlCreator
getCreator191 =
  propertyGet "Creator"
              []
              outEnum

getParent206 :: ICalculatedMember a0
             -> IO (IDispatch ())
getParent206 =
  propertyGet "Parent"
              []
              outIDispatch

getName67 :: ICalculatedMember a0
          -> IO String
getName67 =
  propertyGet "Name"
              []
              outString

getFormula22 :: ICalculatedMember a0
             -> IO String
getFormula22 =
  propertyGet "Formula"
              []
              outString

getSourceName3 :: ICalculatedMember a0
               -> IO String
getSourceName3 =
  propertyGet "SourceName"
              []
              outString

getSolveOrder :: ICalculatedMember a0
              -> IO Int32
getSolveOrder =
  propertyGet "SolveOrder"
              []
              outInt32

getIsValid :: ICalculatedMember a0
           -> IO Bool
getIsValid =
  propertyGet "IsValid"
              []
              outBool

getDefault65 :: ICalculatedMember a0
             -> IO String
getDefault65 =
  propertyGet "_Default"
              []
              outString

delete106 :: ICalculatedMember a0
          -> IO ()
delete106 =
  method0 "Delete"
          []

getType23 :: ICalculatedMember a0
          -> IO XlCalculatedMemberType
getType23 =
  propertyGet "Type"
              []
              outEnum

-- --------------------------------------------------
-- 
-- interface IWatches
-- 
-- --------------------------------------------------
data IWatches_ a = IWatches__ 
type IWatches a = IDispatch (IWatches_ a)
iidIWatches :: IID (IWatches ())
iidIWatches = mkIID "{00024456-0001-0000-C000-000000000046}"

getApplication192 :: (Variant a1)
                  => IWatches a0
                  -> IO a1
getApplication192 =
  propertyGet "Application"
              []
              outVariant

getCreator192 :: IWatches a0
              -> IO XlCreator
getCreator192 =
  propertyGet "Creator"
              []
              outEnum

getParent207 :: IWatches a0
             -> IO (IDispatch ())
getParent207 =
  propertyGet "Parent"
              []
              outIDispatch

add57 :: a1
      -> IWatches a0
      -> IO (Watch ())
add57 source =
  function1 "Add"
            [inVariant source]
            outIUnknown

getCount82 :: IWatches a0
           -> IO Int32
getCount82 =
  propertyGet "Count"
              []
              outInt32

getDefault66 :: a1
             -> IWatches a0
             -> IO (Watch ())
getDefault66 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem30 :: a1
          -> IWatches a0
          -> IO (Watch ())
getItem30 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum38 :: IWatches a0
             -> IO (IUnknown ())
getNewEnum38 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete107 :: IWatches a0
          -> IO ()
delete107 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface IWatch
-- 
-- --------------------------------------------------
data IWatch_ a = IWatch__ 
type IWatch a = IDispatch (IWatch_ a)
iidIWatch :: IID (IWatch ())
iidIWatch = mkIID "{00024457-0001-0000-C000-000000000046}"

getApplication193 :: (Variant a1)
                  => IWatch a0
                  -> IO a1
getApplication193 =
  propertyGet "Application"
              []
              outVariant

getCreator193 :: IWatch a0
              -> IO XlCreator
getCreator193 =
  propertyGet "Creator"
              []
              outEnum

getParent208 :: IWatch a0
             -> IO (IDispatch ())
getParent208 =
  propertyGet "Parent"
              []
              outIDispatch

delete108 :: IWatch a0
          -> IO ()
delete108 =
  method0 "Delete"
          []

getSource0 :: (Variant a1)
           => IWatch a0
           -> IO a1
getSource0 =
  propertyGet "Source"
              []
              outVariant

-- --------------------------------------------------
-- 
-- interface IPivotCell
-- 
-- --------------------------------------------------
data IPivotCell_ a = IPivotCell__ 
type IPivotCell a = IDispatch (IPivotCell_ a)
iidIPivotCell :: IID (IPivotCell ())
iidIPivotCell = mkIID "{00024458-0001-0000-C000-000000000046}"

getApplication194 :: (Variant a1)
                  => IPivotCell a0
                  -> IO a1
getApplication194 =
  propertyGet "Application"
              []
              outVariant

getCreator194 :: IPivotCell a0
              -> IO XlCreator
getCreator194 =
  propertyGet "Creator"
              []
              outEnum

getParent209 :: IPivotCell a0
             -> IO (IDispatch ())
getParent209 =
  propertyGet "Parent"
              []
              outIDispatch

getPivotCellType :: IPivotCell a0
                 -> IO XlPivotCellType
getPivotCellType =
  propertyGet "PivotCellType"
              []
              outEnum

getPivotTable1 :: IPivotCell a0
               -> IO (PivotTable ())
getPivotTable1 =
  propertyGet "PivotTable"
              []
              outIUnknown

getDataField :: IPivotCell a0
             -> IO (PivotField ())
getDataField =
  propertyGet "DataField"
              []
              outIUnknown

getPivotField0 :: IPivotCell a0
               -> IO (PivotField ())
getPivotField0 =
  propertyGet "PivotField"
              []
              outIUnknown

getPivotItem0 :: IPivotCell a0
              -> IO (PivotItem ())
getPivotItem0 =
  propertyGet "PivotItem"
              []
              outIUnknown

getRowItems :: IPivotCell a0
            -> IO (PivotItemList ())
getRowItems =
  propertyGet "RowItems"
              []
              outIUnknown

getColumnItems :: IPivotCell a0
               -> IO (PivotItemList ())
getColumnItems =
  propertyGet "ColumnItems"
              []
              outIUnknown

getRange7 :: IPivotCell a0
          -> IO (Range ())
getRange7 =
  propertyGet "Range"
              []
              outIUnknown

getDummy18 :: IPivotCell a0
           -> IO String
getDummy18 =
  propertyGet "Dummy18"
              []
              outString

getCustomSubtotalFunction :: IPivotCell a0
                          -> IO XlConsolidationFunction
getCustomSubtotalFunction =
  propertyGet "CustomSubtotalFunction"
              []
              outEnum

getPivotRowLine :: IPivotCell a0
                -> IO (PivotLine ())
getPivotRowLine =
  propertyGet "PivotRowLine"
              []
              outIUnknown

getPivotColumnLine :: IPivotCell a0
                   -> IO (PivotLine ())
getPivotColumnLine =
  propertyGet "PivotColumnLine"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IGraphic
-- 
-- --------------------------------------------------
data IGraphic_ a = IGraphic__ 
type IGraphic a = IDispatch (IGraphic_ a)
iidIGraphic :: IID (IGraphic ())
iidIGraphic = mkIID "{00024459-0001-0000-C000-000000000046}"

getApplication195 :: (Variant a1)
                  => IGraphic a0
                  -> IO a1
getApplication195 =
  propertyGet "Application"
              []
              outVariant

getCreator195 :: IGraphic a0
              -> IO XlCreator
getCreator195 =
  propertyGet "Creator"
              []
              outEnum

getParent210 :: IGraphic a0
             -> IO (IDispatch ())
getParent210 =
  propertyGet "Parent"
              []
              outIDispatch

getBrightness0 :: IGraphic a0
               -> IO Float
getBrightness0 =
  propertyGet "Brightness"
              []
              outFloat

setBrightness0 :: Float
               -> IGraphic a0
               -> IO ()
setBrightness0 rHS =
  propertySet "Brightness"
              [inFloat rHS]

getColorType0 :: (Variant a1)
              => IGraphic a0
              -> IO a1
getColorType0 =
  propertyGet "ColorType"
              []
              outVariant

setColorType0 :: (Variant a1)
              => a1
              -> IGraphic a0
              -> IO ()
setColorType0 rHS =
  propertySet "ColorType"
              [inVariant rHS]

getContrast0 :: IGraphic a0
             -> IO Float
getContrast0 =
  propertyGet "Contrast"
              []
              outFloat

setContrast0 :: Float
             -> IGraphic a0
             -> IO ()
setContrast0 rHS =
  propertySet "Contrast"
              [inFloat rHS]

getCropBottom0 :: IGraphic a0
               -> IO Float
getCropBottom0 =
  propertyGet "CropBottom"
              []
              outFloat

setCropBottom0 :: Float
               -> IGraphic a0
               -> IO ()
setCropBottom0 rHS =
  propertySet "CropBottom"
              [inFloat rHS]

getCropLeft0 :: IGraphic a0
             -> IO Float
getCropLeft0 =
  propertyGet "CropLeft"
              []
              outFloat

setCropLeft0 :: Float
             -> IGraphic a0
             -> IO ()
setCropLeft0 rHS =
  propertySet "CropLeft"
              [inFloat rHS]

getCropRight0 :: IGraphic a0
              -> IO Float
getCropRight0 =
  propertyGet "CropRight"
              []
              outFloat

setCropRight0 :: Float
              -> IGraphic a0
              -> IO ()
setCropRight0 rHS =
  propertySet "CropRight"
              [inFloat rHS]

getCropTop0 :: IGraphic a0
            -> IO Float
getCropTop0 =
  propertyGet "CropTop"
              []
              outFloat

setCropTop0 :: Float
            -> IGraphic a0
            -> IO ()
setCropTop0 rHS =
  propertySet "CropTop"
              [inFloat rHS]

getFilename0 :: IGraphic a0
             -> IO String
getFilename0 =
  propertyGet "Filename"
              []
              outString

setFilename0 :: String
             -> IGraphic a0
             -> IO ()
setFilename0 rHS =
  propertySet "Filename"
              [inString rHS]

getHeight53 :: IGraphic a0
            -> IO Float
getHeight53 =
  propertyGet "Height"
              []
              outFloat

setHeight49 :: Float
            -> IGraphic a0
            -> IO ()
setHeight49 rHS =
  propertySet "Height"
              [inFloat rHS]

getLockAspectRatio1 :: (Variant a1)
                    => IGraphic a0
                    -> IO a1
getLockAspectRatio1 =
  propertyGet "LockAspectRatio"
              []
              outVariant

setLockAspectRatio1 :: (Variant a1)
                    => a1
                    -> IGraphic a0
                    -> IO ()
setLockAspectRatio1 rHS =
  propertySet "LockAspectRatio"
              [inVariant rHS]

getWidth54 :: IGraphic a0
           -> IO Float
getWidth54 =
  propertyGet "Width"
              []
              outFloat

setWidth50 :: Float
           -> IGraphic a0
           -> IO ()
setWidth50 rHS =
  propertySet "Width"
              [inFloat rHS]

-- --------------------------------------------------
-- 
-- interface IAutoRecover
-- 
-- --------------------------------------------------
data IAutoRecover_ a = IAutoRecover__ 
type IAutoRecover a = IDispatch (IAutoRecover_ a)
iidIAutoRecover :: IID (IAutoRecover ())
iidIAutoRecover = mkIID "{0002445A-0001-0000-C000-000000000046}"

getApplication196 :: (Variant a1)
                  => IAutoRecover a0
                  -> IO a1
getApplication196 =
  propertyGet "Application"
              []
              outVariant

getCreator196 :: IAutoRecover a0
              -> IO XlCreator
getCreator196 =
  propertyGet "Creator"
              []
              outEnum

getParent211 :: IAutoRecover a0
             -> IO (IDispatch ())
getParent211 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled44 :: IAutoRecover a0
             -> IO Bool
getEnabled44 =
  propertyGet "Enabled"
              []
              outBool

setEnabled44 :: Bool
             -> IAutoRecover a0
             -> IO ()
setEnabled44 rHS =
  propertySet "Enabled"
              [inBool rHS]

getTime :: IAutoRecover a0
        -> IO Int32
getTime =
  propertyGet "Time"
              []
              outInt32

setTime :: Int32
        -> IAutoRecover a0
        -> IO ()
setTime rHS =
  propertySet "Time"
              [inInt32 rHS]

getPath3 :: IAutoRecover a0
         -> IO String
getPath3 =
  propertyGet "Path"
              []
              outString

setPath :: String
        -> IAutoRecover a0
        -> IO ()
setPath rHS =
  propertySet "Path"
              [inString rHS]

-- --------------------------------------------------
-- 
-- interface IErrorCheckingOptions
-- 
-- --------------------------------------------------
data IErrorCheckingOptions_ a = IErrorCheckingOptions__ 
type IErrorCheckingOptions a = IDispatch (IErrorCheckingOptions_ a)
iidIErrorCheckingOptions :: IID (IErrorCheckingOptions ())
iidIErrorCheckingOptions =
  mkIID "{0002445B-0001-0000-C000-000000000046}"

getApplication197 :: (Variant a1)
                  => IErrorCheckingOptions a0
                  -> IO a1
getApplication197 =
  propertyGet "Application"
              []
              outVariant

getCreator197 :: IErrorCheckingOptions a0
              -> IO XlCreator
getCreator197 =
  propertyGet "Creator"
              []
              outEnum

getParent212 :: IErrorCheckingOptions a0
             -> IO (IDispatch ())
getParent212 =
  propertyGet "Parent"
              []
              outIDispatch

getBackgroundChecking :: IErrorCheckingOptions a0
                      -> IO Bool
getBackgroundChecking =
  propertyGet "BackgroundChecking"
              []
              outBool

setBackgroundChecking :: Bool
                      -> IErrorCheckingOptions a0
                      -> IO ()
setBackgroundChecking rHS =
  propertySet "BackgroundChecking"
              [inBool rHS]

getIndicatorColorIndex :: IErrorCheckingOptions a0
                       -> IO XlColorIndex
getIndicatorColorIndex =
  propertyGet "IndicatorColorIndex"
              []
              outEnum

setIndicatorColorIndex :: XlColorIndex
                       -> IErrorCheckingOptions a0
                       -> IO ()
setIndicatorColorIndex rHS =
  propertySet "IndicatorColorIndex"
              [inEnum rHS]

getEvaluateToError :: IErrorCheckingOptions a0
                   -> IO Bool
getEvaluateToError =
  propertyGet "EvaluateToError"
              []
              outBool

setEvaluateToError :: Bool
                   -> IErrorCheckingOptions a0
                   -> IO ()
setEvaluateToError rHS =
  propertySet "EvaluateToError"
              [inBool rHS]

getTextDate :: IErrorCheckingOptions a0
            -> IO Bool
getTextDate =
  propertyGet "TextDate"
              []
              outBool

setTextDate :: Bool
            -> IErrorCheckingOptions a0
            -> IO ()
setTextDate rHS =
  propertySet "TextDate"
              [inBool rHS]

getNumberAsText :: IErrorCheckingOptions a0
                -> IO Bool
getNumberAsText =
  propertyGet "NumberAsText"
              []
              outBool

setNumberAsText :: Bool
                -> IErrorCheckingOptions a0
                -> IO ()
setNumberAsText rHS =
  propertySet "NumberAsText"
              [inBool rHS]

getInconsistentFormula :: IErrorCheckingOptions a0
                       -> IO Bool
getInconsistentFormula =
  propertyGet "InconsistentFormula"
              []
              outBool

setInconsistentFormula :: Bool
                       -> IErrorCheckingOptions a0
                       -> IO ()
setInconsistentFormula rHS =
  propertySet "InconsistentFormula"
              [inBool rHS]

getOmittedCells :: IErrorCheckingOptions a0
                -> IO Bool
getOmittedCells =
  propertyGet "OmittedCells"
              []
              outBool

setOmittedCells :: Bool
                -> IErrorCheckingOptions a0
                -> IO ()
setOmittedCells rHS =
  propertySet "OmittedCells"
              [inBool rHS]

getUnlockedFormulaCells :: IErrorCheckingOptions a0
                        -> IO Bool
getUnlockedFormulaCells =
  propertyGet "UnlockedFormulaCells"
              []
              outBool

setUnlockedFormulaCells :: Bool
                        -> IErrorCheckingOptions a0
                        -> IO ()
setUnlockedFormulaCells rHS =
  propertySet "UnlockedFormulaCells"
              [inBool rHS]

getEmptyCellReferences :: IErrorCheckingOptions a0
                       -> IO Bool
getEmptyCellReferences =
  propertyGet "EmptyCellReferences"
              []
              outBool

setEmptyCellReferences :: Bool
                       -> IErrorCheckingOptions a0
                       -> IO ()
setEmptyCellReferences rHS =
  propertySet "EmptyCellReferences"
              [inBool rHS]

getListDataValidation :: IErrorCheckingOptions a0
                      -> IO Bool
getListDataValidation =
  propertyGet "ListDataValidation"
              []
              outBool

setListDataValidation :: Bool
                      -> IErrorCheckingOptions a0
                      -> IO ()
setListDataValidation rHS =
  propertySet "ListDataValidation"
              [inBool rHS]

getInconsistentTableFormula :: IErrorCheckingOptions a0
                            -> IO Bool
getInconsistentTableFormula =
  propertyGet "InconsistentTableFormula"
              []
              outBool

setInconsistentTableFormula :: Bool
                            -> IErrorCheckingOptions a0
                            -> IO ()
setInconsistentTableFormula rHS =
  propertySet "InconsistentTableFormula"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IErrors
-- 
-- --------------------------------------------------
data IErrors_ a = IErrors__ 
type IErrors a = IDispatch (IErrors_ a)
iidIErrors :: IID (IErrors ())
iidIErrors = mkIID "{0002445C-0001-0000-C000-000000000046}"

getApplication198 :: (Variant a1)
                  => IErrors a0
                  -> IO a1
getApplication198 =
  propertyGet "Application"
              []
              outVariant

getCreator198 :: IErrors a0
              -> IO XlCreator
getCreator198 =
  propertyGet "Creator"
              []
              outEnum

getParent213 :: IErrors a0
             -> IO (IDispatch ())
getParent213 =
  propertyGet "Parent"
              []
              outIDispatch

getItem31 :: a1
          -> IErrors a0
          -> IO (Error ())
getItem31 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getDefault67 :: a1
             -> IErrors a0
             -> IO (Error ())
getDefault67 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IError
-- 
-- --------------------------------------------------
data IError_ a = IError__ 
type IError a = IDispatch (IError_ a)
iidIError :: IID (IError ())
iidIError = mkIID "{0002445D-0001-0000-C000-000000000046}"

getApplication199 :: (Variant a1)
                  => IError a0
                  -> IO a1
getApplication199 =
  propertyGet "Application"
              []
              outVariant

getCreator199 :: IError a0
              -> IO XlCreator
getCreator199 =
  propertyGet "Creator"
              []
              outEnum

getParent214 :: IError a0
             -> IO (IDispatch ())
getParent214 =
  propertyGet "Parent"
              []
              outIDispatch

getValue27 :: IError a0
           -> IO Bool
getValue27 =
  propertyGet "Value"
              []
              outBool

getIgnore :: IError a0
          -> IO Bool
getIgnore =
  propertyGet "Ignore"
              []
              outBool

setIgnore :: Bool
          -> IError a0
          -> IO ()
setIgnore rHS =
  propertySet "Ignore"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface ISmartTagAction
-- 
-- --------------------------------------------------
data ISmartTagAction_ a = ISmartTagAction__ 
type ISmartTagAction a = IDispatch (ISmartTagAction_ a)
iidISmartTagAction :: IID (ISmartTagAction ())
iidISmartTagAction = mkIID "{0002445E-0001-0000-C000-000000000046}"

getApplication200 :: (Variant a1)
                  => ISmartTagAction a0
                  -> IO a1
getApplication200 =
  propertyGet "Application"
              []
              outVariant

getCreator200 :: ISmartTagAction a0
              -> IO XlCreator
getCreator200 =
  propertyGet "Creator"
              []
              outEnum

getParent215 :: ISmartTagAction a0
             -> IO (IDispatch ())
getParent215 =
  propertyGet "Parent"
              []
              outIDispatch

getName68 :: ISmartTagAction a0
          -> IO String
getName68 =
  propertyGet "Name"
              []
              outString

execute :: ISmartTagAction a0
        -> IO ()
execute =
  method0 "Execute"
          []

getDefault68 :: ISmartTagAction a0
             -> IO String
getDefault68 =
  propertyGet "_Default"
              []
              outString

getType24 :: ISmartTagAction a0
          -> IO XlSmartTagControlType
getType24 =
  propertyGet "Type"
              []
              outEnum

getPresentInPane :: ISmartTagAction a0
                 -> IO Bool
getPresentInPane =
  propertyGet "PresentInPane"
              []
              outBool

getExpandHelp :: ISmartTagAction a0
              -> IO Bool
getExpandHelp =
  propertyGet "ExpandHelp"
              []
              outBool

setExpandHelp :: Bool
              -> ISmartTagAction a0
              -> IO ()
setExpandHelp rHS =
  propertySet "ExpandHelp"
              [inBool rHS]

getCheckboxState :: ISmartTagAction a0
                 -> IO Bool
getCheckboxState =
  propertyGet "CheckboxState"
              []
              outBool

setCheckboxState :: Bool
                 -> ISmartTagAction a0
                 -> IO ()
setCheckboxState rHS =
  propertySet "CheckboxState"
              [inBool rHS]

getTextboxText :: ISmartTagAction a0
               -> IO String
getTextboxText =
  propertyGet "TextboxText"
              []
              outString

setTextboxText :: String
               -> ISmartTagAction a0
               -> IO ()
setTextboxText rHS =
  propertySet "TextboxText"
              [inString rHS]

getListSelection :: ISmartTagAction a0
                 -> IO Int32
getListSelection =
  propertyGet "ListSelection"
              []
              outInt32

setListSelection :: Int32
                 -> ISmartTagAction a0
                 -> IO ()
setListSelection rHS =
  propertySet "ListSelection"
              [inInt32 rHS]

getRadioGroupSelection :: ISmartTagAction a0
                       -> IO Int32
getRadioGroupSelection =
  propertyGet "RadioGroupSelection"
              []
              outInt32

setRadioGroupSelection :: Int32
                       -> ISmartTagAction a0
                       -> IO ()
setRadioGroupSelection rHS =
  propertySet "RadioGroupSelection"
              [inInt32 rHS]

getActiveXControl :: ISmartTagAction a0
                  -> IO (IDispatch ())
getActiveXControl =
  propertyGet "ActiveXControl"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ISmartTagActions
-- 
-- --------------------------------------------------
data ISmartTagActions_ a = ISmartTagActions__ 
type ISmartTagActions a = IDispatch (ISmartTagActions_ a)
iidISmartTagActions :: IID (ISmartTagActions ())
iidISmartTagActions =
  mkIID "{0002445F-0001-0000-C000-000000000046}"

getApplication201 :: (Variant a1)
                  => ISmartTagActions a0
                  -> IO a1
getApplication201 =
  propertyGet "Application"
              []
              outVariant

getCreator201 :: ISmartTagActions a0
              -> IO XlCreator
getCreator201 =
  propertyGet "Creator"
              []
              outEnum

getParent216 :: ISmartTagActions a0
             -> IO (IDispatch ())
getParent216 =
  propertyGet "Parent"
              []
              outIDispatch

getCount83 :: ISmartTagActions a0
           -> IO Int32
getCount83 =
  propertyGet "Count"
              []
              outInt32

getDefault69 :: a1
             -> ISmartTagActions a0
             -> IO (SmartTagAction ())
getDefault69 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem32 :: a1
          -> ISmartTagActions a0
          -> IO (SmartTagAction ())
getItem32 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getNewEnum39 :: ISmartTagActions a0
             -> IO (IUnknown ())
getNewEnum39 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISmartTag
-- 
-- --------------------------------------------------
data ISmartTag_ a = ISmartTag__ 
type ISmartTag a = IDispatch (ISmartTag_ a)
iidISmartTag :: IID (ISmartTag ())
iidISmartTag = mkIID "{00024460-0001-0000-C000-000000000046}"

getApplication202 :: (Variant a1)
                  => ISmartTag a0
                  -> IO a1
getApplication202 =
  propertyGet "Application"
              []
              outVariant

getCreator202 :: ISmartTag a0
              -> IO XlCreator
getCreator202 =
  propertyGet "Creator"
              []
              outEnum

getParent217 :: ISmartTag a0
             -> IO (IDispatch ())
getParent217 =
  propertyGet "Parent"
              []
              outIDispatch

getDownloadURL :: ISmartTag a0
               -> IO String
getDownloadURL =
  propertyGet "DownloadURL"
              []
              outString

getName69 :: ISmartTag a0
          -> IO String
getName69 =
  propertyGet "Name"
              []
              outString

getDefault70 :: ISmartTag a0
             -> IO String
getDefault70 =
  propertyGet "_Default"
              []
              outString

getXML :: ISmartTag a0
       -> IO String
getXML =
  propertyGet "XML"
              []
              outString

getRange8 :: ISmartTag a0
          -> IO (Range ())
getRange8 =
  propertyGet "Range"
              []
              outIUnknown

delete109 :: ISmartTag a0
          -> IO ()
delete109 =
  method0 "Delete"
          []

getSmartTagActions :: ISmartTag a0
                   -> IO (SmartTagActions ())
getSmartTagActions =
  propertyGet "SmartTagActions"
              []
              outIUnknown

getProperties :: ISmartTag a0
              -> IO (CustomProperties ())
getProperties =
  propertyGet "Properties"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISmartTags
-- 
-- --------------------------------------------------
data ISmartTags_ a = ISmartTags__ 
type ISmartTags a = IDispatch (ISmartTags_ a)
iidISmartTags :: IID (ISmartTags ())
iidISmartTags = mkIID "{00024461-0001-0000-C000-000000000046}"

getApplication203 :: (Variant a1)
                  => ISmartTags a0
                  -> IO a1
getApplication203 =
  propertyGet "Application"
              []
              outVariant

getCreator203 :: ISmartTags a0
              -> IO XlCreator
getCreator203 =
  propertyGet "Creator"
              []
              outEnum

getParent218 :: ISmartTags a0
             -> IO (IDispatch ())
getParent218 =
  propertyGet "Parent"
              []
              outIDispatch

add58 :: String
      -> ISmartTags a0
      -> IO (SmartTag ())
add58 smartTagType =
  function1 "Add"
            [inString smartTagType]
            outIUnknown

getCount84 :: ISmartTags a0
           -> IO Int32
getCount84 =
  propertyGet "Count"
              []
              outInt32

getDefault71 :: a1
             -> ISmartTags a0
             -> IO (SmartTag ())
getDefault71 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum40 :: ISmartTags a0
             -> IO (IUnknown ())
getNewEnum40 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISmartTagRecognizer
-- 
-- --------------------------------------------------
data ISmartTagRecognizer_ a = ISmartTagRecognizer__ 
type ISmartTagRecognizer a = IDispatch (ISmartTagRecognizer_ a)
iidISmartTagRecognizer :: IID (ISmartTagRecognizer ())
iidISmartTagRecognizer =
  mkIID "{00024462-0001-0000-C000-000000000046}"

getApplication204 :: (Variant a1)
                  => ISmartTagRecognizer a0
                  -> IO a1
getApplication204 =
  propertyGet "Application"
              []
              outVariant

getCreator204 :: ISmartTagRecognizer a0
              -> IO XlCreator
getCreator204 =
  propertyGet "Creator"
              []
              outEnum

getParent219 :: ISmartTagRecognizer a0
             -> IO (IDispatch ())
getParent219 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled45 :: ISmartTagRecognizer a0
             -> IO Bool
getEnabled45 =
  propertyGet "Enabled"
              []
              outBool

setEnabled45 :: Bool
             -> ISmartTagRecognizer a0
             -> IO ()
setEnabled45 rHS =
  propertySet "Enabled"
              [inBool rHS]

getProgID2 :: ISmartTagRecognizer a0
           -> IO String
getProgID2 =
  propertyGet "progID"
              []
              outString

getDefault72 :: ISmartTagRecognizer a0
             -> IO String
getDefault72 =
  propertyGet "_Default"
              []
              outString

getFullName1 :: ISmartTagRecognizer a0
             -> IO String
getFullName1 =
  propertyGet "FullName"
              []
              outString

-- --------------------------------------------------
-- 
-- interface ISmartTagRecognizers
-- 
-- --------------------------------------------------
data ISmartTagRecognizers_ a = ISmartTagRecognizers__ 
type ISmartTagRecognizers a = IDispatch (ISmartTagRecognizers_ a)
iidISmartTagRecognizers :: IID (ISmartTagRecognizers ())
iidISmartTagRecognizers =
  mkIID "{00024463-0001-0000-C000-000000000046}"

getApplication205 :: (Variant a1)
                  => ISmartTagRecognizers a0
                  -> IO a1
getApplication205 =
  propertyGet "Application"
              []
              outVariant

getCreator205 :: ISmartTagRecognizers a0
              -> IO XlCreator
getCreator205 =
  propertyGet "Creator"
              []
              outEnum

getParent220 :: ISmartTagRecognizers a0
             -> IO (IDispatch ())
getParent220 =
  propertyGet "Parent"
              []
              outIDispatch

getCount85 :: ISmartTagRecognizers a0
           -> IO Int32
getCount85 =
  propertyGet "Count"
              []
              outInt32

getItem33 :: a1
          -> ISmartTagRecognizers a0
          -> IO (SmartTagRecognizer ())
getItem33 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getDefault73 :: a1
             -> ISmartTagRecognizers a0
             -> IO (SmartTagRecognizer ())
getDefault73 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum41 :: ISmartTagRecognizers a0
             -> IO (IUnknown ())
getNewEnum41 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getRecognize :: ISmartTagRecognizers a0
             -> IO Bool
getRecognize =
  propertyGet "Recognize"
              []
              outBool

setRecognize :: Bool
             -> ISmartTagRecognizers a0
             -> IO ()
setRecognize rHS =
  propertySet "Recognize"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface ISmartTagOptions
-- 
-- --------------------------------------------------
data ISmartTagOptions_ a = ISmartTagOptions__ 
type ISmartTagOptions a = IDispatch (ISmartTagOptions_ a)
iidISmartTagOptions :: IID (ISmartTagOptions ())
iidISmartTagOptions =
  mkIID "{00024464-0001-0000-C000-000000000046}"

getApplication206 :: (Variant a1)
                  => ISmartTagOptions a0
                  -> IO a1
getApplication206 =
  propertyGet "Application"
              []
              outVariant

getCreator206 :: ISmartTagOptions a0
              -> IO XlCreator
getCreator206 =
  propertyGet "Creator"
              []
              outEnum

getParent221 :: ISmartTagOptions a0
             -> IO (IDispatch ())
getParent221 =
  propertyGet "Parent"
              []
              outIDispatch

getDisplaySmartTags :: ISmartTagOptions a0
                    -> IO XlSmartTagDisplayMode
getDisplaySmartTags =
  propertyGet "DisplaySmartTags"
              []
              outEnum

setDisplaySmartTags :: XlSmartTagDisplayMode
                    -> ISmartTagOptions a0
                    -> IO ()
setDisplaySmartTags rHS =
  propertySet "DisplaySmartTags"
              [inEnum rHS]

getEmbedSmartTags :: ISmartTagOptions a0
                  -> IO Bool
getEmbedSmartTags =
  propertyGet "EmbedSmartTags"
              []
              outBool

setEmbedSmartTags :: Bool
                  -> ISmartTagOptions a0
                  -> IO ()
setEmbedSmartTags rHS =
  propertySet "EmbedSmartTags"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface ISpellingOptions
-- 
-- --------------------------------------------------
data ISpellingOptions_ a = ISpellingOptions__ 
type ISpellingOptions a = IDispatch (ISpellingOptions_ a)
iidISpellingOptions :: IID (ISpellingOptions ())
iidISpellingOptions =
  mkIID "{00024465-0001-0000-C000-000000000046}"

getDictLang :: ISpellingOptions a0
            -> IO Int32
getDictLang =
  propertyGet "DictLang"
              []
              outInt32

setDictLang :: Int32
            -> ISpellingOptions a0
            -> IO ()
setDictLang rHS =
  propertySet "DictLang"
              [inInt32 rHS]

getUserDict :: ISpellingOptions a0
            -> IO String
getUserDict =
  propertyGet "UserDict"
              []
              outString

setUserDict :: String
            -> ISpellingOptions a0
            -> IO ()
setUserDict rHS =
  propertySet "UserDict"
              [inString rHS]

getIgnoreCaps :: ISpellingOptions a0
              -> IO Bool
getIgnoreCaps =
  propertyGet "IgnoreCaps"
              []
              outBool

setIgnoreCaps :: Bool
              -> ISpellingOptions a0
              -> IO ()
setIgnoreCaps rHS =
  propertySet "IgnoreCaps"
              [inBool rHS]

getSuggestMainOnly :: ISpellingOptions a0
                   -> IO Bool
getSuggestMainOnly =
  propertyGet "SuggestMainOnly"
              []
              outBool

setSuggestMainOnly :: Bool
                   -> ISpellingOptions a0
                   -> IO ()
setSuggestMainOnly rHS =
  propertySet "SuggestMainOnly"
              [inBool rHS]

getIgnoreMixedDigits :: ISpellingOptions a0
                     -> IO Bool
getIgnoreMixedDigits =
  propertyGet "IgnoreMixedDigits"
              []
              outBool

setIgnoreMixedDigits :: Bool
                     -> ISpellingOptions a0
                     -> IO ()
setIgnoreMixedDigits rHS =
  propertySet "IgnoreMixedDigits"
              [inBool rHS]

getIgnoreFileNames :: ISpellingOptions a0
                   -> IO Bool
getIgnoreFileNames =
  propertyGet "IgnoreFileNames"
              []
              outBool

setIgnoreFileNames :: Bool
                   -> ISpellingOptions a0
                   -> IO ()
setIgnoreFileNames rHS =
  propertySet "IgnoreFileNames"
              [inBool rHS]

getGermanPostReform :: ISpellingOptions a0
                    -> IO Bool
getGermanPostReform =
  propertyGet "GermanPostReform"
              []
              outBool

setGermanPostReform :: Bool
                    -> ISpellingOptions a0
                    -> IO ()
setGermanPostReform rHS =
  propertySet "GermanPostReform"
              [inBool rHS]

getKoreanCombineAux :: ISpellingOptions a0
                    -> IO Bool
getKoreanCombineAux =
  propertyGet "KoreanCombineAux"
              []
              outBool

setKoreanCombineAux :: Bool
                    -> ISpellingOptions a0
                    -> IO ()
setKoreanCombineAux rHS =
  propertySet "KoreanCombineAux"
              [inBool rHS]

getKoreanUseAutoChangeList :: ISpellingOptions a0
                           -> IO Bool
getKoreanUseAutoChangeList =
  propertyGet "KoreanUseAutoChangeList"
              []
              outBool

setKoreanUseAutoChangeList :: Bool
                           -> ISpellingOptions a0
                           -> IO ()
setKoreanUseAutoChangeList rHS =
  propertySet "KoreanUseAutoChangeList"
              [inBool rHS]

getKoreanProcessCompound :: ISpellingOptions a0
                         -> IO Bool
getKoreanProcessCompound =
  propertyGet "KoreanProcessCompound"
              []
              outBool

setKoreanProcessCompound :: Bool
                         -> ISpellingOptions a0
                         -> IO ()
setKoreanProcessCompound rHS =
  propertySet "KoreanProcessCompound"
              [inBool rHS]

getHebrewModes :: ISpellingOptions a0
               -> IO XlHebrewModes
getHebrewModes =
  propertyGet "HebrewModes"
              []
              outEnum

setHebrewModes :: XlHebrewModes
               -> ISpellingOptions a0
               -> IO ()
setHebrewModes rHS =
  propertySet "HebrewModes"
              [inEnum rHS]

getArabicModes :: ISpellingOptions a0
               -> IO XlArabicModes
getArabicModes =
  propertyGet "ArabicModes"
              []
              outEnum

setArabicModes :: XlArabicModes
               -> ISpellingOptions a0
               -> IO ()
setArabicModes rHS =
  propertySet "ArabicModes"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface ISpeech
-- 
-- --------------------------------------------------
data ISpeech_ a = ISpeech__ 
type ISpeech a = IDispatch (ISpeech_ a)
iidISpeech :: IID (ISpeech ())
iidISpeech = mkIID "{00024466-0001-0000-C000-000000000046}"

speak0 :: (Variant a1, Variant a2, Variant a3)
       => String
       -> a1
       -> a2
       -> a3
       -> ISpeech a0
       -> IO ()
speak0 text1 speakAsync speakXML purge =
  method0 "Speak"
          [ inString text1
          , inVariant speakAsync
          , inVariant speakXML
          , inVariant purge
          ]

getDirection :: ISpeech a0
             -> IO XlSpeakDirection
getDirection =
  propertyGet "Direction"
              []
              outEnum

setDirection :: XlSpeakDirection
             -> ISpeech a0
             -> IO ()
setDirection rHS =
  propertySet "Direction"
              [inEnum rHS]

getSpeakCellOnEnter :: ISpeech a0
                    -> IO Bool
getSpeakCellOnEnter =
  propertyGet "SpeakCellOnEnter"
              []
              outBool

setSpeakCellOnEnter :: Bool
                    -> ISpeech a0
                    -> IO ()
setSpeakCellOnEnter rHS =
  propertySet "SpeakCellOnEnter"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IProtection
-- 
-- --------------------------------------------------
data IProtection_ a = IProtection__ 
type IProtection a = IDispatch (IProtection_ a)
iidIProtection :: IID (IProtection ())
iidIProtection = mkIID "{00024467-0001-0000-C000-000000000046}"

getAllowFormattingCells :: IProtection a0
                        -> IO Bool
getAllowFormattingCells =
  propertyGet "AllowFormattingCells"
              []
              outBool

getAllowFormattingColumns :: IProtection a0
                          -> IO Bool
getAllowFormattingColumns =
  propertyGet "AllowFormattingColumns"
              []
              outBool

getAllowFormattingRows :: IProtection a0
                       -> IO Bool
getAllowFormattingRows =
  propertyGet "AllowFormattingRows"
              []
              outBool

getAllowInsertingColumns :: IProtection a0
                         -> IO Bool
getAllowInsertingColumns =
  propertyGet "AllowInsertingColumns"
              []
              outBool

getAllowInsertingRows :: IProtection a0
                      -> IO Bool
getAllowInsertingRows =
  propertyGet "AllowInsertingRows"
              []
              outBool

getAllowInsertingHyperlinks :: IProtection a0
                            -> IO Bool
getAllowInsertingHyperlinks =
  propertyGet "AllowInsertingHyperlinks"
              []
              outBool

getAllowDeletingColumns :: IProtection a0
                        -> IO Bool
getAllowDeletingColumns =
  propertyGet "AllowDeletingColumns"
              []
              outBool

getAllowDeletingRows :: IProtection a0
                     -> IO Bool
getAllowDeletingRows =
  propertyGet "AllowDeletingRows"
              []
              outBool

getAllowSorting :: IProtection a0
                -> IO Bool
getAllowSorting =
  propertyGet "AllowSorting"
              []
              outBool

getAllowFiltering :: IProtection a0
                  -> IO Bool
getAllowFiltering =
  propertyGet "AllowFiltering"
              []
              outBool

getAllowUsingPivotTables :: IProtection a0
                         -> IO Bool
getAllowUsingPivotTables =
  propertyGet "AllowUsingPivotTables"
              []
              outBool

getAllowEditRanges :: IProtection a0
                   -> IO (AllowEditRanges ())
getAllowEditRanges =
  propertyGet "AllowEditRanges"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotItemList
-- 
-- --------------------------------------------------
data IPivotItemList_ a = IPivotItemList__ 
type IPivotItemList a = IDispatch (IPivotItemList_ a)
iidIPivotItemList :: IID (IPivotItemList ())
iidIPivotItemList = mkIID "{00024468-0001-0000-C000-000000000046}"

getApplication207 :: (Variant a1)
                  => IPivotItemList a0
                  -> IO a1
getApplication207 =
  propertyGet "Application"
              []
              outVariant

getCreator207 :: IPivotItemList a0
              -> IO XlCreator
getCreator207 =
  propertyGet "Creator"
              []
              outEnum

getParent222 :: IPivotItemList a0
             -> IO (IDispatch ())
getParent222 =
  propertyGet "Parent"
              []
              outIDispatch

getCount86 :: IPivotItemList a0
           -> IO Int32
getCount86 =
  propertyGet "Count"
              []
              outInt32

item49 :: a1
       -> IPivotItemList a0
       -> IO (PivotItem ())
item49 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault74 :: a1
             -> IPivotItemList a0
             -> IO (PivotItem ())
getDefault74 field =
  propertyGet "_Default"
              [inVariant field]
              outIUnknown

newEnum39 :: IPivotItemList a0
          -> IO (IUnknown ())
newEnum39 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ITab
-- 
-- --------------------------------------------------
data ITab_ a = ITab__ 
type ITab a = IDispatch (ITab_ a)
iidITab :: IID (ITab ())
iidITab = mkIID "{00024469-0001-0000-C000-000000000046}"

getApplication208 :: (Variant a1)
                  => ITab a0
                  -> IO a1
getApplication208 =
  propertyGet "Application"
              []
              outVariant

getCreator208 :: ITab a0
              -> IO XlCreator
getCreator208 =
  propertyGet "Creator"
              []
              outEnum

getParent223 :: ITab a0
             -> IO (IDispatch ())
getParent223 =
  propertyGet "Parent"
              []
              outIDispatch

getColor3 :: (Variant a1)
          => ITab a0
          -> IO a1
getColor3 =
  propertyGet "Color"
              []
              outVariant

setColor3 :: a1
          -> ITab a0
          -> IO ()
setColor3 rHS =
  propertySet "Color"
              [inVariant rHS]

getColorIndex3 :: ITab a0
               -> IO XlColorIndex
getColorIndex3 =
  propertyGet "ColorIndex"
              []
              outEnum

setColorIndex3 :: XlColorIndex
               -> ITab a0
               -> IO ()
setColorIndex3 rHS =
  propertySet "ColorIndex"
              [inEnum rHS]

getThemeColor3 :: ITab a0
               -> IO XlThemeColor
getThemeColor3 =
  propertyGet "ThemeColor"
              []
              outEnum

setThemeColor3 :: XlThemeColor
               -> ITab a0
               -> IO ()
setThemeColor3 rHS =
  propertySet "ThemeColor"
              [inEnum rHS]

getTintAndShade4 :: (Variant a1)
                 => ITab a0
                 -> IO a1
getTintAndShade4 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade4 :: a1
                 -> ITab a0
                 -> IO ()
setTintAndShade4 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IAllowEditRanges
-- 
-- --------------------------------------------------
data IAllowEditRanges_ a = IAllowEditRanges__ 
type IAllowEditRanges a = IDispatch (IAllowEditRanges_ a)
iidIAllowEditRanges :: IID (IAllowEditRanges ())
iidIAllowEditRanges =
  mkIID "{0002446A-0001-0000-C000-000000000046}"

getCount87 :: IAllowEditRanges a0
           -> IO Int32
getCount87 =
  propertyGet "Count"
              []
              outInt32

getItem34 :: a1
          -> IAllowEditRanges a0
          -> IO (AllowEditRange ())
getItem34 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

add59 :: (Variant a2)
      => String
      -> Range a1
      -> a2
      -> IAllowEditRanges a0
      -> IO (AllowEditRange ())
add59 title range password =
  function1 "Add"
            [ inString title
            , inIUnknown range
            , inVariant password
            ]
            outIUnknown

getDefault75 :: a1
             -> IAllowEditRanges a0
             -> IO (AllowEditRange ())
getDefault75 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum42 :: IAllowEditRanges a0
             -> IO (IUnknown ())
getNewEnum42 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IAllowEditRange
-- 
-- --------------------------------------------------
data IAllowEditRange_ a = IAllowEditRange__ 
type IAllowEditRange a = IDispatch (IAllowEditRange_ a)
iidIAllowEditRange :: IID (IAllowEditRange ())
iidIAllowEditRange = mkIID "{0002446B-0001-0000-C000-000000000046}"

getTitle2 :: IAllowEditRange a0
          -> IO String
getTitle2 =
  propertyGet "Title"
              []
              outString

setTitle1 :: String
          -> IAllowEditRange a0
          -> IO ()
setTitle1 rHS =
  propertySet "Title"
              [inString rHS]

getRange9 :: IAllowEditRange a0
          -> IO (Range ())
getRange9 =
  propertyGet "Range"
              []
              outIUnknown

setRange :: Range a1
         -> IAllowEditRange a0
         -> IO ()
setRange rHS =
  propertySet "Range"
              [inIUnknown rHS]

changePassword :: String
               -> IAllowEditRange a0
               -> IO ()
changePassword password =
  method0 "ChangePassword"
          [inString password]

delete110 :: IAllowEditRange a0
          -> IO ()
delete110 =
  method0 "Delete"
          []

unprotect4 :: (Variant a1)
           => a1
           -> IAllowEditRange a0
           -> IO ()
unprotect4 password =
  method0 "Unprotect"
          [inVariant password]

getUsers :: IAllowEditRange a0
         -> IO (UserAccessList ())
getUsers =
  propertyGet "Users"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IUserAccessList
-- 
-- --------------------------------------------------
data IUserAccessList_ a = IUserAccessList__ 
type IUserAccessList a = IDispatch (IUserAccessList_ a)
iidIUserAccessList :: IID (IUserAccessList ())
iidIUserAccessList = mkIID "{0002446C-0001-0000-C000-000000000046}"

getCount88 :: IUserAccessList a0
           -> IO Int32
getCount88 =
  propertyGet "Count"
              []
              outInt32

getItem35 :: a1
          -> IUserAccessList a0
          -> IO (UserAccess ())
getItem35 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

add60 :: String
      -> Bool
      -> IUserAccessList a0
      -> IO (UserAccess ())
add60 name allowEdit =
  function1 "Add"
            [ inString name
            , inBool allowEdit
            ]
            outIUnknown

deleteAll :: IUserAccessList a0
          -> IO ()
deleteAll =
  method0 "DeleteAll"
          []

getDefault76 :: a1
             -> IUserAccessList a0
             -> IO (UserAccess ())
getDefault76 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum43 :: IUserAccessList a0
             -> IO (IUnknown ())
getNewEnum43 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IUserAccess
-- 
-- --------------------------------------------------
data IUserAccess_ a = IUserAccess__ 
type IUserAccess a = IDispatch (IUserAccess_ a)
iidIUserAccess :: IID (IUserAccess ())
iidIUserAccess = mkIID "{0002446D-0001-0000-C000-000000000046}"

getName70 :: IUserAccess a0
          -> IO String
getName70 =
  propertyGet "Name"
              []
              outString

getAllowEdit0 :: IUserAccess a0
              -> IO Bool
getAllowEdit0 =
  propertyGet "AllowEdit"
              []
              outBool

setAllowEdit :: Bool
             -> IUserAccess a0
             -> IO ()
setAllowEdit rHS =
  propertySet "AllowEdit"
              [inBool rHS]

delete111 :: IUserAccess a0
          -> IO ()
delete111 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface IRTD
-- 
-- --------------------------------------------------
data IRTD_ a = IRTD__ 
type IRTD a = IDispatch (IRTD_ a)
iidIRTD :: IID (IRTD ())
iidIRTD = mkIID "{0002446E-0001-0000-C000-000000000046}"

getThrottleInterval :: IRTD a0
                    -> IO Int32
getThrottleInterval =
  propertyGet "ThrottleInterval"
              []
              outInt32

setThrottleInterval :: Int32
                    -> IRTD a0
                    -> IO ()
setThrottleInterval rHS =
  propertySet "ThrottleInterval"
              [inInt32 rHS]

refreshData0 :: IRTD a0
             -> IO ()
refreshData0 =
  method0 "RefreshData"
          []

restartServers :: IRTD a0
               -> IO ()
restartServers =
  method0 "RestartServers"
          []

-- --------------------------------------------------
-- 
-- interface IDiagram
-- 
-- --------------------------------------------------
data IDiagram_ a = IDiagram__ 
type IDiagram a = IDispatch (IDiagram_ a)
iidIDiagram :: IID (IDiagram ())
iidIDiagram = mkIID "{0002446F-0001-0000-C000-000000000046}"

getApplication209 :: (Variant a1)
                  => IDiagram a0
                  -> IO a1
getApplication209 =
  propertyGet "Application"
              []
              outVariant

getCreator209 :: IDiagram a0
              -> IO XlCreator
getCreator209 =
  propertyGet "Creator"
              []
              outEnum

getParent224 :: IDiagram a0
             -> IO (IDispatch ())
getParent224 =
  propertyGet "Parent"
              []
              outIDispatch

getNodes1 :: IDiagram a0
          -> IO (DiagramNodes ())
getNodes1 =
  propertyGet "Nodes"
              []
              outIUnknown

getType25 :: (Variant a1)
          => IDiagram a0
          -> IO a1
getType25 =
  propertyGet "Type"
              []
              outVariant

getAutoLayout :: (Variant a1)
              => IDiagram a0
              -> IO a1
getAutoLayout =
  propertyGet "AutoLayout"
              []
              outVariant

setAutoLayout :: (Variant a1)
              => a1
              -> IDiagram a0
              -> IO ()
setAutoLayout rHS =
  propertySet "AutoLayout"
              [inVariant rHS]

getReverse :: (Variant a1)
           => IDiagram a0
           -> IO a1
getReverse =
  propertyGet "Reverse"
              []
              outVariant

setReverse :: (Variant a1)
           => a1
           -> IDiagram a0
           -> IO ()
setReverse rHS =
  propertySet "Reverse"
              [inVariant rHS]

getAutoFormat :: (Variant a1)
              => IDiagram a0
              -> IO a1
getAutoFormat =
  propertyGet "AutoFormat"
              []
              outVariant

setAutoFormat :: (Variant a1)
              => a1
              -> IDiagram a0
              -> IO ()
setAutoFormat rHS =
  propertySet "AutoFormat"
              [inVariant rHS]

convert0 :: (Variant a1)
         => a1
         -> IDiagram a0
         -> IO ()
convert0 type0 =
  method0 "Convert"
          [inVariant type0]

fitText :: IDiagram a0
        -> IO ()
fitText =
  method0 "FitText"
          []

-- --------------------------------------------------
-- 
-- interface IListObjects
-- 
-- --------------------------------------------------
data IListObjects_ a = IListObjects__ 
type IListObjects a = IDispatch (IListObjects_ a)
iidIListObjects :: IID (IListObjects ())
iidIListObjects = mkIID "{00024470-0001-0000-C000-000000000046}"

getApplication210 :: (Variant a1)
                  => IListObjects a0
                  -> IO a1
getApplication210 =
  propertyGet "Application"
              []
              outVariant

getCreator210 :: IListObjects a0
              -> IO XlCreator
getCreator210 =
  propertyGet "Creator"
              []
              outEnum

getParent225 :: IListObjects a0
             -> IO (IDispatch ())
getParent225 =
  propertyGet "Parent"
              []
              outIDispatch

add61 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> IListObjects a0
      -> IO (ListObject ())
add61 sourceType source linkSource xlListObjectHasHeaders destination =
  function1 "_Add"
            [ inDefaultValue (inInt32 1) inVariant sourceType
            , inVariant source
            , inVariant linkSource
            , inDefaultValue (inInt32 0) inVariant xlListObjectHasHeaders
            , inVariant destination
            ]
            outIUnknown

getDefault77 :: a1
             -> IListObjects a0
             -> IO (ListObject ())
getDefault77 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum44 :: IListObjects a0
             -> IO (IUnknown ())
getNewEnum44 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem36 :: a1
          -> IListObjects a0
          -> IO (ListObject ())
getItem36 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount89 :: IListObjects a0
           -> IO Int32
getCount89 =
  propertyGet "Count"
              []
              outInt32

add62 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> IListObjects a0
      -> IO (ListObject ())
add62 sourceType source linkSource xlListObjectHasHeaders destination tableStyleName =
  function1 "Add"
            [ inDefaultValue (inInt32 1) inVariant sourceType
            , inVariant source
            , inVariant linkSource
            , inDefaultValue (inInt32 0) inVariant xlListObjectHasHeaders
            , inVariant destination
            , inVariant tableStyleName
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IListObject
-- 
-- --------------------------------------------------
data IListObject_ a = IListObject__ 
type IListObject a = IDispatch (IListObject_ a)
iidIListObject :: IID (IListObject ())
iidIListObject = mkIID "{00024471-0001-0000-C000-000000000046}"

getApplication211 :: (Variant a1)
                  => IListObject a0
                  -> IO a1
getApplication211 =
  propertyGet "Application"
              []
              outVariant

getCreator211 :: IListObject a0
              -> IO XlCreator
getCreator211 =
  propertyGet "Creator"
              []
              outEnum

getParent226 :: IListObject a0
             -> IO (IDispatch ())
getParent226 =
  propertyGet "Parent"
              []
              outIDispatch

delete112 :: IListObject a0
          -> IO ()
delete112 =
  method0 "Delete"
          []

publish1 :: a1
         -> Bool
         -> IListObject a0
         -> IO String
publish1 target linkSource =
  function1 "Publish"
            [ inVariant target
            , inBool linkSource
            ]
            outString

refresh2 :: IListObject a0
         -> IO ()
refresh2 =
  method0 "Refresh"
          []

unlink :: IListObject a0
       -> IO ()
unlink =
  method0 "Unlink"
          []

unlist :: IListObject a0
       -> IO ()
unlist =
  method0 "Unlist"
          []

updateChanges :: (Variant a1)
              => a1
              -> IListObject a0
              -> IO ()
updateChanges iConflictType =
  method0 "UpdateChanges"
          [inDefaultValue (inInt32 0) inVariant iConflictType]

resize0 :: Range a1
        -> IListObject a0
        -> IO ()
resize0 range =
  method0 "Resize"
          [inIUnknown range]

getDefault78 :: IListObject a0
             -> IO String
getDefault78 =
  propertyGet "_Default"
              []
              outString

getActive :: IListObject a0
          -> IO Bool
getActive =
  propertyGet "Active"
              []
              outBool

getDataBodyRange0 :: IListObject a0
                  -> IO (Range ())
getDataBodyRange0 =
  propertyGet "DataBodyRange"
              []
              outIUnknown

getDisplayRightToLeft5 :: IListObject a0
                       -> IO Bool
getDisplayRightToLeft5 =
  propertyGet "DisplayRightToLeft"
              []
              outBool

getHeaderRowRange :: IListObject a0
                  -> IO (Range ())
getHeaderRowRange =
  propertyGet "HeaderRowRange"
              []
              outIUnknown

getInsertRowRange :: IListObject a0
                  -> IO (Range ())
getInsertRowRange =
  propertyGet "InsertRowRange"
              []
              outIUnknown

getListColumns :: IListObject a0
               -> IO (ListColumns ())
getListColumns =
  propertyGet "ListColumns"
              []
              outIUnknown

getListRows :: IListObject a0
            -> IO (ListRows ())
getListRows =
  propertyGet "ListRows"
              []
              outIUnknown

getName71 :: IListObject a0
          -> IO String
getName71 =
  propertyGet "Name"
              []
              outString

setName39 :: String
          -> IListObject a0
          -> IO ()
setName39 rHS =
  propertySet "Name"
              [inString rHS]

getQueryTable0 :: (Variant a1)
               => IListObject a0
               -> IO a1
getQueryTable0 =
  propertyGet "QueryTable"
              []
              outVariant

getRange10 :: IListObject a0
           -> IO (Range ())
getRange10 =
  propertyGet "Range"
              []
              outIUnknown

getShowAutoFilter :: IListObject a0
                  -> IO Bool
getShowAutoFilter =
  propertyGet "ShowAutoFilter"
              []
              outBool

setShowAutoFilter :: Bool
                  -> IListObject a0
                  -> IO ()
setShowAutoFilter rHS =
  propertySet "ShowAutoFilter"
              [inBool rHS]

getShowTotals :: IListObject a0
              -> IO Bool
getShowTotals =
  propertyGet "ShowTotals"
              []
              outBool

setShowTotals :: Bool
              -> IListObject a0
              -> IO ()
setShowTotals rHS =
  propertySet "ShowTotals"
              [inBool rHS]

getSourceType1 :: IListObject a0
               -> IO XlListObjectSourceType
getSourceType1 =
  propertyGet "SourceType"
              []
              outEnum

getTotalsRowRange :: IListObject a0
                  -> IO (Range ())
getTotalsRowRange =
  propertyGet "TotalsRowRange"
              []
              outIUnknown

getSharePointURL :: IListObject a0
                 -> IO String
getSharePointURL =
  propertyGet "SharePointURL"
              []
              outString

getXmlMap :: IListObject a0
          -> IO (XmlMap ())
getXmlMap =
  propertyGet "XmlMap"
              []
              outIUnknown

getDisplayName :: IListObject a0
               -> IO String
getDisplayName =
  propertyGet "DisplayName"
              []
              outString

setDisplayName :: String
               -> IListObject a0
               -> IO ()
setDisplayName rHS =
  propertySet "DisplayName"
              [inString rHS]

getShowHeaders :: IListObject a0
               -> IO Bool
getShowHeaders =
  propertyGet "ShowHeaders"
              []
              outBool

setShowHeaders :: Bool
               -> IListObject a0
               -> IO ()
setShowHeaders rHS =
  propertySet "ShowHeaders"
              [inBool rHS]

getAutoFilter1 :: IListObject a0
               -> IO (AutoFilter ())
getAutoFilter1 =
  propertyGet "AutoFilter"
              []
              outIUnknown

getTableStyle0 :: (Variant a1)
               => IListObject a0
               -> IO a1
getTableStyle0 =
  propertyGet "TableStyle"
              []
              outVariant

setTableStyle0 :: a1
               -> IListObject a0
               -> IO ()
setTableStyle0 rHS =
  propertySet "TableStyle"
              [inVariant rHS]

getShowTableStyleFirstColumn :: IListObject a0
                             -> IO Bool
getShowTableStyleFirstColumn =
  propertyGet "ShowTableStyleFirstColumn"
              []
              outBool

setShowTableStyleFirstColumn :: Bool
                             -> IListObject a0
                             -> IO ()
setShowTableStyleFirstColumn rHS =
  propertySet "ShowTableStyleFirstColumn"
              [inBool rHS]

getShowTableStyleLastColumn0 :: IListObject a0
                             -> IO Bool
getShowTableStyleLastColumn0 =
  propertyGet "ShowTableStyleLastColumn"
              []
              outBool

setShowTableStyleLastColumn0 :: Bool
                             -> IListObject a0
                             -> IO ()
setShowTableStyleLastColumn0 rHS =
  propertySet "ShowTableStyleLastColumn"
              [inBool rHS]

getShowTableStyleRowStripes0 :: IListObject a0
                             -> IO Bool
getShowTableStyleRowStripes0 =
  propertyGet "ShowTableStyleRowStripes"
              []
              outBool

setShowTableStyleRowStripes0 :: Bool
                             -> IListObject a0
                             -> IO ()
setShowTableStyleRowStripes0 rHS =
  propertySet "ShowTableStyleRowStripes"
              [inBool rHS]

getShowTableStyleColumnStripes0 :: IListObject a0
                                -> IO Bool
getShowTableStyleColumnStripes0 =
  propertyGet "ShowTableStyleColumnStripes"
              []
              outBool

setShowTableStyleColumnStripes0 :: Bool
                                -> IListObject a0
                                -> IO ()
setShowTableStyleColumnStripes0 rHS =
  propertySet "ShowTableStyleColumnStripes"
              [inBool rHS]

getSort3 :: IListObject a0
         -> IO (Sort ())
getSort3 =
  propertyGet "Sort"
              []
              outIUnknown

getComment2 :: IListObject a0
            -> IO String
getComment2 =
  propertyGet "Comment"
              []
              outString

setComment1 :: String
            -> IListObject a0
            -> IO ()
setComment1 rHS =
  propertySet "Comment"
              [inString rHS]

exportToVisio :: IListObject a0
              -> IO ()
exportToVisio =
  method0 "ExportToVisio"
          []

-- --------------------------------------------------
-- 
-- interface IListColumns
-- 
-- --------------------------------------------------
data IListColumns_ a = IListColumns__ 
type IListColumns a = IDispatch (IListColumns_ a)
iidIListColumns :: IID (IListColumns ())
iidIListColumns = mkIID "{00024472-0001-0000-C000-000000000046}"

getApplication212 :: (Variant a1)
                  => IListColumns a0
                  -> IO a1
getApplication212 =
  propertyGet "Application"
              []
              outVariant

getCreator212 :: IListColumns a0
              -> IO XlCreator
getCreator212 =
  propertyGet "Creator"
              []
              outEnum

getParent227 :: IListColumns a0
             -> IO (IDispatch ())
getParent227 =
  propertyGet "Parent"
              []
              outIDispatch

add63 :: (Variant a1)
      => a1
      -> IListColumns a0
      -> IO (ListColumn ())
add63 position =
  function1 "Add"
            [inVariant position]
            outIUnknown

getDefault79 :: a1
             -> IListColumns a0
             -> IO (ListColumn ())
getDefault79 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum45 :: IListColumns a0
             -> IO (IUnknown ())
getNewEnum45 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem37 :: a1
          -> IListColumns a0
          -> IO (ListColumn ())
getItem37 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount90 :: IListColumns a0
           -> IO Int32
getCount90 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IListColumn
-- 
-- --------------------------------------------------
data IListColumn_ a = IListColumn__ 
type IListColumn a = IDispatch (IListColumn_ a)
iidIListColumn :: IID (IListColumn ())
iidIListColumn = mkIID "{00024473-0001-0000-C000-000000000046}"

getApplication213 :: (Variant a1)
                  => IListColumn a0
                  -> IO a1
getApplication213 =
  propertyGet "Application"
              []
              outVariant

getCreator213 :: IListColumn a0
              -> IO XlCreator
getCreator213 =
  propertyGet "Creator"
              []
              outEnum

getParent228 :: IListColumn a0
             -> IO (IDispatch ())
getParent228 =
  propertyGet "Parent"
              []
              outIDispatch

delete113 :: IListColumn a0
          -> IO ()
delete113 =
  method0 "Delete"
          []

getDefault80 :: IListColumn a0
             -> IO String
getDefault80 =
  propertyGet "_Default"
              []
              outString

getListDataFormat :: IListColumn a0
                  -> IO (ListDataFormat ())
getListDataFormat =
  propertyGet "ListDataFormat"
              []
              outIUnknown

getIndex36 :: IListColumn a0
           -> IO Int32
getIndex36 =
  propertyGet "Index"
              []
              outInt32

getName72 :: IListColumn a0
          -> IO String
getName72 =
  propertyGet "Name"
              []
              outString

setName40 :: String
          -> IListColumn a0
          -> IO ()
setName40 rHS =
  propertySet "Name"
              [inString rHS]

getRange11 :: IListColumn a0
           -> IO (Range ())
getRange11 =
  propertyGet "Range"
              []
              outIUnknown

getTotalsCalculation :: IListColumn a0
                     -> IO XlTotalsCalculation
getTotalsCalculation =
  propertyGet "TotalsCalculation"
              []
              outEnum

setTotalsCalculation :: XlTotalsCalculation
                     -> IListColumn a0
                     -> IO ()
setTotalsCalculation rHS =
  propertySet "TotalsCalculation"
              [inEnum rHS]

getXPath0 :: IListColumn a0
          -> IO (XPath ())
getXPath0 =
  propertyGet "XPath"
              []
              outIUnknown

getSharePointFormula :: IListColumn a0
                     -> IO String
getSharePointFormula =
  propertyGet "SharePointFormula"
              []
              outString

getDataBodyRange1 :: IListColumn a0
                  -> IO (Range ())
getDataBodyRange1 =
  propertyGet "DataBodyRange"
              []
              outIUnknown

getTotal :: IListColumn a0
         -> IO (Range ())
getTotal =
  propertyGet "Total"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IListRows
-- 
-- --------------------------------------------------
data IListRows_ a = IListRows__ 
type IListRows a = IDispatch (IListRows_ a)
iidIListRows :: IID (IListRows ())
iidIListRows = mkIID "{00024474-0001-0000-C000-000000000046}"

getApplication214 :: (Variant a1)
                  => IListRows a0
                  -> IO a1
getApplication214 =
  propertyGet "Application"
              []
              outVariant

getCreator214 :: IListRows a0
              -> IO XlCreator
getCreator214 =
  propertyGet "Creator"
              []
              outEnum

getParent229 :: IListRows a0
             -> IO (IDispatch ())
getParent229 =
  propertyGet "Parent"
              []
              outIDispatch

add64 :: (Variant a1)
      => a1
      -> IListRows a0
      -> IO (ListRow ())
add64 position =
  function1 "_Add"
            [inVariant position]
            outIUnknown

getDefault81 :: a1
             -> IListRows a0
             -> IO (ListRow ())
getDefault81 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum46 :: IListRows a0
             -> IO (IUnknown ())
getNewEnum46 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem38 :: a1
          -> IListRows a0
          -> IO (ListRow ())
getItem38 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount91 :: IListRows a0
           -> IO Int32
getCount91 =
  propertyGet "Count"
              []
              outInt32

add65 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> IListRows a0
      -> IO (ListRow ())
add65 position alwaysInsert =
  function1 "Add"
            [ inVariant position
            , inVariant alwaysInsert
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IListRow
-- 
-- --------------------------------------------------
data IListRow_ a = IListRow__ 
type IListRow a = IDispatch (IListRow_ a)
iidIListRow :: IID (IListRow ())
iidIListRow = mkIID "{00024475-0001-0000-C000-000000000046}"

getApplication215 :: (Variant a1)
                  => IListRow a0
                  -> IO a1
getApplication215 =
  propertyGet "Application"
              []
              outVariant

getCreator215 :: IListRow a0
              -> IO XlCreator
getCreator215 =
  propertyGet "Creator"
              []
              outEnum

getParent230 :: IListRow a0
             -> IO (IDispatch ())
getParent230 =
  propertyGet "Parent"
              []
              outIDispatch

delete114 :: IListRow a0
          -> IO ()
delete114 =
  method0 "Delete"
          []

getIndex37 :: IListRow a0
           -> IO Int32
getIndex37 =
  propertyGet "Index"
              []
              outInt32

getInvalidData :: IListRow a0
               -> IO Bool
getInvalidData =
  propertyGet "InvalidData"
              []
              outBool

getRange12 :: IListRow a0
           -> IO (Range ())
getRange12 =
  propertyGet "Range"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IXmlNamespace
-- 
-- --------------------------------------------------
data IXmlNamespace_ a = IXmlNamespace__ 
type IXmlNamespace a = IDispatch (IXmlNamespace_ a)
iidIXmlNamespace :: IID (IXmlNamespace ())
iidIXmlNamespace = mkIID "{00024476-0001-0000-C000-000000000046}"

getApplication216 :: (Variant a1)
                  => IXmlNamespace a0
                  -> IO a1
getApplication216 =
  propertyGet "Application"
              []
              outVariant

getCreator216 :: IXmlNamespace a0
              -> IO XlCreator
getCreator216 =
  propertyGet "Creator"
              []
              outEnum

getParent231 :: IXmlNamespace a0
             -> IO (IDispatch ())
getParent231 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault82 :: IXmlNamespace a0
             -> IO String
getDefault82 =
  propertyGet "_Default"
              []
              outString

getUri :: IXmlNamespace a0
       -> IO String
getUri =
  propertyGet "Uri"
              []
              outString

getPrefix :: IXmlNamespace a0
          -> IO String
getPrefix =
  propertyGet "Prefix"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IXmlNamespaces
-- 
-- --------------------------------------------------
data IXmlNamespaces_ a = IXmlNamespaces__ 
type IXmlNamespaces a = IDispatch (IXmlNamespaces_ a)
iidIXmlNamespaces :: IID (IXmlNamespaces ())
iidIXmlNamespaces = mkIID "{00024477-0001-0000-C000-000000000046}"

getApplication217 :: (Variant a1)
                  => IXmlNamespaces a0
                  -> IO a1
getApplication217 =
  propertyGet "Application"
              []
              outVariant

getCreator217 :: IXmlNamespaces a0
              -> IO XlCreator
getCreator217 =
  propertyGet "Creator"
              []
              outEnum

getParent232 :: IXmlNamespaces a0
             -> IO (IDispatch ())
getParent232 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault83 :: a1
             -> IXmlNamespaces a0
             -> IO (XmlNamespace ())
getDefault83 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem39 :: a1
          -> IXmlNamespaces a0
          -> IO (XmlNamespace ())
getItem39 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount92 :: IXmlNamespaces a0
           -> IO Int32
getCount92 =
  propertyGet "Count"
              []
              outInt32

getValue28 :: IXmlNamespaces a0
           -> IO String
getValue28 =
  propertyGet "Value"
              []
              outString

getNewEnum47 :: IXmlNamespaces a0
             -> IO (IUnknown ())
getNewEnum47 =
  propertyGet "_NewEnum"
              []
              outIUnknown

installManifest :: (Variant a1)
                => String
                -> a1
                -> IXmlNamespaces a0
                -> IO ()
installManifest path installForAllUsers =
  method0 "InstallManifest"
          [ inString path
          , inVariant installForAllUsers
          ]

-- --------------------------------------------------
-- 
-- interface IXmlDataBinding
-- 
-- --------------------------------------------------
data IXmlDataBinding_ a = IXmlDataBinding__ 
type IXmlDataBinding a = IDispatch (IXmlDataBinding_ a)
iidIXmlDataBinding :: IID (IXmlDataBinding ())
iidIXmlDataBinding = mkIID "{00024478-0001-0000-C000-000000000046}"

getApplication218 :: (Variant a1)
                  => IXmlDataBinding a0
                  -> IO a1
getApplication218 =
  propertyGet "Application"
              []
              outVariant

getCreator218 :: IXmlDataBinding a0
              -> IO XlCreator
getCreator218 =
  propertyGet "Creator"
              []
              outEnum

getParent233 :: IXmlDataBinding a0
             -> IO (IDispatch ())
getParent233 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault84 :: IXmlDataBinding a0
             -> IO String
getDefault84 =
  propertyGet "_Default"
              []
              outString

refresh3 :: IXmlDataBinding a0
         -> IO XlXmlImportResult
refresh3 =
  function1 "Refresh"
            []
            outEnum

loadSettings :: String
             -> IXmlDataBinding a0
             -> IO ()
loadSettings url =
  method0 "LoadSettings"
          [inString url]

clearSettings :: IXmlDataBinding a0
              -> IO ()
clearSettings =
  method0 "ClearSettings"
          []

getSourceUrl :: IXmlDataBinding a0
             -> IO String
getSourceUrl =
  propertyGet "SourceUrl"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IXmlSchema
-- 
-- --------------------------------------------------
data IXmlSchema_ a = IXmlSchema__ 
type IXmlSchema a = IDispatch (IXmlSchema_ a)
iidIXmlSchema :: IID (IXmlSchema ())
iidIXmlSchema = mkIID "{00024479-0001-0000-C000-000000000046}"

getApplication219 :: (Variant a1)
                  => IXmlSchema a0
                  -> IO a1
getApplication219 =
  propertyGet "Application"
              []
              outVariant

getCreator219 :: IXmlSchema a0
              -> IO XlCreator
getCreator219 =
  propertyGet "Creator"
              []
              outEnum

getParent234 :: IXmlSchema a0
             -> IO (IDispatch ())
getParent234 =
  propertyGet "Parent"
              []
              outIDispatch

getNamespace :: IXmlSchema a0
             -> IO (XmlNamespace ())
getNamespace =
  propertyGet "Namespace"
              []
              outIUnknown

getXML0 :: IXmlSchema a0
        -> IO String
getXML0 =
  propertyGet "XML"
              []
              outString

getName73 :: IXmlSchema a0
          -> IO String
getName73 =
  propertyGet "Name"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IXmlSchemas
-- 
-- --------------------------------------------------
data IXmlSchemas_ a = IXmlSchemas__ 
type IXmlSchemas a = IDispatch (IXmlSchemas_ a)
iidIXmlSchemas :: IID (IXmlSchemas ())
iidIXmlSchemas = mkIID "{0002447A-0001-0000-C000-000000000046}"

getApplication220 :: (Variant a1)
                  => IXmlSchemas a0
                  -> IO a1
getApplication220 =
  propertyGet "Application"
              []
              outVariant

getCreator220 :: IXmlSchemas a0
              -> IO XlCreator
getCreator220 =
  propertyGet "Creator"
              []
              outEnum

getParent235 :: IXmlSchemas a0
             -> IO (IDispatch ())
getParent235 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault85 :: a1
             -> IXmlSchemas a0
             -> IO (XmlSchema ())
getDefault85 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem40 :: a1
          -> IXmlSchemas a0
          -> IO (XmlSchema ())
getItem40 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount93 :: IXmlSchemas a0
           -> IO Int32
getCount93 =
  propertyGet "Count"
              []
              outInt32

getNewEnum48 :: IXmlSchemas a0
             -> IO (IUnknown ())
getNewEnum48 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IXmlMap
-- 
-- --------------------------------------------------
data IXmlMap_ a = IXmlMap__ 
type IXmlMap a = IDispatch (IXmlMap_ a)
iidIXmlMap :: IID (IXmlMap ())
iidIXmlMap = mkIID "{0002447B-0001-0000-C000-000000000046}"

getApplication221 :: (Variant a1)
                  => IXmlMap a0
                  -> IO a1
getApplication221 =
  propertyGet "Application"
              []
              outVariant

getCreator221 :: IXmlMap a0
              -> IO XlCreator
getCreator221 =
  propertyGet "Creator"
              []
              outEnum

getParent236 :: IXmlMap a0
             -> IO (IDispatch ())
getParent236 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault86 :: IXmlMap a0
             -> IO String
getDefault86 =
  propertyGet "_Default"
              []
              outString

getName74 :: IXmlMap a0
          -> IO String
getName74 =
  propertyGet "Name"
              []
              outString

setName41 :: String
          -> IXmlMap a0
          -> IO ()
setName41 rHS =
  propertySet "Name"
              [inString rHS]

getIsExportable :: IXmlMap a0
                -> IO Bool
getIsExportable =
  propertyGet "IsExportable"
              []
              outBool

getShowImportExportValidationErrors :: IXmlMap a0
                                    -> IO Bool
getShowImportExportValidationErrors =
  propertyGet "ShowImportExportValidationErrors"
              []
              outBool

setShowImportExportValidationErrors :: Bool
                                    -> IXmlMap a0
                                    -> IO ()
setShowImportExportValidationErrors rHS =
  propertySet "ShowImportExportValidationErrors"
              [inBool rHS]

getSaveDataSourceDefinition :: IXmlMap a0
                            -> IO Bool
getSaveDataSourceDefinition =
  propertyGet "SaveDataSourceDefinition"
              []
              outBool

setSaveDataSourceDefinition :: Bool
                            -> IXmlMap a0
                            -> IO ()
setSaveDataSourceDefinition rHS =
  propertySet "SaveDataSourceDefinition"
              [inBool rHS]

getAdjustColumnWidth0 :: IXmlMap a0
                      -> IO Bool
getAdjustColumnWidth0 =
  propertyGet "AdjustColumnWidth"
              []
              outBool

setAdjustColumnWidth0 :: Bool
                      -> IXmlMap a0
                      -> IO ()
setAdjustColumnWidth0 rHS =
  propertySet "AdjustColumnWidth"
              [inBool rHS]

getPreserveColumnFilter :: IXmlMap a0
                        -> IO Bool
getPreserveColumnFilter =
  propertyGet "PreserveColumnFilter"
              []
              outBool

setPreserveColumnFilter :: Bool
                        -> IXmlMap a0
                        -> IO ()
setPreserveColumnFilter rHS =
  propertySet "PreserveColumnFilter"
              [inBool rHS]

getPreserveNumberFormatting :: IXmlMap a0
                            -> IO Bool
getPreserveNumberFormatting =
  propertyGet "PreserveNumberFormatting"
              []
              outBool

setPreserveNumberFormatting :: Bool
                            -> IXmlMap a0
                            -> IO ()
setPreserveNumberFormatting rHS =
  propertySet "PreserveNumberFormatting"
              [inBool rHS]

getAppendOnImport :: IXmlMap a0
                  -> IO Bool
getAppendOnImport =
  propertyGet "AppendOnImport"
              []
              outBool

setAppendOnImport :: Bool
                  -> IXmlMap a0
                  -> IO ()
setAppendOnImport rHS =
  propertySet "AppendOnImport"
              [inBool rHS]

getRootElementName :: IXmlMap a0
                   -> IO String
getRootElementName =
  propertyGet "RootElementName"
              []
              outString

getRootElementNamespace :: IXmlMap a0
                        -> IO (XmlNamespace ())
getRootElementNamespace =
  propertyGet "RootElementNamespace"
              []
              outIUnknown

getSchemas :: IXmlMap a0
           -> IO (XmlSchemas ())
getSchemas =
  propertyGet "Schemas"
              []
              outIUnknown

getDataBinding :: IXmlMap a0
               -> IO (XmlDataBinding ())
getDataBinding =
  propertyGet "DataBinding"
              []
              outIUnknown

delete115 :: IXmlMap a0
          -> IO ()
delete115 =
  method0 "Delete"
          []

import1 :: (Variant a1)
        => String
        -> a1
        -> IXmlMap a0
        -> IO XlXmlImportResult
import1 url overwrite =
  function1 "Import"
            [ inString url
            , inVariant overwrite
            ]
            outEnum

importXml :: (Variant a1)
          => String
          -> a1
          -> IXmlMap a0
          -> IO XlXmlImportResult
importXml xmlData overwrite =
  function1 "ImportXml"
            [ inString xmlData
            , inVariant overwrite
            ]
            outEnum

export0 :: (Variant a1)
        => String
        -> a1
        -> IXmlMap a0
        -> IO XlXmlExportResult
export0 url overwrite =
  function1 "Export"
            [ inString url
            , inVariant overwrite
            ]
            outEnum

exportXml :: IXmlMap a0
          -> IO (String, XlXmlExportResult)
exportXml =
  function2 "ExportXml"
            []
            outString
            outEnum

getWorkbookConnection1 :: IXmlMap a0
                       -> IO (WorkbookConnection ())
getWorkbookConnection1 =
  propertyGet "WorkbookConnection"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IXmlMaps
-- 
-- --------------------------------------------------
data IXmlMaps_ a = IXmlMaps__ 
type IXmlMaps a = IDispatch (IXmlMaps_ a)
iidIXmlMaps :: IID (IXmlMaps ())
iidIXmlMaps = mkIID "{0002447C-0001-0000-C000-000000000046}"

getApplication222 :: (Variant a1)
                  => IXmlMaps a0
                  -> IO a1
getApplication222 =
  propertyGet "Application"
              []
              outVariant

getCreator222 :: IXmlMaps a0
              -> IO XlCreator
getCreator222 =
  propertyGet "Creator"
              []
              outEnum

getParent237 :: IXmlMaps a0
             -> IO (IDispatch ())
getParent237 =
  propertyGet "Parent"
              []
              outIDispatch

add66 :: (Variant a1)
      => String
      -> a1
      -> IXmlMaps a0
      -> IO (XmlMap ())
add66 schema rootElementName =
  function1 "Add"
            [ inString schema
            , inVariant rootElementName
            ]
            outIUnknown

getDefault87 :: a1
             -> IXmlMaps a0
             -> IO (XmlMap ())
getDefault87 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getItem41 :: a1
          -> IXmlMaps a0
          -> IO (XmlMap ())
getItem41 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount94 :: IXmlMaps a0
           -> IO Int32
getCount94 =
  propertyGet "Count"
              []
              outInt32

getNewEnum49 :: IXmlMaps a0
             -> IO (IUnknown ())
getNewEnum49 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IListDataFormat
-- 
-- --------------------------------------------------
data IListDataFormat_ a = IListDataFormat__ 
type IListDataFormat a = IDispatch (IListDataFormat_ a)
iidIListDataFormat :: IID (IListDataFormat ())
iidIListDataFormat = mkIID "{0002447D-0001-0000-C000-000000000046}"

getApplication223 :: (Variant a1)
                  => IListDataFormat a0
                  -> IO a1
getApplication223 =
  propertyGet "Application"
              []
              outVariant

getCreator223 :: IListDataFormat a0
              -> IO XlCreator
getCreator223 =
  propertyGet "Creator"
              []
              outEnum

getParent238 :: IListDataFormat a0
             -> IO (IDispatch ())
getParent238 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault88 :: IListDataFormat a0
             -> IO XlListDataType
getDefault88 =
  propertyGet "_Default"
              []
              outEnum

getChoices :: (Variant a1)
           => IListDataFormat a0
           -> IO a1
getChoices =
  propertyGet "Choices"
              []
              outVariant

getDecimalPlaces :: IListDataFormat a0
                 -> IO Int32
getDecimalPlaces =
  propertyGet "DecimalPlaces"
              []
              outInt32

getDefaultValue :: (Variant a1)
                => IListDataFormat a0
                -> IO a1
getDefaultValue =
  propertyGet "DefaultValue"
              []
              outVariant

getIsPercent :: IListDataFormat a0
             -> IO Bool
getIsPercent =
  propertyGet "IsPercent"
              []
              outBool

getLcid :: IListDataFormat a0
        -> IO Int32
getLcid =
  propertyGet "lcid"
              []
              outInt32

getMaxCharacters :: IListDataFormat a0
                 -> IO Int32
getMaxCharacters =
  propertyGet "MaxCharacters"
              []
              outInt32

getMaxNumber :: (Variant a1)
             => IListDataFormat a0
             -> IO a1
getMaxNumber =
  propertyGet "MaxNumber"
              []
              outVariant

getMinNumber :: (Variant a1)
             => IListDataFormat a0
             -> IO a1
getMinNumber =
  propertyGet "MinNumber"
              []
              outVariant

getRequired :: IListDataFormat a0
            -> IO Bool
getRequired =
  propertyGet "Required"
              []
              outBool

getType26 :: IListDataFormat a0
          -> IO XlListDataType
getType26 =
  propertyGet "Type"
              []
              outEnum

getReadOnly0 :: IListDataFormat a0
             -> IO Bool
getReadOnly0 =
  propertyGet "ReadOnly"
              []
              outBool

getAllowFillIn :: IListDataFormat a0
               -> IO Bool
getAllowFillIn =
  propertyGet "AllowFillIn"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IXPath
-- 
-- --------------------------------------------------
data IXPath_ a = IXPath__ 
type IXPath a = IDispatch (IXPath_ a)
iidIXPath :: IID (IXPath ())
iidIXPath = mkIID "{0002447E-0001-0000-C000-000000000046}"

getApplication224 :: (Variant a1)
                  => IXPath a0
                  -> IO a1
getApplication224 =
  propertyGet "Application"
              []
              outVariant

getCreator224 :: IXPath a0
              -> IO XlCreator
getCreator224 =
  propertyGet "Creator"
              []
              outEnum

getParent239 :: IXPath a0
             -> IO (IDispatch ())
getParent239 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault89 :: IXPath a0
             -> IO String
getDefault89 =
  propertyGet "_Default"
              []
              outString

getValue29 :: IXPath a0
           -> IO String
getValue29 =
  propertyGet "Value"
              []
              outString

getMap :: IXPath a0
       -> IO (XmlMap ())
getMap =
  propertyGet "Map"
              []
              outIUnknown

setValue22 :: (Variant a2, Variant a3)
           => XmlMap a1
           -> String
           -> a2
           -> a3
           -> IXPath a0
           -> IO ()
setValue22 map xPath selectionNamespace repeating =
  method0 "SetValue"
          [ inIUnknown map
          , inString xPath
          , inVariant selectionNamespace
          , inVariant repeating
          ]

clear3 :: IXPath a0
       -> IO ()
clear3 =
  method0 "Clear"
          []

getRepeating :: IXPath a0
             -> IO Bool
getRepeating =
  propertyGet "Repeating"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IPivotLineCells
-- 
-- --------------------------------------------------
data IPivotLineCells_ a = IPivotLineCells__ 
type IPivotLineCells a = IDispatch (IPivotLineCells_ a)
iidIPivotLineCells :: IID (IPivotLineCells ())
iidIPivotLineCells = mkIID "{0002447F-0001-0000-C000-000000000046}"

getApplication225 :: (Variant a1)
                  => IPivotLineCells a0
                  -> IO a1
getApplication225 =
  propertyGet "Application"
              []
              outVariant

getCreator225 :: IPivotLineCells a0
              -> IO XlCreator
getCreator225 =
  propertyGet "Creator"
              []
              outEnum

getParent240 :: IPivotLineCells a0
             -> IO (IDispatch ())
getParent240 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault90 :: a1
             -> IPivotLineCells a0
             -> IO (PivotCell ())
getDefault90 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum50 :: IPivotLineCells a0
             -> IO (IUnknown ())
getNewEnum50 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem42 :: a1
          -> IPivotLineCells a0
          -> IO (PivotCell ())
getItem42 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount95 :: IPivotLineCells a0
           -> IO Int32
getCount95 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IPivotLine
-- 
-- --------------------------------------------------
data IPivotLine_ a = IPivotLine__ 
type IPivotLine a = IDispatch (IPivotLine_ a)
iidIPivotLine :: IID (IPivotLine ())
iidIPivotLine = mkIID "{00024480-0001-0000-C000-000000000046}"

getApplication226 :: (Variant a1)
                  => IPivotLine a0
                  -> IO a1
getApplication226 =
  propertyGet "Application"
              []
              outVariant

getCreator226 :: IPivotLine a0
              -> IO XlCreator
getCreator226 =
  propertyGet "Creator"
              []
              outEnum

getParent241 :: IPivotLine a0
             -> IO (IDispatch ())
getParent241 =
  propertyGet "Parent"
              []
              outIDispatch

getLineType :: IPivotLine a0
            -> IO XlPivotLineType
getLineType =
  propertyGet "LineType"
              []
              outEnum

getPosition10 :: IPivotLine a0
              -> IO Int32
getPosition10 =
  propertyGet "Position"
              []
              outInt32

getPivotLineCells :: IPivotLine a0
                  -> IO (PivotLineCells ())
getPivotLineCells =
  propertyGet "PivotLineCells"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotLines
-- 
-- --------------------------------------------------
data IPivotLines_ a = IPivotLines__ 
type IPivotLines a = IDispatch (IPivotLines_ a)
iidIPivotLines :: IID (IPivotLines ())
iidIPivotLines = mkIID "{00024481-0001-0000-C000-000000000046}"

getApplication227 :: (Variant a1)
                  => IPivotLines a0
                  -> IO a1
getApplication227 =
  propertyGet "Application"
              []
              outVariant

getCreator227 :: IPivotLines a0
              -> IO XlCreator
getCreator227 =
  propertyGet "Creator"
              []
              outEnum

getParent242 :: IPivotLines a0
             -> IO (IDispatch ())
getParent242 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault91 :: a1
             -> IPivotLines a0
             -> IO (PivotLine ())
getDefault91 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum51 :: IPivotLines a0
             -> IO (IUnknown ())
getNewEnum51 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem43 :: a1
          -> IPivotLines a0
          -> IO (PivotLine ())
getItem43 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount96 :: IPivotLines a0
           -> IO Int32
getCount96 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IPivotAxis
-- 
-- --------------------------------------------------
data IPivotAxis_ a = IPivotAxis__ 
type IPivotAxis a = IDispatch (IPivotAxis_ a)
iidIPivotAxis :: IID (IPivotAxis ())
iidIPivotAxis = mkIID "{00024482-0001-0000-C000-000000000046}"

getApplication228 :: (Variant a1)
                  => IPivotAxis a0
                  -> IO a1
getApplication228 =
  propertyGet "Application"
              []
              outVariant

getCreator228 :: IPivotAxis a0
              -> IO XlCreator
getCreator228 =
  propertyGet "Creator"
              []
              outEnum

getParent243 :: IPivotAxis a0
             -> IO (IDispatch ())
getParent243 =
  propertyGet "Parent"
              []
              outIDispatch

getPivotLines :: IPivotAxis a0
              -> IO (PivotLines ())
getPivotLines =
  propertyGet "PivotLines"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPivotFilter
-- 
-- --------------------------------------------------
data IPivotFilter_ a = IPivotFilter__ 
type IPivotFilter a = IDispatch (IPivotFilter_ a)
iidIPivotFilter :: IID (IPivotFilter ())
iidIPivotFilter = mkIID "{00024483-0001-0000-C000-000000000046}"

getApplication229 :: (Variant a1)
                  => IPivotFilter a0
                  -> IO a1
getApplication229 =
  propertyGet "Application"
              []
              outVariant

getCreator229 :: IPivotFilter a0
              -> IO XlCreator
getCreator229 =
  propertyGet "Creator"
              []
              outEnum

getParent244 :: IPivotFilter a0
             -> IO (IDispatch ())
getParent244 =
  propertyGet "Parent"
              []
              outIDispatch

getOrder1 :: IPivotFilter a0
          -> IO Int32
getOrder1 =
  propertyGet "Order"
              []
              outInt32

setOrder1 :: Int32
          -> IPivotFilter a0
          -> IO ()
setOrder1 rHS =
  propertySet "Order"
              [inInt32 rHS]

getFilterType :: IPivotFilter a0
              -> IO XlPivotFilterType
getFilterType =
  propertyGet "FilterType"
              []
              outEnum

getName75 :: IPivotFilter a0
          -> IO String
getName75 =
  propertyGet "Name"
              []
              outString

getDescription :: IPivotFilter a0
               -> IO String
getDescription =
  propertyGet "Description"
              []
              outString

delete116 :: IPivotFilter a0
          -> IO ()
delete116 =
  method0 "Delete"
          []

getActive0 :: IPivotFilter a0
           -> IO Bool
getActive0 =
  propertyGet "Active"
              []
              outBool

getPivotField1 :: IPivotFilter a0
               -> IO (PivotField ())
getPivotField1 =
  propertyGet "PivotField"
              []
              outIUnknown

getDataField0 :: IPivotFilter a0
              -> IO (PivotField ())
getDataField0 =
  propertyGet "DataField"
              []
              outIUnknown

getDataCubeField :: IPivotFilter a0
                 -> IO (CubeField ())
getDataCubeField =
  propertyGet "DataCubeField"
              []
              outIDispatch

getValue110 :: (Variant a1)
            => IPivotFilter a0
            -> IO a1
getValue110 =
  propertyGet "Value1"
              []
              outVariant

getValue210 :: (Variant a1)
            => IPivotFilter a0
            -> IO a1
getValue210 =
  propertyGet "Value2"
              []
              outVariant

getMemberPropertyField :: IPivotFilter a0
                       -> IO (PivotField ())
getMemberPropertyField =
  propertyGet "MemberPropertyField"
              []
              outIUnknown

getIsMemberPropertyFilter :: IPivotFilter a0
                          -> IO Bool
getIsMemberPropertyFilter =
  propertyGet "IsMemberPropertyFilter"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IPivotFilters
-- 
-- --------------------------------------------------
data IPivotFilters_ a = IPivotFilters__ 
type IPivotFilters a = IDispatch (IPivotFilters_ a)
iidIPivotFilters :: IID (IPivotFilters ())
iidIPivotFilters = mkIID "{00024484-0001-0000-C000-000000000046}"

getApplication230 :: (Variant a1)
                  => IPivotFilters a0
                  -> IO a1
getApplication230 =
  propertyGet "Application"
              []
              outVariant

getCreator230 :: IPivotFilters a0
              -> IO XlCreator
getCreator230 =
  propertyGet "Creator"
              []
              outEnum

getParent245 :: IPivotFilters a0
             -> IO (IDispatch ())
getParent245 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault92 :: a1
             -> IPivotFilters a0
             -> IO (PivotFilter ())
getDefault92 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum52 :: IPivotFilters a0
             -> IO (IUnknown ())
getNewEnum52 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem44 :: a1
          -> IPivotFilters a0
          -> IO (PivotFilter ())
getItem44 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount97 :: IPivotFilters a0
           -> IO Int32
getCount97 =
  propertyGet "Count"
              []
              outInt32

add67 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
      => XlPivotFilterType
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> IPivotFilters a0
      -> IO (PivotFilter ())
add67 type0 dataField value1 value2 order name description memberPropertyField =
  function1 "Add"
            [ inEnum type0
            , inVariant dataField
            , inVariant value1
            , inVariant value2
            , inVariant order
            , inVariant name
            , inVariant description
            , inVariant memberPropertyField
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IWorkbookConnection
-- 
-- --------------------------------------------------
data IWorkbookConnection_ a = IWorkbookConnection__ 
type IWorkbookConnection a = IDispatch (IWorkbookConnection_ a)
iidIWorkbookConnection :: IID (IWorkbookConnection ())
iidIWorkbookConnection =
  mkIID "{00024485-0001-0000-C000-000000000046}"

getApplication231 :: (Variant a1)
                  => IWorkbookConnection a0
                  -> IO a1
getApplication231 =
  propertyGet "Application"
              []
              outVariant

getCreator231 :: IWorkbookConnection a0
              -> IO XlCreator
getCreator231 =
  propertyGet "Creator"
              []
              outEnum

getParent246 :: IWorkbookConnection a0
             -> IO (IDispatch ())
getParent246 =
  propertyGet "Parent"
              []
              outIDispatch

getName76 :: IWorkbookConnection a0
          -> IO String
getName76 =
  propertyGet "Name"
              []
              outString

setName42 :: String
          -> IWorkbookConnection a0
          -> IO ()
setName42 rHS =
  propertySet "Name"
              [inString rHS]

getDescription0 :: IWorkbookConnection a0
                -> IO String
getDescription0 =
  propertyGet "Description"
              []
              outString

setDescription :: String
               -> IWorkbookConnection a0
               -> IO ()
setDescription rHS =
  propertySet "Description"
              [inString rHS]

getDefault93 :: IWorkbookConnection a0
             -> IO String
getDefault93 =
  propertyGet "_Default"
              []
              outString

setDefault20 :: String
             -> IWorkbookConnection a0
             -> IO ()
setDefault20 rHS =
  propertySet "_Default"
              [inString rHS]

getType27 :: IWorkbookConnection a0
          -> IO XlConnectionType
getType27 =
  propertyGet "Type"
              []
              outEnum

getOLEDBConnection :: IWorkbookConnection a0
                   -> IO (OLEDBConnection ())
getOLEDBConnection =
  propertyGet "OLEDBConnection"
              []
              outIUnknown

getODBCConnection :: IWorkbookConnection a0
                  -> IO (ODBCConnection ())
getODBCConnection =
  propertyGet "ODBCConnection"
              []
              outIUnknown

getRanges :: IWorkbookConnection a0
          -> IO (Ranges ())
getRanges =
  propertyGet "Ranges"
              []
              outIUnknown

delete117 :: IWorkbookConnection a0
          -> IO ()
delete117 =
  method0 "Delete"
          []

refresh4 :: IWorkbookConnection a0
         -> IO ()
refresh4 =
  method0 "Refresh"
          []

-- --------------------------------------------------
-- 
-- interface IConnections
-- 
-- --------------------------------------------------
data IConnections_ a = IConnections__ 
type IConnections a = IDispatch (IConnections_ a)
iidIConnections :: IID (IConnections ())
iidIConnections = mkIID "{00024486-0001-0000-C000-000000000046}"

getApplication232 :: (Variant a1)
                  => IConnections a0
                  -> IO a1
getApplication232 =
  propertyGet "Application"
              []
              outVariant

getCreator232 :: IConnections a0
              -> IO XlCreator
getCreator232 =
  propertyGet "Creator"
              []
              outEnum

getParent247 :: IConnections a0
             -> IO (IDispatch ())
getParent247 =
  propertyGet "Parent"
              []
              outIDispatch

getCount98 :: IConnections a0
           -> IO Int32
getCount98 =
  propertyGet "Count"
              []
              outInt32

addFromFile :: String
            -> IConnections a0
            -> IO (WorkbookConnection ())
addFromFile filename =
  function1 "AddFromFile"
            [inString filename]
            outIUnknown

add68 :: (Variant a3)
      => String
      -> String
      -> a1
      -> a2
      -> a3
      -> IConnections a0
      -> IO (WorkbookConnection ())
add68 name description connectionString commandText lCmdtype =
  function1 "Add"
            [ inString name
            , inString description
            , inVariant connectionString
            , inVariant commandText
            , inVariant lCmdtype
            ]
            outIUnknown

item50 :: a1
       -> IConnections a0
       -> IO (WorkbookConnection ())
item50 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault94 :: a1
             -> IConnections a0
             -> IO (WorkbookConnection ())
getDefault94 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum53 :: IConnections a0
             -> IO (IUnknown ())
getNewEnum53 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IWorksheetView
-- 
-- --------------------------------------------------
data IWorksheetView_ a = IWorksheetView__ 
type IWorksheetView a = IDispatch (IWorksheetView_ a)
iidIWorksheetView :: IID (IWorksheetView ())
iidIWorksheetView = mkIID "{00024487-0001-0000-C000-000000000046}"

getApplication233 :: (Variant a1)
                  => IWorksheetView a0
                  -> IO a1
getApplication233 =
  propertyGet "Application"
              []
              outVariant

getCreator233 :: IWorksheetView a0
              -> IO XlCreator
getCreator233 =
  propertyGet "Creator"
              []
              outEnum

getParent248 :: IWorksheetView a0
             -> IO (IDispatch ())
getParent248 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet0 :: IWorksheetView a0
          -> IO (IDispatch ())
getSheet0 =
  propertyGet "Sheet"
              []
              outIDispatch

getDisplayGridlines0 :: IWorksheetView a0
                     -> IO Bool
getDisplayGridlines0 =
  propertyGet "DisplayGridlines"
              []
              outBool

setDisplayGridlines0 :: Bool
                     -> IWorksheetView a0
                     -> IO ()
setDisplayGridlines0 rHS =
  propertySet "DisplayGridlines"
              [inBool rHS]

getDisplayFormulas0 :: IWorksheetView a0
                    -> IO Bool
getDisplayFormulas0 =
  propertyGet "DisplayFormulas"
              []
              outBool

setDisplayFormulas0 :: Bool
                    -> IWorksheetView a0
                    -> IO ()
setDisplayFormulas0 rHS =
  propertySet "DisplayFormulas"
              [inBool rHS]

getDisplayHeadings0 :: IWorksheetView a0
                    -> IO Bool
getDisplayHeadings0 =
  propertyGet "DisplayHeadings"
              []
              outBool

setDisplayHeadings0 :: Bool
                    -> IWorksheetView a0
                    -> IO ()
setDisplayHeadings0 rHS =
  propertySet "DisplayHeadings"
              [inBool rHS]

getDisplayOutline0 :: IWorksheetView a0
                   -> IO Bool
getDisplayOutline0 =
  propertyGet "DisplayOutline"
              []
              outBool

setDisplayOutline0 :: Bool
                   -> IWorksheetView a0
                   -> IO ()
setDisplayOutline0 rHS =
  propertySet "DisplayOutline"
              [inBool rHS]

getDisplayZeros0 :: IWorksheetView a0
                 -> IO Bool
getDisplayZeros0 =
  propertyGet "DisplayZeros"
              []
              outBool

setDisplayZeros0 :: Bool
                 -> IWorksheetView a0
                 -> IO ()
setDisplayZeros0 rHS =
  propertySet "DisplayZeros"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IChartView
-- 
-- --------------------------------------------------
data IChartView_ a = IChartView__ 
type IChartView a = IDispatch (IChartView_ a)
iidIChartView :: IID (IChartView ())
iidIChartView = mkIID "{00024488-0001-0000-C000-000000000046}"

getApplication234 :: (Variant a1)
                  => IChartView a0
                  -> IO a1
getApplication234 =
  propertyGet "Application"
              []
              outVariant

getCreator234 :: IChartView a0
              -> IO XlCreator
getCreator234 =
  propertyGet "Creator"
              []
              outEnum

getParent249 :: IChartView a0
             -> IO (IDispatch ())
getParent249 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet1 :: IChartView a0
          -> IO (IDispatch ())
getSheet1 =
  propertyGet "Sheet"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface IModuleView
-- 
-- --------------------------------------------------
data IModuleView_ a = IModuleView__ 
type IModuleView a = IDispatch (IModuleView_ a)
iidIModuleView :: IID (IModuleView ())
iidIModuleView = mkIID "{00024489-0001-0000-C000-000000000046}"

getApplication235 :: (Variant a1)
                  => IModuleView a0
                  -> IO a1
getApplication235 =
  propertyGet "Application"
              []
              outVariant

getCreator235 :: IModuleView a0
              -> IO XlCreator
getCreator235 =
  propertyGet "Creator"
              []
              outEnum

getParent250 :: IModuleView a0
             -> IO (IDispatch ())
getParent250 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet2 :: IModuleView a0
          -> IO (IDispatch ())
getSheet2 =
  propertyGet "Sheet"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface IDialogSheetView
-- 
-- --------------------------------------------------
data IDialogSheetView_ a = IDialogSheetView__ 
type IDialogSheetView a = IDispatch (IDialogSheetView_ a)
iidIDialogSheetView :: IID (IDialogSheetView ())
iidIDialogSheetView =
  mkIID "{0002448A-0001-0000-C000-000000000046}"

getApplication236 :: (Variant a1)
                  => IDialogSheetView a0
                  -> IO a1
getApplication236 =
  propertyGet "Application"
              []
              outVariant

getCreator236 :: IDialogSheetView a0
              -> IO XlCreator
getCreator236 =
  propertyGet "Creator"
              []
              outEnum

getParent251 :: IDialogSheetView a0
             -> IO (IDispatch ())
getParent251 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet3 :: IDialogSheetView a0
          -> IO (IDispatch ())
getSheet3 =
  propertyGet "Sheet"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ISheetViews
-- 
-- --------------------------------------------------
data ISheetViews_ a = ISheetViews__ 
type ISheetViews a = IDispatch (ISheetViews_ a)
iidISheetViews :: IID (ISheetViews ())
iidISheetViews = mkIID "{0002448C-0001-0000-C000-000000000046}"

getApplication237 :: (Variant a1)
                  => ISheetViews a0
                  -> IO a1
getApplication237 =
  propertyGet "Application"
              []
              outVariant

getCreator237 :: ISheetViews a0
              -> IO XlCreator
getCreator237 =
  propertyGet "Creator"
              []
              outEnum

getParent252 :: ISheetViews a0
             -> IO (IDispatch ())
getParent252 =
  propertyGet "Parent"
              []
              outIDispatch

getCount99 :: ISheetViews a0
           -> IO Int32
getCount99 =
  propertyGet "Count"
              []
              outInt32

newEnum40 :: ISheetViews a0
          -> IO (IUnknown ())
newEnum40 =
  function1 "_NewEnum"
            []
            outIUnknown

getItem45 :: a1
          -> ISheetViews a0
          -> IO (IDispatch ())
getItem45 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

getDefault95 :: a1
             -> ISheetViews a0
             -> IO (IDispatch ())
getDefault95 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

-- --------------------------------------------------
-- 
-- interface IOLEDBConnection
-- 
-- --------------------------------------------------
data IOLEDBConnection_ a = IOLEDBConnection__ 
type IOLEDBConnection a = IDispatch (IOLEDBConnection_ a)
iidIOLEDBConnection :: IID (IOLEDBConnection ())
iidIOLEDBConnection =
  mkIID "{0002448D-0001-0000-C000-000000000046}"

getApplication238 :: (Variant a1)
                  => IOLEDBConnection a0
                  -> IO a1
getApplication238 =
  propertyGet "Application"
              []
              outVariant

getCreator238 :: IOLEDBConnection a0
              -> IO XlCreator
getCreator238 =
  propertyGet "Creator"
              []
              outEnum

getParent253 :: IOLEDBConnection a0
             -> IO (IDispatch ())
getParent253 =
  propertyGet "Parent"
              []
              outIDispatch

getADOConnection0 :: IOLEDBConnection a0
                  -> IO (IDispatch ())
getADOConnection0 =
  propertyGet "ADOConnection"
              []
              outIDispatch

getBackgroundQuery1 :: IOLEDBConnection a0
                    -> IO Bool
getBackgroundQuery1 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery1 :: Bool
                    -> IOLEDBConnection a0
                    -> IO ()
setBackgroundQuery1 rHS =
  propertySet "BackgroundQuery"
              [inBool rHS]

cancelRefresh0 :: IOLEDBConnection a0
               -> IO ()
cancelRefresh0 =
  method0 "CancelRefresh"
          []

getCommandText1 :: (Variant a1)
                => IOLEDBConnection a0
                -> IO a1
getCommandText1 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText1 :: a1
                -> IOLEDBConnection a0
                -> IO ()
setCommandText1 rHS =
  propertySet "CommandText"
              [inVariant rHS]

getCommandType1 :: IOLEDBConnection a0
                -> IO XlCmdType
getCommandType1 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType1 :: XlCmdType
                -> IOLEDBConnection a0
                -> IO ()
setCommandType1 rHS =
  propertySet "CommandType"
              [inEnum rHS]

getConnection1 :: (Variant a1)
               => IOLEDBConnection a0
               -> IO a1
getConnection1 =
  propertyGet "Connection"
              []
              outVariant

setConnection1 :: a1
               -> IOLEDBConnection a0
               -> IO ()
setConnection1 rHS =
  propertySet "Connection"
              [inVariant rHS]

getEnableRefresh1 :: IOLEDBConnection a0
                  -> IO Bool
getEnableRefresh1 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh1 :: Bool
                  -> IOLEDBConnection a0
                  -> IO ()
setEnableRefresh1 rHS =
  propertySet "EnableRefresh"
              [inBool rHS]

getLocalConnection0 :: (Variant a1)
                    => IOLEDBConnection a0
                    -> IO a1
getLocalConnection0 =
  propertyGet "LocalConnection"
              []
              outVariant

setLocalConnection0 :: a1
                    -> IOLEDBConnection a0
                    -> IO ()
setLocalConnection0 rHS =
  propertySet "LocalConnection"
              [inVariant rHS]

getMaintainConnection1 :: IOLEDBConnection a0
                       -> IO Bool
getMaintainConnection1 =
  propertyGet "MaintainConnection"
              []
              outBool

setMaintainConnection1 :: Bool
                       -> IOLEDBConnection a0
                       -> IO ()
setMaintainConnection1 rHS =
  propertySet "MaintainConnection"
              [inBool rHS]

makeConnection0 :: IOLEDBConnection a0
                -> IO ()
makeConnection0 =
  method0 "MakeConnection"
          []

refresh5 :: IOLEDBConnection a0
         -> IO ()
refresh5 =
  method0 "Refresh"
          []

getRefreshDate1 :: IOLEDBConnection a0
                -> IO Int64
getRefreshDate1 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshing0 :: IOLEDBConnection a0
               -> IO Bool
getRefreshing0 =
  propertyGet "Refreshing"
              []
              outBool

getRefreshOnFileOpen1 :: IOLEDBConnection a0
                      -> IO Bool
getRefreshOnFileOpen1 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen1 :: Bool
                      -> IOLEDBConnection a0
                      -> IO ()
setRefreshOnFileOpen1 rHS =
  propertySet "RefreshOnFileOpen"
              [inBool rHS]

getRefreshPeriod1 :: IOLEDBConnection a0
                  -> IO Int32
getRefreshPeriod1 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod1 :: Int32
                  -> IOLEDBConnection a0
                  -> IO ()
setRefreshPeriod1 rHS =
  propertySet "RefreshPeriod"
              [inInt32 rHS]

getRobustConnect1 :: IOLEDBConnection a0
                  -> IO XlRobustConnect
getRobustConnect1 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect1 :: XlRobustConnect
                  -> IOLEDBConnection a0
                  -> IO ()
setRobustConnect1 rHS =
  propertySet "RobustConnect"
              [inEnum rHS]

saveAsODC1 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> IOLEDBConnection a0
           -> IO ()
saveAsODC1 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getSavePassword1 :: IOLEDBConnection a0
                 -> IO Bool
getSavePassword1 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword1 :: Bool
                 -> IOLEDBConnection a0
                 -> IO ()
setSavePassword1 rHS =
  propertySet "SavePassword"
              [inBool rHS]

getSourceConnectionFile1 :: IOLEDBConnection a0
                         -> IO String
getSourceConnectionFile1 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile1 :: String
                         -> IOLEDBConnection a0
                         -> IO ()
setSourceConnectionFile1 rHS =
  propertySet "SourceConnectionFile"
              [inString rHS]

getSourceDataFile1 :: IOLEDBConnection a0
                   -> IO String
getSourceDataFile1 =
  propertyGet "SourceDataFile"
              []
              outString

setSourceDataFile0 :: String
                   -> IOLEDBConnection a0
                   -> IO ()
setSourceDataFile0 rHS =
  propertySet "SourceDataFile"
              [inString rHS]

getOLAP0 :: IOLEDBConnection a0
         -> IO Bool
getOLAP0 =
  propertyGet "OLAP"
              []
              outBool

getUseLocalConnection0 :: IOLEDBConnection a0
                       -> IO Bool
getUseLocalConnection0 =
  propertyGet "UseLocalConnection"
              []
              outBool

setUseLocalConnection0 :: Bool
                       -> IOLEDBConnection a0
                       -> IO ()
setUseLocalConnection0 rHS =
  propertySet "UseLocalConnection"
              [inBool rHS]

getMaxDrillthroughRecords :: IOLEDBConnection a0
                          -> IO Int32
getMaxDrillthroughRecords =
  propertyGet "MaxDrillthroughRecords"
              []
              outInt32

setMaxDrillthroughRecords :: Int32
                          -> IOLEDBConnection a0
                          -> IO ()
setMaxDrillthroughRecords rHS =
  propertySet "MaxDrillthroughRecords"
              [inInt32 rHS]

getIsConnected0 :: IOLEDBConnection a0
                -> IO Bool
getIsConnected0 =
  propertyGet "IsConnected"
              []
              outBool

getServerCredentialsMethod :: IOLEDBConnection a0
                           -> IO XlCredentialsMethod
getServerCredentialsMethod =
  propertyGet "ServerCredentialsMethod"
              []
              outEnum

setServerCredentialsMethod :: XlCredentialsMethod
                           -> IOLEDBConnection a0
                           -> IO ()
setServerCredentialsMethod rHS =
  propertySet "ServerCredentialsMethod"
              [inEnum rHS]

getServerSSOApplicationID :: IOLEDBConnection a0
                          -> IO String
getServerSSOApplicationID =
  propertyGet "ServerSSOApplicationID"
              []
              outString

setServerSSOApplicationID :: String
                          -> IOLEDBConnection a0
                          -> IO ()
setServerSSOApplicationID rHS =
  propertySet "ServerSSOApplicationID"
              [inString rHS]

getAlwaysUseConnectionFile :: IOLEDBConnection a0
                           -> IO Bool
getAlwaysUseConnectionFile =
  propertyGet "AlwaysUseConnectionFile"
              []
              outBool

setAlwaysUseConnectionFile :: Bool
                           -> IOLEDBConnection a0
                           -> IO ()
setAlwaysUseConnectionFile rHS =
  propertySet "AlwaysUseConnectionFile"
              [inBool rHS]

getServerFillColor :: IOLEDBConnection a0
                   -> IO Bool
getServerFillColor =
  propertyGet "ServerFillColor"
              []
              outBool

setServerFillColor :: Bool
                   -> IOLEDBConnection a0
                   -> IO ()
setServerFillColor rHS =
  propertySet "ServerFillColor"
              [inBool rHS]

getServerFontStyle :: IOLEDBConnection a0
                   -> IO Bool
getServerFontStyle =
  propertyGet "ServerFontStyle"
              []
              outBool

setServerFontStyle :: Bool
                   -> IOLEDBConnection a0
                   -> IO ()
setServerFontStyle rHS =
  propertySet "ServerFontStyle"
              [inBool rHS]

getServerNumberFormat :: IOLEDBConnection a0
                      -> IO Bool
getServerNumberFormat =
  propertyGet "ServerNumberFormat"
              []
              outBool

setServerNumberFormat :: Bool
                      -> IOLEDBConnection a0
                      -> IO ()
setServerNumberFormat rHS =
  propertySet "ServerNumberFormat"
              [inBool rHS]

getServerTextColor :: IOLEDBConnection a0
                   -> IO Bool
getServerTextColor =
  propertyGet "ServerTextColor"
              []
              outBool

setServerTextColor :: Bool
                   -> IOLEDBConnection a0
                   -> IO ()
setServerTextColor rHS =
  propertySet "ServerTextColor"
              [inBool rHS]

getRetrieveInOfficeUILang :: IOLEDBConnection a0
                          -> IO Bool
getRetrieveInOfficeUILang =
  propertyGet "RetrieveInOfficeUILang"
              []
              outBool

setRetrieveInOfficeUILang :: Bool
                          -> IOLEDBConnection a0
                          -> IO ()
setRetrieveInOfficeUILang rHS =
  propertySet "RetrieveInOfficeUILang"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IODBCConnection
-- 
-- --------------------------------------------------
data IODBCConnection_ a = IODBCConnection__ 
type IODBCConnection a = IDispatch (IODBCConnection_ a)
iidIODBCConnection :: IID (IODBCConnection ())
iidIODBCConnection = mkIID "{0002448E-0001-0000-C000-000000000046}"

getApplication239 :: (Variant a1)
                  => IODBCConnection a0
                  -> IO a1
getApplication239 =
  propertyGet "Application"
              []
              outVariant

getCreator239 :: IODBCConnection a0
              -> IO XlCreator
getCreator239 =
  propertyGet "Creator"
              []
              outEnum

getParent254 :: IODBCConnection a0
             -> IO (IDispatch ())
getParent254 =
  propertyGet "Parent"
              []
              outIDispatch

getBackgroundQuery2 :: IODBCConnection a0
                    -> IO Bool
getBackgroundQuery2 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery2 :: Bool
                    -> IODBCConnection a0
                    -> IO ()
setBackgroundQuery2 rHS =
  propertySet "BackgroundQuery"
              [inBool rHS]

cancelRefresh1 :: IODBCConnection a0
               -> IO ()
cancelRefresh1 =
  method0 "CancelRefresh"
          []

getCommandText2 :: (Variant a1)
                => IODBCConnection a0
                -> IO a1
getCommandText2 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText2 :: a1
                -> IODBCConnection a0
                -> IO ()
setCommandText2 rHS =
  propertySet "CommandText"
              [inVariant rHS]

getCommandType2 :: IODBCConnection a0
                -> IO XlCmdType
getCommandType2 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType2 :: XlCmdType
                -> IODBCConnection a0
                -> IO ()
setCommandType2 rHS =
  propertySet "CommandType"
              [inEnum rHS]

getConnection2 :: (Variant a1)
               => IODBCConnection a0
               -> IO a1
getConnection2 =
  propertyGet "Connection"
              []
              outVariant

setConnection2 :: a1
               -> IODBCConnection a0
               -> IO ()
setConnection2 rHS =
  propertySet "Connection"
              [inVariant rHS]

getEnableRefresh2 :: IODBCConnection a0
                  -> IO Bool
getEnableRefresh2 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh2 :: Bool
                  -> IODBCConnection a0
                  -> IO ()
setEnableRefresh2 rHS =
  propertySet "EnableRefresh"
              [inBool rHS]

refresh6 :: IODBCConnection a0
         -> IO ()
refresh6 =
  method0 "Refresh"
          []

getRefreshDate2 :: IODBCConnection a0
                -> IO Int64
getRefreshDate2 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshing1 :: IODBCConnection a0
               -> IO Bool
getRefreshing1 =
  propertyGet "Refreshing"
              []
              outBool

getRefreshOnFileOpen2 :: IODBCConnection a0
                      -> IO Bool
getRefreshOnFileOpen2 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen2 :: Bool
                      -> IODBCConnection a0
                      -> IO ()
setRefreshOnFileOpen2 rHS =
  propertySet "RefreshOnFileOpen"
              [inBool rHS]

getRefreshPeriod2 :: IODBCConnection a0
                  -> IO Int32
getRefreshPeriod2 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod2 :: Int32
                  -> IODBCConnection a0
                  -> IO ()
setRefreshPeriod2 rHS =
  propertySet "RefreshPeriod"
              [inInt32 rHS]

getRobustConnect2 :: IODBCConnection a0
                  -> IO XlRobustConnect
getRobustConnect2 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect2 :: XlRobustConnect
                  -> IODBCConnection a0
                  -> IO ()
setRobustConnect2 rHS =
  propertySet "RobustConnect"
              [inEnum rHS]

saveAsODC2 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> IODBCConnection a0
           -> IO ()
saveAsODC2 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getSavePassword2 :: IODBCConnection a0
                 -> IO Bool
getSavePassword2 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword2 :: Bool
                 -> IODBCConnection a0
                 -> IO ()
setSavePassword2 rHS =
  propertySet "SavePassword"
              [inBool rHS]

getSourceConnectionFile2 :: IODBCConnection a0
                         -> IO String
getSourceConnectionFile2 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile2 :: String
                         -> IODBCConnection a0
                         -> IO ()
setSourceConnectionFile2 rHS =
  propertySet "SourceConnectionFile"
              [inString rHS]

getSourceData1 :: (Variant a1)
               => IODBCConnection a0
               -> IO a1
getSourceData1 =
  propertyGet "SourceData"
              []
              outVariant

setSourceData2 :: a1
               -> IODBCConnection a0
               -> IO ()
setSourceData2 rHS =
  propertySet "SourceData"
              [inVariant rHS]

getSourceDataFile2 :: IODBCConnection a0
                   -> IO String
getSourceDataFile2 =
  propertyGet "SourceDataFile"
              []
              outString

setSourceDataFile1 :: String
                   -> IODBCConnection a0
                   -> IO ()
setSourceDataFile1 rHS =
  propertySet "SourceDataFile"
              [inString rHS]

getServerCredentialsMethod0 :: IODBCConnection a0
                            -> IO XlCredentialsMethod
getServerCredentialsMethod0 =
  propertyGet "ServerCredentialsMethod"
              []
              outEnum

setServerCredentialsMethod0 :: XlCredentialsMethod
                            -> IODBCConnection a0
                            -> IO ()
setServerCredentialsMethod0 rHS =
  propertySet "ServerCredentialsMethod"
              [inEnum rHS]

getServerSSOApplicationID0 :: IODBCConnection a0
                           -> IO String
getServerSSOApplicationID0 =
  propertyGet "ServerSSOApplicationID"
              []
              outString

setServerSSOApplicationID0 :: String
                           -> IODBCConnection a0
                           -> IO ()
setServerSSOApplicationID0 rHS =
  propertySet "ServerSSOApplicationID"
              [inString rHS]

getAlwaysUseConnectionFile0 :: IODBCConnection a0
                            -> IO Bool
getAlwaysUseConnectionFile0 =
  propertyGet "AlwaysUseConnectionFile"
              []
              outBool

setAlwaysUseConnectionFile0 :: Bool
                            -> IODBCConnection a0
                            -> IO ()
setAlwaysUseConnectionFile0 rHS =
  propertySet "AlwaysUseConnectionFile"
              [inBool rHS]

-- --------------------------------------------------
-- 
-- interface IAction
-- 
-- --------------------------------------------------
data IAction_ a = IAction__ 
type IAction a = IDispatch (IAction_ a)
iidIAction :: IID (IAction ())
iidIAction = mkIID "{0002448F-0001-0000-C000-000000000046}"

getApplication240 :: (Variant a1)
                  => IAction a0
                  -> IO a1
getApplication240 =
  propertyGet "Application"
              []
              outVariant

getCreator240 :: IAction a0
              -> IO XlCreator
getCreator240 =
  propertyGet "Creator"
              []
              outEnum

getParent255 :: IAction a0
             -> IO (IDispatch ())
getParent255 =
  propertyGet "Parent"
              []
              outIDispatch

getName77 :: IAction a0
          -> IO String
getName77 =
  propertyGet "Name"
              []
              outString

getCaption39 :: IAction a0
             -> IO String
getCaption39 =
  propertyGet "Caption"
              []
              outString

getType28 :: IAction a0
          -> IO XlActionType
getType28 =
  propertyGet "Type"
              []
              outEnum

getCoordinate :: IAction a0
              -> IO String
getCoordinate =
  propertyGet "Coordinate"
              []
              outString

getContent :: IAction a0
           -> IO String
getContent =
  propertyGet "Content"
              []
              outString

execute0 :: IAction a0
         -> IO ()
execute0 =
  method0 "Execute"
          []

-- --------------------------------------------------
-- 
-- interface IActions
-- 
-- --------------------------------------------------
data IActions_ a = IActions__ 
type IActions a = IDispatch (IActions_ a)
iidIActions :: IID (IActions ())
iidIActions = mkIID "{00024490-0001-0000-C000-000000000046}"

getApplication241 :: (Variant a1)
                  => IActions a0
                  -> IO a1
getApplication241 =
  propertyGet "Application"
              []
              outVariant

getCreator241 :: IActions a0
              -> IO XlCreator
getCreator241 =
  propertyGet "Creator"
              []
              outEnum

getParent256 :: IActions a0
             -> IO (IDispatch ())
getParent256 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault96 :: a1
             -> IActions a0
             -> IO (Action ())
getDefault96 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum54 :: IActions a0
             -> IO (IUnknown ())
getNewEnum54 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem46 :: a1
          -> IActions a0
          -> IO (Action ())
getItem46 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount100 :: IActions a0
            -> IO Int32
getCount100 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IFormatColor
-- 
-- --------------------------------------------------
data IFormatColor_ a = IFormatColor__ 
type IFormatColor a = IDispatch (IFormatColor_ a)
iidIFormatColor :: IID (IFormatColor ())
iidIFormatColor = mkIID "{00024491-0001-0000-C000-000000000046}"

getApplication242 :: (Variant a1)
                  => IFormatColor a0
                  -> IO a1
getApplication242 =
  propertyGet "Application"
              []
              outVariant

getCreator242 :: IFormatColor a0
              -> IO XlCreator
getCreator242 =
  propertyGet "Creator"
              []
              outEnum

getParent257 :: IFormatColor a0
             -> IO (IDispatch ())
getParent257 =
  propertyGet "Parent"
              []
              outIDispatch

getColor4 :: (Variant a1)
          => IFormatColor a0
          -> IO a1
getColor4 =
  propertyGet "Color"
              []
              outVariant

setColor4 :: a1
          -> IFormatColor a0
          -> IO ()
setColor4 rHS =
  propertySet "Color"
              [inVariant rHS]

getColorIndex4 :: IFormatColor a0
               -> IO XlColorIndex
getColorIndex4 =
  propertyGet "ColorIndex"
              []
              outEnum

setColorIndex4 :: XlColorIndex
               -> IFormatColor a0
               -> IO ()
setColorIndex4 rHS =
  propertySet "ColorIndex"
              [inEnum rHS]

getThemeColor4 :: (Variant a1)
               => IFormatColor a0
               -> IO a1
getThemeColor4 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor4 :: a1
               -> IFormatColor a0
               -> IO ()
setThemeColor4 rHS =
  propertySet "ThemeColor"
              [inVariant rHS]

getTintAndShade5 :: (Variant a1)
                 => IFormatColor a0
                 -> IO a1
getTintAndShade5 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade5 :: a1
                 -> IFormatColor a0
                 -> IO ()
setTintAndShade5 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

-- --------------------------------------------------
-- 
-- interface IConditionValue
-- 
-- --------------------------------------------------
data IConditionValue_ a = IConditionValue__ 
type IConditionValue a = IDispatch (IConditionValue_ a)
iidIConditionValue :: IID (IConditionValue ())
iidIConditionValue = mkIID "{00024492-0001-0000-C000-000000000046}"

getApplication243 :: (Variant a1)
                  => IConditionValue a0
                  -> IO a1
getApplication243 =
  propertyGet "Application"
              []
              outVariant

getCreator243 :: IConditionValue a0
              -> IO XlCreator
getCreator243 =
  propertyGet "Creator"
              []
              outEnum

getParent258 :: IConditionValue a0
             -> IO (IDispatch ())
getParent258 =
  propertyGet "Parent"
              []
              outIDispatch

modify2 :: (Variant a1)
        => XlConditionValueTypes
        -> a1
        -> IConditionValue a0
        -> IO ()
modify2 newtype0 newvalue =
  method0 "Modify"
          [ inEnum newtype0
          , inVariant newvalue
          ]

getType29 :: IConditionValue a0
          -> IO XlConditionValueTypes
getType29 =
  propertyGet "Type"
              []
              outEnum

getValue30 :: (Variant a1)
           => IConditionValue a0
           -> IO a1
getValue30 =
  propertyGet "Value"
              []
              outVariant

-- --------------------------------------------------
-- 
-- interface IColorScale
-- 
-- --------------------------------------------------
data IColorScale_ a = IColorScale__ 
type IColorScale a = IDispatch (IColorScale_ a)
iidIColorScale :: IID (IColorScale ())
iidIColorScale = mkIID "{00024493-0001-0000-C000-000000000046}"

getApplication244 :: (Variant a1)
                  => IColorScale a0
                  -> IO a1
getApplication244 =
  propertyGet "Application"
              []
              outVariant

getCreator244 :: IColorScale a0
              -> IO XlCreator
getCreator244 =
  propertyGet "Creator"
              []
              outEnum

getParent259 :: IColorScale a0
             -> IO (IDispatch ())
getParent259 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority0 :: IColorScale a0
             -> IO Int32
getPriority0 =
  propertyGet "Priority"
              []
              outInt32

setPriority0 :: Int32
             -> IColorScale a0
             -> IO ()
setPriority0 rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue0 :: IColorScale a0
               -> IO Bool
getStopIfTrue0 =
  propertyGet "StopIfTrue"
              []
              outBool

getAppliesTo0 :: IColorScale a0
              -> IO (Range ())
getAppliesTo0 =
  propertyGet "AppliesTo"
              []
              outIUnknown

getFormula23 :: IColorScale a0
             -> IO String
getFormula23 =
  propertyGet "Formula"
              []
              outString

setFormula18 :: String
             -> IColorScale a0
             -> IO ()
setFormula18 rHS =
  propertySet "Formula"
              [inString rHS]

getType30 :: IColorScale a0
          -> IO Int32
getType30 =
  propertyGet "Type"
              []
              outInt32

setFirstPriority0 :: IColorScale a0
                  -> IO ()
setFirstPriority0 =
  method0 "SetFirstPriority"
          []

setLastPriority0 :: IColorScale a0
                 -> IO ()
setLastPriority0 =
  method0 "SetLastPriority"
          []

delete118 :: IColorScale a0
          -> IO ()
delete118 =
  method0 "Delete"
          []

modifyAppliesToRange0 :: Range a1
                      -> IColorScale a0
                      -> IO ()
modifyAppliesToRange0 range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

getPTCondition0 :: IColorScale a0
                -> IO Bool
getPTCondition0 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType0 :: IColorScale a0
              -> IO XlPivotConditionScope
getScopeType0 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType0 :: XlPivotConditionScope
              -> IColorScale a0
              -> IO ()
setScopeType0 rHS =
  propertySet "ScopeType"
              [inEnum rHS]

getColorScaleCriteria :: IColorScale a0
                      -> IO (ColorScaleCriteria ())
getColorScaleCriteria =
  propertyGet "ColorScaleCriteria"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IColorScaleCriteria
-- 
-- --------------------------------------------------
data IColorScaleCriteria_ a = IColorScaleCriteria__ 
type IColorScaleCriteria a = IDispatch (IColorScaleCriteria_ a)
iidIColorScaleCriteria :: IID (IColorScaleCriteria ())
iidIColorScaleCriteria =
  mkIID "{00024494-0001-0000-C000-000000000046}"

getCount101 :: IColorScaleCriteria a0
            -> IO Int32
getCount101 =
  propertyGet "Count"
              []
              outInt32

getDefault97 :: a1
             -> IColorScaleCriteria a0
             -> IO (ColorScaleCriterion ())
getDefault97 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum55 :: IColorScaleCriteria a0
             -> IO (IUnknown ())
getNewEnum55 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem47 :: a1
          -> IColorScaleCriteria a0
          -> IO (ColorScaleCriterion ())
getItem47 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IColorScaleCriterion
-- 
-- --------------------------------------------------
data IColorScaleCriterion_ a = IColorScaleCriterion__ 
type IColorScaleCriterion a = IDispatch (IColorScaleCriterion_ a)
iidIColorScaleCriterion :: IID (IColorScaleCriterion ())
iidIColorScaleCriterion =
  mkIID "{00024495-0001-0000-C000-000000000046}"

getIndex38 :: IColorScaleCriterion a0
           -> IO Int32
getIndex38 =
  propertyGet "Index"
              []
              outInt32

getType31 :: IColorScaleCriterion a0
          -> IO XlConditionValueTypes
getType31 =
  propertyGet "Type"
              []
              outEnum

setType11 :: XlConditionValueTypes
          -> IColorScaleCriterion a0
          -> IO ()
setType11 rHS =
  propertySet "Type"
              [inEnum rHS]

getValue31 :: (Variant a1)
           => IColorScaleCriterion a0
           -> IO a1
getValue31 =
  propertyGet "Value"
              []
              outVariant

setValue23 :: a1
           -> IColorScaleCriterion a0
           -> IO ()
setValue23 rHS =
  propertySet "Value"
              [inVariant rHS]

getFormatColor :: IColorScaleCriterion a0
               -> IO (FormatColor ())
getFormatColor =
  propertyGet "FormatColor"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IDatabar
-- 
-- --------------------------------------------------
data IDatabar_ a = IDatabar__ 
type IDatabar a = IDispatch (IDatabar_ a)
iidIDatabar :: IID (IDatabar ())
iidIDatabar = mkIID "{00024496-0001-0000-C000-000000000046}"

getApplication245 :: (Variant a1)
                  => IDatabar a0
                  -> IO a1
getApplication245 =
  propertyGet "Application"
              []
              outVariant

getCreator245 :: IDatabar a0
              -> IO XlCreator
getCreator245 =
  propertyGet "Creator"
              []
              outEnum

getParent260 :: IDatabar a0
             -> IO (IDispatch ())
getParent260 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority1 :: IDatabar a0
             -> IO Int32
getPriority1 =
  propertyGet "Priority"
              []
              outInt32

setPriority1 :: Int32
             -> IDatabar a0
             -> IO ()
setPriority1 rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue1 :: IDatabar a0
               -> IO Bool
getStopIfTrue1 =
  propertyGet "StopIfTrue"
              []
              outBool

getAppliesTo1 :: IDatabar a0
              -> IO (Range ())
getAppliesTo1 =
  propertyGet "AppliesTo"
              []
              outIUnknown

getMinPoint :: IDatabar a0
            -> IO (ConditionValue ())
getMinPoint =
  propertyGet "MinPoint"
              []
              outIUnknown

getMaxPoint :: IDatabar a0
            -> IO (ConditionValue ())
getMaxPoint =
  propertyGet "MaxPoint"
              []
              outIUnknown

getPercentMin :: IDatabar a0
              -> IO Int32
getPercentMin =
  propertyGet "PercentMin"
              []
              outInt32

setPercentMin :: Int32
              -> IDatabar a0
              -> IO ()
setPercentMin rHS =
  propertySet "PercentMin"
              [inInt32 rHS]

getPercentMax :: IDatabar a0
              -> IO Int32
getPercentMax =
  propertyGet "PercentMax"
              []
              outInt32

setPercentMax :: Int32
              -> IDatabar a0
              -> IO ()
setPercentMax rHS =
  propertySet "PercentMax"
              [inInt32 rHS]

getBarColor :: IDatabar a0
            -> IO (IDispatch ())
getBarColor =
  propertyGet "BarColor"
              []
              outIDispatch

getShowValue1 :: IDatabar a0
              -> IO Bool
getShowValue1 =
  propertyGet "ShowValue"
              []
              outBool

setShowValue1 :: Bool
              -> IDatabar a0
              -> IO ()
setShowValue1 rHS =
  propertySet "ShowValue"
              [inBool rHS]

getFormula24 :: IDatabar a0
             -> IO String
getFormula24 =
  propertyGet "Formula"
              []
              outString

setFormula19 :: String
             -> IDatabar a0
             -> IO ()
setFormula19 rHS =
  propertySet "Formula"
              [inString rHS]

getType32 :: IDatabar a0
          -> IO Int32
getType32 =
  propertyGet "Type"
              []
              outInt32

setFirstPriority1 :: IDatabar a0
                  -> IO ()
setFirstPriority1 =
  method0 "SetFirstPriority"
          []

setLastPriority1 :: IDatabar a0
                 -> IO ()
setLastPriority1 =
  method0 "SetLastPriority"
          []

delete119 :: IDatabar a0
          -> IO ()
delete119 =
  method0 "Delete"
          []

modifyAppliesToRange1 :: Range a1
                      -> IDatabar a0
                      -> IO ()
modifyAppliesToRange1 range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

getPTCondition1 :: IDatabar a0
                -> IO Bool
getPTCondition1 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType1 :: IDatabar a0
              -> IO XlPivotConditionScope
getScopeType1 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType1 :: XlPivotConditionScope
              -> IDatabar a0
              -> IO ()
setScopeType1 rHS =
  propertySet "ScopeType"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface IIconSetCondition
-- 
-- --------------------------------------------------
data IIconSetCondition_ a = IIconSetCondition__ 
type IIconSetCondition a = IDispatch (IIconSetCondition_ a)
iidIIconSetCondition :: IID (IIconSetCondition ())
iidIIconSetCondition =
  mkIID "{00024497-0001-0000-C000-000000000046}"

getApplication246 :: (Variant a1)
                  => IIconSetCondition a0
                  -> IO a1
getApplication246 =
  propertyGet "Application"
              []
              outVariant

getCreator246 :: IIconSetCondition a0
              -> IO XlCreator
getCreator246 =
  propertyGet "Creator"
              []
              outEnum

getParent261 :: IIconSetCondition a0
             -> IO (IDispatch ())
getParent261 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority2 :: IIconSetCondition a0
             -> IO Int32
getPriority2 =
  propertyGet "Priority"
              []
              outInt32

setPriority2 :: Int32
             -> IIconSetCondition a0
             -> IO ()
setPriority2 rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue2 :: IIconSetCondition a0
               -> IO Bool
getStopIfTrue2 =
  propertyGet "StopIfTrue"
              []
              outBool

getAppliesTo2 :: IIconSetCondition a0
              -> IO (Range ())
getAppliesTo2 =
  propertyGet "AppliesTo"
              []
              outIUnknown

getType33 :: IIconSetCondition a0
          -> IO Int32
getType33 =
  propertyGet "Type"
              []
              outInt32

modifyAppliesToRange2 :: Range a1
                      -> IIconSetCondition a0
                      -> IO ()
modifyAppliesToRange2 range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

getPTCondition2 :: IIconSetCondition a0
                -> IO Bool
getPTCondition2 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType2 :: IIconSetCondition a0
              -> IO XlPivotConditionScope
getScopeType2 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType2 :: XlPivotConditionScope
              -> IIconSetCondition a0
              -> IO ()
setScopeType2 rHS =
  propertySet "ScopeType"
              [inEnum rHS]

setFirstPriority2 :: IIconSetCondition a0
                  -> IO ()
setFirstPriority2 =
  method0 "SetFirstPriority"
          []

setLastPriority2 :: IIconSetCondition a0
                 -> IO ()
setLastPriority2 =
  method0 "SetLastPriority"
          []

delete120 :: IIconSetCondition a0
          -> IO ()
delete120 =
  method0 "Delete"
          []

getReverseOrder :: IIconSetCondition a0
                -> IO Bool
getReverseOrder =
  propertyGet "ReverseOrder"
              []
              outBool

setReverseOrder :: Bool
                -> IIconSetCondition a0
                -> IO ()
setReverseOrder rHS =
  propertySet "ReverseOrder"
              [inBool rHS]

getPercentileValues :: IIconSetCondition a0
                    -> IO Bool
getPercentileValues =
  propertyGet "PercentileValues"
              []
              outBool

setPercentileValues :: Bool
                    -> IIconSetCondition a0
                    -> IO ()
setPercentileValues rHS =
  propertySet "PercentileValues"
              [inBool rHS]

getShowIconOnly :: IIconSetCondition a0
                -> IO Bool
getShowIconOnly =
  propertyGet "ShowIconOnly"
              []
              outBool

setShowIconOnly :: Bool
                -> IIconSetCondition a0
                -> IO ()
setShowIconOnly rHS =
  propertySet "ShowIconOnly"
              [inBool rHS]

getFormula25 :: IIconSetCondition a0
             -> IO String
getFormula25 =
  propertyGet "Formula"
              []
              outString

setFormula20 :: String
             -> IIconSetCondition a0
             -> IO ()
setFormula20 rHS =
  propertySet "Formula"
              [inString rHS]

getIconSet :: (Variant a1)
           => IIconSetCondition a0
           -> IO a1
getIconSet =
  propertyGet "IconSet"
              []
              outVariant

setIconSet :: a1
           -> IIconSetCondition a0
           -> IO ()
setIconSet rHS =
  propertySet "IconSet"
              [inVariant rHS]

getIconCriteria :: IIconSetCondition a0
                -> IO (IconCriteria ())
getIconCriteria =
  propertyGet "IconCriteria"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IIconCriteria
-- 
-- --------------------------------------------------
data IIconCriteria_ a = IIconCriteria__ 
type IIconCriteria a = IDispatch (IIconCriteria_ a)
iidIIconCriteria :: IID (IIconCriteria ())
iidIIconCriteria = mkIID "{00024498-0001-0000-C000-000000000046}"

getCount102 :: IIconCriteria a0
            -> IO Int32
getCount102 =
  propertyGet "Count"
              []
              outInt32

getDefault98 :: a1
             -> IIconCriteria a0
             -> IO (IconCriterion ())
getDefault98 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum56 :: IIconCriteria a0
             -> IO (IUnknown ())
getNewEnum56 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem48 :: a1
          -> IIconCriteria a0
          -> IO (IconCriterion ())
getItem48 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IIconCriterion
-- 
-- --------------------------------------------------
data IIconCriterion_ a = IIconCriterion__ 
type IIconCriterion a = IDispatch (IIconCriterion_ a)
iidIIconCriterion :: IID (IIconCriterion ())
iidIIconCriterion = mkIID "{00024499-0001-0000-C000-000000000046}"

getIndex39 :: IIconCriterion a0
           -> IO Int32
getIndex39 =
  propertyGet "Index"
              []
              outInt32

getType34 :: IIconCriterion a0
          -> IO XlConditionValueTypes
getType34 =
  propertyGet "Type"
              []
              outEnum

setType12 :: XlConditionValueTypes
          -> IIconCriterion a0
          -> IO ()
setType12 rHS =
  propertySet "Type"
              [inEnum rHS]

getValue32 :: (Variant a1)
           => IIconCriterion a0
           -> IO a1
getValue32 =
  propertyGet "Value"
              []
              outVariant

setValue24 :: a1
           -> IIconCriterion a0
           -> IO ()
setValue24 rHS =
  propertySet "Value"
              [inVariant rHS]

getOperator3 :: IIconCriterion a0
             -> IO Int32
getOperator3 =
  propertyGet "Operator"
              []
              outInt32

setOperator0 :: Int32
             -> IIconCriterion a0
             -> IO ()
setOperator0 rHS =
  propertySet "Operator"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IIcon
-- 
-- --------------------------------------------------
data IIcon_ a = IIcon__ 
type IIcon a = IDispatch (IIcon_ a)
iidIIcon :: IID (IIcon ())
iidIIcon = mkIID "{0002449A-0001-0000-C000-000000000046}"

getApplication247 :: (Variant a1)
                  => IIcon a0
                  -> IO a1
getApplication247 =
  propertyGet "Application"
              []
              outVariant

getCreator247 :: IIcon a0
              -> IO XlCreator
getCreator247 =
  propertyGet "Creator"
              []
              outEnum

getParent262 :: IIcon a0
             -> IO (IconSet ())
getParent262 =
  propertyGet "Parent"
              []
              outIUnknown

getIndex40 :: IIcon a0
           -> IO Int32
getIndex40 =
  propertyGet "Index"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IIconSet
-- 
-- --------------------------------------------------
data IIconSet_ a = IIconSet__ 
type IIconSet a = IDispatch (IIconSet_ a)
iidIIconSet :: IID (IIconSet ())
iidIIconSet = mkIID "{0002449B-0001-0000-C000-000000000046}"

getApplication248 :: (Variant a1)
                  => IIconSet a0
                  -> IO a1
getApplication248 =
  propertyGet "Application"
              []
              outVariant

getCreator248 :: IIconSet a0
              -> IO XlCreator
getCreator248 =
  propertyGet "Creator"
              []
              outEnum

getParent263 :: IIconSet a0
             -> IO (IDispatch ())
getParent263 =
  propertyGet "Parent"
              []
              outIDispatch

getID3 :: IIconSet a0
       -> IO XlIconSet
getID3 =
  propertyGet "ID"
              []
              outEnum

getCount103 :: IIconSet a0
            -> IO Int32
getCount103 =
  propertyGet "Count"
              []
              outInt32

getDefault99 :: a1
             -> IIconSet a0
             -> IO (Icon ())
getDefault99 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum57 :: IIconSet a0
             -> IO (IUnknown ())
getNewEnum57 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem49 :: a1
          -> IIconSet a0
          -> IO (Icon ())
getItem49 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IIconSets
-- 
-- --------------------------------------------------
data IIconSets_ a = IIconSets__ 
type IIconSets a = IDispatch (IIconSets_ a)
iidIIconSets :: IID (IIconSets ())
iidIIconSets = mkIID "{0002449C-0001-0000-C000-000000000046}"

getApplication249 :: (Variant a1)
                  => IIconSets a0
                  -> IO a1
getApplication249 =
  propertyGet "Application"
              []
              outVariant

getCreator249 :: IIconSets a0
              -> IO XlCreator
getCreator249 =
  propertyGet "Creator"
              []
              outEnum

getParent264 :: IIconSets a0
             -> IO (IDispatch ())
getParent264 =
  propertyGet "Parent"
              []
              outIDispatch

getCount104 :: IIconSets a0
            -> IO Int32
getCount104 =
  propertyGet "Count"
              []
              outInt32

getDefault100 :: a1
              -> IIconSets a0
              -> IO (IDispatch ())
getDefault100 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

getNewEnum58 :: IIconSets a0
             -> IO (IUnknown ())
getNewEnum58 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem50 :: a1
          -> IIconSets a0
          -> IO (IDispatch ())
getItem50 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ITop10
-- 
-- --------------------------------------------------
data ITop10_ a = ITop10__ 
type ITop10 a = IDispatch (ITop10_ a)
iidITop10 :: IID (ITop10 ())
iidITop10 = mkIID "{0002449D-0001-0000-C000-000000000046}"

getApplication250 :: (Variant a1)
                  => ITop10 a0
                  -> IO a1
getApplication250 =
  propertyGet "Application"
              []
              outVariant

getCreator250 :: ITop10 a0
              -> IO XlCreator
getCreator250 =
  propertyGet "Creator"
              []
              outEnum

getParent265 :: ITop10 a0
             -> IO (IDispatch ())
getParent265 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority3 :: ITop10 a0
             -> IO Int32
getPriority3 =
  propertyGet "Priority"
              []
              outInt32

setPriority3 :: Int32
             -> ITop10 a0
             -> IO ()
setPriority3 rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue3 :: ITop10 a0
               -> IO Bool
getStopIfTrue3 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue0 :: Bool
               -> ITop10 a0
               -> IO ()
setStopIfTrue0 rHS =
  propertySet "StopIfTrue"
              [inBool rHS]

getAppliesTo3 :: ITop10 a0
              -> IO (Range ())
getAppliesTo3 =
  propertyGet "AppliesTo"
              []
              outIUnknown

getTopBottom :: ITop10 a0
             -> IO XlTopBottom
getTopBottom =
  propertyGet "TopBottom"
              []
              outEnum

setTopBottom :: XlTopBottom
             -> ITop10 a0
             -> IO ()
setTopBottom rHS =
  propertySet "TopBottom"
              [inEnum rHS]

getRank :: ITop10 a0
        -> IO Int32
getRank =
  propertyGet "Rank"
              []
              outInt32

setRank :: Int32
        -> ITop10 a0
        -> IO ()
setRank rHS =
  propertySet "Rank"
              [inInt32 rHS]

getPercent :: ITop10 a0
           -> IO Bool
getPercent =
  propertyGet "Percent"
              []
              outBool

setPercent :: Bool
           -> ITop10 a0
           -> IO ()
setPercent rHS =
  propertySet "Percent"
              [inBool rHS]

getInterior41 :: ITop10 a0
              -> IO (Interior ())
getInterior41 =
  propertyGet "Interior"
              []
              outIUnknown

getBorders3 :: ITop10 a0
            -> IO (Borders ())
getBorders3 =
  propertyGet "Borders"
              []
              outIUnknown

getFont31 :: ITop10 a0
          -> IO (Font ())
getFont31 =
  propertyGet "Font"
              []
              outIUnknown

getType35 :: ITop10 a0
          -> IO Int32
getType35 =
  propertyGet "Type"
              []
              outInt32

getNumberFormat7 :: (Variant a1)
                 => ITop10 a0
                 -> IO a1
getNumberFormat7 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat7 :: a1
                 -> ITop10 a0
                 -> IO ()
setNumberFormat7 rHS =
  propertySet "NumberFormat"
              [inVariant rHS]

setFirstPriority3 :: ITop10 a0
                  -> IO ()
setFirstPriority3 =
  method0 "SetFirstPriority"
          []

setLastPriority3 :: ITop10 a0
                 -> IO ()
setLastPriority3 =
  method0 "SetLastPriority"
          []

delete121 :: ITop10 a0
          -> IO ()
delete121 =
  method0 "Delete"
          []

modifyAppliesToRange3 :: Range a1
                      -> ITop10 a0
                      -> IO ()
modifyAppliesToRange3 range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

getPTCondition3 :: ITop10 a0
                -> IO Bool
getPTCondition3 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType3 :: ITop10 a0
              -> IO XlPivotConditionScope
getScopeType3 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType3 :: XlPivotConditionScope
              -> ITop10 a0
              -> IO ()
setScopeType3 rHS =
  propertySet "ScopeType"
              [inEnum rHS]

getCalcFor :: ITop10 a0
           -> IO XlCalcFor
getCalcFor =
  propertyGet "CalcFor"
              []
              outEnum

setCalcFor :: XlCalcFor
           -> ITop10 a0
           -> IO ()
setCalcFor rHS =
  propertySet "CalcFor"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface IAboveAverage
-- 
-- --------------------------------------------------
data IAboveAverage_ a = IAboveAverage__ 
type IAboveAverage a = IDispatch (IAboveAverage_ a)
iidIAboveAverage :: IID (IAboveAverage ())
iidIAboveAverage = mkIID "{0002449E-0001-0000-C000-000000000046}"

getApplication251 :: (Variant a1)
                  => IAboveAverage a0
                  -> IO a1
getApplication251 =
  propertyGet "Application"
              []
              outVariant

getCreator251 :: IAboveAverage a0
              -> IO XlCreator
getCreator251 =
  propertyGet "Creator"
              []
              outEnum

getParent266 :: IAboveAverage a0
             -> IO (IDispatch ())
getParent266 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority4 :: IAboveAverage a0
             -> IO Int32
getPriority4 =
  propertyGet "Priority"
              []
              outInt32

setPriority4 :: Int32
             -> IAboveAverage a0
             -> IO ()
setPriority4 rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue4 :: IAboveAverage a0
               -> IO Bool
getStopIfTrue4 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue1 :: Bool
               -> IAboveAverage a0
               -> IO ()
setStopIfTrue1 rHS =
  propertySet "StopIfTrue"
              [inBool rHS]

getAppliesTo4 :: IAboveAverage a0
              -> IO (Range ())
getAppliesTo4 =
  propertyGet "AppliesTo"
              []
              outIUnknown

getAboveBelow :: IAboveAverage a0
              -> IO XlAboveBelow
getAboveBelow =
  propertyGet "AboveBelow"
              []
              outEnum

setAboveBelow :: XlAboveBelow
              -> IAboveAverage a0
              -> IO ()
setAboveBelow rHS =
  propertySet "AboveBelow"
              [inEnum rHS]

getInterior42 :: IAboveAverage a0
              -> IO (Interior ())
getInterior42 =
  propertyGet "Interior"
              []
              outIUnknown

getBorders4 :: IAboveAverage a0
            -> IO (Borders ())
getBorders4 =
  propertyGet "Borders"
              []
              outIUnknown

getFont32 :: IAboveAverage a0
          -> IO (Font ())
getFont32 =
  propertyGet "Font"
              []
              outIUnknown

getType36 :: IAboveAverage a0
          -> IO Int32
getType36 =
  propertyGet "Type"
              []
              outInt32

getNumberFormat8 :: (Variant a1)
                 => IAboveAverage a0
                 -> IO a1
getNumberFormat8 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat8 :: a1
                 -> IAboveAverage a0
                 -> IO ()
setNumberFormat8 rHS =
  propertySet "NumberFormat"
              [inVariant rHS]

setFirstPriority4 :: IAboveAverage a0
                  -> IO ()
setFirstPriority4 =
  method0 "SetFirstPriority"
          []

setLastPriority4 :: IAboveAverage a0
                 -> IO ()
setLastPriority4 =
  method0 "SetLastPriority"
          []

delete122 :: IAboveAverage a0
          -> IO ()
delete122 =
  method0 "Delete"
          []

modifyAppliesToRange4 :: Range a1
                      -> IAboveAverage a0
                      -> IO ()
modifyAppliesToRange4 range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

getPTCondition4 :: IAboveAverage a0
                -> IO Bool
getPTCondition4 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType4 :: IAboveAverage a0
              -> IO XlPivotConditionScope
getScopeType4 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType4 :: XlPivotConditionScope
              -> IAboveAverage a0
              -> IO ()
setScopeType4 rHS =
  propertySet "ScopeType"
              [inEnum rHS]

getCalcFor0 :: IAboveAverage a0
            -> IO XlCalcFor
getCalcFor0 =
  propertyGet "CalcFor"
              []
              outEnum

setCalcFor0 :: XlCalcFor
            -> IAboveAverage a0
            -> IO ()
setCalcFor0 rHS =
  propertySet "CalcFor"
              [inEnum rHS]

getNumStdDev :: IAboveAverage a0
             -> IO Int32
getNumStdDev =
  propertyGet "NumStdDev"
              []
              outInt32

setNumStdDev :: Int32
             -> IAboveAverage a0
             -> IO ()
setNumStdDev rHS =
  propertySet "NumStdDev"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IUniqueValues
-- 
-- --------------------------------------------------
data IUniqueValues_ a = IUniqueValues__ 
type IUniqueValues a = IDispatch (IUniqueValues_ a)
iidIUniqueValues :: IID (IUniqueValues ())
iidIUniqueValues = mkIID "{0002449F-0001-0000-C000-000000000046}"

getApplication252 :: (Variant a1)
                  => IUniqueValues a0
                  -> IO a1
getApplication252 =
  propertyGet "Application"
              []
              outVariant

getCreator252 :: IUniqueValues a0
              -> IO XlCreator
getCreator252 =
  propertyGet "Creator"
              []
              outEnum

getParent267 :: IUniqueValues a0
             -> IO (IDispatch ())
getParent267 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority5 :: IUniqueValues a0
             -> IO Int32
getPriority5 =
  propertyGet "Priority"
              []
              outInt32

setPriority5 :: Int32
             -> IUniqueValues a0
             -> IO ()
setPriority5 rHS =
  propertySet "Priority"
              [inInt32 rHS]

getStopIfTrue5 :: IUniqueValues a0
               -> IO Bool
getStopIfTrue5 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue2 :: Bool
               -> IUniqueValues a0
               -> IO ()
setStopIfTrue2 rHS =
  propertySet "StopIfTrue"
              [inBool rHS]

getAppliesTo5 :: IUniqueValues a0
              -> IO (Range ())
getAppliesTo5 =
  propertyGet "AppliesTo"
              []
              outIUnknown

getDupeUnique :: IUniqueValues a0
              -> IO XlDupeUnique
getDupeUnique =
  propertyGet "DupeUnique"
              []
              outEnum

setDupeUnique :: XlDupeUnique
              -> IUniqueValues a0
              -> IO ()
setDupeUnique rHS =
  propertySet "DupeUnique"
              [inEnum rHS]

getInterior43 :: IUniqueValues a0
              -> IO (Interior ())
getInterior43 =
  propertyGet "Interior"
              []
              outIUnknown

getBorders5 :: IUniqueValues a0
            -> IO (Borders ())
getBorders5 =
  propertyGet "Borders"
              []
              outIUnknown

getFont33 :: IUniqueValues a0
          -> IO (Font ())
getFont33 =
  propertyGet "Font"
              []
              outIUnknown

getType37 :: IUniqueValues a0
          -> IO Int32
getType37 =
  propertyGet "Type"
              []
              outInt32

getNumberFormat9 :: (Variant a1)
                 => IUniqueValues a0
                 -> IO a1
getNumberFormat9 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat9 :: a1
                 -> IUniqueValues a0
                 -> IO ()
setNumberFormat9 rHS =
  propertySet "NumberFormat"
              [inVariant rHS]

setFirstPriority5 :: IUniqueValues a0
                  -> IO ()
setFirstPriority5 =
  method0 "SetFirstPriority"
          []

setLastPriority5 :: IUniqueValues a0
                 -> IO ()
setLastPriority5 =
  method0 "SetLastPriority"
          []

delete123 :: IUniqueValues a0
          -> IO ()
delete123 =
  method0 "Delete"
          []

modifyAppliesToRange5 :: Range a1
                      -> IUniqueValues a0
                      -> IO ()
modifyAppliesToRange5 range =
  method0 "ModifyAppliesToRange"
          [inIUnknown range]

getPTCondition5 :: IUniqueValues a0
                -> IO Bool
getPTCondition5 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType5 :: IUniqueValues a0
              -> IO XlPivotConditionScope
getScopeType5 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType5 :: XlPivotConditionScope
              -> IUniqueValues a0
              -> IO ()
setScopeType5 rHS =
  propertySet "ScopeType"
              [inEnum rHS]

-- --------------------------------------------------
-- 
-- interface IRanges
-- 
-- --------------------------------------------------
data IRanges_ a = IRanges__ 
type IRanges a = IDispatch (IRanges_ a)
iidIRanges :: IID (IRanges ())
iidIRanges = mkIID "{000244A0-0001-0000-C000-000000000046}"

getApplication253 :: (Variant a1)
                  => IRanges a0
                  -> IO a1
getApplication253 =
  propertyGet "Application"
              []
              outVariant

getCreator253 :: IRanges a0
              -> IO XlCreator
getCreator253 =
  propertyGet "Creator"
              []
              outEnum

getParent268 :: IRanges a0
             -> IO (IDispatch ())
getParent268 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault101 :: a1
              -> IRanges a0
              -> IO (Range ())
getDefault101 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum59 :: IRanges a0
             -> IO (IUnknown ())
getNewEnum59 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem51 :: a1
          -> IRanges a0
          -> IO (Range ())
getItem51 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount105 :: IRanges a0
            -> IO Int32
getCount105 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IHeaderFooter
-- 
-- --------------------------------------------------
data IHeaderFooter_ a = IHeaderFooter__ 
type IHeaderFooter a = IDispatch (IHeaderFooter_ a)
iidIHeaderFooter :: IID (IHeaderFooter ())
iidIHeaderFooter = mkIID "{000244A1-0001-0000-C000-000000000046}"

getText35 :: IHeaderFooter a0
          -> IO String
getText35 =
  propertyGet "Text"
              []
              outString

setText34 :: String
          -> IHeaderFooter a0
          -> IO ()
setText34 rHS =
  propertySet "Text"
              [inString rHS]

getPicture :: IHeaderFooter a0
           -> IO (Graphic ())
getPicture =
  propertyGet "Picture"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPage
-- 
-- --------------------------------------------------
data IPage_ a = IPage__ 
type IPage a = IDispatch (IPage_ a)
iidIPage :: IID (IPage ())
iidIPage = mkIID "{000244A2-0001-0000-C000-000000000046}"

getLeftHeader0 :: IPage a0
               -> IO (HeaderFooter ())
getLeftHeader0 =
  propertyGet "LeftHeader"
              []
              outIUnknown

getCenterHeader0 :: IPage a0
                 -> IO (HeaderFooter ())
getCenterHeader0 =
  propertyGet "CenterHeader"
              []
              outIUnknown

getRightHeader0 :: IPage a0
                -> IO (HeaderFooter ())
getRightHeader0 =
  propertyGet "RightHeader"
              []
              outIUnknown

getLeftFooter0 :: IPage a0
               -> IO (HeaderFooter ())
getLeftFooter0 =
  propertyGet "LeftFooter"
              []
              outIUnknown

getCenterFooter0 :: IPage a0
                 -> IO (HeaderFooter ())
getCenterFooter0 =
  propertyGet "CenterFooter"
              []
              outIUnknown

getRightFooter0 :: IPage a0
                -> IO (HeaderFooter ())
getRightFooter0 =
  propertyGet "RightFooter"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IPages
-- 
-- --------------------------------------------------
data IPages_ a = IPages__ 
type IPages a = IDispatch (IPages_ a)
iidIPages :: IID (IPages ())
iidIPages = mkIID "{000244A3-0001-0000-C000-000000000046}"

getItem52 :: a1
          -> IPages a0
          -> IO (Page ())
getItem52 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getDefault102 :: a1
              -> IPages a0
              -> IO (Page ())
getDefault102 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getCount106 :: IPages a0
            -> IO Int32
getCount106 =
  propertyGet "Count"
              []
              outInt32

getNewEnum60 :: IPages a0
             -> IO (IUnknown ())
getNewEnum60 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IServerViewableItems
-- 
-- --------------------------------------------------
data IServerViewableItems_ a = IServerViewableItems__ 
type IServerViewableItems a = IDispatch (IServerViewableItems_ a)
iidIServerViewableItems :: IID (IServerViewableItems ())
iidIServerViewableItems =
  mkIID "{000244A4-0001-0000-C000-000000000046}"

getApplication254 :: (Variant a1)
                  => IServerViewableItems a0
                  -> IO a1
getApplication254 =
  propertyGet "Application"
              []
              outVariant

getCreator254 :: IServerViewableItems a0
              -> IO XlCreator
getCreator254 =
  propertyGet "Creator"
              []
              outEnum

getParent269 :: IServerViewableItems a0
             -> IO (IDispatch ())
getParent269 =
  propertyGet "Parent"
              []
              outIDispatch

getCount107 :: IServerViewableItems a0
            -> IO Int32
getCount107 =
  propertyGet "Count"
              []
              outInt32

add69 :: a1
      -> IServerViewableItems a0
      -> IO (IDispatch ())
add69 obj =
  function1 "Add"
            [inVariant obj]
            outIDispatch

delete124 :: a1
          -> IServerViewableItems a0
          -> IO ()
delete124 index0 =
  method0 "Delete"
          [inVariant index0]

deleteAll0 :: IServerViewableItems a0
           -> IO ()
deleteAll0 =
  method0 "DeleteAll"
          []

item51 :: a1
       -> IServerViewableItems a0
       -> IO (IDispatch ())
item51 index0 =
  function1 "Item"
            [inVariant index0]
            outIDispatch

getDefault103 :: a1
              -> IServerViewableItems a0
              -> IO (IDispatch ())
getDefault103 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

getNewEnum61 :: IServerViewableItems a0
             -> IO (IUnknown ())
getNewEnum61 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ITableStyleElement
-- 
-- --------------------------------------------------
data ITableStyleElement_ a = ITableStyleElement__ 
type ITableStyleElement a = IDispatch (ITableStyleElement_ a)
iidITableStyleElement :: IID (ITableStyleElement ())
iidITableStyleElement =
  mkIID "{000244A5-0001-0000-C000-000000000046}"

getApplication255 :: (Variant a1)
                  => ITableStyleElement a0
                  -> IO a1
getApplication255 =
  propertyGet "Application"
              []
              outVariant

getCreator255 :: ITableStyleElement a0
              -> IO XlCreator
getCreator255 =
  propertyGet "Creator"
              []
              outEnum

getParent270 :: ITableStyleElement a0
             -> IO (IDispatch ())
getParent270 =
  propertyGet "Parent"
              []
              outIDispatch

getHasFormat :: ITableStyleElement a0
             -> IO Bool
getHasFormat =
  propertyGet "HasFormat"
              []
              outBool

getInterior44 :: ITableStyleElement a0
              -> IO (Interior ())
getInterior44 =
  propertyGet "Interior"
              []
              outIUnknown

getBorders6 :: ITableStyleElement a0
            -> IO (Borders ())
getBorders6 =
  propertyGet "Borders"
              []
              outIUnknown

getFont34 :: ITableStyleElement a0
          -> IO (Font ())
getFont34 =
  propertyGet "Font"
              []
              outIUnknown

getStripeSize :: ITableStyleElement a0
              -> IO Int32
getStripeSize =
  propertyGet "StripeSize"
              []
              outInt32

setStripeSize :: Int32
              -> ITableStyleElement a0
              -> IO ()
setStripeSize rHS =
  propertySet "StripeSize"
              [inInt32 rHS]

clear4 :: ITableStyleElement a0
       -> IO ()
clear4 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- interface ITableStyleElements
-- 
-- --------------------------------------------------
data ITableStyleElements_ a = ITableStyleElements__ 
type ITableStyleElements a = IDispatch (ITableStyleElements_ a)
iidITableStyleElements :: IID (ITableStyleElements ())
iidITableStyleElements =
  mkIID "{000244A6-0001-0000-C000-000000000046}"

getApplication256 :: (Variant a1)
                  => ITableStyleElements a0
                  -> IO a1
getApplication256 =
  propertyGet "Application"
              []
              outVariant

getCreator256 :: ITableStyleElements a0
              -> IO XlCreator
getCreator256 =
  propertyGet "Creator"
              []
              outEnum

getParent271 :: ITableStyleElements a0
             -> IO (IDispatch ())
getParent271 =
  propertyGet "Parent"
              []
              outIDispatch

getCount108 :: ITableStyleElements a0
            -> IO Int32
getCount108 =
  propertyGet "Count"
              []
              outInt32

item52 :: XlTableStyleElementType
       -> ITableStyleElements a0
       -> IO (TableStyleElement ())
item52 index0 =
  function1 "Item"
            [inEnum index0]
            outIUnknown

getDefault104 :: XlTableStyleElementType
              -> ITableStyleElements a0
              -> IO (TableStyleElement ())
getDefault104 index0 =
  propertyGet "_Default"
              [inEnum index0]
              outIUnknown

getNewEnum62 :: ITableStyleElements a0
             -> IO (IUnknown ())
getNewEnum62 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ITableStyle
-- 
-- --------------------------------------------------
data ITableStyle_ a = ITableStyle__ 
type ITableStyle a = IDispatch (ITableStyle_ a)
iidITableStyle :: IID (ITableStyle ())
iidITableStyle = mkIID "{000244A7-0001-0000-C000-000000000046}"

getApplication257 :: (Variant a1)
                  => ITableStyle a0
                  -> IO a1
getApplication257 =
  propertyGet "Application"
              []
              outVariant

getCreator257 :: ITableStyle a0
              -> IO XlCreator
getCreator257 =
  propertyGet "Creator"
              []
              outEnum

getParent272 :: ITableStyle a0
             -> IO (IDispatch ())
getParent272 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault105 :: ITableStyle a0
              -> IO String
getDefault105 =
  propertyGet "_Default"
              []
              outString

getName78 :: ITableStyle a0
          -> IO String
getName78 =
  propertyGet "Name"
              []
              outString

getNameLocal1 :: ITableStyle a0
              -> IO String
getNameLocal1 =
  propertyGet "NameLocal"
              []
              outString

getBuiltIn3 :: ITableStyle a0
            -> IO Bool
getBuiltIn3 =
  propertyGet "BuiltIn"
              []
              outBool

getTableStyleElements :: ITableStyle a0
                      -> IO (TableStyleElements ())
getTableStyleElements =
  propertyGet "TableStyleElements"
              []
              outIUnknown

getShowAsAvailableTableStyle :: ITableStyle a0
                             -> IO Bool
getShowAsAvailableTableStyle =
  propertyGet "ShowAsAvailableTableStyle"
              []
              outBool

setShowAsAvailableTableStyle :: Bool
                             -> ITableStyle a0
                             -> IO ()
setShowAsAvailableTableStyle rHS =
  propertySet "ShowAsAvailableTableStyle"
              [inBool rHS]

getShowAsAvailablePivotTableStyle :: ITableStyle a0
                                  -> IO Bool
getShowAsAvailablePivotTableStyle =
  propertyGet "ShowAsAvailablePivotTableStyle"
              []
              outBool

setShowAsAvailablePivotTableStyle :: Bool
                                  -> ITableStyle a0
                                  -> IO ()
setShowAsAvailablePivotTableStyle rHS =
  propertySet "ShowAsAvailablePivotTableStyle"
              [inBool rHS]

delete125 :: ITableStyle a0
          -> IO ()
delete125 =
  method0 "Delete"
          []

duplicate42 :: (Variant a1)
            => a1
            -> ITableStyle a0
            -> IO (TableStyle ())
duplicate42 newTableStyleName =
  function1 "Duplicate"
            [inVariant newTableStyleName]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ITableStyles
-- 
-- --------------------------------------------------
data ITableStyles_ a = ITableStyles__ 
type ITableStyles a = IDispatch (ITableStyles_ a)
iidITableStyles :: IID (ITableStyles ())
iidITableStyles = mkIID "{000244A8-0001-0000-C000-000000000046}"

getApplication258 :: (Variant a1)
                  => ITableStyles a0
                  -> IO a1
getApplication258 =
  propertyGet "Application"
              []
              outVariant

getCreator258 :: ITableStyles a0
              -> IO XlCreator
getCreator258 =
  propertyGet "Creator"
              []
              outEnum

getParent273 :: ITableStyles a0
             -> IO (IDispatch ())
getParent273 =
  propertyGet "Parent"
              []
              outIDispatch

getCount109 :: ITableStyles a0
            -> IO Int32
getCount109 =
  propertyGet "Count"
              []
              outInt32

add70 :: String
      -> ITableStyles a0
      -> IO (TableStyle ())
add70 tableStyleName =
  function1 "Add"
            [inString tableStyleName]
            outIUnknown

item53 :: a1
       -> ITableStyles a0
       -> IO (TableStyle ())
item53 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault106 :: a1
              -> ITableStyles a0
              -> IO (TableStyle ())
getDefault106 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum63 :: ITableStyles a0
             -> IO (IUnknown ())
getNewEnum63 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISortField
-- 
-- --------------------------------------------------
data ISortField_ a = ISortField__ 
type ISortField a = IDispatch (ISortField_ a)
iidISortField :: IID (ISortField ())
iidISortField = mkIID "{000244A9-0001-0000-C000-000000000046}"

getApplication259 :: (Variant a1)
                  => ISortField a0
                  -> IO a1
getApplication259 =
  propertyGet "Application"
              []
              outVariant

getCreator259 :: ISortField a0
              -> IO XlCreator
getCreator259 =
  propertyGet "Creator"
              []
              outEnum

getParent274 :: ISortField a0
             -> IO (IDispatch ())
getParent274 =
  propertyGet "Parent"
              []
              outIDispatch

getSortOn :: ISortField a0
          -> IO XlSortOn
getSortOn =
  propertyGet "SortOn"
              []
              outEnum

setSortOn :: XlSortOn
          -> ISortField a0
          -> IO ()
setSortOn rHS =
  propertySet "SortOn"
              [inEnum rHS]

getSortOnValue :: ISortField a0
               -> IO (IDispatch ())
getSortOnValue =
  propertyGet "SortOnValue"
              []
              outIDispatch

getKey :: ISortField a0
       -> IO (Range ())
getKey =
  propertyGet "Key"
              []
              outIUnknown

getOrder2 :: ISortField a0
          -> IO XlSortOrder
getOrder2 =
  propertyGet "Order"
              []
              outEnum

setOrder2 :: XlSortOrder
          -> ISortField a0
          -> IO ()
setOrder2 rHS =
  propertySet "Order"
              [inEnum rHS]

getCustomOrder :: (Variant a1)
               => ISortField a0
               -> IO a1
getCustomOrder =
  propertyGet "CustomOrder"
              []
              outVariant

setCustomOrder :: a1
               -> ISortField a0
               -> IO ()
setCustomOrder rHS =
  propertySet "CustomOrder"
              [inVariant rHS]

getDataOption :: ISortField a0
              -> IO XlSortDataOption
getDataOption =
  propertyGet "DataOption"
              []
              outEnum

setDataOption :: XlSortDataOption
              -> ISortField a0
              -> IO ()
setDataOption rHS =
  propertySet "DataOption"
              [inEnum rHS]

getPriority6 :: ISortField a0
             -> IO Int32
getPriority6 =
  propertyGet "Priority"
              []
              outInt32

setPriority6 :: Int32
             -> ISortField a0
             -> IO ()
setPriority6 rHS =
  propertySet "Priority"
              [inInt32 rHS]

delete126 :: ISortField a0
          -> IO ()
delete126 =
  method0 "Delete"
          []

modifyKey :: Range a1
          -> ISortField a0
          -> IO ()
modifyKey key =
  method0 "ModifyKey"
          [inIUnknown key]

setIcon :: Icon a1
        -> ISortField a0
        -> IO ()
setIcon icon =
  method0 "SetIcon"
          [inIUnknown icon]

-- --------------------------------------------------
-- 
-- interface ISortFields
-- 
-- --------------------------------------------------
data ISortFields_ a = ISortFields__ 
type ISortFields a = IDispatch (ISortFields_ a)
iidISortFields :: IID (ISortFields ())
iidISortFields = mkIID "{000244AA-0001-0000-C000-000000000046}"

getApplication260 :: (Variant a1)
                  => ISortFields a0
                  -> IO a1
getApplication260 =
  propertyGet "Application"
              []
              outVariant

getCreator260 :: ISortFields a0
              -> IO XlCreator
getCreator260 =
  propertyGet "Creator"
              []
              outEnum

getParent275 :: ISortFields a0
             -> IO (IDispatch ())
getParent275 =
  propertyGet "Parent"
              []
              outIDispatch

add71 :: (Variant a2, Variant a3, Variant a4, Variant a5)
      => Range a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> ISortFields a0
      -> IO (SortField ())
add71 key sortOn order customOrder dataOption =
  function1 "Add"
            [ inIUnknown key
            , inVariant sortOn
            , inVariant order
            , inVariant customOrder
            , inVariant dataOption
            ]
            outIUnknown

getItem53 :: a1
          -> ISortFields a0
          -> IO (SortField ())
getItem53 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

getCount110 :: ISortFields a0
            -> IO Int32
getCount110 =
  propertyGet "Count"
              []
              outInt32

clear5 :: ISortFields a0
       -> IO ()
clear5 =
  method0 "Clear"
          []

getDefault107 :: a1
              -> ISortFields a0
              -> IO (SortField ())
getDefault107 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum64 :: ISortFields a0
             -> IO (IUnknown ())
getNewEnum64 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ISort
-- 
-- --------------------------------------------------
data ISort_ a = ISort__ 
type ISort a = IDispatch (ISort_ a)
iidISort :: IID (ISort ())
iidISort = mkIID "{000244AB-0001-0000-C000-000000000046}"

getApplication261 :: (Variant a1)
                  => ISort a0
                  -> IO a1
getApplication261 =
  propertyGet "Application"
              []
              outVariant

getCreator261 :: ISort a0
              -> IO XlCreator
getCreator261 =
  propertyGet "Creator"
              []
              outEnum

getParent276 :: ISort a0
             -> IO (IDispatch ())
getParent276 =
  propertyGet "Parent"
              []
              outIDispatch

getRng :: ISort a0
       -> IO (Range ())
getRng =
  propertyGet "Rng"
              []
              outIUnknown

getHeader :: ISort a0
          -> IO XlYesNoGuess
getHeader =
  propertyGet "Header"
              []
              outEnum

setHeader :: XlYesNoGuess
          -> ISort a0
          -> IO ()
setHeader rHS =
  propertySet "Header"
              [inEnum rHS]

getMatchCase :: ISort a0
             -> IO Bool
getMatchCase =
  propertyGet "MatchCase"
              []
              outBool

setMatchCase :: Bool
             -> ISort a0
             -> IO ()
setMatchCase rHS =
  propertySet "MatchCase"
              [inBool rHS]

getOrientation28 :: ISort a0
                 -> IO XlSortOrientation
getOrientation28 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation28 :: XlSortOrientation
                 -> ISort a0
                 -> IO ()
setOrientation28 rHS =
  propertySet "Orientation"
              [inEnum rHS]

getSortMethod :: ISort a0
              -> IO XlSortMethod
getSortMethod =
  propertyGet "SortMethod"
              []
              outEnum

setSortMethod :: XlSortMethod
              -> ISort a0
              -> IO ()
setSortMethod rHS =
  propertySet "SortMethod"
              [inEnum rHS]

getSortFields :: ISort a0
              -> IO (SortFields ())
getSortFields =
  propertyGet "SortFields"
              []
              outIUnknown

setRange0 :: Range a1
          -> ISort a0
          -> IO ()
setRange0 rng =
  method0 "SetRange"
          [inIUnknown rng]

apply1 :: ISort a0
       -> IO ()
apply1 =
  method0 "Apply"
          []

-- --------------------------------------------------
-- 
-- interface IResearch
-- 
-- --------------------------------------------------
data IResearch_ a = IResearch__ 
type IResearch a = IDispatch (IResearch_ a)
iidIResearch :: IID (IResearch ())
iidIResearch = mkIID "{000244AC-0001-0000-C000-000000000046}"

getApplication262 :: (Variant a1)
                  => IResearch a0
                  -> IO a1
getApplication262 =
  propertyGet "Application"
              []
              outVariant

getCreator262 :: IResearch a0
              -> IO XlCreator
getCreator262 =
  propertyGet "Creator"
              []
              outEnum

getParent277 :: IResearch a0
             -> IO (IDispatch ())
getParent277 =
  propertyGet "Parent"
              []
              outIDispatch

query :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
      => String
      -> a2
      -> a3
      -> a4
      -> a5
      -> IResearch a0
      -> IO a1
query serviceID queryString queryLanguage useSelection launchQuery =
  function1 "Query"
            [ inString serviceID
            , inVariant queryString
            , inVariant queryLanguage
            , inVariant useSelection
            , inVariant launchQuery
            ]
            outVariant

isResearchService :: String
                  -> IResearch a0
                  -> IO Bool
isResearchService serviceID =
  function1 "IsResearchService"
            [inString serviceID]
            outBool

setLanguagePair :: (Variant a1)
                => Int32
                -> Int32
                -> IResearch a0
                -> IO a1
setLanguagePair languageFrom languageTo =
  function1 "SetLanguagePair"
            [ inInt32 languageFrom
            , inInt32 languageTo
            ]
            outVariant

-- --------------------------------------------------
-- 
-- interface IColorStop
-- 
-- --------------------------------------------------
data IColorStop_ a = IColorStop__ 
type IColorStop a = IDispatch (IColorStop_ a)
iidIColorStop :: IID (IColorStop ())
iidIColorStop = mkIID "{000244AD-0001-0000-C000-000000000046}"

getApplication263 :: (Variant a1)
                  => IColorStop a0
                  -> IO a1
getApplication263 =
  propertyGet "Application"
              []
              outVariant

getCreator263 :: IColorStop a0
              -> IO XlCreator
getCreator263 =
  propertyGet "Creator"
              []
              outEnum

getParent278 :: IColorStop a0
             -> IO (IDispatch ())
getParent278 =
  propertyGet "Parent"
              []
              outIDispatch

delete127 :: IColorStop a0
          -> IO ()
delete127 =
  method0 "Delete"
          []

getColor5 :: (Variant a1)
          => IColorStop a0
          -> IO a1
getColor5 =
  propertyGet "Color"
              []
              outVariant

setColor5 :: a1
          -> IColorStop a0
          -> IO ()
setColor5 rHS =
  propertySet "Color"
              [inVariant rHS]

getThemeColor5 :: IColorStop a0
               -> IO Int32
getThemeColor5 =
  propertyGet "ThemeColor"
              []
              outInt32

setThemeColor5 :: Int32
               -> IColorStop a0
               -> IO ()
setThemeColor5 rHS =
  propertySet "ThemeColor"
              [inInt32 rHS]

getTintAndShade6 :: (Variant a1)
                 => IColorStop a0
                 -> IO a1
getTintAndShade6 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade6 :: a1
                 -> IColorStop a0
                 -> IO ()
setTintAndShade6 rHS =
  propertySet "TintAndShade"
              [inVariant rHS]

getPosition11 :: IColorStop a0
              -> IO Double
getPosition11 =
  propertyGet "Position"
              []
              outDouble

setPosition11 :: Double
              -> IColorStop a0
              -> IO ()
setPosition11 rHS =
  propertySet "Position"
              [inDouble rHS]

-- --------------------------------------------------
-- 
-- interface IColorStops
-- 
-- --------------------------------------------------
data IColorStops_ a = IColorStops__ 
type IColorStops a = IDispatch (IColorStops_ a)
iidIColorStops :: IID (IColorStops ())
iidIColorStops = mkIID "{000244AE-0001-0000-C000-000000000046}"

getApplication264 :: (Variant a1)
                  => IColorStops a0
                  -> IO a1
getApplication264 =
  propertyGet "Application"
              []
              outVariant

getCreator264 :: IColorStops a0
              -> IO XlCreator
getCreator264 =
  propertyGet "Creator"
              []
              outEnum

getParent279 :: IColorStops a0
             -> IO (IDispatch ())
getParent279 =
  propertyGet "Parent"
              []
              outIDispatch

getCount111 :: IColorStops a0
            -> IO Int32
getCount111 =
  propertyGet "Count"
              []
              outInt32

add72 :: Double
      -> IColorStops a0
      -> IO (ColorStop ())
add72 position =
  function1 "Add"
            [inDouble position]
            outIUnknown

item54 :: a1
       -> IColorStops a0
       -> IO (ColorStop ())
item54 index0 =
  function1 "Item"
            [inVariant index0]
            outIUnknown

getDefault108 :: a1
              -> IColorStops a0
              -> IO (ColorStop ())
getDefault108 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum65 :: IColorStops a0
             -> IO (IUnknown ())
getNewEnum65 =
  propertyGet "_NewEnum"
              []
              outIUnknown

clear6 :: IColorStops a0
       -> IO ()
clear6 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- interface ILinearGradient
-- 
-- --------------------------------------------------
data ILinearGradient_ a = ILinearGradient__ 
type ILinearGradient a = IDispatch (ILinearGradient_ a)
iidILinearGradient :: IID (ILinearGradient ())
iidILinearGradient = mkIID "{000244AF-0001-0000-C000-000000000046}"

getApplication265 :: (Variant a1)
                  => ILinearGradient a0
                  -> IO a1
getApplication265 =
  propertyGet "Application"
              []
              outVariant

getCreator265 :: ILinearGradient a0
              -> IO XlCreator
getCreator265 =
  propertyGet "Creator"
              []
              outEnum

getParent280 :: ILinearGradient a0
             -> IO (IDispatch ())
getParent280 =
  propertyGet "Parent"
              []
              outIDispatch

getColorStops :: ILinearGradient a0
              -> IO (ColorStops ())
getColorStops =
  propertyGet "ColorStops"
              []
              outIUnknown

getDegree :: ILinearGradient a0
          -> IO Double
getDegree =
  propertyGet "Degree"
              []
              outDouble

setDegree :: Double
          -> ILinearGradient a0
          -> IO ()
setDegree rHS =
  propertySet "Degree"
              [inDouble rHS]

-- --------------------------------------------------
-- 
-- interface IRectangularGradient
-- 
-- --------------------------------------------------
data IRectangularGradient_ a = IRectangularGradient__ 
type IRectangularGradient a = IDispatch (IRectangularGradient_ a)
iidIRectangularGradient :: IID (IRectangularGradient ())
iidIRectangularGradient =
  mkIID "{000244B0-0001-0000-C000-000000000046}"

getApplication266 :: (Variant a1)
                  => IRectangularGradient a0
                  -> IO a1
getApplication266 =
  propertyGet "Application"
              []
              outVariant

getCreator266 :: IRectangularGradient a0
              -> IO XlCreator
getCreator266 =
  propertyGet "Creator"
              []
              outEnum

getParent281 :: IRectangularGradient a0
             -> IO (IDispatch ())
getParent281 =
  propertyGet "Parent"
              []
              outIDispatch

getColorStops0 :: IRectangularGradient a0
               -> IO (ColorStops ())
getColorStops0 =
  propertyGet "ColorStops"
              []
              outIUnknown

getRectangleTop :: IRectangularGradient a0
                -> IO Double
getRectangleTop =
  propertyGet "RectangleTop"
              []
              outDouble

setRectangleTop :: Double
                -> IRectangularGradient a0
                -> IO ()
setRectangleTop rHS =
  propertySet "RectangleTop"
              [inDouble rHS]

getRectangleBottom :: IRectangularGradient a0
                   -> IO Double
getRectangleBottom =
  propertyGet "RectangleBottom"
              []
              outDouble

setRectangleBottom :: Double
                   -> IRectangularGradient a0
                   -> IO ()
setRectangleBottom rHS =
  propertySet "RectangleBottom"
              [inDouble rHS]

getRectangleLeft :: IRectangularGradient a0
                 -> IO Double
getRectangleLeft =
  propertyGet "RectangleLeft"
              []
              outDouble

setRectangleLeft :: Double
                 -> IRectangularGradient a0
                 -> IO ()
setRectangleLeft rHS =
  propertySet "RectangleLeft"
              [inDouble rHS]

getRectangleRight :: IRectangularGradient a0
                  -> IO Double
getRectangleRight =
  propertyGet "RectangleRight"
              []
              outDouble

setRectangleRight :: Double
                  -> IRectangularGradient a0
                  -> IO ()
setRectangleRight rHS =
  propertySet "RectangleRight"
              [inDouble rHS]

-- --------------------------------------------------
-- 
-- interface IMultiThreadedCalculation
-- 
-- --------------------------------------------------
data IMultiThreadedCalculation_ a = IMultiThreadedCalculation__ 
type IMultiThreadedCalculation a = IDispatch (IMultiThreadedCalculation_ a)
iidIMultiThreadedCalculation :: IID (IMultiThreadedCalculation ())
iidIMultiThreadedCalculation =
  mkIID "{000244B1-0001-0000-C000-000000000046}"

getApplication267 :: (Variant a1)
                  => IMultiThreadedCalculation a0
                  -> IO a1
getApplication267 =
  propertyGet "Application"
              []
              outVariant

getCreator267 :: IMultiThreadedCalculation a0
              -> IO XlCreator
getCreator267 =
  propertyGet "Creator"
              []
              outEnum

getParent282 :: IMultiThreadedCalculation a0
             -> IO (IDispatch ())
getParent282 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled46 :: IMultiThreadedCalculation a0
             -> IO Bool
getEnabled46 =
  propertyGet "Enabled"
              []
              outBool

setEnabled46 :: Bool
             -> IMultiThreadedCalculation a0
             -> IO ()
setEnabled46 rHS =
  propertySet "Enabled"
              [inBool rHS]

getThreadMode :: IMultiThreadedCalculation a0
              -> IO XlThreadMode
getThreadMode =
  propertyGet "ThreadMode"
              []
              outEnum

setThreadMode :: XlThreadMode
              -> IMultiThreadedCalculation a0
              -> IO ()
setThreadMode rHS =
  propertySet "ThreadMode"
              [inEnum rHS]

getThreadCount :: IMultiThreadedCalculation a0
               -> IO Int32
getThreadCount =
  propertyGet "ThreadCount"
              []
              outInt32

setThreadCount :: Int32
               -> IMultiThreadedCalculation a0
               -> IO ()
setThreadCount rHS =
  propertySet "ThreadCount"
              [inInt32 rHS]

-- --------------------------------------------------
-- 
-- interface IChartFormat
-- 
-- --------------------------------------------------
data IChartFormat_ a = IChartFormat__ 
type IChartFormat a = IDispatch (IChartFormat_ a)
iidIChartFormat :: IID (IChartFormat ())
iidIChartFormat = mkIID "{000244B2-0001-0000-C000-000000000046}"

getApplication268 :: (Variant a1)
                  => IChartFormat a0
                  -> IO a1
getApplication268 =
  propertyGet "Application"
              []
              outVariant

getCreator268 :: IChartFormat a0
              -> IO XlCreator
getCreator268 =
  propertyGet "Creator"
              []
              outEnum

getParent283 :: IChartFormat a0
             -> IO (IDispatch ())
getParent283 =
  propertyGet "Parent"
              []
              outIDispatch

getFill16 :: IChartFormat a0
          -> IO (FillFormat ())
getFill16 =
  propertyGet "Fill"
              []
              outIUnknown

getGlow1 :: (Variant a1)
         => IChartFormat a0
         -> IO a1
getGlow1 =
  propertyGet "Glow"
              []
              outVariant

getLine1 :: IChartFormat a0
         -> IO (LineFormat ())
getLine1 =
  propertyGet "Line"
              []
              outIUnknown

getPictureFormat1 :: IChartFormat a0
                  -> IO (PictureFormat ())
getPictureFormat1 =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow29 :: IChartFormat a0
            -> IO (ShadowFormat ())
getShadow29 =
  propertyGet "Shadow"
              []
              outIUnknown

getSoftEdge1 :: (Variant a1)
             => IChartFormat a0
             -> IO a1
getSoftEdge1 =
  propertyGet "SoftEdge"
              []
              outVariant

getTextFrame21 :: IChartFormat a0
               -> IO (TextFrame2 ())
getTextFrame21 =
  propertyGet "TextFrame2"
              []
              outIUnknown

getThreeD2 :: IChartFormat a0
           -> IO (ThreeDFormat ())
getThreeD2 =
  propertyGet "ThreeD"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface IFileExportConverter
-- 
-- --------------------------------------------------
data IFileExportConverter_ a = IFileExportConverter__ 
type IFileExportConverter a = IDispatch (IFileExportConverter_ a)
iidIFileExportConverter :: IID (IFileExportConverter ())
iidIFileExportConverter =
  mkIID "{000244B3-0001-0000-C000-000000000046}"

getApplication269 :: (Variant a1)
                  => IFileExportConverter a0
                  -> IO a1
getApplication269 =
  propertyGet "Application"
              []
              outVariant

getCreator269 :: IFileExportConverter a0
              -> IO XlCreator
getCreator269 =
  propertyGet "Creator"
              []
              outEnum

getParent284 :: IFileExportConverter a0
             -> IO (IDispatch ())
getParent284 =
  propertyGet "Parent"
              []
              outIDispatch

getExtensions :: IFileExportConverter a0
              -> IO String
getExtensions =
  propertyGet "Extensions"
              []
              outString

getDescription1 :: IFileExportConverter a0
                -> IO String
getDescription1 =
  propertyGet "Description"
              []
              outString

getFileFormat0 :: IFileExportConverter a0
               -> IO Int32
getFileFormat0 =
  propertyGet "FileFormat"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IFileExportConverters
-- 
-- --------------------------------------------------
data IFileExportConverters_ a = IFileExportConverters__ 
type IFileExportConverters a = IDispatch (IFileExportConverters_ a)
iidIFileExportConverters :: IID (IFileExportConverters ())
iidIFileExportConverters =
  mkIID "{000244B4-0001-0000-C000-000000000046}"

getApplication270 :: (Variant a1)
                  => IFileExportConverters a0
                  -> IO a1
getApplication270 =
  propertyGet "Application"
              []
              outVariant

getCreator270 :: IFileExportConverters a0
              -> IO XlCreator
getCreator270 =
  propertyGet "Creator"
              []
              outEnum

getParent285 :: IFileExportConverters a0
             -> IO (IDispatch ())
getParent285 =
  propertyGet "Parent"
              []
              outIDispatch

getCount112 :: IFileExportConverters a0
            -> IO Int32
getCount112 =
  propertyGet "Count"
              []
              outInt32

getDefault109 :: a1
              -> IFileExportConverters a0
              -> IO (FileExportConverter ())
getDefault109 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIUnknown

getNewEnum66 :: IFileExportConverters a0
             -> IO (IUnknown ())
getNewEnum66 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem54 :: a1
          -> IFileExportConverters a0
          -> IO (FileExportConverter ())
getItem54 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Font
-- 
-- --------------------------------------------------
data Font_ a = Font__ 
type Font a = IDispatch (Font_ a)
iidFont :: IID (Font ())
iidFont = mkIID "{0002084D-0000-0000-C000-000000000046}"

queryInterface :: (Variant a1)
               => GUID
               -> Font a0
               -> IO a1
queryInterface riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef :: Font a0
       -> IO Word32
addRef =
  function1 "AddRef"
            []
            outWord32

release :: Font a0
        -> IO Word32
release =
  function1 "Release"
            []
            outWord32

getTypeInfoCount :: Font a0
                 -> IO Word32
getTypeInfoCount =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo :: (Variant a1)
            => Word32
            -> Word32
            -> Font a0
            -> IO a1
getTypeInfo itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames :: GUID
              -> Char
              -> Word32
              -> Word32
              -> Font a0
              -> IO Int32
getIDsOfNames riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke :: (Variant a1, Variant a2, Variant a3)
       => Int32
       -> GUID
       -> Word32
       -> Word16
       -> a3
       -> Font a0
       -> IO (a1, a2, Word32)
invoke dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication271 :: (Variant a1)
                  => Font a0
                  -> IO a1
getApplication271 =
  propertyGet "Application"
              []
              outVariant

getCreator271 :: Font a0
              -> IO XlCreator
getCreator271 =
  propertyGet "Creator"
              []
              outEnum

getParent286 :: Font a0
             -> IO (IDispatch ())
getParent286 =
  propertyGet "Parent"
              []
              outIDispatch

getBackground0 :: Font a0
               -> IO a1
getBackground0 =
  propertyGet "Background"
              []
              outVariant

setBackground0 :: a1
               -> Font a0
               -> IO ()
setBackground0 rhs =
  propertySet "Background"
              [inVariant rhs]

getBold0 :: Font a0
         -> IO a1
getBold0 =
  propertyGet "Bold"
              []
              outVariant

setBold0 :: a1
         -> Font a0
         -> IO ()
setBold0 rhs =
  propertySet "Bold"
              [inVariant rhs]

getColor6 :: Font a0
          -> IO a1
getColor6 =
  propertyGet "Color"
              []
              outVariant

setColor6 :: a1
          -> Font a0
          -> IO ()
setColor6 rhs =
  propertySet "Color"
              [inVariant rhs]

getColorIndex5 :: Font a0
               -> IO a1
getColorIndex5 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex5 :: a1
               -> Font a0
               -> IO ()
setColorIndex5 rhs =
  propertySet "ColorIndex"
              [inVariant rhs]

getFontStyle0 :: Font a0
              -> IO a1
getFontStyle0 =
  propertyGet "FontStyle"
              []
              outVariant

setFontStyle0 :: a1
              -> Font a0
              -> IO ()
setFontStyle0 rhs =
  propertySet "FontStyle"
              [inVariant rhs]

getItalic0 :: Font a0
           -> IO a1
getItalic0 =
  propertyGet "Italic"
              []
              outVariant

setItalic0 :: a1
           -> Font a0
           -> IO ()
setItalic0 rhs =
  propertySet "Italic"
              [inVariant rhs]

getName79 :: Font a0
          -> IO a1
getName79 =
  propertyGet "Name"
              []
              outVariant

setName43 :: a1
          -> Font a0
          -> IO ()
setName43 rhs =
  propertySet "Name"
              [inVariant rhs]

getOutlineFont0 :: Font a0
                -> IO a1
getOutlineFont0 =
  propertyGet "OutlineFont"
              []
              outVariant

setOutlineFont0 :: a1
                -> Font a0
                -> IO ()
setOutlineFont0 rhs =
  propertySet "OutlineFont"
              [inVariant rhs]

getShadow30 :: Font a0
            -> IO a1
getShadow30 =
  propertyGet "Shadow"
              []
              outVariant

setShadow27 :: a1
            -> Font a0
            -> IO ()
setShadow27 rhs =
  propertySet "Shadow"
              [inVariant rhs]

getSize1 :: Font a0
         -> IO a1
getSize1 =
  propertyGet "Size"
              []
              outVariant

setSize1 :: a1
         -> Font a0
         -> IO ()
setSize1 rhs =
  propertySet "Size"
              [inVariant rhs]

getStrikethrough0 :: Font a0
                  -> IO a1
getStrikethrough0 =
  propertyGet "Strikethrough"
              []
              outVariant

setStrikethrough0 :: a1
                  -> Font a0
                  -> IO ()
setStrikethrough0 rhs =
  propertySet "Strikethrough"
              [inVariant rhs]

getSubscript0 :: Font a0
              -> IO a1
getSubscript0 =
  propertyGet "Subscript"
              []
              outVariant

setSubscript0 :: a1
              -> Font a0
              -> IO ()
setSubscript0 rhs =
  propertySet "Subscript"
              [inVariant rhs]

getSuperscript0 :: Font a0
                -> IO a1
getSuperscript0 =
  propertyGet "Superscript"
              []
              outVariant

setSuperscript0 :: a1
                -> Font a0
                -> IO ()
setSuperscript0 rhs =
  propertySet "Superscript"
              [inVariant rhs]

getUnderline0 :: Font a0
              -> IO a1
getUnderline0 =
  propertyGet "Underline"
              []
              outVariant

setUnderline0 :: a1
              -> Font a0
              -> IO ()
setUnderline0 rhs =
  propertySet "Underline"
              [inVariant rhs]

getThemeColor6 :: Font a0
               -> IO a1
getThemeColor6 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor6 :: a1
               -> Font a0
               -> IO ()
setThemeColor6 rhs =
  propertySet "ThemeColor"
              [inVariant rhs]

getTintAndShade7 :: Font a0
                 -> IO a1
getTintAndShade7 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade7 :: a1
                 -> Font a0
                 -> IO ()
setTintAndShade7 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

getThemeFont0 :: Font a0
              -> IO XlThemeFont
getThemeFont0 =
  propertyGet "ThemeFont"
              []
              outEnum

setThemeFont0 :: XlThemeFont
              -> Font a0
              -> IO ()
setThemeFont0 rhs =
  propertySet "ThemeFont"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface Window
-- 
-- --------------------------------------------------
data Window_ a = Window__ 
type Window a = IDispatch (Window_ a)
iidWindow :: IID (Window ())
iidWindow = mkIID "{00020893-0000-0000-C000-000000000046}"

queryInterface0 :: (Variant a1)
                => GUID
                -> Window a0
                -> IO a1
queryInterface0 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef0 :: Window a0
        -> IO Word32
addRef0 =
  function1 "AddRef"
            []
            outWord32

release0 :: Window a0
         -> IO Word32
release0 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount0 :: Window a0
                  -> IO Word32
getTypeInfoCount0 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo0 :: (Variant a1)
             => Word32
             -> Word32
             -> Window a0
             -> IO a1
getTypeInfo0 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames0 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> Window a0
               -> IO Int32
getIDsOfNames0 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke0 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> Window a0
        -> IO (a1, a2, Word32)
invoke0 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication272 :: (Variant a1)
                  => Window a0
                  -> IO a1
getApplication272 =
  propertyGet "Application"
              []
              outVariant

getCreator272 :: Window a0
              -> IO XlCreator
getCreator272 =
  propertyGet "Creator"
              []
              outEnum

getParent287 :: Window a0
             -> IO (IDispatch ())
getParent287 =
  propertyGet "Parent"
              []
              outIDispatch

activate14 :: Window a0
           -> IO a1
activate14 =
  function1 "Activate"
            []
            outVariant

activateNext0 :: Window a0
              -> IO a1
activateNext0 =
  function1 "ActivateNext"
            []
            outVariant

activatePrevious0 :: Window a0
                  -> IO a1
activatePrevious0 =
  function1 "ActivatePrevious"
            []
            outVariant

getActiveCell2 :: Window a0
               -> IO (Range ())
getActiveCell2 =
  propertyGet "ActiveCell"
              []
              outIUnknown

getActiveChart3 :: (Variant a1)
                => Window a0
                -> IO a1
getActiveChart3 =
  propertyGet "ActiveChart"
              []
              outVariant

getActivePane0 :: Window a0
               -> IO (Pane ())
getActivePane0 =
  propertyGet "ActivePane"
              []
              outIUnknown

getActiveSheet3 :: Window a0
                -> IO (IDispatch ())
getActiveSheet3 =
  propertyGet "ActiveSheet"
              []
              outIDispatch

getCaption40 :: Window a0
             -> IO a1
getCaption40 =
  propertyGet "Caption"
              []
              outVariant

setCaption38 :: a1
             -> Window a0
             -> IO ()
setCaption38 rhs =
  propertySet "Caption"
              [inVariant rhs]

close2 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Window a0
       -> IO Bool
close2 saveChanges filename routeWorkbook =
  function1 "Close"
            [ inVariant saveChanges
            , inVariant filename
            , inVariant routeWorkbook
            ]
            outBool

getDisplayFormulas1 :: Window a0
                    -> IO Bool
getDisplayFormulas1 =
  propertyGet "DisplayFormulas"
              []
              outBool

setDisplayFormulas1 :: Bool
                    -> Window a0
                    -> IO ()
setDisplayFormulas1 rhs =
  propertySet "DisplayFormulas"
              [inBool rhs]

getDisplayGridlines1 :: Window a0
                     -> IO Bool
getDisplayGridlines1 =
  propertyGet "DisplayGridlines"
              []
              outBool

setDisplayGridlines1 :: Bool
                     -> Window a0
                     -> IO ()
setDisplayGridlines1 rhs =
  propertySet "DisplayGridlines"
              [inBool rhs]

getDisplayHeadings1 :: Window a0
                    -> IO Bool
getDisplayHeadings1 =
  propertyGet "DisplayHeadings"
              []
              outBool

setDisplayHeadings1 :: Bool
                    -> Window a0
                    -> IO ()
setDisplayHeadings1 rhs =
  propertySet "DisplayHeadings"
              [inBool rhs]

getDisplayHorizontalScrollBar0 :: Window a0
                               -> IO Bool
getDisplayHorizontalScrollBar0 =
  propertyGet "DisplayHorizontalScrollBar"
              []
              outBool

setDisplayHorizontalScrollBar0 :: Bool
                               -> Window a0
                               -> IO ()
setDisplayHorizontalScrollBar0 rhs =
  propertySet "DisplayHorizontalScrollBar"
              [inBool rhs]

getDisplayOutline1 :: Window a0
                   -> IO Bool
getDisplayOutline1 =
  propertyGet "DisplayOutline"
              []
              outBool

setDisplayOutline1 :: Bool
                   -> Window a0
                   -> IO ()
setDisplayOutline1 rhs =
  propertySet "DisplayOutline"
              [inBool rhs]

getDisplayRightToLeft6 :: Window a0
                       -> IO Bool
getDisplayRightToLeft6 =
  propertyGet "_DisplayRightToLeft"
              []
              outBool

setDisplayRightToLeft5 :: Bool
                       -> Window a0
                       -> IO ()
setDisplayRightToLeft5 rhs =
  propertySet "_DisplayRightToLeft"
              [inBool rhs]

getDisplayVerticalScrollBar3 :: Window a0
                             -> IO Bool
getDisplayVerticalScrollBar3 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar3 :: Bool
                             -> Window a0
                             -> IO ()
setDisplayVerticalScrollBar3 rhs =
  propertySet "DisplayVerticalScrollBar"
              [inBool rhs]

getDisplayWorkbookTabs0 :: Window a0
                        -> IO Bool
getDisplayWorkbookTabs0 =
  propertyGet "DisplayWorkbookTabs"
              []
              outBool

setDisplayWorkbookTabs0 :: Bool
                        -> Window a0
                        -> IO ()
setDisplayWorkbookTabs0 rhs =
  propertySet "DisplayWorkbookTabs"
              [inBool rhs]

getDisplayZeros1 :: Window a0
                 -> IO Bool
getDisplayZeros1 =
  propertyGet "DisplayZeros"
              []
              outBool

setDisplayZeros1 :: Bool
                 -> Window a0
                 -> IO ()
setDisplayZeros1 rhs =
  propertySet "DisplayZeros"
              [inBool rhs]

getEnableResize0 :: Window a0
                 -> IO Bool
getEnableResize0 =
  propertyGet "EnableResize"
              []
              outBool

setEnableResize0 :: Bool
                 -> Window a0
                 -> IO ()
setEnableResize0 rhs =
  propertySet "EnableResize"
              [inBool rhs]

getFreezePanes0 :: Window a0
                -> IO Bool
getFreezePanes0 =
  propertyGet "FreezePanes"
              []
              outBool

setFreezePanes0 :: Bool
                -> Window a0
                -> IO ()
setFreezePanes0 rhs =
  propertySet "FreezePanes"
              [inBool rhs]

getGridlineColor0 :: Window a0
                  -> IO Int32
getGridlineColor0 =
  propertyGet "GridlineColor"
              []
              outInt32

setGridlineColor0 :: Int32
                  -> Window a0
                  -> IO ()
setGridlineColor0 rhs =
  propertySet "GridlineColor"
              [inInt32 rhs]

getGridlineColorIndex0 :: Window a0
                       -> IO XlColorIndex
getGridlineColorIndex0 =
  propertyGet "GridlineColorIndex"
              []
              outEnum

setGridlineColorIndex0 :: XlColorIndex
                       -> Window a0
                       -> IO ()
setGridlineColorIndex0 rhs =
  propertySet "GridlineColorIndex"
              [inEnum rhs]

getHeight54 :: Window a0
            -> IO Double
getHeight54 =
  propertyGet "Height"
              []
              outDouble

setHeight50 :: Double
            -> Window a0
            -> IO ()
setHeight50 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex41 :: Window a0
           -> IO Int32
getIndex41 =
  propertyGet "Index"
              []
              outInt32

largeScroll1 :: (Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> Window a0
             -> IO a1
largeScroll1 down up toRight toLeft =
  function1 "LargeScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getLeft57 :: Window a0
          -> IO Double
getLeft57 =
  propertyGet "Left"
              []
              outDouble

setLeft53 :: Double
          -> Window a0
          -> IO ()
setLeft53 rhs =
  propertySet "Left"
              [inDouble rhs]

newWindow1 :: Window a0
           -> IO (Window ())
newWindow1 =
  function1 "NewWindow"
            []
            outIDispatch

getOnWindow1 :: Window a0
             -> IO String
getOnWindow1 =
  propertyGet "OnWindow"
              []
              outString

setOnWindow1 :: String
             -> Window a0
             -> IO ()
setOnWindow1 rhs =
  propertySet "OnWindow"
              [inString rhs]

getPanes0 :: Window a0
          -> IO (Panes ())
getPanes0 =
  propertyGet "Panes"
              []
              outIUnknown

printOut34 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Window a0
           -> IO a1
printOut34 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "_PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

printPreview9 :: (Variant a2)
              => a2
              -> Window a0
              -> IO a1
printPreview9 enableChanges =
  function1 "PrintPreview"
            [inVariant enableChanges]
            outVariant

getRangeSelection0 :: Window a0
                   -> IO (Range ())
getRangeSelection0 =
  propertyGet "RangeSelection"
              []
              outIUnknown

getScrollColumn1 :: Window a0
                 -> IO Int32
getScrollColumn1 =
  propertyGet "ScrollColumn"
              []
              outInt32

setScrollColumn1 :: Int32
                 -> Window a0
                 -> IO ()
setScrollColumn1 rhs =
  propertySet "ScrollColumn"
              [inInt32 rhs]

getScrollRow1 :: Window a0
              -> IO Int32
getScrollRow1 =
  propertyGet "ScrollRow"
              []
              outInt32

setScrollRow1 :: Int32
              -> Window a0
              -> IO ()
setScrollRow1 rhs =
  propertySet "ScrollRow"
              [inInt32 rhs]

scrollWorkbookTabs0 :: (Variant a2, Variant a3)
                    => a2
                    -> a3
                    -> Window a0
                    -> IO a1
scrollWorkbookTabs0 sheets position =
  function1 "ScrollWorkbookTabs"
            [ inVariant sheets
            , inVariant position
            ]
            outVariant

getSelectedSheets0 :: Window a0
                   -> IO (Sheets ())
getSelectedSheets0 =
  propertyGet "SelectedSheets"
              []
              outIDispatch

getSelection2 :: Window a0
              -> IO (IDispatch ())
getSelection2 =
  propertyGet "Selection"
              []
              outIDispatch

smallScroll1 :: (Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> Window a0
             -> IO a1
smallScroll1 down up toRight toLeft =
  function1 "SmallScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getSplit0 :: Window a0
          -> IO Bool
getSplit0 =
  propertyGet "Split"
              []
              outBool

setSplit0 :: Bool
          -> Window a0
          -> IO ()
setSplit0 rhs =
  propertySet "Split"
              [inBool rhs]

getSplitColumn0 :: Window a0
                -> IO Int32
getSplitColumn0 =
  propertyGet "SplitColumn"
              []
              outInt32

setSplitColumn0 :: Int32
                -> Window a0
                -> IO ()
setSplitColumn0 rhs =
  propertySet "SplitColumn"
              [inInt32 rhs]

getSplitHorizontal0 :: Window a0
                    -> IO Double
getSplitHorizontal0 =
  propertyGet "SplitHorizontal"
              []
              outDouble

setSplitHorizontal0 :: Double
                    -> Window a0
                    -> IO ()
setSplitHorizontal0 rhs =
  propertySet "SplitHorizontal"
              [inDouble rhs]

getSplitRow0 :: Window a0
             -> IO Int32
getSplitRow0 =
  propertyGet "SplitRow"
              []
              outInt32

setSplitRow0 :: Int32
             -> Window a0
             -> IO ()
setSplitRow0 rhs =
  propertySet "SplitRow"
              [inInt32 rhs]

getSplitVertical0 :: Window a0
                  -> IO Double
getSplitVertical0 =
  propertyGet "SplitVertical"
              []
              outDouble

setSplitVertical0 :: Double
                  -> Window a0
                  -> IO ()
setSplitVertical0 rhs =
  propertySet "SplitVertical"
              [inDouble rhs]

getTabRatio0 :: Window a0
             -> IO Double
getTabRatio0 =
  propertyGet "TabRatio"
              []
              outDouble

setTabRatio0 :: Double
             -> Window a0
             -> IO ()
setTabRatio0 rhs =
  propertySet "TabRatio"
              [inDouble rhs]

getTop57 :: Window a0
         -> IO Double
getTop57 =
  propertyGet "Top"
              []
              outDouble

setTop53 :: Double
         -> Window a0
         -> IO ()
setTop53 rhs =
  propertySet "Top"
              [inDouble rhs]

getType38 :: Window a0
          -> IO XlWindowType
getType38 =
  propertyGet "Type"
              []
              outEnum

getUsableHeight1 :: Window a0
                 -> IO Double
getUsableHeight1 =
  propertyGet "UsableHeight"
              []
              outDouble

getUsableWidth1 :: Window a0
                -> IO Double
getUsableWidth1 =
  propertyGet "UsableWidth"
              []
              outDouble

getVisible64 :: Window a0
             -> IO Bool
getVisible64 =
  propertyGet "Visible"
              []
              outBool

setVisible64 :: Bool
             -> Window a0
             -> IO ()
setVisible64 rhs =
  propertySet "Visible"
              [inBool rhs]

getVisibleRange1 :: Window a0
                 -> IO (Range ())
getVisibleRange1 =
  propertyGet "VisibleRange"
              []
              outIUnknown

getWidth55 :: Window a0
           -> IO Double
getWidth55 =
  propertyGet "Width"
              []
              outDouble

setWidth51 :: Double
           -> Window a0
           -> IO ()
setWidth51 rhs =
  propertySet "Width"
              [inDouble rhs]

getWindowNumber0 :: Window a0
                 -> IO Int32
getWindowNumber0 =
  propertyGet "WindowNumber"
              []
              outInt32

getWindowState1 :: Window a0
                -> IO XlWindowState
getWindowState1 =
  propertyGet "WindowState"
              []
              outEnum

setWindowState1 :: XlWindowState
                -> Window a0
                -> IO ()
setWindowState1 rhs =
  propertySet "WindowState"
              [inEnum rhs]

getZoom1 :: Window a0
         -> IO a1
getZoom1 =
  propertyGet "Zoom"
              []
              outVariant

setZoom1 :: a1
         -> Window a0
         -> IO ()
setZoom1 rhs =
  propertySet "Zoom"
              [inVariant rhs]

getView0 :: Window a0
         -> IO XlWindowView
getView0 =
  propertyGet "View"
              []
              outEnum

setView0 :: XlWindowView
         -> Window a0
         -> IO ()
setView0 rhs =
  propertySet "View"
              [inEnum rhs]

getDisplayRightToLeft7 :: Window a0
                       -> IO Bool
getDisplayRightToLeft7 =
  propertyGet "DisplayRightToLeft"
              []
              outBool

setDisplayRightToLeft6 :: Bool
                       -> Window a0
                       -> IO ()
setDisplayRightToLeft6 rhs =
  propertySet "DisplayRightToLeft"
              [inBool rhs]

pointsToScreenPixelsX1 :: Int32
                       -> Window a0
                       -> IO Int32
pointsToScreenPixelsX1 points0 =
  function1 "PointsToScreenPixelsX"
            [inInt32 points0]
            outInt32

pointsToScreenPixelsY1 :: Int32
                       -> Window a0
                       -> IO Int32
pointsToScreenPixelsY1 points0 =
  function1 "PointsToScreenPixelsY"
            [inInt32 points0]
            outInt32

rangeFromPoint0 :: Int32
                -> Int32
                -> Window a0
                -> IO (IDispatch ())
rangeFromPoint0 x y =
  function1 "RangeFromPoint"
            [ inInt32 x
            , inInt32 y
            ]
            outIDispatch

scrollIntoView1 :: (Variant a1)
                => Int32
                -> Int32
                -> Int32
                -> Int32
                -> a1
                -> Window a0
                -> IO ()
scrollIntoView1 left top width height start =
  method0 "ScrollIntoView"
          [ inInt32 left
          , inInt32 top
          , inInt32 width
          , inInt32 height
          , inVariant start
          ]

getSheetViews0 :: Window a0
               -> IO (SheetViews ())
getSheetViews0 =
  propertyGet "SheetViews"
              []
              outIUnknown

getActiveSheetView0 :: Window a0
                    -> IO (IDispatch ())
getActiveSheetView0 =
  propertyGet "ActiveSheetView"
              []
              outIDispatch

printOut35 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Window a0
           -> IO a1
printOut35 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

getDisplayRuler0 :: Window a0
                 -> IO Bool
getDisplayRuler0 =
  propertyGet "DisplayRuler"
              []
              outBool

setDisplayRuler0 :: Bool
                 -> Window a0
                 -> IO ()
setDisplayRuler0 rhs =
  propertySet "DisplayRuler"
              [inBool rhs]

getAutoFilterDateGrouping0 :: Window a0
                           -> IO Bool
getAutoFilterDateGrouping0 =
  propertyGet "AutoFilterDateGrouping"
              []
              outBool

setAutoFilterDateGrouping0 :: Bool
                           -> Window a0
                           -> IO ()
setAutoFilterDateGrouping0 rhs =
  propertySet "AutoFilterDateGrouping"
              [inBool rhs]

getDisplayWhitespace0 :: Window a0
                      -> IO Bool
getDisplayWhitespace0 =
  propertyGet "DisplayWhitespace"
              []
              outBool

setDisplayWhitespace0 :: Bool
                      -> Window a0
                      -> IO ()
setDisplayWhitespace0 rhs =
  propertySet "DisplayWhitespace"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Windows
-- 
-- --------------------------------------------------
data Windows_ a = Windows__ 
type Windows a = IDispatch (Windows_ a)
iidWindows :: IID (Windows ())
iidWindows = mkIID "{00020892-0000-0000-C000-000000000046}"

queryInterface1 :: (Variant a1)
                => GUID
                -> Windows a0
                -> IO a1
queryInterface1 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef1 :: Windows a0
        -> IO Word32
addRef1 =
  function1 "AddRef"
            []
            outWord32

release1 :: Windows a0
         -> IO Word32
release1 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount1 :: Windows a0
                  -> IO Word32
getTypeInfoCount1 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo1 :: (Variant a1)
             => Word32
             -> Word32
             -> Windows a0
             -> IO a1
getTypeInfo1 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames1 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> Windows a0
               -> IO Int32
getIDsOfNames1 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke1 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> Windows a0
        -> IO (a1, a2, Word32)
invoke1 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication273 :: (Variant a1)
                  => Windows a0
                  -> IO a1
getApplication273 =
  propertyGet "Application"
              []
              outVariant

getCreator273 :: Windows a0
              -> IO XlCreator
getCreator273 =
  propertyGet "Creator"
              []
              outEnum

getParent288 :: Windows a0
             -> IO (IDispatch ())
getParent288 =
  propertyGet "Parent"
              []
              outIDispatch

arrange0 :: (Variant a2, Variant a3, Variant a4, Variant a5)
         => a2
         -> a3
         -> a4
         -> a5
         -> Windows a0
         -> IO a1
arrange0 arrangeStyle activeWorkbook syncHorizontal syncVertical =
  function1 "Arrange"
            [ inDefaultValue (inInt32 1) inVariant arrangeStyle
            , inVariant activeWorkbook
            , inVariant syncHorizontal
            , inVariant syncVertical
            ]
            outVariant

getCount113 :: Windows a0
            -> IO Int32
getCount113 =
  propertyGet "Count"
              []
              outInt32

getItem55 :: a1
          -> Windows a0
          -> IO (Window ())
getItem55 index0 =
  propertyGet "Item"
              [inVariant index0]
              outIDispatch

getNewEnum67 :: Windows a0
             -> IO (IUnknown ())
getNewEnum67 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault110 :: a1
              -> Windows a0
              -> IO (Window ())
getDefault110 index0 =
  propertyGet "_Default"
              [inVariant index0]
              outIDispatch

compareSideBySideWith0 :: a1
                       -> Windows a0
                       -> IO Bool
compareSideBySideWith0 windowName =
  function1 "CompareSideBySideWith"
            [inVariant windowName]
            outBool

breakSideBySide0 :: Windows a0
                 -> IO Bool
breakSideBySide0 =
  function1 "BreakSideBySide"
            []
            outBool

getSyncScrollingSideBySide0 :: Windows a0
                            -> IO Bool
getSyncScrollingSideBySide0 =
  propertyGet "SyncScrollingSideBySide"
              []
              outBool

setSyncScrollingSideBySide0 :: Bool
                            -> Windows a0
                            -> IO ()
setSyncScrollingSideBySide0 rhs =
  propertySet "SyncScrollingSideBySide"
              [inBool rhs]

resetPositionsSideBySide0 :: Windows a0
                          -> IO ()
resetPositionsSideBySide0 =
  method0 "ResetPositionsSideBySide"
          []

-- --------------------------------------------------
-- 
-- dispinterface AppEvents
-- 
-- --------------------------------------------------
data AppEvents_ a = AppEvents__ 
type AppEvents a = IDispatch (AppEvents_ a)
iidAppEvents :: IID (AppEvents ())
iidAppEvents = mkIID "{00024413-0000-0000-C000-000000000046}"

mkAppEvents_vtbl :: (GUID -> objState -> IO (Ptr ()))
                 -> (objState -> IO Word32)
                 -> (objState -> IO Word32)
                 -> (objState -> IO Word32)
                 -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                 -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                 -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                 -> (Workbook -> objState -> IO ())
                 -> (IDispatch a0 -> Range a1 -> objState -> IO ())
                 -> (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                 -> (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                 -> (IDispatch a0 -> objState -> IO ())
                 -> (IDispatch a0 -> objState -> IO ())
                 -> (IDispatch a0 -> objState -> IO ())
                 -> (IDispatch a0 -> Range a1 -> objState -> IO ())
                 -> (Workbook -> objState -> IO ())
                 -> (Workbook -> objState -> IO ())
                 -> (Workbook -> objState -> IO ())
                 -> (Workbook -> Bool -> objState -> IO Bool)
                 -> (Workbook -> Bool -> Bool -> objState -> IO Bool)
                 -> (Workbook -> Bool -> objState -> IO Bool)
                 -> (Workbook -> IDispatch a0 -> objState -> IO ())
                 -> (Workbook -> objState -> IO ())
                 -> (Workbook -> objState -> IO ())
                 -> (Workbook -> Window a0 -> objState -> IO ())
                 -> (Workbook -> Window a0 -> objState -> IO ())
                 -> (Workbook -> Window a0 -> objState -> IO ())
                 -> (IDispatch a0 -> Hyperlink a1 -> objState -> IO ())
                 -> (IDispatch a0 -> PivotTable a1 -> objState -> IO ())
                 -> (Workbook -> PivotTable a0 -> objState -> IO ())
                 -> (Workbook -> PivotTable a0 -> objState -> IO ())
                 -> (Workbook -> MsoSyncEventType -> objState -> IO ())
                 -> (Workbook -> XmlMap a0 -> String -> Bool -> Bool -> objState -> IO Bool)
                 -> (Workbook -> XmlMap a0 -> Bool -> XlXmlImportResult -> objState -> IO ())
                 -> (Workbook -> XmlMap a0 -> String -> Bool -> objState -> IO Bool)
                 -> (Workbook -> XmlMap a0 -> String -> XlXmlExportResult -> objState -> IO ())
                 -> (Workbook -> String -> String -> Bool -> objState -> IO ())
                 -> (objState -> IO ())
                 -> IO (ComVTable (AppEvents ()) objState)
mkAppEvents_vtbl queryInterface2 addRef2 release2 getTypeInfoCount2 getTypeInfo2 getIDsOfNames2 invoke2 newWorkbook0 sheetSelectionChange1 sheetBeforeDoubleClick1 sheetBeforeRightClick1 sheetActivate1 sheetDeactivate1 sheetCalculate1 sheetChange1 workbookOpen0 workbookActivate0 workbookDeactivate0 workbookBeforeClose0 workbookBeforeSave0 workbookBeforePrint0 workbookNewSheet0 workbookAddinInstall0 workbookAddinUninstall0 windowResize1 windowActivate1 windowDeactivate1 sheetFollowHyperlink1 sheetPivotTableUpdate1 workbookPivotTableCloseConnection0 workbookPivotTableOpenConnection0 workbookSync0 workbookBeforeXmlImport0 workbookAfterXmlImport0 workbookBeforeXmlExport0 workbookAfterXmlExport0 workbookRowsetComplete0 afterCalculate0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface2 queryInterface2)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef2 addRef2)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release2 release2)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount2 getTypeInfoCount2)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo2 getTypeInfo2)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames2 getIDsOfNames2)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke2 invoke2)
   meth_arg7 = mkDispMethod "NewWorkbook" 0x61d (prim_newWorkbook0 newWorkbook0)
   meth_arg8 = mkDispMethod "SheetSelectionChange" 0x616 (prim_sheetSelectionChange1 sheetSelectionChange1)
   meth_arg9 = mkDispMethod "SheetBeforeDoubleClick" 0x617 (prim_sheetBeforeDoubleClick1 sheetBeforeDoubleClick1)
   meth_arg10 = mkDispMethod "SheetBeforeRightClick" 0x618 (prim_sheetBeforeRightClick1 sheetBeforeRightClick1)
   meth_arg11 = mkDispMethod "SheetActivate" 0x619 (prim_sheetActivate1 sheetActivate1)
   meth_arg12 = mkDispMethod "SheetDeactivate" 0x61a (prim_sheetDeactivate1 sheetDeactivate1)
   meth_arg13 = mkDispMethod "SheetCalculate" 0x61b (prim_sheetCalculate1 sheetCalculate1)
   meth_arg14 = mkDispMethod "SheetChange" 0x61c (prim_sheetChange1 sheetChange1)
   meth_arg15 = mkDispMethod "WorkbookOpen" 0x61f (prim_workbookOpen0 workbookOpen0)
   meth_arg16 = mkDispMethod "WorkbookActivate" 0x620 (prim_workbookActivate0 workbookActivate0)
   meth_arg17 = mkDispMethod "WorkbookDeactivate" 0x621 (prim_workbookDeactivate0 workbookDeactivate0)
   meth_arg18 = mkDispMethod "WorkbookBeforeClose" 0x622 (prim_workbookBeforeClose0 workbookBeforeClose0)
   meth_arg19 = mkDispMethod "WorkbookBeforeSave" 0x623 (prim_workbookBeforeSave0 workbookBeforeSave0)
   meth_arg20 = mkDispMethod "WorkbookBeforePrint" 0x624 (prim_workbookBeforePrint0 workbookBeforePrint0)
   meth_arg21 = mkDispMethod "WorkbookNewSheet" 0x625 (prim_workbookNewSheet0 workbookNewSheet0)
   meth_arg22 = mkDispMethod "WorkbookAddinInstall" 0x626 (prim_workbookAddinInstall0 workbookAddinInstall0)
   meth_arg23 = mkDispMethod "WorkbookAddinUninstall" 0x627 (prim_workbookAddinUninstall0 workbookAddinUninstall0)
   meth_arg24 = mkDispMethod "WindowResize" 0x612 (prim_windowResize1 windowResize1)
   meth_arg25 = mkDispMethod "WindowActivate" 0x614 (prim_windowActivate1 windowActivate1)
   meth_arg26 = mkDispMethod "WindowDeactivate" 0x615 (prim_windowDeactivate1 windowDeactivate1)
   meth_arg27 = mkDispMethod "SheetFollowHyperlink" 0x73e (prim_sheetFollowHyperlink1 sheetFollowHyperlink1)
   meth_arg28 = mkDispMethod "SheetPivotTableUpdate" 0x86d (prim_sheetPivotTableUpdate1 sheetPivotTableUpdate1)
   meth_arg29 = mkDispMethod "WorkbookPivotTableCloseConnection" 0x870 (prim_workbookPivotTableCloseConnection0 workbookPivotTableCloseConnection0)
   meth_arg30 = mkDispMethod "WorkbookPivotTableOpenConnection" 0x871 (prim_workbookPivotTableOpenConnection0 workbookPivotTableOpenConnection0)
   meth_arg31 = mkDispMethod "WorkbookSync" 0x8f1 (prim_workbookSync0 workbookSync0)
   meth_arg32 = mkDispMethod "WorkbookBeforeXmlImport" 0x8f2 (prim_workbookBeforeXmlImport0 workbookBeforeXmlImport0)
   meth_arg33 = mkDispMethod "WorkbookAfterXmlImport" 0x8f3 (prim_workbookAfterXmlImport0 workbookAfterXmlImport0)
   meth_arg34 = mkDispMethod "WorkbookBeforeXmlExport" 0x8f4 (prim_workbookBeforeXmlExport0 workbookBeforeXmlExport0)
   meth_arg35 = mkDispMethod "WorkbookAfterXmlExport" 0x8f5 (prim_workbookAfterXmlExport0 workbookAfterXmlExport0)
   meth_arg36 = mkDispMethod "WorkbookRowsetComplete" 0xa33 (prim_workbookRowsetComplete0 workbookRowsetComplete0)
   meth_arg37 = mkDispMethod "AfterCalculate" 0xa34 (prim_afterCalculate0 afterCalculate0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         , meth_arg20
                         , meth_arg21
                         , meth_arg22
                         , meth_arg23
                         , meth_arg24
                         , meth_arg25
                         , meth_arg26
                         , meth_arg27
                         , meth_arg28
                         , meth_arg29
                         , meth_arg30
                         , meth_arg31
                         , meth_arg32
                         , meth_arg33
                         , meth_arg34
                         , meth_arg35
                         , meth_arg36
                         , meth_arg37
                         ]

prim_queryInterface2 :: (GUID -> objState -> IO (Ptr ()))
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_queryInterface2 queryInterface2_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface2_meth riid)
          ppvObj

prim_addRef2 :: (objState -> IO Word32)
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_addRef2 addRef2_meth =
  retVal $ \ the_res ->
  apply_1 (addRef2_meth)
          the_res

prim_release2 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_release2 release2_meth =
  retVal $ \ the_res ->
  apply_1 (release2_meth)
          the_res

prim_getTypeInfoCount2 :: (objState -> IO Word32)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_getTypeInfoCount2 getTypeInfoCount2_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount2_meth)
          pctinfo

prim_getTypeInfo2 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_getTypeInfo2 getTypeInfo2_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo2_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames2 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_getIDsOfNames2 getIDsOfNames2_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames2_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke2 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_invoke2 invoke2_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke2_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_newWorkbook0 :: (Workbook -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_newWorkbook0 newWorkbook0_meth =
  inArg $ \ wb ->
  apply_0 (newWorkbook0_meth wb)

prim_sheetSelectionChange1 :: (IDispatch a0 -> Range a1 -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_sheetSelectionChange1 sheetSelectionChange1_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  apply_0 (sheetSelectionChange1_meth sh target)

prim_sheetBeforeDoubleClick1 :: (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_sheetBeforeDoubleClick1 sheetBeforeDoubleClick1_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (sheetBeforeDoubleClick1_meth sh target cancel)
          out_cancel

prim_sheetBeforeRightClick1 :: (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_sheetBeforeRightClick1 sheetBeforeRightClick1_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (sheetBeforeRightClick1_meth sh target cancel)
          out_cancel

prim_sheetActivate1 :: (IDispatch a0 -> objState -> IO ())
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_sheetActivate1 sheetActivate1_meth =
  inArg $ \ sh ->
  apply_0 (sheetActivate1_meth sh)

prim_sheetDeactivate1 :: (IDispatch a0 -> objState -> IO ())
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_sheetDeactivate1 sheetDeactivate1_meth =
  inArg $ \ sh ->
  apply_0 (sheetDeactivate1_meth sh)

prim_sheetCalculate1 :: (IDispatch a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_sheetCalculate1 sheetCalculate1_meth =
  inArg $ \ sh ->
  apply_0 (sheetCalculate1_meth sh)

prim_sheetChange1 :: (IDispatch a0 -> Range a1 -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_sheetChange1 sheetChange1_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  apply_0 (sheetChange1_meth sh target)

prim_workbookOpen0 :: (Workbook -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_workbookOpen0 workbookOpen0_meth =
  inArg $ \ wb ->
  apply_0 (workbookOpen0_meth wb)

prim_workbookActivate0 :: (Workbook -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_workbookActivate0 workbookActivate0_meth =
  inArg $ \ wb ->
  apply_0 (workbookActivate0_meth wb)

prim_workbookDeactivate0 :: (Workbook -> objState -> IO ())
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_workbookDeactivate0 workbookDeactivate0_meth =
  inArg $ \ wb ->
  apply_0 (workbookDeactivate0_meth wb)

prim_workbookBeforeClose0 :: (Workbook -> Bool -> objState -> IO Bool)
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_workbookBeforeClose0 workbookBeforeClose0_meth =
  inArg $ \ wb ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (workbookBeforeClose0_meth wb cancel)
          out_cancel

prim_workbookBeforeSave0 :: (Workbook -> Bool -> Bool -> objState -> IO Bool)
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_workbookBeforeSave0 workbookBeforeSave0_meth =
  inArg $ \ wb ->
  inArg $ \ saveAsUI ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (workbookBeforeSave0_meth wb saveAsUI cancel)
          out_cancel

prim_workbookBeforePrint0 :: (Workbook -> Bool -> objState -> IO Bool)
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_workbookBeforePrint0 workbookBeforePrint0_meth =
  inArg $ \ wb ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (workbookBeforePrint0_meth wb cancel)
          out_cancel

prim_workbookNewSheet0 :: (Workbook -> IDispatch a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_workbookNewSheet0 workbookNewSheet0_meth =
  inArg $ \ wb ->
  inArg $ \ sh ->
  apply_0 (workbookNewSheet0_meth wb sh)

prim_workbookAddinInstall0 :: (Workbook -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_workbookAddinInstall0 workbookAddinInstall0_meth =
  inArg $ \ wb ->
  apply_0 (workbookAddinInstall0_meth wb)

prim_workbookAddinUninstall0 :: (Workbook -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_workbookAddinUninstall0 workbookAddinUninstall0_meth =
  inArg $ \ wb ->
  apply_0 (workbookAddinUninstall0_meth wb)

prim_windowResize1 :: (Workbook -> Window a0 -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_windowResize1 windowResize1_meth =
  inArg $ \ wb ->
  inArg $ \ wn ->
  apply_0 (windowResize1_meth wb wn)

prim_windowActivate1 :: (Workbook -> Window a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_windowActivate1 windowActivate1_meth =
  inArg $ \ wb ->
  inArg $ \ wn ->
  apply_0 (windowActivate1_meth wb wn)

prim_windowDeactivate1 :: (Workbook -> Window a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_windowDeactivate1 windowDeactivate1_meth =
  inArg $ \ wb ->
  inArg $ \ wn ->
  apply_0 (windowDeactivate1_meth wb wn)

prim_sheetFollowHyperlink1 :: (IDispatch a0 -> Hyperlink a1 -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_sheetFollowHyperlink1 sheetFollowHyperlink1_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  apply_0 (sheetFollowHyperlink1_meth sh target)

prim_sheetPivotTableUpdate1 :: (IDispatch a0 -> PivotTable a1 -> objState -> IO ())
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_sheetPivotTableUpdate1 sheetPivotTableUpdate1_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  apply_0 (sheetPivotTableUpdate1_meth sh target)

prim_workbookPivotTableCloseConnection0 :: (Workbook -> PivotTable a0 -> objState -> IO ())
                                        -> [VARIANT]
                                        -> objState
                                        -> IO (Maybe VARIANT)
prim_workbookPivotTableCloseConnection0 workbookPivotTableCloseConnection0_meth =
  inArg $ \ wb ->
  inIUnknownArg $ \ target ->
  apply_0 (workbookPivotTableCloseConnection0_meth wb target)

prim_workbookPivotTableOpenConnection0 :: (Workbook -> PivotTable a0 -> objState -> IO ())
                                       -> [VARIANT]
                                       -> objState
                                       -> IO (Maybe VARIANT)
prim_workbookPivotTableOpenConnection0 workbookPivotTableOpenConnection0_meth =
  inArg $ \ wb ->
  inIUnknownArg $ \ target ->
  apply_0 (workbookPivotTableOpenConnection0_meth wb target)

prim_workbookSync0 :: (Workbook -> MsoSyncEventType -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_workbookSync0 workbookSync0_meth =
  inArg $ \ wb ->
  inArg $ \ syncEventType ->
  apply_0 (workbookSync0_meth wb syncEventType)

prim_workbookBeforeXmlImport0 :: (Workbook -> XmlMap a0 -> String -> Bool -> Bool -> objState -> IO Bool)
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_workbookBeforeXmlImport0 workbookBeforeXmlImport0_meth =
  inArg $ \ wb ->
  inIUnknownArg $ \ map ->
  inArg $ \ url ->
  inArg $ \ isRefresh ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (workbookBeforeXmlImport0_meth wb map url isRefresh cancel)
          out_cancel

prim_workbookAfterXmlImport0 :: (Workbook -> XmlMap a0 -> Bool -> XlXmlImportResult -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_workbookAfterXmlImport0 workbookAfterXmlImport0_meth =
  inArg $ \ wb ->
  inIUnknownArg $ \ map ->
  inArg $ \ isRefresh ->
  inArg $ \ result ->
  apply_0 (workbookAfterXmlImport0_meth wb map isRefresh result)

prim_workbookBeforeXmlExport0 :: (Workbook -> XmlMap a0 -> String -> Bool -> objState -> IO Bool)
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_workbookBeforeXmlExport0 workbookBeforeXmlExport0_meth =
  inArg $ \ wb ->
  inIUnknownArg $ \ map ->
  inArg $ \ url ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (workbookBeforeXmlExport0_meth wb map url cancel)
          out_cancel

prim_workbookAfterXmlExport0 :: (Workbook -> XmlMap a0 -> String -> XlXmlExportResult -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_workbookAfterXmlExport0 workbookAfterXmlExport0_meth =
  inArg $ \ wb ->
  inIUnknownArg $ \ map ->
  inArg $ \ url ->
  inArg $ \ result ->
  apply_0 (workbookAfterXmlExport0_meth wb map url result)

prim_workbookRowsetComplete0 :: (Workbook -> String -> String -> Bool -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_workbookRowsetComplete0 workbookRowsetComplete0_meth =
  inArg $ \ wb ->
  inArg $ \ description ->
  inArg $ \ sheet ->
  inArg $ \ success ->
  apply_0 (workbookRowsetComplete0_meth wb description sheet success)

prim_afterCalculate0 :: (objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_afterCalculate0 afterCalculate0_meth =
  apply_0 (afterCalculate0_meth)

-- --------------------------------------------------
-- 
-- dispinterface WorksheetFunction
-- 
-- --------------------------------------------------
data WorksheetFunction_ a = WorksheetFunction__ 
type WorksheetFunction a = IDispatch (WorksheetFunction_ a)
iidWorksheetFunction :: IID (WorksheetFunction ())
iidWorksheetFunction =
  mkIID "{00020845-0000-0000-C000-000000000046}"

queryInterface3 :: (Variant a1)
                => GUID
                -> WorksheetFunction a0
                -> IO a1
queryInterface3 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef3 :: WorksheetFunction a0
        -> IO Word32
addRef3 =
  function1 "AddRef"
            []
            outWord32

release3 :: WorksheetFunction a0
         -> IO Word32
release3 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount3 :: WorksheetFunction a0
                  -> IO Word32
getTypeInfoCount3 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo3 :: (Variant a1)
             => Word32
             -> Word32
             -> WorksheetFunction a0
             -> IO a1
getTypeInfo3 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames3 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> WorksheetFunction a0
               -> IO Int32
getIDsOfNames3 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke3 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> WorksheetFunction a0
        -> IO (a1, a2, Word32)
invoke3 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication274 :: (Variant a1)
                  => WorksheetFunction a0
                  -> IO a1
getApplication274 =
  propertyGet "Application"
              []
              outVariant

getCreator274 :: WorksheetFunction a0
              -> IO XlCreator
getCreator274 =
  propertyGet "Creator"
              []
              outEnum

getParent289 :: WorksheetFunction a0
             -> IO (IDispatch ())
getParent289 =
  propertyGet "Parent"
              []
              outIDispatch

wSFunction1 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> a17
            -> a18
            -> a19
            -> a20
            -> a21
            -> a22
            -> a23
            -> a24
            -> a25
            -> a26
            -> a27
            -> a28
            -> a29
            -> a30
            -> a31
            -> WorksheetFunction a0
            -> IO a1
wSFunction1 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "_WSFunction"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

count0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> WorksheetFunction a0
       -> IO Double
count0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Count"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

isNA0 :: a1
      -> WorksheetFunction a0
      -> IO Bool
isNA0 arg1 =
  function1 "IsNA"
            [inVariant arg1]
            outBool

isError0 :: a1
         -> WorksheetFunction a0
         -> IO Bool
isError0 arg1 =
  function1 "IsError"
            [inVariant arg1]
            outBool

sum0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Double
sum0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Sum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

average0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> a30
         -> WorksheetFunction a0
         -> IO Double
average0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Average"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

min0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Double
min0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Min"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

max0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Double
max0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Max"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

npv0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
     => Double
     -> a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> WorksheetFunction a0
     -> IO Double
npv0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Npv"
            [ inDouble arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

stDev0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> WorksheetFunction a0
       -> IO Double
stDev0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "StDev"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

dollar0 :: (Variant a1)
        => Double
        -> a1
        -> WorksheetFunction a0
        -> IO String
dollar0 arg1 arg2 =
  function1 "Dollar"
            [ inDouble arg1
            , inVariant arg2
            ]
            outString

fixed0 :: (Variant a1, Variant a2)
       => Double
       -> a1
       -> a2
       -> WorksheetFunction a0
       -> IO String
fixed0 arg1 arg2 arg3 =
  function1 "Fixed"
            [ inDouble arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outString

pi0 :: WorksheetFunction a0
    -> IO Double
pi0 =
  function1 "Pi"
            []
            outDouble

ln0 :: Double
    -> WorksheetFunction a0
    -> IO Double
ln0 arg1 =
  function1 "Ln"
            [inDouble arg1]
            outDouble

log100 :: Double
       -> WorksheetFunction a0
       -> IO Double
log100 arg1 =
  function1 "Log10"
            [inDouble arg1]
            outDouble

round0 :: Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
round0 arg1 arg2 =
  function1 "Round"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

lookup0 :: (Variant a4)
        => a2
        -> a3
        -> a4
        -> WorksheetFunction a0
        -> IO a1
lookup0 arg1 arg2 arg3 =
  function1 "Lookup"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outVariant

index0 :: (Variant a3, Variant a4)
       => a2
       -> Double
       -> a3
       -> a4
       -> WorksheetFunction a0
       -> IO a1
index0 arg1 arg2 arg3 arg4 =
  function1 "Index"
            [ inVariant arg1
            , inDouble arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

rept0 :: String
      -> Double
      -> WorksheetFunction a0
      -> IO String
rept0 arg1 arg2 =
  function1 "Rept"
            [ inString arg1
            , inDouble arg2
            ]
            outString

and0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Bool
and0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "And"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outBool

or0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
    => a1
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> WorksheetFunction a0
    -> IO Bool
or0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Or"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outBool

dCount0 :: Range a1
        -> a2
        -> a3
        -> WorksheetFunction a0
        -> IO Double
dCount0 arg1 arg2 arg3 =
  function1 "DCount"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dSum0 :: Range a1
      -> a2
      -> a3
      -> WorksheetFunction a0
      -> IO Double
dSum0 arg1 arg2 arg3 =
  function1 "DSum"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dAverage0 :: Range a1
          -> a2
          -> a3
          -> WorksheetFunction a0
          -> IO Double
dAverage0 arg1 arg2 arg3 =
  function1 "DAverage"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dMin0 :: Range a1
      -> a2
      -> a3
      -> WorksheetFunction a0
      -> IO Double
dMin0 arg1 arg2 arg3 =
  function1 "DMin"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dMax0 :: Range a1
      -> a2
      -> a3
      -> WorksheetFunction a0
      -> IO Double
dMax0 arg1 arg2 arg3 =
  function1 "DMax"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dStDev0 :: Range a1
        -> a2
        -> a3
        -> WorksheetFunction a0
        -> IO Double
dStDev0 arg1 arg2 arg3 =
  function1 "DStDev"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

var0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Double
var0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Var"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

dVar0 :: Range a1
      -> a2
      -> a3
      -> WorksheetFunction a0
      -> IO Double
dVar0 arg1 arg2 arg3 =
  function1 "DVar"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

text1 :: a1
      -> String
      -> WorksheetFunction a0
      -> IO String
text1 arg1 arg2 =
  function1 "Text"
            [ inVariant arg1
            , inString arg2
            ]
            outString

linEst0 :: (Variant a3, Variant a4, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> WorksheetFunction a0
        -> IO a1
linEst0 arg1 arg2 arg3 arg4 =
  function1 "LinEst"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

trend0 :: (Variant a3, Variant a4, Variant a5)
       => a2
       -> a3
       -> a4
       -> a5
       -> WorksheetFunction a0
       -> IO a1
trend0 arg1 arg2 arg3 arg4 =
  function1 "Trend"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

logEst0 :: (Variant a3, Variant a4, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> WorksheetFunction a0
        -> IO a1
logEst0 arg1 arg2 arg3 arg4 =
  function1 "LogEst"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

growth0 :: (Variant a3, Variant a4, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> WorksheetFunction a0
        -> IO a1
growth0 arg1 arg2 arg3 arg4 =
  function1 "Growth"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

pv0 :: (Variant a1, Variant a2)
    => Double
    -> Double
    -> Double
    -> a1
    -> a2
    -> WorksheetFunction a0
    -> IO Double
pv0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Pv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

fv0 :: (Variant a1, Variant a2)
    => Double
    -> Double
    -> Double
    -> a1
    -> a2
    -> WorksheetFunction a0
    -> IO Double
fv0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Fv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

nPer0 :: (Variant a1, Variant a2)
      => Double
      -> Double
      -> Double
      -> a1
      -> a2
      -> WorksheetFunction a0
      -> IO Double
nPer0 arg1 arg2 arg3 arg4 arg5 =
  function1 "NPer"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

pmt0 :: (Variant a1, Variant a2)
     => Double
     -> Double
     -> Double
     -> a1
     -> a2
     -> WorksheetFunction a0
     -> IO Double
pmt0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Pmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

rate0 :: (Variant a1, Variant a2, Variant a3)
      => Double
      -> Double
      -> Double
      -> a1
      -> a2
      -> a3
      -> WorksheetFunction a0
      -> IO Double
rate0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Rate"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

mIrr0 :: a1
      -> Double
      -> Double
      -> WorksheetFunction a0
      -> IO Double
mIrr0 arg1 arg2 arg3 =
  function1 "MIrr"
            [ inVariant arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

irr0 :: (Variant a2)
     => a1
     -> a2
     -> WorksheetFunction a0
     -> IO Double
irr0 arg1 arg2 =
  function1 "Irr"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

match0 :: (Variant a3)
       => a1
       -> a2
       -> a3
       -> WorksheetFunction a0
       -> IO Double
match0 arg1 arg2 arg3 =
  function1 "Match"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

weekday0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
weekday0 arg1 arg2 =
  function1 "Weekday"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

search0 :: (Variant a1)
        => String
        -> String
        -> a1
        -> WorksheetFunction a0
        -> IO Double
search0 arg1 arg2 arg3 =
  function1 "Search"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

transpose0 :: a2
           -> WorksheetFunction a0
           -> IO a1
transpose0 arg1 =
  function1 "Transpose"
            [inVariant arg1]
            outVariant

atan20 :: Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
atan20 arg1 arg2 =
  function1 "Atan2"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

asin0 :: Double
      -> WorksheetFunction a0
      -> IO Double
asin0 arg1 =
  function1 "Asin"
            [inDouble arg1]
            outDouble

acos0 :: Double
      -> WorksheetFunction a0
      -> IO Double
acos0 arg1 =
  function1 "Acos"
            [inDouble arg1]
            outDouble

choose0 :: (Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
        => a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> a31
        -> WorksheetFunction a0
        -> IO a1
choose0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Choose"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

hLookup0 :: (Variant a5)
         => a2
         -> a3
         -> a4
         -> a5
         -> WorksheetFunction a0
         -> IO a1
hLookup0 arg1 arg2 arg3 arg4 =
  function1 "HLookup"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

vLookup0 :: (Variant a5)
         => a2
         -> a3
         -> a4
         -> a5
         -> WorksheetFunction a0
         -> IO a1
vLookup0 arg1 arg2 arg3 arg4 =
  function1 "VLookup"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outVariant

log0 :: (Variant a1)
     => Double
     -> a1
     -> WorksheetFunction a0
     -> IO Double
log0 arg1 arg2 =
  function1 "Log"
            [ inDouble arg1
            , inVariant arg2
            ]
            outDouble

proper0 :: String
        -> WorksheetFunction a0
        -> IO String
proper0 arg1 =
  function1 "Proper"
            [inString arg1]
            outString

trim0 :: String
      -> WorksheetFunction a0
      -> IO String
trim0 arg1 =
  function1 "Trim"
            [inString arg1]
            outString

replace1 :: String
         -> Double
         -> Double
         -> String
         -> WorksheetFunction a0
         -> IO String
replace1 arg1 arg2 arg3 arg4 =
  function1 "Replace"
            [ inString arg1
            , inDouble arg2
            , inDouble arg3
            , inString arg4
            ]
            outString

substitute0 :: (Variant a1)
            => String
            -> String
            -> String
            -> a1
            -> WorksheetFunction a0
            -> IO String
substitute0 arg1 arg2 arg3 arg4 =
  function1 "Substitute"
            [ inString arg1
            , inString arg2
            , inString arg3
            , inVariant arg4
            ]
            outString

find1 :: (Variant a1)
      => String
      -> String
      -> a1
      -> WorksheetFunction a0
      -> IO Double
find1 arg1 arg2 arg3 =
  function1 "Find"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

isErr0 :: a1
       -> WorksheetFunction a0
       -> IO Bool
isErr0 arg1 =
  function1 "IsErr"
            [inVariant arg1]
            outBool

isText0 :: a1
        -> WorksheetFunction a0
        -> IO Bool
isText0 arg1 =
  function1 "IsText"
            [inVariant arg1]
            outBool

isNumber0 :: a1
          -> WorksheetFunction a0
          -> IO Bool
isNumber0 arg1 =
  function1 "IsNumber"
            [inVariant arg1]
            outBool

sln0 :: Double
     -> Double
     -> Double
     -> WorksheetFunction a0
     -> IO Double
sln0 arg1 arg2 arg3 =
  function1 "Sln"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

syd0 :: Double
     -> Double
     -> Double
     -> Double
     -> WorksheetFunction a0
     -> IO Double
syd0 arg1 arg2 arg3 arg4 =
  function1 "Syd"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

ddb0 :: (Variant a1)
     => Double
     -> Double
     -> Double
     -> Double
     -> a1
     -> WorksheetFunction a0
     -> IO Double
ddb0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Ddb"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            ]
            outDouble

clean0 :: String
       -> WorksheetFunction a0
       -> IO String
clean0 arg1 =
  function1 "Clean"
            [inString arg1]
            outString

mDeterm0 :: a1
         -> WorksheetFunction a0
         -> IO Double
mDeterm0 arg1 =
  function1 "MDeterm"
            [inVariant arg1]
            outDouble

mInverse0 :: a2
          -> WorksheetFunction a0
          -> IO a1
mInverse0 arg1 =
  function1 "MInverse"
            [inVariant arg1]
            outVariant

mMult0 :: a2
       -> a3
       -> WorksheetFunction a0
       -> IO a1
mMult0 arg1 arg2 =
  function1 "MMult"
            [ inVariant arg1
            , inVariant arg2
            ]
            outVariant

ipmt0 :: (Variant a1, Variant a2)
      => Double
      -> Double
      -> Double
      -> Double
      -> a1
      -> a2
      -> WorksheetFunction a0
      -> IO Double
ipmt0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Ipmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

ppmt0 :: (Variant a1, Variant a2)
      => Double
      -> Double
      -> Double
      -> Double
      -> a1
      -> a2
      -> WorksheetFunction a0
      -> IO Double
ppmt0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Ppmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

countA0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> WorksheetFunction a0
        -> IO Double
countA0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "CountA"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

product0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> a30
         -> WorksheetFunction a0
         -> IO Double
product0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Product"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

fact0 :: Double
      -> WorksheetFunction a0
      -> IO Double
fact0 arg1 =
  function1 "Fact"
            [inDouble arg1]
            outDouble

dProduct0 :: Range a1
          -> a2
          -> a3
          -> WorksheetFunction a0
          -> IO Double
dProduct0 arg1 arg2 arg3 =
  function1 "DProduct"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

isNonText0 :: a1
           -> WorksheetFunction a0
           -> IO Bool
isNonText0 arg1 =
  function1 "IsNonText"
            [inVariant arg1]
            outBool

stDevP0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> WorksheetFunction a0
        -> IO Double
stDevP0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "StDevP"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

varP0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> WorksheetFunction a0
      -> IO Double
varP0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "VarP"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

dStDevP0 :: Range a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO Double
dStDevP0 arg1 arg2 arg3 =
  function1 "DStDevP"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

dVarP0 :: Range a1
       -> a2
       -> a3
       -> WorksheetFunction a0
       -> IO Double
dVarP0 arg1 arg2 arg3 =
  function1 "DVarP"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

isLogical0 :: a1
           -> WorksheetFunction a0
           -> IO Bool
isLogical0 arg1 =
  function1 "IsLogical"
            [inVariant arg1]
            outBool

dCountA0 :: Range a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO Double
dCountA0 arg1 arg2 arg3 =
  function1 "DCountA"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

uSDollar0 :: Double
          -> Double
          -> WorksheetFunction a0
          -> IO String
uSDollar0 arg1 arg2 =
  function1 "USDollar"
            [ inDouble arg1
            , inDouble arg2
            ]
            outString

findB0 :: (Variant a1)
       => String
       -> String
       -> a1
       -> WorksheetFunction a0
       -> IO Double
findB0 arg1 arg2 arg3 =
  function1 "FindB"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

searchB0 :: (Variant a1)
         => String
         -> String
         -> a1
         -> WorksheetFunction a0
         -> IO Double
searchB0 arg1 arg2 arg3 =
  function1 "SearchB"
            [ inString arg1
            , inString arg2
            , inVariant arg3
            ]
            outDouble

replaceB0 :: String
          -> Double
          -> Double
          -> String
          -> WorksheetFunction a0
          -> IO String
replaceB0 arg1 arg2 arg3 arg4 =
  function1 "ReplaceB"
            [ inString arg1
            , inDouble arg2
            , inDouble arg3
            , inString arg4
            ]
            outString

roundUp0 :: Double
         -> Double
         -> WorksheetFunction a0
         -> IO Double
roundUp0 arg1 arg2 =
  function1 "RoundUp"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

roundDown0 :: Double
           -> Double
           -> WorksheetFunction a0
           -> IO Double
roundDown0 arg1 arg2 =
  function1 "RoundDown"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

rank0 :: (Variant a2)
      => Double
      -> Range a1
      -> a2
      -> WorksheetFunction a0
      -> IO Double
rank0 arg1 arg2 arg3 =
  function1 "Rank"
            [ inDouble arg1
            , inIUnknown arg2
            , inVariant arg3
            ]
            outDouble

days3600 :: (Variant a3)
         => a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO Double
days3600 arg1 arg2 arg3 =
  function1 "Days360"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

vdb0 :: (Variant a1, Variant a2)
     => Double
     -> Double
     -> Double
     -> Double
     -> Double
     -> a1
     -> a2
     -> WorksheetFunction a0
     -> IO Double
vdb0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "Vdb"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inDouble arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

median0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> WorksheetFunction a0
        -> IO Double
median0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Median"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sumProduct0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> a17
            -> a18
            -> a19
            -> a20
            -> a21
            -> a22
            -> a23
            -> a24
            -> a25
            -> a26
            -> a27
            -> a28
            -> a29
            -> a30
            -> WorksheetFunction a0
            -> IO Double
sumProduct0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "SumProduct"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sinh0 :: Double
      -> WorksheetFunction a0
      -> IO Double
sinh0 arg1 =
  function1 "Sinh"
            [inDouble arg1]
            outDouble

cosh0 :: Double
      -> WorksheetFunction a0
      -> IO Double
cosh0 arg1 =
  function1 "Cosh"
            [inDouble arg1]
            outDouble

tanh0 :: Double
      -> WorksheetFunction a0
      -> IO Double
tanh0 arg1 =
  function1 "Tanh"
            [inDouble arg1]
            outDouble

asinh0 :: Double
       -> WorksheetFunction a0
       -> IO Double
asinh0 arg1 =
  function1 "Asinh"
            [inDouble arg1]
            outDouble

acosh0 :: Double
       -> WorksheetFunction a0
       -> IO Double
acosh0 arg1 =
  function1 "Acosh"
            [inDouble arg1]
            outDouble

atanh0 :: Double
       -> WorksheetFunction a0
       -> IO Double
atanh0 arg1 =
  function1 "Atanh"
            [inDouble arg1]
            outDouble

dGet0 :: Range a2
      -> a3
      -> a4
      -> WorksheetFunction a0
      -> IO a1
dGet0 arg1 arg2 arg3 =
  function1 "DGet"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outVariant

db0 :: (Variant a1)
    => Double
    -> Double
    -> Double
    -> Double
    -> a1
    -> WorksheetFunction a0
    -> IO Double
db0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Db"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            , inVariant arg5
            ]
            outDouble

frequency0 :: a2
           -> a3
           -> WorksheetFunction a0
           -> IO a1
frequency0 arg1 arg2 =
  function1 "Frequency"
            [ inVariant arg1
            , inVariant arg2
            ]
            outVariant

aveDev0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> a30
        -> WorksheetFunction a0
        -> IO Double
aveDev0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "AveDev"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

betaDist0 :: (Variant a1, Variant a2)
          => Double
          -> Double
          -> Double
          -> a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
betaDist0 arg1 arg2 arg3 arg4 arg5 =
  function1 "BetaDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

gammaLn0 :: Double
         -> WorksheetFunction a0
         -> IO Double
gammaLn0 arg1 =
  function1 "GammaLn"
            [inDouble arg1]
            outDouble

betaInv0 :: (Variant a1, Variant a2)
         => Double
         -> Double
         -> Double
         -> a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
betaInv0 arg1 arg2 arg3 arg4 arg5 =
  function1 "BetaInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

binomDist0 :: Double
           -> Double
           -> Double
           -> Bool
           -> WorksheetFunction a0
           -> IO Double
binomDist0 arg1 arg2 arg3 arg4 =
  function1 "BinomDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

chiDist0 :: Double
         -> Double
         -> WorksheetFunction a0
         -> IO Double
chiDist0 arg1 arg2 =
  function1 "ChiDist"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

chiInv0 :: Double
        -> Double
        -> WorksheetFunction a0
        -> IO Double
chiInv0 arg1 arg2 =
  function1 "ChiInv"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

combin0 :: Double
        -> Double
        -> WorksheetFunction a0
        -> IO Double
combin0 arg1 arg2 =
  function1 "Combin"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

confidence0 :: Double
            -> Double
            -> Double
            -> WorksheetFunction a0
            -> IO Double
confidence0 arg1 arg2 arg3 =
  function1 "Confidence"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

critBinom0 :: Double
           -> Double
           -> Double
           -> WorksheetFunction a0
           -> IO Double
critBinom0 arg1 arg2 arg3 =
  function1 "CritBinom"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

even0 :: Double
      -> WorksheetFunction a0
      -> IO Double
even0 arg1 =
  function1 "Even"
            [inDouble arg1]
            outDouble

exponDist0 :: Double
           -> Double
           -> Bool
           -> WorksheetFunction a0
           -> IO Double
exponDist0 arg1 arg2 arg3 =
  function1 "ExponDist"
            [ inDouble arg1
            , inDouble arg2
            , inBool arg3
            ]
            outDouble

fDist0 :: Double
       -> Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
fDist0 arg1 arg2 arg3 =
  function1 "FDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

fInv0 :: Double
      -> Double
      -> Double
      -> WorksheetFunction a0
      -> IO Double
fInv0 arg1 arg2 arg3 =
  function1 "FInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

fisher0 :: Double
        -> WorksheetFunction a0
        -> IO Double
fisher0 arg1 =
  function1 "Fisher"
            [inDouble arg1]
            outDouble

fisherInv0 :: Double
           -> WorksheetFunction a0
           -> IO Double
fisherInv0 arg1 =
  function1 "FisherInv"
            [inDouble arg1]
            outDouble

floor0 :: Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
floor0 arg1 arg2 =
  function1 "Floor"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

gammaDist0 :: Double
           -> Double
           -> Double
           -> Bool
           -> WorksheetFunction a0
           -> IO Double
gammaDist0 arg1 arg2 arg3 arg4 =
  function1 "GammaDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

gammaInv0 :: Double
          -> Double
          -> Double
          -> WorksheetFunction a0
          -> IO Double
gammaInv0 arg1 arg2 arg3 =
  function1 "GammaInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

ceiling0 :: Double
         -> Double
         -> WorksheetFunction a0
         -> IO Double
ceiling0 arg1 arg2 =
  function1 "Ceiling"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

hypGeomDist0 :: Double
             -> Double
             -> Double
             -> Double
             -> WorksheetFunction a0
             -> IO Double
hypGeomDist0 arg1 arg2 arg3 arg4 =
  function1 "HypGeomDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

logNormDist0 :: Double
             -> Double
             -> Double
             -> WorksheetFunction a0
             -> IO Double
logNormDist0 arg1 arg2 arg3 =
  function1 "LogNormDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

logInv0 :: Double
        -> Double
        -> Double
        -> WorksheetFunction a0
        -> IO Double
logInv0 arg1 arg2 arg3 =
  function1 "LogInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

negBinomDist0 :: Double
              -> Double
              -> Double
              -> WorksheetFunction a0
              -> IO Double
negBinomDist0 arg1 arg2 arg3 =
  function1 "NegBinomDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

normDist0 :: Double
          -> Double
          -> Double
          -> Bool
          -> WorksheetFunction a0
          -> IO Double
normDist0 arg1 arg2 arg3 arg4 =
  function1 "NormDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

normSDist0 :: Double
           -> WorksheetFunction a0
           -> IO Double
normSDist0 arg1 =
  function1 "NormSDist"
            [inDouble arg1]
            outDouble

normInv0 :: Double
         -> Double
         -> Double
         -> WorksheetFunction a0
         -> IO Double
normInv0 arg1 arg2 arg3 =
  function1 "NormInv"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

normSInv0 :: Double
          -> WorksheetFunction a0
          -> IO Double
normSInv0 arg1 =
  function1 "NormSInv"
            [inDouble arg1]
            outDouble

standardize0 :: Double
             -> Double
             -> Double
             -> WorksheetFunction a0
             -> IO Double
standardize0 arg1 arg2 arg3 =
  function1 "Standardize"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

odd0 :: Double
     -> WorksheetFunction a0
     -> IO Double
odd0 arg1 =
  function1 "Odd"
            [inDouble arg1]
            outDouble

permut0 :: Double
        -> Double
        -> WorksheetFunction a0
        -> IO Double
permut0 arg1 arg2 =
  function1 "Permut"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

poisson0 :: Double
         -> Double
         -> Bool
         -> WorksheetFunction a0
         -> IO Double
poisson0 arg1 arg2 arg3 =
  function1 "Poisson"
            [ inDouble arg1
            , inDouble arg2
            , inBool arg3
            ]
            outDouble

tDist0 :: Double
       -> Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
tDist0 arg1 arg2 arg3 =
  function1 "TDist"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            ]
            outDouble

weibull0 :: Double
         -> Double
         -> Double
         -> Bool
         -> WorksheetFunction a0
         -> IO Double
weibull0 arg1 arg2 arg3 arg4 =
  function1 "Weibull"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inBool arg4
            ]
            outDouble

sumXMY20 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
sumXMY20 arg1 arg2 =
  function1 "SumXMY2"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

sumX2MY20 :: a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
sumX2MY20 arg1 arg2 =
  function1 "SumX2MY2"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

sumX2PY20 :: a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
sumX2PY20 arg1 arg2 =
  function1 "SumX2PY2"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

chiTest0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
chiTest0 arg1 arg2 =
  function1 "ChiTest"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

correl0 :: a1
        -> a2
        -> WorksheetFunction a0
        -> IO Double
correl0 arg1 arg2 =
  function1 "Correl"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

covar0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO Double
covar0 arg1 arg2 =
  function1 "Covar"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

forecast0 :: Double
          -> a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
forecast0 arg1 arg2 arg3 =
  function1 "Forecast"
            [ inDouble arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

fTest0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO Double
fTest0 arg1 arg2 =
  function1 "FTest"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

intercept0 :: a1
           -> a2
           -> WorksheetFunction a0
           -> IO Double
intercept0 arg1 arg2 =
  function1 "Intercept"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

pearson0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
pearson0 arg1 arg2 =
  function1 "Pearson"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

rSq0 :: a1
     -> a2
     -> WorksheetFunction a0
     -> IO Double
rSq0 arg1 arg2 =
  function1 "RSq"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

stEyx0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO Double
stEyx0 arg1 arg2 =
  function1 "StEyx"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

slope0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO Double
slope0 arg1 arg2 =
  function1 "Slope"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

tTest0 :: a1
       -> a2
       -> Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
tTest0 arg1 arg2 arg3 arg4 =
  function1 "TTest"
            [ inVariant arg1
            , inVariant arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

prob0 :: (Variant a3)
      => a1
      -> a2
      -> Double
      -> a3
      -> WorksheetFunction a0
      -> IO Double
prob0 arg1 arg2 arg3 arg4 =
  function1 "Prob"
            [ inVariant arg1
            , inVariant arg2
            , inDouble arg3
            , inVariant arg4
            ]
            outDouble

devSq0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> WorksheetFunction a0
       -> IO Double
devSq0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "DevSq"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

geoMean0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> a30
         -> WorksheetFunction a0
         -> IO Double
geoMean0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "GeoMean"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

harMean0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> a20
         -> a21
         -> a22
         -> a23
         -> a24
         -> a25
         -> a26
         -> a27
         -> a28
         -> a29
         -> a30
         -> WorksheetFunction a0
         -> IO Double
harMean0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "HarMean"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sumSq0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> WorksheetFunction a0
       -> IO Double
sumSq0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "SumSq"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

kurt0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> WorksheetFunction a0
      -> IO Double
kurt0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Kurt"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

skew0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> WorksheetFunction a0
      -> IO Double
skew0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Skew"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

zTest0 :: (Variant a2)
       => a1
       -> Double
       -> a2
       -> WorksheetFunction a0
       -> IO Double
zTest0 arg1 arg2 arg3 =
  function1 "ZTest"
            [ inVariant arg1
            , inDouble arg2
            , inVariant arg3
            ]
            outDouble

large0 :: a1
       -> Double
       -> WorksheetFunction a0
       -> IO Double
large0 arg1 arg2 =
  function1 "Large"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

small0 :: a1
       -> Double
       -> WorksheetFunction a0
       -> IO Double
small0 arg1 arg2 =
  function1 "Small"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

quartile0 :: a1
          -> Double
          -> WorksheetFunction a0
          -> IO Double
quartile0 arg1 arg2 =
  function1 "Quartile"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

percentile0 :: a1
            -> Double
            -> WorksheetFunction a0
            -> IO Double
percentile0 arg1 arg2 =
  function1 "Percentile"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

percentRank0 :: (Variant a2)
             => a1
             -> Double
             -> a2
             -> WorksheetFunction a0
             -> IO Double
percentRank0 arg1 arg2 arg3 =
  function1 "PercentRank"
            [ inVariant arg1
            , inDouble arg2
            , inVariant arg3
            ]
            outDouble

mode0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> WorksheetFunction a0
      -> IO Double
mode0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Mode"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

trimMean0 :: a1
          -> Double
          -> WorksheetFunction a0
          -> IO Double
trimMean0 arg1 arg2 =
  function1 "TrimMean"
            [ inVariant arg1
            , inDouble arg2
            ]
            outDouble

tInv0 :: Double
      -> Double
      -> WorksheetFunction a0
      -> IO Double
tInv0 arg1 arg2 =
  function1 "TInv"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

power0 :: Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
power0 arg1 arg2 =
  function1 "Power"
            [ inDouble arg1
            , inDouble arg2
            ]
            outDouble

radians0 :: Double
         -> WorksheetFunction a0
         -> IO Double
radians0 arg1 =
  function1 "Radians"
            [inDouble arg1]
            outDouble

degrees0 :: Double
         -> WorksheetFunction a0
         -> IO Double
degrees0 arg1 =
  function1 "Degrees"
            [inDouble arg1]
            outDouble

subtotal1 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
          => Double
          -> Range a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> a19
          -> a20
          -> a21
          -> a22
          -> a23
          -> a24
          -> a25
          -> a26
          -> a27
          -> a28
          -> a29
          -> WorksheetFunction a0
          -> IO Double
subtotal1 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Subtotal"
            [ inDouble arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

sumIf0 :: (Variant a3)
       => Range a1
       -> a2
       -> a3
       -> WorksheetFunction a0
       -> IO Double
sumIf0 arg1 arg2 arg3 =
  function1 "SumIf"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

countIf0 :: Range a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
countIf0 arg1 arg2 =
  function1 "CountIf"
            [ inIUnknown arg1
            , inVariant arg2
            ]
            outDouble

countBlank0 :: Range a1
            -> WorksheetFunction a0
            -> IO Double
countBlank0 arg1 =
  function1 "CountBlank"
            [inIUnknown arg1]
            outDouble

ispmt0 :: Double
       -> Double
       -> Double
       -> Double
       -> WorksheetFunction a0
       -> IO Double
ispmt0 arg1 arg2 arg3 arg4 =
  function1 "Ispmt"
            [ inDouble arg1
            , inDouble arg2
            , inDouble arg3
            , inDouble arg4
            ]
            outDouble

roman0 :: (Variant a1)
       => Double
       -> a1
       -> WorksheetFunction a0
       -> IO String
roman0 arg1 arg2 =
  function1 "Roman"
            [ inDouble arg1
            , inVariant arg2
            ]
            outString

asc0 :: String
     -> WorksheetFunction a0
     -> IO String
asc0 arg1 =
  function1 "Asc"
            [inString arg1]
            outString

dbcs0 :: String
      -> WorksheetFunction a0
      -> IO String
dbcs0 arg1 =
  function1 "Dbcs"
            [inString arg1]
            outString

phonetic0 :: Range a1
          -> WorksheetFunction a0
          -> IO String
phonetic0 arg1 =
  function1 "Phonetic"
            [inIUnknown arg1]
            outString

bahtText0 :: Double
          -> WorksheetFunction a0
          -> IO String
bahtText0 arg1 =
  function1 "BahtText"
            [inDouble arg1]
            outString

thaiDayOfWeek0 :: Double
               -> WorksheetFunction a0
               -> IO String
thaiDayOfWeek0 arg1 =
  function1 "ThaiDayOfWeek"
            [inDouble arg1]
            outString

thaiDigit0 :: String
           -> WorksheetFunction a0
           -> IO String
thaiDigit0 arg1 =
  function1 "ThaiDigit"
            [inString arg1]
            outString

thaiMonthOfYear0 :: Double
                 -> WorksheetFunction a0
                 -> IO String
thaiMonthOfYear0 arg1 =
  function1 "ThaiMonthOfYear"
            [inDouble arg1]
            outString

thaiNumSound0 :: Double
              -> WorksheetFunction a0
              -> IO String
thaiNumSound0 arg1 =
  function1 "ThaiNumSound"
            [inDouble arg1]
            outString

thaiNumString0 :: Double
               -> WorksheetFunction a0
               -> IO String
thaiNumString0 arg1 =
  function1 "ThaiNumString"
            [inDouble arg1]
            outString

thaiStringLength0 :: String
                  -> WorksheetFunction a0
                  -> IO Double
thaiStringLength0 arg1 =
  function1 "ThaiStringLength"
            [inString arg1]
            outDouble

isThaiDigit0 :: String
             -> WorksheetFunction a0
             -> IO Bool
isThaiDigit0 arg1 =
  function1 "IsThaiDigit"
            [inString arg1]
            outBool

roundBahtDown0 :: Double
               -> WorksheetFunction a0
               -> IO Double
roundBahtDown0 arg1 =
  function1 "RoundBahtDown"
            [inDouble arg1]
            outDouble

roundBahtUp0 :: Double
             -> WorksheetFunction a0
             -> IO Double
roundBahtUp0 arg1 =
  function1 "RoundBahtUp"
            [inDouble arg1]
            outDouble

thaiYear0 :: Double
          -> WorksheetFunction a0
          -> IO Double
thaiYear0 arg1 =
  function1 "ThaiYear"
            [inDouble arg1]
            outDouble

rTD0 :: (Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
     => a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> a31
     -> WorksheetFunction a0
     -> IO a1
rTD0 progID server topic1 topic2 topic3 topic4 topic5 topic6 topic7 topic8 topic9 topic10 topic11 topic12 topic13 topic14 topic15 topic16 topic17 topic18 topic19 topic20 topic21 topic22 topic23 topic24 topic25 topic26 topic27 topic28 =
  function1 "RTD"
            [ inVariant progID
            , inVariant server
            , inVariant topic1
            , inVariant topic2
            , inVariant topic3
            , inVariant topic4
            , inVariant topic5
            , inVariant topic6
            , inVariant topic7
            , inVariant topic8
            , inVariant topic9
            , inVariant topic10
            , inVariant topic11
            , inVariant topic12
            , inVariant topic13
            , inVariant topic14
            , inVariant topic15
            , inVariant topic16
            , inVariant topic17
            , inVariant topic18
            , inVariant topic19
            , inVariant topic20
            , inVariant topic21
            , inVariant topic22
            , inVariant topic23
            , inVariant topic24
            , inVariant topic25
            , inVariant topic26
            , inVariant topic27
            , inVariant topic28
            ]
            outVariant

hex2Bin0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
hex2Bin0 arg1 arg2 =
  function1 "Hex2Bin"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

hex2Dec0 :: a1
         -> WorksheetFunction a0
         -> IO String
hex2Dec0 arg1 =
  function1 "Hex2Dec"
            [inVariant arg1]
            outString

hex2Oct0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
hex2Oct0 arg1 arg2 =
  function1 "Hex2Oct"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

dec2Bin0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
dec2Bin0 arg1 arg2 =
  function1 "Dec2Bin"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

dec2Hex0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
dec2Hex0 arg1 arg2 =
  function1 "Dec2Hex"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

dec2Oct0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
dec2Oct0 arg1 arg2 =
  function1 "Dec2Oct"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

oct2Bin0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
oct2Bin0 arg1 arg2 =
  function1 "Oct2Bin"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

oct2Hex0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
oct2Hex0 arg1 arg2 =
  function1 "Oct2Hex"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

oct2Dec0 :: a1
         -> WorksheetFunction a0
         -> IO String
oct2Dec0 arg1 =
  function1 "Oct2Dec"
            [inVariant arg1]
            outString

bin2Dec0 :: a1
         -> WorksheetFunction a0
         -> IO String
bin2Dec0 arg1 =
  function1 "Bin2Dec"
            [inVariant arg1]
            outString

bin2Oct0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
bin2Oct0 arg1 arg2 =
  function1 "Bin2Oct"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

bin2Hex0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
bin2Hex0 arg1 arg2 =
  function1 "Bin2Hex"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imSub0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO String
imSub0 arg1 arg2 =
  function1 "ImSub"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imDiv0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO String
imDiv0 arg1 arg2 =
  function1 "ImDiv"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imPower0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO String
imPower0 arg1 arg2 =
  function1 "ImPower"
            [ inVariant arg1
            , inVariant arg2
            ]
            outString

imAbs0 :: a1
       -> WorksheetFunction a0
       -> IO String
imAbs0 arg1 =
  function1 "ImAbs"
            [inVariant arg1]
            outString

imSqrt0 :: a1
        -> WorksheetFunction a0
        -> IO String
imSqrt0 arg1 =
  function1 "ImSqrt"
            [inVariant arg1]
            outString

imLn0 :: a1
      -> WorksheetFunction a0
      -> IO String
imLn0 arg1 =
  function1 "ImLn"
            [inVariant arg1]
            outString

imLog20 :: a1
        -> WorksheetFunction a0
        -> IO String
imLog20 arg1 =
  function1 "ImLog2"
            [inVariant arg1]
            outString

imLog100 :: a1
         -> WorksheetFunction a0
         -> IO String
imLog100 arg1 =
  function1 "ImLog10"
            [inVariant arg1]
            outString

imSin0 :: a1
       -> WorksheetFunction a0
       -> IO String
imSin0 arg1 =
  function1 "ImSin"
            [inVariant arg1]
            outString

imCos0 :: a1
       -> WorksheetFunction a0
       -> IO String
imCos0 arg1 =
  function1 "ImCos"
            [inVariant arg1]
            outString

imExp0 :: a1
       -> WorksheetFunction a0
       -> IO String
imExp0 arg1 =
  function1 "ImExp"
            [inVariant arg1]
            outString

imArgument0 :: a1
            -> WorksheetFunction a0
            -> IO String
imArgument0 arg1 =
  function1 "ImArgument"
            [inVariant arg1]
            outString

imConjugate0 :: a1
             -> WorksheetFunction a0
             -> IO String
imConjugate0 arg1 =
  function1 "ImConjugate"
            [inVariant arg1]
            outString

imaginary0 :: a1
           -> WorksheetFunction a0
           -> IO Double
imaginary0 arg1 =
  function1 "Imaginary"
            [inVariant arg1]
            outDouble

imReal0 :: a1
        -> WorksheetFunction a0
        -> IO Double
imReal0 arg1 =
  function1 "ImReal"
            [inVariant arg1]
            outDouble

complex0 :: (Variant a3)
         => a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO String
complex0 arg1 arg2 arg3 =
  function1 "Complex"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outString

imSum0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> a17
       -> a18
       -> a19
       -> a20
       -> a21
       -> a22
       -> a23
       -> a24
       -> a25
       -> a26
       -> a27
       -> a28
       -> a29
       -> a30
       -> WorksheetFunction a0
       -> IO String
imSum0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "ImSum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outString

imProduct0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> a12
           -> a13
           -> a14
           -> a15
           -> a16
           -> a17
           -> a18
           -> a19
           -> a20
           -> a21
           -> a22
           -> a23
           -> a24
           -> a25
           -> a26
           -> a27
           -> a28
           -> a29
           -> a30
           -> WorksheetFunction a0
           -> IO String
imProduct0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "ImProduct"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outString

seriesSum0 :: a1
           -> a2
           -> a3
           -> a4
           -> WorksheetFunction a0
           -> IO Double
seriesSum0 arg1 arg2 arg3 arg4 =
  function1 "SeriesSum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

factDouble0 :: a1
            -> WorksheetFunction a0
            -> IO Double
factDouble0 arg1 =
  function1 "FactDouble"
            [inVariant arg1]
            outDouble

sqrtPi0 :: a1
        -> WorksheetFunction a0
        -> IO Double
sqrtPi0 arg1 =
  function1 "SqrtPi"
            [inVariant arg1]
            outDouble

quotient0 :: a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
quotient0 arg1 arg2 =
  function1 "Quotient"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

delta0 :: (Variant a2)
       => a1
       -> a2
       -> WorksheetFunction a0
       -> IO Double
delta0 arg1 arg2 =
  function1 "Delta"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

geStep0 :: (Variant a2)
        => a1
        -> a2
        -> WorksheetFunction a0
        -> IO Double
geStep0 arg1 arg2 =
  function1 "GeStep"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

isEven0 :: a1
        -> WorksheetFunction a0
        -> IO Bool
isEven0 arg1 =
  function1 "IsEven"
            [inVariant arg1]
            outBool

isOdd0 :: a1
       -> WorksheetFunction a0
       -> IO Bool
isOdd0 arg1 =
  function1 "IsOdd"
            [inVariant arg1]
            outBool

mRound0 :: a1
        -> a2
        -> WorksheetFunction a0
        -> IO Double
mRound0 arg1 arg2 =
  function1 "MRound"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

erf0 :: (Variant a2)
     => a1
     -> a2
     -> WorksheetFunction a0
     -> IO Double
erf0 arg1 arg2 =
  function1 "Erf"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

erfC0 :: a1
      -> WorksheetFunction a0
      -> IO Double
erfC0 arg1 =
  function1 "ErfC"
            [inVariant arg1]
            outDouble

besselJ0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
besselJ0 arg1 arg2 =
  function1 "BesselJ"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

besselK0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
besselK0 arg1 arg2 =
  function1 "BesselK"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

besselY0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
besselY0 arg1 arg2 =
  function1 "BesselY"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

besselI0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
besselI0 arg1 arg2 =
  function1 "BesselI"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

xirr0 :: (Variant a3)
      => a1
      -> a2
      -> a3
      -> WorksheetFunction a0
      -> IO Double
xirr0 arg1 arg2 arg3 =
  function1 "Xirr"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

xnpv0 :: a1
      -> a2
      -> WorksheetFunction a0
      -> IO Double
xnpv0 arg1 arg2 =
  function1 "Xnpv"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

priceMat0 :: (Variant a6)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> WorksheetFunction a0
          -> IO Double
priceMat0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "PriceMat"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

yieldMat0 :: (Variant a6)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> WorksheetFunction a0
          -> IO Double
yieldMat0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "YieldMat"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

intRate0 :: (Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> WorksheetFunction a0
         -> IO Double
intRate0 arg1 arg2 arg3 arg4 arg5 =
  function1 "IntRate"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

received0 :: (Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> WorksheetFunction a0
          -> IO Double
received0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Received"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

disc0 :: (Variant a5)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> WorksheetFunction a0
      -> IO Double
disc0 arg1 arg2 arg3 arg4 arg5 =
  function1 "Disc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

priceDisc0 :: (Variant a5)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> WorksheetFunction a0
           -> IO Double
priceDisc0 arg1 arg2 arg3 arg4 arg5 =
  function1 "PriceDisc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

yieldDisc0 :: (Variant a5)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> WorksheetFunction a0
           -> IO Double
yieldDisc0 arg1 arg2 arg3 arg4 arg5 =
  function1 "YieldDisc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

tBillEq0 :: (Variant a3)
         => a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO Double
tBillEq0 arg1 arg2 arg3 =
  function1 "TBillEq"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

tBillPrice0 :: (Variant a3)
            => a1
            -> a2
            -> a3
            -> WorksheetFunction a0
            -> IO Double
tBillPrice0 arg1 arg2 arg3 =
  function1 "TBillPrice"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

tBillYield0 :: (Variant a3)
            => a1
            -> a2
            -> a3
            -> WorksheetFunction a0
            -> IO Double
tBillYield0 arg1 arg2 arg3 =
  function1 "TBillYield"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

price0 :: (Variant a7)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> WorksheetFunction a0
       -> IO Double
price0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "Price"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

dollarDe0 :: a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
dollarDe0 arg1 arg2 =
  function1 "DollarDe"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

dollarFr0 :: a1
          -> a2
          -> WorksheetFunction a0
          -> IO Double
dollarFr0 arg1 arg2 =
  function1 "DollarFr"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

nominal0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
nominal0 arg1 arg2 =
  function1 "Nominal"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

effect0 :: a1
        -> a2
        -> WorksheetFunction a0
        -> IO Double
effect0 arg1 arg2 =
  function1 "Effect"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

cumPrinc0 :: a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> WorksheetFunction a0
          -> IO Double
cumPrinc0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "CumPrinc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

cumIPmt0 :: a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> WorksheetFunction a0
         -> IO Double
cumIPmt0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "CumIPmt"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

eDate0 :: a1
       -> a2
       -> WorksheetFunction a0
       -> IO Double
eDate0 arg1 arg2 =
  function1 "EDate"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

eoMonth0 :: a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
eoMonth0 arg1 arg2 =
  function1 "EoMonth"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

yearFrac0 :: (Variant a3)
          => a1
          -> a2
          -> a3
          -> WorksheetFunction a0
          -> IO Double
yearFrac0 arg1 arg2 arg3 =
  function1 "YearFrac"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

coupDayBs0 :: (Variant a4)
           => a1
           -> a2
           -> a3
           -> a4
           -> WorksheetFunction a0
           -> IO Double
coupDayBs0 arg1 arg2 arg3 arg4 =
  function1 "CoupDayBs"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupDays0 :: (Variant a4)
          => a1
          -> a2
          -> a3
          -> a4
          -> WorksheetFunction a0
          -> IO Double
coupDays0 arg1 arg2 arg3 arg4 =
  function1 "CoupDays"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupDaysNc0 :: (Variant a4)
            => a1
            -> a2
            -> a3
            -> a4
            -> WorksheetFunction a0
            -> IO Double
coupDaysNc0 arg1 arg2 arg3 arg4 =
  function1 "CoupDaysNc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupNcd0 :: (Variant a4)
         => a1
         -> a2
         -> a3
         -> a4
         -> WorksheetFunction a0
         -> IO Double
coupNcd0 arg1 arg2 arg3 arg4 =
  function1 "CoupNcd"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupNum0 :: (Variant a4)
         => a1
         -> a2
         -> a3
         -> a4
         -> WorksheetFunction a0
         -> IO Double
coupNum0 arg1 arg2 arg3 arg4 =
  function1 "CoupNum"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

coupPcd0 :: (Variant a4)
         => a1
         -> a2
         -> a3
         -> a4
         -> WorksheetFunction a0
         -> IO Double
coupPcd0 arg1 arg2 arg3 arg4 =
  function1 "CoupPcd"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outDouble

duration0 :: (Variant a6)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> WorksheetFunction a0
          -> IO Double
duration0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "Duration"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

mDuration0 :: (Variant a6)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> WorksheetFunction a0
           -> IO Double
mDuration0 arg1 arg2 arg3 arg4 arg5 arg6 =
  function1 "MDuration"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            ]
            outDouble

oddLPrice0 :: (Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> WorksheetFunction a0
           -> IO Double
oddLPrice0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 =
  function1 "OddLPrice"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            ]
            outDouble

oddLYield0 :: (Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> WorksheetFunction a0
           -> IO Double
oddLYield0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 =
  function1 "OddLYield"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            ]
            outDouble

oddFPrice0 :: (Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> WorksheetFunction a0
           -> IO Double
oddFPrice0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 =
  function1 "OddFPrice"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            ]
            outDouble

oddFYield0 :: (Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> WorksheetFunction a0
           -> IO Double
oddFYield0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 =
  function1 "OddFYield"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            ]
            outDouble

randBetween0 :: a1
             -> a2
             -> WorksheetFunction a0
             -> IO Double
randBetween0 arg1 arg2 =
  function1 "RandBetween"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

weekNum0 :: (Variant a2)
         => a1
         -> a2
         -> WorksheetFunction a0
         -> IO Double
weekNum0 arg1 arg2 =
  function1 "WeekNum"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

amorDegrc0 :: (Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> WorksheetFunction a0
           -> IO Double
amorDegrc0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "AmorDegrc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

amorLinc0 :: (Variant a7)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> WorksheetFunction a0
          -> IO Double
amorLinc0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "AmorLinc"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

convert1 :: a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO Double
convert1 arg1 arg2 arg3 =
  function1 "Convert"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

accrInt0 :: (Variant a7)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> WorksheetFunction a0
         -> IO Double
accrInt0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 =
  function1 "AccrInt"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            ]
            outDouble

accrIntM0 :: (Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> WorksheetFunction a0
          -> IO Double
accrIntM0 arg1 arg2 arg3 arg4 arg5 =
  function1 "AccrIntM"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            ]
            outDouble

workDay0 :: (Variant a3)
         => a1
         -> a2
         -> a3
         -> WorksheetFunction a0
         -> IO Double
workDay0 arg1 arg2 arg3 =
  function1 "WorkDay"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

networkDays0 :: (Variant a3)
             => a1
             -> a2
             -> a3
             -> WorksheetFunction a0
             -> IO Double
networkDays0 arg1 arg2 arg3 =
  function1 "NetworkDays"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

gcd0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Double
gcd0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Gcd"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

multiNomial0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> a15
             -> a16
             -> a17
             -> a18
             -> a19
             -> a20
             -> a21
             -> a22
             -> a23
             -> a24
             -> a25
             -> a26
             -> a27
             -> a28
             -> a29
             -> a30
             -> WorksheetFunction a0
             -> IO Double
multiNomial0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "MultiNomial"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

lcm0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> WorksheetFunction a0
     -> IO Double
lcm0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Lcm"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

fVSchedule0 :: a1
            -> a2
            -> WorksheetFunction a0
            -> IO Double
fVSchedule0 arg1 arg2 =
  function1 "FVSchedule"
            [ inVariant arg1
            , inVariant arg2
            ]
            outDouble

sumIfs0 :: (Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
        => Range a1
        -> Range a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> a29
        -> WorksheetFunction a0
        -> IO Double
sumIfs0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 =
  function1 "SumIfs"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            ]
            outDouble

countIfs0 :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
          => Range a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> a19
          -> a20
          -> a21
          -> a22
          -> a23
          -> a24
          -> a25
          -> a26
          -> a27
          -> a28
          -> a29
          -> a30
          -> WorksheetFunction a0
          -> IO Double
countIfs0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "CountIfs"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outDouble

averageIf0 :: (Variant a3)
           => Range a1
           -> a2
           -> a3
           -> WorksheetFunction a0
           -> IO Double
averageIf0 arg1 arg2 arg3 =
  function1 "AverageIf"
            [ inIUnknown arg1
            , inVariant arg2
            , inVariant arg3
            ]
            outDouble

averageIfs0 :: (Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
            => Range a1
            -> Range a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> a17
            -> a18
            -> a19
            -> a20
            -> a21
            -> a22
            -> a23
            -> a24
            -> a25
            -> a26
            -> a27
            -> a28
            -> a29
            -> WorksheetFunction a0
            -> IO Double
averageIfs0 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 =
  function1 "AverageIfs"
            [ inIUnknown arg1
            , inIUnknown arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            ]
            outDouble

ifError0 :: a2
         -> a3
         -> WorksheetFunction a0
         -> IO a1
ifError0 arg1 arg2 =
  function1 "IfError"
            [ inVariant arg1
            , inVariant arg2
            ]
            outVariant

-- --------------------------------------------------
-- 
-- dispinterface Range
-- 
-- --------------------------------------------------
data Range_ a = Range__ 
type Range a = IDispatch (Range_ a)
iidRange :: IID (Range ())
iidRange = mkIID "{00020846-0000-0000-C000-000000000046}"

queryInterface4 :: (Variant a1)
                => GUID
                -> Range a0
                -> IO a1
queryInterface4 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef4 :: Range a0
        -> IO Word32
addRef4 =
  function1 "AddRef"
            []
            outWord32

release4 :: Range a0
         -> IO Word32
release4 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount4 :: Range a0
                  -> IO Word32
getTypeInfoCount4 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo4 :: (Variant a1)
             => Word32
             -> Word32
             -> Range a0
             -> IO a1
getTypeInfo4 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames4 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> Range a0
               -> IO Int32
getIDsOfNames4 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke4 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> Range a0
        -> IO (a1, a2, Word32)
invoke4 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication275 :: (Variant a1)
                  => Range a0
                  -> IO a1
getApplication275 =
  propertyGet "Application"
              []
              outVariant

getCreator275 :: Range a0
              -> IO XlCreator
getCreator275 =
  propertyGet "Creator"
              []
              outEnum

getParent290 :: Range a0
             -> IO (IDispatch ())
getParent290 =
  propertyGet "Parent"
              []
              outIDispatch

activate15 :: Range a0
           -> IO a1
activate15 =
  function1 "Activate"
            []
            outVariant

getAddIndent17 :: Range a0
               -> IO a1
getAddIndent17 =
  propertyGet "AddIndent"
              []
              outVariant

setAddIndent17 :: a1
               -> Range a0
               -> IO ()
setAddIndent17 rhs =
  propertySet "AddIndent"
              [inVariant rhs]

getAddress1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> Range a0
            -> IO String
getAddress1 rowAbsolute columnAbsolute referenceStyle external relativeTo =
  propertyGet "Address"
              [ inVariant rowAbsolute
              , inVariant columnAbsolute
              , inDefaultValue (inInt32 1) inVariant referenceStyle
              , inVariant external
              , inVariant relativeTo
              ]
              outString

getAddressLocal0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> Range a0
                 -> IO String
getAddressLocal0 rowAbsolute columnAbsolute referenceStyle external relativeTo =
  propertyGet "AddressLocal"
              [ inVariant rowAbsolute
              , inVariant columnAbsolute
              , inDefaultValue (inInt32 1) inVariant referenceStyle
              , inVariant external
              , inVariant relativeTo
              ]
              outString

advancedFilter0 :: (Variant a2, Variant a3, Variant a4)
                => XlFilterAction
                -> a2
                -> a3
                -> a4
                -> Range a0
                -> IO a1
advancedFilter0 action criteriaRange copyToRange unique =
  function1 "AdvancedFilter"
            [ inEnum action
            , inVariant criteriaRange
            , inVariant copyToRange
            , inVariant unique
            ]
            outVariant

applyNames0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> Range a0
            -> IO a1
applyNames0 names ignoreRelativeAbsolute useRowColumnNames omitColumn omitRow order appendLast =
  function1 "ApplyNames"
            [ inVariant names
            , inVariant ignoreRelativeAbsolute
            , inVariant useRowColumnNames
            , inVariant omitColumn
            , inVariant omitRow
            , inDefaultValue (inInt32 1) inVariant order
            , inVariant appendLast
            ]
            outVariant

applyOutlineStyles0 :: Range a0
                    -> IO a1
applyOutlineStyles0 =
  function1 "ApplyOutlineStyles"
            []
            outVariant

getAreas0 :: Range a0
          -> IO (Areas ())
getAreas0 =
  propertyGet "Areas"
              []
              outIUnknown

autoComplete0 :: String
              -> Range a0
              -> IO String
autoComplete0 string =
  function1 "AutoComplete"
            [inString string]
            outString

autoFill0 :: (Variant a3)
          => Range a2
          -> a3
          -> Range a0
          -> IO a1
autoFill0 destination type0 =
  function1 "AutoFill"
            [ inIDispatch destination
            , inDefaultValue (inInt32 0) inVariant type0
            ]
            outVariant

autoFilter0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> Range a0
            -> IO a1
autoFilter0 field criteria1 operator criteria2 visibleDropDown =
  function1 "AutoFilter"
            [ inVariant field
            , inVariant criteria1
            , inDefaultValue (inInt32 1) inVariant operator
            , inVariant criteria2
            , inVariant visibleDropDown
            ]
            outVariant

autoFit0 :: Range a0
         -> IO a1
autoFit0 =
  function1 "AutoFit"
            []
            outVariant

autoFormat1 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> Range a0
            -> IO a1
autoFormat1 format0 number font alignment border pattern width =
  function1 "AutoFormat"
            [ inDefaultValue (inInt32 1) inVariant format0
            , inVariant number
            , inVariant font
            , inVariant alignment
            , inVariant border
            , inVariant pattern
            , inVariant width
            ]
            outVariant

autoOutline0 :: Range a0
             -> IO a1
autoOutline0 =
  function1 "AutoOutline"
            []
            outVariant

borderAround0 :: (Variant a2, Variant a3, Variant a4, Variant a5)
              => a2
              -> a3
              -> a4
              -> a5
              -> Range a0
              -> IO a1
borderAround0 lineStyle weight colorIndex color =
  function1 "BorderAround"
            [ inVariant lineStyle
            , inDefaultValue (inInt32 2) inVariant weight
            , inDefaultValue (inInt32 (-4105)) inVariant colorIndex
            , inVariant color
            ]
            outVariant

getBorders7 :: Range a0
            -> IO (Borders ())
getBorders7 =
  propertyGet "Borders"
              []
              outIUnknown

calculate5 :: Range a0
           -> IO a1
calculate5 =
  function1 "Calculate"
            []
            outVariant

getCells3 :: Range a0
          -> IO (Range ())
getCells3 =
  propertyGet "Cells"
              []
              outIDispatch

getCharacters30 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Range a0
                -> IO (Characters ())
getCharacters30 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling32 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Range a0
                -> IO a1
checkSpelling32 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

clear7 :: Range a0
       -> IO a1
clear7 =
  function1 "Clear"
            []
            outVariant

clearContents1 :: Range a0
               -> IO a1
clearContents1 =
  function1 "ClearContents"
            []
            outVariant

clearFormats9 :: Range a0
              -> IO a1
clearFormats9 =
  function1 "ClearFormats"
            []
            outVariant

clearNotes0 :: Range a0
            -> IO a1
clearNotes0 =
  function1 "ClearNotes"
            []
            outVariant

clearOutline0 :: Range a0
              -> IO a1
clearOutline0 =
  function1 "ClearOutline"
            []
            outVariant

getColumn1 :: Range a0
           -> IO Int32
getColumn1 =
  propertyGet "Column"
              []
              outInt32

columnDifferences0 :: a1
                   -> Range a0
                   -> IO (Range ())
columnDifferences0 comparison =
  function1 "ColumnDifferences"
            [inVariant comparison]
            outIDispatch

getColumns3 :: Range a0
            -> IO (Range ())
getColumns3 =
  propertyGet "Columns"
              []
              outIDispatch

getColumnWidth0 :: Range a0
                -> IO a1
getColumnWidth0 =
  propertyGet "ColumnWidth"
              []
              outVariant

setColumnWidth0 :: a1
                -> Range a0
                -> IO ()
setColumnWidth0 rhs =
  propertySet "ColumnWidth"
              [inVariant rhs]

consolidate0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
             => a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> Range a0
             -> IO a1
consolidate0 sources function topRow leftColumn createLinks =
  function1 "Consolidate"
            [ inVariant sources
            , inVariant function
            , inVariant topRow
            , inVariant leftColumn
            , inVariant createLinks
            ]
            outVariant

copy57 :: (Variant a2)
       => a2
       -> Range a0
       -> IO a1
copy57 destination =
  function1 "Copy"
            [inVariant destination]
            outVariant

copyFromRecordset0 :: (Variant a2, Variant a3)
                   => IUnknown a1
                   -> a2
                   -> a3
                   -> Range a0
                   -> IO Int32
copyFromRecordset0 data0 maxRows maxColumns =
  function1 "CopyFromRecordset"
            [ inIUnknown data0
            , inVariant maxRows
            , inVariant maxColumns
            ]
            outInt32

copyPicture44 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Range a0
              -> IO a1
copyPicture44 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 1) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

getCount114 :: Range a0
            -> IO Int32
getCount114 =
  propertyGet "Count"
              []
              outInt32

createNames0 :: (Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> Range a0
             -> IO a1
createNames0 top left bottom right =
  function1 "CreateNames"
            [ inVariant top
            , inVariant left
            , inVariant bottom
            , inVariant right
            ]
            outVariant

createPublisher1 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> Range a0
                 -> IO a1
createPublisher1 edition appearance containsPICT containsBIFF containsRTF containsVALU =
  function1 "CreatePublisher"
            [ inVariant edition
            , inDefaultValue (inInt32 1) inVariant appearance
            , inVariant containsPICT
            , inVariant containsBIFF
            , inVariant containsRTF
            , inVariant containsVALU
            ]
            outVariant

getCurrentArray0 :: Range a0
                 -> IO (Range ())
getCurrentArray0 =
  propertyGet "CurrentArray"
              []
              outIDispatch

getCurrentRegion0 :: Range a0
                  -> IO (Range ())
getCurrentRegion0 =
  propertyGet "CurrentRegion"
              []
              outIDispatch

cut42 :: (Variant a2)
      => a2
      -> Range a0
      -> IO a1
cut42 destination =
  function1 "Cut"
            [inVariant destination]
            outVariant

dataSeries0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
            => a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> Range a0
            -> IO a1
dataSeries0 rowcol type0 date step stop trend1 =
  function1 "DataSeries"
            [ inVariant rowcol
            , inDefaultValue (inInt32 (-4132)) inVariant type0
            , inDefaultValue (inInt32 1) inVariant date
            , inVariant step
            , inVariant stop
            , inVariant trend1
            ]
            outVariant

getDefault111 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Range a0
              -> IO a1
getDefault111 rowIndex columnIndex =
  propertyGet "_Default"
              [ inVariant rowIndex
              , inVariant columnIndex
              ]
              outVariant

setDefault21 :: (Variant a1, Variant a2)
             => a1
             -> a2
             -> a3
             -> Range a0
             -> IO ()
setDefault21 rowIndex columnIndex rhs =
  propertySet "_Default"
              [ inVariant rowIndex
              , inVariant columnIndex
              , inVariant rhs
              ]

delete128 :: (Variant a2)
          => a2
          -> Range a0
          -> IO a1
delete128 shift =
  function1 "Delete"
            [inVariant shift]
            outVariant

getDependents0 :: Range a0
               -> IO (Range ())
getDependents0 =
  propertyGet "Dependents"
              []
              outIDispatch

dialogBox0 :: Range a0
           -> IO a1
dialogBox0 =
  function1 "DialogBox"
            []
            outVariant

getDirectDependents0 :: Range a0
                     -> IO (Range ())
getDirectDependents0 =
  propertyGet "DirectDependents"
              []
              outIDispatch

getDirectPrecedents0 :: Range a0
                     -> IO (Range ())
getDirectPrecedents0 =
  propertyGet "DirectPrecedents"
              []
              outIDispatch

editionOptions0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                => XlEditionType
                -> XlEditionOptionsOption
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> Range a0
                -> IO a1
editionOptions0 type0 option name reference appearance chartSize format0 =
  function1 "EditionOptions"
            [ inEnum type0
            , inEnum option
            , inVariant name
            , inVariant reference
            , inDefaultValue (inInt32 1) inVariant appearance
            , inDefaultValue (inInt32 1) inVariant chartSize
            , inVariant format0
            ]
            outVariant

getEnd0 :: XlDirection
        -> Range a0
        -> IO (Range ())
getEnd0 direction =
  propertyGet "End"
              [inEnum direction]
              outIDispatch

getEntireColumn0 :: Range a0
                 -> IO (Range ())
getEntireColumn0 =
  propertyGet "EntireColumn"
              []
              outIDispatch

getEntireRow0 :: Range a0
              -> IO (Range ())
getEntireRow0 =
  propertyGet "EntireRow"
              []
              outIDispatch

fillDown0 :: Range a0
          -> IO a1
fillDown0 =
  function1 "FillDown"
            []
            outVariant

fillLeft0 :: Range a0
          -> IO a1
fillLeft0 =
  function1 "FillLeft"
            []
            outVariant

fillRight0 :: Range a0
           -> IO a1
fillRight0 =
  function1 "FillRight"
            []
            outVariant

fillUp0 :: Range a0
        -> IO a1
fillUp0 =
  function1 "FillUp"
            []
            outVariant

find2 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> Range a0
      -> IO (Range ())
find2 what after lookIn lookAt searchOrder searchDirection matchCase matchByte searchFormat =
  function1 "Find"
            [ inVariant what
            , inVariant after
            , inVariant lookIn
            , inVariant lookAt
            , inVariant searchOrder
            , inDefaultValue (inInt32 1) inVariant searchDirection
            , inVariant matchCase
            , inVariant matchByte
            , inVariant searchFormat
            ]
            outIDispatch

findNext0 :: (Variant a1)
          => a1
          -> Range a0
          -> IO (Range ())
findNext0 after =
  function1 "FindNext"
            [inVariant after]
            outIDispatch

findPrevious0 :: (Variant a1)
              => a1
              -> Range a0
              -> IO (Range ())
findPrevious0 after =
  function1 "FindPrevious"
            [inVariant after]
            outIDispatch

getFont35 :: Range a0
          -> IO (Font ())
getFont35 =
  propertyGet "Font"
              []
              outIDispatch

getFormula26 :: Range a0
             -> IO a1
getFormula26 =
  propertyGet "Formula"
              []
              outVariant

setFormula21 :: a1
             -> Range a0
             -> IO ()
setFormula21 rhs =
  propertySet "Formula"
              [inVariant rhs]

getFormulaArray0 :: Range a0
                 -> IO a1
getFormulaArray0 =
  propertyGet "FormulaArray"
              []
              outVariant

setFormulaArray0 :: a1
                 -> Range a0
                 -> IO ()
setFormulaArray0 rhs =
  propertySet "FormulaArray"
              [inVariant rhs]

getFormulaLabel0 :: Range a0
                 -> IO XlFormulaLabel
getFormulaLabel0 =
  propertyGet "FormulaLabel"
              []
              outEnum

setFormulaLabel0 :: XlFormulaLabel
                 -> Range a0
                 -> IO ()
setFormulaLabel0 rhs =
  propertySet "FormulaLabel"
              [inEnum rhs]

getFormulaHidden2 :: Range a0
                  -> IO a1
getFormulaHidden2 =
  propertyGet "FormulaHidden"
              []
              outVariant

setFormulaHidden2 :: a1
                  -> Range a0
                  -> IO ()
setFormulaHidden2 rhs =
  propertySet "FormulaHidden"
              [inVariant rhs]

getFormulaLocal1 :: Range a0
                 -> IO a1
getFormulaLocal1 =
  propertyGet "FormulaLocal"
              []
              outVariant

setFormulaLocal1 :: a1
                 -> Range a0
                 -> IO ()
setFormulaLocal1 rhs =
  propertySet "FormulaLocal"
              [inVariant rhs]

getFormulaR1C11 :: Range a0
                -> IO a1
getFormulaR1C11 =
  propertyGet "FormulaR1C1"
              []
              outVariant

setFormulaR1C11 :: a1
                -> Range a0
                -> IO ()
setFormulaR1C11 rhs =
  propertySet "FormulaR1C1"
              [inVariant rhs]

getFormulaR1C1Local1 :: Range a0
                     -> IO a1
getFormulaR1C1Local1 =
  propertyGet "FormulaR1C1Local"
              []
              outVariant

setFormulaR1C1Local1 :: a1
                     -> Range a0
                     -> IO ()
setFormulaR1C1Local1 rhs =
  propertySet "FormulaR1C1Local"
              [inVariant rhs]

functionWizard0 :: Range a0
                -> IO a1
functionWizard0 =
  function1 "FunctionWizard"
            []
            outVariant

goalSeek0 :: a1
          -> Range a2
          -> Range a0
          -> IO Bool
goalSeek0 goal changingCell =
  function1 "GoalSeek"
            [ inVariant goal
            , inIDispatch changingCell
            ]
            outBool

group22 :: (Variant a2, Variant a3, Variant a4, Variant a5)
        => a2
        -> a3
        -> a4
        -> a5
        -> Range a0
        -> IO a1
group22 start end by periods =
  function1 "Group"
            [ inVariant start
            , inVariant end
            , inVariant by
            , inVariant periods
            ]
            outVariant

getHasArray0 :: Range a0
             -> IO a1
getHasArray0 =
  propertyGet "HasArray"
              []
              outVariant

getHasFormula0 :: Range a0
               -> IO a1
getHasFormula0 =
  propertyGet "HasFormula"
              []
              outVariant

getHeight55 :: Range a0
            -> IO a1
getHeight55 =
  propertyGet "Height"
              []
              outVariant

getHidden3 :: Range a0
           -> IO a1
getHidden3 =
  propertyGet "Hidden"
              []
              outVariant

setHidden3 :: a1
           -> Range a0
           -> IO ()
setHidden3 rhs =
  propertySet "Hidden"
              [inVariant rhs]

getHorizontalAlignment23 :: Range a0
                         -> IO a1
getHorizontalAlignment23 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment23 :: a1
                         -> Range a0
                         -> IO ()
setHorizontalAlignment23 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getIndentLevel2 :: Range a0
                -> IO a1
getIndentLevel2 =
  propertyGet "IndentLevel"
              []
              outVariant

setIndentLevel2 :: a1
                -> Range a0
                -> IO ()
setIndentLevel2 rhs =
  propertySet "IndentLevel"
              [inVariant rhs]

insertIndent0 :: Int32
              -> Range a0
              -> IO ()
insertIndent0 insertAmount =
  method0 "InsertIndent"
          [inInt32 insertAmount]

insert3 :: (Variant a2, Variant a3)
        => a2
        -> a3
        -> Range a0
        -> IO a1
insert3 shift copyOrigin =
  function1 "Insert"
            [ inVariant shift
            , inVariant copyOrigin
            ]
            outVariant

getInterior45 :: Range a0
              -> IO (Interior ())
getInterior45 =
  propertyGet "Interior"
              []
              outIUnknown

getItem56 :: (Variant a3)
          => a2
          -> a3
          -> Range a0
          -> IO a1
getItem56 rowIndex columnIndex =
  propertyGet "Item"
              [ inVariant rowIndex
              , inVariant columnIndex
              ]
              outVariant

setItem1 :: (Variant a2)
         => a1
         -> a2
         -> a3
         -> Range a0
         -> IO ()
setItem1 rowIndex columnIndex rhs =
  propertySet "Item"
              [ inVariant rowIndex
              , inVariant columnIndex
              , inVariant rhs
              ]

justify0 :: Range a0
         -> IO a1
justify0 =
  function1 "Justify"
            []
            outVariant

getLeft58 :: Range a0
          -> IO a1
getLeft58 =
  propertyGet "Left"
              []
              outVariant

getListHeaderRows0 :: Range a0
                   -> IO Int32
getListHeaderRows0 =
  propertyGet "ListHeaderRows"
              []
              outInt32

listNames0 :: Range a0
           -> IO a1
listNames0 =
  function1 "ListNames"
            []
            outVariant

getLocationInTable0 :: Range a0
                    -> IO XlLocationInTable
getLocationInTable0 =
  propertyGet "LocationInTable"
              []
              outEnum

getLocked47 :: Range a0
            -> IO a1
getLocked47 =
  propertyGet "Locked"
              []
              outVariant

setLocked47 :: a1
            -> Range a0
            -> IO ()
setLocked47 rhs =
  propertySet "Locked"
              [inVariant rhs]

merge2 :: (Variant a1)
       => a1
       -> Range a0
       -> IO ()
merge2 across =
  method0 "Merge"
          [inVariant across]

unMerge0 :: Range a0
         -> IO ()
unMerge0 =
  method0 "UnMerge"
          []

getMergeArea0 :: Range a0
              -> IO (Range ())
getMergeArea0 =
  propertyGet "MergeArea"
              []
              outIDispatch

getMergeCells2 :: Range a0
               -> IO a1
getMergeCells2 =
  propertyGet "MergeCells"
              []
              outVariant

setMergeCells2 :: a1
               -> Range a0
               -> IO ()
setMergeCells2 rhs =
  propertySet "MergeCells"
              [inVariant rhs]

getName80 :: Range a0
          -> IO a1
getName80 =
  propertyGet "Name"
              []
              outVariant

setName44 :: a1
          -> Range a0
          -> IO ()
setName44 rhs =
  propertySet "Name"
              [inVariant rhs]

navigateArrow0 :: (Variant a2, Variant a3, Variant a4)
               => a2
               -> a3
               -> a4
               -> Range a0
               -> IO a1
navigateArrow0 towardPrecedent arrowNumber linkNumber =
  function1 "NavigateArrow"
            [ inVariant towardPrecedent
            , inVariant arrowNumber
            , inVariant linkNumber
            ]
            outVariant

getNewEnum68 :: Range a0
             -> IO (IUnknown ())
getNewEnum68 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getNext4 :: Range a0
         -> IO (Range ())
getNext4 =
  propertyGet "Next"
              []
              outIDispatch

noteText0 :: (Variant a1, Variant a2, Variant a3)
          => a1
          -> a2
          -> a3
          -> Range a0
          -> IO String
noteText0 text2 start length =
  function1 "NoteText"
            [ inVariant text2
            , inVariant start
            , inVariant length
            ]
            outString

getNumberFormat10 :: Range a0
                  -> IO a1
getNumberFormat10 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat10 :: a1
                  -> Range a0
                  -> IO ()
setNumberFormat10 rhs =
  propertySet "NumberFormat"
              [inVariant rhs]

getNumberFormatLocal5 :: Range a0
                      -> IO a1
getNumberFormatLocal5 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal5 :: a1
                      -> Range a0
                      -> IO ()
setNumberFormatLocal5 rhs =
  propertySet "NumberFormatLocal"
              [inVariant rhs]

getOffset1 :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Range a0
           -> IO (Range ())
getOffset1 rowOffset columnOffset =
  propertyGet "Offset"
              [ inVariant rowOffset
              , inVariant columnOffset
              ]
              outIDispatch

getOrientation29 :: Range a0
                 -> IO a1
getOrientation29 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation29 :: a1
                 -> Range a0
                 -> IO ()
setOrientation29 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getOutlineLevel0 :: Range a0
                 -> IO a1
getOutlineLevel0 =
  propertyGet "OutlineLevel"
              []
              outVariant

setOutlineLevel0 :: a1
                 -> Range a0
                 -> IO ()
setOutlineLevel0 rhs =
  propertySet "OutlineLevel"
              [inVariant rhs]

getPageBreak0 :: Range a0
              -> IO Int32
getPageBreak0 =
  propertyGet "PageBreak"
              []
              outInt32

setPageBreak0 :: Int32
              -> Range a0
              -> IO ()
setPageBreak0 rhs =
  propertySet "PageBreak"
              [inInt32 rhs]

parse0 :: (Variant a2, Variant a3)
       => a2
       -> a3
       -> Range a0
       -> IO a1
parse0 parseLine destination =
  function1 "Parse"
            [ inVariant parseLine
            , inVariant destination
            ]
            outVariant

pasteSpecial5 :: (Variant a2, Variant a3, Variant a4, Variant a5)
              => a2
              -> a3
              -> a4
              -> a5
              -> Range a0
              -> IO a1
pasteSpecial5 paste8 operation skipBlanks transpose1 =
  function1 "_PasteSpecial"
            [ inDefaultValue (inInt32 (-4104)) inVariant paste8
            , inDefaultValue (inInt32 (-4142)) inVariant operation
            , inVariant skipBlanks
            , inVariant transpose1
            ]
            outVariant

getPivotField2 :: Range a0
               -> IO (PivotField ())
getPivotField2 =
  propertyGet "PivotField"
              []
              outIUnknown

getPivotItem1 :: Range a0
              -> IO (PivotItem ())
getPivotItem1 =
  propertyGet "PivotItem"
              []
              outIUnknown

getPivotTable2 :: Range a0
               -> IO (PivotTable ())
getPivotTable2 =
  propertyGet "PivotTable"
              []
              outIUnknown

getPrecedents0 :: Range a0
               -> IO (Range ())
getPrecedents0 =
  propertyGet "Precedents"
              []
              outIDispatch

getPrefixCharacter0 :: Range a0
                    -> IO a1
getPrefixCharacter0 =
  propertyGet "PrefixCharacter"
              []
              outVariant

getPrevious4 :: Range a0
             -> IO (Range ())
getPrevious4 =
  propertyGet "Previous"
              []
              outIDispatch

printOut36 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Range a0
           -> IO a1
printOut36 from to copies preview activePrinter printToFile collate =
  function1 "__PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            ]
            outVariant

printPreview10 :: (Variant a2)
               => a2
               -> Range a0
               -> IO a1
printPreview10 enableChanges =
  function1 "PrintPreview"
            [inVariant enableChanges]
            outVariant

getQueryTable1 :: (Variant a1)
               => Range a0
               -> IO a1
getQueryTable1 =
  propertyGet "QueryTable"
              []
              outVariant

getRange13 :: (Variant a2)
           => a1
           -> a2
           -> Range a0
           -> IO (Range ())
getRange13 cell1 cell2 =
  propertyGet "Range"
              [ inVariant cell1
              , inVariant cell2
              ]
              outIDispatch

removeSubtotal0 :: Range a0
                -> IO a1
removeSubtotal0 =
  function1 "RemoveSubtotal"
            []
            outVariant

replace2 :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> Range a0
         -> IO Bool
replace2 what replacement lookAt searchOrder matchCase matchByte searchFormat replaceFormat =
  function1 "Replace"
            [ inVariant what
            , inVariant replacement
            , inVariant lookAt
            , inVariant searchOrder
            , inVariant matchCase
            , inVariant matchByte
            , inVariant searchFormat
            , inVariant replaceFormat
            ]
            outBool

getResize0 :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Range a0
           -> IO (Range ())
getResize0 rowSize columnSize =
  propertyGet "Resize"
              [ inVariant rowSize
              , inVariant columnSize
              ]
              outIDispatch

getRow0 :: Range a0
        -> IO Int32
getRow0 =
  propertyGet "Row"
              []
              outInt32

rowDifferences0 :: a1
                -> Range a0
                -> IO (Range ())
rowDifferences0 comparison =
  function1 "RowDifferences"
            [inVariant comparison]
            outIDispatch

getRowHeight0 :: Range a0
              -> IO a1
getRowHeight0 =
  propertyGet "RowHeight"
              []
              outVariant

setRowHeight0 :: a1
              -> Range a0
              -> IO ()
setRowHeight0 rhs =
  propertySet "RowHeight"
              [inVariant rhs]

getRows3 :: Range a0
         -> IO (Range ())
getRows3 =
  propertyGet "Rows"
              []
              outIDispatch

run3 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
     => a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> a20
     -> a21
     -> a22
     -> a23
     -> a24
     -> a25
     -> a26
     -> a27
     -> a28
     -> a29
     -> a30
     -> a31
     -> Range a0
     -> IO a1
run3 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Run"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

select81 :: Range a0
         -> IO a1
select81 =
  function1 "Select"
            []
            outVariant

show4 :: Range a0
      -> IO a1
show4 =
  function1 "Show"
            []
            outVariant

showDependents0 :: (Variant a2)
                => a2
                -> Range a0
                -> IO a1
showDependents0 remove =
  function1 "ShowDependents"
            [inVariant remove]
            outVariant

getShowDetail2 :: Range a0
               -> IO a1
getShowDetail2 =
  propertyGet "ShowDetail"
              []
              outVariant

setShowDetail2 :: a1
               -> Range a0
               -> IO ()
setShowDetail2 rhs =
  propertySet "ShowDetail"
              [inVariant rhs]

showErrors0 :: Range a0
            -> IO a1
showErrors0 =
  function1 "ShowErrors"
            []
            outVariant

showPrecedents0 :: (Variant a2)
                => a2
                -> Range a0
                -> IO a1
showPrecedents0 remove =
  function1 "ShowPrecedents"
            [inVariant remove]
            outVariant

getShrinkToFit2 :: Range a0
                -> IO a1
getShrinkToFit2 =
  propertyGet "ShrinkToFit"
              []
              outVariant

setShrinkToFit2 :: a1
                -> Range a0
                -> IO ()
setShrinkToFit2 rhs =
  propertySet "ShrinkToFit"
              [inVariant rhs]

sort0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
      => a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> Range a0
      -> IO a1
sort0 key1 order1 key2 type0 order2 key3 order3 header orderCustom matchCase orientation sortMethod dataOption1 dataOption2 dataOption3 =
  function1 "Sort"
            [ inVariant key1
            , inDefaultValue (inInt32 1) inVariant order1
            , inVariant key2
            , inVariant type0
            , inDefaultValue (inInt32 1) inVariant order2
            , inVariant key3
            , inDefaultValue (inInt32 1) inVariant order3
            , inDefaultValue (inInt32 2) inVariant header
            , inVariant orderCustom
            , inVariant matchCase
            , inDefaultValue (inInt32 2) inVariant orientation
            , inDefaultValue (inInt32 1) inVariant sortMethod
            , inDefaultValue (inInt32 0) inVariant dataOption1
            , inDefaultValue (inInt32 0) inVariant dataOption2
            , inDefaultValue (inInt32 0) inVariant dataOption3
            ]
            outVariant

sortSpecial0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
             => a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> a15
             -> a16
             -> Range a0
             -> IO a1
sortSpecial0 sortMethod key1 order1 type0 key2 order2 key3 order3 header orderCustom matchCase orientation dataOption1 dataOption2 dataOption3 =
  function1 "SortSpecial"
            [ inDefaultValue (inInt32 1) inVariant sortMethod
            , inVariant key1
            , inDefaultValue (inInt32 1) inVariant order1
            , inVariant type0
            , inVariant key2
            , inDefaultValue (inInt32 1) inVariant order2
            , inVariant key3
            , inDefaultValue (inInt32 1) inVariant order3
            , inDefaultValue (inInt32 2) inVariant header
            , inVariant orderCustom
            , inVariant matchCase
            , inDefaultValue (inInt32 2) inVariant orientation
            , inDefaultValue (inInt32 0) inVariant dataOption1
            , inDefaultValue (inInt32 0) inVariant dataOption2
            , inDefaultValue (inInt32 0) inVariant dataOption3
            ]
            outVariant

getSoundNote0 :: Range a0
              -> IO (SoundNote ())
getSoundNote0 =
  propertyGet "SoundNote"
              []
              outIUnknown

specialCells0 :: (Variant a1)
              => XlCellType
              -> a1
              -> Range a0
              -> IO (Range ())
specialCells0 type0 value =
  function1 "SpecialCells"
            [ inEnum type0
            , inVariant value
            ]
            outIDispatch

getStyle2 :: Range a0
          -> IO a1
getStyle2 =
  propertyGet "Style"
              []
              outVariant

setStyle2 :: a1
          -> Range a0
          -> IO ()
setStyle2 rhs =
  propertySet "Style"
              [inVariant rhs]

subscribeTo0 :: (Variant a2)
             => String
             -> a2
             -> Range a0
             -> IO a1
subscribeTo0 edition format0 =
  function1 "SubscribeTo"
            [ inString edition
            , inDefaultValue (inInt32 (-4158)) inVariant format0
            ]
            outVariant

subtotal2 :: (Variant a3, Variant a4, Variant a5)
          => Int32
          -> XlConsolidationFunction
          -> a2
          -> a3
          -> a4
          -> a5
          -> Range a0
          -> IO a1
subtotal2 groupBy function totalList replace3 pageBreaks summaryBelowData =
  function1 "Subtotal"
            [ inInt32 groupBy
            , inEnum function
            , inVariant totalList
            , inVariant replace3
            , inVariant pageBreaks
            , inDefaultValue (inInt32 1) inVariant summaryBelowData
            ]
            outVariant

getSummary0 :: Range a0
            -> IO a1
getSummary0 =
  propertyGet "Summary"
              []
              outVariant

table0 :: (Variant a2, Variant a3)
       => a2
       -> a3
       -> Range a0
       -> IO a1
table0 rowInput columnInput =
  function1 "Table"
            [ inVariant rowInput
            , inVariant columnInput
            ]
            outVariant

getText36 :: Range a0
          -> IO a1
getText36 =
  propertyGet "Text"
              []
              outVariant

textToColumns0 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
               => a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> a13
               -> a14
               -> a15
               -> Range a0
               -> IO a1
textToColumns0 destination dataType textQualifier consecutiveDelimiter tab semicolon comma space other otherChar fieldInfo decimalSeparator thousandsSeparator trailingMinusNumbers =
  function1 "TextToColumns"
            [ inVariant destination
            , inDefaultValue (inInt32 1) inVariant dataType
            , inDefaultValue (inInt32 1) inVariant textQualifier
            , inVariant consecutiveDelimiter
            , inVariant tab
            , inVariant semicolon
            , inVariant comma
            , inVariant space
            , inVariant other
            , inVariant otherChar
            , inVariant fieldInfo
            , inVariant decimalSeparator
            , inVariant thousandsSeparator
            , inVariant trailingMinusNumbers
            ]
            outVariant

getTop58 :: Range a0
         -> IO a1
getTop58 =
  propertyGet "Top"
              []
              outVariant

ungroup5 :: Range a0
         -> IO a1
ungroup5 =
  function1 "Ungroup"
            []
            outVariant

getUseStandardHeight0 :: Range a0
                      -> IO a1
getUseStandardHeight0 =
  propertyGet "UseStandardHeight"
              []
              outVariant

setUseStandardHeight0 :: a1
                      -> Range a0
                      -> IO ()
setUseStandardHeight0 rhs =
  propertySet "UseStandardHeight"
              [inVariant rhs]

getUseStandardWidth0 :: Range a0
                     -> IO a1
getUseStandardWidth0 =
  propertyGet "UseStandardWidth"
              []
              outVariant

setUseStandardWidth0 :: a1
                     -> Range a0
                     -> IO ()
setUseStandardWidth0 rhs =
  propertySet "UseStandardWidth"
              [inVariant rhs]

getValidation0 :: Range a0
               -> IO (Validation ())
getValidation0 =
  propertyGet "Validation"
              []
              outIUnknown

getValue33 :: (Variant a2)
           => a2
           -> Range a0
           -> IO a1
getValue33 rangeValueDataType =
  propertyGet "Value"
              [inVariant rangeValueDataType]
              outVariant

setValue25 :: (Variant a1)
           => a1
           -> a2
           -> Range a0
           -> IO ()
setValue25 rangeValueDataType rhs =
  propertySet "Value"
              [ inVariant rangeValueDataType
              , inVariant rhs
              ]

getValue211 :: Range a0
            -> IO a1
getValue211 =
  propertyGet "Value2"
              []
              outVariant

setValue26 :: a1
           -> Range a0
           -> IO ()
setValue26 rhs =
  propertySet "Value2"
              [inVariant rhs]

getVerticalAlignment23 :: Range a0
                       -> IO a1
getVerticalAlignment23 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment23 :: a1
                       -> Range a0
                       -> IO ()
setVerticalAlignment23 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getWidth56 :: Range a0
           -> IO a1
getWidth56 =
  propertyGet "Width"
              []
              outVariant

getWorksheet0 :: (Variant a1)
              => Range a0
              -> IO a1
getWorksheet0 =
  propertyGet "Worksheet"
              []
              outVariant

getWrapText2 :: Range a0
             -> IO a1
getWrapText2 =
  propertyGet "WrapText"
              []
              outVariant

setWrapText2 :: a1
             -> Range a0
             -> IO ()
setWrapText2 rhs =
  propertySet "WrapText"
              [inVariant rhs]

addComment0 :: (Variant a1)
            => a1
            -> Range a0
            -> IO (Comment ())
addComment0 text2 =
  function1 "AddComment"
            [inVariant text2]
            outIUnknown

getComment3 :: Range a0
            -> IO (Comment ())
getComment3 =
  propertyGet "Comment"
              []
              outIUnknown

clearComments0 :: Range a0
               -> IO ()
clearComments0 =
  method0 "ClearComments"
          []

getPhonetic1 :: Range a0
             -> IO (Phonetic ())
getPhonetic1 =
  propertyGet "Phonetic"
              []
              outIUnknown

getFormatConditions0 :: Range a0
                     -> IO (FormatConditions ())
getFormatConditions0 =
  propertyGet "FormatConditions"
              []
              outIUnknown

getReadingOrder23 :: Range a0
                  -> IO Int32
getReadingOrder23 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder23 :: Int32
                  -> Range a0
                  -> IO ()
setReadingOrder23 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getHyperlinks3 :: Range a0
               -> IO (Hyperlinks ())
getHyperlinks3 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

getPhonetics0 :: Range a0
              -> IO (Phonetics ())
getPhonetics0 =
  propertyGet "Phonetics"
              []
              outIUnknown

setPhonetic0 :: Range a0
             -> IO ()
setPhonetic0 =
  method0 "SetPhonetic"
          []

getID4 :: Range a0
       -> IO String
getID4 =
  propertyGet "ID"
              []
              outString

setID0 :: String
       -> Range a0
       -> IO ()
setID0 rhs =
  propertySet "ID"
              [inString rhs]

printOut37 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Range a0
           -> IO a1
printOut37 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "_PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

getPivotCell0 :: Range a0
              -> IO (PivotCell ())
getPivotCell0 =
  propertyGet "PivotCell"
              []
              outIUnknown

dirty0 :: Range a0
       -> IO ()
dirty0 =
  method0 "Dirty"
          []

getErrors0 :: Range a0
           -> IO (Errors ())
getErrors0 =
  propertyGet "Errors"
              []
              outIUnknown

getSmartTags2 :: Range a0
              -> IO (SmartTags ())
getSmartTags2 =
  propertyGet "SmartTags"
              []
              outIUnknown

speak1 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Range a0
       -> IO ()
speak1 speakDirection speakFormulas =
  method0 "Speak"
          [ inVariant speakDirection
          , inVariant speakFormulas
          ]

pasteSpecial6 :: (Variant a2, Variant a3, Variant a4, Variant a5)
              => a2
              -> a3
              -> a4
              -> a5
              -> Range a0
              -> IO a1
pasteSpecial6 paste8 operation skipBlanks transpose1 =
  function1 "PasteSpecial"
            [ inDefaultValue (inInt32 (-4104)) inVariant paste8
            , inDefaultValue (inInt32 (-4142)) inVariant operation
            , inVariant skipBlanks
            , inVariant transpose1
            ]
            outVariant

getAllowEdit1 :: Range a0
              -> IO Bool
getAllowEdit1 =
  propertyGet "AllowEdit"
              []
              outBool

getListObject1 :: Range a0
               -> IO (ListObject ())
getListObject1 =
  propertyGet "ListObject"
              []
              outIUnknown

getXPath1 :: Range a0
          -> IO (XPath ())
getXPath1 =
  propertyGet "XPath"
              []
              outIUnknown

getServerActions0 :: Range a0
                  -> IO (Actions ())
getServerActions0 =
  propertyGet "ServerActions"
              []
              outIUnknown

removeDuplicates0 :: (Variant a1, Variant a2)
                  => a1
                  -> a2
                  -> Range a0
                  -> IO ()
removeDuplicates0 columns header =
  method0 "RemoveDuplicates"
          [ inVariant columns
          , inDefaultValue (inInt32 2) inVariant header
          ]

printOut38 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Range a0
           -> IO a1
printOut38 from to copies preview activePrinter printToFile collate prToFileName =
  function1 "PrintOut"
            [ inVariant from
            , inVariant to
            , inVariant copies
            , inVariant preview
            , inVariant activePrinter
            , inVariant printToFile
            , inVariant collate
            , inVariant prToFileName
            ]
            outVariant

getMDX1 :: Range a0
        -> IO String
getMDX1 =
  propertyGet "MDX"
              []
              outString

exportAsFixedFormat4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                     => XlFixedFormatType
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> Range a0
                     -> IO ()
exportAsFixedFormat4 type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

getCountLarge0 :: Range a0
               -> IO a1
getCountLarge0 =
  propertyGet "CountLarge"
              []
              outVariant

calculateRowMajorOrder0 :: Range a0
                        -> IO a1
calculateRowMajorOrder0 =
  function1 "CalculateRowMajorOrder"
            []
            outVariant

-- --------------------------------------------------
-- 
-- dispinterface ChartEvents
-- 
-- --------------------------------------------------
data ChartEvents_ a = ChartEvents__ 
type ChartEvents a = IDispatch (ChartEvents_ a)
iidChartEvents :: IID (ChartEvents ())
iidChartEvents = mkIID "{0002440F-0000-0000-C000-000000000046}"

mkChartEvents_vtbl :: (GUID -> objState -> IO (Ptr ()))
                   -> (objState -> IO Word32)
                   -> (objState -> IO Word32)
                   -> (objState -> IO Word32)
                   -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                   -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                   -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                   -> (objState -> IO ())
                   -> (objState -> IO ())
                   -> (objState -> IO ())
                   -> (Int32 -> Int32 -> Int32 -> Int32 -> objState -> IO ())
                   -> (Int32 -> Int32 -> Int32 -> Int32 -> objState -> IO ())
                   -> (Int32 -> Int32 -> Int32 -> Int32 -> objState -> IO ())
                   -> (Bool -> objState -> IO Bool)
                   -> (objState -> IO ())
                   -> (objState -> IO ())
                   -> (Int32 -> Int32 -> Int32 -> Bool -> objState -> IO Bool)
                   -> (Int32 -> Int32 -> Int32 -> objState -> IO ())
                   -> (Int32 -> Int32 -> objState -> IO ())
                   -> (objState -> IO ())
                   -> IO (ComVTable (ChartEvents ()) objState)
mkChartEvents_vtbl queryInterface5 addRef5 release5 getTypeInfoCount5 getTypeInfo5 getIDsOfNames5 invoke5 activate16 deactivate2 resize1 mouseDown0 mouseUp0 mouseMove0 beforeRightClick1 dragPlot0 dragOver0 beforeDoubleClick1 select82 seriesChange0 calculate6 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface5 queryInterface5)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef5 addRef5)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release5 release5)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount5 getTypeInfoCount5)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo5 getTypeInfo5)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames5 getIDsOfNames5)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke5 invoke5)
   meth_arg7 = mkDispMethod "Activate" 0x130 (prim_activate16 activate16)
   meth_arg8 = mkDispMethod "Deactivate" 0x5fa (prim_deactivate2 deactivate2)
   meth_arg9 = mkDispMethod "Resize" 0x100 (prim_resize1 resize1)
   meth_arg10 = mkDispMethod "MouseDown" 0x5fb (prim_mouseDown0 mouseDown0)
   meth_arg11 = mkDispMethod "MouseUp" 0x5fc (prim_mouseUp0 mouseUp0)
   meth_arg12 = mkDispMethod "MouseMove" 0x5fd (prim_mouseMove0 mouseMove0)
   meth_arg13 = mkDispMethod "BeforeRightClick" 0x5fe (prim_beforeRightClick1 beforeRightClick1)
   meth_arg14 = mkDispMethod "DragPlot" 0x5ff (prim_dragPlot0 dragPlot0)
   meth_arg15 = mkDispMethod "DragOver" 0x600 (prim_dragOver0 dragOver0)
   meth_arg16 = mkDispMethod "BeforeDoubleClick" 0x601 (prim_beforeDoubleClick1 beforeDoubleClick1)
   meth_arg17 = mkDispMethod "Select" 0xeb (prim_select82 select82)
   meth_arg18 = mkDispMethod "SeriesChange" 0x602 (prim_seriesChange0 seriesChange0)
   meth_arg19 = mkDispMethod "Calculate" 0x117 (prim_calculate6 calculate6)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         ]

prim_queryInterface5 :: (GUID -> objState -> IO (Ptr ()))
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_queryInterface5 queryInterface5_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface5_meth riid)
          ppvObj

prim_addRef5 :: (objState -> IO Word32)
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_addRef5 addRef5_meth =
  retVal $ \ the_res ->
  apply_1 (addRef5_meth)
          the_res

prim_release5 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_release5 release5_meth =
  retVal $ \ the_res ->
  apply_1 (release5_meth)
          the_res

prim_getTypeInfoCount5 :: (objState -> IO Word32)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_getTypeInfoCount5 getTypeInfoCount5_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount5_meth)
          pctinfo

prim_getTypeInfo5 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_getTypeInfo5 getTypeInfo5_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo5_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames5 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_getIDsOfNames5 getIDsOfNames5_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames5_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke5 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_invoke5 invoke5_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke5_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_activate16 :: (objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_activate16 activate16_meth = apply_0 (activate16_meth)

prim_deactivate2 :: (objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_deactivate2 deactivate2_meth = apply_0 (deactivate2_meth)

prim_resize1 :: (objState -> IO ())
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_resize1 resize1_meth = apply_0 (resize1_meth)

prim_mouseDown0 :: (Int32 -> Int32 -> Int32 -> Int32 -> objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_mouseDown0 mouseDown0_meth =
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (mouseDown0_meth button shift x y)

prim_mouseUp0 :: (Int32 -> Int32 -> Int32 -> Int32 -> objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_mouseUp0 mouseUp0_meth =
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (mouseUp0_meth button shift x y)

prim_mouseMove0 :: (Int32 -> Int32 -> Int32 -> Int32 -> objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_mouseMove0 mouseMove0_meth =
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (mouseMove0_meth button shift x y)

prim_beforeRightClick1 :: (Bool -> objState -> IO Bool)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_beforeRightClick1 beforeRightClick1_meth =
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeRightClick1_meth cancel)
          out_cancel

prim_dragPlot0 :: (objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_dragPlot0 dragPlot0_meth = apply_0 (dragPlot0_meth)

prim_dragOver0 :: (objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_dragOver0 dragOver0_meth = apply_0 (dragOver0_meth)

prim_beforeDoubleClick1 :: (Int32 -> Int32 -> Int32 -> Bool -> objState -> IO Bool)
                        -> [VARIANT]
                        -> objState
                        -> IO (Maybe VARIANT)
prim_beforeDoubleClick1 beforeDoubleClick1_meth =
  inArg $ \ elementID ->
  inArg $ \ arg1 ->
  inArg $ \ arg2 ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeDoubleClick1_meth elementID arg1 arg2 cancel)
          out_cancel

prim_select82 :: (Int32 -> Int32 -> Int32 -> objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_select82 select82_meth =
  inArg $ \ elementID ->
  inArg $ \ arg1 ->
  inArg $ \ arg2 ->
  apply_0 (select82_meth elementID arg1 arg2)

prim_seriesChange0 :: (Int32 -> Int32 -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_seriesChange0 seriesChange0_meth =
  inArg $ \ seriesIndex ->
  inArg $ \ pointIndex ->
  apply_0 (seriesChange0_meth seriesIndex pointIndex)

prim_calculate6 :: (objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_calculate6 calculate6_meth = apply_0 (calculate6_meth)

-- --------------------------------------------------
-- 
-- dispinterface VPageBreak
-- 
-- --------------------------------------------------
data VPageBreak_ a = VPageBreak__ 
type VPageBreak a = IDispatch (VPageBreak_ a)
iidVPageBreak :: IID (VPageBreak ())
iidVPageBreak = mkIID "{00024402-0000-0000-C000-000000000046}"

queryInterface6 :: (Variant a1)
                => GUID
                -> VPageBreak a0
                -> IO a1
queryInterface6 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef6 :: VPageBreak a0
        -> IO Word32
addRef6 =
  function1 "AddRef"
            []
            outWord32

release6 :: VPageBreak a0
         -> IO Word32
release6 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount6 :: VPageBreak a0
                  -> IO Word32
getTypeInfoCount6 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo6 :: (Variant a1)
             => Word32
             -> Word32
             -> VPageBreak a0
             -> IO a1
getTypeInfo6 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames6 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> VPageBreak a0
               -> IO Int32
getIDsOfNames6 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke6 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> VPageBreak a0
        -> IO (a1, a2, Word32)
invoke6 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication276 :: (Variant a1)
                  => VPageBreak a0
                  -> IO a1
getApplication276 =
  propertyGet "Application"
              []
              outVariant

getCreator276 :: VPageBreak a0
              -> IO XlCreator
getCreator276 =
  propertyGet "Creator"
              []
              outEnum

getParent291 :: (Variant a1)
             => VPageBreak a0
             -> IO a1
getParent291 =
  propertyGet "Parent"
              []
              outVariant

delete129 :: VPageBreak a0
          -> IO ()
delete129 =
  method0 "Delete"
          []

dragOff1 :: XlDirection
         -> Int32
         -> VPageBreak a0
         -> IO ()
dragOff1 direction regionIndex =
  method0 "DragOff"
          [ inEnum direction
          , inInt32 regionIndex
          ]

getType39 :: VPageBreak a0
          -> IO XlPageBreak
getType39 =
  propertyGet "Type"
              []
              outEnum

setType13 :: XlPageBreak
          -> VPageBreak a0
          -> IO ()
setType13 rhs =
  propertySet "Type"
              [inEnum rhs]

getExtent1 :: VPageBreak a0
           -> IO XlPageBreakExtent
getExtent1 =
  propertyGet "Extent"
              []
              outEnum

getLocation2 :: VPageBreak a0
             -> IO (Range ())
getLocation2 =
  propertyGet "Location"
              []
              outIDispatch

setLocation2 :: Range a1
             -> VPageBreak a0
             -> IO ()
setLocation2 rhs =
  propertySet "Location"
              [inIDispatch rhs]

-- --------------------------------------------------
-- 
-- dispinterface HPageBreak
-- 
-- --------------------------------------------------
data HPageBreak_ a = HPageBreak__ 
type HPageBreak a = IDispatch (HPageBreak_ a)
iidHPageBreak :: IID (HPageBreak ())
iidHPageBreak = mkIID "{00024401-0000-0000-C000-000000000046}"

queryInterface7 :: (Variant a1)
                => GUID
                -> HPageBreak a0
                -> IO a1
queryInterface7 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef7 :: HPageBreak a0
        -> IO Word32
addRef7 =
  function1 "AddRef"
            []
            outWord32

release7 :: HPageBreak a0
         -> IO Word32
release7 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount7 :: HPageBreak a0
                  -> IO Word32
getTypeInfoCount7 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo7 :: (Variant a1)
             => Word32
             -> Word32
             -> HPageBreak a0
             -> IO a1
getTypeInfo7 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames7 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> HPageBreak a0
               -> IO Int32
getIDsOfNames7 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke7 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> HPageBreak a0
        -> IO (a1, a2, Word32)
invoke7 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication277 :: (Variant a1)
                  => HPageBreak a0
                  -> IO a1
getApplication277 =
  propertyGet "Application"
              []
              outVariant

getCreator277 :: HPageBreak a0
              -> IO XlCreator
getCreator277 =
  propertyGet "Creator"
              []
              outEnum

getParent292 :: (Variant a1)
             => HPageBreak a0
             -> IO a1
getParent292 =
  propertyGet "Parent"
              []
              outVariant

delete130 :: HPageBreak a0
          -> IO ()
delete130 =
  method0 "Delete"
          []

dragOff2 :: XlDirection
         -> Int32
         -> HPageBreak a0
         -> IO ()
dragOff2 direction regionIndex =
  method0 "DragOff"
          [ inEnum direction
          , inInt32 regionIndex
          ]

getType40 :: HPageBreak a0
          -> IO XlPageBreak
getType40 =
  propertyGet "Type"
              []
              outEnum

setType14 :: XlPageBreak
          -> HPageBreak a0
          -> IO ()
setType14 rhs =
  propertySet "Type"
              [inEnum rhs]

getExtent2 :: HPageBreak a0
           -> IO XlPageBreakExtent
getExtent2 =
  propertyGet "Extent"
              []
              outEnum

getLocation3 :: HPageBreak a0
             -> IO (Range ())
getLocation3 =
  propertyGet "Location"
              []
              outIDispatch

setLocation3 :: Range a1
             -> HPageBreak a0
             -> IO ()
setLocation3 rhs =
  propertySet "Location"
              [inIDispatch rhs]

-- --------------------------------------------------
-- 
-- dispinterface HPageBreaks
-- 
-- --------------------------------------------------
data HPageBreaks_ a = HPageBreaks__ 
type HPageBreaks a = IDispatch (HPageBreaks_ a)
iidHPageBreaks :: IID (HPageBreaks ())
iidHPageBreaks = mkIID "{00024404-0000-0000-C000-000000000046}"

queryInterface8 :: (Variant a1)
                => GUID
                -> HPageBreaks a0
                -> IO a1
queryInterface8 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef8 :: HPageBreaks a0
        -> IO Word32
addRef8 =
  function1 "AddRef"
            []
            outWord32

release8 :: HPageBreaks a0
         -> IO Word32
release8 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount8 :: HPageBreaks a0
                  -> IO Word32
getTypeInfoCount8 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo8 :: (Variant a1)
             => Word32
             -> Word32
             -> HPageBreaks a0
             -> IO a1
getTypeInfo8 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames8 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> HPageBreaks a0
               -> IO Int32
getIDsOfNames8 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke8 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> HPageBreaks a0
        -> IO (a1, a2, Word32)
invoke8 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication278 :: (Variant a1)
                  => HPageBreaks a0
                  -> IO a1
getApplication278 =
  propertyGet "Application"
              []
              outVariant

getCreator278 :: HPageBreaks a0
              -> IO XlCreator
getCreator278 =
  propertyGet "Creator"
              []
              outEnum

getParent293 :: HPageBreaks a0
             -> IO (IDispatch ())
getParent293 =
  propertyGet "Parent"
              []
              outIDispatch

getCount115 :: HPageBreaks a0
            -> IO Int32
getCount115 =
  propertyGet "Count"
              []
              outInt32

getItem57 :: Int32
          -> HPageBreaks a0
          -> IO (HPageBreak ())
getItem57 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIDispatch

getDefault112 :: Int32
              -> HPageBreaks a0
              -> IO (HPageBreak ())
getDefault112 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

getNewEnum69 :: HPageBreaks a0
             -> IO (IUnknown ())
getNewEnum69 =
  propertyGet "_NewEnum"
              []
              outIUnknown

add73 :: IDispatch a1
      -> HPageBreaks a0
      -> IO (HPageBreak ())
add73 before =
  function1 "Add"
            [inIDispatch before]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface VPageBreaks
-- 
-- --------------------------------------------------
data VPageBreaks_ a = VPageBreaks__ 
type VPageBreaks a = IDispatch (VPageBreaks_ a)
iidVPageBreaks :: IID (VPageBreaks ())
iidVPageBreaks = mkIID "{00024405-0000-0000-C000-000000000046}"

queryInterface9 :: (Variant a1)
                => GUID
                -> VPageBreaks a0
                -> IO a1
queryInterface9 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef9 :: VPageBreaks a0
        -> IO Word32
addRef9 =
  function1 "AddRef"
            []
            outWord32

release9 :: VPageBreaks a0
         -> IO Word32
release9 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount9 :: VPageBreaks a0
                  -> IO Word32
getTypeInfoCount9 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo9 :: (Variant a1)
             => Word32
             -> Word32
             -> VPageBreaks a0
             -> IO a1
getTypeInfo9 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames9 :: GUID
               -> Char
               -> Word32
               -> Word32
               -> VPageBreaks a0
               -> IO Int32
getIDsOfNames9 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke9 :: (Variant a1, Variant a2, Variant a3)
        => Int32
        -> GUID
        -> Word32
        -> Word16
        -> a3
        -> VPageBreaks a0
        -> IO (a1, a2, Word32)
invoke9 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication279 :: (Variant a1)
                  => VPageBreaks a0
                  -> IO a1
getApplication279 =
  propertyGet "Application"
              []
              outVariant

getCreator279 :: VPageBreaks a0
              -> IO XlCreator
getCreator279 =
  propertyGet "Creator"
              []
              outEnum

getParent294 :: VPageBreaks a0
             -> IO (IDispatch ())
getParent294 =
  propertyGet "Parent"
              []
              outIDispatch

getCount116 :: VPageBreaks a0
            -> IO Int32
getCount116 =
  propertyGet "Count"
              []
              outInt32

getItem58 :: Int32
          -> VPageBreaks a0
          -> IO (VPageBreak ())
getItem58 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIDispatch

getDefault113 :: Int32
              -> VPageBreaks a0
              -> IO (VPageBreak ())
getDefault113 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

getNewEnum70 :: VPageBreaks a0
             -> IO (IUnknown ())
getNewEnum70 =
  propertyGet "_NewEnum"
              []
              outIUnknown

add74 :: IDispatch a1
      -> VPageBreaks a0
      -> IO (VPageBreak ())
add74 before =
  function1 "Add"
            [inIDispatch before]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface RecentFile
-- 
-- --------------------------------------------------
data RecentFile_ a = RecentFile__ 
type RecentFile a = IDispatch (RecentFile_ a)
iidRecentFile :: IID (RecentFile ())
iidRecentFile = mkIID "{00024407-0000-0000-C000-000000000046}"

queryInterface10 :: (Variant a1)
                 => GUID
                 -> RecentFile a0
                 -> IO a1
queryInterface10 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef10 :: RecentFile a0
         -> IO Word32
addRef10 =
  function1 "AddRef"
            []
            outWord32

release10 :: RecentFile a0
          -> IO Word32
release10 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount10 :: RecentFile a0
                   -> IO Word32
getTypeInfoCount10 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo10 :: (Variant a1)
              => Word32
              -> Word32
              -> RecentFile a0
              -> IO a1
getTypeInfo10 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames10 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> RecentFile a0
                -> IO Int32
getIDsOfNames10 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke10 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> RecentFile a0
         -> IO (a1, a2, Word32)
invoke10 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication280 :: (Variant a1)
                  => RecentFile a0
                  -> IO a1
getApplication280 =
  propertyGet "Application"
              []
              outVariant

getCreator280 :: RecentFile a0
              -> IO XlCreator
getCreator280 =
  propertyGet "Creator"
              []
              outEnum

getParent295 :: RecentFile a0
             -> IO (IDispatch ())
getParent295 =
  propertyGet "Parent"
              []
              outIDispatch

getName81 :: RecentFile a0
          -> IO String
getName81 =
  propertyGet "Name"
              []
              outString

getPath4 :: RecentFile a0
         -> IO String
getPath4 =
  propertyGet "Path"
              []
              outString

getIndex42 :: RecentFile a0
           -> IO Int32
getIndex42 =
  propertyGet "Index"
              []
              outInt32

open3 :: (Variant a1)
      => RecentFile a0
      -> IO a1
open3 =
  function1 "Open"
            []
            outVariant

delete131 :: RecentFile a0
          -> IO ()
delete131 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- dispinterface RecentFiles
-- 
-- --------------------------------------------------
data RecentFiles_ a = RecentFiles__ 
type RecentFiles a = IDispatch (RecentFiles_ a)
iidRecentFiles :: IID (RecentFiles ())
iidRecentFiles = mkIID "{00024406-0000-0000-C000-000000000046}"

queryInterface11 :: (Variant a1)
                 => GUID
                 -> RecentFiles a0
                 -> IO a1
queryInterface11 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef11 :: RecentFiles a0
         -> IO Word32
addRef11 =
  function1 "AddRef"
            []
            outWord32

release11 :: RecentFiles a0
          -> IO Word32
release11 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount11 :: RecentFiles a0
                   -> IO Word32
getTypeInfoCount11 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo11 :: (Variant a1)
              => Word32
              -> Word32
              -> RecentFiles a0
              -> IO a1
getTypeInfo11 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames11 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> RecentFiles a0
                -> IO Int32
getIDsOfNames11 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke11 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> RecentFiles a0
         -> IO (a1, a2, Word32)
invoke11 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication281 :: (Variant a1)
                  => RecentFiles a0
                  -> IO a1
getApplication281 =
  propertyGet "Application"
              []
              outVariant

getCreator281 :: RecentFiles a0
              -> IO XlCreator
getCreator281 =
  propertyGet "Creator"
              []
              outEnum

getParent296 :: RecentFiles a0
             -> IO (IDispatch ())
getParent296 =
  propertyGet "Parent"
              []
              outIDispatch

getMaximum0 :: RecentFiles a0
            -> IO Int32
getMaximum0 =
  propertyGet "Maximum"
              []
              outInt32

setMaximum0 :: Int32
            -> RecentFiles a0
            -> IO ()
setMaximum0 rhs =
  propertySet "Maximum"
              [inInt32 rhs]

getCount117 :: RecentFiles a0
            -> IO Int32
getCount117 =
  propertyGet "Count"
              []
              outInt32

getItem59 :: Int32
          -> RecentFiles a0
          -> IO (RecentFile ())
getItem59 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIDispatch

getDefault114 :: Int32
              -> RecentFiles a0
              -> IO (RecentFile ())
getDefault114 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

add75 :: String
      -> RecentFiles a0
      -> IO (RecentFile ())
add75 name =
  function1 "Add"
            [inString name]
            outIDispatch

getNewEnum71 :: RecentFiles a0
             -> IO (IUnknown ())
getNewEnum71 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DocEvents
-- 
-- --------------------------------------------------
data DocEvents_ a = DocEvents__ 
type DocEvents a = IDispatch (DocEvents_ a)
iidDocEvents :: IID (DocEvents ())
iidDocEvents = mkIID "{00024411-0000-0000-C000-000000000046}"

mkDocEvents_vtbl :: (GUID -> objState -> IO (Ptr ()))
                 -> (objState -> IO Word32)
                 -> (objState -> IO Word32)
                 -> (objState -> IO Word32)
                 -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                 -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                 -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                 -> (Range a0 -> objState -> IO ())
                 -> (Range a0 -> Bool -> objState -> IO Bool)
                 -> (Range a0 -> Bool -> objState -> IO Bool)
                 -> (objState -> IO ())
                 -> (objState -> IO ())
                 -> (objState -> IO ())
                 -> (Range a0 -> objState -> IO ())
                 -> (Hyperlink a0 -> objState -> IO ())
                 -> (PivotTable a0 -> objState -> IO ())
                 -> IO (ComVTable (DocEvents ()) objState)
mkDocEvents_vtbl queryInterface12 addRef12 release12 getTypeInfoCount12 getTypeInfo12 getIDsOfNames12 invoke12 selectionChange0 beforeDoubleClick2 beforeRightClick2 activate17 deactivate3 calculate7 change0 followHyperlink1 pivotTableUpdate0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface12 queryInterface12)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef12 addRef12)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release12 release12)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount12 getTypeInfoCount12)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo12 getTypeInfo12)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames12 getIDsOfNames12)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke12 invoke12)
   meth_arg7 = mkDispMethod "SelectionChange" 0x607 (prim_selectionChange0 selectionChange0)
   meth_arg8 = mkDispMethod "BeforeDoubleClick" 0x601 (prim_beforeDoubleClick2 beforeDoubleClick2)
   meth_arg9 = mkDispMethod "BeforeRightClick" 0x5fe (prim_beforeRightClick2 beforeRightClick2)
   meth_arg10 = mkDispMethod "Activate" 0x130 (prim_activate17 activate17)
   meth_arg11 = mkDispMethod "Deactivate" 0x5fa (prim_deactivate3 deactivate3)
   meth_arg12 = mkDispMethod "Calculate" 0x117 (prim_calculate7 calculate7)
   meth_arg13 = mkDispMethod "Change" 0x609 (prim_change0 change0)
   meth_arg14 = mkDispMethod "FollowHyperlink" 0x5be (prim_followHyperlink1 followHyperlink1)
   meth_arg15 = mkDispMethod "PivotTableUpdate" 0x86c (prim_pivotTableUpdate0 pivotTableUpdate0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         ]

prim_queryInterface12 :: (GUID -> objState -> IO (Ptr ()))
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_queryInterface12 queryInterface12_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface12_meth riid)
          ppvObj

prim_addRef12 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_addRef12 addRef12_meth =
  retVal $ \ the_res ->
  apply_1 (addRef12_meth)
          the_res

prim_release12 :: (objState -> IO Word32)
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_release12 release12_meth =
  retVal $ \ the_res ->
  apply_1 (release12_meth)
          the_res

prim_getTypeInfoCount12 :: (objState -> IO Word32)
                        -> [VARIANT]
                        -> objState
                        -> IO (Maybe VARIANT)
prim_getTypeInfoCount12 getTypeInfoCount12_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount12_meth)
          pctinfo

prim_getTypeInfo12 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_getTypeInfo12 getTypeInfo12_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo12_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames12 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_getIDsOfNames12 getIDsOfNames12_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames12_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke12 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_invoke12 invoke12_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke12_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_selectionChange0 :: (Range a0 -> objState -> IO ())
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_selectionChange0 selectionChange0_meth =
  inArg $ \ target ->
  apply_0 (selectionChange0_meth target)

prim_beforeDoubleClick2 :: (Range a0 -> Bool -> objState -> IO Bool)
                        -> [VARIANT]
                        -> objState
                        -> IO (Maybe VARIANT)
prim_beforeDoubleClick2 beforeDoubleClick2_meth =
  inArg $ \ target ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeDoubleClick2_meth target cancel)
          out_cancel

prim_beforeRightClick2 :: (Range a0 -> Bool -> objState -> IO Bool)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_beforeRightClick2 beforeRightClick2_meth =
  inArg $ \ target ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeRightClick2_meth target cancel)
          out_cancel

prim_activate17 :: (objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_activate17 activate17_meth = apply_0 (activate17_meth)

prim_deactivate3 :: (objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_deactivate3 deactivate3_meth = apply_0 (deactivate3_meth)

prim_calculate7 :: (objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_calculate7 calculate7_meth = apply_0 (calculate7_meth)

prim_change0 :: (Range a0 -> objState -> IO ())
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_change0 change0_meth =
  inArg $ \ target ->
  apply_0 (change0_meth target)

prim_followHyperlink1 :: (Hyperlink a0 -> objState -> IO ())
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_followHyperlink1 followHyperlink1_meth =
  inIUnknownArg $ \ target ->
  apply_0 (followHyperlink1_meth target)

prim_pivotTableUpdate0 :: (PivotTable a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_pivotTableUpdate0 pivotTableUpdate0_meth =
  inIUnknownArg $ \ target ->
  apply_0 (pivotTableUpdate0_meth target)

-- --------------------------------------------------
-- 
-- dispinterface Style
-- 
-- --------------------------------------------------
data Style_ a = Style__ 
type Style a = IDispatch (Style_ a)
iidStyle :: IID (Style ())
iidStyle = mkIID "{00020852-0000-0000-C000-000000000046}"

queryInterface13 :: (Variant a1)
                 => GUID
                 -> Style a0
                 -> IO a1
queryInterface13 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef13 :: Style a0
         -> IO Word32
addRef13 =
  function1 "AddRef"
            []
            outWord32

release13 :: Style a0
          -> IO Word32
release13 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount13 :: Style a0
                   -> IO Word32
getTypeInfoCount13 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo13 :: (Variant a1)
              => Word32
              -> Word32
              -> Style a0
              -> IO a1
getTypeInfo13 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames13 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Style a0
                -> IO Int32
getIDsOfNames13 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke13 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Style a0
         -> IO (a1, a2, Word32)
invoke13 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication282 :: (Variant a1)
                  => Style a0
                  -> IO a1
getApplication282 =
  propertyGet "Application"
              []
              outVariant

getCreator282 :: Style a0
              -> IO XlCreator
getCreator282 =
  propertyGet "Creator"
              []
              outEnum

getParent297 :: Style a0
             -> IO (IDispatch ())
getParent297 =
  propertyGet "Parent"
              []
              outIDispatch

getAddIndent18 :: Style a0
               -> IO Bool
getAddIndent18 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent18 :: Bool
               -> Style a0
               -> IO ()
setAddIndent18 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getBuiltIn4 :: Style a0
            -> IO Bool
getBuiltIn4 =
  propertyGet "BuiltIn"
              []
              outBool

getBorders8 :: Style a0
            -> IO (Borders ())
getBorders8 =
  propertyGet "Borders"
              []
              outIUnknown

delete132 :: Style a0
          -> IO a1
delete132 =
  function1 "Delete"
            []
            outVariant

getFont36 :: Style a0
          -> IO (Font ())
getFont36 =
  propertyGet "Font"
              []
              outIDispatch

getFormulaHidden3 :: Style a0
                  -> IO Bool
getFormulaHidden3 =
  propertyGet "FormulaHidden"
              []
              outBool

setFormulaHidden3 :: Bool
                  -> Style a0
                  -> IO ()
setFormulaHidden3 rhs =
  propertySet "FormulaHidden"
              [inBool rhs]

getHorizontalAlignment24 :: Style a0
                         -> IO XlHAlign
getHorizontalAlignment24 =
  propertyGet "HorizontalAlignment"
              []
              outEnum

setHorizontalAlignment24 :: XlHAlign
                         -> Style a0
                         -> IO ()
setHorizontalAlignment24 rhs =
  propertySet "HorizontalAlignment"
              [inEnum rhs]

getIncludeAlignment0 :: Style a0
                     -> IO Bool
getIncludeAlignment0 =
  propertyGet "IncludeAlignment"
              []
              outBool

setIncludeAlignment0 :: Bool
                     -> Style a0
                     -> IO ()
setIncludeAlignment0 rhs =
  propertySet "IncludeAlignment"
              [inBool rhs]

getIncludeBorder0 :: Style a0
                  -> IO Bool
getIncludeBorder0 =
  propertyGet "IncludeBorder"
              []
              outBool

setIncludeBorder0 :: Bool
                  -> Style a0
                  -> IO ()
setIncludeBorder0 rhs =
  propertySet "IncludeBorder"
              [inBool rhs]

getIncludeFont0 :: Style a0
                -> IO Bool
getIncludeFont0 =
  propertyGet "IncludeFont"
              []
              outBool

setIncludeFont0 :: Bool
                -> Style a0
                -> IO ()
setIncludeFont0 rhs =
  propertySet "IncludeFont"
              [inBool rhs]

getIncludeNumber0 :: Style a0
                  -> IO Bool
getIncludeNumber0 =
  propertyGet "IncludeNumber"
              []
              outBool

setIncludeNumber0 :: Bool
                  -> Style a0
                  -> IO ()
setIncludeNumber0 rhs =
  propertySet "IncludeNumber"
              [inBool rhs]

getIncludePatterns0 :: Style a0
                    -> IO Bool
getIncludePatterns0 =
  propertyGet "IncludePatterns"
              []
              outBool

setIncludePatterns0 :: Bool
                    -> Style a0
                    -> IO ()
setIncludePatterns0 rhs =
  propertySet "IncludePatterns"
              [inBool rhs]

getIncludeProtection0 :: Style a0
                      -> IO Bool
getIncludeProtection0 =
  propertyGet "IncludeProtection"
              []
              outBool

setIncludeProtection0 :: Bool
                      -> Style a0
                      -> IO ()
setIncludeProtection0 rhs =
  propertySet "IncludeProtection"
              [inBool rhs]

getIndentLevel3 :: Style a0
                -> IO Int32
getIndentLevel3 =
  propertyGet "IndentLevel"
              []
              outInt32

setIndentLevel3 :: Int32
                -> Style a0
                -> IO ()
setIndentLevel3 rhs =
  propertySet "IndentLevel"
              [inInt32 rhs]

getInterior46 :: Style a0
              -> IO (Interior ())
getInterior46 =
  propertyGet "Interior"
              []
              outIUnknown

getLocked48 :: Style a0
            -> IO Bool
getLocked48 =
  propertyGet "Locked"
              []
              outBool

setLocked48 :: Bool
            -> Style a0
            -> IO ()
setLocked48 rhs =
  propertySet "Locked"
              [inBool rhs]

getMergeCells3 :: Style a0
               -> IO a1
getMergeCells3 =
  propertyGet "MergeCells"
              []
              outVariant

setMergeCells3 :: a1
               -> Style a0
               -> IO ()
setMergeCells3 rhs =
  propertySet "MergeCells"
              [inVariant rhs]

getName82 :: Style a0
          -> IO String
getName82 =
  propertyGet "Name"
              []
              outString

getNameLocal2 :: Style a0
              -> IO String
getNameLocal2 =
  propertyGet "NameLocal"
              []
              outString

getNumberFormat11 :: Style a0
                  -> IO String
getNumberFormat11 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat11 :: String
                  -> Style a0
                  -> IO ()
setNumberFormat11 rhs =
  propertySet "NumberFormat"
              [inString rhs]

getNumberFormatLocal6 :: Style a0
                      -> IO String
getNumberFormatLocal6 =
  propertyGet "NumberFormatLocal"
              []
              outString

setNumberFormatLocal6 :: String
                      -> Style a0
                      -> IO ()
setNumberFormatLocal6 rhs =
  propertySet "NumberFormatLocal"
              [inString rhs]

getOrientation30 :: Style a0
                 -> IO XlOrientation
getOrientation30 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation30 :: XlOrientation
                 -> Style a0
                 -> IO ()
setOrientation30 rhs =
  propertySet "Orientation"
              [inEnum rhs]

getShrinkToFit3 :: Style a0
                -> IO Bool
getShrinkToFit3 =
  propertyGet "ShrinkToFit"
              []
              outBool

setShrinkToFit3 :: Bool
                -> Style a0
                -> IO ()
setShrinkToFit3 rhs =
  propertySet "ShrinkToFit"
              [inBool rhs]

getValue34 :: Style a0
           -> IO String
getValue34 =
  propertyGet "Value"
              []
              outString

getVerticalAlignment24 :: Style a0
                       -> IO XlVAlign
getVerticalAlignment24 =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment24 :: XlVAlign
                       -> Style a0
                       -> IO ()
setVerticalAlignment24 rhs =
  propertySet "VerticalAlignment"
              [inEnum rhs]

getWrapText3 :: Style a0
             -> IO Bool
getWrapText3 =
  propertyGet "WrapText"
              []
              outBool

setWrapText3 :: Bool
             -> Style a0
             -> IO ()
setWrapText3 rhs =
  propertySet "WrapText"
              [inBool rhs]

getDefault115 :: Style a0
              -> IO String
getDefault115 =
  propertyGet "_Default"
              []
              outString

getReadingOrder24 :: Style a0
                  -> IO Int32
getReadingOrder24 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder24 :: Int32
                  -> Style a0
                  -> IO ()
setReadingOrder24 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface Styles
-- 
-- --------------------------------------------------
data Styles_ a = Styles__ 
type Styles a = IDispatch (Styles_ a)
iidStyles :: IID (Styles ())
iidStyles = mkIID "{00020853-0000-0000-C000-000000000046}"

queryInterface14 :: (Variant a1)
                 => GUID
                 -> Styles a0
                 -> IO a1
queryInterface14 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef14 :: Styles a0
         -> IO Word32
addRef14 =
  function1 "AddRef"
            []
            outWord32

release14 :: Styles a0
          -> IO Word32
release14 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount14 :: Styles a0
                   -> IO Word32
getTypeInfoCount14 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo14 :: (Variant a1)
              => Word32
              -> Word32
              -> Styles a0
              -> IO a1
getTypeInfo14 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames14 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Styles a0
                -> IO Int32
getIDsOfNames14 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke14 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Styles a0
         -> IO (a1, a2, Word32)
invoke14 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication283 :: (Variant a1)
                  => Styles a0
                  -> IO a1
getApplication283 =
  propertyGet "Application"
              []
              outVariant

getCreator283 :: Styles a0
              -> IO XlCreator
getCreator283 =
  propertyGet "Creator"
              []
              outEnum

getParent298 :: Styles a0
             -> IO (IDispatch ())
getParent298 =
  propertyGet "Parent"
              []
              outIDispatch

add76 :: (Variant a1)
      => String
      -> a1
      -> Styles a0
      -> IO (Style ())
add76 name basedOn =
  function1 "Add"
            [ inString name
            , inVariant basedOn
            ]
            outIDispatch

getCount118 :: Styles a0
            -> IO Int32
getCount118 =
  propertyGet "Count"
              []
              outInt32

getItem60 :: a1
          -> Styles a0
          -> IO (Style ())
getItem60 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

merge3 :: a2
       -> Styles a0
       -> IO a1
merge3 workbook =
  function1 "Merge"
            [inVariant workbook]
            outVariant

getNewEnum72 :: Styles a0
             -> IO (IUnknown ())
getNewEnum72 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault116 :: a1
              -> Styles a0
              -> IO (Style ())
getDefault116 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Borders
-- 
-- --------------------------------------------------
data Borders_ a = Borders__ 
type Borders a = IDispatch (Borders_ a)
iidBorders :: IID (Borders ())
iidBorders = mkIID "{00020855-0000-0000-C000-000000000046}"

queryInterface15 :: (Variant a1)
                 => GUID
                 -> Borders a0
                 -> IO a1
queryInterface15 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef15 :: Borders a0
         -> IO Word32
addRef15 =
  function1 "AddRef"
            []
            outWord32

release15 :: Borders a0
          -> IO Word32
release15 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount15 :: Borders a0
                   -> IO Word32
getTypeInfoCount15 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo15 :: (Variant a1)
              => Word32
              -> Word32
              -> Borders a0
              -> IO a1
getTypeInfo15 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames15 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Borders a0
                -> IO Int32
getIDsOfNames15 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke15 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Borders a0
         -> IO (a1, a2, Word32)
invoke15 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication284 :: (Variant a1)
                  => Borders a0
                  -> IO a1
getApplication284 =
  propertyGet "Application"
              []
              outVariant

getCreator284 :: Borders a0
              -> IO XlCreator
getCreator284 =
  propertyGet "Creator"
              []
              outEnum

getParent299 :: Borders a0
             -> IO (IDispatch ())
getParent299 =
  propertyGet "Parent"
              []
              outIDispatch

getColor7 :: Borders a0
          -> IO a1
getColor7 =
  propertyGet "Color"
              []
              outVariant

setColor7 :: a1
          -> Borders a0
          -> IO ()
setColor7 rhs =
  propertySet "Color"
              [inVariant rhs]

getColorIndex6 :: Borders a0
               -> IO a1
getColorIndex6 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex6 :: a1
               -> Borders a0
               -> IO ()
setColorIndex6 rhs =
  propertySet "ColorIndex"
              [inVariant rhs]

getCount119 :: Borders a0
            -> IO Int32
getCount119 =
  propertyGet "Count"
              []
              outInt32

getItem61 :: XlBordersIndex
          -> Borders a0
          -> IO (Border ())
getItem61 index1 =
  propertyGet "Item"
              [inEnum index1]
              outIUnknown

getLineStyle1 :: Borders a0
              -> IO a1
getLineStyle1 =
  propertyGet "LineStyle"
              []
              outVariant

setLineStyle1 :: a1
              -> Borders a0
              -> IO ()
setLineStyle1 rhs =
  propertySet "LineStyle"
              [inVariant rhs]

getNewEnum73 :: Borders a0
             -> IO (IUnknown ())
getNewEnum73 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getValue35 :: Borders a0
           -> IO a1
getValue35 =
  propertyGet "Value"
              []
              outVariant

setValue27 :: a1
           -> Borders a0
           -> IO ()
setValue27 rhs =
  propertySet "Value"
              [inVariant rhs]

getWeight2 :: Borders a0
           -> IO a1
getWeight2 =
  propertyGet "Weight"
              []
              outVariant

setWeight2 :: a1
           -> Borders a0
           -> IO ()
setWeight2 rhs =
  propertySet "Weight"
              [inVariant rhs]

getDefault117 :: XlBordersIndex
              -> Borders a0
              -> IO (Border ())
getDefault117 index1 =
  propertyGet "_Default"
              [inEnum index1]
              outIUnknown

getThemeColor7 :: Borders a0
               -> IO a1
getThemeColor7 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor7 :: a1
               -> Borders a0
               -> IO ()
setThemeColor7 rhs =
  propertySet "ThemeColor"
              [inVariant rhs]

getTintAndShade8 :: Borders a0
                 -> IO a1
getTintAndShade8 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade8 :: a1
                 -> Borders a0
                 -> IO ()
setTintAndShade8 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface AddIn
-- 
-- --------------------------------------------------
data AddIn_ a = AddIn__ 
type AddIn a = IDispatch (AddIn_ a)
iidAddIn :: IID (AddIn ())
iidAddIn = mkIID "{00020857-0000-0000-C000-000000000046}"

queryInterface16 :: (Variant a1)
                 => GUID
                 -> AddIn a0
                 -> IO a1
queryInterface16 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef16 :: AddIn a0
         -> IO Word32
addRef16 =
  function1 "AddRef"
            []
            outWord32

release16 :: AddIn a0
          -> IO Word32
release16 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount16 :: AddIn a0
                   -> IO Word32
getTypeInfoCount16 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo16 :: (Variant a1)
              => Word32
              -> Word32
              -> AddIn a0
              -> IO a1
getTypeInfo16 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames16 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> AddIn a0
                -> IO Int32
getIDsOfNames16 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke16 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> AddIn a0
         -> IO (a1, a2, Word32)
invoke16 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication285 :: (Variant a1)
                  => AddIn a0
                  -> IO a1
getApplication285 =
  propertyGet "Application"
              []
              outVariant

getCreator285 :: AddIn a0
              -> IO XlCreator
getCreator285 =
  propertyGet "Creator"
              []
              outEnum

getParent300 :: AddIn a0
             -> IO (IDispatch ())
getParent300 =
  propertyGet "Parent"
              []
              outIDispatch

getAuthor2 :: AddIn a0
           -> IO String
getAuthor2 =
  propertyGet "Author"
              []
              outString

getComments3 :: AddIn a0
             -> IO String
getComments3 =
  propertyGet "Comments"
              []
              outString

getFullName2 :: AddIn a0
             -> IO String
getFullName2 =
  propertyGet "FullName"
              []
              outString

getInstalled0 :: AddIn a0
              -> IO Bool
getInstalled0 =
  propertyGet "Installed"
              []
              outBool

setInstalled0 :: Bool
              -> AddIn a0
              -> IO ()
setInstalled0 rhs =
  propertySet "Installed"
              [inBool rhs]

getKeywords1 :: AddIn a0
             -> IO String
getKeywords1 =
  propertyGet "Keywords"
              []
              outString

getName83 :: AddIn a0
          -> IO String
getName83 =
  propertyGet "Name"
              []
              outString

getPath5 :: AddIn a0
         -> IO String
getPath5 =
  propertyGet "Path"
              []
              outString

getSubject3 :: AddIn a0
            -> IO String
getSubject3 =
  propertyGet "Subject"
              []
              outString

getTitle3 :: AddIn a0
          -> IO String
getTitle3 =
  propertyGet "Title"
              []
              outString

getProgID3 :: AddIn a0
           -> IO String
getProgID3 =
  propertyGet "progID"
              []
              outString

getCLSID0 :: AddIn a0
          -> IO String
getCLSID0 =
  propertyGet "CLSID"
              []
              outString

-- --------------------------------------------------
-- 
-- dispinterface AddIns
-- 
-- --------------------------------------------------
data AddIns_ a = AddIns__ 
type AddIns a = IDispatch (AddIns_ a)
iidAddIns :: IID (AddIns ())
iidAddIns = mkIID "{00020858-0000-0000-C000-000000000046}"

queryInterface17 :: (Variant a1)
                 => GUID
                 -> AddIns a0
                 -> IO a1
queryInterface17 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef17 :: AddIns a0
         -> IO Word32
addRef17 =
  function1 "AddRef"
            []
            outWord32

release17 :: AddIns a0
          -> IO Word32
release17 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount17 :: AddIns a0
                   -> IO Word32
getTypeInfoCount17 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo17 :: (Variant a1)
              => Word32
              -> Word32
              -> AddIns a0
              -> IO a1
getTypeInfo17 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames17 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> AddIns a0
                -> IO Int32
getIDsOfNames17 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke17 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> AddIns a0
         -> IO (a1, a2, Word32)
invoke17 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication286 :: (Variant a1)
                  => AddIns a0
                  -> IO a1
getApplication286 =
  propertyGet "Application"
              []
              outVariant

getCreator286 :: AddIns a0
              -> IO XlCreator
getCreator286 =
  propertyGet "Creator"
              []
              outEnum

getParent301 :: AddIns a0
             -> IO (IDispatch ())
getParent301 =
  propertyGet "Parent"
              []
              outIDispatch

add77 :: (Variant a1)
      => String
      -> a1
      -> AddIns a0
      -> IO (AddIn ())
add77 filename copyFile =
  function1 "Add"
            [ inString filename
            , inVariant copyFile
            ]
            outIDispatch

getCount120 :: AddIns a0
            -> IO Int32
getCount120 =
  propertyGet "Count"
              []
              outInt32

getItem62 :: a1
          -> AddIns a0
          -> IO (AddIn ())
getItem62 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getNewEnum74 :: AddIns a0
             -> IO (IUnknown ())
getNewEnum74 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault118 :: a1
              -> AddIns a0
              -> IO (AddIn ())
getDefault118 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Toolbar
-- 
-- --------------------------------------------------
data Toolbar_ a = Toolbar__ 
type Toolbar a = IDispatch (Toolbar_ a)
iidToolbar :: IID (Toolbar ())
iidToolbar = mkIID "{0002085C-0000-0000-C000-000000000046}"

queryInterface18 :: (Variant a1)
                 => GUID
                 -> Toolbar a0
                 -> IO a1
queryInterface18 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef18 :: Toolbar a0
         -> IO Word32
addRef18 =
  function1 "AddRef"
            []
            outWord32

release18 :: Toolbar a0
          -> IO Word32
release18 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount18 :: Toolbar a0
                   -> IO Word32
getTypeInfoCount18 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo18 :: (Variant a1)
              => Word32
              -> Word32
              -> Toolbar a0
              -> IO a1
getTypeInfo18 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames18 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Toolbar a0
                -> IO Int32
getIDsOfNames18 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke18 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Toolbar a0
         -> IO (a1, a2, Word32)
invoke18 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication287 :: (Variant a1)
                  => Toolbar a0
                  -> IO a1
getApplication287 =
  propertyGet "Application"
              []
              outVariant

getCreator287 :: Toolbar a0
              -> IO XlCreator
getCreator287 =
  propertyGet "Creator"
              []
              outEnum

getParent302 :: Toolbar a0
             -> IO (IDispatch ())
getParent302 =
  propertyGet "Parent"
              []
              outIDispatch

getBuiltIn5 :: Toolbar a0
            -> IO Bool
getBuiltIn5 =
  propertyGet "BuiltIn"
              []
              outBool

delete133 :: Toolbar a0
          -> IO ()
delete133 =
  method0 "Delete"
          []

getHeight56 :: Toolbar a0
            -> IO Int32
getHeight56 =
  propertyGet "Height"
              []
              outInt32

setHeight51 :: Int32
            -> Toolbar a0
            -> IO ()
setHeight51 rhs =
  propertySet "Height"
              [inInt32 rhs]

getLeft59 :: Toolbar a0
          -> IO Int32
getLeft59 =
  propertyGet "Left"
              []
              outInt32

setLeft54 :: Int32
          -> Toolbar a0
          -> IO ()
setLeft54 rhs =
  propertySet "Left"
              [inInt32 rhs]

getName84 :: Toolbar a0
          -> IO String
getName84 =
  propertyGet "Name"
              []
              outString

getPosition12 :: Toolbar a0
              -> IO Int32
getPosition12 =
  propertyGet "Position"
              []
              outInt32

setPosition12 :: Int32
              -> Toolbar a0
              -> IO ()
setPosition12 rhs =
  propertySet "Position"
              [inInt32 rhs]

getProtection2 :: Toolbar a0
               -> IO XlToolbarProtection
getProtection2 =
  propertyGet "Protection"
              []
              outEnum

setProtection0 :: XlToolbarProtection
               -> Toolbar a0
               -> IO ()
setProtection0 rhs =
  propertySet "Protection"
              [inEnum rhs]

reset3 :: Toolbar a0
       -> IO ()
reset3 =
  method0 "Reset"
          []

getToolbarButtons0 :: Toolbar a0
                   -> IO (ToolbarButtons ())
getToolbarButtons0 =
  propertyGet "ToolbarButtons"
              []
              outIUnknown

getTop59 :: Toolbar a0
         -> IO Int32
getTop59 =
  propertyGet "Top"
              []
              outInt32

setTop54 :: Int32
         -> Toolbar a0
         -> IO ()
setTop54 rhs =
  propertySet "Top"
              [inInt32 rhs]

getVisible65 :: Toolbar a0
             -> IO Bool
getVisible65 =
  propertyGet "Visible"
              []
              outBool

setVisible65 :: Bool
             -> Toolbar a0
             -> IO ()
setVisible65 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth57 :: Toolbar a0
           -> IO Int32
getWidth57 =
  propertyGet "Width"
              []
              outInt32

setWidth52 :: Int32
           -> Toolbar a0
           -> IO ()
setWidth52 rhs =
  propertySet "Width"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface Toolbars
-- 
-- --------------------------------------------------
data Toolbars_ a = Toolbars__ 
type Toolbars a = IDispatch (Toolbars_ a)
iidToolbars :: IID (Toolbars ())
iidToolbars = mkIID "{0002085D-0000-0000-C000-000000000046}"

queryInterface19 :: (Variant a1)
                 => GUID
                 -> Toolbars a0
                 -> IO a1
queryInterface19 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef19 :: Toolbars a0
         -> IO Word32
addRef19 =
  function1 "AddRef"
            []
            outWord32

release19 :: Toolbars a0
          -> IO Word32
release19 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount19 :: Toolbars a0
                   -> IO Word32
getTypeInfoCount19 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo19 :: (Variant a1)
              => Word32
              -> Word32
              -> Toolbars a0
              -> IO a1
getTypeInfo19 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames19 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Toolbars a0
                -> IO Int32
getIDsOfNames19 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke19 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Toolbars a0
         -> IO (a1, a2, Word32)
invoke19 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication288 :: (Variant a1)
                  => Toolbars a0
                  -> IO a1
getApplication288 =
  propertyGet "Application"
              []
              outVariant

getCreator288 :: Toolbars a0
              -> IO XlCreator
getCreator288 =
  propertyGet "Creator"
              []
              outEnum

getParent303 :: Toolbars a0
             -> IO (IDispatch ())
getParent303 =
  propertyGet "Parent"
              []
              outIDispatch

add78 :: (Variant a1)
      => a1
      -> Toolbars a0
      -> IO (Toolbar ())
add78 name =
  function1 "Add"
            [inVariant name]
            outIDispatch

getCount121 :: Toolbars a0
            -> IO Int32
getCount121 =
  propertyGet "Count"
              []
              outInt32

getDefault119 :: a1
              -> Toolbars a0
              -> IO (Toolbar ())
getDefault119 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem63 :: a1
          -> Toolbars a0
          -> IO (Toolbar ())
getItem63 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getNewEnum75 :: Toolbars a0
             -> IO (IUnknown ())
getNewEnum75 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ToolbarButton
-- 
-- --------------------------------------------------
data ToolbarButton_ a = ToolbarButton__ 
type ToolbarButton a = IDispatch (ToolbarButton_ a)
iidToolbarButton :: IID (ToolbarButton ())
iidToolbarButton = mkIID "{0002085E-0000-0000-C000-000000000046}"

queryInterface20 :: (Variant a1)
                 => GUID
                 -> ToolbarButton a0
                 -> IO a1
queryInterface20 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef20 :: ToolbarButton a0
         -> IO Word32
addRef20 =
  function1 "AddRef"
            []
            outWord32

release20 :: ToolbarButton a0
          -> IO Word32
release20 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount20 :: ToolbarButton a0
                   -> IO Word32
getTypeInfoCount20 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo20 :: (Variant a1)
              => Word32
              -> Word32
              -> ToolbarButton a0
              -> IO a1
getTypeInfo20 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames20 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> ToolbarButton a0
                -> IO Int32
getIDsOfNames20 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke20 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> ToolbarButton a0
         -> IO (a1, a2, Word32)
invoke20 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication289 :: (Variant a1)
                  => ToolbarButton a0
                  -> IO a1
getApplication289 =
  propertyGet "Application"
              []
              outVariant

getCreator289 :: ToolbarButton a0
              -> IO XlCreator
getCreator289 =
  propertyGet "Creator"
              []
              outEnum

getParent304 :: ToolbarButton a0
             -> IO (IDispatch ())
getParent304 =
  propertyGet "Parent"
              []
              outIDispatch

getBuiltIn6 :: ToolbarButton a0
            -> IO Bool
getBuiltIn6 =
  propertyGet "BuiltIn"
              []
              outBool

getBuiltInFace0 :: ToolbarButton a0
                -> IO Bool
getBuiltInFace0 =
  propertyGet "BuiltInFace"
              []
              outBool

setBuiltInFace0 :: Bool
                -> ToolbarButton a0
                -> IO ()
setBuiltInFace0 rhs =
  propertySet "BuiltInFace"
              [inBool rhs]

copy58 :: Toolbar a1
       -> Int32
       -> ToolbarButton a0
       -> IO ()
copy58 toolbar before =
  method0 "Copy"
          [ inIDispatch toolbar
          , inInt32 before
          ]

copyFace0 :: ToolbarButton a0
          -> IO ()
copyFace0 =
  method0 "CopyFace"
          []

delete134 :: ToolbarButton a0
          -> IO ()
delete134 =
  method0 "Delete"
          []

edit0 :: ToolbarButton a0
      -> IO ()
edit0 =
  method0 "Edit"
          []

getEnabled47 :: ToolbarButton a0
             -> IO Bool
getEnabled47 =
  propertyGet "Enabled"
              []
              outBool

setEnabled47 :: Bool
             -> ToolbarButton a0
             -> IO ()
setEnabled47 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHelpContextID1 :: ToolbarButton a0
                  -> IO Int32
getHelpContextID1 =
  propertyGet "HelpContextID"
              []
              outInt32

setHelpContextID1 :: Int32
                  -> ToolbarButton a0
                  -> IO ()
setHelpContextID1 rhs =
  propertySet "HelpContextID"
              [inInt32 rhs]

getHelpFile1 :: ToolbarButton a0
             -> IO String
getHelpFile1 =
  propertyGet "HelpFile"
              []
              outString

setHelpFile1 :: String
             -> ToolbarButton a0
             -> IO ()
setHelpFile1 rhs =
  propertySet "HelpFile"
              [inString rhs]

getID5 :: ToolbarButton a0
       -> IO Int32
getID5 =
  propertyGet "ID"
              []
              outInt32

getIsGap0 :: ToolbarButton a0
          -> IO Bool
getIsGap0 =
  propertyGet "IsGap"
              []
              outBool

move9 :: Toolbar a1
      -> Int32
      -> ToolbarButton a0
      -> IO ()
move9 toolbar before =
  method0 "Move"
          [ inIDispatch toolbar
          , inInt32 before
          ]

getName85 :: ToolbarButton a0
          -> IO String
getName85 =
  propertyGet "Name"
              []
              outString

setName45 :: String
          -> ToolbarButton a0
          -> IO ()
setName45 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction44 :: ToolbarButton a0
              -> IO String
getOnAction44 =
  propertyGet "OnAction"
              []
              outString

setOnAction44 :: String
              -> ToolbarButton a0
              -> IO ()
setOnAction44 rhs =
  propertySet "OnAction"
              [inString rhs]

pasteFace0 :: ToolbarButton a0
           -> IO ()
pasteFace0 =
  method0 "PasteFace"
          []

getPushed0 :: ToolbarButton a0
           -> IO Bool
getPushed0 =
  propertyGet "Pushed"
              []
              outBool

setPushed0 :: Bool
           -> ToolbarButton a0
           -> IO ()
setPushed0 rhs =
  propertySet "Pushed"
              [inBool rhs]

reset4 :: ToolbarButton a0
       -> IO ()
reset4 =
  method0 "Reset"
          []

getStatusBar2 :: ToolbarButton a0
              -> IO String
getStatusBar2 =
  propertyGet "StatusBar"
              []
              outString

setStatusBar2 :: String
              -> ToolbarButton a0
              -> IO ()
setStatusBar2 rhs =
  propertySet "StatusBar"
              [inString rhs]

getWidth58 :: ToolbarButton a0
           -> IO Int32
getWidth58 =
  propertyGet "Width"
              []
              outInt32

setWidth53 :: Int32
           -> ToolbarButton a0
           -> IO ()
setWidth53 rhs =
  propertySet "Width"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface ToolbarButtons
-- 
-- --------------------------------------------------
data ToolbarButtons_ a = ToolbarButtons__ 
type ToolbarButtons a = IDispatch (ToolbarButtons_ a)
iidToolbarButtons :: IID (ToolbarButtons ())
iidToolbarButtons = mkIID "{0002085F-0000-0000-C000-000000000046}"

queryInterface21 :: (Variant a1)
                 => GUID
                 -> ToolbarButtons a0
                 -> IO a1
queryInterface21 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef21 :: ToolbarButtons a0
         -> IO Word32
addRef21 =
  function1 "AddRef"
            []
            outWord32

release21 :: ToolbarButtons a0
          -> IO Word32
release21 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount21 :: ToolbarButtons a0
                   -> IO Word32
getTypeInfoCount21 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo21 :: (Variant a1)
              => Word32
              -> Word32
              -> ToolbarButtons a0
              -> IO a1
getTypeInfo21 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames21 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> ToolbarButtons a0
                -> IO Int32
getIDsOfNames21 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke21 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> ToolbarButtons a0
         -> IO (a1, a2, Word32)
invoke21 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication290 :: (Variant a1)
                  => ToolbarButtons a0
                  -> IO a1
getApplication290 =
  propertyGet "Application"
              []
              outVariant

getCreator290 :: ToolbarButtons a0
              -> IO XlCreator
getCreator290 =
  propertyGet "Creator"
              []
              outEnum

getParent305 :: ToolbarButtons a0
             -> IO (IDispatch ())
getParent305 =
  propertyGet "Parent"
              []
              outIDispatch

add79 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> ToolbarButtons a0
      -> IO (ToolbarButton ())
add79 button before onAction pushed enabled statusBar helpFile helpContextID =
  function1 "Add"
            [ inVariant button
            , inVariant before
            , inVariant onAction
            , inVariant pushed
            , inVariant enabled
            , inVariant statusBar
            , inVariant helpFile
            , inVariant helpContextID
            ]
            outIDispatch

getCount122 :: ToolbarButtons a0
            -> IO Int32
getCount122 =
  propertyGet "Count"
              []
              outInt32

getItem64 :: Int32
          -> ToolbarButtons a0
          -> IO (ToolbarButton ())
getItem64 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIDispatch

getNewEnum76 :: ToolbarButtons a0
             -> IO (IUnknown ())
getNewEnum76 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault120 :: Int32
              -> ToolbarButtons a0
              -> IO (ToolbarButton ())
getDefault120 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Areas
-- 
-- --------------------------------------------------
data Areas_ a = Areas__ 
type Areas a = IDispatch (Areas_ a)
iidAreas :: IID (Areas ())
iidAreas = mkIID "{00020860-0000-0000-C000-000000000046}"

queryInterface22 :: (Variant a1)
                 => GUID
                 -> Areas a0
                 -> IO a1
queryInterface22 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef22 :: Areas a0
         -> IO Word32
addRef22 =
  function1 "AddRef"
            []
            outWord32

release22 :: Areas a0
          -> IO Word32
release22 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount22 :: Areas a0
                   -> IO Word32
getTypeInfoCount22 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo22 :: (Variant a1)
              => Word32
              -> Word32
              -> Areas a0
              -> IO a1
getTypeInfo22 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames22 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Areas a0
                -> IO Int32
getIDsOfNames22 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke22 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Areas a0
         -> IO (a1, a2, Word32)
invoke22 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication291 :: (Variant a1)
                  => Areas a0
                  -> IO a1
getApplication291 =
  propertyGet "Application"
              []
              outVariant

getCreator291 :: Areas a0
              -> IO XlCreator
getCreator291 =
  propertyGet "Creator"
              []
              outEnum

getParent306 :: Areas a0
             -> IO (IDispatch ())
getParent306 =
  propertyGet "Parent"
              []
              outIDispatch

getCount123 :: Areas a0
            -> IO Int32
getCount123 =
  propertyGet "Count"
              []
              outInt32

getItem65 :: Int32
          -> Areas a0
          -> IO (Range ())
getItem65 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIDispatch

getNewEnum77 :: Areas a0
             -> IO (IUnknown ())
getNewEnum77 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault121 :: Int32
              -> Areas a0
              -> IO (Range ())
getDefault121 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface WorkbookEvents
-- 
-- --------------------------------------------------
data WorkbookEvents_ a = WorkbookEvents__ 
type WorkbookEvents a = IDispatch (WorkbookEvents_ a)
iidWorkbookEvents :: IID (WorkbookEvents ())
iidWorkbookEvents = mkIID "{00024412-0000-0000-C000-000000000046}"

mkWorkbookEvents_vtbl :: (GUID -> objState -> IO (Ptr ()))
                      -> (objState -> IO Word32)
                      -> (objState -> IO Word32)
                      -> (objState -> IO Word32)
                      -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                      -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                      -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                      -> (objState -> IO ())
                      -> (objState -> IO ())
                      -> (objState -> IO ())
                      -> (Bool -> objState -> IO Bool)
                      -> (Bool -> Bool -> objState -> IO Bool)
                      -> (Bool -> objState -> IO Bool)
                      -> (IDispatch a0 -> objState -> IO ())
                      -> (objState -> IO ())
                      -> (objState -> IO ())
                      -> (Window a0 -> objState -> IO ())
                      -> (Window a0 -> objState -> IO ())
                      -> (Window a0 -> objState -> IO ())
                      -> (IDispatch a0 -> Range a1 -> objState -> IO ())
                      -> (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                      -> (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                      -> (IDispatch a0 -> objState -> IO ())
                      -> (IDispatch a0 -> objState -> IO ())
                      -> (IDispatch a0 -> objState -> IO ())
                      -> (IDispatch a0 -> Range a1 -> objState -> IO ())
                      -> (IDispatch a0 -> Hyperlink a1 -> objState -> IO ())
                      -> (IDispatch a0 -> PivotTable a1 -> objState -> IO ())
                      -> (PivotTable a0 -> objState -> IO ())
                      -> (PivotTable a0 -> objState -> IO ())
                      -> (MsoSyncEventType -> objState -> IO ())
                      -> (XmlMap a0 -> String -> Bool -> Bool -> objState -> IO Bool)
                      -> (XmlMap a0 -> Bool -> XlXmlImportResult -> objState -> IO ())
                      -> (XmlMap a0 -> String -> Bool -> objState -> IO Bool)
                      -> (XmlMap a0 -> String -> XlXmlExportResult -> objState -> IO ())
                      -> (String -> String -> Bool -> objState -> IO ())
                      -> IO (ComVTable (WorkbookEvents ()) objState)
mkWorkbookEvents_vtbl queryInterface23 addRef23 release23 getTypeInfoCount23 getTypeInfo23 getIDsOfNames23 invoke23 open4 activate18 deactivate4 beforeClose0 beforeSave0 beforePrint0 newSheet0 addinInstall0 addinUninstall0 windowResize2 windowActivate2 windowDeactivate2 sheetSelectionChange2 sheetBeforeDoubleClick2 sheetBeforeRightClick2 sheetActivate2 sheetDeactivate2 sheetCalculate2 sheetChange2 sheetFollowHyperlink2 sheetPivotTableUpdate2 pivotTableCloseConnection0 pivotTableOpenConnection0 sync0 beforeXmlImport0 afterXmlImport0 beforeXmlExport0 afterXmlExport0 rowsetComplete0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface23 queryInterface23)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef23 addRef23)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release23 release23)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount23 getTypeInfoCount23)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo23 getTypeInfo23)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames23 getIDsOfNames23)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke23 invoke23)
   meth_arg7 = mkDispMethod "Open" 0x783 (prim_open4 open4)
   meth_arg8 = mkDispMethod "Activate" 0x130 (prim_activate18 activate18)
   meth_arg9 = mkDispMethod "Deactivate" 0x5fa (prim_deactivate4 deactivate4)
   meth_arg10 = mkDispMethod "BeforeClose" 0x60a (prim_beforeClose0 beforeClose0)
   meth_arg11 = mkDispMethod "BeforeSave" 0x60b (prim_beforeSave0 beforeSave0)
   meth_arg12 = mkDispMethod "BeforePrint" 0x60d (prim_beforePrint0 beforePrint0)
   meth_arg13 = mkDispMethod "NewSheet" 0x60e (prim_newSheet0 newSheet0)
   meth_arg14 = mkDispMethod "AddinInstall" 0x610 (prim_addinInstall0 addinInstall0)
   meth_arg15 = mkDispMethod "AddinUninstall" 0x611 (prim_addinUninstall0 addinUninstall0)
   meth_arg16 = mkDispMethod "WindowResize" 0x612 (prim_windowResize2 windowResize2)
   meth_arg17 = mkDispMethod "WindowActivate" 0x614 (prim_windowActivate2 windowActivate2)
   meth_arg18 = mkDispMethod "WindowDeactivate" 0x615 (prim_windowDeactivate2 windowDeactivate2)
   meth_arg19 = mkDispMethod "SheetSelectionChange" 0x616 (prim_sheetSelectionChange2 sheetSelectionChange2)
   meth_arg20 = mkDispMethod "SheetBeforeDoubleClick" 0x617 (prim_sheetBeforeDoubleClick2 sheetBeforeDoubleClick2)
   meth_arg21 = mkDispMethod "SheetBeforeRightClick" 0x618 (prim_sheetBeforeRightClick2 sheetBeforeRightClick2)
   meth_arg22 = mkDispMethod "SheetActivate" 0x619 (prim_sheetActivate2 sheetActivate2)
   meth_arg23 = mkDispMethod "SheetDeactivate" 0x61a (prim_sheetDeactivate2 sheetDeactivate2)
   meth_arg24 = mkDispMethod "SheetCalculate" 0x61b (prim_sheetCalculate2 sheetCalculate2)
   meth_arg25 = mkDispMethod "SheetChange" 0x61c (prim_sheetChange2 sheetChange2)
   meth_arg26 = mkDispMethod "SheetFollowHyperlink" 0x73e (prim_sheetFollowHyperlink2 sheetFollowHyperlink2)
   meth_arg27 = mkDispMethod "SheetPivotTableUpdate" 0x86d (prim_sheetPivotTableUpdate2 sheetPivotTableUpdate2)
   meth_arg28 = mkDispMethod "PivotTableCloseConnection" 0x86e (prim_pivotTableCloseConnection0 pivotTableCloseConnection0)
   meth_arg29 = mkDispMethod "PivotTableOpenConnection" 0x86f (prim_pivotTableOpenConnection0 pivotTableOpenConnection0)
   meth_arg30 = mkDispMethod "Sync" 0x8da (prim_sync0 sync0)
   meth_arg31 = mkDispMethod "BeforeXmlImport" 0x8eb (prim_beforeXmlImport0 beforeXmlImport0)
   meth_arg32 = mkDispMethod "AfterXmlImport" 0x8ed (prim_afterXmlImport0 afterXmlImport0)
   meth_arg33 = mkDispMethod "BeforeXmlExport" 0x8ef (prim_beforeXmlExport0 beforeXmlExport0)
   meth_arg34 = mkDispMethod "AfterXmlExport" 0x8f0 (prim_afterXmlExport0 afterXmlExport0)
   meth_arg35 = mkDispMethod "RowsetComplete" 0xa32 (prim_rowsetComplete0 rowsetComplete0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         , meth_arg20
                         , meth_arg21
                         , meth_arg22
                         , meth_arg23
                         , meth_arg24
                         , meth_arg25
                         , meth_arg26
                         , meth_arg27
                         , meth_arg28
                         , meth_arg29
                         , meth_arg30
                         , meth_arg31
                         , meth_arg32
                         , meth_arg33
                         , meth_arg34
                         , meth_arg35
                         ]

prim_queryInterface23 :: (GUID -> objState -> IO (Ptr ()))
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_queryInterface23 queryInterface23_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface23_meth riid)
          ppvObj

prim_addRef23 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_addRef23 addRef23_meth =
  retVal $ \ the_res ->
  apply_1 (addRef23_meth)
          the_res

prim_release23 :: (objState -> IO Word32)
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_release23 release23_meth =
  retVal $ \ the_res ->
  apply_1 (release23_meth)
          the_res

prim_getTypeInfoCount23 :: (objState -> IO Word32)
                        -> [VARIANT]
                        -> objState
                        -> IO (Maybe VARIANT)
prim_getTypeInfoCount23 getTypeInfoCount23_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount23_meth)
          pctinfo

prim_getTypeInfo23 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_getTypeInfo23 getTypeInfo23_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo23_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames23 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_getIDsOfNames23 getIDsOfNames23_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames23_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke23 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_invoke23 invoke23_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke23_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_open4 :: (objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_open4 open4_meth = apply_0 (open4_meth)

prim_activate18 :: (objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_activate18 activate18_meth = apply_0 (activate18_meth)

prim_deactivate4 :: (objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_deactivate4 deactivate4_meth = apply_0 (deactivate4_meth)

prim_beforeClose0 :: (Bool -> objState -> IO Bool)
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_beforeClose0 beforeClose0_meth =
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeClose0_meth cancel)
          out_cancel

prim_beforeSave0 :: (Bool -> Bool -> objState -> IO Bool)
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_beforeSave0 beforeSave0_meth =
  inArg $ \ saveAsUI ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeSave0_meth saveAsUI cancel)
          out_cancel

prim_beforePrint0 :: (Bool -> objState -> IO Bool)
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_beforePrint0 beforePrint0_meth =
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforePrint0_meth cancel)
          out_cancel

prim_newSheet0 :: (IDispatch a0 -> objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_newSheet0 newSheet0_meth =
  inArg $ \ sh ->
  apply_0 (newSheet0_meth sh)

prim_addinInstall0 :: (objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_addinInstall0 addinInstall0_meth =
  apply_0 (addinInstall0_meth)

prim_addinUninstall0 :: (objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_addinUninstall0 addinUninstall0_meth =
  apply_0 (addinUninstall0_meth)

prim_windowResize2 :: (Window a0 -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_windowResize2 windowResize2_meth =
  inArg $ \ wn ->
  apply_0 (windowResize2_meth wn)

prim_windowActivate2 :: (Window a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_windowActivate2 windowActivate2_meth =
  inArg $ \ wn ->
  apply_0 (windowActivate2_meth wn)

prim_windowDeactivate2 :: (Window a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_windowDeactivate2 windowDeactivate2_meth =
  inArg $ \ wn ->
  apply_0 (windowDeactivate2_meth wn)

prim_sheetSelectionChange2 :: (IDispatch a0 -> Range a1 -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_sheetSelectionChange2 sheetSelectionChange2_meth =
  inArg $ \ sh ->
  inArg $ \ target ->
  apply_0 (sheetSelectionChange2_meth sh target)

prim_sheetBeforeDoubleClick2 :: (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_sheetBeforeDoubleClick2 sheetBeforeDoubleClick2_meth =
  inArg $ \ sh ->
  inArg $ \ target ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (sheetBeforeDoubleClick2_meth sh target cancel)
          out_cancel

prim_sheetBeforeRightClick2 :: (IDispatch a0 -> Range a1 -> Bool -> objState -> IO Bool)
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_sheetBeforeRightClick2 sheetBeforeRightClick2_meth =
  inArg $ \ sh ->
  inArg $ \ target ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (sheetBeforeRightClick2_meth sh target cancel)
          out_cancel

prim_sheetActivate2 :: (IDispatch a0 -> objState -> IO ())
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_sheetActivate2 sheetActivate2_meth =
  inArg $ \ sh ->
  apply_0 (sheetActivate2_meth sh)

prim_sheetDeactivate2 :: (IDispatch a0 -> objState -> IO ())
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_sheetDeactivate2 sheetDeactivate2_meth =
  inArg $ \ sh ->
  apply_0 (sheetDeactivate2_meth sh)

prim_sheetCalculate2 :: (IDispatch a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_sheetCalculate2 sheetCalculate2_meth =
  inArg $ \ sh ->
  apply_0 (sheetCalculate2_meth sh)

prim_sheetChange2 :: (IDispatch a0 -> Range a1 -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_sheetChange2 sheetChange2_meth =
  inArg $ \ sh ->
  inArg $ \ target ->
  apply_0 (sheetChange2_meth sh target)

prim_sheetFollowHyperlink2 :: (IDispatch a0 -> Hyperlink a1 -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_sheetFollowHyperlink2 sheetFollowHyperlink2_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  apply_0 (sheetFollowHyperlink2_meth sh target)

prim_sheetPivotTableUpdate2 :: (IDispatch a0 -> PivotTable a1 -> objState -> IO ())
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_sheetPivotTableUpdate2 sheetPivotTableUpdate2_meth =
  inArg $ \ sh ->
  inIUnknownArg $ \ target ->
  apply_0 (sheetPivotTableUpdate2_meth sh target)

prim_pivotTableCloseConnection0 :: (PivotTable a0 -> objState -> IO ())
                                -> [VARIANT]
                                -> objState
                                -> IO (Maybe VARIANT)
prim_pivotTableCloseConnection0 pivotTableCloseConnection0_meth =
  inIUnknownArg $ \ target ->
  apply_0 (pivotTableCloseConnection0_meth target)

prim_pivotTableOpenConnection0 :: (PivotTable a0 -> objState -> IO ())
                               -> [VARIANT]
                               -> objState
                               -> IO (Maybe VARIANT)
prim_pivotTableOpenConnection0 pivotTableOpenConnection0_meth =
  inIUnknownArg $ \ target ->
  apply_0 (pivotTableOpenConnection0_meth target)

prim_sync0 :: (MsoSyncEventType -> objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_sync0 sync0_meth =
  inArg $ \ syncEventType ->
  apply_0 (sync0_meth syncEventType)

prim_beforeXmlImport0 :: (XmlMap a0 -> String -> Bool -> Bool -> objState -> IO Bool)
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_beforeXmlImport0 beforeXmlImport0_meth =
  inIUnknownArg $ \ map ->
  inArg $ \ url ->
  inArg $ \ isRefresh ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeXmlImport0_meth map url isRefresh cancel)
          out_cancel

prim_afterXmlImport0 :: (XmlMap a0 -> Bool -> XlXmlImportResult -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_afterXmlImport0 afterXmlImport0_meth =
  inIUnknownArg $ \ map ->
  inArg $ \ isRefresh ->
  inArg $ \ result ->
  apply_0 (afterXmlImport0_meth map isRefresh result)

prim_beforeXmlExport0 :: (XmlMap a0 -> String -> Bool -> objState -> IO Bool)
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_beforeXmlExport0 beforeXmlExport0_meth =
  inIUnknownArg $ \ map ->
  inArg $ \ url ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeXmlExport0_meth map url cancel)
          out_cancel

prim_afterXmlExport0 :: (XmlMap a0 -> String -> XlXmlExportResult -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_afterXmlExport0 afterXmlExport0_meth =
  inIUnknownArg $ \ map ->
  inArg $ \ url ->
  inArg $ \ result ->
  apply_0 (afterXmlExport0_meth map url result)

prim_rowsetComplete0 :: (String -> String -> Bool -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_rowsetComplete0 rowsetComplete0_meth =
  inArg $ \ description ->
  inArg $ \ sheet ->
  inArg $ \ success ->
  apply_0 (rowsetComplete0_meth description sheet success)

-- --------------------------------------------------
-- 
-- dispinterface MenuBars
-- 
-- --------------------------------------------------
data MenuBars_ a = MenuBars__ 
type MenuBars a = IDispatch (MenuBars_ a)
iidMenuBars :: IID (MenuBars ())
iidMenuBars = mkIID "{00020863-0000-0000-C000-000000000046}"

queryInterface24 :: (Variant a1)
                 => GUID
                 -> MenuBars a0
                 -> IO a1
queryInterface24 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef24 :: MenuBars a0
         -> IO Word32
addRef24 =
  function1 "AddRef"
            []
            outWord32

release24 :: MenuBars a0
          -> IO Word32
release24 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount24 :: MenuBars a0
                   -> IO Word32
getTypeInfoCount24 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo24 :: (Variant a1)
              => Word32
              -> Word32
              -> MenuBars a0
              -> IO a1
getTypeInfo24 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames24 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> MenuBars a0
                -> IO Int32
getIDsOfNames24 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke24 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> MenuBars a0
         -> IO (a1, a2, Word32)
invoke24 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication292 :: (Variant a1)
                  => MenuBars a0
                  -> IO a1
getApplication292 =
  propertyGet "Application"
              []
              outVariant

getCreator292 :: MenuBars a0
              -> IO XlCreator
getCreator292 =
  propertyGet "Creator"
              []
              outEnum

getParent307 :: MenuBars a0
             -> IO (IDispatch ())
getParent307 =
  propertyGet "Parent"
              []
              outIDispatch

add80 :: (Variant a1)
      => a1
      -> MenuBars a0
      -> IO (MenuBar ())
add80 name =
  function1 "Add"
            [inVariant name]
            outIUnknown

getCount124 :: MenuBars a0
            -> IO Int32
getCount124 =
  propertyGet "Count"
              []
              outInt32

getDefault122 :: a1
              -> MenuBars a0
              -> IO (MenuBar ())
getDefault122 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getItem66 :: a1
          -> MenuBars a0
          -> IO (MenuBar ())
getItem66 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getNewEnum78 :: MenuBars a0
             -> IO (IUnknown ())
getNewEnum78 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface MenuBar
-- 
-- --------------------------------------------------
data MenuBar_ a = MenuBar__ 
type MenuBar a = IDispatch (MenuBar_ a)
iidMenuBar :: IID (MenuBar ())
iidMenuBar = mkIID "{00020864-0000-0000-C000-000000000046}"

queryInterface25 :: (Variant a1)
                 => GUID
                 -> MenuBar a0
                 -> IO a1
queryInterface25 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef25 :: MenuBar a0
         -> IO Word32
addRef25 =
  function1 "AddRef"
            []
            outWord32

release25 :: MenuBar a0
          -> IO Word32
release25 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount25 :: MenuBar a0
                   -> IO Word32
getTypeInfoCount25 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo25 :: (Variant a1)
              => Word32
              -> Word32
              -> MenuBar a0
              -> IO a1
getTypeInfo25 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames25 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> MenuBar a0
                -> IO Int32
getIDsOfNames25 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke25 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> MenuBar a0
         -> IO (a1, a2, Word32)
invoke25 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication293 :: (Variant a1)
                  => MenuBar a0
                  -> IO a1
getApplication293 =
  propertyGet "Application"
              []
              outVariant

getCreator293 :: MenuBar a0
              -> IO XlCreator
getCreator293 =
  propertyGet "Creator"
              []
              outEnum

getParent308 :: MenuBar a0
             -> IO (IDispatch ())
getParent308 =
  propertyGet "Parent"
              []
              outIDispatch

activate19 :: MenuBar a0
           -> IO ()
activate19 =
  method0 "Activate"
          []

getBuiltIn7 :: MenuBar a0
            -> IO Bool
getBuiltIn7 =
  propertyGet "BuiltIn"
              []
              outBool

getCaption41 :: MenuBar a0
             -> IO String
getCaption41 =
  propertyGet "Caption"
              []
              outString

setCaption39 :: String
             -> MenuBar a0
             -> IO ()
setCaption39 rhs =
  propertySet "Caption"
              [inString rhs]

delete135 :: MenuBar a0
          -> IO ()
delete135 =
  method0 "Delete"
          []

getIndex43 :: MenuBar a0
           -> IO Int32
getIndex43 =
  propertyGet "Index"
              []
              outInt32

getMenus0 :: MenuBar a0
          -> IO (Menus ())
getMenus0 =
  propertyGet "Menus"
              []
              outIUnknown

reset5 :: MenuBar a0
       -> IO ()
reset5 =
  method0 "Reset"
          []

-- --------------------------------------------------
-- 
-- dispinterface Menus
-- 
-- --------------------------------------------------
data Menus_ a = Menus__ 
type Menus a = IDispatch (Menus_ a)
iidMenus :: IID (Menus ())
iidMenus = mkIID "{00020865-0000-0000-C000-000000000046}"

queryInterface26 :: (Variant a1)
                 => GUID
                 -> Menus a0
                 -> IO a1
queryInterface26 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef26 :: Menus a0
         -> IO Word32
addRef26 =
  function1 "AddRef"
            []
            outWord32

release26 :: Menus a0
          -> IO Word32
release26 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount26 :: Menus a0
                   -> IO Word32
getTypeInfoCount26 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo26 :: (Variant a1)
              => Word32
              -> Word32
              -> Menus a0
              -> IO a1
getTypeInfo26 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames26 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Menus a0
                -> IO Int32
getIDsOfNames26 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke26 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Menus a0
         -> IO (a1, a2, Word32)
invoke26 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication294 :: (Variant a1)
                  => Menus a0
                  -> IO a1
getApplication294 =
  propertyGet "Application"
              []
              outVariant

getCreator294 :: Menus a0
              -> IO XlCreator
getCreator294 =
  propertyGet "Creator"
              []
              outEnum

getParent309 :: Menus a0
             -> IO (IDispatch ())
getParent309 =
  propertyGet "Parent"
              []
              outIDispatch

add81 :: (Variant a1, Variant a2)
      => String
      -> a1
      -> a2
      -> Menus a0
      -> IO (Menu ())
add81 caption before restore =
  function1 "Add"
            [ inString caption
            , inVariant before
            , inVariant restore
            ]
            outIUnknown

getCount125 :: Menus a0
            -> IO Int32
getCount125 =
  propertyGet "Count"
              []
              outInt32

getDefault123 :: a1
              -> Menus a0
              -> IO (Menu ())
getDefault123 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getItem67 :: a1
          -> Menus a0
          -> IO (Menu ())
getItem67 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getNewEnum79 :: Menus a0
             -> IO (IUnknown ())
getNewEnum79 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Menu
-- 
-- --------------------------------------------------
data Menu_ a = Menu__ 
type Menu a = IDispatch (Menu_ a)
iidMenu :: IID (Menu ())
iidMenu = mkIID "{00020866-0000-0000-C000-000000000046}"

queryInterface27 :: (Variant a1)
                 => GUID
                 -> Menu a0
                 -> IO a1
queryInterface27 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef27 :: Menu a0
         -> IO Word32
addRef27 =
  function1 "AddRef"
            []
            outWord32

release27 :: Menu a0
          -> IO Word32
release27 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount27 :: Menu a0
                   -> IO Word32
getTypeInfoCount27 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo27 :: (Variant a1)
              => Word32
              -> Word32
              -> Menu a0
              -> IO a1
getTypeInfo27 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames27 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Menu a0
                -> IO Int32
getIDsOfNames27 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke27 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Menu a0
         -> IO (a1, a2, Word32)
invoke27 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication295 :: (Variant a1)
                  => Menu a0
                  -> IO a1
getApplication295 =
  propertyGet "Application"
              []
              outVariant

getCreator295 :: Menu a0
              -> IO XlCreator
getCreator295 =
  propertyGet "Creator"
              []
              outEnum

getParent310 :: Menu a0
             -> IO (IDispatch ())
getParent310 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption42 :: Menu a0
             -> IO String
getCaption42 =
  propertyGet "Caption"
              []
              outString

setCaption40 :: String
             -> Menu a0
             -> IO ()
setCaption40 rhs =
  propertySet "Caption"
              [inString rhs]

delete136 :: Menu a0
          -> IO ()
delete136 =
  method0 "Delete"
          []

getEnabled48 :: Menu a0
             -> IO Bool
getEnabled48 =
  propertyGet "Enabled"
              []
              outBool

setEnabled48 :: Bool
             -> Menu a0
             -> IO ()
setEnabled48 rhs =
  propertySet "Enabled"
              [inBool rhs]

getIndex44 :: Menu a0
           -> IO Int32
getIndex44 =
  propertyGet "Index"
              []
              outInt32

getMenuItems0 :: Menu a0
              -> IO (MenuItems ())
getMenuItems0 =
  propertyGet "MenuItems"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface MenuItems
-- 
-- --------------------------------------------------
data MenuItems_ a = MenuItems__ 
type MenuItems a = IDispatch (MenuItems_ a)
iidMenuItems :: IID (MenuItems ())
iidMenuItems = mkIID "{00020867-0000-0000-C000-000000000046}"

queryInterface28 :: (Variant a1)
                 => GUID
                 -> MenuItems a0
                 -> IO a1
queryInterface28 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef28 :: MenuItems a0
         -> IO Word32
addRef28 =
  function1 "AddRef"
            []
            outWord32

release28 :: MenuItems a0
          -> IO Word32
release28 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount28 :: MenuItems a0
                   -> IO Word32
getTypeInfoCount28 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo28 :: (Variant a1)
              => Word32
              -> Word32
              -> MenuItems a0
              -> IO a1
getTypeInfo28 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames28 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> MenuItems a0
                -> IO Int32
getIDsOfNames28 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke28 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> MenuItems a0
         -> IO (a1, a2, Word32)
invoke28 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication296 :: (Variant a1)
                  => MenuItems a0
                  -> IO a1
getApplication296 =
  propertyGet "Application"
              []
              outVariant

getCreator296 :: MenuItems a0
              -> IO XlCreator
getCreator296 =
  propertyGet "Creator"
              []
              outEnum

getParent311 :: MenuItems a0
             -> IO (IDispatch ())
getParent311 =
  propertyGet "Parent"
              []
              outIDispatch

add82 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
      => String
      -> a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> MenuItems a0
      -> IO (MenuItem ())
add82 caption onAction shortcutKey before restore statusBar helpFile helpContextID =
  function1 "Add"
            [ inString caption
            , inVariant onAction
            , inVariant shortcutKey
            , inVariant before
            , inVariant restore
            , inVariant statusBar
            , inVariant helpFile
            , inVariant helpContextID
            ]
            outIUnknown

addMenu0 :: (Variant a1, Variant a2)
         => String
         -> a1
         -> a2
         -> MenuItems a0
         -> IO (Menu ())
addMenu0 caption before restore =
  function1 "AddMenu"
            [ inString caption
            , inVariant before
            , inVariant restore
            ]
            outIDispatch

getCount126 :: MenuItems a0
            -> IO Int32
getCount126 =
  propertyGet "Count"
              []
              outInt32

getDefault124 :: a1
              -> MenuItems a0
              -> IO (IDispatch ())
getDefault124 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem68 :: a1
          -> MenuItems a0
          -> IO (IDispatch ())
getItem68 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getNewEnum80 :: MenuItems a0
             -> IO (IUnknown ())
getNewEnum80 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface MenuItem
-- 
-- --------------------------------------------------
data MenuItem_ a = MenuItem__ 
type MenuItem a = IDispatch (MenuItem_ a)
iidMenuItem :: IID (MenuItem ())
iidMenuItem = mkIID "{00020868-0000-0000-C000-000000000046}"

queryInterface29 :: (Variant a1)
                 => GUID
                 -> MenuItem a0
                 -> IO a1
queryInterface29 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef29 :: MenuItem a0
         -> IO Word32
addRef29 =
  function1 "AddRef"
            []
            outWord32

release29 :: MenuItem a0
          -> IO Word32
release29 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount29 :: MenuItem a0
                   -> IO Word32
getTypeInfoCount29 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo29 :: (Variant a1)
              => Word32
              -> Word32
              -> MenuItem a0
              -> IO a1
getTypeInfo29 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames29 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> MenuItem a0
                -> IO Int32
getIDsOfNames29 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke29 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> MenuItem a0
         -> IO (a1, a2, Word32)
invoke29 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication297 :: (Variant a1)
                  => MenuItem a0
                  -> IO a1
getApplication297 =
  propertyGet "Application"
              []
              outVariant

getCreator297 :: MenuItem a0
              -> IO XlCreator
getCreator297 =
  propertyGet "Creator"
              []
              outEnum

getParent312 :: MenuItem a0
             -> IO (IDispatch ())
getParent312 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption43 :: MenuItem a0
             -> IO String
getCaption43 =
  propertyGet "Caption"
              []
              outString

setCaption41 :: String
             -> MenuItem a0
             -> IO ()
setCaption41 rhs =
  propertySet "Caption"
              [inString rhs]

getChecked0 :: MenuItem a0
            -> IO Bool
getChecked0 =
  propertyGet "Checked"
              []
              outBool

setChecked0 :: Bool
            -> MenuItem a0
            -> IO ()
setChecked0 rhs =
  propertySet "Checked"
              [inBool rhs]

delete137 :: MenuItem a0
          -> IO ()
delete137 =
  method0 "Delete"
          []

getEnabled49 :: MenuItem a0
             -> IO Bool
getEnabled49 =
  propertyGet "Enabled"
              []
              outBool

setEnabled49 :: Bool
             -> MenuItem a0
             -> IO ()
setEnabled49 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHelpContextID2 :: MenuItem a0
                  -> IO Int32
getHelpContextID2 =
  propertyGet "HelpContextID"
              []
              outInt32

setHelpContextID2 :: Int32
                  -> MenuItem a0
                  -> IO ()
setHelpContextID2 rhs =
  propertySet "HelpContextID"
              [inInt32 rhs]

getHelpFile2 :: MenuItem a0
             -> IO String
getHelpFile2 =
  propertyGet "HelpFile"
              []
              outString

setHelpFile2 :: String
             -> MenuItem a0
             -> IO ()
setHelpFile2 rhs =
  propertySet "HelpFile"
              [inString rhs]

getIndex45 :: MenuItem a0
           -> IO Int32
getIndex45 =
  propertyGet "Index"
              []
              outInt32

getOnAction45 :: MenuItem a0
              -> IO String
getOnAction45 =
  propertyGet "OnAction"
              []
              outString

setOnAction45 :: String
              -> MenuItem a0
              -> IO ()
setOnAction45 rhs =
  propertySet "OnAction"
              [inString rhs]

getStatusBar3 :: MenuItem a0
              -> IO String
getStatusBar3 =
  propertyGet "StatusBar"
              []
              outString

setStatusBar3 :: String
              -> MenuItem a0
              -> IO ()
setStatusBar3 rhs =
  propertySet "StatusBar"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface Charts
-- 
-- --------------------------------------------------
data Charts_ a = Charts__ 
type Charts a = IDispatch (Charts_ a)
iidCharts :: IID (Charts ())
iidCharts = mkIID "{0002086D-0000-0000-C000-000000000046}"

queryInterface30 :: (Variant a1)
                 => GUID
                 -> Charts a0
                 -> IO a1
queryInterface30 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef30 :: Charts a0
         -> IO Word32
addRef30 =
  function1 "AddRef"
            []
            outWord32

release30 :: Charts a0
          -> IO Word32
release30 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount30 :: Charts a0
                   -> IO Word32
getTypeInfoCount30 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo30 :: (Variant a1)
              => Word32
              -> Word32
              -> Charts a0
              -> IO a1
getTypeInfo30 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames30 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Charts a0
                -> IO Int32
getIDsOfNames30 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke30 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Charts a0
         -> IO (a1, a2, Word32)
invoke30 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication298 :: (Variant a1)
                  => Charts a0
                  -> IO a1
getApplication298 =
  propertyGet "Application"
              []
              outVariant

getCreator298 :: Charts a0
              -> IO XlCreator
getCreator298 =
  propertyGet "Creator"
              []
              outEnum

getParent313 :: Charts a0
             -> IO (IDispatch ())
getParent313 =
  propertyGet "Parent"
              []
              outIDispatch

add83 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => a2
      -> a3
      -> a4
      -> Charts a0
      -> IO a1
add83 before after count1 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count1
            ]
            outVariant

copy59 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Charts a0
       -> IO ()
copy59 before after =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          ]

getCount127 :: Charts a0
            -> IO Int32
getCount127 =
  propertyGet "Count"
              []
              outInt32

delete138 :: Charts a0
          -> IO ()
delete138 =
  method0 "Delete"
          []

dummy711 :: Charts a0
         -> IO ()
dummy711 =
  method0 "_Dummy7"
          []

getItem69 :: a1
          -> Charts a0
          -> IO (IDispatch ())
getItem69 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

move10 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Charts a0
       -> IO ()
move10 before after =
  method0 "Move"
          [ inVariant before
          , inVariant after
          ]

getNewEnum81 :: Charts a0
             -> IO (IUnknown ())
getNewEnum81 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut39 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Charts a0
           -> IO ()
printOut39 from to copies preview activePrinter printToFile collate =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

printPreview11 :: (Variant a1)
               => a1
               -> Charts a0
               -> IO ()
printPreview11 enableChanges =
  method0 "PrintPreview"
          [inVariant enableChanges]

select83 :: (Variant a1)
         => a1
         -> Charts a0
         -> IO ()
select83 replace3 =
  method0 "Select"
          [inVariant replace3]

getHPageBreaks6 :: Charts a0
                -> IO (HPageBreaks ())
getHPageBreaks6 =
  propertyGet "HPageBreaks"
              []
              outIDispatch

getVPageBreaks6 :: Charts a0
                -> IO (VPageBreaks ())
getVPageBreaks6 =
  propertyGet "VPageBreaks"
              []
              outIDispatch

getVisible66 :: Charts a0
             -> IO a1
getVisible66 =
  propertyGet "Visible"
              []
              outVariant

setVisible66 :: a1
             -> Charts a0
             -> IO ()
setVisible66 rhs =
  propertySet "Visible"
              [inVariant rhs]

getDefault125 :: a1
              -> Charts a0
              -> IO (IDispatch ())
getDefault125 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

printOut40 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Charts a0
           -> IO ()
printOut40 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

printOut41 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Charts a0
           -> IO ()
printOut41 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

-- --------------------------------------------------
-- 
-- dispinterface DrawingObjects
-- 
-- --------------------------------------------------
data DrawingObjects_ a = DrawingObjects__ 
type DrawingObjects a = IDispatch (DrawingObjects_ a)
iidDrawingObjects :: IID (DrawingObjects ())
iidDrawingObjects = mkIID "{0002086F-0000-0000-C000-000000000046}"

queryInterface31 :: (Variant a1)
                 => GUID
                 -> DrawingObjects a0
                 -> IO a1
queryInterface31 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef31 :: DrawingObjects a0
         -> IO Word32
addRef31 =
  function1 "AddRef"
            []
            outWord32

release31 :: DrawingObjects a0
          -> IO Word32
release31 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount31 :: DrawingObjects a0
                   -> IO Word32
getTypeInfoCount31 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo31 :: (Variant a1)
              => Word32
              -> Word32
              -> DrawingObjects a0
              -> IO a1
getTypeInfo31 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames31 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> DrawingObjects a0
                -> IO Int32
getIDsOfNames31 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke31 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> DrawingObjects a0
         -> IO (a1, a2, Word32)
invoke31 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication299 :: (Variant a1)
                  => DrawingObjects a0
                  -> IO a1
getApplication299 =
  propertyGet "Application"
              []
              outVariant

getCreator299 :: DrawingObjects a0
              -> IO XlCreator
getCreator299 =
  propertyGet "Creator"
              []
              outEnum

getParent314 :: DrawingObjects a0
             -> IO (IDispatch ())
getParent314 =
  propertyGet "Parent"
              []
              outIDispatch

dummy326 :: DrawingObjects a0
         -> IO ()
dummy326 =
  method0 "_Dummy3"
          []

bringToFront40 :: DrawingObjects a0
               -> IO a1
bringToFront40 =
  function1 "BringToFront"
            []
            outVariant

copy60 :: DrawingObjects a0
       -> IO a1
copy60 =
  function1 "Copy"
            []
            outVariant

copyPicture45 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> DrawingObjects a0
              -> IO a1
copyPicture45 appearance format0 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format0
            ]
            outVariant

cut43 :: DrawingObjects a0
      -> IO a1
cut43 =
  function1 "Cut"
            []
            outVariant

delete139 :: DrawingObjects a0
          -> IO a1
delete139 =
  function1 "Delete"
            []
            outVariant

duplicate43 :: DrawingObjects a0
            -> IO (IDispatch ())
duplicate43 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled50 :: DrawingObjects a0
             -> IO Bool
getEnabled50 =
  propertyGet "Enabled"
              []
              outBool

setEnabled50 :: Bool
             -> DrawingObjects a0
             -> IO ()
setEnabled50 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight57 :: DrawingObjects a0
            -> IO Double
getHeight57 =
  propertyGet "Height"
              []
              outDouble

setHeight52 :: Double
            -> DrawingObjects a0
            -> IO ()
setHeight52 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1223 :: DrawingObjects a0
          -> IO ()
dummy1223 =
  method0 "_Dummy12"
          []

getLeft60 :: DrawingObjects a0
          -> IO Double
getLeft60 =
  propertyGet "Left"
              []
              outDouble

setLeft55 :: Double
          -> DrawingObjects a0
          -> IO ()
setLeft55 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked49 :: DrawingObjects a0
            -> IO Bool
getLocked49 =
  propertyGet "Locked"
              []
              outBool

setLocked49 :: Bool
            -> DrawingObjects a0
            -> IO ()
setLocked49 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1521 :: DrawingObjects a0
          -> IO ()
dummy1521 =
  method0 "_Dummy15"
          []

getOnAction46 :: DrawingObjects a0
              -> IO String
getOnAction46 =
  propertyGet "OnAction"
              []
              outString

setOnAction46 :: String
              -> DrawingObjects a0
              -> IO ()
setOnAction46 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement41 :: DrawingObjects a0
               -> IO a1
getPlacement41 =
  propertyGet "Placement"
              []
              outVariant

setPlacement41 :: a1
               -> DrawingObjects a0
               -> IO ()
setPlacement41 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject41 :: DrawingObjects a0
                 -> IO Bool
getPrintObject41 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject41 :: Bool
                 -> DrawingObjects a0
                 -> IO ()
setPrintObject41 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select84 :: (Variant a2)
         => a2
         -> DrawingObjects a0
         -> IO a1
select84 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack40 :: DrawingObjects a0
             -> IO a1
sendToBack40 =
  function1 "SendToBack"
            []
            outVariant

getTop60 :: DrawingObjects a0
         -> IO Double
getTop60 =
  propertyGet "Top"
              []
              outDouble

setTop55 :: Double
         -> DrawingObjects a0
         -> IO ()
setTop55 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2221 :: DrawingObjects a0
          -> IO ()
dummy2221 =
  method0 "_Dummy22"
          []

getVisible67 :: DrawingObjects a0
             -> IO Bool
getVisible67 =
  propertyGet "Visible"
              []
              outBool

setVisible67 :: Bool
             -> DrawingObjects a0
             -> IO ()
setVisible67 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth59 :: DrawingObjects a0
           -> IO Double
getWidth59 =
  propertyGet "Width"
              []
              outDouble

setWidth54 :: Double
           -> DrawingObjects a0
           -> IO ()
setWidth54 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder39 :: DrawingObjects a0
            -> IO Int32
getZOrder39 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange41 :: DrawingObjects a0
                -> IO (ShapeRange ())
getShapeRange41 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAccelerator10 :: DrawingObjects a0
                 -> IO a1
getAccelerator10 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator10 :: a1
                 -> DrawingObjects a0
                 -> IO ()
setAccelerator10 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

dummy283 :: DrawingObjects a0
         -> IO ()
dummy283 =
  method0 "_Dummy28"
          []

getAddIndent19 :: DrawingObjects a0
               -> IO Bool
getAddIndent19 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent19 :: Bool
               -> DrawingObjects a0
               -> IO ()
setAddIndent19 rhs =
  propertySet "AddIndent"
              [inBool rhs]

addItem5 :: (Variant a3)
         => a2
         -> a3
         -> DrawingObjects a0
         -> IO a1
addItem5 text2 index1 =
  function1 "AddItem"
            [ inVariant text2
            , inVariant index1
            ]
            outVariant

getArrowHeadLength4 :: DrawingObjects a0
                    -> IO a1
getArrowHeadLength4 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength4 :: a1
                    -> DrawingObjects a0
                    -> IO ()
setArrowHeadLength4 rhs =
  propertySet "ArrowHeadLength"
              [inVariant rhs]

getArrowHeadStyle4 :: DrawingObjects a0
                   -> IO a1
getArrowHeadStyle4 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle4 :: a1
                   -> DrawingObjects a0
                   -> IO ()
setArrowHeadStyle4 rhs =
  propertySet "ArrowHeadStyle"
              [inVariant rhs]

getArrowHeadWidth4 :: DrawingObjects a0
                   -> IO a1
getArrowHeadWidth4 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth4 :: a1
                   -> DrawingObjects a0
                   -> IO ()
setArrowHeadWidth4 rhs =
  propertySet "ArrowHeadWidth"
              [inVariant rhs]

getAutoSize16 :: DrawingObjects a0
              -> IO Bool
getAutoSize16 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize16 :: Bool
              -> DrawingObjects a0
              -> IO ()
setAutoSize16 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getBorder49 :: DrawingObjects a0
            -> IO (Border ())
getBorder49 =
  propertyGet "Border"
              []
              outIUnknown

getCancelButton2 :: DrawingObjects a0
                 -> IO Bool
getCancelButton2 =
  propertyGet "CancelButton"
              []
              outBool

setCancelButton2 :: Bool
                 -> DrawingObjects a0
                 -> IO ()
setCancelButton2 rhs =
  propertySet "CancelButton"
              [inBool rhs]

getCaption44 :: DrawingObjects a0
             -> IO String
getCaption44 =
  propertyGet "Caption"
              []
              outString

setCaption42 :: String
             -> DrawingObjects a0
             -> IO ()
setCaption42 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters31 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> DrawingObjects a0
                -> IO (Characters ())
getCharacters31 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

checkSpelling33 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> DrawingObjects a0
                -> IO a1
checkSpelling33 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getDefault126 :: DrawingObjects a0
              -> IO Int32
getDefault126 =
  propertyGet "_Default"
              []
              outInt32

setDefault22 :: Int32
             -> DrawingObjects a0
             -> IO ()
setDefault22 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDefaultButton3 :: DrawingObjects a0
                  -> IO Bool
getDefaultButton3 =
  propertyGet "DefaultButton"
              []
              outBool

setDefaultButton3 :: Bool
                  -> DrawingObjects a0
                  -> IO ()
setDefaultButton3 rhs =
  propertySet "DefaultButton"
              [inBool rhs]

getDismissButton2 :: DrawingObjects a0
                  -> IO Bool
getDismissButton2 =
  propertyGet "DismissButton"
              []
              outBool

setDismissButton2 :: Bool
                  -> DrawingObjects a0
                  -> IO ()
setDismissButton2 rhs =
  propertySet "DismissButton"
              [inBool rhs]

getDisplay3DShading14 :: DrawingObjects a0
                      -> IO Bool
getDisplay3DShading14 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading14 :: Bool
                      -> DrawingObjects a0
                      -> IO ()
setDisplay3DShading14 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getDisplayVerticalScrollBar4 :: DrawingObjects a0
                             -> IO Bool
getDisplayVerticalScrollBar4 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar4 :: Bool
                             -> DrawingObjects a0
                             -> IO ()
setDisplayVerticalScrollBar4 rhs =
  propertySet "DisplayVerticalScrollBar"
              [inBool rhs]

getDropDownLines3 :: DrawingObjects a0
                  -> IO Int32
getDropDownLines3 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines3 :: Int32
                  -> DrawingObjects a0
                  -> IO ()
setDropDownLines3 rhs =
  propertySet "DropDownLines"
              [inInt32 rhs]

getFont37 :: DrawingObjects a0
          -> IO (Font ())
getFont37 =
  propertyGet "Font"
              []
              outIDispatch

dummy472 :: DrawingObjects a0
         -> IO ()
dummy472 =
  method0 "_Dummy47"
          []

getHelpButton2 :: DrawingObjects a0
               -> IO Bool
getHelpButton2 =
  propertyGet "HelpButton"
              []
              outBool

setHelpButton2 :: Bool
               -> DrawingObjects a0
               -> IO ()
setHelpButton2 rhs =
  propertySet "HelpButton"
              [inBool rhs]

getHorizontalAlignment25 :: DrawingObjects a0
                         -> IO a1
getHorizontalAlignment25 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment25 :: a1
                         -> DrawingObjects a0
                         -> IO ()
setHorizontalAlignment25 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getInputType2 :: DrawingObjects a0
              -> IO Int32
getInputType2 =
  propertyGet "InputType"
              []
              outInt32

setInputType2 :: Int32
              -> DrawingObjects a0
              -> IO ()
setInputType2 rhs =
  propertySet "InputType"
              [inInt32 rhs]

getInterior47 :: DrawingObjects a0
              -> IO (Interior ())
getInterior47 =
  propertyGet "Interior"
              []
              outIUnknown

getLargeChange3 :: DrawingObjects a0
                -> IO Int32
getLargeChange3 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange3 :: Int32
                -> DrawingObjects a0
                -> IO ()
setLargeChange3 rhs =
  propertySet "LargeChange"
              [inInt32 rhs]

getLinkedCell14 :: DrawingObjects a0
                -> IO String
getLinkedCell14 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell14 :: String
                -> DrawingObjects a0
                -> IO ()
setLinkedCell14 rhs =
  propertySet "LinkedCell"
              [inString rhs]

dummy542 :: DrawingObjects a0
         -> IO ()
dummy542 =
  method0 "_Dummy54"
          []

list1 :: (Variant a2)
      => a2
      -> DrawingObjects a0
      -> IO a1
list1 index1 =
  function1 "List"
            [inVariant index1]
            outVariant

dummy563 :: DrawingObjects a0
         -> IO ()
dummy563 =
  method0 "_Dummy56"
          []

getListFillRange6 :: DrawingObjects a0
                  -> IO String
getListFillRange6 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange6 :: String
                  -> DrawingObjects a0
                  -> IO ()
setListFillRange6 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getListIndex5 :: DrawingObjects a0
              -> IO Int32
getListIndex5 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex5 :: Int32
              -> DrawingObjects a0
              -> IO ()
setListIndex5 rhs =
  propertySet "ListIndex"
              [inInt32 rhs]

getLockedText24 :: DrawingObjects a0
                -> IO Bool
getLockedText24 =
  propertyGet "LockedText"
              []
              outBool

setLockedText24 :: Bool
                -> DrawingObjects a0
                -> IO ()
setLockedText24 rhs =
  propertySet "LockedText"
              [inBool rhs]

getMax5 :: DrawingObjects a0
        -> IO Int32
getMax5 =
  propertyGet "Max"
              []
              outInt32

setMax5 :: Int32
        -> DrawingObjects a0
        -> IO ()
setMax5 rhs =
  propertySet "Max"
              [inInt32 rhs]

getMin5 :: DrawingObjects a0
        -> IO Int32
getMin5 =
  propertyGet "Min"
              []
              outInt32

setMin5 :: Int32
        -> DrawingObjects a0
        -> IO ()
setMin5 rhs =
  propertySet "Min"
              [inInt32 rhs]

getMultiLine2 :: DrawingObjects a0
              -> IO Bool
getMultiLine2 =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine2 :: Bool
              -> DrawingObjects a0
              -> IO ()
setMultiLine2 rhs =
  propertySet "MultiLine"
              [inBool rhs]

getMultiSelect3 :: DrawingObjects a0
                -> IO Bool
getMultiSelect3 =
  propertyGet "MultiSelect"
              []
              outBool

setMultiSelect3 :: Bool
                -> DrawingObjects a0
                -> IO ()
setMultiSelect3 rhs =
  propertySet "MultiSelect"
              [inBool rhs]

getOrientation31 :: DrawingObjects a0
                 -> IO a1
getOrientation31 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation31 :: a1
                 -> DrawingObjects a0
                 -> IO ()
setOrientation31 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getPhoneticAccelerator10 :: DrawingObjects a0
                         -> IO a1
getPhoneticAccelerator10 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator10 :: a1
                         -> DrawingObjects a0
                         -> IO ()
setPhoneticAccelerator10 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

removeAllItems5 :: DrawingObjects a0
                -> IO a1
removeAllItems5 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem5 :: (Variant a2)
            => Int32
            -> a2
            -> DrawingObjects a0
            -> IO a1
removeItem5 index1 count1 =
  function1 "RemoveItem"
            [ inInt32 index1
            , inVariant count1
            ]
            outVariant

reshape2 :: (Variant a3, Variant a4)
         => Int32
         -> a2
         -> a3
         -> a4
         -> DrawingObjects a0
         -> IO a1
reshape2 vertex insert4 left top =
  function1 "Reshape"
            [ inInt32 vertex
            , inVariant insert4
            , inVariant left
            , inVariant top
            ]
            outVariant

getRoundedCorners9 :: DrawingObjects a0
                   -> IO Bool
getRoundedCorners9 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners9 :: Bool
                   -> DrawingObjects a0
                   -> IO ()
setRoundedCorners9 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

selected0 :: (Variant a2)
          => a2
          -> DrawingObjects a0
          -> IO a1
selected0 index1 =
  function1 "Selected"
            [inVariant index1]
            outVariant

getShadow31 :: DrawingObjects a0
            -> IO Bool
getShadow31 =
  propertyGet "Shadow"
              []
              outBool

setShadow28 :: Bool
            -> DrawingObjects a0
            -> IO ()
setShadow28 rhs =
  propertySet "Shadow"
              [inBool rhs]

getSmallChange5 :: DrawingObjects a0
                -> IO Int32
getSmallChange5 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange5 :: Int32
                -> DrawingObjects a0
                -> IO ()
setSmallChange5 rhs =
  propertySet "SmallChange"
              [inInt32 rhs]

getText37 :: DrawingObjects a0
          -> IO String
getText37 =
  propertyGet "Text"
              []
              outString

setText35 :: String
          -> DrawingObjects a0
          -> IO ()
setText35 rhs =
  propertySet "Text"
              [inString rhs]

ungroup6 :: DrawingObjects a0
         -> IO (IDispatch ())
ungroup6 =
  function1 "Ungroup"
            []
            outIDispatch

getValue36 :: DrawingObjects a0
           -> IO Int32
getValue36 =
  propertyGet "Value"
              []
              outInt32

setValue28 :: Int32
           -> DrawingObjects a0
           -> IO ()
setValue28 rhs =
  propertySet "Value"
              [inInt32 rhs]

getVerticalAlignment25 :: DrawingObjects a0
                       -> IO a1
getVerticalAlignment25 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment25 :: a1
                       -> DrawingObjects a0
                       -> IO ()
setVerticalAlignment25 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

vertices0 :: (Variant a2, Variant a3)
          => a2
          -> a3
          -> DrawingObjects a0
          -> IO a1
vertices0 index1 index2 =
  function1 "Vertices"
            [ inVariant index1
            , inVariant index2
            ]
            outVariant

getReadingOrder25 :: DrawingObjects a0
                  -> IO Int32
getReadingOrder25 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder25 :: Int32
                  -> DrawingObjects a0
                  -> IO ()
setReadingOrder25 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getCount128 :: DrawingObjects a0
            -> IO Int32
getCount128 =
  propertyGet "Count"
              []
              outInt32

item55 :: a1
       -> DrawingObjects a0
       -> IO (IDispatch ())
item55 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

group23 :: DrawingObjects a0
        -> IO (GroupObject ())
group23 =
  function1 "Group"
            []
            outIUnknown

linkCombo0 :: (Variant a2)
           => a2
           -> DrawingObjects a0
           -> IO a1
linkCombo0 link =
  function1 "LinkCombo"
            [inVariant link]
            outVariant

newEnum41 :: DrawingObjects a0
          -> IO (IUnknown ())
newEnum41 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface PivotCache
-- 
-- --------------------------------------------------
data PivotCache_ a = PivotCache__ 
type PivotCache a = IDispatch (PivotCache_ a)
iidPivotCache :: IID (PivotCache ())
iidPivotCache = mkIID "{0002441C-0000-0000-C000-000000000046}"

queryInterface32 :: (Variant a1)
                 => GUID
                 -> PivotCache a0
                 -> IO a1
queryInterface32 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef32 :: PivotCache a0
         -> IO Word32
addRef32 =
  function1 "AddRef"
            []
            outWord32

release32 :: PivotCache a0
          -> IO Word32
release32 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount32 :: PivotCache a0
                   -> IO Word32
getTypeInfoCount32 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo32 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotCache a0
              -> IO a1
getTypeInfo32 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames32 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotCache a0
                -> IO Int32
getIDsOfNames32 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke32 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotCache a0
         -> IO (a1, a2, Word32)
invoke32 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication300 :: (Variant a1)
                  => PivotCache a0
                  -> IO a1
getApplication300 =
  propertyGet "Application"
              []
              outVariant

getCreator300 :: PivotCache a0
              -> IO XlCreator
getCreator300 =
  propertyGet "Creator"
              []
              outEnum

getParent315 :: PivotCache a0
             -> IO (IDispatch ())
getParent315 =
  propertyGet "Parent"
              []
              outIDispatch

getBackgroundQuery3 :: PivotCache a0
                    -> IO Bool
getBackgroundQuery3 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery3 :: Bool
                    -> PivotCache a0
                    -> IO ()
setBackgroundQuery3 rhs =
  propertySet "BackgroundQuery"
              [inBool rhs]

getConnection3 :: PivotCache a0
               -> IO a1
getConnection3 =
  propertyGet "Connection"
              []
              outVariant

setConnection3 :: a1
               -> PivotCache a0
               -> IO ()
setConnection3 rhs =
  propertySet "Connection"
              [inVariant rhs]

getEnableRefresh3 :: PivotCache a0
                  -> IO Bool
getEnableRefresh3 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh3 :: Bool
                  -> PivotCache a0
                  -> IO ()
setEnableRefresh3 rhs =
  propertySet "EnableRefresh"
              [inBool rhs]

getIndex46 :: PivotCache a0
           -> IO Int32
getIndex46 =
  propertyGet "Index"
              []
              outInt32

getMemoryUsed2 :: PivotCache a0
               -> IO Int32
getMemoryUsed2 =
  propertyGet "MemoryUsed"
              []
              outInt32

getOptimizeCache0 :: PivotCache a0
                  -> IO Bool
getOptimizeCache0 =
  propertyGet "OptimizeCache"
              []
              outBool

setOptimizeCache0 :: Bool
                  -> PivotCache a0
                  -> IO ()
setOptimizeCache0 rhs =
  propertySet "OptimizeCache"
              [inBool rhs]

getRecordCount1 :: PivotCache a0
                -> IO Int32
getRecordCount1 =
  propertyGet "RecordCount"
              []
              outInt32

refresh7 :: PivotCache a0
         -> IO ()
refresh7 =
  method0 "Refresh"
          []

getRefreshDate3 :: PivotCache a0
                -> IO Int64
getRefreshDate3 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshName1 :: PivotCache a0
                -> IO String
getRefreshName1 =
  propertyGet "RefreshName"
              []
              outString

getRefreshOnFileOpen3 :: PivotCache a0
                      -> IO Bool
getRefreshOnFileOpen3 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen3 :: Bool
                      -> PivotCache a0
                      -> IO ()
setRefreshOnFileOpen3 rhs =
  propertySet "RefreshOnFileOpen"
              [inBool rhs]

getSql1 :: PivotCache a0
        -> IO a1
getSql1 =
  propertyGet "Sql"
              []
              outVariant

setSql1 :: a1
        -> PivotCache a0
        -> IO ()
setSql1 rhs =
  propertySet "Sql"
              [inVariant rhs]

getSavePassword3 :: PivotCache a0
                 -> IO Bool
getSavePassword3 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword3 :: Bool
                 -> PivotCache a0
                 -> IO ()
setSavePassword3 rhs =
  propertySet "SavePassword"
              [inBool rhs]

getSourceData2 :: PivotCache a0
               -> IO a1
getSourceData2 =
  propertyGet "SourceData"
              []
              outVariant

setSourceData3 :: a1
               -> PivotCache a0
               -> IO ()
setSourceData3 rhs =
  propertySet "SourceData"
              [inVariant rhs]

getCommandText3 :: PivotCache a0
                -> IO a1
getCommandText3 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText3 :: a1
                -> PivotCache a0
                -> IO ()
setCommandText3 rhs =
  propertySet "CommandText"
              [inVariant rhs]

getCommandType3 :: PivotCache a0
                -> IO XlCmdType
getCommandType3 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType3 :: XlCmdType
                -> PivotCache a0
                -> IO ()
setCommandType3 rhs =
  propertySet "CommandType"
              [inEnum rhs]

getQueryType1 :: PivotCache a0
              -> IO XlQueryType
getQueryType1 =
  propertyGet "QueryType"
              []
              outEnum

getMaintainConnection2 :: PivotCache a0
                       -> IO Bool
getMaintainConnection2 =
  propertyGet "MaintainConnection"
              []
              outBool

setMaintainConnection2 :: Bool
                       -> PivotCache a0
                       -> IO ()
setMaintainConnection2 rhs =
  propertySet "MaintainConnection"
              [inBool rhs]

getRefreshPeriod3 :: PivotCache a0
                  -> IO Int32
getRefreshPeriod3 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod3 :: Int32
                  -> PivotCache a0
                  -> IO ()
setRefreshPeriod3 rhs =
  propertySet "RefreshPeriod"
              [inInt32 rhs]

getRecordset1 :: PivotCache a0
              -> IO (IDispatch ())
getRecordset1 =
  propertyGet "Recordset"
              []
              outIDispatch

setRecordset1 :: IDispatch a1
              -> PivotCache a0
              -> IO ()
setRecordset1 rhs =
  propertySet "Recordset"
              [inIDispatch rhs]

resetTimer1 :: PivotCache a0
            -> IO ()
resetTimer1 =
  method0 "ResetTimer"
          []

getLocalConnection1 :: PivotCache a0
                    -> IO a1
getLocalConnection1 =
  propertyGet "LocalConnection"
              []
              outVariant

setLocalConnection1 :: a1
                    -> PivotCache a0
                    -> IO ()
setLocalConnection1 rhs =
  propertySet "LocalConnection"
              [inVariant rhs]

createPivotTable0 :: (Variant a2, Variant a3, Variant a4)
                  => a1
                  -> a2
                  -> a3
                  -> a4
                  -> PivotCache a0
                  -> IO (PivotTable ())
createPivotTable0 tableDestination tableName readData defaultVersion =
  function1 "CreatePivotTable"
            [ inVariant tableDestination
            , inVariant tableName
            , inVariant readData
            , inVariant defaultVersion
            ]
            outIUnknown

getUseLocalConnection1 :: PivotCache a0
                       -> IO Bool
getUseLocalConnection1 =
  propertyGet "UseLocalConnection"
              []
              outBool

setUseLocalConnection1 :: Bool
                       -> PivotCache a0
                       -> IO ()
setUseLocalConnection1 rhs =
  propertySet "UseLocalConnection"
              [inBool rhs]

getADOConnection1 :: PivotCache a0
                  -> IO (IDispatch ())
getADOConnection1 =
  propertyGet "ADOConnection"
              []
              outIDispatch

getIsConnected1 :: PivotCache a0
                -> IO Bool
getIsConnected1 =
  propertyGet "IsConnected"
              []
              outBool

makeConnection1 :: PivotCache a0
                -> IO ()
makeConnection1 =
  method0 "MakeConnection"
          []

getOLAP1 :: PivotCache a0
         -> IO Bool
getOLAP1 =
  propertyGet "OLAP"
              []
              outBool

getSourceType2 :: PivotCache a0
               -> IO XlPivotTableSourceType
getSourceType2 =
  propertyGet "SourceType"
              []
              outEnum

getMissingItemsLimit0 :: PivotCache a0
                      -> IO XlPivotTableMissingItems
getMissingItemsLimit0 =
  propertyGet "MissingItemsLimit"
              []
              outEnum

setMissingItemsLimit0 :: XlPivotTableMissingItems
                      -> PivotCache a0
                      -> IO ()
setMissingItemsLimit0 rhs =
  propertySet "MissingItemsLimit"
              [inEnum rhs]

getSourceConnectionFile3 :: PivotCache a0
                         -> IO String
getSourceConnectionFile3 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile3 :: String
                         -> PivotCache a0
                         -> IO ()
setSourceConnectionFile3 rhs =
  propertySet "SourceConnectionFile"
              [inString rhs]

getSourceDataFile3 :: PivotCache a0
                   -> IO String
getSourceDataFile3 =
  propertyGet "SourceDataFile"
              []
              outString

getRobustConnect3 :: PivotCache a0
                  -> IO XlRobustConnect
getRobustConnect3 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect3 :: XlRobustConnect
                  -> PivotCache a0
                  -> IO ()
setRobustConnect3 rhs =
  propertySet "RobustConnect"
              [inEnum rhs]

saveAsODC3 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> PivotCache a0
           -> IO ()
saveAsODC3 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getWorkbookConnection2 :: PivotCache a0
                       -> IO (WorkbookConnection ())
getWorkbookConnection2 =
  propertyGet "WorkbookConnection"
              []
              outIUnknown

getVersion2 :: PivotCache a0
            -> IO XlPivotTableVersionList
getVersion2 =
  propertyGet "Version"
              []
              outEnum

getUpgradeOnRefresh0 :: PivotCache a0
                     -> IO Bool
getUpgradeOnRefresh0 =
  propertyGet "UpgradeOnRefresh"
              []
              outBool

setUpgradeOnRefresh0 :: Bool
                     -> PivotCache a0
                     -> IO ()
setUpgradeOnRefresh0 rhs =
  propertySet "UpgradeOnRefresh"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface PivotCaches
-- 
-- --------------------------------------------------
data PivotCaches_ a = PivotCaches__ 
type PivotCaches a = IDispatch (PivotCaches_ a)
iidPivotCaches :: IID (PivotCaches ())
iidPivotCaches = mkIID "{0002441D-0000-0000-C000-000000000046}"

queryInterface33 :: (Variant a1)
                 => GUID
                 -> PivotCaches a0
                 -> IO a1
queryInterface33 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef33 :: PivotCaches a0
         -> IO Word32
addRef33 =
  function1 "AddRef"
            []
            outWord32

release33 :: PivotCaches a0
          -> IO Word32
release33 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount33 :: PivotCaches a0
                   -> IO Word32
getTypeInfoCount33 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo33 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotCaches a0
              -> IO a1
getTypeInfo33 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames33 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotCaches a0
                -> IO Int32
getIDsOfNames33 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke33 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotCaches a0
         -> IO (a1, a2, Word32)
invoke33 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication301 :: (Variant a1)
                  => PivotCaches a0
                  -> IO a1
getApplication301 =
  propertyGet "Application"
              []
              outVariant

getCreator301 :: PivotCaches a0
              -> IO XlCreator
getCreator301 =
  propertyGet "Creator"
              []
              outEnum

getParent316 :: PivotCaches a0
             -> IO (IDispatch ())
getParent316 =
  propertyGet "Parent"
              []
              outIDispatch

getCount129 :: PivotCaches a0
            -> IO Int32
getCount129 =
  propertyGet "Count"
              []
              outInt32

item56 :: a1
       -> PivotCaches a0
       -> IO (PivotCache ())
item56 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault127 :: a1
              -> PivotCaches a0
              -> IO (PivotCache ())
getDefault127 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

newEnum42 :: PivotCaches a0
          -> IO (IUnknown ())
newEnum42 =
  function1 "_NewEnum"
            []
            outIUnknown

add84 :: (Variant a1)
      => XlPivotTableSourceType
      -> a1
      -> PivotCaches a0
      -> IO (PivotCache ())
add84 sourceType sourceData =
  function1 "Add"
            [ inEnum sourceType
            , inVariant sourceData
            ]
            outIDispatch

create0 :: (Variant a1, Variant a2)
        => XlPivotTableSourceType
        -> a1
        -> a2
        -> PivotCaches a0
        -> IO (PivotCache ())
create0 sourceType sourceData version =
  function1 "Create"
            [ inEnum sourceType
            , inVariant sourceData
            , inVariant version
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface PivotFormula
-- 
-- --------------------------------------------------
data PivotFormula_ a = PivotFormula__ 
type PivotFormula a = IDispatch (PivotFormula_ a)
iidPivotFormula :: IID (PivotFormula ())
iidPivotFormula = mkIID "{0002441E-0000-0000-C000-000000000046}"

queryInterface34 :: (Variant a1)
                 => GUID
                 -> PivotFormula a0
                 -> IO a1
queryInterface34 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef34 :: PivotFormula a0
         -> IO Word32
addRef34 =
  function1 "AddRef"
            []
            outWord32

release34 :: PivotFormula a0
          -> IO Word32
release34 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount34 :: PivotFormula a0
                   -> IO Word32
getTypeInfoCount34 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo34 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotFormula a0
              -> IO a1
getTypeInfo34 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames34 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotFormula a0
                -> IO Int32
getIDsOfNames34 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke34 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotFormula a0
         -> IO (a1, a2, Word32)
invoke34 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication302 :: (Variant a1)
                  => PivotFormula a0
                  -> IO a1
getApplication302 =
  propertyGet "Application"
              []
              outVariant

getCreator302 :: PivotFormula a0
              -> IO XlCreator
getCreator302 =
  propertyGet "Creator"
              []
              outEnum

getParent317 :: PivotFormula a0
             -> IO (IDispatch ())
getParent317 =
  propertyGet "Parent"
              []
              outIDispatch

delete140 :: PivotFormula a0
          -> IO ()
delete140 =
  method0 "Delete"
          []

getDefault128 :: PivotFormula a0
              -> IO String
getDefault128 =
  propertyGet "_Default"
              []
              outString

setDefault23 :: String
             -> PivotFormula a0
             -> IO ()
setDefault23 rhs =
  propertySet "_Default"
              [inString rhs]

getFormula27 :: PivotFormula a0
             -> IO String
getFormula27 =
  propertyGet "Formula"
              []
              outString

setFormula22 :: String
             -> PivotFormula a0
             -> IO ()
setFormula22 rhs =
  propertySet "Formula"
              [inString rhs]

getValue37 :: PivotFormula a0
           -> IO String
getValue37 =
  propertyGet "Value"
              []
              outString

setValue29 :: String
           -> PivotFormula a0
           -> IO ()
setValue29 rhs =
  propertySet "Value"
              [inString rhs]

getIndex47 :: PivotFormula a0
           -> IO Int32
getIndex47 =
  propertyGet "Index"
              []
              outInt32

setIndex0 :: Int32
          -> PivotFormula a0
          -> IO ()
setIndex0 rhs =
  propertySet "Index"
              [inInt32 rhs]

getStandardFormula2 :: PivotFormula a0
                    -> IO String
getStandardFormula2 =
  propertyGet "StandardFormula"
              []
              outString

setStandardFormula2 :: String
                    -> PivotFormula a0
                    -> IO ()
setStandardFormula2 rhs =
  propertySet "StandardFormula"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface PivotFormulas
-- 
-- --------------------------------------------------
data PivotFormulas_ a = PivotFormulas__ 
type PivotFormulas a = IDispatch (PivotFormulas_ a)
iidPivotFormulas :: IID (PivotFormulas ())
iidPivotFormulas = mkIID "{0002441F-0000-0000-C000-000000000046}"

queryInterface35 :: (Variant a1)
                 => GUID
                 -> PivotFormulas a0
                 -> IO a1
queryInterface35 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef35 :: PivotFormulas a0
         -> IO Word32
addRef35 =
  function1 "AddRef"
            []
            outWord32

release35 :: PivotFormulas a0
          -> IO Word32
release35 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount35 :: PivotFormulas a0
                   -> IO Word32
getTypeInfoCount35 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo35 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotFormulas a0
              -> IO a1
getTypeInfo35 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames35 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotFormulas a0
                -> IO Int32
getIDsOfNames35 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke35 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotFormulas a0
         -> IO (a1, a2, Word32)
invoke35 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication303 :: (Variant a1)
                  => PivotFormulas a0
                  -> IO a1
getApplication303 =
  propertyGet "Application"
              []
              outVariant

getCreator303 :: PivotFormulas a0
              -> IO XlCreator
getCreator303 =
  propertyGet "Creator"
              []
              outEnum

getParent318 :: PivotFormulas a0
             -> IO (IDispatch ())
getParent318 =
  propertyGet "Parent"
              []
              outIDispatch

getCount130 :: PivotFormulas a0
            -> IO Int32
getCount130 =
  propertyGet "Count"
              []
              outInt32

add85 :: String
      -> PivotFormulas a0
      -> IO (PivotFormula ())
add85 formula =
  function1 "_Add"
            [inString formula]
            outIDispatch

item57 :: a1
       -> PivotFormulas a0
       -> IO (PivotFormula ())
item57 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault129 :: a1
              -> PivotFormulas a0
              -> IO (PivotFormula ())
getDefault129 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

newEnum43 :: PivotFormulas a0
          -> IO (IUnknown ())
newEnum43 =
  function1 "_NewEnum"
            []
            outIUnknown

add86 :: (Variant a1)
      => String
      -> a1
      -> PivotFormulas a0
      -> IO (PivotFormula ())
add86 formula useStandardFormula =
  function1 "Add"
            [ inString formula
            , inVariant useStandardFormula
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface PivotTable
-- 
-- --------------------------------------------------
data PivotTable_ a = PivotTable__ 
type PivotTable a = IDispatch (PivotTable_ a)
iidPivotTable :: IID (PivotTable ())
iidPivotTable = mkIID "{00020872-0000-0000-C000-000000000046}"

queryInterface36 :: (Variant a1)
                 => GUID
                 -> PivotTable a0
                 -> IO a1
queryInterface36 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef36 :: PivotTable a0
         -> IO Word32
addRef36 =
  function1 "AddRef"
            []
            outWord32

release36 :: PivotTable a0
          -> IO Word32
release36 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount36 :: PivotTable a0
                   -> IO Word32
getTypeInfoCount36 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo36 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotTable a0
              -> IO a1
getTypeInfo36 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames36 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotTable a0
                -> IO Int32
getIDsOfNames36 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke36 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotTable a0
         -> IO (a1, a2, Word32)
invoke36 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication304 :: (Variant a1)
                  => PivotTable a0
                  -> IO a1
getApplication304 =
  propertyGet "Application"
              []
              outVariant

getCreator304 :: PivotTable a0
              -> IO XlCreator
getCreator304 =
  propertyGet "Creator"
              []
              outEnum

getParent319 :: PivotTable a0
             -> IO (IDispatch ())
getParent319 =
  propertyGet "Parent"
              []
              outIDispatch

addFields1 :: (Variant a2, Variant a3, Variant a4, Variant a5)
           => a2
           -> a3
           -> a4
           -> a5
           -> PivotTable a0
           -> IO a1
addFields1 rowFields columnFields pageFields addToTable =
  function1 "AddFields"
            [ inVariant rowFields
            , inVariant columnFields
            , inVariant pageFields
            , inVariant addToTable
            ]
            outVariant

getColumnFields1 :: (Variant a1)
                 => a1
                 -> PivotTable a0
                 -> IO (IDispatch ())
getColumnFields1 index1 =
  propertyGet "ColumnFields"
              [inVariant index1]
              outIDispatch

getColumnGrand0 :: PivotTable a0
                -> IO Bool
getColumnGrand0 =
  propertyGet "ColumnGrand"
              []
              outBool

setColumnGrand0 :: Bool
                -> PivotTable a0
                -> IO ()
setColumnGrand0 rhs =
  propertySet "ColumnGrand"
              [inBool rhs]

getColumnRange0 :: PivotTable a0
                -> IO (Range ())
getColumnRange0 =
  propertyGet "ColumnRange"
              []
              outIDispatch

showPages0 :: (Variant a2)
           => a2
           -> PivotTable a0
           -> IO a1
showPages0 pageField =
  function1 "ShowPages"
            [inVariant pageField]
            outVariant

getDataBodyRange2 :: PivotTable a0
                  -> IO (Range ())
getDataBodyRange2 =
  propertyGet "DataBodyRange"
              []
              outIDispatch

getDataFields1 :: (Variant a1)
               => a1
               -> PivotTable a0
               -> IO (IDispatch ())
getDataFields1 index1 =
  propertyGet "DataFields"
              [inVariant index1]
              outIDispatch

getDataLabelRange0 :: PivotTable a0
                   -> IO (Range ())
getDataLabelRange0 =
  propertyGet "DataLabelRange"
              []
              outIDispatch

getDefault130 :: PivotTable a0
              -> IO String
getDefault130 =
  propertyGet "_Default"
              []
              outString

setDefault24 :: String
             -> PivotTable a0
             -> IO ()
setDefault24 rhs =
  propertySet "_Default"
              [inString rhs]

getHasAutoFormat1 :: PivotTable a0
                  -> IO Bool
getHasAutoFormat1 =
  propertyGet "HasAutoFormat"
              []
              outBool

setHasAutoFormat1 :: Bool
                  -> PivotTable a0
                  -> IO ()
setHasAutoFormat1 rhs =
  propertySet "HasAutoFormat"
              [inBool rhs]

getHiddenFields1 :: (Variant a1)
                 => a1
                 -> PivotTable a0
                 -> IO (IDispatch ())
getHiddenFields1 index1 =
  propertyGet "HiddenFields"
              [inVariant index1]
              outIDispatch

getInnerDetail1 :: PivotTable a0
                -> IO String
getInnerDetail1 =
  propertyGet "InnerDetail"
              []
              outString

setInnerDetail1 :: String
                -> PivotTable a0
                -> IO ()
setInnerDetail1 rhs =
  propertySet "InnerDetail"
              [inString rhs]

getName86 :: PivotTable a0
          -> IO String
getName86 =
  propertyGet "Name"
              []
              outString

setName46 :: String
          -> PivotTable a0
          -> IO ()
setName46 rhs =
  propertySet "Name"
              [inString rhs]

getPageFields1 :: (Variant a1)
               => a1
               -> PivotTable a0
               -> IO (IDispatch ())
getPageFields1 index1 =
  propertyGet "PageFields"
              [inVariant index1]
              outIDispatch

getPageRange0 :: PivotTable a0
              -> IO (Range ())
getPageRange0 =
  propertyGet "PageRange"
              []
              outIDispatch

getPageRangeCells0 :: PivotTable a0
                   -> IO (Range ())
getPageRangeCells0 =
  propertyGet "PageRangeCells"
              []
              outIDispatch

pivotFields0 :: (Variant a1)
             => a1
             -> PivotTable a0
             -> IO (IDispatch ())
pivotFields0 index1 =
  function1 "PivotFields"
            [inVariant index1]
            outIDispatch

getRefreshDate4 :: PivotTable a0
                -> IO Int64
getRefreshDate4 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshName2 :: PivotTable a0
                -> IO String
getRefreshName2 =
  propertyGet "RefreshName"
              []
              outString

refreshTable0 :: PivotTable a0
              -> IO Bool
refreshTable0 =
  function1 "RefreshTable"
            []
            outBool

getRowFields1 :: (Variant a1)
              => a1
              -> PivotTable a0
              -> IO (IDispatch ())
getRowFields1 index1 =
  propertyGet "RowFields"
              [inVariant index1]
              outIDispatch

getRowGrand0 :: PivotTable a0
             -> IO Bool
getRowGrand0 =
  propertyGet "RowGrand"
              []
              outBool

setRowGrand0 :: Bool
             -> PivotTable a0
             -> IO ()
setRowGrand0 rhs =
  propertySet "RowGrand"
              [inBool rhs]

getRowRange0 :: PivotTable a0
             -> IO (Range ())
getRowRange0 =
  propertyGet "RowRange"
              []
              outIDispatch

getSaveData1 :: PivotTable a0
             -> IO Bool
getSaveData1 =
  propertyGet "SaveData"
              []
              outBool

setSaveData1 :: Bool
             -> PivotTable a0
             -> IO ()
setSaveData1 rhs =
  propertySet "SaveData"
              [inBool rhs]

getSourceData3 :: PivotTable a0
               -> IO a1
getSourceData3 =
  propertyGet "SourceData"
              []
              outVariant

setSourceData4 :: a1
               -> PivotTable a0
               -> IO ()
setSourceData4 rhs =
  propertySet "SourceData"
              [inVariant rhs]

getTableRange10 :: PivotTable a0
                -> IO (Range ())
getTableRange10 =
  propertyGet "TableRange1"
              []
              outIDispatch

getTableRange20 :: PivotTable a0
                -> IO (Range ())
getTableRange20 =
  propertyGet "TableRange2"
              []
              outIDispatch

getValue38 :: PivotTable a0
           -> IO String
getValue38 =
  propertyGet "Value"
              []
              outString

setValue30 :: String
           -> PivotTable a0
           -> IO ()
setValue30 rhs =
  propertySet "Value"
              [inString rhs]

getVisibleFields1 :: (Variant a1)
                  => a1
                  -> PivotTable a0
                  -> IO (IDispatch ())
getVisibleFields1 index1 =
  propertyGet "VisibleFields"
              [inVariant index1]
              outIDispatch

getCacheIndex0 :: PivotTable a0
               -> IO Int32
getCacheIndex0 =
  propertyGet "CacheIndex"
              []
              outInt32

setCacheIndex0 :: Int32
               -> PivotTable a0
               -> IO ()
setCacheIndex0 rhs =
  propertySet "CacheIndex"
              [inInt32 rhs]

calculatedFields0 :: PivotTable a0
                  -> IO (CalculatedFields ())
calculatedFields0 =
  function1 "CalculatedFields"
            []
            outIUnknown

getDisplayErrorString0 :: PivotTable a0
                       -> IO Bool
getDisplayErrorString0 =
  propertyGet "DisplayErrorString"
              []
              outBool

setDisplayErrorString0 :: Bool
                       -> PivotTable a0
                       -> IO ()
setDisplayErrorString0 rhs =
  propertySet "DisplayErrorString"
              [inBool rhs]

getDisplayNullString0 :: PivotTable a0
                      -> IO Bool
getDisplayNullString0 =
  propertyGet "DisplayNullString"
              []
              outBool

setDisplayNullString0 :: Bool
                      -> PivotTable a0
                      -> IO ()
setDisplayNullString0 rhs =
  propertySet "DisplayNullString"
              [inBool rhs]

getEnableDrilldown0 :: PivotTable a0
                    -> IO Bool
getEnableDrilldown0 =
  propertyGet "EnableDrilldown"
              []
              outBool

setEnableDrilldown0 :: Bool
                    -> PivotTable a0
                    -> IO ()
setEnableDrilldown0 rhs =
  propertySet "EnableDrilldown"
              [inBool rhs]

getEnableFieldDialog0 :: PivotTable a0
                      -> IO Bool
getEnableFieldDialog0 =
  propertyGet "EnableFieldDialog"
              []
              outBool

setEnableFieldDialog0 :: Bool
                      -> PivotTable a0
                      -> IO ()
setEnableFieldDialog0 rhs =
  propertySet "EnableFieldDialog"
              [inBool rhs]

getEnableWizard0 :: PivotTable a0
                 -> IO Bool
getEnableWizard0 =
  propertyGet "EnableWizard"
              []
              outBool

setEnableWizard0 :: Bool
                 -> PivotTable a0
                 -> IO ()
setEnableWizard0 rhs =
  propertySet "EnableWizard"
              [inBool rhs]

getErrorString2 :: PivotTable a0
                -> IO String
getErrorString2 =
  propertyGet "ErrorString"
              []
              outString

setErrorString0 :: String
                -> PivotTable a0
                -> IO ()
setErrorString0 rhs =
  propertySet "ErrorString"
              [inString rhs]

getData0 :: String
         -> PivotTable a0
         -> IO Double
getData0 name =
  function1 "GetData"
            [inString name]
            outDouble

listFormulas0 :: PivotTable a0
              -> IO ()
listFormulas0 =
  method0 "ListFormulas"
          []

getManualUpdate0 :: PivotTable a0
                 -> IO Bool
getManualUpdate0 =
  propertyGet "ManualUpdate"
              []
              outBool

setManualUpdate0 :: Bool
                 -> PivotTable a0
                 -> IO ()
setManualUpdate0 rhs =
  propertySet "ManualUpdate"
              [inBool rhs]

getMergeLabels0 :: PivotTable a0
                -> IO Bool
getMergeLabels0 =
  propertyGet "MergeLabels"
              []
              outBool

setMergeLabels0 :: Bool
                -> PivotTable a0
                -> IO ()
setMergeLabels0 rhs =
  propertySet "MergeLabels"
              [inBool rhs]

getNullString0 :: PivotTable a0
               -> IO String
getNullString0 =
  propertyGet "NullString"
              []
              outString

setNullString0 :: String
               -> PivotTable a0
               -> IO ()
setNullString0 rhs =
  propertySet "NullString"
              [inString rhs]

pivotCache0 :: PivotTable a0
            -> IO (PivotCache ())
pivotCache0 =
  function1 "PivotCache"
            []
            outIDispatch

getPivotFormulas0 :: PivotTable a0
                  -> IO (PivotFormulas ())
getPivotFormulas0 =
  propertyGet "PivotFormulas"
              []
              outIDispatch

pivotTableWizard2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
                  => a1
                  -> a2
                  -> a3
                  -> a4
                  -> a5
                  -> a6
                  -> a7
                  -> a8
                  -> a9
                  -> a10
                  -> a11
                  -> a12
                  -> a13
                  -> a14
                  -> a15
                  -> a16
                  -> PivotTable a0
                  -> IO ()
pivotTableWizard2 sourceType sourceData tableDestination tableName rowGrand columnGrand saveData hasAutoFormat autoPage reserved backgroundQuery optimizeCache pageFieldOrder pageFieldWrapCount readData connection =
  method0 "PivotTableWizard"
          [ inVariant sourceType
          , inVariant sourceData
          , inVariant tableDestination
          , inVariant tableName
          , inVariant rowGrand
          , inVariant columnGrand
          , inVariant saveData
          , inVariant hasAutoFormat
          , inVariant autoPage
          , inVariant reserved
          , inVariant backgroundQuery
          , inVariant optimizeCache
          , inVariant pageFieldOrder
          , inVariant pageFieldWrapCount
          , inVariant readData
          , inVariant connection
          ]

getSubtotalHiddenPageItems0 :: PivotTable a0
                            -> IO Bool
getSubtotalHiddenPageItems0 =
  propertyGet "SubtotalHiddenPageItems"
              []
              outBool

setSubtotalHiddenPageItems0 :: Bool
                            -> PivotTable a0
                            -> IO ()
setSubtotalHiddenPageItems0 rhs =
  propertySet "SubtotalHiddenPageItems"
              [inBool rhs]

getPageFieldOrder0 :: PivotTable a0
                   -> IO Int32
getPageFieldOrder0 =
  propertyGet "PageFieldOrder"
              []
              outInt32

setPageFieldOrder0 :: Int32
                   -> PivotTable a0
                   -> IO ()
setPageFieldOrder0 rhs =
  propertySet "PageFieldOrder"
              [inInt32 rhs]

getPageFieldStyle0 :: PivotTable a0
                   -> IO String
getPageFieldStyle0 =
  propertyGet "PageFieldStyle"
              []
              outString

setPageFieldStyle0 :: String
                   -> PivotTable a0
                   -> IO ()
setPageFieldStyle0 rhs =
  propertySet "PageFieldStyle"
              [inString rhs]

getPageFieldWrapCount0 :: PivotTable a0
                       -> IO Int32
getPageFieldWrapCount0 =
  propertyGet "PageFieldWrapCount"
              []
              outInt32

setPageFieldWrapCount0 :: Int32
                       -> PivotTable a0
                       -> IO ()
setPageFieldWrapCount0 rhs =
  propertySet "PageFieldWrapCount"
              [inInt32 rhs]

getPreserveFormatting1 :: PivotTable a0
                       -> IO Bool
getPreserveFormatting1 =
  propertyGet "PreserveFormatting"
              []
              outBool

setPreserveFormatting1 :: Bool
                       -> PivotTable a0
                       -> IO ()
setPreserveFormatting1 rhs =
  propertySet "PreserveFormatting"
              [inBool rhs]

pivotSelect1 :: (Variant a1)
             => String
             -> a1
             -> PivotTable a0
             -> IO ()
pivotSelect1 name mode1 =
  method0 "_PivotSelect"
          [ inString name
          , inDefaultValue (inInt32 0) inVariant mode1
          ]

getPivotSelection0 :: PivotTable a0
                   -> IO String
getPivotSelection0 =
  propertyGet "PivotSelection"
              []
              outString

setPivotSelection0 :: String
                   -> PivotTable a0
                   -> IO ()
setPivotSelection0 rhs =
  propertySet "PivotSelection"
              [inString rhs]

getSelectionMode0 :: PivotTable a0
                  -> IO XlPTSelectionMode
getSelectionMode0 =
  propertyGet "SelectionMode"
              []
              outEnum

setSelectionMode0 :: XlPTSelectionMode
                  -> PivotTable a0
                  -> IO ()
setSelectionMode0 rhs =
  propertySet "SelectionMode"
              [inEnum rhs]

getTableStyle1 :: PivotTable a0
               -> IO String
getTableStyle1 =
  propertyGet "TableStyle"
              []
              outString

setTableStyle1 :: String
               -> PivotTable a0
               -> IO ()
setTableStyle1 rhs =
  propertySet "TableStyle"
              [inString rhs]

getTag0 :: PivotTable a0
        -> IO String
getTag0 =
  propertyGet "Tag"
              []
              outString

setTag0 :: String
        -> PivotTable a0
        -> IO ()
setTag0 rhs =
  propertySet "Tag"
              [inString rhs]

update2 :: PivotTable a0
        -> IO ()
update2 =
  method0 "Update"
          []

getVacatedStyle0 :: PivotTable a0
                 -> IO String
getVacatedStyle0 =
  propertyGet "VacatedStyle"
              []
              outString

setVacatedStyle0 :: String
                 -> PivotTable a0
                 -> IO ()
setVacatedStyle0 rhs =
  propertySet "VacatedStyle"
              [inString rhs]

format0 :: XlPivotFormatType
        -> PivotTable a0
        -> IO ()
format0 format1 =
  method0 "Format"
          [inEnum format1]

getPrintTitles0 :: PivotTable a0
                -> IO Bool
getPrintTitles0 =
  propertyGet "PrintTitles"
              []
              outBool

setPrintTitles0 :: Bool
                -> PivotTable a0
                -> IO ()
setPrintTitles0 rhs =
  propertySet "PrintTitles"
              [inBool rhs]

getCubeFields1 :: PivotTable a0
               -> IO (CubeFields ())
getCubeFields1 =
  propertyGet "CubeFields"
              []
              outIDispatch

getGrandTotalName0 :: PivotTable a0
                   -> IO String
getGrandTotalName0 =
  propertyGet "GrandTotalName"
              []
              outString

setGrandTotalName0 :: String
                   -> PivotTable a0
                   -> IO ()
setGrandTotalName0 rhs =
  propertySet "GrandTotalName"
              [inString rhs]

getSmallGrid0 :: PivotTable a0
              -> IO Bool
getSmallGrid0 =
  propertyGet "SmallGrid"
              []
              outBool

setSmallGrid0 :: Bool
              -> PivotTable a0
              -> IO ()
setSmallGrid0 rhs =
  propertySet "SmallGrid"
              [inBool rhs]

getRepeatItemsOnEachPrintedPage0 :: PivotTable a0
                                 -> IO Bool
getRepeatItemsOnEachPrintedPage0 =
  propertyGet "RepeatItemsOnEachPrintedPage"
              []
              outBool

setRepeatItemsOnEachPrintedPage0 :: Bool
                                 -> PivotTable a0
                                 -> IO ()
setRepeatItemsOnEachPrintedPage0 rhs =
  propertySet "RepeatItemsOnEachPrintedPage"
              [inBool rhs]

getTotalsAnnotation0 :: PivotTable a0
                     -> IO Bool
getTotalsAnnotation0 =
  propertyGet "TotalsAnnotation"
              []
              outBool

setTotalsAnnotation0 :: Bool
                     -> PivotTable a0
                     -> IO ()
setTotalsAnnotation0 rhs =
  propertySet "TotalsAnnotation"
              [inBool rhs]

pivotSelect2 :: (Variant a1, Variant a2)
             => String
             -> a1
             -> a2
             -> PivotTable a0
             -> IO ()
pivotSelect2 name mode1 useStandardName =
  method0 "PivotSelect"
          [ inString name
          , inDefaultValue (inInt32 0) inVariant mode1
          , inVariant useStandardName
          ]

getPivotSelectionStandard0 :: PivotTable a0
                           -> IO String
getPivotSelectionStandard0 =
  propertyGet "PivotSelectionStandard"
              []
              outString

setPivotSelectionStandard0 :: String
                           -> PivotTable a0
                           -> IO ()
setPivotSelectionStandard0 rhs =
  propertySet "PivotSelectionStandard"
              [inString rhs]

getPivotData0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> a12
              -> a13
              -> a14
              -> a15
              -> a16
              -> a17
              -> a18
              -> a19
              -> a20
              -> a21
              -> a22
              -> a23
              -> a24
              -> a25
              -> a26
              -> a27
              -> a28
              -> a29
              -> PivotTable a0
              -> IO (Range ())
getPivotData0 dataField field1 item110 field2 item210 field3 item310 field4 item410 field5 item58 field6 item60 field7 item70 field8 item80 field9 item90 field10 item100 field11 item111 field12 item120 field13 item130 field14 item140 =
  function1 "GetPivotData"
            [ inVariant dataField
            , inVariant field1
            , inVariant item110
            , inVariant field2
            , inVariant item210
            , inVariant field3
            , inVariant item310
            , inVariant field4
            , inVariant item410
            , inVariant field5
            , inVariant item58
            , inVariant field6
            , inVariant item60
            , inVariant field7
            , inVariant item70
            , inVariant field8
            , inVariant item80
            , inVariant field9
            , inVariant item90
            , inVariant field10
            , inVariant item100
            , inVariant field11
            , inVariant item111
            , inVariant field12
            , inVariant item120
            , inVariant field13
            , inVariant item130
            , inVariant field14
            , inVariant item140
            ]
            outIDispatch

getDataPivotField0 :: PivotTable a0
                   -> IO (PivotField ())
getDataPivotField0 =
  propertyGet "DataPivotField"
              []
              outIUnknown

getEnableDataValueEditing0 :: PivotTable a0
                           -> IO Bool
getEnableDataValueEditing0 =
  propertyGet "EnableDataValueEditing"
              []
              outBool

setEnableDataValueEditing0 :: Bool
                           -> PivotTable a0
                           -> IO ()
setEnableDataValueEditing0 rhs =
  propertySet "EnableDataValueEditing"
              [inBool rhs]

addDataField0 :: (Variant a2, Variant a3)
              => IDispatch a1
              -> a2
              -> a3
              -> PivotTable a0
              -> IO (PivotField ())
addDataField0 field caption function =
  function1 "AddDataField"
            [ inIDispatch field
            , inVariant caption
            , inVariant function
            ]
            outIUnknown

getMDX2 :: PivotTable a0
        -> IO String
getMDX2 =
  propertyGet "MDX"
              []
              outString

getViewCalculatedMembers0 :: PivotTable a0
                          -> IO Bool
getViewCalculatedMembers0 =
  propertyGet "ViewCalculatedMembers"
              []
              outBool

setViewCalculatedMembers0 :: Bool
                          -> PivotTable a0
                          -> IO ()
setViewCalculatedMembers0 rhs =
  propertySet "ViewCalculatedMembers"
              [inBool rhs]

getCalculatedMembers0 :: PivotTable a0
                      -> IO (CalculatedMembers ())
getCalculatedMembers0 =
  propertyGet "CalculatedMembers"
              []
              outIUnknown

getDisplayImmediateItems0 :: PivotTable a0
                          -> IO Bool
getDisplayImmediateItems0 =
  propertyGet "DisplayImmediateItems"
              []
              outBool

setDisplayImmediateItems0 :: Bool
                          -> PivotTable a0
                          -> IO ()
setDisplayImmediateItems0 rhs =
  propertySet "DisplayImmediateItems"
              [inBool rhs]

dummy1522 :: (Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
          => a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> a19
          -> a20
          -> a21
          -> a22
          -> a23
          -> a24
          -> a25
          -> a26
          -> a27
          -> a28
          -> a29
          -> a30
          -> a31
          -> PivotTable a0
          -> IO a1
dummy1522 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Dummy15"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outVariant

getEnableFieldList0 :: PivotTable a0
                    -> IO Bool
getEnableFieldList0 =
  propertyGet "EnableFieldList"
              []
              outBool

setEnableFieldList0 :: Bool
                    -> PivotTable a0
                    -> IO ()
setEnableFieldList0 rhs =
  propertySet "EnableFieldList"
              [inBool rhs]

getVisualTotals0 :: PivotTable a0
                 -> IO Bool
getVisualTotals0 =
  propertyGet "VisualTotals"
              []
              outBool

setVisualTotals0 :: Bool
                 -> PivotTable a0
                 -> IO ()
setVisualTotals0 rhs =
  propertySet "VisualTotals"
              [inBool rhs]

getShowPageMultipleItemLabel0 :: PivotTable a0
                              -> IO Bool
getShowPageMultipleItemLabel0 =
  propertyGet "ShowPageMultipleItemLabel"
              []
              outBool

setShowPageMultipleItemLabel0 :: Bool
                              -> PivotTable a0
                              -> IO ()
setShowPageMultipleItemLabel0 rhs =
  propertySet "ShowPageMultipleItemLabel"
              [inBool rhs]

getVersion3 :: PivotTable a0
            -> IO XlPivotTableVersionList
getVersion3 =
  propertyGet "Version"
              []
              outEnum

createCubeFile0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
                => String
                -> a1
                -> a2
                -> a3
                -> a4
                -> PivotTable a0
                -> IO String
createCubeFile0 file measures levels members properties =
  function1 "CreateCubeFile"
            [ inString file
            , inVariant measures
            , inVariant levels
            , inVariant members
            , inVariant properties
            ]
            outString

getDisplayEmptyRow0 :: PivotTable a0
                    -> IO Bool
getDisplayEmptyRow0 =
  propertyGet "DisplayEmptyRow"
              []
              outBool

setDisplayEmptyRow0 :: Bool
                    -> PivotTable a0
                    -> IO ()
setDisplayEmptyRow0 rhs =
  propertySet "DisplayEmptyRow"
              [inBool rhs]

getDisplayEmptyColumn0 :: PivotTable a0
                       -> IO Bool
getDisplayEmptyColumn0 =
  propertyGet "DisplayEmptyColumn"
              []
              outBool

setDisplayEmptyColumn0 :: Bool
                       -> PivotTable a0
                       -> IO ()
setDisplayEmptyColumn0 rhs =
  propertySet "DisplayEmptyColumn"
              [inBool rhs]

getShowCellBackgroundFromOLAP0 :: PivotTable a0
                               -> IO Bool
getShowCellBackgroundFromOLAP0 =
  propertyGet "ShowCellBackgroundFromOLAP"
              []
              outBool

setShowCellBackgroundFromOLAP0 :: Bool
                               -> PivotTable a0
                               -> IO ()
setShowCellBackgroundFromOLAP0 rhs =
  propertySet "ShowCellBackgroundFromOLAP"
              [inBool rhs]

getPivotColumnAxis0 :: PivotTable a0
                    -> IO (PivotAxis ())
getPivotColumnAxis0 =
  propertyGet "PivotColumnAxis"
              []
              outIUnknown

getPivotRowAxis0 :: PivotTable a0
                 -> IO (PivotAxis ())
getPivotRowAxis0 =
  propertyGet "PivotRowAxis"
              []
              outIUnknown

getShowDrillIndicators0 :: PivotTable a0
                        -> IO Bool
getShowDrillIndicators0 =
  propertyGet "ShowDrillIndicators"
              []
              outBool

setShowDrillIndicators0 :: Bool
                        -> PivotTable a0
                        -> IO ()
setShowDrillIndicators0 rhs =
  propertySet "ShowDrillIndicators"
              [inBool rhs]

getPrintDrillIndicators0 :: PivotTable a0
                         -> IO Bool
getPrintDrillIndicators0 =
  propertyGet "PrintDrillIndicators"
              []
              outBool

setPrintDrillIndicators0 :: Bool
                         -> PivotTable a0
                         -> IO ()
setPrintDrillIndicators0 rhs =
  propertySet "PrintDrillIndicators"
              [inBool rhs]

getDisplayMemberPropertyTooltips0 :: PivotTable a0
                                  -> IO Bool
getDisplayMemberPropertyTooltips0 =
  propertyGet "DisplayMemberPropertyTooltips"
              []
              outBool

setDisplayMemberPropertyTooltips0 :: Bool
                                  -> PivotTable a0
                                  -> IO ()
setDisplayMemberPropertyTooltips0 rhs =
  propertySet "DisplayMemberPropertyTooltips"
              [inBool rhs]

getDisplayContextTooltips0 :: PivotTable a0
                           -> IO Bool
getDisplayContextTooltips0 =
  propertyGet "DisplayContextTooltips"
              []
              outBool

setDisplayContextTooltips0 :: Bool
                           -> PivotTable a0
                           -> IO ()
setDisplayContextTooltips0 rhs =
  propertySet "DisplayContextTooltips"
              [inBool rhs]

clearTable0 :: PivotTable a0
            -> IO ()
clearTable0 =
  method0 "ClearTable"
          []

getCompactRowIndent0 :: PivotTable a0
                     -> IO Int32
getCompactRowIndent0 =
  propertyGet "CompactRowIndent"
              []
              outInt32

setCompactRowIndent0 :: Int32
                     -> PivotTable a0
                     -> IO ()
setCompactRowIndent0 rhs =
  propertySet "CompactRowIndent"
              [inInt32 rhs]

getLayoutRowDefault0 :: PivotTable a0
                     -> IO XlLayoutRowType
getLayoutRowDefault0 =
  propertyGet "LayoutRowDefault"
              []
              outEnum

setLayoutRowDefault0 :: XlLayoutRowType
                     -> PivotTable a0
                     -> IO ()
setLayoutRowDefault0 rhs =
  propertySet "LayoutRowDefault"
              [inEnum rhs]

getDisplayFieldCaptions0 :: PivotTable a0
                         -> IO Bool
getDisplayFieldCaptions0 =
  propertyGet "DisplayFieldCaptions"
              []
              outBool

setDisplayFieldCaptions0 :: Bool
                         -> PivotTable a0
                         -> IO ()
setDisplayFieldCaptions0 rhs =
  propertySet "DisplayFieldCaptions"
              [inBool rhs]

rowAxisLayout0 :: XlLayoutRowType
               -> PivotTable a0
               -> IO ()
rowAxisLayout0 rowLayout =
  method0 "RowAxisLayout"
          [inEnum rowLayout]

subtotalLocation0 :: XlSubtototalLocationType
                  -> PivotTable a0
                  -> IO ()
subtotalLocation0 location0 =
  method0 "SubtotalLocation"
          [inEnum location0]

getActiveFilters0 :: PivotTable a0
                  -> IO (PivotFilters ())
getActiveFilters0 =
  propertyGet "ActiveFilters"
              []
              outIUnknown

getInGridDropZones0 :: PivotTable a0
                    -> IO Bool
getInGridDropZones0 =
  propertyGet "InGridDropZones"
              []
              outBool

setInGridDropZones0 :: Bool
                    -> PivotTable a0
                    -> IO ()
setInGridDropZones0 rhs =
  propertySet "InGridDropZones"
              [inBool rhs]

clearAllFilters1 :: PivotTable a0
                 -> IO ()
clearAllFilters1 =
  method0 "ClearAllFilters"
          []

getTableStyle20 :: PivotTable a0
                -> IO a1
getTableStyle20 =
  propertyGet "TableStyle2"
              []
              outVariant

setTableStyle20 :: a1
                -> PivotTable a0
                -> IO ()
setTableStyle20 rhs =
  propertySet "TableStyle2"
              [inVariant rhs]

getShowTableStyleLastColumn1 :: PivotTable a0
                             -> IO Bool
getShowTableStyleLastColumn1 =
  propertyGet "ShowTableStyleLastColumn"
              []
              outBool

setShowTableStyleLastColumn1 :: Bool
                             -> PivotTable a0
                             -> IO ()
setShowTableStyleLastColumn1 rhs =
  propertySet "ShowTableStyleLastColumn"
              [inBool rhs]

getShowTableStyleRowStripes1 :: PivotTable a0
                             -> IO Bool
getShowTableStyleRowStripes1 =
  propertyGet "ShowTableStyleRowStripes"
              []
              outBool

setShowTableStyleRowStripes1 :: Bool
                             -> PivotTable a0
                             -> IO ()
setShowTableStyleRowStripes1 rhs =
  propertySet "ShowTableStyleRowStripes"
              [inBool rhs]

getShowTableStyleColumnStripes1 :: PivotTable a0
                                -> IO Bool
getShowTableStyleColumnStripes1 =
  propertyGet "ShowTableStyleColumnStripes"
              []
              outBool

setShowTableStyleColumnStripes1 :: Bool
                                -> PivotTable a0
                                -> IO ()
setShowTableStyleColumnStripes1 rhs =
  propertySet "ShowTableStyleColumnStripes"
              [inBool rhs]

getShowTableStyleRowHeaders0 :: PivotTable a0
                             -> IO Bool
getShowTableStyleRowHeaders0 =
  propertyGet "ShowTableStyleRowHeaders"
              []
              outBool

setShowTableStyleRowHeaders0 :: Bool
                             -> PivotTable a0
                             -> IO ()
setShowTableStyleRowHeaders0 rhs =
  propertySet "ShowTableStyleRowHeaders"
              [inBool rhs]

getShowTableStyleColumnHeaders0 :: PivotTable a0
                                -> IO Bool
getShowTableStyleColumnHeaders0 =
  propertyGet "ShowTableStyleColumnHeaders"
              []
              outBool

setShowTableStyleColumnHeaders0 :: Bool
                                -> PivotTable a0
                                -> IO ()
setShowTableStyleColumnHeaders0 rhs =
  propertySet "ShowTableStyleColumnHeaders"
              [inBool rhs]

convertToFormulas0 :: Bool
                   -> PivotTable a0
                   -> IO ()
convertToFormulas0 convertFilters =
  method0 "ConvertToFormulas"
          [inBool convertFilters]

getAllowMultipleFilters0 :: PivotTable a0
                         -> IO Bool
getAllowMultipleFilters0 =
  propertyGet "AllowMultipleFilters"
              []
              outBool

setAllowMultipleFilters0 :: Bool
                         -> PivotTable a0
                         -> IO ()
setAllowMultipleFilters0 rhs =
  propertySet "AllowMultipleFilters"
              [inBool rhs]

getCompactLayoutRowHeader0 :: PivotTable a0
                           -> IO String
getCompactLayoutRowHeader0 =
  propertyGet "CompactLayoutRowHeader"
              []
              outString

setCompactLayoutRowHeader0 :: String
                           -> PivotTable a0
                           -> IO ()
setCompactLayoutRowHeader0 rhs =
  propertySet "CompactLayoutRowHeader"
              [inString rhs]

getCompactLayoutColumnHeader0 :: PivotTable a0
                              -> IO String
getCompactLayoutColumnHeader0 =
  propertyGet "CompactLayoutColumnHeader"
              []
              outString

setCompactLayoutColumnHeader0 :: String
                              -> PivotTable a0
                              -> IO ()
setCompactLayoutColumnHeader0 rhs =
  propertySet "CompactLayoutColumnHeader"
              [inString rhs]

getFieldListSortAscending0 :: PivotTable a0
                           -> IO Bool
getFieldListSortAscending0 =
  propertyGet "FieldListSortAscending"
              []
              outBool

setFieldListSortAscending0 :: Bool
                           -> PivotTable a0
                           -> IO ()
setFieldListSortAscending0 rhs =
  propertySet "FieldListSortAscending"
              [inBool rhs]

getSortUsingCustomLists0 :: PivotTable a0
                         -> IO Bool
getSortUsingCustomLists0 =
  propertyGet "SortUsingCustomLists"
              []
              outBool

setSortUsingCustomLists0 :: Bool
                         -> PivotTable a0
                         -> IO ()
setSortUsingCustomLists0 rhs =
  propertySet "SortUsingCustomLists"
              [inBool rhs]

changeConnection0 :: WorkbookConnection a1
                  -> PivotTable a0
                  -> IO ()
changeConnection0 conn =
  method0 "ChangeConnection"
          [inIUnknown conn]

changePivotCache0 :: a1
                  -> PivotTable a0
                  -> IO ()
changePivotCache0 pivotCache1 =
  method0 "ChangePivotCache"
          [inVariant pivotCache1]

getLocation4 :: PivotTable a0
             -> IO String
getLocation4 =
  propertyGet "Location"
              []
              outString

setLocation4 :: String
             -> PivotTable a0
             -> IO ()
setLocation4 rhs =
  propertySet "Location"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface PivotTables
-- 
-- --------------------------------------------------
data PivotTables_ a = PivotTables__ 
type PivotTables a = IDispatch (PivotTables_ a)
iidPivotTables :: IID (PivotTables ())
iidPivotTables = mkIID "{00020873-0000-0000-C000-000000000046}"

queryInterface37 :: (Variant a1)
                 => GUID
                 -> PivotTables a0
                 -> IO a1
queryInterface37 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef37 :: PivotTables a0
         -> IO Word32
addRef37 =
  function1 "AddRef"
            []
            outWord32

release37 :: PivotTables a0
          -> IO Word32
release37 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount37 :: PivotTables a0
                   -> IO Word32
getTypeInfoCount37 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo37 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotTables a0
              -> IO a1
getTypeInfo37 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames37 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotTables a0
                -> IO Int32
getIDsOfNames37 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke37 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotTables a0
         -> IO (a1, a2, Word32)
invoke37 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication305 :: (Variant a1)
                  => PivotTables a0
                  -> IO a1
getApplication305 =
  propertyGet "Application"
              []
              outVariant

getCreator305 :: PivotTables a0
              -> IO XlCreator
getCreator305 =
  propertyGet "Creator"
              []
              outEnum

getParent320 :: PivotTables a0
             -> IO (IDispatch ())
getParent320 =
  propertyGet "Parent"
              []
              outIDispatch

getCount131 :: PivotTables a0
            -> IO Int32
getCount131 =
  propertyGet "Count"
              []
              outInt32

item58 :: a1
       -> PivotTables a0
       -> IO (PivotTable ())
item58 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum44 :: PivotTables a0
          -> IO (IUnknown ())
newEnum44 =
  function1 "_NewEnum"
            []
            outIUnknown

add87 :: (Variant a3, Variant a4, Variant a5)
      => PivotCache a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> PivotTables a0
      -> IO (PivotTable ())
add87 pivotCache1 tableDestination tableName readData defaultVersion =
  function1 "Add"
            [ inIDispatch pivotCache1
            , inVariant tableDestination
            , inVariant tableName
            , inVariant readData
            , inVariant defaultVersion
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface PivotField
-- 
-- --------------------------------------------------
data PivotField_ a = PivotField__ 
type PivotField a = IDispatch (PivotField_ a)
iidPivotField :: IID (PivotField ())
iidPivotField = mkIID "{00020874-0000-0000-C000-000000000046}"

queryInterface38 :: (Variant a1)
                 => GUID
                 -> PivotField a0
                 -> IO a1
queryInterface38 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef38 :: PivotField a0
         -> IO Word32
addRef38 =
  function1 "AddRef"
            []
            outWord32

release38 :: PivotField a0
          -> IO Word32
release38 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount38 :: PivotField a0
                   -> IO Word32
getTypeInfoCount38 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo38 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotField a0
              -> IO a1
getTypeInfo38 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames38 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotField a0
                -> IO Int32
getIDsOfNames38 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke38 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotField a0
         -> IO (a1, a2, Word32)
invoke38 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication306 :: (Variant a1)
                  => PivotField a0
                  -> IO a1
getApplication306 =
  propertyGet "Application"
              []
              outVariant

getCreator306 :: PivotField a0
              -> IO XlCreator
getCreator306 =
  propertyGet "Creator"
              []
              outEnum

getParent321 :: PivotField a0
             -> IO (IDispatch ())
getParent321 =
  propertyGet "Parent"
              []
              outIDispatch

getCalculation1 :: PivotField a0
                -> IO XlPivotFieldCalculation
getCalculation1 =
  propertyGet "Calculation"
              []
              outEnum

setCalculation1 :: XlPivotFieldCalculation
                -> PivotField a0
                -> IO ()
setCalculation1 rhs =
  propertySet "Calculation"
              [inEnum rhs]

getChildField0 :: PivotField a0
               -> IO (PivotField ())
getChildField0 =
  propertyGet "ChildField"
              []
              outIDispatch

getChildItems1 :: (Variant a2)
               => a2
               -> PivotField a0
               -> IO a1
getChildItems1 index1 =
  propertyGet "ChildItems"
              [inVariant index1]
              outVariant

getCurrentPage0 :: PivotField a0
                -> IO a1
getCurrentPage0 =
  propertyGet "CurrentPage"
              []
              outVariant

setCurrentPage0 :: a1
                -> PivotField a0
                -> IO ()
setCurrentPage0 rhs =
  propertySet "CurrentPage"
              [inVariant rhs]

getDataRange1 :: PivotField a0
              -> IO (Range ())
getDataRange1 =
  propertyGet "DataRange"
              []
              outIDispatch

getDataType1 :: PivotField a0
             -> IO XlPivotFieldDataType
getDataType1 =
  propertyGet "DataType"
              []
              outEnum

getDefault131 :: PivotField a0
              -> IO String
getDefault131 =
  propertyGet "_Default"
              []
              outString

setDefault25 :: String
             -> PivotField a0
             -> IO ()
setDefault25 rhs =
  propertySet "_Default"
              [inString rhs]

getFunction0 :: PivotField a0
             -> IO XlConsolidationFunction
getFunction0 =
  propertyGet "Function"
              []
              outEnum

setFunction0 :: XlConsolidationFunction
             -> PivotField a0
             -> IO ()
setFunction0 rhs =
  propertySet "Function"
              [inEnum rhs]

getGroupLevel0 :: PivotField a0
               -> IO a1
getGroupLevel0 =
  propertyGet "GroupLevel"
              []
              outVariant

getHiddenItems0 :: (Variant a2)
                => a2
                -> PivotField a0
                -> IO a1
getHiddenItems0 index1 =
  propertyGet "HiddenItems"
              [inVariant index1]
              outVariant

getLabelRange1 :: PivotField a0
               -> IO (Range ())
getLabelRange1 =
  propertyGet "LabelRange"
              []
              outIDispatch

getName87 :: PivotField a0
          -> IO String
getName87 =
  propertyGet "Name"
              []
              outString

setName47 :: String
          -> PivotField a0
          -> IO ()
setName47 rhs =
  propertySet "Name"
              [inString rhs]

getNumberFormat12 :: PivotField a0
                  -> IO String
getNumberFormat12 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat12 :: String
                  -> PivotField a0
                  -> IO ()
setNumberFormat12 rhs =
  propertySet "NumberFormat"
              [inString rhs]

getOrientation32 :: PivotField a0
                 -> IO XlPivotFieldOrientation
getOrientation32 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation32 :: XlPivotFieldOrientation
                 -> PivotField a0
                 -> IO ()
setOrientation32 rhs =
  propertySet "Orientation"
              [inEnum rhs]

getShowAllItems0 :: PivotField a0
                 -> IO Bool
getShowAllItems0 =
  propertyGet "ShowAllItems"
              []
              outBool

setShowAllItems0 :: Bool
                 -> PivotField a0
                 -> IO ()
setShowAllItems0 rhs =
  propertySet "ShowAllItems"
              [inBool rhs]

getParentField0 :: PivotField a0
                -> IO (PivotField ())
getParentField0 =
  propertyGet "ParentField"
              []
              outIDispatch

getParentItems0 :: (Variant a2)
                => a2
                -> PivotField a0
                -> IO a1
getParentItems0 index1 =
  propertyGet "ParentItems"
              [inVariant index1]
              outVariant

pivotItems0 :: (Variant a2)
            => a2
            -> PivotField a0
            -> IO a1
pivotItems0 index1 =
  function1 "PivotItems"
            [inVariant index1]
            outVariant

getPosition13 :: PivotField a0
              -> IO a1
getPosition13 =
  propertyGet "Position"
              []
              outVariant

setPosition13 :: a1
              -> PivotField a0
              -> IO ()
setPosition13 rhs =
  propertySet "Position"
              [inVariant rhs]

getSourceName4 :: PivotField a0
               -> IO String
getSourceName4 =
  propertyGet "SourceName"
              []
              outString

getSubtotals0 :: (Variant a2)
              => a2
              -> PivotField a0
              -> IO a1
getSubtotals0 index1 =
  propertyGet "Subtotals"
              [inVariant index1]
              outVariant

setSubtotals0 :: (Variant a1)
              => a1
              -> a2
              -> PivotField a0
              -> IO ()
setSubtotals0 index1 rhs =
  propertySet "Subtotals"
              [ inVariant index1
              , inVariant rhs
              ]

getBaseField0 :: PivotField a0
              -> IO a1
getBaseField0 =
  propertyGet "BaseField"
              []
              outVariant

setBaseField0 :: a1
              -> PivotField a0
              -> IO ()
setBaseField0 rhs =
  propertySet "BaseField"
              [inVariant rhs]

getBaseItem0 :: PivotField a0
             -> IO a1
getBaseItem0 =
  propertyGet "BaseItem"
              []
              outVariant

setBaseItem0 :: a1
             -> PivotField a0
             -> IO ()
setBaseItem0 rhs =
  propertySet "BaseItem"
              [inVariant rhs]

getTotalLevels0 :: PivotField a0
                -> IO a1
getTotalLevels0 =
  propertyGet "TotalLevels"
              []
              outVariant

getValue39 :: PivotField a0
           -> IO String
getValue39 =
  propertyGet "Value"
              []
              outString

setValue31 :: String
           -> PivotField a0
           -> IO ()
setValue31 rhs =
  propertySet "Value"
              [inString rhs]

getVisibleItems0 :: (Variant a2)
                 => a2
                 -> PivotField a0
                 -> IO a1
getVisibleItems0 index1 =
  propertyGet "VisibleItems"
              [inVariant index1]
              outVariant

calculatedItems0 :: PivotField a0
                 -> IO (CalculatedItems ())
calculatedItems0 =
  function1 "CalculatedItems"
            []
            outIUnknown

delete141 :: PivotField a0
          -> IO ()
delete141 =
  method0 "Delete"
          []

getDragToColumn1 :: PivotField a0
                 -> IO Bool
getDragToColumn1 =
  propertyGet "DragToColumn"
              []
              outBool

setDragToColumn1 :: Bool
                 -> PivotField a0
                 -> IO ()
setDragToColumn1 rhs =
  propertySet "DragToColumn"
              [inBool rhs]

getDragToHide1 :: PivotField a0
               -> IO Bool
getDragToHide1 =
  propertyGet "DragToHide"
              []
              outBool

setDragToHide1 :: Bool
               -> PivotField a0
               -> IO ()
setDragToHide1 rhs =
  propertySet "DragToHide"
              [inBool rhs]

getDragToPage1 :: PivotField a0
               -> IO Bool
getDragToPage1 =
  propertyGet "DragToPage"
              []
              outBool

setDragToPage1 :: Bool
               -> PivotField a0
               -> IO ()
setDragToPage1 rhs =
  propertySet "DragToPage"
              [inBool rhs]

getDragToRow1 :: PivotField a0
              -> IO Bool
getDragToRow1 =
  propertyGet "DragToRow"
              []
              outBool

setDragToRow1 :: Bool
              -> PivotField a0
              -> IO ()
setDragToRow1 rhs =
  propertySet "DragToRow"
              [inBool rhs]

getDragToData1 :: PivotField a0
               -> IO Bool
getDragToData1 =
  propertyGet "DragToData"
              []
              outBool

setDragToData1 :: Bool
               -> PivotField a0
               -> IO ()
setDragToData1 rhs =
  propertySet "DragToData"
              [inBool rhs]

getFormula28 :: PivotField a0
             -> IO String
getFormula28 =
  propertyGet "Formula"
              []
              outString

setFormula23 :: String
             -> PivotField a0
             -> IO ()
setFormula23 rhs =
  propertySet "Formula"
              [inString rhs]

getIsCalculated1 :: PivotField a0
                 -> IO Bool
getIsCalculated1 =
  propertyGet "IsCalculated"
              []
              outBool

getMemoryUsed3 :: PivotField a0
               -> IO Int32
getMemoryUsed3 =
  propertyGet "MemoryUsed"
              []
              outInt32

getServerBased0 :: PivotField a0
                -> IO Bool
getServerBased0 =
  propertyGet "ServerBased"
              []
              outBool

setServerBased0 :: Bool
                -> PivotField a0
                -> IO ()
setServerBased0 rhs =
  propertySet "ServerBased"
              [inBool rhs]

autoSort1 :: Int32
          -> String
          -> PivotField a0
          -> IO ()
autoSort1 order field =
  method0 "_AutoSort"
          [ inInt32 order
          , inString field
          ]

autoShow0 :: Int32
          -> Int32
          -> Int32
          -> String
          -> PivotField a0
          -> IO ()
autoShow0 type0 range count1 field =
  method0 "AutoShow"
          [ inInt32 type0
          , inInt32 range
          , inInt32 count1
          , inString field
          ]

getAutoSortOrder0 :: PivotField a0
                  -> IO Int32
getAutoSortOrder0 =
  propertyGet "AutoSortOrder"
              []
              outInt32

getAutoSortField0 :: PivotField a0
                  -> IO String
getAutoSortField0 =
  propertyGet "AutoSortField"
              []
              outString

getAutoShowType0 :: PivotField a0
                 -> IO Int32
getAutoShowType0 =
  propertyGet "AutoShowType"
              []
              outInt32

getAutoShowRange0 :: PivotField a0
                  -> IO Int32
getAutoShowRange0 =
  propertyGet "AutoShowRange"
              []
              outInt32

getAutoShowCount0 :: PivotField a0
                  -> IO Int32
getAutoShowCount0 =
  propertyGet "AutoShowCount"
              []
              outInt32

getAutoShowField0 :: PivotField a0
                  -> IO String
getAutoShowField0 =
  propertyGet "AutoShowField"
              []
              outString

getLayoutBlankLine0 :: PivotField a0
                    -> IO Bool
getLayoutBlankLine0 =
  propertyGet "LayoutBlankLine"
              []
              outBool

setLayoutBlankLine0 :: Bool
                    -> PivotField a0
                    -> IO ()
setLayoutBlankLine0 rhs =
  propertySet "LayoutBlankLine"
              [inBool rhs]

getLayoutSubtotalLocation1 :: PivotField a0
                           -> IO XlSubtototalLocationType
getLayoutSubtotalLocation1 =
  propertyGet "LayoutSubtotalLocation"
              []
              outEnum

setLayoutSubtotalLocation1 :: XlSubtototalLocationType
                           -> PivotField a0
                           -> IO ()
setLayoutSubtotalLocation1 rhs =
  propertySet "LayoutSubtotalLocation"
              [inEnum rhs]

getLayoutPageBreak0 :: PivotField a0
                    -> IO Bool
getLayoutPageBreak0 =
  propertyGet "LayoutPageBreak"
              []
              outBool

setLayoutPageBreak0 :: Bool
                    -> PivotField a0
                    -> IO ()
setLayoutPageBreak0 rhs =
  propertySet "LayoutPageBreak"
              [inBool rhs]

getLayoutForm1 :: PivotField a0
               -> IO XlLayoutFormType
getLayoutForm1 =
  propertyGet "LayoutForm"
              []
              outEnum

setLayoutForm1 :: XlLayoutFormType
               -> PivotField a0
               -> IO ()
setLayoutForm1 rhs =
  propertySet "LayoutForm"
              [inEnum rhs]

getSubtotalName0 :: PivotField a0
                 -> IO String
getSubtotalName0 =
  propertyGet "SubtotalName"
              []
              outString

setSubtotalName0 :: String
                 -> PivotField a0
                 -> IO ()
setSubtotalName0 rhs =
  propertySet "SubtotalName"
              [inString rhs]

getCaption45 :: PivotField a0
             -> IO String
getCaption45 =
  propertyGet "Caption"
              []
              outString

setCaption43 :: String
             -> PivotField a0
             -> IO ()
setCaption43 rhs =
  propertySet "Caption"
              [inString rhs]

getDrilledDown1 :: PivotField a0
                -> IO Bool
getDrilledDown1 =
  propertyGet "DrilledDown"
              []
              outBool

setDrilledDown1 :: Bool
                -> PivotField a0
                -> IO ()
setDrilledDown1 rhs =
  propertySet "DrilledDown"
              [inBool rhs]

getCubeField0 :: PivotField a0
              -> IO (CubeField ())
getCubeField0 =
  propertyGet "CubeField"
              []
              outIDispatch

getCurrentPageName1 :: PivotField a0
                    -> IO String
getCurrentPageName1 =
  propertyGet "CurrentPageName"
              []
              outString

setCurrentPageName1 :: String
                    -> PivotField a0
                    -> IO ()
setCurrentPageName1 rhs =
  propertySet "CurrentPageName"
              [inString rhs]

getStandardFormula3 :: PivotField a0
                    -> IO String
getStandardFormula3 =
  propertyGet "StandardFormula"
              []
              outString

setStandardFormula3 :: String
                    -> PivotField a0
                    -> IO ()
setStandardFormula3 rhs =
  propertySet "StandardFormula"
              [inString rhs]

getHiddenItemsList0 :: PivotField a0
                    -> IO a1
getHiddenItemsList0 =
  propertyGet "HiddenItemsList"
              []
              outVariant

setHiddenItemsList0 :: a1
                    -> PivotField a0
                    -> IO ()
setHiddenItemsList0 rhs =
  propertySet "HiddenItemsList"
              [inVariant rhs]

getDatabaseSort0 :: PivotField a0
                 -> IO Bool
getDatabaseSort0 =
  propertyGet "DatabaseSort"
              []
              outBool

setDatabaseSort0 :: Bool
                 -> PivotField a0
                 -> IO ()
setDatabaseSort0 rhs =
  propertySet "DatabaseSort"
              [inBool rhs]

getIsMemberProperty0 :: PivotField a0
                     -> IO Bool
getIsMemberProperty0 =
  propertyGet "IsMemberProperty"
              []
              outBool

getPropertyParentField0 :: PivotField a0
                        -> IO (PivotField ())
getPropertyParentField0 =
  propertyGet "PropertyParentField"
              []
              outIDispatch

getPropertyOrder0 :: PivotField a0
                  -> IO Int32
getPropertyOrder0 =
  propertyGet "PropertyOrder"
              []
              outInt32

setPropertyOrder0 :: Int32
                  -> PivotField a0
                  -> IO ()
setPropertyOrder0 rhs =
  propertySet "PropertyOrder"
              [inInt32 rhs]

getEnableItemSelection0 :: PivotField a0
                        -> IO Bool
getEnableItemSelection0 =
  propertyGet "EnableItemSelection"
              []
              outBool

setEnableItemSelection0 :: Bool
                        -> PivotField a0
                        -> IO ()
setEnableItemSelection0 rhs =
  propertySet "EnableItemSelection"
              [inBool rhs]

getCurrentPageList0 :: PivotField a0
                    -> IO a1
getCurrentPageList0 =
  propertyGet "CurrentPageList"
              []
              outVariant

setCurrentPageList0 :: a1
                    -> PivotField a0
                    -> IO ()
setCurrentPageList0 rhs =
  propertySet "CurrentPageList"
              [inVariant rhs]

addPageItem0 :: (Variant a1)
             => String
             -> a1
             -> PivotField a0
             -> IO ()
addPageItem0 item59 clearList =
  method0 "AddPageItem"
          [ inString item59
          , inVariant clearList
          ]

getHidden4 :: PivotField a0
           -> IO Bool
getHidden4 =
  propertyGet "Hidden"
              []
              outBool

setHidden4 :: Bool
           -> PivotField a0
           -> IO ()
setHidden4 rhs =
  propertySet "Hidden"
              [inBool rhs]

drillTo1 :: String
         -> PivotField a0
         -> IO ()
drillTo1 field =
  method0 "DrillTo"
          [inString field]

getUseMemberPropertyAsCaption0 :: PivotField a0
                               -> IO Bool
getUseMemberPropertyAsCaption0 =
  propertyGet "UseMemberPropertyAsCaption"
              []
              outBool

setUseMemberPropertyAsCaption0 :: Bool
                               -> PivotField a0
                               -> IO ()
setUseMemberPropertyAsCaption0 rhs =
  propertySet "UseMemberPropertyAsCaption"
              [inBool rhs]

getMemberPropertyCaption0 :: PivotField a0
                          -> IO String
getMemberPropertyCaption0 =
  propertyGet "MemberPropertyCaption"
              []
              outString

setMemberPropertyCaption0 :: String
                          -> PivotField a0
                          -> IO ()
setMemberPropertyCaption0 rhs =
  propertySet "MemberPropertyCaption"
              [inString rhs]

getDisplayAsTooltip0 :: PivotField a0
                     -> IO Bool
getDisplayAsTooltip0 =
  propertyGet "DisplayAsTooltip"
              []
              outBool

setDisplayAsTooltip0 :: Bool
                     -> PivotField a0
                     -> IO ()
setDisplayAsTooltip0 rhs =
  propertySet "DisplayAsTooltip"
              [inBool rhs]

getDisplayInReport0 :: PivotField a0
                    -> IO Bool
getDisplayInReport0 =
  propertyGet "DisplayInReport"
              []
              outBool

setDisplayInReport0 :: Bool
                    -> PivotField a0
                    -> IO ()
setDisplayInReport0 rhs =
  propertySet "DisplayInReport"
              [inBool rhs]

getDisplayAsCaption0 :: PivotField a0
                     -> IO Bool
getDisplayAsCaption0 =
  propertyGet "DisplayAsCaption"
              []
              outBool

getLayoutCompactRow0 :: PivotField a0
                     -> IO Bool
getLayoutCompactRow0 =
  propertyGet "LayoutCompactRow"
              []
              outBool

setLayoutCompactRow0 :: Bool
                     -> PivotField a0
                     -> IO ()
setLayoutCompactRow0 rhs =
  propertySet "LayoutCompactRow"
              [inBool rhs]

getIncludeNewItemsInFilter1 :: PivotField a0
                            -> IO Bool
getIncludeNewItemsInFilter1 =
  propertyGet "IncludeNewItemsInFilter"
              []
              outBool

setIncludeNewItemsInFilter1 :: Bool
                            -> PivotField a0
                            -> IO ()
setIncludeNewItemsInFilter1 rhs =
  propertySet "IncludeNewItemsInFilter"
              [inBool rhs]

getVisibleItemsList0 :: PivotField a0
                     -> IO a1
getVisibleItemsList0 =
  propertyGet "VisibleItemsList"
              []
              outVariant

setVisibleItemsList0 :: a1
                     -> PivotField a0
                     -> IO ()
setVisibleItemsList0 rhs =
  propertySet "VisibleItemsList"
              [inVariant rhs]

getPivotFilters0 :: PivotField a0
                 -> IO (PivotFilters ())
getPivotFilters0 =
  propertyGet "PivotFilters"
              []
              outIUnknown

getAutoSortPivotLine0 :: PivotField a0
                      -> IO (PivotLine ())
getAutoSortPivotLine0 =
  propertyGet "AutoSortPivotLine"
              []
              outIUnknown

getAutoSortCustomSubtotal0 :: PivotField a0
                           -> IO Int32
getAutoSortCustomSubtotal0 =
  propertyGet "AutoSortCustomSubtotal"
              []
              outInt32

getShowingInAxis0 :: PivotField a0
                  -> IO Bool
getShowingInAxis0 =
  propertyGet "ShowingInAxis"
              []
              outBool

getEnableMultiplePageItems1 :: PivotField a0
                            -> IO Bool
getEnableMultiplePageItems1 =
  propertyGet "EnableMultiplePageItems"
              []
              outBool

setEnableMultiplePageItems1 :: Bool
                            -> PivotField a0
                            -> IO ()
setEnableMultiplePageItems1 rhs =
  propertySet "EnableMultiplePageItems"
              [inBool rhs]

getAllItemsVisible1 :: PivotField a0
                    -> IO Bool
getAllItemsVisible1 =
  propertyGet "AllItemsVisible"
              []
              outBool

clearManualFilter1 :: PivotField a0
                   -> IO ()
clearManualFilter1 =
  method0 "ClearManualFilter"
          []

clearAllFilters2 :: PivotField a0
                 -> IO ()
clearAllFilters2 =
  method0 "ClearAllFilters"
          []

clearValueFilters0 :: PivotField a0
                   -> IO ()
clearValueFilters0 =
  method0 "ClearValueFilters"
          []

clearLabelFilters0 :: PivotField a0
                   -> IO ()
clearLabelFilters0 =
  method0 "ClearLabelFilters"
          []

autoSort2 :: (Variant a1, Variant a2)
          => Int32
          -> String
          -> a1
          -> a2
          -> PivotField a0
          -> IO ()
autoSort2 order field pivotLine customSubtotal =
  method0 "AutoSort"
          [ inInt32 order
          , inString field
          , inVariant pivotLine
          , inVariant customSubtotal
          ]

getSourceCaption0 :: PivotField a0
                  -> IO String
getSourceCaption0 =
  propertyGet "SourceCaption"
              []
              outString

getShowDetail3 :: PivotField a0
               -> IO Bool
getShowDetail3 =
  propertyGet "ShowDetail"
              []
              outBool

setShowDetail3 :: Bool
               -> PivotField a0
               -> IO ()
setShowDetail3 rhs =
  propertySet "ShowDetail"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface PivotFields
-- 
-- --------------------------------------------------
data PivotFields_ a = PivotFields__ 
type PivotFields a = IDispatch (PivotFields_ a)
iidPivotFields :: IID (PivotFields ())
iidPivotFields = mkIID "{00020875-0000-0000-C000-000000000046}"

queryInterface39 :: (Variant a1)
                 => GUID
                 -> PivotFields a0
                 -> IO a1
queryInterface39 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef39 :: PivotFields a0
         -> IO Word32
addRef39 =
  function1 "AddRef"
            []
            outWord32

release39 :: PivotFields a0
          -> IO Word32
release39 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount39 :: PivotFields a0
                   -> IO Word32
getTypeInfoCount39 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo39 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotFields a0
              -> IO a1
getTypeInfo39 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames39 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotFields a0
                -> IO Int32
getIDsOfNames39 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke39 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotFields a0
         -> IO (a1, a2, Word32)
invoke39 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication307 :: (Variant a1)
                  => PivotFields a0
                  -> IO a1
getApplication307 =
  propertyGet "Application"
              []
              outVariant

getCreator307 :: PivotFields a0
              -> IO XlCreator
getCreator307 =
  propertyGet "Creator"
              []
              outEnum

getParent322 :: PivotFields a0
             -> IO (PivotTable ())
getParent322 =
  propertyGet "Parent"
              []
              outIDispatch

getCount132 :: PivotFields a0
            -> IO Int32
getCount132 =
  propertyGet "Count"
              []
              outInt32

item59 :: a1
       -> PivotFields a0
       -> IO (IDispatch ())
item59 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum45 :: PivotFields a0
          -> IO (IUnknown ())
newEnum45 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CalculatedFields
-- 
-- --------------------------------------------------
data CalculatedFields_ a = CalculatedFields__ 
type CalculatedFields a = IDispatch (CalculatedFields_ a)
iidCalculatedFields :: IID (CalculatedFields ())
iidCalculatedFields =
  mkIID "{00024420-0000-0000-C000-000000000046}"

queryInterface40 :: (Variant a1)
                 => GUID
                 -> CalculatedFields a0
                 -> IO a1
queryInterface40 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef40 :: CalculatedFields a0
         -> IO Word32
addRef40 =
  function1 "AddRef"
            []
            outWord32

release40 :: CalculatedFields a0
          -> IO Word32
release40 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount40 :: CalculatedFields a0
                   -> IO Word32
getTypeInfoCount40 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo40 :: (Variant a1)
              => Word32
              -> Word32
              -> CalculatedFields a0
              -> IO a1
getTypeInfo40 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames40 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> CalculatedFields a0
                -> IO Int32
getIDsOfNames40 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke40 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> CalculatedFields a0
         -> IO (a1, a2, Word32)
invoke40 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication308 :: (Variant a1)
                  => CalculatedFields a0
                  -> IO a1
getApplication308 =
  propertyGet "Application"
              []
              outVariant

getCreator308 :: CalculatedFields a0
              -> IO XlCreator
getCreator308 =
  propertyGet "Creator"
              []
              outEnum

getParent323 :: CalculatedFields a0
             -> IO (IDispatch ())
getParent323 =
  propertyGet "Parent"
              []
              outIDispatch

getCount133 :: CalculatedFields a0
            -> IO Int32
getCount133 =
  propertyGet "Count"
              []
              outInt32

add88 :: String
      -> String
      -> CalculatedFields a0
      -> IO (PivotField ())
add88 name formula =
  function1 "_Add"
            [ inString name
            , inString formula
            ]
            outIDispatch

item60 :: a1
       -> CalculatedFields a0
       -> IO (PivotField ())
item60 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault132 :: a1
              -> CalculatedFields a0
              -> IO (PivotField ())
getDefault132 field =
  propertyGet "_Default"
              [inVariant field]
              outIDispatch

newEnum46 :: CalculatedFields a0
          -> IO (IUnknown ())
newEnum46 =
  function1 "_NewEnum"
            []
            outIUnknown

add89 :: (Variant a1)
      => String
      -> String
      -> a1
      -> CalculatedFields a0
      -> IO (PivotField ())
add89 name formula useStandardFormula =
  function1 "Add"
            [ inString name
            , inString formula
            , inVariant useStandardFormula
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface PivotItem
-- 
-- --------------------------------------------------
data PivotItem_ a = PivotItem__ 
type PivotItem a = IDispatch (PivotItem_ a)
iidPivotItem :: IID (PivotItem ())
iidPivotItem = mkIID "{00020876-0000-0000-C000-000000000046}"

queryInterface41 :: (Variant a1)
                 => GUID
                 -> PivotItem a0
                 -> IO a1
queryInterface41 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef41 :: PivotItem a0
         -> IO Word32
addRef41 =
  function1 "AddRef"
            []
            outWord32

release41 :: PivotItem a0
          -> IO Word32
release41 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount41 :: PivotItem a0
                   -> IO Word32
getTypeInfoCount41 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo41 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotItem a0
              -> IO a1
getTypeInfo41 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames41 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotItem a0
                -> IO Int32
getIDsOfNames41 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke41 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotItem a0
         -> IO (a1, a2, Word32)
invoke41 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication309 :: (Variant a1)
                  => PivotItem a0
                  -> IO a1
getApplication309 =
  propertyGet "Application"
              []
              outVariant

getCreator309 :: PivotItem a0
              -> IO XlCreator
getCreator309 =
  propertyGet "Creator"
              []
              outEnum

getParent324 :: PivotItem a0
             -> IO (PivotField ())
getParent324 =
  propertyGet "Parent"
              []
              outIDispatch

getChildItems2 :: (Variant a2)
               => a2
               -> PivotItem a0
               -> IO a1
getChildItems2 index1 =
  propertyGet "ChildItems"
              [inVariant index1]
              outVariant

getDataRange2 :: PivotItem a0
              -> IO (Range ())
getDataRange2 =
  propertyGet "DataRange"
              []
              outIDispatch

getDefault133 :: PivotItem a0
              -> IO String
getDefault133 =
  propertyGet "_Default"
              []
              outString

setDefault26 :: String
             -> PivotItem a0
             -> IO ()
setDefault26 rhs =
  propertySet "_Default"
              [inString rhs]

getLabelRange2 :: PivotItem a0
               -> IO (Range ())
getLabelRange2 =
  propertyGet "LabelRange"
              []
              outIDispatch

getName88 :: PivotItem a0
          -> IO String
getName88 =
  propertyGet "Name"
              []
              outString

setName48 :: String
          -> PivotItem a0
          -> IO ()
setName48 rhs =
  propertySet "Name"
              [inString rhs]

getParentItem0 :: PivotItem a0
               -> IO (PivotItem ())
getParentItem0 =
  propertyGet "ParentItem"
              []
              outIDispatch

getParentShowDetail0 :: PivotItem a0
                     -> IO Bool
getParentShowDetail0 =
  propertyGet "ParentShowDetail"
              []
              outBool

getPosition14 :: PivotItem a0
              -> IO Int32
getPosition14 =
  propertyGet "Position"
              []
              outInt32

setPosition14 :: Int32
              -> PivotItem a0
              -> IO ()
setPosition14 rhs =
  propertySet "Position"
              [inInt32 rhs]

getShowDetail4 :: PivotItem a0
               -> IO Bool
getShowDetail4 =
  propertyGet "ShowDetail"
              []
              outBool

setShowDetail4 :: Bool
               -> PivotItem a0
               -> IO ()
setShowDetail4 rhs =
  propertySet "ShowDetail"
              [inBool rhs]

getSourceName5 :: PivotItem a0
               -> IO a1
getSourceName5 =
  propertyGet "SourceName"
              []
              outVariant

getValue40 :: PivotItem a0
           -> IO String
getValue40 =
  propertyGet "Value"
              []
              outString

setValue32 :: String
           -> PivotItem a0
           -> IO ()
setValue32 rhs =
  propertySet "Value"
              [inString rhs]

getVisible68 :: PivotItem a0
             -> IO Bool
getVisible68 =
  propertyGet "Visible"
              []
              outBool

setVisible68 :: Bool
             -> PivotItem a0
             -> IO ()
setVisible68 rhs =
  propertySet "Visible"
              [inBool rhs]

delete142 :: PivotItem a0
          -> IO ()
delete142 =
  method0 "Delete"
          []

getIsCalculated2 :: PivotItem a0
                 -> IO Bool
getIsCalculated2 =
  propertyGet "IsCalculated"
              []
              outBool

getRecordCount2 :: PivotItem a0
                -> IO Int32
getRecordCount2 =
  propertyGet "RecordCount"
              []
              outInt32

getFormula29 :: PivotItem a0
             -> IO String
getFormula29 =
  propertyGet "Formula"
              []
              outString

setFormula24 :: String
             -> PivotItem a0
             -> IO ()
setFormula24 rhs =
  propertySet "Formula"
              [inString rhs]

getCaption46 :: PivotItem a0
             -> IO String
getCaption46 =
  propertyGet "Caption"
              []
              outString

setCaption44 :: String
             -> PivotItem a0
             -> IO ()
setCaption44 rhs =
  propertySet "Caption"
              [inString rhs]

getDrilledDown2 :: PivotItem a0
                -> IO Bool
getDrilledDown2 =
  propertyGet "DrilledDown"
              []
              outBool

setDrilledDown2 :: Bool
                -> PivotItem a0
                -> IO ()
setDrilledDown2 rhs =
  propertySet "DrilledDown"
              [inBool rhs]

getStandardFormula4 :: PivotItem a0
                    -> IO String
getStandardFormula4 =
  propertyGet "StandardFormula"
              []
              outString

setStandardFormula4 :: String
                    -> PivotItem a0
                    -> IO ()
setStandardFormula4 rhs =
  propertySet "StandardFormula"
              [inString rhs]

getSourceNameStandard0 :: PivotItem a0
                       -> IO String
getSourceNameStandard0 =
  propertyGet "SourceNameStandard"
              []
              outString

drillTo2 :: String
         -> PivotItem a0
         -> IO ()
drillTo2 field =
  method0 "DrillTo"
          [inString field]

-- --------------------------------------------------
-- 
-- dispinterface PivotItems
-- 
-- --------------------------------------------------
data PivotItems_ a = PivotItems__ 
type PivotItems a = IDispatch (PivotItems_ a)
iidPivotItems :: IID (PivotItems ())
iidPivotItems = mkIID "{00020877-0000-0000-C000-000000000046}"

queryInterface42 :: (Variant a1)
                 => GUID
                 -> PivotItems a0
                 -> IO a1
queryInterface42 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef42 :: PivotItems a0
         -> IO Word32
addRef42 =
  function1 "AddRef"
            []
            outWord32

release42 :: PivotItems a0
          -> IO Word32
release42 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount42 :: PivotItems a0
                   -> IO Word32
getTypeInfoCount42 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo42 :: (Variant a1)
              => Word32
              -> Word32
              -> PivotItems a0
              -> IO a1
getTypeInfo42 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames42 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PivotItems a0
                -> IO Int32
getIDsOfNames42 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke42 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PivotItems a0
         -> IO (a1, a2, Word32)
invoke42 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication310 :: (Variant a1)
                  => PivotItems a0
                  -> IO a1
getApplication310 =
  propertyGet "Application"
              []
              outVariant

getCreator310 :: PivotItems a0
              -> IO XlCreator
getCreator310 =
  propertyGet "Creator"
              []
              outEnum

getParent325 :: PivotItems a0
             -> IO (PivotField ())
getParent325 =
  propertyGet "Parent"
              []
              outIDispatch

add90 :: String
      -> PivotItems a0
      -> IO ()
add90 name =
  method0 "Add"
          [inString name]

getCount134 :: PivotItems a0
            -> IO Int32
getCount134 =
  propertyGet "Count"
              []
              outInt32

item61 :: a1
       -> PivotItems a0
       -> IO (IDispatch ())
item61 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum47 :: PivotItems a0
          -> IO (IUnknown ())
newEnum47 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CalculatedItems
-- 
-- --------------------------------------------------
data CalculatedItems_ a = CalculatedItems__ 
type CalculatedItems a = IDispatch (CalculatedItems_ a)
iidCalculatedItems :: IID (CalculatedItems ())
iidCalculatedItems = mkIID "{00024421-0000-0000-C000-000000000046}"

queryInterface43 :: (Variant a1)
                 => GUID
                 -> CalculatedItems a0
                 -> IO a1
queryInterface43 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef43 :: CalculatedItems a0
         -> IO Word32
addRef43 =
  function1 "AddRef"
            []
            outWord32

release43 :: CalculatedItems a0
          -> IO Word32
release43 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount43 :: CalculatedItems a0
                   -> IO Word32
getTypeInfoCount43 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo43 :: (Variant a1)
              => Word32
              -> Word32
              -> CalculatedItems a0
              -> IO a1
getTypeInfo43 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames43 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> CalculatedItems a0
                -> IO Int32
getIDsOfNames43 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke43 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> CalculatedItems a0
         -> IO (a1, a2, Word32)
invoke43 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication311 :: (Variant a1)
                  => CalculatedItems a0
                  -> IO a1
getApplication311 =
  propertyGet "Application"
              []
              outVariant

getCreator311 :: CalculatedItems a0
              -> IO XlCreator
getCreator311 =
  propertyGet "Creator"
              []
              outEnum

getParent326 :: CalculatedItems a0
             -> IO (IDispatch ())
getParent326 =
  propertyGet "Parent"
              []
              outIDispatch

getCount135 :: CalculatedItems a0
            -> IO Int32
getCount135 =
  propertyGet "Count"
              []
              outInt32

add91 :: String
      -> String
      -> CalculatedItems a0
      -> IO (PivotItem ())
add91 name formula =
  function1 "_Add"
            [ inString name
            , inString formula
            ]
            outIDispatch

item62 :: a1
       -> CalculatedItems a0
       -> IO (PivotItem ())
item62 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault134 :: a1
              -> CalculatedItems a0
              -> IO (PivotItem ())
getDefault134 field =
  propertyGet "_Default"
              [inVariant field]
              outIDispatch

newEnum48 :: CalculatedItems a0
          -> IO (IUnknown ())
newEnum48 =
  function1 "_NewEnum"
            []
            outIUnknown

add92 :: (Variant a1)
      => String
      -> String
      -> a1
      -> CalculatedItems a0
      -> IO (PivotItem ())
add92 name formula useStandardFormula =
  function1 "Add"
            [ inString name
            , inString formula
            , inVariant useStandardFormula
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Characters
-- 
-- --------------------------------------------------
data Characters_ a = Characters__ 
type Characters a = IDispatch (Characters_ a)
iidCharacters :: IID (Characters ())
iidCharacters = mkIID "{00020878-0000-0000-C000-000000000046}"

queryInterface44 :: (Variant a1)
                 => GUID
                 -> Characters a0
                 -> IO a1
queryInterface44 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef44 :: Characters a0
         -> IO Word32
addRef44 =
  function1 "AddRef"
            []
            outWord32

release44 :: Characters a0
          -> IO Word32
release44 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount44 :: Characters a0
                   -> IO Word32
getTypeInfoCount44 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo44 :: (Variant a1)
              => Word32
              -> Word32
              -> Characters a0
              -> IO a1
getTypeInfo44 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames44 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Characters a0
                -> IO Int32
getIDsOfNames44 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke44 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Characters a0
         -> IO (a1, a2, Word32)
invoke44 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication312 :: (Variant a1)
                  => Characters a0
                  -> IO a1
getApplication312 =
  propertyGet "Application"
              []
              outVariant

getCreator312 :: Characters a0
              -> IO XlCreator
getCreator312 =
  propertyGet "Creator"
              []
              outEnum

getParent327 :: Characters a0
             -> IO (IDispatch ())
getParent327 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption47 :: Characters a0
             -> IO String
getCaption47 =
  propertyGet "Caption"
              []
              outString

setCaption45 :: String
             -> Characters a0
             -> IO ()
setCaption45 rhs =
  propertySet "Caption"
              [inString rhs]

getCount136 :: Characters a0
            -> IO Int32
getCount136 =
  propertyGet "Count"
              []
              outInt32

delete143 :: Characters a0
          -> IO a1
delete143 =
  function1 "Delete"
            []
            outVariant

getFont38 :: Characters a0
          -> IO (Font ())
getFont38 =
  propertyGet "Font"
              []
              outIDispatch

insert4 :: String
        -> Characters a0
        -> IO a1
insert4 string =
  function1 "Insert"
            [inString string]
            outVariant

getText38 :: Characters a0
          -> IO String
getText38 =
  propertyGet "Text"
              []
              outString

setText36 :: String
          -> Characters a0
          -> IO ()
setText36 rhs =
  propertySet "Text"
              [inString rhs]

getPhoneticCharacters0 :: Characters a0
                       -> IO String
getPhoneticCharacters0 =
  propertyGet "PhoneticCharacters"
              []
              outString

setPhoneticCharacters0 :: String
                       -> Characters a0
                       -> IO ()
setPhoneticCharacters0 rhs =
  propertySet "PhoneticCharacters"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface Dialogs
-- 
-- --------------------------------------------------
data Dialogs_ a = Dialogs__ 
type Dialogs a = IDispatch (Dialogs_ a)
iidDialogs :: IID (Dialogs ())
iidDialogs = mkIID "{00020879-0000-0000-C000-000000000046}"

queryInterface45 :: (Variant a1)
                 => GUID
                 -> Dialogs a0
                 -> IO a1
queryInterface45 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef45 :: Dialogs a0
         -> IO Word32
addRef45 =
  function1 "AddRef"
            []
            outWord32

release45 :: Dialogs a0
          -> IO Word32
release45 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount45 :: Dialogs a0
                   -> IO Word32
getTypeInfoCount45 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo45 :: (Variant a1)
              => Word32
              -> Word32
              -> Dialogs a0
              -> IO a1
getTypeInfo45 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames45 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Dialogs a0
                -> IO Int32
getIDsOfNames45 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke45 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Dialogs a0
         -> IO (a1, a2, Word32)
invoke45 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication313 :: (Variant a1)
                  => Dialogs a0
                  -> IO a1
getApplication313 =
  propertyGet "Application"
              []
              outVariant

getCreator313 :: Dialogs a0
              -> IO XlCreator
getCreator313 =
  propertyGet "Creator"
              []
              outEnum

getParent328 :: Dialogs a0
             -> IO (IDispatch ())
getParent328 =
  propertyGet "Parent"
              []
              outIDispatch

getCount137 :: Dialogs a0
            -> IO Int32
getCount137 =
  propertyGet "Count"
              []
              outInt32

getItem70 :: XlBuiltInDialog
          -> Dialogs a0
          -> IO (Dialog ())
getItem70 index1 =
  propertyGet "Item"
              [inEnum index1]
              outIUnknown

getDefault135 :: XlBuiltInDialog
              -> Dialogs a0
              -> IO (Dialog ())
getDefault135 index1 =
  propertyGet "_Default"
              [inEnum index1]
              outIUnknown

getNewEnum82 :: Dialogs a0
             -> IO (IUnknown ())
getNewEnum82 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Dialog
-- 
-- --------------------------------------------------
data Dialog_ a = Dialog__ 
type Dialog a = IDispatch (Dialog_ a)
iidDialog :: IID (Dialog ())
iidDialog = mkIID "{0002087A-0000-0000-C000-000000000046}"

queryInterface46 :: (Variant a1)
                 => GUID
                 -> Dialog a0
                 -> IO a1
queryInterface46 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef46 :: Dialog a0
         -> IO Word32
addRef46 =
  function1 "AddRef"
            []
            outWord32

release46 :: Dialog a0
          -> IO Word32
release46 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount46 :: Dialog a0
                   -> IO Word32
getTypeInfoCount46 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo46 :: (Variant a1)
              => Word32
              -> Word32
              -> Dialog a0
              -> IO a1
getTypeInfo46 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames46 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Dialog a0
                -> IO Int32
getIDsOfNames46 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke46 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Dialog a0
         -> IO (a1, a2, Word32)
invoke46 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication314 :: (Variant a1)
                  => Dialog a0
                  -> IO a1
getApplication314 =
  propertyGet "Application"
              []
              outVariant

getCreator314 :: Dialog a0
              -> IO XlCreator
getCreator314 =
  propertyGet "Creator"
              []
              outEnum

getParent329 :: Dialog a0
             -> IO (IDispatch ())
getParent329 =
  propertyGet "Parent"
              []
              outIDispatch

show5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> a23
      -> a24
      -> a25
      -> a26
      -> a27
      -> a28
      -> a29
      -> a30
      -> Dialog a0
      -> IO Bool
show5 arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23 arg24 arg25 arg26 arg27 arg28 arg29 arg30 =
  function1 "Show"
            [ inVariant arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            , inVariant arg5
            , inVariant arg6
            , inVariant arg7
            , inVariant arg8
            , inVariant arg9
            , inVariant arg10
            , inVariant arg11
            , inVariant arg12
            , inVariant arg13
            , inVariant arg14
            , inVariant arg15
            , inVariant arg16
            , inVariant arg17
            , inVariant arg18
            , inVariant arg19
            , inVariant arg20
            , inVariant arg21
            , inVariant arg22
            , inVariant arg23
            , inVariant arg24
            , inVariant arg25
            , inVariant arg26
            , inVariant arg27
            , inVariant arg28
            , inVariant arg29
            , inVariant arg30
            ]
            outBool

-- --------------------------------------------------
-- 
-- dispinterface SoundNote
-- 
-- --------------------------------------------------
data SoundNote_ a = SoundNote__ 
type SoundNote a = IDispatch (SoundNote_ a)
iidSoundNote :: IID (SoundNote ())
iidSoundNote = mkIID "{0002087B-0000-0000-C000-000000000046}"

queryInterface47 :: (Variant a1)
                 => GUID
                 -> SoundNote a0
                 -> IO a1
queryInterface47 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef47 :: SoundNote a0
         -> IO Word32
addRef47 =
  function1 "AddRef"
            []
            outWord32

release47 :: SoundNote a0
          -> IO Word32
release47 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount47 :: SoundNote a0
                   -> IO Word32
getTypeInfoCount47 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo47 :: (Variant a1)
              => Word32
              -> Word32
              -> SoundNote a0
              -> IO a1
getTypeInfo47 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames47 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> SoundNote a0
                -> IO Int32
getIDsOfNames47 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke47 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> SoundNote a0
         -> IO (a1, a2, Word32)
invoke47 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication315 :: (Variant a1)
                  => SoundNote a0
                  -> IO a1
getApplication315 =
  propertyGet "Application"
              []
              outVariant

getCreator315 :: SoundNote a0
              -> IO XlCreator
getCreator315 =
  propertyGet "Creator"
              []
              outEnum

getParent330 :: SoundNote a0
             -> IO (IDispatch ())
getParent330 =
  propertyGet "Parent"
              []
              outIDispatch

delete144 :: SoundNote a0
          -> IO a1
delete144 =
  function1 "Delete"
            []
            outVariant

import2 :: String
        -> SoundNote a0
        -> IO a1
import2 filename =
  function1 "Import"
            [inString filename]
            outVariant

play0 :: SoundNote a0
      -> IO a1
play0 =
  function1 "Play"
            []
            outVariant

record0 :: SoundNote a0
        -> IO a1
record0 =
  function1 "Record"
            []
            outVariant

-- --------------------------------------------------
-- 
-- dispinterface Button
-- 
-- --------------------------------------------------
data Button_ a = Button__ 
type Button a = IDispatch (Button_ a)
iidButton :: IID (Button ())
iidButton = mkIID "{0002087D-0000-0000-C000-000000000046}"

queryInterface48 :: (Variant a1)
                 => GUID
                 -> Button a0
                 -> IO a1
queryInterface48 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef48 :: Button a0
         -> IO Word32
addRef48 =
  function1 "AddRef"
            []
            outWord32

release48 :: Button a0
          -> IO Word32
release48 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount48 :: Button a0
                   -> IO Word32
getTypeInfoCount48 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo48 :: (Variant a1)
              => Word32
              -> Word32
              -> Button a0
              -> IO a1
getTypeInfo48 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames48 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Button a0
                -> IO Int32
getIDsOfNames48 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke48 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Button a0
         -> IO (a1, a2, Word32)
invoke48 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication316 :: (Variant a1)
                  => Button a0
                  -> IO a1
getApplication316 =
  propertyGet "Application"
              []
              outVariant

getCreator316 :: Button a0
              -> IO XlCreator
getCreator316 =
  propertyGet "Creator"
              []
              outEnum

getParent331 :: Button a0
             -> IO (IDispatch ())
getParent331 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell20 :: Button a0
                     -> IO (Range ())
getBottomRightCell20 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront41 :: Button a0
               -> IO a1
bringToFront41 =
  function1 "BringToFront"
            []
            outVariant

copy61 :: Button a0
       -> IO a1
copy61 =
  function1 "Copy"
            []
            outVariant

copyPicture46 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Button a0
              -> IO a1
copyPicture46 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut44 :: Button a0
      -> IO a1
cut44 =
  function1 "Cut"
            []
            outVariant

delete145 :: Button a0
          -> IO a1
delete145 =
  function1 "Delete"
            []
            outVariant

duplicate44 :: Button a0
            -> IO (IDispatch ())
duplicate44 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled51 :: Button a0
             -> IO Bool
getEnabled51 =
  propertyGet "Enabled"
              []
              outBool

setEnabled51 :: Bool
             -> Button a0
             -> IO ()
setEnabled51 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight58 :: Button a0
            -> IO Double
getHeight58 =
  propertyGet "Height"
              []
              outDouble

setHeight53 :: Double
            -> Button a0
            -> IO ()
setHeight53 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex48 :: Button a0
           -> IO Int32
getIndex48 =
  propertyGet "Index"
              []
              outInt32

getLeft61 :: Button a0
          -> IO Double
getLeft61 =
  propertyGet "Left"
              []
              outDouble

setLeft56 :: Double
          -> Button a0
          -> IO ()
setLeft56 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked50 :: Button a0
            -> IO Bool
getLocked50 =
  propertyGet "Locked"
              []
              outBool

setLocked50 :: Bool
            -> Button a0
            -> IO ()
setLocked50 rhs =
  propertySet "Locked"
              [inBool rhs]

getName89 :: Button a0
          -> IO String
getName89 =
  propertyGet "Name"
              []
              outString

setName49 :: String
          -> Button a0
          -> IO ()
setName49 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction47 :: Button a0
              -> IO String
getOnAction47 =
  propertyGet "OnAction"
              []
              outString

setOnAction47 :: String
              -> Button a0
              -> IO ()
setOnAction47 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement42 :: Button a0
               -> IO a1
getPlacement42 =
  propertyGet "Placement"
              []
              outVariant

setPlacement42 :: a1
               -> Button a0
               -> IO ()
setPlacement42 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject42 :: Button a0
                 -> IO Bool
getPrintObject42 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject42 :: Bool
                 -> Button a0
                 -> IO ()
setPrintObject42 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select85 :: (Variant a2)
         => a2
         -> Button a0
         -> IO a1
select85 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack41 :: Button a0
             -> IO a1
sendToBack41 =
  function1 "SendToBack"
            []
            outVariant

getTop61 :: Button a0
         -> IO Double
getTop61 =
  propertyGet "Top"
              []
              outDouble

setTop56 :: Double
         -> Button a0
         -> IO ()
setTop56 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell20 :: Button a0
                 -> IO (Range ())
getTopLeftCell20 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible69 :: Button a0
             -> IO Bool
getVisible69 =
  propertyGet "Visible"
              []
              outBool

setVisible69 :: Bool
             -> Button a0
             -> IO ()
setVisible69 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth60 :: Button a0
           -> IO Double
getWidth60 =
  propertyGet "Width"
              []
              outDouble

setWidth55 :: Double
           -> Button a0
           -> IO ()
setWidth55 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder40 :: Button a0
            -> IO Int32
getZOrder40 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange42 :: Button a0
                -> IO (ShapeRange ())
getShapeRange42 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent20 :: Button a0
               -> IO Bool
getAddIndent20 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent20 :: Bool
               -> Button a0
               -> IO ()
setAddIndent20 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont21 :: Button a0
                   -> IO a1
getAutoScaleFont21 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont21 :: a1
                   -> Button a0
                   -> IO ()
setAutoScaleFont21 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize17 :: Button a0
              -> IO Bool
getAutoSize17 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize17 :: Bool
              -> Button a0
              -> IO ()
setAutoSize17 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption48 :: Button a0
             -> IO String
getCaption48 =
  propertyGet "Caption"
              []
              outString

setCaption46 :: String
             -> Button a0
             -> IO ()
setCaption46 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters32 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Button a0
                -> IO (Characters ())
getCharacters32 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling34 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Button a0
                -> IO a1
checkSpelling34 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont39 :: Button a0
          -> IO (Font ())
getFont39 =
  propertyGet "Font"
              []
              outIDispatch

getFormula30 :: Button a0
             -> IO String
getFormula30 =
  propertyGet "Formula"
              []
              outString

setFormula25 :: String
             -> Button a0
             -> IO ()
setFormula25 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment26 :: Button a0
                         -> IO a1
getHorizontalAlignment26 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment26 :: a1
                         -> Button a0
                         -> IO ()
setHorizontalAlignment26 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText25 :: Button a0
                -> IO Bool
getLockedText25 =
  propertyGet "LockedText"
              []
              outBool

setLockedText25 :: Bool
                -> Button a0
                -> IO ()
setLockedText25 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation33 :: Button a0
                 -> IO a1
getOrientation33 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation33 :: a1
                 -> Button a0
                 -> IO ()
setOrientation33 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText39 :: Button a0
          -> IO String
getText39 =
  propertyGet "Text"
              []
              outString

setText37 :: String
          -> Button a0
          -> IO ()
setText37 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment26 :: Button a0
                       -> IO a1
getVerticalAlignment26 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment26 :: a1
                       -> Button a0
                       -> IO ()
setVerticalAlignment26 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder26 :: Button a0
                  -> IO Int32
getReadingOrder26 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder26 :: Int32
                  -> Button a0
                  -> IO ()
setReadingOrder26 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAccelerator11 :: Button a0
                 -> IO a1
getAccelerator11 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator11 :: a1
                 -> Button a0
                 -> IO ()
setAccelerator11 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getCancelButton3 :: Button a0
                 -> IO Bool
getCancelButton3 =
  propertyGet "CancelButton"
              []
              outBool

setCancelButton3 :: Bool
                 -> Button a0
                 -> IO ()
setCancelButton3 rhs =
  propertySet "CancelButton"
              [inBool rhs]

getDefaultButton4 :: Button a0
                  -> IO Bool
getDefaultButton4 =
  propertyGet "DefaultButton"
              []
              outBool

setDefaultButton4 :: Bool
                  -> Button a0
                  -> IO ()
setDefaultButton4 rhs =
  propertySet "DefaultButton"
              [inBool rhs]

getDismissButton3 :: Button a0
                  -> IO Bool
getDismissButton3 =
  propertyGet "DismissButton"
              []
              outBool

setDismissButton3 :: Bool
                  -> Button a0
                  -> IO ()
setDismissButton3 rhs =
  propertySet "DismissButton"
              [inBool rhs]

getHelpButton3 :: Button a0
               -> IO Bool
getHelpButton3 =
  propertyGet "HelpButton"
              []
              outBool

setHelpButton3 :: Bool
               -> Button a0
               -> IO ()
setHelpButton3 rhs =
  propertySet "HelpButton"
              [inBool rhs]

getPhoneticAccelerator11 :: Button a0
                         -> IO a1
getPhoneticAccelerator11 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator11 :: a1
                         -> Button a0
                         -> IO ()
setPhoneticAccelerator11 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface Buttons
-- 
-- --------------------------------------------------
data Buttons_ a = Buttons__ 
type Buttons a = IDispatch (Buttons_ a)
iidButtons :: IID (Buttons ())
iidButtons = mkIID "{0002087E-0000-0000-C000-000000000046}"

queryInterface49 :: (Variant a1)
                 => GUID
                 -> Buttons a0
                 -> IO a1
queryInterface49 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef49 :: Buttons a0
         -> IO Word32
addRef49 =
  function1 "AddRef"
            []
            outWord32

release49 :: Buttons a0
          -> IO Word32
release49 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount49 :: Buttons a0
                   -> IO Word32
getTypeInfoCount49 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo49 :: (Variant a1)
              => Word32
              -> Word32
              -> Buttons a0
              -> IO a1
getTypeInfo49 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames49 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Buttons a0
                -> IO Int32
getIDsOfNames49 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke49 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Buttons a0
         -> IO (a1, a2, Word32)
invoke49 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication317 :: (Variant a1)
                  => Buttons a0
                  -> IO a1
getApplication317 =
  propertyGet "Application"
              []
              outVariant

getCreator317 :: Buttons a0
              -> IO XlCreator
getCreator317 =
  propertyGet "Creator"
              []
              outEnum

getParent332 :: Buttons a0
             -> IO (IDispatch ())
getParent332 =
  propertyGet "Parent"
              []
              outIDispatch

dummy327 :: Buttons a0
         -> IO ()
dummy327 =
  method0 "_Dummy3"
          []

bringToFront42 :: Buttons a0
               -> IO a1
bringToFront42 =
  function1 "BringToFront"
            []
            outVariant

copy62 :: Buttons a0
       -> IO a1
copy62 =
  function1 "Copy"
            []
            outVariant

copyPicture47 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Buttons a0
              -> IO a1
copyPicture47 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut45 :: Buttons a0
      -> IO a1
cut45 =
  function1 "Cut"
            []
            outVariant

delete146 :: Buttons a0
          -> IO a1
delete146 =
  function1 "Delete"
            []
            outVariant

duplicate45 :: Buttons a0
            -> IO (IDispatch ())
duplicate45 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled52 :: Buttons a0
             -> IO Bool
getEnabled52 =
  propertyGet "Enabled"
              []
              outBool

setEnabled52 :: Bool
             -> Buttons a0
             -> IO ()
setEnabled52 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight59 :: Buttons a0
            -> IO Double
getHeight59 =
  propertyGet "Height"
              []
              outDouble

setHeight54 :: Double
            -> Buttons a0
            -> IO ()
setHeight54 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1224 :: Buttons a0
          -> IO ()
dummy1224 =
  method0 "_Dummy12"
          []

getLeft62 :: Buttons a0
          -> IO Double
getLeft62 =
  propertyGet "Left"
              []
              outDouble

setLeft57 :: Double
          -> Buttons a0
          -> IO ()
setLeft57 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked51 :: Buttons a0
            -> IO Bool
getLocked51 =
  propertyGet "Locked"
              []
              outBool

setLocked51 :: Bool
            -> Buttons a0
            -> IO ()
setLocked51 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1523 :: Buttons a0
          -> IO ()
dummy1523 =
  method0 "_Dummy15"
          []

getOnAction48 :: Buttons a0
              -> IO String
getOnAction48 =
  propertyGet "OnAction"
              []
              outString

setOnAction48 :: String
              -> Buttons a0
              -> IO ()
setOnAction48 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement43 :: Buttons a0
               -> IO a1
getPlacement43 =
  propertyGet "Placement"
              []
              outVariant

setPlacement43 :: a1
               -> Buttons a0
               -> IO ()
setPlacement43 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject43 :: Buttons a0
                 -> IO Bool
getPrintObject43 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject43 :: Bool
                 -> Buttons a0
                 -> IO ()
setPrintObject43 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select86 :: (Variant a2)
         => a2
         -> Buttons a0
         -> IO a1
select86 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack42 :: Buttons a0
             -> IO a1
sendToBack42 =
  function1 "SendToBack"
            []
            outVariant

getTop62 :: Buttons a0
         -> IO Double
getTop62 =
  propertyGet "Top"
              []
              outDouble

setTop57 :: Double
         -> Buttons a0
         -> IO ()
setTop57 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2222 :: Buttons a0
          -> IO ()
dummy2222 =
  method0 "_Dummy22"
          []

getVisible70 :: Buttons a0
             -> IO Bool
getVisible70 =
  propertyGet "Visible"
              []
              outBool

setVisible70 :: Bool
             -> Buttons a0
             -> IO ()
setVisible70 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth61 :: Buttons a0
           -> IO Double
getWidth61 =
  propertyGet "Width"
              []
              outDouble

setWidth56 :: Double
           -> Buttons a0
           -> IO ()
setWidth56 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder41 :: Buttons a0
            -> IO Int32
getZOrder41 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange43 :: Buttons a0
                -> IO (ShapeRange ())
getShapeRange43 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent21 :: Buttons a0
               -> IO Bool
getAddIndent21 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent21 :: Bool
               -> Buttons a0
               -> IO ()
setAddIndent21 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont22 :: Buttons a0
                   -> IO a1
getAutoScaleFont22 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont22 :: a1
                   -> Buttons a0
                   -> IO ()
setAutoScaleFont22 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize18 :: Buttons a0
              -> IO Bool
getAutoSize18 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize18 :: Bool
              -> Buttons a0
              -> IO ()
setAutoSize18 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption49 :: Buttons a0
             -> IO String
getCaption49 =
  propertyGet "Caption"
              []
              outString

setCaption47 :: String
             -> Buttons a0
             -> IO ()
setCaption47 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters33 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Buttons a0
                -> IO (Characters ())
getCharacters33 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling35 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Buttons a0
                -> IO a1
checkSpelling35 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont40 :: Buttons a0
          -> IO (Font ())
getFont40 =
  propertyGet "Font"
              []
              outIDispatch

getFormula31 :: Buttons a0
             -> IO String
getFormula31 =
  propertyGet "Formula"
              []
              outString

setFormula26 :: String
             -> Buttons a0
             -> IO ()
setFormula26 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment27 :: Buttons a0
                         -> IO a1
getHorizontalAlignment27 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment27 :: a1
                         -> Buttons a0
                         -> IO ()
setHorizontalAlignment27 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText26 :: Buttons a0
                -> IO Bool
getLockedText26 =
  propertyGet "LockedText"
              []
              outBool

setLockedText26 :: Bool
                -> Buttons a0
                -> IO ()
setLockedText26 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation34 :: Buttons a0
                 -> IO a1
getOrientation34 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation34 :: a1
                 -> Buttons a0
                 -> IO ()
setOrientation34 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText40 :: Buttons a0
          -> IO String
getText40 =
  propertyGet "Text"
              []
              outString

setText38 :: String
          -> Buttons a0
          -> IO ()
setText38 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment27 :: Buttons a0
                       -> IO a1
getVerticalAlignment27 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment27 :: a1
                       -> Buttons a0
                       -> IO ()
setVerticalAlignment27 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder27 :: Buttons a0
                  -> IO Int32
getReadingOrder27 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder27 :: Int32
                  -> Buttons a0
                  -> IO ()
setReadingOrder27 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAccelerator12 :: Buttons a0
                 -> IO a1
getAccelerator12 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator12 :: a1
                 -> Buttons a0
                 -> IO ()
setAccelerator12 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getCancelButton4 :: Buttons a0
                 -> IO Bool
getCancelButton4 =
  propertyGet "CancelButton"
              []
              outBool

setCancelButton4 :: Bool
                 -> Buttons a0
                 -> IO ()
setCancelButton4 rhs =
  propertySet "CancelButton"
              [inBool rhs]

getDefaultButton5 :: Buttons a0
                  -> IO Bool
getDefaultButton5 =
  propertyGet "DefaultButton"
              []
              outBool

setDefaultButton5 :: Bool
                  -> Buttons a0
                  -> IO ()
setDefaultButton5 rhs =
  propertySet "DefaultButton"
              [inBool rhs]

getDismissButton4 :: Buttons a0
                  -> IO Bool
getDismissButton4 =
  propertyGet "DismissButton"
              []
              outBool

setDismissButton4 :: Bool
                  -> Buttons a0
                  -> IO ()
setDismissButton4 rhs =
  propertySet "DismissButton"
              [inBool rhs]

getHelpButton4 :: Buttons a0
               -> IO Bool
getHelpButton4 =
  propertyGet "HelpButton"
              []
              outBool

setHelpButton4 :: Bool
               -> Buttons a0
               -> IO ()
setHelpButton4 rhs =
  propertySet "HelpButton"
              [inBool rhs]

getPhoneticAccelerator12 :: Buttons a0
                         -> IO a1
getPhoneticAccelerator12 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator12 :: a1
                         -> Buttons a0
                         -> IO ()
setPhoneticAccelerator12 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

add93 :: Double
      -> Double
      -> Double
      -> Double
      -> Buttons a0
      -> IO (Button ())
add93 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount138 :: Buttons a0
            -> IO Int32
getCount138 =
  propertyGet "Count"
              []
              outInt32

group24 :: Buttons a0
        -> IO (GroupObject ())
group24 =
  function1 "Group"
            []
            outIUnknown

item63 :: a1
       -> Buttons a0
       -> IO (IDispatch ())
item63 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum49 :: Buttons a0
          -> IO (IUnknown ())
newEnum49 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CheckBox
-- 
-- --------------------------------------------------
data CheckBox_ a = CheckBox__ 
type CheckBox a = IDispatch (CheckBox_ a)
iidCheckBox :: IID (CheckBox ())
iidCheckBox = mkIID "{0002087F-0000-0000-C000-000000000046}"

queryInterface50 :: (Variant a1)
                 => GUID
                 -> CheckBox a0
                 -> IO a1
queryInterface50 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef50 :: CheckBox a0
         -> IO Word32
addRef50 =
  function1 "AddRef"
            []
            outWord32

release50 :: CheckBox a0
          -> IO Word32
release50 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount50 :: CheckBox a0
                   -> IO Word32
getTypeInfoCount50 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo50 :: (Variant a1)
              => Word32
              -> Word32
              -> CheckBox a0
              -> IO a1
getTypeInfo50 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames50 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> CheckBox a0
                -> IO Int32
getIDsOfNames50 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke50 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> CheckBox a0
         -> IO (a1, a2, Word32)
invoke50 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication318 :: (Variant a1)
                  => CheckBox a0
                  -> IO a1
getApplication318 =
  propertyGet "Application"
              []
              outVariant

getCreator318 :: CheckBox a0
              -> IO XlCreator
getCreator318 =
  propertyGet "Creator"
              []
              outEnum

getParent333 :: CheckBox a0
             -> IO (IDispatch ())
getParent333 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell21 :: CheckBox a0
                     -> IO (Range ())
getBottomRightCell21 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront43 :: CheckBox a0
               -> IO a1
bringToFront43 =
  function1 "BringToFront"
            []
            outVariant

copy63 :: CheckBox a0
       -> IO a1
copy63 =
  function1 "Copy"
            []
            outVariant

copyPicture48 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> CheckBox a0
              -> IO a1
copyPicture48 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut46 :: CheckBox a0
      -> IO a1
cut46 =
  function1 "Cut"
            []
            outVariant

delete147 :: CheckBox a0
          -> IO a1
delete147 =
  function1 "Delete"
            []
            outVariant

duplicate46 :: CheckBox a0
            -> IO (IDispatch ())
duplicate46 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled53 :: CheckBox a0
             -> IO Bool
getEnabled53 =
  propertyGet "Enabled"
              []
              outBool

setEnabled53 :: Bool
             -> CheckBox a0
             -> IO ()
setEnabled53 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight60 :: CheckBox a0
            -> IO Double
getHeight60 =
  propertyGet "Height"
              []
              outDouble

setHeight55 :: Double
            -> CheckBox a0
            -> IO ()
setHeight55 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex49 :: CheckBox a0
           -> IO Int32
getIndex49 =
  propertyGet "Index"
              []
              outInt32

getLeft63 :: CheckBox a0
          -> IO Double
getLeft63 =
  propertyGet "Left"
              []
              outDouble

setLeft58 :: Double
          -> CheckBox a0
          -> IO ()
setLeft58 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked52 :: CheckBox a0
            -> IO Bool
getLocked52 =
  propertyGet "Locked"
              []
              outBool

setLocked52 :: Bool
            -> CheckBox a0
            -> IO ()
setLocked52 rhs =
  propertySet "Locked"
              [inBool rhs]

getName90 :: CheckBox a0
          -> IO String
getName90 =
  propertyGet "Name"
              []
              outString

setName50 :: String
          -> CheckBox a0
          -> IO ()
setName50 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction49 :: CheckBox a0
              -> IO String
getOnAction49 =
  propertyGet "OnAction"
              []
              outString

setOnAction49 :: String
              -> CheckBox a0
              -> IO ()
setOnAction49 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement44 :: CheckBox a0
               -> IO a1
getPlacement44 =
  propertyGet "Placement"
              []
              outVariant

setPlacement44 :: a1
               -> CheckBox a0
               -> IO ()
setPlacement44 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject44 :: CheckBox a0
                 -> IO Bool
getPrintObject44 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject44 :: Bool
                 -> CheckBox a0
                 -> IO ()
setPrintObject44 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select87 :: (Variant a2)
         => a2
         -> CheckBox a0
         -> IO a1
select87 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack43 :: CheckBox a0
             -> IO a1
sendToBack43 =
  function1 "SendToBack"
            []
            outVariant

getTop63 :: CheckBox a0
         -> IO Double
getTop63 =
  propertyGet "Top"
              []
              outDouble

setTop58 :: Double
         -> CheckBox a0
         -> IO ()
setTop58 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell21 :: CheckBox a0
                 -> IO (Range ())
getTopLeftCell21 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible71 :: CheckBox a0
             -> IO Bool
getVisible71 =
  propertyGet "Visible"
              []
              outBool

setVisible71 :: Bool
             -> CheckBox a0
             -> IO ()
setVisible71 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth62 :: CheckBox a0
           -> IO Double
getWidth62 =
  propertyGet "Width"
              []
              outDouble

setWidth57 :: Double
           -> CheckBox a0
           -> IO ()
setWidth57 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder42 :: CheckBox a0
            -> IO Int32
getZOrder42 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange44 :: CheckBox a0
                -> IO (ShapeRange ())
getShapeRange44 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption50 :: CheckBox a0
             -> IO String
getCaption50 =
  propertyGet "Caption"
              []
              outString

setCaption48 :: String
             -> CheckBox a0
             -> IO ()
setCaption48 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters34 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> CheckBox a0
                -> IO (Characters ())
getCharacters34 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling36 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> CheckBox a0
                -> IO a1
checkSpelling36 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText27 :: CheckBox a0
                -> IO Bool
getLockedText27 =
  propertyGet "LockedText"
              []
              outBool

setLockedText27 :: Bool
                -> CheckBox a0
                -> IO ()
setLockedText27 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText41 :: CheckBox a0
          -> IO String
getText41 =
  propertyGet "Text"
              []
              outString

setText39 :: String
          -> CheckBox a0
          -> IO ()
setText39 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator13 :: CheckBox a0
                 -> IO a1
getAccelerator13 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator13 :: a1
                 -> CheckBox a0
                 -> IO ()
setAccelerator13 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getBorder50 :: CheckBox a0
            -> IO (Border ())
getBorder50 =
  propertyGet "Border"
              []
              outIUnknown

getDefault136 :: CheckBox a0
              -> IO Int32
getDefault136 =
  propertyGet "_Default"
              []
              outInt32

setDefault27 :: Int32
             -> CheckBox a0
             -> IO ()
setDefault27 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading15 :: CheckBox a0
                      -> IO Bool
getDisplay3DShading15 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading15 :: Bool
                      -> CheckBox a0
                      -> IO ()
setDisplay3DShading15 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getInterior48 :: CheckBox a0
              -> IO (Interior ())
getInterior48 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell15 :: CheckBox a0
                -> IO String
getLinkedCell15 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell15 :: String
                -> CheckBox a0
                -> IO ()
setLinkedCell15 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getPhoneticAccelerator13 :: CheckBox a0
                         -> IO a1
getPhoneticAccelerator13 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator13 :: a1
                         -> CheckBox a0
                         -> IO ()
setPhoneticAccelerator13 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

getValue41 :: CheckBox a0
           -> IO a1
getValue41 =
  propertyGet "Value"
              []
              outVariant

setValue33 :: a1
           -> CheckBox a0
           -> IO ()
setValue33 rhs =
  propertySet "Value"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface CheckBoxes
-- 
-- --------------------------------------------------
data CheckBoxes_ a = CheckBoxes__ 
type CheckBoxes a = IDispatch (CheckBoxes_ a)
iidCheckBoxes :: IID (CheckBoxes ())
iidCheckBoxes = mkIID "{00020880-0000-0000-C000-000000000046}"

queryInterface51 :: (Variant a1)
                 => GUID
                 -> CheckBoxes a0
                 -> IO a1
queryInterface51 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef51 :: CheckBoxes a0
         -> IO Word32
addRef51 =
  function1 "AddRef"
            []
            outWord32

release51 :: CheckBoxes a0
          -> IO Word32
release51 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount51 :: CheckBoxes a0
                   -> IO Word32
getTypeInfoCount51 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo51 :: (Variant a1)
              => Word32
              -> Word32
              -> CheckBoxes a0
              -> IO a1
getTypeInfo51 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames51 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> CheckBoxes a0
                -> IO Int32
getIDsOfNames51 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke51 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> CheckBoxes a0
         -> IO (a1, a2, Word32)
invoke51 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication319 :: (Variant a1)
                  => CheckBoxes a0
                  -> IO a1
getApplication319 =
  propertyGet "Application"
              []
              outVariant

getCreator319 :: CheckBoxes a0
              -> IO XlCreator
getCreator319 =
  propertyGet "Creator"
              []
              outEnum

getParent334 :: CheckBoxes a0
             -> IO (IDispatch ())
getParent334 =
  propertyGet "Parent"
              []
              outIDispatch

dummy328 :: CheckBoxes a0
         -> IO ()
dummy328 =
  method0 "_Dummy3"
          []

bringToFront44 :: CheckBoxes a0
               -> IO a1
bringToFront44 =
  function1 "BringToFront"
            []
            outVariant

copy64 :: CheckBoxes a0
       -> IO a1
copy64 =
  function1 "Copy"
            []
            outVariant

copyPicture49 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> CheckBoxes a0
              -> IO a1
copyPicture49 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut47 :: CheckBoxes a0
      -> IO a1
cut47 =
  function1 "Cut"
            []
            outVariant

delete148 :: CheckBoxes a0
          -> IO a1
delete148 =
  function1 "Delete"
            []
            outVariant

duplicate47 :: CheckBoxes a0
            -> IO (IDispatch ())
duplicate47 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled54 :: CheckBoxes a0
             -> IO Bool
getEnabled54 =
  propertyGet "Enabled"
              []
              outBool

setEnabled54 :: Bool
             -> CheckBoxes a0
             -> IO ()
setEnabled54 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight61 :: CheckBoxes a0
            -> IO Double
getHeight61 =
  propertyGet "Height"
              []
              outDouble

setHeight56 :: Double
            -> CheckBoxes a0
            -> IO ()
setHeight56 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1225 :: CheckBoxes a0
          -> IO ()
dummy1225 =
  method0 "_Dummy12"
          []

getLeft64 :: CheckBoxes a0
          -> IO Double
getLeft64 =
  propertyGet "Left"
              []
              outDouble

setLeft59 :: Double
          -> CheckBoxes a0
          -> IO ()
setLeft59 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked53 :: CheckBoxes a0
            -> IO Bool
getLocked53 =
  propertyGet "Locked"
              []
              outBool

setLocked53 :: Bool
            -> CheckBoxes a0
            -> IO ()
setLocked53 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1524 :: CheckBoxes a0
          -> IO ()
dummy1524 =
  method0 "_Dummy15"
          []

getOnAction50 :: CheckBoxes a0
              -> IO String
getOnAction50 =
  propertyGet "OnAction"
              []
              outString

setOnAction50 :: String
              -> CheckBoxes a0
              -> IO ()
setOnAction50 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement45 :: CheckBoxes a0
               -> IO a1
getPlacement45 =
  propertyGet "Placement"
              []
              outVariant

setPlacement45 :: a1
               -> CheckBoxes a0
               -> IO ()
setPlacement45 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject45 :: CheckBoxes a0
                 -> IO Bool
getPrintObject45 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject45 :: Bool
                 -> CheckBoxes a0
                 -> IO ()
setPrintObject45 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select88 :: (Variant a2)
         => a2
         -> CheckBoxes a0
         -> IO a1
select88 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack44 :: CheckBoxes a0
             -> IO a1
sendToBack44 =
  function1 "SendToBack"
            []
            outVariant

getTop64 :: CheckBoxes a0
         -> IO Double
getTop64 =
  propertyGet "Top"
              []
              outDouble

setTop59 :: Double
         -> CheckBoxes a0
         -> IO ()
setTop59 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2223 :: CheckBoxes a0
          -> IO ()
dummy2223 =
  method0 "_Dummy22"
          []

getVisible72 :: CheckBoxes a0
             -> IO Bool
getVisible72 =
  propertyGet "Visible"
              []
              outBool

setVisible72 :: Bool
             -> CheckBoxes a0
             -> IO ()
setVisible72 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth63 :: CheckBoxes a0
           -> IO Double
getWidth63 =
  propertyGet "Width"
              []
              outDouble

setWidth58 :: Double
           -> CheckBoxes a0
           -> IO ()
setWidth58 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder43 :: CheckBoxes a0
            -> IO Int32
getZOrder43 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange45 :: CheckBoxes a0
                -> IO (ShapeRange ())
getShapeRange45 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption51 :: CheckBoxes a0
             -> IO String
getCaption51 =
  propertyGet "Caption"
              []
              outString

setCaption49 :: String
             -> CheckBoxes a0
             -> IO ()
setCaption49 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters35 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> CheckBoxes a0
                -> IO (Characters ())
getCharacters35 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling37 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> CheckBoxes a0
                -> IO a1
checkSpelling37 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText28 :: CheckBoxes a0
                -> IO Bool
getLockedText28 =
  propertyGet "LockedText"
              []
              outBool

setLockedText28 :: Bool
                -> CheckBoxes a0
                -> IO ()
setLockedText28 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText42 :: CheckBoxes a0
          -> IO String
getText42 =
  propertyGet "Text"
              []
              outString

setText40 :: String
          -> CheckBoxes a0
          -> IO ()
setText40 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator14 :: CheckBoxes a0
                 -> IO a1
getAccelerator14 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator14 :: a1
                 -> CheckBoxes a0
                 -> IO ()
setAccelerator14 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getBorder51 :: CheckBoxes a0
            -> IO (Border ())
getBorder51 =
  propertyGet "Border"
              []
              outIUnknown

getDefault137 :: CheckBoxes a0
              -> IO Int32
getDefault137 =
  propertyGet "_Default"
              []
              outInt32

setDefault28 :: Int32
             -> CheckBoxes a0
             -> IO ()
setDefault28 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading16 :: CheckBoxes a0
                      -> IO Bool
getDisplay3DShading16 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading16 :: Bool
                      -> CheckBoxes a0
                      -> IO ()
setDisplay3DShading16 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getInterior49 :: CheckBoxes a0
              -> IO (Interior ())
getInterior49 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell16 :: CheckBoxes a0
                -> IO String
getLinkedCell16 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell16 :: String
                -> CheckBoxes a0
                -> IO ()
setLinkedCell16 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getPhoneticAccelerator14 :: CheckBoxes a0
                         -> IO a1
getPhoneticAccelerator14 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator14 :: a1
                         -> CheckBoxes a0
                         -> IO ()
setPhoneticAccelerator14 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

getValue42 :: CheckBoxes a0
           -> IO a1
getValue42 =
  propertyGet "Value"
              []
              outVariant

setValue34 :: a1
           -> CheckBoxes a0
           -> IO ()
setValue34 rhs =
  propertySet "Value"
              [inVariant rhs]

add94 :: Double
      -> Double
      -> Double
      -> Double
      -> CheckBoxes a0
      -> IO (CheckBox ())
add94 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount139 :: CheckBoxes a0
            -> IO Int32
getCount139 =
  propertyGet "Count"
              []
              outInt32

group25 :: CheckBoxes a0
        -> IO (GroupObject ())
group25 =
  function1 "Group"
            []
            outIUnknown

item64 :: a1
       -> CheckBoxes a0
       -> IO (IDispatch ())
item64 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum50 :: CheckBoxes a0
          -> IO (IUnknown ())
newEnum50 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface OptionButton
-- 
-- --------------------------------------------------
data OptionButton_ a = OptionButton__ 
type OptionButton a = IDispatch (OptionButton_ a)
iidOptionButton :: IID (OptionButton ())
iidOptionButton = mkIID "{00020881-0000-0000-C000-000000000046}"

queryInterface52 :: (Variant a1)
                 => GUID
                 -> OptionButton a0
                 -> IO a1
queryInterface52 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef52 :: OptionButton a0
         -> IO Word32
addRef52 =
  function1 "AddRef"
            []
            outWord32

release52 :: OptionButton a0
          -> IO Word32
release52 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount52 :: OptionButton a0
                   -> IO Word32
getTypeInfoCount52 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo52 :: (Variant a1)
              => Word32
              -> Word32
              -> OptionButton a0
              -> IO a1
getTypeInfo52 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames52 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> OptionButton a0
                -> IO Int32
getIDsOfNames52 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke52 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> OptionButton a0
         -> IO (a1, a2, Word32)
invoke52 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication320 :: (Variant a1)
                  => OptionButton a0
                  -> IO a1
getApplication320 =
  propertyGet "Application"
              []
              outVariant

getCreator320 :: OptionButton a0
              -> IO XlCreator
getCreator320 =
  propertyGet "Creator"
              []
              outEnum

getParent335 :: OptionButton a0
             -> IO (IDispatch ())
getParent335 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell22 :: OptionButton a0
                     -> IO (Range ())
getBottomRightCell22 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront45 :: OptionButton a0
               -> IO a1
bringToFront45 =
  function1 "BringToFront"
            []
            outVariant

copy65 :: OptionButton a0
       -> IO a1
copy65 =
  function1 "Copy"
            []
            outVariant

copyPicture50 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> OptionButton a0
              -> IO a1
copyPicture50 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut48 :: OptionButton a0
      -> IO a1
cut48 =
  function1 "Cut"
            []
            outVariant

delete149 :: OptionButton a0
          -> IO a1
delete149 =
  function1 "Delete"
            []
            outVariant

duplicate48 :: OptionButton a0
            -> IO (IDispatch ())
duplicate48 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled55 :: OptionButton a0
             -> IO Bool
getEnabled55 =
  propertyGet "Enabled"
              []
              outBool

setEnabled55 :: Bool
             -> OptionButton a0
             -> IO ()
setEnabled55 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight62 :: OptionButton a0
            -> IO Double
getHeight62 =
  propertyGet "Height"
              []
              outDouble

setHeight57 :: Double
            -> OptionButton a0
            -> IO ()
setHeight57 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex50 :: OptionButton a0
           -> IO Int32
getIndex50 =
  propertyGet "Index"
              []
              outInt32

getLeft65 :: OptionButton a0
          -> IO Double
getLeft65 =
  propertyGet "Left"
              []
              outDouble

setLeft60 :: Double
          -> OptionButton a0
          -> IO ()
setLeft60 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked54 :: OptionButton a0
            -> IO Bool
getLocked54 =
  propertyGet "Locked"
              []
              outBool

setLocked54 :: Bool
            -> OptionButton a0
            -> IO ()
setLocked54 rhs =
  propertySet "Locked"
              [inBool rhs]

getName91 :: OptionButton a0
          -> IO String
getName91 =
  propertyGet "Name"
              []
              outString

setName51 :: String
          -> OptionButton a0
          -> IO ()
setName51 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction51 :: OptionButton a0
              -> IO String
getOnAction51 =
  propertyGet "OnAction"
              []
              outString

setOnAction51 :: String
              -> OptionButton a0
              -> IO ()
setOnAction51 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement46 :: OptionButton a0
               -> IO a1
getPlacement46 =
  propertyGet "Placement"
              []
              outVariant

setPlacement46 :: a1
               -> OptionButton a0
               -> IO ()
setPlacement46 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject46 :: OptionButton a0
                 -> IO Bool
getPrintObject46 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject46 :: Bool
                 -> OptionButton a0
                 -> IO ()
setPrintObject46 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select89 :: (Variant a2)
         => a2
         -> OptionButton a0
         -> IO a1
select89 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack45 :: OptionButton a0
             -> IO a1
sendToBack45 =
  function1 "SendToBack"
            []
            outVariant

getTop65 :: OptionButton a0
         -> IO Double
getTop65 =
  propertyGet "Top"
              []
              outDouble

setTop60 :: Double
         -> OptionButton a0
         -> IO ()
setTop60 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell22 :: OptionButton a0
                 -> IO (Range ())
getTopLeftCell22 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible73 :: OptionButton a0
             -> IO Bool
getVisible73 =
  propertyGet "Visible"
              []
              outBool

setVisible73 :: Bool
             -> OptionButton a0
             -> IO ()
setVisible73 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth64 :: OptionButton a0
           -> IO Double
getWidth64 =
  propertyGet "Width"
              []
              outDouble

setWidth59 :: Double
           -> OptionButton a0
           -> IO ()
setWidth59 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder44 :: OptionButton a0
            -> IO Int32
getZOrder44 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange46 :: OptionButton a0
                -> IO (ShapeRange ())
getShapeRange46 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption52 :: OptionButton a0
             -> IO String
getCaption52 =
  propertyGet "Caption"
              []
              outString

setCaption50 :: String
             -> OptionButton a0
             -> IO ()
setCaption50 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters36 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> OptionButton a0
                -> IO (Characters ())
getCharacters36 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling38 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> OptionButton a0
                -> IO a1
checkSpelling38 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText29 :: OptionButton a0
                -> IO Bool
getLockedText29 =
  propertyGet "LockedText"
              []
              outBool

setLockedText29 :: Bool
                -> OptionButton a0
                -> IO ()
setLockedText29 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText43 :: OptionButton a0
          -> IO String
getText43 =
  propertyGet "Text"
              []
              outString

setText41 :: String
          -> OptionButton a0
          -> IO ()
setText41 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator15 :: OptionButton a0
                 -> IO a1
getAccelerator15 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator15 :: a1
                 -> OptionButton a0
                 -> IO ()
setAccelerator15 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getBorder52 :: OptionButton a0
            -> IO (Border ())
getBorder52 =
  propertyGet "Border"
              []
              outIUnknown

getDefault138 :: OptionButton a0
              -> IO Int32
getDefault138 =
  propertyGet "_Default"
              []
              outInt32

setDefault29 :: Int32
             -> OptionButton a0
             -> IO ()
setDefault29 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading17 :: OptionButton a0
                      -> IO Bool
getDisplay3DShading17 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading17 :: Bool
                      -> OptionButton a0
                      -> IO ()
setDisplay3DShading17 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getInterior50 :: OptionButton a0
              -> IO (Interior ())
getInterior50 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell17 :: OptionButton a0
                -> IO String
getLinkedCell17 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell17 :: String
                -> OptionButton a0
                -> IO ()
setLinkedCell17 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getPhoneticAccelerator15 :: OptionButton a0
                         -> IO a1
getPhoneticAccelerator15 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator15 :: a1
                         -> OptionButton a0
                         -> IO ()
setPhoneticAccelerator15 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

getValue43 :: OptionButton a0
           -> IO a1
getValue43 =
  propertyGet "Value"
              []
              outVariant

setValue35 :: a1
           -> OptionButton a0
           -> IO ()
setValue35 rhs =
  propertySet "Value"
              [inVariant rhs]

getGroupBox1 :: OptionButton a0
             -> IO (GroupBox ())
getGroupBox1 =
  propertyGet "GroupBox"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface OptionButtons
-- 
-- --------------------------------------------------
data OptionButtons_ a = OptionButtons__ 
type OptionButtons a = IDispatch (OptionButtons_ a)
iidOptionButtons :: IID (OptionButtons ())
iidOptionButtons = mkIID "{00020882-0000-0000-C000-000000000046}"

queryInterface53 :: (Variant a1)
                 => GUID
                 -> OptionButtons a0
                 -> IO a1
queryInterface53 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef53 :: OptionButtons a0
         -> IO Word32
addRef53 =
  function1 "AddRef"
            []
            outWord32

release53 :: OptionButtons a0
          -> IO Word32
release53 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount53 :: OptionButtons a0
                   -> IO Word32
getTypeInfoCount53 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo53 :: (Variant a1)
              => Word32
              -> Word32
              -> OptionButtons a0
              -> IO a1
getTypeInfo53 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames53 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> OptionButtons a0
                -> IO Int32
getIDsOfNames53 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke53 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> OptionButtons a0
         -> IO (a1, a2, Word32)
invoke53 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication321 :: (Variant a1)
                  => OptionButtons a0
                  -> IO a1
getApplication321 =
  propertyGet "Application"
              []
              outVariant

getCreator321 :: OptionButtons a0
              -> IO XlCreator
getCreator321 =
  propertyGet "Creator"
              []
              outEnum

getParent336 :: OptionButtons a0
             -> IO (IDispatch ())
getParent336 =
  propertyGet "Parent"
              []
              outIDispatch

dummy329 :: OptionButtons a0
         -> IO ()
dummy329 =
  method0 "_Dummy3"
          []

bringToFront46 :: OptionButtons a0
               -> IO a1
bringToFront46 =
  function1 "BringToFront"
            []
            outVariant

copy66 :: OptionButtons a0
       -> IO a1
copy66 =
  function1 "Copy"
            []
            outVariant

copyPicture51 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> OptionButtons a0
              -> IO a1
copyPicture51 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut49 :: OptionButtons a0
      -> IO a1
cut49 =
  function1 "Cut"
            []
            outVariant

delete150 :: OptionButtons a0
          -> IO a1
delete150 =
  function1 "Delete"
            []
            outVariant

duplicate49 :: OptionButtons a0
            -> IO (IDispatch ())
duplicate49 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled56 :: OptionButtons a0
             -> IO Bool
getEnabled56 =
  propertyGet "Enabled"
              []
              outBool

setEnabled56 :: Bool
             -> OptionButtons a0
             -> IO ()
setEnabled56 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight63 :: OptionButtons a0
            -> IO Double
getHeight63 =
  propertyGet "Height"
              []
              outDouble

setHeight58 :: Double
            -> OptionButtons a0
            -> IO ()
setHeight58 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1226 :: OptionButtons a0
          -> IO ()
dummy1226 =
  method0 "_Dummy12"
          []

getLeft66 :: OptionButtons a0
          -> IO Double
getLeft66 =
  propertyGet "Left"
              []
              outDouble

setLeft61 :: Double
          -> OptionButtons a0
          -> IO ()
setLeft61 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked55 :: OptionButtons a0
            -> IO Bool
getLocked55 =
  propertyGet "Locked"
              []
              outBool

setLocked55 :: Bool
            -> OptionButtons a0
            -> IO ()
setLocked55 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1525 :: OptionButtons a0
          -> IO ()
dummy1525 =
  method0 "_Dummy15"
          []

getOnAction52 :: OptionButtons a0
              -> IO String
getOnAction52 =
  propertyGet "OnAction"
              []
              outString

setOnAction52 :: String
              -> OptionButtons a0
              -> IO ()
setOnAction52 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement47 :: OptionButtons a0
               -> IO a1
getPlacement47 =
  propertyGet "Placement"
              []
              outVariant

setPlacement47 :: a1
               -> OptionButtons a0
               -> IO ()
setPlacement47 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject47 :: OptionButtons a0
                 -> IO Bool
getPrintObject47 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject47 :: Bool
                 -> OptionButtons a0
                 -> IO ()
setPrintObject47 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select90 :: (Variant a2)
         => a2
         -> OptionButtons a0
         -> IO a1
select90 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack46 :: OptionButtons a0
             -> IO a1
sendToBack46 =
  function1 "SendToBack"
            []
            outVariant

getTop66 :: OptionButtons a0
         -> IO Double
getTop66 =
  propertyGet "Top"
              []
              outDouble

setTop61 :: Double
         -> OptionButtons a0
         -> IO ()
setTop61 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2224 :: OptionButtons a0
          -> IO ()
dummy2224 =
  method0 "_Dummy22"
          []

getVisible74 :: OptionButtons a0
             -> IO Bool
getVisible74 =
  propertyGet "Visible"
              []
              outBool

setVisible74 :: Bool
             -> OptionButtons a0
             -> IO ()
setVisible74 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth65 :: OptionButtons a0
           -> IO Double
getWidth65 =
  propertyGet "Width"
              []
              outDouble

setWidth60 :: Double
           -> OptionButtons a0
           -> IO ()
setWidth60 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder45 :: OptionButtons a0
            -> IO Int32
getZOrder45 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange47 :: OptionButtons a0
                -> IO (ShapeRange ())
getShapeRange47 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption53 :: OptionButtons a0
             -> IO String
getCaption53 =
  propertyGet "Caption"
              []
              outString

setCaption51 :: String
             -> OptionButtons a0
             -> IO ()
setCaption51 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters37 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> OptionButtons a0
                -> IO (Characters ())
getCharacters37 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling39 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> OptionButtons a0
                -> IO a1
checkSpelling39 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText30 :: OptionButtons a0
                -> IO Bool
getLockedText30 =
  propertyGet "LockedText"
              []
              outBool

setLockedText30 :: Bool
                -> OptionButtons a0
                -> IO ()
setLockedText30 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText44 :: OptionButtons a0
          -> IO String
getText44 =
  propertyGet "Text"
              []
              outString

setText42 :: String
          -> OptionButtons a0
          -> IO ()
setText42 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator16 :: OptionButtons a0
                 -> IO a1
getAccelerator16 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator16 :: a1
                 -> OptionButtons a0
                 -> IO ()
setAccelerator16 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getBorder53 :: OptionButtons a0
            -> IO (Border ())
getBorder53 =
  propertyGet "Border"
              []
              outIUnknown

getDefault139 :: OptionButtons a0
              -> IO Int32
getDefault139 =
  propertyGet "_Default"
              []
              outInt32

setDefault30 :: Int32
             -> OptionButtons a0
             -> IO ()
setDefault30 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading18 :: OptionButtons a0
                      -> IO Bool
getDisplay3DShading18 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading18 :: Bool
                      -> OptionButtons a0
                      -> IO ()
setDisplay3DShading18 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getInterior51 :: OptionButtons a0
              -> IO (Interior ())
getInterior51 =
  propertyGet "Interior"
              []
              outIUnknown

getLinkedCell18 :: OptionButtons a0
                -> IO String
getLinkedCell18 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell18 :: String
                -> OptionButtons a0
                -> IO ()
setLinkedCell18 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getPhoneticAccelerator16 :: OptionButtons a0
                         -> IO a1
getPhoneticAccelerator16 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator16 :: a1
                         -> OptionButtons a0
                         -> IO ()
setPhoneticAccelerator16 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

getValue44 :: OptionButtons a0
           -> IO a1
getValue44 =
  propertyGet "Value"
              []
              outVariant

setValue36 :: a1
           -> OptionButtons a0
           -> IO ()
setValue36 rhs =
  propertySet "Value"
              [inVariant rhs]

getGroupBox2 :: OptionButtons a0
             -> IO (GroupBox ())
getGroupBox2 =
  propertyGet "GroupBox"
              []
              outIUnknown

add95 :: Double
      -> Double
      -> Double
      -> Double
      -> OptionButtons a0
      -> IO (OptionButton ())
add95 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount140 :: OptionButtons a0
            -> IO Int32
getCount140 =
  propertyGet "Count"
              []
              outInt32

group26 :: OptionButtons a0
        -> IO (GroupObject ())
group26 =
  function1 "Group"
            []
            outIUnknown

item65 :: a1
       -> OptionButtons a0
       -> IO (IDispatch ())
item65 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum51 :: OptionButtons a0
          -> IO (IUnknown ())
newEnum51 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface EditBox
-- 
-- --------------------------------------------------
data EditBox_ a = EditBox__ 
type EditBox a = IDispatch (EditBox_ a)
iidEditBox :: IID (EditBox ())
iidEditBox = mkIID "{00020883-0000-0000-C000-000000000046}"

queryInterface54 :: (Variant a1)
                 => GUID
                 -> EditBox a0
                 -> IO a1
queryInterface54 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef54 :: EditBox a0
         -> IO Word32
addRef54 =
  function1 "AddRef"
            []
            outWord32

release54 :: EditBox a0
          -> IO Word32
release54 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount54 :: EditBox a0
                   -> IO Word32
getTypeInfoCount54 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo54 :: (Variant a1)
              => Word32
              -> Word32
              -> EditBox a0
              -> IO a1
getTypeInfo54 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames54 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> EditBox a0
                -> IO Int32
getIDsOfNames54 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke54 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> EditBox a0
         -> IO (a1, a2, Word32)
invoke54 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication322 :: (Variant a1)
                  => EditBox a0
                  -> IO a1
getApplication322 =
  propertyGet "Application"
              []
              outVariant

getCreator322 :: EditBox a0
              -> IO XlCreator
getCreator322 =
  propertyGet "Creator"
              []
              outEnum

getParent337 :: EditBox a0
             -> IO (IDispatch ())
getParent337 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell23 :: EditBox a0
                     -> IO (Range ())
getBottomRightCell23 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront47 :: EditBox a0
               -> IO a1
bringToFront47 =
  function1 "BringToFront"
            []
            outVariant

copy67 :: EditBox a0
       -> IO a1
copy67 =
  function1 "Copy"
            []
            outVariant

copyPicture52 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> EditBox a0
              -> IO a1
copyPicture52 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut50 :: EditBox a0
      -> IO a1
cut50 =
  function1 "Cut"
            []
            outVariant

delete151 :: EditBox a0
          -> IO a1
delete151 =
  function1 "Delete"
            []
            outVariant

duplicate50 :: EditBox a0
            -> IO (IDispatch ())
duplicate50 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled57 :: EditBox a0
             -> IO Bool
getEnabled57 =
  propertyGet "Enabled"
              []
              outBool

setEnabled57 :: Bool
             -> EditBox a0
             -> IO ()
setEnabled57 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight64 :: EditBox a0
            -> IO Double
getHeight64 =
  propertyGet "Height"
              []
              outDouble

setHeight59 :: Double
            -> EditBox a0
            -> IO ()
setHeight59 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex51 :: EditBox a0
           -> IO Int32
getIndex51 =
  propertyGet "Index"
              []
              outInt32

getLeft67 :: EditBox a0
          -> IO Double
getLeft67 =
  propertyGet "Left"
              []
              outDouble

setLeft62 :: Double
          -> EditBox a0
          -> IO ()
setLeft62 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked56 :: EditBox a0
            -> IO Bool
getLocked56 =
  propertyGet "Locked"
              []
              outBool

setLocked56 :: Bool
            -> EditBox a0
            -> IO ()
setLocked56 rhs =
  propertySet "Locked"
              [inBool rhs]

getName92 :: EditBox a0
          -> IO String
getName92 =
  propertyGet "Name"
              []
              outString

setName52 :: String
          -> EditBox a0
          -> IO ()
setName52 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction53 :: EditBox a0
              -> IO String
getOnAction53 =
  propertyGet "OnAction"
              []
              outString

setOnAction53 :: String
              -> EditBox a0
              -> IO ()
setOnAction53 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement48 :: EditBox a0
               -> IO a1
getPlacement48 =
  propertyGet "Placement"
              []
              outVariant

setPlacement48 :: a1
               -> EditBox a0
               -> IO ()
setPlacement48 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject48 :: EditBox a0
                 -> IO Bool
getPrintObject48 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject48 :: Bool
                 -> EditBox a0
                 -> IO ()
setPrintObject48 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select91 :: (Variant a2)
         => a2
         -> EditBox a0
         -> IO a1
select91 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack47 :: EditBox a0
             -> IO a1
sendToBack47 =
  function1 "SendToBack"
            []
            outVariant

getTop67 :: EditBox a0
         -> IO Double
getTop67 =
  propertyGet "Top"
              []
              outDouble

setTop62 :: Double
         -> EditBox a0
         -> IO ()
setTop62 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell23 :: EditBox a0
                 -> IO (Range ())
getTopLeftCell23 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible75 :: EditBox a0
             -> IO Bool
getVisible75 =
  propertyGet "Visible"
              []
              outBool

setVisible75 :: Bool
             -> EditBox a0
             -> IO ()
setVisible75 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth66 :: EditBox a0
           -> IO Double
getWidth66 =
  propertyGet "Width"
              []
              outDouble

setWidth61 :: Double
           -> EditBox a0
           -> IO ()
setWidth61 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder46 :: EditBox a0
            -> IO Int32
getZOrder46 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange48 :: EditBox a0
                -> IO (ShapeRange ())
getShapeRange48 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption54 :: EditBox a0
             -> IO String
getCaption54 =
  propertyGet "Caption"
              []
              outString

setCaption52 :: String
             -> EditBox a0
             -> IO ()
setCaption52 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters38 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> EditBox a0
                -> IO (Characters ())
getCharacters38 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling40 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> EditBox a0
                -> IO a1
checkSpelling40 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText31 :: EditBox a0
                -> IO Bool
getLockedText31 =
  propertyGet "LockedText"
              []
              outBool

setLockedText31 :: Bool
                -> EditBox a0
                -> IO ()
setLockedText31 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText45 :: EditBox a0
          -> IO String
getText45 =
  propertyGet "Text"
              []
              outString

setText43 :: String
          -> EditBox a0
          -> IO ()
setText43 rhs =
  propertySet "Text"
              [inString rhs]

getDisplayVerticalScrollBar5 :: EditBox a0
                             -> IO Bool
getDisplayVerticalScrollBar5 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar5 :: Bool
                             -> EditBox a0
                             -> IO ()
setDisplayVerticalScrollBar5 rhs =
  propertySet "DisplayVerticalScrollBar"
              [inBool rhs]

getInputType3 :: EditBox a0
              -> IO Int32
getInputType3 =
  propertyGet "InputType"
              []
              outInt32

setInputType3 :: Int32
              -> EditBox a0
              -> IO ()
setInputType3 rhs =
  propertySet "InputType"
              [inInt32 rhs]

getLinkedObject2 :: EditBox a0
                 -> IO String
getLinkedObject2 =
  propertyGet "LinkedObject"
              []
              outString

getMultiLine3 :: EditBox a0
              -> IO Bool
getMultiLine3 =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine3 :: Bool
              -> EditBox a0
              -> IO ()
setMultiLine3 rhs =
  propertySet "MultiLine"
              [inBool rhs]

getPasswordEdit1 :: EditBox a0
                 -> IO Bool
getPasswordEdit1 =
  propertyGet "PasswordEdit"
              []
              outBool

setPasswordEdit1 :: Bool
                 -> EditBox a0
                 -> IO ()
setPasswordEdit1 rhs =
  propertySet "PasswordEdit"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface EditBoxes
-- 
-- --------------------------------------------------
data EditBoxes_ a = EditBoxes__ 
type EditBoxes a = IDispatch (EditBoxes_ a)
iidEditBoxes :: IID (EditBoxes ())
iidEditBoxes = mkIID "{00020884-0000-0000-C000-000000000046}"

queryInterface55 :: (Variant a1)
                 => GUID
                 -> EditBoxes a0
                 -> IO a1
queryInterface55 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef55 :: EditBoxes a0
         -> IO Word32
addRef55 =
  function1 "AddRef"
            []
            outWord32

release55 :: EditBoxes a0
          -> IO Word32
release55 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount55 :: EditBoxes a0
                   -> IO Word32
getTypeInfoCount55 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo55 :: (Variant a1)
              => Word32
              -> Word32
              -> EditBoxes a0
              -> IO a1
getTypeInfo55 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames55 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> EditBoxes a0
                -> IO Int32
getIDsOfNames55 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke55 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> EditBoxes a0
         -> IO (a1, a2, Word32)
invoke55 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication323 :: (Variant a1)
                  => EditBoxes a0
                  -> IO a1
getApplication323 =
  propertyGet "Application"
              []
              outVariant

getCreator323 :: EditBoxes a0
              -> IO XlCreator
getCreator323 =
  propertyGet "Creator"
              []
              outEnum

getParent338 :: EditBoxes a0
             -> IO (IDispatch ())
getParent338 =
  propertyGet "Parent"
              []
              outIDispatch

dummy335 :: EditBoxes a0
         -> IO ()
dummy335 =
  method0 "_Dummy3"
          []

bringToFront48 :: EditBoxes a0
               -> IO a1
bringToFront48 =
  function1 "BringToFront"
            []
            outVariant

copy68 :: EditBoxes a0
       -> IO a1
copy68 =
  function1 "Copy"
            []
            outVariant

copyPicture53 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> EditBoxes a0
              -> IO a1
copyPicture53 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut51 :: EditBoxes a0
      -> IO a1
cut51 =
  function1 "Cut"
            []
            outVariant

delete152 :: EditBoxes a0
          -> IO a1
delete152 =
  function1 "Delete"
            []
            outVariant

duplicate51 :: EditBoxes a0
            -> IO (IDispatch ())
duplicate51 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled58 :: EditBoxes a0
             -> IO Bool
getEnabled58 =
  propertyGet "Enabled"
              []
              outBool

setEnabled58 :: Bool
             -> EditBoxes a0
             -> IO ()
setEnabled58 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight65 :: EditBoxes a0
            -> IO Double
getHeight65 =
  propertyGet "Height"
              []
              outDouble

setHeight60 :: Double
            -> EditBoxes a0
            -> IO ()
setHeight60 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1227 :: EditBoxes a0
          -> IO ()
dummy1227 =
  method0 "_Dummy12"
          []

getLeft68 :: EditBoxes a0
          -> IO Double
getLeft68 =
  propertyGet "Left"
              []
              outDouble

setLeft63 :: Double
          -> EditBoxes a0
          -> IO ()
setLeft63 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked57 :: EditBoxes a0
            -> IO Bool
getLocked57 =
  propertyGet "Locked"
              []
              outBool

setLocked57 :: Bool
            -> EditBoxes a0
            -> IO ()
setLocked57 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1526 :: EditBoxes a0
          -> IO ()
dummy1526 =
  method0 "_Dummy15"
          []

getOnAction54 :: EditBoxes a0
              -> IO String
getOnAction54 =
  propertyGet "OnAction"
              []
              outString

setOnAction54 :: String
              -> EditBoxes a0
              -> IO ()
setOnAction54 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement49 :: EditBoxes a0
               -> IO a1
getPlacement49 =
  propertyGet "Placement"
              []
              outVariant

setPlacement49 :: a1
               -> EditBoxes a0
               -> IO ()
setPlacement49 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject49 :: EditBoxes a0
                 -> IO Bool
getPrintObject49 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject49 :: Bool
                 -> EditBoxes a0
                 -> IO ()
setPrintObject49 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select92 :: (Variant a2)
         => a2
         -> EditBoxes a0
         -> IO a1
select92 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack48 :: EditBoxes a0
             -> IO a1
sendToBack48 =
  function1 "SendToBack"
            []
            outVariant

getTop68 :: EditBoxes a0
         -> IO Double
getTop68 =
  propertyGet "Top"
              []
              outDouble

setTop63 :: Double
         -> EditBoxes a0
         -> IO ()
setTop63 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2225 :: EditBoxes a0
          -> IO ()
dummy2225 =
  method0 "_Dummy22"
          []

getVisible76 :: EditBoxes a0
             -> IO Bool
getVisible76 =
  propertyGet "Visible"
              []
              outBool

setVisible76 :: Bool
             -> EditBoxes a0
             -> IO ()
setVisible76 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth67 :: EditBoxes a0
           -> IO Double
getWidth67 =
  propertyGet "Width"
              []
              outDouble

setWidth62 :: Double
           -> EditBoxes a0
           -> IO ()
setWidth62 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder47 :: EditBoxes a0
            -> IO Int32
getZOrder47 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange49 :: EditBoxes a0
                -> IO (ShapeRange ())
getShapeRange49 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption55 :: EditBoxes a0
             -> IO String
getCaption55 =
  propertyGet "Caption"
              []
              outString

setCaption53 :: String
             -> EditBoxes a0
             -> IO ()
setCaption53 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters39 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> EditBoxes a0
                -> IO (Characters ())
getCharacters39 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling41 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> EditBoxes a0
                -> IO a1
checkSpelling41 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText32 :: EditBoxes a0
                -> IO Bool
getLockedText32 =
  propertyGet "LockedText"
              []
              outBool

setLockedText32 :: Bool
                -> EditBoxes a0
                -> IO ()
setLockedText32 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText46 :: EditBoxes a0
          -> IO String
getText46 =
  propertyGet "Text"
              []
              outString

setText44 :: String
          -> EditBoxes a0
          -> IO ()
setText44 rhs =
  propertySet "Text"
              [inString rhs]

getDisplayVerticalScrollBar6 :: EditBoxes a0
                             -> IO Bool
getDisplayVerticalScrollBar6 =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar6 :: Bool
                             -> EditBoxes a0
                             -> IO ()
setDisplayVerticalScrollBar6 rhs =
  propertySet "DisplayVerticalScrollBar"
              [inBool rhs]

getInputType4 :: EditBoxes a0
              -> IO Int32
getInputType4 =
  propertyGet "InputType"
              []
              outInt32

setInputType4 :: Int32
              -> EditBoxes a0
              -> IO ()
setInputType4 rhs =
  propertySet "InputType"
              [inInt32 rhs]

dummy343 :: EditBoxes a0
         -> IO ()
dummy343 =
  method0 "_Dummy34"
          []

getMultiLine4 :: EditBoxes a0
              -> IO Bool
getMultiLine4 =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine4 :: Bool
              -> EditBoxes a0
              -> IO ()
setMultiLine4 rhs =
  propertySet "MultiLine"
              [inBool rhs]

getPasswordEdit2 :: EditBoxes a0
                 -> IO Bool
getPasswordEdit2 =
  propertyGet "PasswordEdit"
              []
              outBool

setPasswordEdit2 :: Bool
                 -> EditBoxes a0
                 -> IO ()
setPasswordEdit2 rhs =
  propertySet "PasswordEdit"
              [inBool rhs]

add96 :: Double
      -> Double
      -> Double
      -> Double
      -> EditBoxes a0
      -> IO (EditBox ())
add96 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount141 :: EditBoxes a0
            -> IO Int32
getCount141 =
  propertyGet "Count"
              []
              outInt32

group27 :: EditBoxes a0
        -> IO (GroupObject ())
group27 =
  function1 "Group"
            []
            outIUnknown

item66 :: a2
       -> EditBoxes a0
       -> IO a1
item66 index1 =
  function1 "Item"
            [inVariant index1]
            outVariant

newEnum52 :: EditBoxes a0
          -> IO (IUnknown ())
newEnum52 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ScrollBar
-- 
-- --------------------------------------------------
data ScrollBar_ a = ScrollBar__ 
type ScrollBar a = IDispatch (ScrollBar_ a)
iidScrollBar :: IID (ScrollBar ())
iidScrollBar = mkIID "{00020885-0000-0000-C000-000000000046}"

queryInterface56 :: (Variant a1)
                 => GUID
                 -> ScrollBar a0
                 -> IO a1
queryInterface56 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef56 :: ScrollBar a0
         -> IO Word32
addRef56 =
  function1 "AddRef"
            []
            outWord32

release56 :: ScrollBar a0
          -> IO Word32
release56 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount56 :: ScrollBar a0
                   -> IO Word32
getTypeInfoCount56 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo56 :: (Variant a1)
              => Word32
              -> Word32
              -> ScrollBar a0
              -> IO a1
getTypeInfo56 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames56 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> ScrollBar a0
                -> IO Int32
getIDsOfNames56 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke56 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> ScrollBar a0
         -> IO (a1, a2, Word32)
invoke56 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication324 :: (Variant a1)
                  => ScrollBar a0
                  -> IO a1
getApplication324 =
  propertyGet "Application"
              []
              outVariant

getCreator324 :: ScrollBar a0
              -> IO XlCreator
getCreator324 =
  propertyGet "Creator"
              []
              outEnum

getParent339 :: ScrollBar a0
             -> IO (IDispatch ())
getParent339 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell24 :: ScrollBar a0
                     -> IO (Range ())
getBottomRightCell24 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront49 :: ScrollBar a0
               -> IO a1
bringToFront49 =
  function1 "BringToFront"
            []
            outVariant

copy69 :: ScrollBar a0
       -> IO a1
copy69 =
  function1 "Copy"
            []
            outVariant

copyPicture54 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> ScrollBar a0
              -> IO a1
copyPicture54 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut52 :: ScrollBar a0
      -> IO a1
cut52 =
  function1 "Cut"
            []
            outVariant

delete153 :: ScrollBar a0
          -> IO a1
delete153 =
  function1 "Delete"
            []
            outVariant

duplicate52 :: ScrollBar a0
            -> IO (IDispatch ())
duplicate52 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled59 :: ScrollBar a0
             -> IO Bool
getEnabled59 =
  propertyGet "Enabled"
              []
              outBool

setEnabled59 :: Bool
             -> ScrollBar a0
             -> IO ()
setEnabled59 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight66 :: ScrollBar a0
            -> IO Double
getHeight66 =
  propertyGet "Height"
              []
              outDouble

setHeight61 :: Double
            -> ScrollBar a0
            -> IO ()
setHeight61 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex52 :: ScrollBar a0
           -> IO Int32
getIndex52 =
  propertyGet "Index"
              []
              outInt32

getLeft69 :: ScrollBar a0
          -> IO Double
getLeft69 =
  propertyGet "Left"
              []
              outDouble

setLeft64 :: Double
          -> ScrollBar a0
          -> IO ()
setLeft64 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked58 :: ScrollBar a0
            -> IO Bool
getLocked58 =
  propertyGet "Locked"
              []
              outBool

setLocked58 :: Bool
            -> ScrollBar a0
            -> IO ()
setLocked58 rhs =
  propertySet "Locked"
              [inBool rhs]

getName93 :: ScrollBar a0
          -> IO String
getName93 =
  propertyGet "Name"
              []
              outString

setName53 :: String
          -> ScrollBar a0
          -> IO ()
setName53 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction55 :: ScrollBar a0
              -> IO String
getOnAction55 =
  propertyGet "OnAction"
              []
              outString

setOnAction55 :: String
              -> ScrollBar a0
              -> IO ()
setOnAction55 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement50 :: ScrollBar a0
               -> IO a1
getPlacement50 =
  propertyGet "Placement"
              []
              outVariant

setPlacement50 :: a1
               -> ScrollBar a0
               -> IO ()
setPlacement50 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject50 :: ScrollBar a0
                 -> IO Bool
getPrintObject50 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject50 :: Bool
                 -> ScrollBar a0
                 -> IO ()
setPrintObject50 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select93 :: (Variant a2)
         => a2
         -> ScrollBar a0
         -> IO a1
select93 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack49 :: ScrollBar a0
             -> IO a1
sendToBack49 =
  function1 "SendToBack"
            []
            outVariant

getTop69 :: ScrollBar a0
         -> IO Double
getTop69 =
  propertyGet "Top"
              []
              outDouble

setTop64 :: Double
         -> ScrollBar a0
         -> IO ()
setTop64 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell24 :: ScrollBar a0
                 -> IO (Range ())
getTopLeftCell24 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible77 :: ScrollBar a0
             -> IO Bool
getVisible77 =
  propertyGet "Visible"
              []
              outBool

setVisible77 :: Bool
             -> ScrollBar a0
             -> IO ()
setVisible77 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth68 :: ScrollBar a0
           -> IO Double
getWidth68 =
  propertyGet "Width"
              []
              outDouble

setWidth63 :: Double
           -> ScrollBar a0
           -> IO ()
setWidth63 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder48 :: ScrollBar a0
            -> IO Int32
getZOrder48 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange50 :: ScrollBar a0
                -> IO (ShapeRange ())
getShapeRange50 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault140 :: ScrollBar a0
              -> IO Int32
getDefault140 =
  propertyGet "_Default"
              []
              outInt32

setDefault31 :: Int32
             -> ScrollBar a0
             -> IO ()
setDefault31 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading19 :: ScrollBar a0
                      -> IO Bool
getDisplay3DShading19 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading19 :: Bool
                      -> ScrollBar a0
                      -> IO ()
setDisplay3DShading19 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getLinkedCell19 :: ScrollBar a0
                -> IO String
getLinkedCell19 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell19 :: String
                -> ScrollBar a0
                -> IO ()
setLinkedCell19 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getMax6 :: ScrollBar a0
        -> IO Int32
getMax6 =
  propertyGet "Max"
              []
              outInt32

setMax6 :: Int32
        -> ScrollBar a0
        -> IO ()
setMax6 rhs =
  propertySet "Max"
              [inInt32 rhs]

getMin6 :: ScrollBar a0
        -> IO Int32
getMin6 =
  propertyGet "Min"
              []
              outInt32

setMin6 :: Int32
        -> ScrollBar a0
        -> IO ()
setMin6 rhs =
  propertySet "Min"
              [inInt32 rhs]

getSmallChange6 :: ScrollBar a0
                -> IO Int32
getSmallChange6 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange6 :: Int32
                -> ScrollBar a0
                -> IO ()
setSmallChange6 rhs =
  propertySet "SmallChange"
              [inInt32 rhs]

getValue45 :: ScrollBar a0
           -> IO Int32
getValue45 =
  propertyGet "Value"
              []
              outInt32

setValue37 :: Int32
           -> ScrollBar a0
           -> IO ()
setValue37 rhs =
  propertySet "Value"
              [inInt32 rhs]

getLargeChange4 :: ScrollBar a0
                -> IO Int32
getLargeChange4 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange4 :: Int32
                -> ScrollBar a0
                -> IO ()
setLargeChange4 rhs =
  propertySet "LargeChange"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface ScrollBars
-- 
-- --------------------------------------------------
data ScrollBars_ a = ScrollBars__ 
type ScrollBars a = IDispatch (ScrollBars_ a)
iidScrollBars :: IID (ScrollBars ())
iidScrollBars = mkIID "{00020886-0000-0000-C000-000000000046}"

queryInterface57 :: (Variant a1)
                 => GUID
                 -> ScrollBars a0
                 -> IO a1
queryInterface57 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef57 :: ScrollBars a0
         -> IO Word32
addRef57 =
  function1 "AddRef"
            []
            outWord32

release57 :: ScrollBars a0
          -> IO Word32
release57 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount57 :: ScrollBars a0
                   -> IO Word32
getTypeInfoCount57 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo57 :: (Variant a1)
              => Word32
              -> Word32
              -> ScrollBars a0
              -> IO a1
getTypeInfo57 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames57 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> ScrollBars a0
                -> IO Int32
getIDsOfNames57 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke57 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> ScrollBars a0
         -> IO (a1, a2, Word32)
invoke57 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication325 :: (Variant a1)
                  => ScrollBars a0
                  -> IO a1
getApplication325 =
  propertyGet "Application"
              []
              outVariant

getCreator325 :: ScrollBars a0
              -> IO XlCreator
getCreator325 =
  propertyGet "Creator"
              []
              outEnum

getParent340 :: ScrollBars a0
             -> IO (IDispatch ())
getParent340 =
  propertyGet "Parent"
              []
              outIDispatch

dummy336 :: ScrollBars a0
         -> IO ()
dummy336 =
  method0 "_Dummy3"
          []

bringToFront50 :: ScrollBars a0
               -> IO a1
bringToFront50 =
  function1 "BringToFront"
            []
            outVariant

copy70 :: ScrollBars a0
       -> IO a1
copy70 =
  function1 "Copy"
            []
            outVariant

copyPicture55 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> ScrollBars a0
              -> IO a1
copyPicture55 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut53 :: ScrollBars a0
      -> IO a1
cut53 =
  function1 "Cut"
            []
            outVariant

delete154 :: ScrollBars a0
          -> IO a1
delete154 =
  function1 "Delete"
            []
            outVariant

duplicate53 :: ScrollBars a0
            -> IO (IDispatch ())
duplicate53 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled60 :: ScrollBars a0
             -> IO Bool
getEnabled60 =
  propertyGet "Enabled"
              []
              outBool

setEnabled60 :: Bool
             -> ScrollBars a0
             -> IO ()
setEnabled60 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight67 :: ScrollBars a0
            -> IO Double
getHeight67 =
  propertyGet "Height"
              []
              outDouble

setHeight62 :: Double
            -> ScrollBars a0
            -> IO ()
setHeight62 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1228 :: ScrollBars a0
          -> IO ()
dummy1228 =
  method0 "_Dummy12"
          []

getLeft70 :: ScrollBars a0
          -> IO Double
getLeft70 =
  propertyGet "Left"
              []
              outDouble

setLeft65 :: Double
          -> ScrollBars a0
          -> IO ()
setLeft65 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked59 :: ScrollBars a0
            -> IO Bool
getLocked59 =
  propertyGet "Locked"
              []
              outBool

setLocked59 :: Bool
            -> ScrollBars a0
            -> IO ()
setLocked59 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1527 :: ScrollBars a0
          -> IO ()
dummy1527 =
  method0 "_Dummy15"
          []

getOnAction56 :: ScrollBars a0
              -> IO String
getOnAction56 =
  propertyGet "OnAction"
              []
              outString

setOnAction56 :: String
              -> ScrollBars a0
              -> IO ()
setOnAction56 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement51 :: ScrollBars a0
               -> IO a1
getPlacement51 =
  propertyGet "Placement"
              []
              outVariant

setPlacement51 :: a1
               -> ScrollBars a0
               -> IO ()
setPlacement51 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject51 :: ScrollBars a0
                 -> IO Bool
getPrintObject51 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject51 :: Bool
                 -> ScrollBars a0
                 -> IO ()
setPrintObject51 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select94 :: (Variant a2)
         => a2
         -> ScrollBars a0
         -> IO a1
select94 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack50 :: ScrollBars a0
             -> IO a1
sendToBack50 =
  function1 "SendToBack"
            []
            outVariant

getTop70 :: ScrollBars a0
         -> IO Double
getTop70 =
  propertyGet "Top"
              []
              outDouble

setTop65 :: Double
         -> ScrollBars a0
         -> IO ()
setTop65 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2226 :: ScrollBars a0
          -> IO ()
dummy2226 =
  method0 "_Dummy22"
          []

getVisible78 :: ScrollBars a0
             -> IO Bool
getVisible78 =
  propertyGet "Visible"
              []
              outBool

setVisible78 :: Bool
             -> ScrollBars a0
             -> IO ()
setVisible78 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth69 :: ScrollBars a0
           -> IO Double
getWidth69 =
  propertyGet "Width"
              []
              outDouble

setWidth64 :: Double
           -> ScrollBars a0
           -> IO ()
setWidth64 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder49 :: ScrollBars a0
            -> IO Int32
getZOrder49 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange51 :: ScrollBars a0
                -> IO (ShapeRange ())
getShapeRange51 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault141 :: ScrollBars a0
              -> IO Int32
getDefault141 =
  propertyGet "_Default"
              []
              outInt32

setDefault32 :: Int32
             -> ScrollBars a0
             -> IO ()
setDefault32 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading20 :: ScrollBars a0
                      -> IO Bool
getDisplay3DShading20 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading20 :: Bool
                      -> ScrollBars a0
                      -> IO ()
setDisplay3DShading20 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getLinkedCell20 :: ScrollBars a0
                -> IO String
getLinkedCell20 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell20 :: String
                -> ScrollBars a0
                -> IO ()
setLinkedCell20 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getMax7 :: ScrollBars a0
        -> IO Int32
getMax7 =
  propertyGet "Max"
              []
              outInt32

setMax7 :: Int32
        -> ScrollBars a0
        -> IO ()
setMax7 rhs =
  propertySet "Max"
              [inInt32 rhs]

getMin7 :: ScrollBars a0
        -> IO Int32
getMin7 =
  propertyGet "Min"
              []
              outInt32

setMin7 :: Int32
        -> ScrollBars a0
        -> IO ()
setMin7 rhs =
  propertySet "Min"
              [inInt32 rhs]

getSmallChange7 :: ScrollBars a0
                -> IO Int32
getSmallChange7 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange7 :: Int32
                -> ScrollBars a0
                -> IO ()
setSmallChange7 rhs =
  propertySet "SmallChange"
              [inInt32 rhs]

getValue46 :: ScrollBars a0
           -> IO Int32
getValue46 =
  propertyGet "Value"
              []
              outInt32

setValue38 :: Int32
           -> ScrollBars a0
           -> IO ()
setValue38 rhs =
  propertySet "Value"
              [inInt32 rhs]

getLargeChange5 :: ScrollBars a0
                -> IO Int32
getLargeChange5 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange5 :: Int32
                -> ScrollBars a0
                -> IO ()
setLargeChange5 rhs =
  propertySet "LargeChange"
              [inInt32 rhs]

add97 :: Double
      -> Double
      -> Double
      -> Double
      -> ScrollBars a0
      -> IO (ScrollBar ())
add97 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount142 :: ScrollBars a0
            -> IO Int32
getCount142 =
  propertyGet "Count"
              []
              outInt32

group28 :: ScrollBars a0
        -> IO (GroupObject ())
group28 =
  function1 "Group"
            []
            outIUnknown

item67 :: a1
       -> ScrollBars a0
       -> IO (IDispatch ())
item67 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum53 :: ScrollBars a0
          -> IO (IUnknown ())
newEnum53 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ListBox
-- 
-- --------------------------------------------------
data ListBox_ a = ListBox__ 
type ListBox a = IDispatch (ListBox_ a)
iidListBox :: IID (ListBox ())
iidListBox = mkIID "{00020887-0000-0000-C000-000000000046}"

queryInterface58 :: (Variant a1)
                 => GUID
                 -> ListBox a0
                 -> IO a1
queryInterface58 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef58 :: ListBox a0
         -> IO Word32
addRef58 =
  function1 "AddRef"
            []
            outWord32

release58 :: ListBox a0
          -> IO Word32
release58 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount58 :: ListBox a0
                   -> IO Word32
getTypeInfoCount58 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo58 :: (Variant a1)
              => Word32
              -> Word32
              -> ListBox a0
              -> IO a1
getTypeInfo58 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames58 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> ListBox a0
                -> IO Int32
getIDsOfNames58 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke58 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> ListBox a0
         -> IO (a1, a2, Word32)
invoke58 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication326 :: (Variant a1)
                  => ListBox a0
                  -> IO a1
getApplication326 =
  propertyGet "Application"
              []
              outVariant

getCreator326 :: ListBox a0
              -> IO XlCreator
getCreator326 =
  propertyGet "Creator"
              []
              outEnum

getParent341 :: ListBox a0
             -> IO (IDispatch ())
getParent341 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell25 :: ListBox a0
                     -> IO (Range ())
getBottomRightCell25 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront51 :: ListBox a0
               -> IO a1
bringToFront51 =
  function1 "BringToFront"
            []
            outVariant

copy71 :: ListBox a0
       -> IO a1
copy71 =
  function1 "Copy"
            []
            outVariant

copyPicture56 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> ListBox a0
              -> IO a1
copyPicture56 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut54 :: ListBox a0
      -> IO a1
cut54 =
  function1 "Cut"
            []
            outVariant

delete155 :: ListBox a0
          -> IO a1
delete155 =
  function1 "Delete"
            []
            outVariant

duplicate54 :: ListBox a0
            -> IO (IDispatch ())
duplicate54 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled61 :: ListBox a0
             -> IO Bool
getEnabled61 =
  propertyGet "Enabled"
              []
              outBool

setEnabled61 :: Bool
             -> ListBox a0
             -> IO ()
setEnabled61 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight68 :: ListBox a0
            -> IO Double
getHeight68 =
  propertyGet "Height"
              []
              outDouble

setHeight63 :: Double
            -> ListBox a0
            -> IO ()
setHeight63 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex53 :: ListBox a0
           -> IO Int32
getIndex53 =
  propertyGet "Index"
              []
              outInt32

getLeft71 :: ListBox a0
          -> IO Double
getLeft71 =
  propertyGet "Left"
              []
              outDouble

setLeft66 :: Double
          -> ListBox a0
          -> IO ()
setLeft66 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked60 :: ListBox a0
            -> IO Bool
getLocked60 =
  propertyGet "Locked"
              []
              outBool

setLocked60 :: Bool
            -> ListBox a0
            -> IO ()
setLocked60 rhs =
  propertySet "Locked"
              [inBool rhs]

getName94 :: ListBox a0
          -> IO String
getName94 =
  propertyGet "Name"
              []
              outString

setName54 :: String
          -> ListBox a0
          -> IO ()
setName54 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction57 :: ListBox a0
              -> IO String
getOnAction57 =
  propertyGet "OnAction"
              []
              outString

setOnAction57 :: String
              -> ListBox a0
              -> IO ()
setOnAction57 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement52 :: ListBox a0
               -> IO a1
getPlacement52 =
  propertyGet "Placement"
              []
              outVariant

setPlacement52 :: a1
               -> ListBox a0
               -> IO ()
setPlacement52 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject52 :: ListBox a0
                 -> IO Bool
getPrintObject52 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject52 :: Bool
                 -> ListBox a0
                 -> IO ()
setPrintObject52 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select95 :: (Variant a2)
         => a2
         -> ListBox a0
         -> IO a1
select95 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack51 :: ListBox a0
             -> IO a1
sendToBack51 =
  function1 "SendToBack"
            []
            outVariant

getTop71 :: ListBox a0
         -> IO Double
getTop71 =
  propertyGet "Top"
              []
              outDouble

setTop66 :: Double
         -> ListBox a0
         -> IO ()
setTop66 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell25 :: ListBox a0
                 -> IO (Range ())
getTopLeftCell25 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible79 :: ListBox a0
             -> IO Bool
getVisible79 =
  propertyGet "Visible"
              []
              outBool

setVisible79 :: Bool
             -> ListBox a0
             -> IO ()
setVisible79 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth70 :: ListBox a0
           -> IO Double
getWidth70 =
  propertyGet "Width"
              []
              outDouble

setWidth65 :: Double
           -> ListBox a0
           -> IO ()
setWidth65 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder50 :: ListBox a0
            -> IO Int32
getZOrder50 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange52 :: ListBox a0
                -> IO (ShapeRange ())
getShapeRange52 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem6 :: (Variant a3)
         => a2
         -> a3
         -> ListBox a0
         -> IO a1
addItem6 text2 index1 =
  function1 "AddItem"
            [ inVariant text2
            , inVariant index1
            ]
            outVariant

getDisplay3DShading21 :: ListBox a0
                      -> IO Bool
getDisplay3DShading21 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading21 :: Bool
                      -> ListBox a0
                      -> IO ()
setDisplay3DShading21 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getDefault142 :: ListBox a0
              -> IO Int32
getDefault142 =
  propertyGet "_Default"
              []
              outInt32

setDefault33 :: Int32
             -> ListBox a0
             -> IO ()
setDefault33 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getLinkedCell21 :: ListBox a0
                -> IO String
getLinkedCell21 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell21 :: String
                -> ListBox a0
                -> IO ()
setLinkedCell21 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getLinkedObject3 :: ListBox a0
                 -> IO a1
getLinkedObject3 =
  propertyGet "LinkedObject"
              []
              outVariant

getList3 :: (Variant a2)
         => a2
         -> ListBox a0
         -> IO a1
getList3 index1 =
  propertyGet "List"
              [inVariant index1]
              outVariant

setList3 :: (Variant a1)
         => a1
         -> a2
         -> ListBox a0
         -> IO ()
setList3 index1 rhs =
  propertySet "List"
              [ inVariant index1
              , inVariant rhs
              ]

getListCount2 :: ListBox a0
              -> IO Int32
getListCount2 =
  propertyGet "ListCount"
              []
              outInt32

getListFillRange7 :: ListBox a0
                  -> IO String
getListFillRange7 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange7 :: String
                  -> ListBox a0
                  -> IO ()
setListFillRange7 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getListIndex6 :: ListBox a0
              -> IO Int32
getListIndex6 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex6 :: Int32
              -> ListBox a0
              -> IO ()
setListIndex6 rhs =
  propertySet "ListIndex"
              [inInt32 rhs]

getMultiSelect4 :: ListBox a0
                -> IO Int32
getMultiSelect4 =
  propertyGet "MultiSelect"
              []
              outInt32

setMultiSelect4 :: Int32
                -> ListBox a0
                -> IO ()
setMultiSelect4 rhs =
  propertySet "MultiSelect"
              [inInt32 rhs]

removeAllItems6 :: ListBox a0
                -> IO a1
removeAllItems6 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem6 :: (Variant a2)
            => Int32
            -> a2
            -> ListBox a0
            -> IO a1
removeItem6 index1 count1 =
  function1 "RemoveItem"
            [ inInt32 index1
            , inVariant count1
            ]
            outVariant

getSelected3 :: (Variant a2)
             => a2
             -> ListBox a0
             -> IO a1
getSelected3 index1 =
  propertyGet "Selected"
              [inVariant index1]
              outVariant

setSelected3 :: (Variant a1)
             => a1
             -> a2
             -> ListBox a0
             -> IO ()
setSelected3 index1 rhs =
  propertySet "Selected"
              [ inVariant index1
              , inVariant rhs
              ]

getValue47 :: ListBox a0
           -> IO Int32
getValue47 =
  propertyGet "Value"
              []
              outInt32

setValue39 :: Int32
           -> ListBox a0
           -> IO ()
setValue39 rhs =
  propertySet "Value"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface ListBoxes
-- 
-- --------------------------------------------------
data ListBoxes_ a = ListBoxes__ 
type ListBoxes a = IDispatch (ListBoxes_ a)
iidListBoxes :: IID (ListBoxes ())
iidListBoxes = mkIID "{00020888-0000-0000-C000-000000000046}"

queryInterface59 :: (Variant a1)
                 => GUID
                 -> ListBoxes a0
                 -> IO a1
queryInterface59 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef59 :: ListBoxes a0
         -> IO Word32
addRef59 =
  function1 "AddRef"
            []
            outWord32

release59 :: ListBoxes a0
          -> IO Word32
release59 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount59 :: ListBoxes a0
                   -> IO Word32
getTypeInfoCount59 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo59 :: (Variant a1)
              => Word32
              -> Word32
              -> ListBoxes a0
              -> IO a1
getTypeInfo59 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames59 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> ListBoxes a0
                -> IO Int32
getIDsOfNames59 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke59 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> ListBoxes a0
         -> IO (a1, a2, Word32)
invoke59 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication327 :: (Variant a1)
                  => ListBoxes a0
                  -> IO a1
getApplication327 =
  propertyGet "Application"
              []
              outVariant

getCreator327 :: ListBoxes a0
              -> IO XlCreator
getCreator327 =
  propertyGet "Creator"
              []
              outEnum

getParent342 :: ListBoxes a0
             -> IO (IDispatch ())
getParent342 =
  propertyGet "Parent"
              []
              outIDispatch

dummy337 :: ListBoxes a0
         -> IO ()
dummy337 =
  method0 "_Dummy3"
          []

bringToFront52 :: ListBoxes a0
               -> IO a1
bringToFront52 =
  function1 "BringToFront"
            []
            outVariant

copy72 :: ListBoxes a0
       -> IO a1
copy72 =
  function1 "Copy"
            []
            outVariant

copyPicture57 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> ListBoxes a0
              -> IO a1
copyPicture57 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut55 :: ListBoxes a0
      -> IO a1
cut55 =
  function1 "Cut"
            []
            outVariant

delete156 :: ListBoxes a0
          -> IO a1
delete156 =
  function1 "Delete"
            []
            outVariant

duplicate55 :: ListBoxes a0
            -> IO (IDispatch ())
duplicate55 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled62 :: ListBoxes a0
             -> IO Bool
getEnabled62 =
  propertyGet "Enabled"
              []
              outBool

setEnabled62 :: Bool
             -> ListBoxes a0
             -> IO ()
setEnabled62 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight69 :: ListBoxes a0
            -> IO Double
getHeight69 =
  propertyGet "Height"
              []
              outDouble

setHeight64 :: Double
            -> ListBoxes a0
            -> IO ()
setHeight64 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1229 :: ListBoxes a0
          -> IO ()
dummy1229 =
  method0 "_Dummy12"
          []

getLeft72 :: ListBoxes a0
          -> IO Double
getLeft72 =
  propertyGet "Left"
              []
              outDouble

setLeft67 :: Double
          -> ListBoxes a0
          -> IO ()
setLeft67 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked61 :: ListBoxes a0
            -> IO Bool
getLocked61 =
  propertyGet "Locked"
              []
              outBool

setLocked61 :: Bool
            -> ListBoxes a0
            -> IO ()
setLocked61 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1528 :: ListBoxes a0
          -> IO ()
dummy1528 =
  method0 "_Dummy15"
          []

getOnAction58 :: ListBoxes a0
              -> IO String
getOnAction58 =
  propertyGet "OnAction"
              []
              outString

setOnAction58 :: String
              -> ListBoxes a0
              -> IO ()
setOnAction58 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement53 :: ListBoxes a0
               -> IO a1
getPlacement53 =
  propertyGet "Placement"
              []
              outVariant

setPlacement53 :: a1
               -> ListBoxes a0
               -> IO ()
setPlacement53 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject53 :: ListBoxes a0
                 -> IO Bool
getPrintObject53 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject53 :: Bool
                 -> ListBoxes a0
                 -> IO ()
setPrintObject53 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select96 :: (Variant a2)
         => a2
         -> ListBoxes a0
         -> IO a1
select96 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack52 :: ListBoxes a0
             -> IO a1
sendToBack52 =
  function1 "SendToBack"
            []
            outVariant

getTop72 :: ListBoxes a0
         -> IO Double
getTop72 =
  propertyGet "Top"
              []
              outDouble

setTop67 :: Double
         -> ListBoxes a0
         -> IO ()
setTop67 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2227 :: ListBoxes a0
          -> IO ()
dummy2227 =
  method0 "_Dummy22"
          []

getVisible80 :: ListBoxes a0
             -> IO Bool
getVisible80 =
  propertyGet "Visible"
              []
              outBool

setVisible80 :: Bool
             -> ListBoxes a0
             -> IO ()
setVisible80 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth71 :: ListBoxes a0
           -> IO Double
getWidth71 =
  propertyGet "Width"
              []
              outDouble

setWidth66 :: Double
           -> ListBoxes a0
           -> IO ()
setWidth66 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder51 :: ListBoxes a0
            -> IO Int32
getZOrder51 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange53 :: ListBoxes a0
                -> IO (ShapeRange ())
getShapeRange53 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem7 :: (Variant a3)
         => a2
         -> a3
         -> ListBoxes a0
         -> IO a1
addItem7 text2 index1 =
  function1 "AddItem"
            [ inVariant text2
            , inVariant index1
            ]
            outVariant

getDisplay3DShading22 :: ListBoxes a0
                      -> IO Bool
getDisplay3DShading22 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading22 :: Bool
                      -> ListBoxes a0
                      -> IO ()
setDisplay3DShading22 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getDefault143 :: ListBoxes a0
              -> IO Int32
getDefault143 =
  propertyGet "_Default"
              []
              outInt32

setDefault34 :: Int32
             -> ListBoxes a0
             -> IO ()
setDefault34 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getLinkedCell22 :: ListBoxes a0
                -> IO String
getLinkedCell22 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell22 :: String
                -> ListBoxes a0
                -> IO ()
setLinkedCell22 rhs =
  propertySet "LinkedCell"
              [inString rhs]

dummy3111 :: ListBoxes a0
          -> IO ()
dummy3111 =
  method0 "_Dummy31"
          []

getList4 :: (Variant a2)
         => a2
         -> ListBoxes a0
         -> IO a1
getList4 index1 =
  propertyGet "List"
              [inVariant index1]
              outVariant

setList4 :: (Variant a1)
         => a1
         -> a2
         -> ListBoxes a0
         -> IO ()
setList4 index1 rhs =
  propertySet "List"
              [ inVariant index1
              , inVariant rhs
              ]

dummy338 :: ListBoxes a0
         -> IO ()
dummy338 =
  method0 "_Dummy33"
          []

getListFillRange8 :: ListBoxes a0
                  -> IO String
getListFillRange8 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange8 :: String
                  -> ListBoxes a0
                  -> IO ()
setListFillRange8 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getListIndex7 :: ListBoxes a0
              -> IO Int32
getListIndex7 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex7 :: Int32
              -> ListBoxes a0
              -> IO ()
setListIndex7 rhs =
  propertySet "ListIndex"
              [inInt32 rhs]

getMultiSelect5 :: ListBoxes a0
                -> IO Int32
getMultiSelect5 =
  propertyGet "MultiSelect"
              []
              outInt32

setMultiSelect5 :: Int32
                -> ListBoxes a0
                -> IO ()
setMultiSelect5 rhs =
  propertySet "MultiSelect"
              [inInt32 rhs]

removeAllItems7 :: ListBoxes a0
                -> IO a1
removeAllItems7 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem7 :: (Variant a2)
            => Int32
            -> a2
            -> ListBoxes a0
            -> IO a1
removeItem7 index1 count1 =
  function1 "RemoveItem"
            [ inInt32 index1
            , inVariant count1
            ]
            outVariant

getSelected4 :: (Variant a2)
             => a2
             -> ListBoxes a0
             -> IO a1
getSelected4 index1 =
  propertyGet "Selected"
              [inVariant index1]
              outVariant

setSelected4 :: (Variant a1)
             => a1
             -> a2
             -> ListBoxes a0
             -> IO ()
setSelected4 index1 rhs =
  propertySet "Selected"
              [ inVariant index1
              , inVariant rhs
              ]

getValue48 :: ListBoxes a0
           -> IO Int32
getValue48 =
  propertyGet "Value"
              []
              outInt32

setValue40 :: Int32
           -> ListBoxes a0
           -> IO ()
setValue40 rhs =
  propertySet "Value"
              [inInt32 rhs]

add98 :: Double
      -> Double
      -> Double
      -> Double
      -> ListBoxes a0
      -> IO (ListBox ())
add98 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount143 :: ListBoxes a0
            -> IO Int32
getCount143 =
  propertyGet "Count"
              []
              outInt32

group29 :: ListBoxes a0
        -> IO (GroupObject ())
group29 =
  function1 "Group"
            []
            outIUnknown

item68 :: a1
       -> ListBoxes a0
       -> IO (IDispatch ())
item68 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum54 :: ListBoxes a0
          -> IO (IUnknown ())
newEnum54 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface GroupBox
-- 
-- --------------------------------------------------
data GroupBox_ a = GroupBox__ 
type GroupBox a = IDispatch (GroupBox_ a)
iidGroupBox :: IID (GroupBox ())
iidGroupBox = mkIID "{00020889-0000-0000-C000-000000000046}"

queryInterface60 :: (Variant a1)
                 => GUID
                 -> GroupBox a0
                 -> IO a1
queryInterface60 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef60 :: GroupBox a0
         -> IO Word32
addRef60 =
  function1 "AddRef"
            []
            outWord32

release60 :: GroupBox a0
          -> IO Word32
release60 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount60 :: GroupBox a0
                   -> IO Word32
getTypeInfoCount60 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo60 :: (Variant a1)
              => Word32
              -> Word32
              -> GroupBox a0
              -> IO a1
getTypeInfo60 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames60 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> GroupBox a0
                -> IO Int32
getIDsOfNames60 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke60 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> GroupBox a0
         -> IO (a1, a2, Word32)
invoke60 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication328 :: (Variant a1)
                  => GroupBox a0
                  -> IO a1
getApplication328 =
  propertyGet "Application"
              []
              outVariant

getCreator328 :: GroupBox a0
              -> IO XlCreator
getCreator328 =
  propertyGet "Creator"
              []
              outEnum

getParent343 :: GroupBox a0
             -> IO (IDispatch ())
getParent343 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell26 :: GroupBox a0
                     -> IO (Range ())
getBottomRightCell26 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront53 :: GroupBox a0
               -> IO a1
bringToFront53 =
  function1 "BringToFront"
            []
            outVariant

copy73 :: GroupBox a0
       -> IO a1
copy73 =
  function1 "Copy"
            []
            outVariant

copyPicture58 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> GroupBox a0
              -> IO a1
copyPicture58 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut56 :: GroupBox a0
      -> IO a1
cut56 =
  function1 "Cut"
            []
            outVariant

delete157 :: GroupBox a0
          -> IO a1
delete157 =
  function1 "Delete"
            []
            outVariant

duplicate56 :: GroupBox a0
            -> IO (IDispatch ())
duplicate56 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled63 :: GroupBox a0
             -> IO Bool
getEnabled63 =
  propertyGet "Enabled"
              []
              outBool

setEnabled63 :: Bool
             -> GroupBox a0
             -> IO ()
setEnabled63 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight70 :: GroupBox a0
            -> IO Double
getHeight70 =
  propertyGet "Height"
              []
              outDouble

setHeight65 :: Double
            -> GroupBox a0
            -> IO ()
setHeight65 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex54 :: GroupBox a0
           -> IO Int32
getIndex54 =
  propertyGet "Index"
              []
              outInt32

getLeft73 :: GroupBox a0
          -> IO Double
getLeft73 =
  propertyGet "Left"
              []
              outDouble

setLeft68 :: Double
          -> GroupBox a0
          -> IO ()
setLeft68 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked62 :: GroupBox a0
            -> IO Bool
getLocked62 =
  propertyGet "Locked"
              []
              outBool

setLocked62 :: Bool
            -> GroupBox a0
            -> IO ()
setLocked62 rhs =
  propertySet "Locked"
              [inBool rhs]

getName95 :: GroupBox a0
          -> IO String
getName95 =
  propertyGet "Name"
              []
              outString

setName55 :: String
          -> GroupBox a0
          -> IO ()
setName55 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction59 :: GroupBox a0
              -> IO String
getOnAction59 =
  propertyGet "OnAction"
              []
              outString

setOnAction59 :: String
              -> GroupBox a0
              -> IO ()
setOnAction59 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement54 :: GroupBox a0
               -> IO a1
getPlacement54 =
  propertyGet "Placement"
              []
              outVariant

setPlacement54 :: a1
               -> GroupBox a0
               -> IO ()
setPlacement54 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject54 :: GroupBox a0
                 -> IO Bool
getPrintObject54 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject54 :: Bool
                 -> GroupBox a0
                 -> IO ()
setPrintObject54 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select97 :: (Variant a2)
         => a2
         -> GroupBox a0
         -> IO a1
select97 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack53 :: GroupBox a0
             -> IO a1
sendToBack53 =
  function1 "SendToBack"
            []
            outVariant

getTop73 :: GroupBox a0
         -> IO Double
getTop73 =
  propertyGet "Top"
              []
              outDouble

setTop68 :: Double
         -> GroupBox a0
         -> IO ()
setTop68 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell26 :: GroupBox a0
                 -> IO (Range ())
getTopLeftCell26 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible81 :: GroupBox a0
             -> IO Bool
getVisible81 =
  propertyGet "Visible"
              []
              outBool

setVisible81 :: Bool
             -> GroupBox a0
             -> IO ()
setVisible81 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth72 :: GroupBox a0
           -> IO Double
getWidth72 =
  propertyGet "Width"
              []
              outDouble

setWidth67 :: Double
           -> GroupBox a0
           -> IO ()
setWidth67 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder52 :: GroupBox a0
            -> IO Int32
getZOrder52 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange54 :: GroupBox a0
                -> IO (ShapeRange ())
getShapeRange54 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption56 :: GroupBox a0
             -> IO String
getCaption56 =
  propertyGet "Caption"
              []
              outString

setCaption54 :: String
             -> GroupBox a0
             -> IO ()
setCaption54 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters40 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> GroupBox a0
                -> IO (Characters ())
getCharacters40 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling42 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> GroupBox a0
                -> IO a1
checkSpelling42 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText33 :: GroupBox a0
                -> IO Bool
getLockedText33 =
  propertyGet "LockedText"
              []
              outBool

setLockedText33 :: Bool
                -> GroupBox a0
                -> IO ()
setLockedText33 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText47 :: GroupBox a0
          -> IO String
getText47 =
  propertyGet "Text"
              []
              outString

setText45 :: String
          -> GroupBox a0
          -> IO ()
setText45 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator17 :: GroupBox a0
                 -> IO a1
getAccelerator17 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator17 :: a1
                 -> GroupBox a0
                 -> IO ()
setAccelerator17 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getDisplay3DShading23 :: GroupBox a0
                      -> IO Bool
getDisplay3DShading23 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading23 :: Bool
                      -> GroupBox a0
                      -> IO ()
setDisplay3DShading23 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getPhoneticAccelerator17 :: GroupBox a0
                         -> IO a1
getPhoneticAccelerator17 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator17 :: a1
                         -> GroupBox a0
                         -> IO ()
setPhoneticAccelerator17 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface GroupBoxes
-- 
-- --------------------------------------------------
data GroupBoxes_ a = GroupBoxes__ 
type GroupBoxes a = IDispatch (GroupBoxes_ a)
iidGroupBoxes :: IID (GroupBoxes ())
iidGroupBoxes = mkIID "{0002088A-0000-0000-C000-000000000046}"

queryInterface61 :: (Variant a1)
                 => GUID
                 -> GroupBoxes a0
                 -> IO a1
queryInterface61 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef61 :: GroupBoxes a0
         -> IO Word32
addRef61 =
  function1 "AddRef"
            []
            outWord32

release61 :: GroupBoxes a0
          -> IO Word32
release61 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount61 :: GroupBoxes a0
                   -> IO Word32
getTypeInfoCount61 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo61 :: (Variant a1)
              => Word32
              -> Word32
              -> GroupBoxes a0
              -> IO a1
getTypeInfo61 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames61 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> GroupBoxes a0
                -> IO Int32
getIDsOfNames61 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke61 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> GroupBoxes a0
         -> IO (a1, a2, Word32)
invoke61 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication329 :: (Variant a1)
                  => GroupBoxes a0
                  -> IO a1
getApplication329 =
  propertyGet "Application"
              []
              outVariant

getCreator329 :: GroupBoxes a0
              -> IO XlCreator
getCreator329 =
  propertyGet "Creator"
              []
              outEnum

getParent344 :: GroupBoxes a0
             -> IO (IDispatch ())
getParent344 =
  propertyGet "Parent"
              []
              outIDispatch

dummy339 :: GroupBoxes a0
         -> IO ()
dummy339 =
  method0 "_Dummy3"
          []

bringToFront54 :: GroupBoxes a0
               -> IO a1
bringToFront54 =
  function1 "BringToFront"
            []
            outVariant

copy74 :: GroupBoxes a0
       -> IO a1
copy74 =
  function1 "Copy"
            []
            outVariant

copyPicture59 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> GroupBoxes a0
              -> IO a1
copyPicture59 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut57 :: GroupBoxes a0
      -> IO a1
cut57 =
  function1 "Cut"
            []
            outVariant

delete158 :: GroupBoxes a0
          -> IO a1
delete158 =
  function1 "Delete"
            []
            outVariant

duplicate57 :: GroupBoxes a0
            -> IO (IDispatch ())
duplicate57 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled64 :: GroupBoxes a0
             -> IO Bool
getEnabled64 =
  propertyGet "Enabled"
              []
              outBool

setEnabled64 :: Bool
             -> GroupBoxes a0
             -> IO ()
setEnabled64 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight71 :: GroupBoxes a0
            -> IO Double
getHeight71 =
  propertyGet "Height"
              []
              outDouble

setHeight66 :: Double
            -> GroupBoxes a0
            -> IO ()
setHeight66 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1230 :: GroupBoxes a0
          -> IO ()
dummy1230 =
  method0 "_Dummy12"
          []

getLeft74 :: GroupBoxes a0
          -> IO Double
getLeft74 =
  propertyGet "Left"
              []
              outDouble

setLeft69 :: Double
          -> GroupBoxes a0
          -> IO ()
setLeft69 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked63 :: GroupBoxes a0
            -> IO Bool
getLocked63 =
  propertyGet "Locked"
              []
              outBool

setLocked63 :: Bool
            -> GroupBoxes a0
            -> IO ()
setLocked63 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1529 :: GroupBoxes a0
          -> IO ()
dummy1529 =
  method0 "_Dummy15"
          []

getOnAction60 :: GroupBoxes a0
              -> IO String
getOnAction60 =
  propertyGet "OnAction"
              []
              outString

setOnAction60 :: String
              -> GroupBoxes a0
              -> IO ()
setOnAction60 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement55 :: GroupBoxes a0
               -> IO a1
getPlacement55 =
  propertyGet "Placement"
              []
              outVariant

setPlacement55 :: a1
               -> GroupBoxes a0
               -> IO ()
setPlacement55 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject55 :: GroupBoxes a0
                 -> IO Bool
getPrintObject55 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject55 :: Bool
                 -> GroupBoxes a0
                 -> IO ()
setPrintObject55 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select98 :: (Variant a2)
         => a2
         -> GroupBoxes a0
         -> IO a1
select98 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack54 :: GroupBoxes a0
             -> IO a1
sendToBack54 =
  function1 "SendToBack"
            []
            outVariant

getTop74 :: GroupBoxes a0
         -> IO Double
getTop74 =
  propertyGet "Top"
              []
              outDouble

setTop69 :: Double
         -> GroupBoxes a0
         -> IO ()
setTop69 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2228 :: GroupBoxes a0
          -> IO ()
dummy2228 =
  method0 "_Dummy22"
          []

getVisible82 :: GroupBoxes a0
             -> IO Bool
getVisible82 =
  propertyGet "Visible"
              []
              outBool

setVisible82 :: Bool
             -> GroupBoxes a0
             -> IO ()
setVisible82 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth73 :: GroupBoxes a0
           -> IO Double
getWidth73 =
  propertyGet "Width"
              []
              outDouble

setWidth68 :: Double
           -> GroupBoxes a0
           -> IO ()
setWidth68 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder53 :: GroupBoxes a0
            -> IO Int32
getZOrder53 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange55 :: GroupBoxes a0
                -> IO (ShapeRange ())
getShapeRange55 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption57 :: GroupBoxes a0
             -> IO String
getCaption57 =
  propertyGet "Caption"
              []
              outString

setCaption55 :: String
             -> GroupBoxes a0
             -> IO ()
setCaption55 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters41 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> GroupBoxes a0
                -> IO (Characters ())
getCharacters41 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling43 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> GroupBoxes a0
                -> IO a1
checkSpelling43 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText34 :: GroupBoxes a0
                -> IO Bool
getLockedText34 =
  propertyGet "LockedText"
              []
              outBool

setLockedText34 :: Bool
                -> GroupBoxes a0
                -> IO ()
setLockedText34 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText48 :: GroupBoxes a0
          -> IO String
getText48 =
  propertyGet "Text"
              []
              outString

setText46 :: String
          -> GroupBoxes a0
          -> IO ()
setText46 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator18 :: GroupBoxes a0
                 -> IO a1
getAccelerator18 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator18 :: a1
                 -> GroupBoxes a0
                 -> IO ()
setAccelerator18 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

getDisplay3DShading24 :: GroupBoxes a0
                      -> IO Bool
getDisplay3DShading24 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading24 :: Bool
                      -> GroupBoxes a0
                      -> IO ()
setDisplay3DShading24 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getPhoneticAccelerator18 :: GroupBoxes a0
                         -> IO a1
getPhoneticAccelerator18 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator18 :: a1
                         -> GroupBoxes a0
                         -> IO ()
setPhoneticAccelerator18 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

add99 :: Double
      -> Double
      -> Double
      -> Double
      -> GroupBoxes a0
      -> IO (GroupBox ())
add99 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount144 :: GroupBoxes a0
            -> IO Int32
getCount144 =
  propertyGet "Count"
              []
              outInt32

group30 :: GroupBoxes a0
        -> IO (GroupObject ())
group30 =
  function1 "Group"
            []
            outIUnknown

item69 :: a1
       -> GroupBoxes a0
       -> IO (IDispatch ())
item69 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum55 :: GroupBoxes a0
          -> IO (IUnknown ())
newEnum55 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DropDown
-- 
-- --------------------------------------------------
data DropDown_ a = DropDown__ 
type DropDown a = IDispatch (DropDown_ a)
iidDropDown :: IID (DropDown ())
iidDropDown = mkIID "{0002088B-0000-0000-C000-000000000046}"

queryInterface62 :: (Variant a1)
                 => GUID
                 -> DropDown a0
                 -> IO a1
queryInterface62 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef62 :: DropDown a0
         -> IO Word32
addRef62 =
  function1 "AddRef"
            []
            outWord32

release62 :: DropDown a0
          -> IO Word32
release62 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount62 :: DropDown a0
                   -> IO Word32
getTypeInfoCount62 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo62 :: (Variant a1)
              => Word32
              -> Word32
              -> DropDown a0
              -> IO a1
getTypeInfo62 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames62 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> DropDown a0
                -> IO Int32
getIDsOfNames62 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke62 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> DropDown a0
         -> IO (a1, a2, Word32)
invoke62 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication330 :: (Variant a1)
                  => DropDown a0
                  -> IO a1
getApplication330 =
  propertyGet "Application"
              []
              outVariant

getCreator330 :: DropDown a0
              -> IO XlCreator
getCreator330 =
  propertyGet "Creator"
              []
              outEnum

getParent345 :: DropDown a0
             -> IO (IDispatch ())
getParent345 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell27 :: DropDown a0
                     -> IO (Range ())
getBottomRightCell27 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront55 :: DropDown a0
               -> IO a1
bringToFront55 =
  function1 "BringToFront"
            []
            outVariant

copy75 :: DropDown a0
       -> IO a1
copy75 =
  function1 "Copy"
            []
            outVariant

copyPicture60 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> DropDown a0
              -> IO a1
copyPicture60 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut58 :: DropDown a0
      -> IO a1
cut58 =
  function1 "Cut"
            []
            outVariant

delete159 :: DropDown a0
          -> IO a1
delete159 =
  function1 "Delete"
            []
            outVariant

duplicate58 :: DropDown a0
            -> IO (IDispatch ())
duplicate58 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled65 :: DropDown a0
             -> IO Bool
getEnabled65 =
  propertyGet "Enabled"
              []
              outBool

setEnabled65 :: Bool
             -> DropDown a0
             -> IO ()
setEnabled65 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight72 :: DropDown a0
            -> IO Double
getHeight72 =
  propertyGet "Height"
              []
              outDouble

setHeight67 :: Double
            -> DropDown a0
            -> IO ()
setHeight67 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex55 :: DropDown a0
           -> IO Int32
getIndex55 =
  propertyGet "Index"
              []
              outInt32

getLeft75 :: DropDown a0
          -> IO Double
getLeft75 =
  propertyGet "Left"
              []
              outDouble

setLeft70 :: Double
          -> DropDown a0
          -> IO ()
setLeft70 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked64 :: DropDown a0
            -> IO Bool
getLocked64 =
  propertyGet "Locked"
              []
              outBool

setLocked64 :: Bool
            -> DropDown a0
            -> IO ()
setLocked64 rhs =
  propertySet "Locked"
              [inBool rhs]

getName96 :: DropDown a0
          -> IO String
getName96 =
  propertyGet "Name"
              []
              outString

setName56 :: String
          -> DropDown a0
          -> IO ()
setName56 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction61 :: DropDown a0
              -> IO String
getOnAction61 =
  propertyGet "OnAction"
              []
              outString

setOnAction61 :: String
              -> DropDown a0
              -> IO ()
setOnAction61 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement56 :: DropDown a0
               -> IO a1
getPlacement56 =
  propertyGet "Placement"
              []
              outVariant

setPlacement56 :: a1
               -> DropDown a0
               -> IO ()
setPlacement56 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject56 :: DropDown a0
                 -> IO Bool
getPrintObject56 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject56 :: Bool
                 -> DropDown a0
                 -> IO ()
setPrintObject56 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select99 :: (Variant a2)
         => a2
         -> DropDown a0
         -> IO a1
select99 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack55 :: DropDown a0
             -> IO a1
sendToBack55 =
  function1 "SendToBack"
            []
            outVariant

getTop75 :: DropDown a0
         -> IO Double
getTop75 =
  propertyGet "Top"
              []
              outDouble

setTop70 :: Double
         -> DropDown a0
         -> IO ()
setTop70 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell27 :: DropDown a0
                 -> IO (Range ())
getTopLeftCell27 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible83 :: DropDown a0
             -> IO Bool
getVisible83 =
  propertyGet "Visible"
              []
              outBool

setVisible83 :: Bool
             -> DropDown a0
             -> IO ()
setVisible83 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth74 :: DropDown a0
           -> IO Double
getWidth74 =
  propertyGet "Width"
              []
              outDouble

setWidth69 :: Double
           -> DropDown a0
           -> IO ()
setWidth69 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder54 :: DropDown a0
            -> IO Int32
getZOrder54 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange56 :: DropDown a0
                -> IO (ShapeRange ())
getShapeRange56 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem8 :: (Variant a3)
         => a2
         -> a3
         -> DropDown a0
         -> IO a1
addItem8 text2 index1 =
  function1 "AddItem"
            [ inVariant text2
            , inVariant index1
            ]
            outVariant

getDisplay3DShading25 :: DropDown a0
                      -> IO Bool
getDisplay3DShading25 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading25 :: Bool
                      -> DropDown a0
                      -> IO ()
setDisplay3DShading25 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getDefault144 :: DropDown a0
              -> IO Int32
getDefault144 =
  propertyGet "_Default"
              []
              outInt32

setDefault35 :: Int32
             -> DropDown a0
             -> IO ()
setDefault35 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getLinkedCell23 :: DropDown a0
                -> IO String
getLinkedCell23 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell23 :: String
                -> DropDown a0
                -> IO ()
setLinkedCell23 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getLinkedObject4 :: DropDown a0
                 -> IO a1
getLinkedObject4 =
  propertyGet "LinkedObject"
              []
              outVariant

getList5 :: (Variant a2)
         => a2
         -> DropDown a0
         -> IO a1
getList5 index1 =
  propertyGet "List"
              [inVariant index1]
              outVariant

setList5 :: (Variant a1)
         => a1
         -> a2
         -> DropDown a0
         -> IO ()
setList5 index1 rhs =
  propertySet "List"
              [ inVariant index1
              , inVariant rhs
              ]

getListCount3 :: DropDown a0
              -> IO Int32
getListCount3 =
  propertyGet "ListCount"
              []
              outInt32

getListFillRange9 :: DropDown a0
                  -> IO String
getListFillRange9 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange9 :: String
                  -> DropDown a0
                  -> IO ()
setListFillRange9 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getListIndex8 :: DropDown a0
              -> IO Int32
getListIndex8 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex8 :: Int32
              -> DropDown a0
              -> IO ()
setListIndex8 rhs =
  propertySet "ListIndex"
              [inInt32 rhs]

dummy366 :: DropDown a0
         -> IO ()
dummy366 =
  method0 "_Dummy36"
          []

removeAllItems8 :: DropDown a0
                -> IO a1
removeAllItems8 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem8 :: (Variant a2)
            => Int32
            -> a2
            -> DropDown a0
            -> IO a1
removeItem8 index1 count1 =
  function1 "RemoveItem"
            [ inInt32 index1
            , inVariant count1
            ]
            outVariant

getSelected5 :: (Variant a2)
             => a2
             -> DropDown a0
             -> IO a1
getSelected5 index1 =
  propertyGet "Selected"
              [inVariant index1]
              outVariant

setSelected5 :: (Variant a1)
             => a1
             -> a2
             -> DropDown a0
             -> IO ()
setSelected5 index1 rhs =
  propertySet "Selected"
              [ inVariant index1
              , inVariant rhs
              ]

getValue49 :: DropDown a0
           -> IO Int32
getValue49 =
  propertyGet "Value"
              []
              outInt32

setValue41 :: Int32
           -> DropDown a0
           -> IO ()
setValue41 rhs =
  propertySet "Value"
              [inInt32 rhs]

getCaption58 :: DropDown a0
             -> IO String
getCaption58 =
  propertyGet "Caption"
              []
              outString

setCaption56 :: String
             -> DropDown a0
             -> IO ()
setCaption56 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters42 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> DropDown a0
                -> IO (Characters ())
getCharacters42 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

getDropDownLines4 :: DropDown a0
                  -> IO Int32
getDropDownLines4 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines4 :: Int32
                  -> DropDown a0
                  -> IO ()
setDropDownLines4 rhs =
  propertySet "DropDownLines"
              [inInt32 rhs]

getText49 :: DropDown a0
          -> IO String
getText49 =
  propertyGet "Text"
              []
              outString

setText47 :: String
          -> DropDown a0
          -> IO ()
setText47 rhs =
  propertySet "Text"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface DropDowns
-- 
-- --------------------------------------------------
data DropDowns_ a = DropDowns__ 
type DropDowns a = IDispatch (DropDowns_ a)
iidDropDowns :: IID (DropDowns ())
iidDropDowns = mkIID "{0002088C-0000-0000-C000-000000000046}"

queryInterface63 :: (Variant a1)
                 => GUID
                 -> DropDowns a0
                 -> IO a1
queryInterface63 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef63 :: DropDowns a0
         -> IO Word32
addRef63 =
  function1 "AddRef"
            []
            outWord32

release63 :: DropDowns a0
          -> IO Word32
release63 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount63 :: DropDowns a0
                   -> IO Word32
getTypeInfoCount63 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo63 :: (Variant a1)
              => Word32
              -> Word32
              -> DropDowns a0
              -> IO a1
getTypeInfo63 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames63 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> DropDowns a0
                -> IO Int32
getIDsOfNames63 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke63 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> DropDowns a0
         -> IO (a1, a2, Word32)
invoke63 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication331 :: (Variant a1)
                  => DropDowns a0
                  -> IO a1
getApplication331 =
  propertyGet "Application"
              []
              outVariant

getCreator331 :: DropDowns a0
              -> IO XlCreator
getCreator331 =
  propertyGet "Creator"
              []
              outEnum

getParent346 :: DropDowns a0
             -> IO (IDispatch ())
getParent346 =
  propertyGet "Parent"
              []
              outIDispatch

dummy344 :: DropDowns a0
         -> IO ()
dummy344 =
  method0 "_Dummy3"
          []

bringToFront56 :: DropDowns a0
               -> IO a1
bringToFront56 =
  function1 "BringToFront"
            []
            outVariant

copy76 :: DropDowns a0
       -> IO a1
copy76 =
  function1 "Copy"
            []
            outVariant

copyPicture61 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> DropDowns a0
              -> IO a1
copyPicture61 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut59 :: DropDowns a0
      -> IO a1
cut59 =
  function1 "Cut"
            []
            outVariant

delete160 :: DropDowns a0
          -> IO a1
delete160 =
  function1 "Delete"
            []
            outVariant

duplicate59 :: DropDowns a0
            -> IO (IDispatch ())
duplicate59 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled66 :: DropDowns a0
             -> IO Bool
getEnabled66 =
  propertyGet "Enabled"
              []
              outBool

setEnabled66 :: Bool
             -> DropDowns a0
             -> IO ()
setEnabled66 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight73 :: DropDowns a0
            -> IO Double
getHeight73 =
  propertyGet "Height"
              []
              outDouble

setHeight68 :: Double
            -> DropDowns a0
            -> IO ()
setHeight68 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1231 :: DropDowns a0
          -> IO ()
dummy1231 =
  method0 "_Dummy12"
          []

getLeft76 :: DropDowns a0
          -> IO Double
getLeft76 =
  propertyGet "Left"
              []
              outDouble

setLeft71 :: Double
          -> DropDowns a0
          -> IO ()
setLeft71 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked65 :: DropDowns a0
            -> IO Bool
getLocked65 =
  propertyGet "Locked"
              []
              outBool

setLocked65 :: Bool
            -> DropDowns a0
            -> IO ()
setLocked65 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1530 :: DropDowns a0
          -> IO ()
dummy1530 =
  method0 "_Dummy15"
          []

getOnAction62 :: DropDowns a0
              -> IO String
getOnAction62 =
  propertyGet "OnAction"
              []
              outString

setOnAction62 :: String
              -> DropDowns a0
              -> IO ()
setOnAction62 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement57 :: DropDowns a0
               -> IO a1
getPlacement57 =
  propertyGet "Placement"
              []
              outVariant

setPlacement57 :: a1
               -> DropDowns a0
               -> IO ()
setPlacement57 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject57 :: DropDowns a0
                 -> IO Bool
getPrintObject57 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject57 :: Bool
                 -> DropDowns a0
                 -> IO ()
setPrintObject57 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select100 :: (Variant a2)
          => a2
          -> DropDowns a0
          -> IO a1
select100 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack56 :: DropDowns a0
             -> IO a1
sendToBack56 =
  function1 "SendToBack"
            []
            outVariant

getTop76 :: DropDowns a0
         -> IO Double
getTop76 =
  propertyGet "Top"
              []
              outDouble

setTop71 :: Double
         -> DropDowns a0
         -> IO ()
setTop71 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2229 :: DropDowns a0
          -> IO ()
dummy2229 =
  method0 "_Dummy22"
          []

getVisible84 :: DropDowns a0
             -> IO Bool
getVisible84 =
  propertyGet "Visible"
              []
              outBool

setVisible84 :: Bool
             -> DropDowns a0
             -> IO ()
setVisible84 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth75 :: DropDowns a0
           -> IO Double
getWidth75 =
  propertyGet "Width"
              []
              outDouble

setWidth70 :: Double
           -> DropDowns a0
           -> IO ()
setWidth70 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder55 :: DropDowns a0
            -> IO Int32
getZOrder55 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange57 :: DropDowns a0
                -> IO (ShapeRange ())
getShapeRange57 =
  propertyGet "ShapeRange"
              []
              outIUnknown

addItem9 :: (Variant a3)
         => a2
         -> a3
         -> DropDowns a0
         -> IO a1
addItem9 text2 index1 =
  function1 "AddItem"
            [ inVariant text2
            , inVariant index1
            ]
            outVariant

getDisplay3DShading26 :: DropDowns a0
                      -> IO Bool
getDisplay3DShading26 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading26 :: Bool
                      -> DropDowns a0
                      -> IO ()
setDisplay3DShading26 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getDefault145 :: DropDowns a0
              -> IO Int32
getDefault145 =
  propertyGet "_Default"
              []
              outInt32

setDefault36 :: Int32
             -> DropDowns a0
             -> IO ()
setDefault36 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getLinkedCell24 :: DropDowns a0
                -> IO String
getLinkedCell24 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell24 :: String
                -> DropDowns a0
                -> IO ()
setLinkedCell24 rhs =
  propertySet "LinkedCell"
              [inString rhs]

dummy3112 :: DropDowns a0
          -> IO ()
dummy3112 =
  method0 "_Dummy31"
          []

getList6 :: (Variant a2)
         => a2
         -> DropDowns a0
         -> IO a1
getList6 index1 =
  propertyGet "List"
              [inVariant index1]
              outVariant

setList6 :: (Variant a1)
         => a1
         -> a2
         -> DropDowns a0
         -> IO ()
setList6 index1 rhs =
  propertySet "List"
              [ inVariant index1
              , inVariant rhs
              ]

dummy3310 :: DropDowns a0
          -> IO ()
dummy3310 =
  method0 "_Dummy33"
          []

getListFillRange10 :: DropDowns a0
                   -> IO String
getListFillRange10 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange10 :: String
                   -> DropDowns a0
                   -> IO ()
setListFillRange10 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getListIndex9 :: DropDowns a0
              -> IO Int32
getListIndex9 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex9 :: Int32
              -> DropDowns a0
              -> IO ()
setListIndex9 rhs =
  propertySet "ListIndex"
              [inInt32 rhs]

dummy367 :: DropDowns a0
         -> IO ()
dummy367 =
  method0 "_Dummy36"
          []

removeAllItems9 :: DropDowns a0
                -> IO a1
removeAllItems9 =
  function1 "RemoveAllItems"
            []
            outVariant

removeItem9 :: (Variant a2)
            => Int32
            -> a2
            -> DropDowns a0
            -> IO a1
removeItem9 index1 count1 =
  function1 "RemoveItem"
            [ inInt32 index1
            , inVariant count1
            ]
            outVariant

getSelected6 :: (Variant a2)
             => a2
             -> DropDowns a0
             -> IO a1
getSelected6 index1 =
  propertyGet "Selected"
              [inVariant index1]
              outVariant

setSelected6 :: (Variant a1)
             => a1
             -> a2
             -> DropDowns a0
             -> IO ()
setSelected6 index1 rhs =
  propertySet "Selected"
              [ inVariant index1
              , inVariant rhs
              ]

getValue50 :: DropDowns a0
           -> IO Int32
getValue50 =
  propertyGet "Value"
              []
              outInt32

setValue42 :: Int32
           -> DropDowns a0
           -> IO ()
setValue42 rhs =
  propertySet "Value"
              [inInt32 rhs]

getCaption59 :: DropDowns a0
             -> IO String
getCaption59 =
  propertyGet "Caption"
              []
              outString

setCaption57 :: String
             -> DropDowns a0
             -> IO ()
setCaption57 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters43 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> DropDowns a0
                -> IO (Characters ())
getCharacters43 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

getDropDownLines5 :: DropDowns a0
                  -> IO Int32
getDropDownLines5 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines5 :: Int32
                  -> DropDowns a0
                  -> IO ()
setDropDownLines5 rhs =
  propertySet "DropDownLines"
              [inInt32 rhs]

getText50 :: DropDowns a0
          -> IO String
getText50 =
  propertyGet "Text"
              []
              outString

setText48 :: String
          -> DropDowns a0
          -> IO ()
setText48 rhs =
  propertySet "Text"
              [inString rhs]

add100 :: (Variant a1)
       => Double
       -> Double
       -> Double
       -> Double
       -> a1
       -> DropDowns a0
       -> IO (DropDown ())
add100 left top width height editable =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            , inVariant editable
            ]
            outIDispatch

getCount145 :: DropDowns a0
            -> IO Int32
getCount145 =
  propertyGet "Count"
              []
              outInt32

group31 :: DropDowns a0
        -> IO (GroupObject ())
group31 =
  function1 "Group"
            []
            outIUnknown

item70 :: a1
       -> DropDowns a0
       -> IO (IDispatch ())
item70 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum56 :: DropDowns a0
          -> IO (IUnknown ())
newEnum56 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Spinner
-- 
-- --------------------------------------------------
data Spinner_ a = Spinner__ 
type Spinner a = IDispatch (Spinner_ a)
iidSpinner :: IID (Spinner ())
iidSpinner = mkIID "{0002088D-0000-0000-C000-000000000046}"

queryInterface64 :: (Variant a1)
                 => GUID
                 -> Spinner a0
                 -> IO a1
queryInterface64 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef64 :: Spinner a0
         -> IO Word32
addRef64 =
  function1 "AddRef"
            []
            outWord32

release64 :: Spinner a0
          -> IO Word32
release64 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount64 :: Spinner a0
                   -> IO Word32
getTypeInfoCount64 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo64 :: (Variant a1)
              => Word32
              -> Word32
              -> Spinner a0
              -> IO a1
getTypeInfo64 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames64 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Spinner a0
                -> IO Int32
getIDsOfNames64 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke64 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Spinner a0
         -> IO (a1, a2, Word32)
invoke64 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication332 :: (Variant a1)
                  => Spinner a0
                  -> IO a1
getApplication332 =
  propertyGet "Application"
              []
              outVariant

getCreator332 :: Spinner a0
              -> IO XlCreator
getCreator332 =
  propertyGet "Creator"
              []
              outEnum

getParent347 :: Spinner a0
             -> IO (IDispatch ())
getParent347 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell28 :: Spinner a0
                     -> IO (Range ())
getBottomRightCell28 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront57 :: Spinner a0
               -> IO a1
bringToFront57 =
  function1 "BringToFront"
            []
            outVariant

copy77 :: Spinner a0
       -> IO a1
copy77 =
  function1 "Copy"
            []
            outVariant

copyPicture62 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Spinner a0
              -> IO a1
copyPicture62 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut60 :: Spinner a0
      -> IO a1
cut60 =
  function1 "Cut"
            []
            outVariant

delete161 :: Spinner a0
          -> IO a1
delete161 =
  function1 "Delete"
            []
            outVariant

duplicate60 :: Spinner a0
            -> IO (IDispatch ())
duplicate60 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled67 :: Spinner a0
             -> IO Bool
getEnabled67 =
  propertyGet "Enabled"
              []
              outBool

setEnabled67 :: Bool
             -> Spinner a0
             -> IO ()
setEnabled67 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight74 :: Spinner a0
            -> IO Double
getHeight74 =
  propertyGet "Height"
              []
              outDouble

setHeight69 :: Double
            -> Spinner a0
            -> IO ()
setHeight69 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex56 :: Spinner a0
           -> IO Int32
getIndex56 =
  propertyGet "Index"
              []
              outInt32

getLeft77 :: Spinner a0
          -> IO Double
getLeft77 =
  propertyGet "Left"
              []
              outDouble

setLeft72 :: Double
          -> Spinner a0
          -> IO ()
setLeft72 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked66 :: Spinner a0
            -> IO Bool
getLocked66 =
  propertyGet "Locked"
              []
              outBool

setLocked66 :: Bool
            -> Spinner a0
            -> IO ()
setLocked66 rhs =
  propertySet "Locked"
              [inBool rhs]

getName97 :: Spinner a0
          -> IO String
getName97 =
  propertyGet "Name"
              []
              outString

setName57 :: String
          -> Spinner a0
          -> IO ()
setName57 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction63 :: Spinner a0
              -> IO String
getOnAction63 =
  propertyGet "OnAction"
              []
              outString

setOnAction63 :: String
              -> Spinner a0
              -> IO ()
setOnAction63 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement58 :: Spinner a0
               -> IO a1
getPlacement58 =
  propertyGet "Placement"
              []
              outVariant

setPlacement58 :: a1
               -> Spinner a0
               -> IO ()
setPlacement58 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject58 :: Spinner a0
                 -> IO Bool
getPrintObject58 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject58 :: Bool
                 -> Spinner a0
                 -> IO ()
setPrintObject58 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select101 :: (Variant a2)
          => a2
          -> Spinner a0
          -> IO a1
select101 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack57 :: Spinner a0
             -> IO a1
sendToBack57 =
  function1 "SendToBack"
            []
            outVariant

getTop77 :: Spinner a0
         -> IO Double
getTop77 =
  propertyGet "Top"
              []
              outDouble

setTop72 :: Double
         -> Spinner a0
         -> IO ()
setTop72 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell28 :: Spinner a0
                 -> IO (Range ())
getTopLeftCell28 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible85 :: Spinner a0
             -> IO Bool
getVisible85 =
  propertyGet "Visible"
              []
              outBool

setVisible85 :: Bool
             -> Spinner a0
             -> IO ()
setVisible85 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth76 :: Spinner a0
           -> IO Double
getWidth76 =
  propertyGet "Width"
              []
              outDouble

setWidth71 :: Double
           -> Spinner a0
           -> IO ()
setWidth71 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder56 :: Spinner a0
            -> IO Int32
getZOrder56 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange58 :: Spinner a0
                -> IO (ShapeRange ())
getShapeRange58 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault146 :: Spinner a0
              -> IO Int32
getDefault146 =
  propertyGet "_Default"
              []
              outInt32

setDefault37 :: Int32
             -> Spinner a0
             -> IO ()
setDefault37 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading27 :: Spinner a0
                      -> IO Bool
getDisplay3DShading27 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading27 :: Bool
                      -> Spinner a0
                      -> IO ()
setDisplay3DShading27 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getLinkedCell25 :: Spinner a0
                -> IO String
getLinkedCell25 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell25 :: String
                -> Spinner a0
                -> IO ()
setLinkedCell25 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getMax8 :: Spinner a0
        -> IO Int32
getMax8 =
  propertyGet "Max"
              []
              outInt32

setMax8 :: Int32
        -> Spinner a0
        -> IO ()
setMax8 rhs =
  propertySet "Max"
              [inInt32 rhs]

getMin8 :: Spinner a0
        -> IO Int32
getMin8 =
  propertyGet "Min"
              []
              outInt32

setMin8 :: Int32
        -> Spinner a0
        -> IO ()
setMin8 rhs =
  propertySet "Min"
              [inInt32 rhs]

getSmallChange8 :: Spinner a0
                -> IO Int32
getSmallChange8 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange8 :: Int32
                -> Spinner a0
                -> IO ()
setSmallChange8 rhs =
  propertySet "SmallChange"
              [inInt32 rhs]

getValue51 :: Spinner a0
           -> IO Int32
getValue51 =
  propertyGet "Value"
              []
              outInt32

setValue43 :: Int32
           -> Spinner a0
           -> IO ()
setValue43 rhs =
  propertySet "Value"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface Spinners
-- 
-- --------------------------------------------------
data Spinners_ a = Spinners__ 
type Spinners a = IDispatch (Spinners_ a)
iidSpinners :: IID (Spinners ())
iidSpinners = mkIID "{0002088E-0000-0000-C000-000000000046}"

queryInterface65 :: (Variant a1)
                 => GUID
                 -> Spinners a0
                 -> IO a1
queryInterface65 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef65 :: Spinners a0
         -> IO Word32
addRef65 =
  function1 "AddRef"
            []
            outWord32

release65 :: Spinners a0
          -> IO Word32
release65 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount65 :: Spinners a0
                   -> IO Word32
getTypeInfoCount65 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo65 :: (Variant a1)
              => Word32
              -> Word32
              -> Spinners a0
              -> IO a1
getTypeInfo65 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames65 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Spinners a0
                -> IO Int32
getIDsOfNames65 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke65 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Spinners a0
         -> IO (a1, a2, Word32)
invoke65 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication333 :: (Variant a1)
                  => Spinners a0
                  -> IO a1
getApplication333 =
  propertyGet "Application"
              []
              outVariant

getCreator333 :: Spinners a0
              -> IO XlCreator
getCreator333 =
  propertyGet "Creator"
              []
              outEnum

getParent348 :: Spinners a0
             -> IO (IDispatch ())
getParent348 =
  propertyGet "Parent"
              []
              outIDispatch

dummy345 :: Spinners a0
         -> IO ()
dummy345 =
  method0 "_Dummy3"
          []

bringToFront58 :: Spinners a0
               -> IO a1
bringToFront58 =
  function1 "BringToFront"
            []
            outVariant

copy78 :: Spinners a0
       -> IO a1
copy78 =
  function1 "Copy"
            []
            outVariant

copyPicture63 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Spinners a0
              -> IO a1
copyPicture63 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut61 :: Spinners a0
      -> IO a1
cut61 =
  function1 "Cut"
            []
            outVariant

delete162 :: Spinners a0
          -> IO a1
delete162 =
  function1 "Delete"
            []
            outVariant

duplicate61 :: Spinners a0
            -> IO (IDispatch ())
duplicate61 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled68 :: Spinners a0
             -> IO Bool
getEnabled68 =
  propertyGet "Enabled"
              []
              outBool

setEnabled68 :: Bool
             -> Spinners a0
             -> IO ()
setEnabled68 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight75 :: Spinners a0
            -> IO Double
getHeight75 =
  propertyGet "Height"
              []
              outDouble

setHeight70 :: Double
            -> Spinners a0
            -> IO ()
setHeight70 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1232 :: Spinners a0
          -> IO ()
dummy1232 =
  method0 "_Dummy12"
          []

getLeft78 :: Spinners a0
          -> IO Double
getLeft78 =
  propertyGet "Left"
              []
              outDouble

setLeft73 :: Double
          -> Spinners a0
          -> IO ()
setLeft73 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked67 :: Spinners a0
            -> IO Bool
getLocked67 =
  propertyGet "Locked"
              []
              outBool

setLocked67 :: Bool
            -> Spinners a0
            -> IO ()
setLocked67 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1531 :: Spinners a0
          -> IO ()
dummy1531 =
  method0 "_Dummy15"
          []

getOnAction64 :: Spinners a0
              -> IO String
getOnAction64 =
  propertyGet "OnAction"
              []
              outString

setOnAction64 :: String
              -> Spinners a0
              -> IO ()
setOnAction64 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement59 :: Spinners a0
               -> IO a1
getPlacement59 =
  propertyGet "Placement"
              []
              outVariant

setPlacement59 :: a1
               -> Spinners a0
               -> IO ()
setPlacement59 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject59 :: Spinners a0
                 -> IO Bool
getPrintObject59 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject59 :: Bool
                 -> Spinners a0
                 -> IO ()
setPrintObject59 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select102 :: (Variant a2)
          => a2
          -> Spinners a0
          -> IO a1
select102 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack58 :: Spinners a0
             -> IO a1
sendToBack58 =
  function1 "SendToBack"
            []
            outVariant

getTop78 :: Spinners a0
         -> IO Double
getTop78 =
  propertyGet "Top"
              []
              outDouble

setTop73 :: Double
         -> Spinners a0
         -> IO ()
setTop73 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2230 :: Spinners a0
          -> IO ()
dummy2230 =
  method0 "_Dummy22"
          []

getVisible86 :: Spinners a0
             -> IO Bool
getVisible86 =
  propertyGet "Visible"
              []
              outBool

setVisible86 :: Bool
             -> Spinners a0
             -> IO ()
setVisible86 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth77 :: Spinners a0
           -> IO Double
getWidth77 =
  propertyGet "Width"
              []
              outDouble

setWidth72 :: Double
           -> Spinners a0
           -> IO ()
setWidth72 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder57 :: Spinners a0
            -> IO Int32
getZOrder57 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange59 :: Spinners a0
                -> IO (ShapeRange ())
getShapeRange59 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getDefault147 :: Spinners a0
              -> IO Int32
getDefault147 =
  propertyGet "_Default"
              []
              outInt32

setDefault38 :: Int32
             -> Spinners a0
             -> IO ()
setDefault38 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getDisplay3DShading28 :: Spinners a0
                      -> IO Bool
getDisplay3DShading28 =
  propertyGet "Display3DShading"
              []
              outBool

setDisplay3DShading28 :: Bool
                      -> Spinners a0
                      -> IO ()
setDisplay3DShading28 rhs =
  propertySet "Display3DShading"
              [inBool rhs]

getLinkedCell26 :: Spinners a0
                -> IO String
getLinkedCell26 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell26 :: String
                -> Spinners a0
                -> IO ()
setLinkedCell26 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getMax9 :: Spinners a0
        -> IO Int32
getMax9 =
  propertyGet "Max"
              []
              outInt32

setMax9 :: Int32
        -> Spinners a0
        -> IO ()
setMax9 rhs =
  propertySet "Max"
              [inInt32 rhs]

getMin9 :: Spinners a0
        -> IO Int32
getMin9 =
  propertyGet "Min"
              []
              outInt32

setMin9 :: Int32
        -> Spinners a0
        -> IO ()
setMin9 rhs =
  propertySet "Min"
              [inInt32 rhs]

getSmallChange9 :: Spinners a0
                -> IO Int32
getSmallChange9 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange9 :: Int32
                -> Spinners a0
                -> IO ()
setSmallChange9 rhs =
  propertySet "SmallChange"
              [inInt32 rhs]

getValue52 :: Spinners a0
           -> IO Int32
getValue52 =
  propertyGet "Value"
              []
              outInt32

setValue44 :: Int32
           -> Spinners a0
           -> IO ()
setValue44 rhs =
  propertySet "Value"
              [inInt32 rhs]

add101 :: Double
       -> Double
       -> Double
       -> Double
       -> Spinners a0
       -> IO (Spinner ())
add101 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount146 :: Spinners a0
            -> IO Int32
getCount146 =
  propertyGet "Count"
              []
              outInt32

group32 :: Spinners a0
        -> IO (GroupObject ())
group32 =
  function1 "Group"
            []
            outIUnknown

item71 :: a1
       -> Spinners a0
       -> IO (IDispatch ())
item71 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum57 :: Spinners a0
          -> IO (IUnknown ())
newEnum57 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DialogFrame
-- 
-- --------------------------------------------------
data DialogFrame_ a = DialogFrame__ 
type DialogFrame a = IDispatch (DialogFrame_ a)
iidDialogFrame :: IID (DialogFrame ())
iidDialogFrame = mkIID "{0002088F-0000-0000-C000-000000000046}"

queryInterface66 :: (Variant a1)
                 => GUID
                 -> DialogFrame a0
                 -> IO a1
queryInterface66 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef66 :: DialogFrame a0
         -> IO Word32
addRef66 =
  function1 "AddRef"
            []
            outWord32

release66 :: DialogFrame a0
          -> IO Word32
release66 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount66 :: DialogFrame a0
                   -> IO Word32
getTypeInfoCount66 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo66 :: (Variant a1)
              => Word32
              -> Word32
              -> DialogFrame a0
              -> IO a1
getTypeInfo66 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames66 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> DialogFrame a0
                -> IO Int32
getIDsOfNames66 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke66 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> DialogFrame a0
         -> IO (a1, a2, Word32)
invoke66 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication334 :: (Variant a1)
                  => DialogFrame a0
                  -> IO a1
getApplication334 =
  propertyGet "Application"
              []
              outVariant

getCreator334 :: DialogFrame a0
              -> IO XlCreator
getCreator334 =
  propertyGet "Creator"
              []
              outEnum

getParent349 :: DialogFrame a0
             -> IO (IDispatch ())
getParent349 =
  propertyGet "Parent"
              []
              outIDispatch

dummy346 :: DialogFrame a0
         -> IO ()
dummy346 =
  method0 "_Dummy3"
          []

dummy49 :: DialogFrame a0
        -> IO ()
dummy49 =
  method0 "_Dummy4"
          []

dummy51 :: DialogFrame a0
        -> IO ()
dummy51 =
  method0 "_Dummy5"
          []

copyPicture64 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> DialogFrame a0
              -> IO a1
copyPicture64 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

dummy712 :: DialogFrame a0
         -> IO ()
dummy712 =
  method0 "_Dummy7"
          []

dummy81 :: DialogFrame a0
        -> IO ()
dummy81 =
  method0 "_Dummy8"
          []

dummy92 :: DialogFrame a0
        -> IO ()
dummy92 =
  method0 "_Dummy9"
          []

dummy102 :: DialogFrame a0
         -> IO ()
dummy102 =
  method0 "_Dummy10"
          []

getHeight76 :: DialogFrame a0
            -> IO Double
getHeight76 =
  propertyGet "Height"
              []
              outDouble

setHeight71 :: Double
            -> DialogFrame a0
            -> IO ()
setHeight71 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1233 :: DialogFrame a0
          -> IO ()
dummy1233 =
  method0 "_Dummy12"
          []

getLeft79 :: DialogFrame a0
          -> IO Double
getLeft79 =
  propertyGet "Left"
              []
              outDouble

setLeft74 :: Double
          -> DialogFrame a0
          -> IO ()
setLeft74 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked68 :: DialogFrame a0
            -> IO Bool
getLocked68 =
  propertyGet "Locked"
              []
              outBool

setLocked68 :: Bool
            -> DialogFrame a0
            -> IO ()
setLocked68 rhs =
  propertySet "Locked"
              [inBool rhs]

getName98 :: DialogFrame a0
          -> IO String
getName98 =
  propertyGet "Name"
              []
              outString

setName58 :: String
          -> DialogFrame a0
          -> IO ()
setName58 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction65 :: DialogFrame a0
              -> IO String
getOnAction65 =
  propertyGet "OnAction"
              []
              outString

setOnAction65 :: String
              -> DialogFrame a0
              -> IO ()
setOnAction65 rhs =
  propertySet "OnAction"
              [inString rhs]

dummy172 :: DialogFrame a0
         -> IO ()
dummy172 =
  method0 "_Dummy17"
          []

dummy181 :: DialogFrame a0
         -> IO ()
dummy181 =
  method0 "_Dummy18"
          []

select103 :: (Variant a2)
          => a2
          -> DialogFrame a0
          -> IO a1
select103 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

dummy201 :: DialogFrame a0
         -> IO ()
dummy201 =
  method0 "_Dummy20"
          []

getTop79 :: DialogFrame a0
         -> IO Double
getTop79 =
  propertyGet "Top"
              []
              outDouble

setTop74 :: Double
         -> DialogFrame a0
         -> IO ()
setTop74 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2231 :: DialogFrame a0
          -> IO ()
dummy2231 =
  method0 "_Dummy22"
          []

dummy232 :: DialogFrame a0
         -> IO ()
dummy232 =
  method0 "_Dummy23"
          []

getWidth78 :: DialogFrame a0
           -> IO Double
getWidth78 =
  propertyGet "Width"
              []
              outDouble

setWidth73 :: Double
           -> DialogFrame a0
           -> IO ()
setWidth73 rhs =
  propertySet "Width"
              [inDouble rhs]

dummy251 :: DialogFrame a0
         -> IO ()
dummy251 =
  method0 "_Dummy25"
          []

getShapeRange60 :: DialogFrame a0
                -> IO (ShapeRange ())
getShapeRange60 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption60 :: DialogFrame a0
             -> IO String
getCaption60 =
  propertyGet "Caption"
              []
              outString

setCaption58 :: String
             -> DialogFrame a0
             -> IO ()
setCaption58 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters44 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> DialogFrame a0
                -> IO (Characters ())
getCharacters44 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling44 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> DialogFrame a0
                -> IO a1
checkSpelling44 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText35 :: DialogFrame a0
                -> IO Bool
getLockedText35 =
  propertyGet "LockedText"
              []
              outBool

setLockedText35 :: Bool
                -> DialogFrame a0
                -> IO ()
setLockedText35 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText51 :: DialogFrame a0
          -> IO String
getText51 =
  propertyGet "Text"
              []
              outString

setText49 :: String
          -> DialogFrame a0
          -> IO ()
setText49 rhs =
  propertySet "Text"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface Label
-- 
-- --------------------------------------------------
data Label_ a = Label__ 
type Label a = IDispatch (Label_ a)
iidLabel :: IID (Label ())
iidLabel = mkIID "{00020890-0000-0000-C000-000000000046}"

queryInterface67 :: (Variant a1)
                 => GUID
                 -> Label a0
                 -> IO a1
queryInterface67 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef67 :: Label a0
         -> IO Word32
addRef67 =
  function1 "AddRef"
            []
            outWord32

release67 :: Label a0
          -> IO Word32
release67 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount67 :: Label a0
                   -> IO Word32
getTypeInfoCount67 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo67 :: (Variant a1)
              => Word32
              -> Word32
              -> Label a0
              -> IO a1
getTypeInfo67 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames67 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Label a0
                -> IO Int32
getIDsOfNames67 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke67 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Label a0
         -> IO (a1, a2, Word32)
invoke67 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication335 :: (Variant a1)
                  => Label a0
                  -> IO a1
getApplication335 =
  propertyGet "Application"
              []
              outVariant

getCreator335 :: Label a0
              -> IO XlCreator
getCreator335 =
  propertyGet "Creator"
              []
              outEnum

getParent350 :: Label a0
             -> IO (IDispatch ())
getParent350 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell29 :: Label a0
                     -> IO (Range ())
getBottomRightCell29 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront59 :: Label a0
               -> IO a1
bringToFront59 =
  function1 "BringToFront"
            []
            outVariant

copy79 :: Label a0
       -> IO a1
copy79 =
  function1 "Copy"
            []
            outVariant

copyPicture65 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Label a0
              -> IO a1
copyPicture65 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut62 :: Label a0
      -> IO a1
cut62 =
  function1 "Cut"
            []
            outVariant

delete163 :: Label a0
          -> IO a1
delete163 =
  function1 "Delete"
            []
            outVariant

duplicate62 :: Label a0
            -> IO (IDispatch ())
duplicate62 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled69 :: Label a0
             -> IO Bool
getEnabled69 =
  propertyGet "Enabled"
              []
              outBool

setEnabled69 :: Bool
             -> Label a0
             -> IO ()
setEnabled69 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight77 :: Label a0
            -> IO Double
getHeight77 =
  propertyGet "Height"
              []
              outDouble

setHeight72 :: Double
            -> Label a0
            -> IO ()
setHeight72 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex57 :: Label a0
           -> IO Int32
getIndex57 =
  propertyGet "Index"
              []
              outInt32

getLeft80 :: Label a0
          -> IO Double
getLeft80 =
  propertyGet "Left"
              []
              outDouble

setLeft75 :: Double
          -> Label a0
          -> IO ()
setLeft75 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked69 :: Label a0
            -> IO Bool
getLocked69 =
  propertyGet "Locked"
              []
              outBool

setLocked69 :: Bool
            -> Label a0
            -> IO ()
setLocked69 rhs =
  propertySet "Locked"
              [inBool rhs]

getName99 :: Label a0
          -> IO String
getName99 =
  propertyGet "Name"
              []
              outString

setName59 :: String
          -> Label a0
          -> IO ()
setName59 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction66 :: Label a0
              -> IO String
getOnAction66 =
  propertyGet "OnAction"
              []
              outString

setOnAction66 :: String
              -> Label a0
              -> IO ()
setOnAction66 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement60 :: Label a0
               -> IO a1
getPlacement60 =
  propertyGet "Placement"
              []
              outVariant

setPlacement60 :: a1
               -> Label a0
               -> IO ()
setPlacement60 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject60 :: Label a0
                 -> IO Bool
getPrintObject60 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject60 :: Bool
                 -> Label a0
                 -> IO ()
setPrintObject60 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select104 :: (Variant a2)
          => a2
          -> Label a0
          -> IO a1
select104 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack59 :: Label a0
             -> IO a1
sendToBack59 =
  function1 "SendToBack"
            []
            outVariant

getTop80 :: Label a0
         -> IO Double
getTop80 =
  propertyGet "Top"
              []
              outDouble

setTop75 :: Double
         -> Label a0
         -> IO ()
setTop75 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell29 :: Label a0
                 -> IO (Range ())
getTopLeftCell29 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible87 :: Label a0
             -> IO Bool
getVisible87 =
  propertyGet "Visible"
              []
              outBool

setVisible87 :: Bool
             -> Label a0
             -> IO ()
setVisible87 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth79 :: Label a0
           -> IO Double
getWidth79 =
  propertyGet "Width"
              []
              outDouble

setWidth74 :: Double
           -> Label a0
           -> IO ()
setWidth74 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder58 :: Label a0
            -> IO Int32
getZOrder58 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange61 :: Label a0
                -> IO (ShapeRange ())
getShapeRange61 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption61 :: Label a0
             -> IO String
getCaption61 =
  propertyGet "Caption"
              []
              outString

setCaption59 :: String
             -> Label a0
             -> IO ()
setCaption59 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters45 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Label a0
                -> IO (Characters ())
getCharacters45 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling45 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Label a0
                -> IO a1
checkSpelling45 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText36 :: Label a0
                -> IO Bool
getLockedText36 =
  propertyGet "LockedText"
              []
              outBool

setLockedText36 :: Bool
                -> Label a0
                -> IO ()
setLockedText36 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText52 :: Label a0
          -> IO String
getText52 =
  propertyGet "Text"
              []
              outString

setText50 :: String
          -> Label a0
          -> IO ()
setText50 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator19 :: Label a0
                 -> IO a1
getAccelerator19 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator19 :: a1
                 -> Label a0
                 -> IO ()
setAccelerator19 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

dummy3311 :: Label a0
          -> IO ()
dummy3311 =
  method0 "_Dummy33"
          []

getPhoneticAccelerator19 :: Label a0
                         -> IO a1
getPhoneticAccelerator19 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator19 :: a1
                         -> Label a0
                         -> IO ()
setPhoneticAccelerator19 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface Labels
-- 
-- --------------------------------------------------
data Labels_ a = Labels__ 
type Labels a = IDispatch (Labels_ a)
iidLabels :: IID (Labels ())
iidLabels = mkIID "{00020891-0000-0000-C000-000000000046}"

queryInterface68 :: (Variant a1)
                 => GUID
                 -> Labels a0
                 -> IO a1
queryInterface68 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef68 :: Labels a0
         -> IO Word32
addRef68 =
  function1 "AddRef"
            []
            outWord32

release68 :: Labels a0
          -> IO Word32
release68 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount68 :: Labels a0
                   -> IO Word32
getTypeInfoCount68 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo68 :: (Variant a1)
              => Word32
              -> Word32
              -> Labels a0
              -> IO a1
getTypeInfo68 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames68 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Labels a0
                -> IO Int32
getIDsOfNames68 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke68 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Labels a0
         -> IO (a1, a2, Word32)
invoke68 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication336 :: (Variant a1)
                  => Labels a0
                  -> IO a1
getApplication336 =
  propertyGet "Application"
              []
              outVariant

getCreator336 :: Labels a0
              -> IO XlCreator
getCreator336 =
  propertyGet "Creator"
              []
              outEnum

getParent351 :: Labels a0
             -> IO (IDispatch ())
getParent351 =
  propertyGet "Parent"
              []
              outIDispatch

dummy347 :: Labels a0
         -> IO ()
dummy347 =
  method0 "_Dummy3"
          []

bringToFront60 :: Labels a0
               -> IO a1
bringToFront60 =
  function1 "BringToFront"
            []
            outVariant

copy80 :: Labels a0
       -> IO a1
copy80 =
  function1 "Copy"
            []
            outVariant

copyPicture66 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Labels a0
              -> IO a1
copyPicture66 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut63 :: Labels a0
      -> IO a1
cut63 =
  function1 "Cut"
            []
            outVariant

delete164 :: Labels a0
          -> IO a1
delete164 =
  function1 "Delete"
            []
            outVariant

duplicate63 :: Labels a0
            -> IO (IDispatch ())
duplicate63 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled70 :: Labels a0
             -> IO Bool
getEnabled70 =
  propertyGet "Enabled"
              []
              outBool

setEnabled70 :: Bool
             -> Labels a0
             -> IO ()
setEnabled70 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight78 :: Labels a0
            -> IO Double
getHeight78 =
  propertyGet "Height"
              []
              outDouble

setHeight73 :: Double
            -> Labels a0
            -> IO ()
setHeight73 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1234 :: Labels a0
          -> IO ()
dummy1234 =
  method0 "_Dummy12"
          []

getLeft81 :: Labels a0
          -> IO Double
getLeft81 =
  propertyGet "Left"
              []
              outDouble

setLeft76 :: Double
          -> Labels a0
          -> IO ()
setLeft76 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked70 :: Labels a0
            -> IO Bool
getLocked70 =
  propertyGet "Locked"
              []
              outBool

setLocked70 :: Bool
            -> Labels a0
            -> IO ()
setLocked70 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1532 :: Labels a0
          -> IO ()
dummy1532 =
  method0 "_Dummy15"
          []

getOnAction67 :: Labels a0
              -> IO String
getOnAction67 =
  propertyGet "OnAction"
              []
              outString

setOnAction67 :: String
              -> Labels a0
              -> IO ()
setOnAction67 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement61 :: Labels a0
               -> IO a1
getPlacement61 =
  propertyGet "Placement"
              []
              outVariant

setPlacement61 :: a1
               -> Labels a0
               -> IO ()
setPlacement61 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject61 :: Labels a0
                 -> IO Bool
getPrintObject61 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject61 :: Bool
                 -> Labels a0
                 -> IO ()
setPrintObject61 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select105 :: (Variant a2)
          => a2
          -> Labels a0
          -> IO a1
select105 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack60 :: Labels a0
             -> IO a1
sendToBack60 =
  function1 "SendToBack"
            []
            outVariant

getTop81 :: Labels a0
         -> IO Double
getTop81 =
  propertyGet "Top"
              []
              outDouble

setTop76 :: Double
         -> Labels a0
         -> IO ()
setTop76 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2232 :: Labels a0
          -> IO ()
dummy2232 =
  method0 "_Dummy22"
          []

getVisible88 :: Labels a0
             -> IO Bool
getVisible88 =
  propertyGet "Visible"
              []
              outBool

setVisible88 :: Bool
             -> Labels a0
             -> IO ()
setVisible88 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth80 :: Labels a0
           -> IO Double
getWidth80 =
  propertyGet "Width"
              []
              outDouble

setWidth75 :: Double
           -> Labels a0
           -> IO ()
setWidth75 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder59 :: Labels a0
            -> IO Int32
getZOrder59 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange62 :: Labels a0
                -> IO (ShapeRange ())
getShapeRange62 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCaption62 :: Labels a0
             -> IO String
getCaption62 =
  propertyGet "Caption"
              []
              outString

setCaption60 :: String
             -> Labels a0
             -> IO ()
setCaption60 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters46 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Labels a0
                -> IO (Characters ())
getCharacters46 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling46 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Labels a0
                -> IO a1
checkSpelling46 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getLockedText37 :: Labels a0
                -> IO Bool
getLockedText37 =
  propertyGet "LockedText"
              []
              outBool

setLockedText37 :: Bool
                -> Labels a0
                -> IO ()
setLockedText37 rhs =
  propertySet "LockedText"
              [inBool rhs]

getText53 :: Labels a0
          -> IO String
getText53 =
  propertyGet "Text"
              []
              outString

setText51 :: String
          -> Labels a0
          -> IO ()
setText51 rhs =
  propertySet "Text"
              [inString rhs]

getAccelerator20 :: Labels a0
                 -> IO a1
getAccelerator20 =
  propertyGet "Accelerator"
              []
              outVariant

setAccelerator20 :: a1
                 -> Labels a0
                 -> IO ()
setAccelerator20 rhs =
  propertySet "Accelerator"
              [inVariant rhs]

dummy3312 :: Labels a0
          -> IO ()
dummy3312 =
  method0 "_Dummy33"
          []

getPhoneticAccelerator20 :: Labels a0
                         -> IO a1
getPhoneticAccelerator20 =
  propertyGet "PhoneticAccelerator"
              []
              outVariant

setPhoneticAccelerator20 :: a1
                         -> Labels a0
                         -> IO ()
setPhoneticAccelerator20 rhs =
  propertySet "PhoneticAccelerator"
              [inVariant rhs]

add102 :: Double
       -> Double
       -> Double
       -> Double
       -> Labels a0
       -> IO (Label ())
add102 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount147 :: Labels a0
            -> IO Int32
getCount147 =
  propertyGet "Count"
              []
              outInt32

group33 :: Labels a0
        -> IO (GroupObject ())
group33 =
  function1 "Group"
            []
            outIUnknown

item72 :: a1
       -> Labels a0
       -> IO (IDispatch ())
item72 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum58 :: Labels a0
          -> IO (IUnknown ())
newEnum58 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Panes
-- 
-- --------------------------------------------------
data Panes_ a = Panes__ 
type Panes a = IDispatch (Panes_ a)
iidPanes :: IID (Panes ())
iidPanes = mkIID "{00020894-0000-0000-C000-000000000046}"

queryInterface69 :: (Variant a1)
                 => GUID
                 -> Panes a0
                 -> IO a1
queryInterface69 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef69 :: Panes a0
         -> IO Word32
addRef69 =
  function1 "AddRef"
            []
            outWord32

release69 :: Panes a0
          -> IO Word32
release69 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount69 :: Panes a0
                   -> IO Word32
getTypeInfoCount69 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo69 :: (Variant a1)
              => Word32
              -> Word32
              -> Panes a0
              -> IO a1
getTypeInfo69 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames69 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Panes a0
                -> IO Int32
getIDsOfNames69 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke69 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Panes a0
         -> IO (a1, a2, Word32)
invoke69 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication337 :: (Variant a1)
                  => Panes a0
                  -> IO a1
getApplication337 =
  propertyGet "Application"
              []
              outVariant

getCreator337 :: Panes a0
              -> IO XlCreator
getCreator337 =
  propertyGet "Creator"
              []
              outEnum

getParent352 :: Panes a0
             -> IO (IDispatch ())
getParent352 =
  propertyGet "Parent"
              []
              outIDispatch

getCount148 :: Panes a0
            -> IO Int32
getCount148 =
  propertyGet "Count"
              []
              outInt32

getItem71 :: Int32
          -> Panes a0
          -> IO (Pane ())
getItem71 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIUnknown

getDefault148 :: Int32
              -> Panes a0
              -> IO (Pane ())
getDefault148 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Pane
-- 
-- --------------------------------------------------
data Pane_ a = Pane__ 
type Pane a = IDispatch (Pane_ a)
iidPane :: IID (Pane ())
iidPane = mkIID "{00020895-0000-0000-C000-000000000046}"

queryInterface70 :: (Variant a1)
                 => GUID
                 -> Pane a0
                 -> IO a1
queryInterface70 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef70 :: Pane a0
         -> IO Word32
addRef70 =
  function1 "AddRef"
            []
            outWord32

release70 :: Pane a0
          -> IO Word32
release70 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount70 :: Pane a0
                   -> IO Word32
getTypeInfoCount70 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo70 :: (Variant a1)
              => Word32
              -> Word32
              -> Pane a0
              -> IO a1
getTypeInfo70 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames70 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Pane a0
                -> IO Int32
getIDsOfNames70 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke70 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Pane a0
         -> IO (a1, a2, Word32)
invoke70 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication338 :: (Variant a1)
                  => Pane a0
                  -> IO a1
getApplication338 =
  propertyGet "Application"
              []
              outVariant

getCreator338 :: Pane a0
              -> IO XlCreator
getCreator338 =
  propertyGet "Creator"
              []
              outEnum

getParent353 :: Pane a0
             -> IO (IDispatch ())
getParent353 =
  propertyGet "Parent"
              []
              outIDispatch

activate20 :: Pane a0
           -> IO Bool
activate20 =
  function1 "Activate"
            []
            outBool

getIndex58 :: Pane a0
           -> IO Int32
getIndex58 =
  propertyGet "Index"
              []
              outInt32

largeScroll2 :: (Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> Pane a0
             -> IO a1
largeScroll2 down up toRight toLeft =
  function1 "LargeScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getScrollColumn2 :: Pane a0
                 -> IO Int32
getScrollColumn2 =
  propertyGet "ScrollColumn"
              []
              outInt32

setScrollColumn2 :: Int32
                 -> Pane a0
                 -> IO ()
setScrollColumn2 rhs =
  propertySet "ScrollColumn"
              [inInt32 rhs]

getScrollRow2 :: Pane a0
              -> IO Int32
getScrollRow2 =
  propertyGet "ScrollRow"
              []
              outInt32

setScrollRow2 :: Int32
              -> Pane a0
              -> IO ()
setScrollRow2 rhs =
  propertySet "ScrollRow"
              [inInt32 rhs]

smallScroll2 :: (Variant a2, Variant a3, Variant a4, Variant a5)
             => a2
             -> a3
             -> a4
             -> a5
             -> Pane a0
             -> IO a1
smallScroll2 down up toRight toLeft =
  function1 "SmallScroll"
            [ inVariant down
            , inVariant up
            , inVariant toRight
            , inVariant toLeft
            ]
            outVariant

getVisibleRange2 :: Pane a0
                 -> IO (Range ())
getVisibleRange2 =
  propertyGet "VisibleRange"
              []
              outIDispatch

scrollIntoView2 :: (Variant a1)
                => Int32
                -> Int32
                -> Int32
                -> Int32
                -> a1
                -> Pane a0
                -> IO ()
scrollIntoView2 left top width height start =
  method0 "ScrollIntoView"
          [ inInt32 left
          , inInt32 top
          , inInt32 width
          , inInt32 height
          , inVariant start
          ]

pointsToScreenPixelsX2 :: Int32
                       -> Pane a0
                       -> IO Int32
pointsToScreenPixelsX2 points0 =
  function1 "PointsToScreenPixelsX"
            [inInt32 points0]
            outInt32

pointsToScreenPixelsY2 :: Int32
                       -> Pane a0
                       -> IO Int32
pointsToScreenPixelsY2 points0 =
  function1 "PointsToScreenPixelsY"
            [inInt32 points0]
            outInt32

-- --------------------------------------------------
-- 
-- dispinterface Scenarios
-- 
-- --------------------------------------------------
data Scenarios_ a = Scenarios__ 
type Scenarios a = IDispatch (Scenarios_ a)
iidScenarios :: IID (Scenarios ())
iidScenarios = mkIID "{00020896-0000-0000-C000-000000000046}"

queryInterface71 :: (Variant a1)
                 => GUID
                 -> Scenarios a0
                 -> IO a1
queryInterface71 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef71 :: Scenarios a0
         -> IO Word32
addRef71 =
  function1 "AddRef"
            []
            outWord32

release71 :: Scenarios a0
          -> IO Word32
release71 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount71 :: Scenarios a0
                   -> IO Word32
getTypeInfoCount71 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo71 :: (Variant a1)
              => Word32
              -> Word32
              -> Scenarios a0
              -> IO a1
getTypeInfo71 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames71 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Scenarios a0
                -> IO Int32
getIDsOfNames71 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke71 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Scenarios a0
         -> IO (a1, a2, Word32)
invoke71 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication339 :: (Variant a1)
                  => Scenarios a0
                  -> IO a1
getApplication339 =
  propertyGet "Application"
              []
              outVariant

getCreator339 :: Scenarios a0
              -> IO XlCreator
getCreator339 =
  propertyGet "Creator"
              []
              outEnum

getParent354 :: Scenarios a0
             -> IO (IDispatch ())
getParent354 =
  propertyGet "Parent"
              []
              outIDispatch

add103 :: (Variant a2, Variant a3, Variant a4, Variant a5)
       => String
       -> a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> Scenarios a0
       -> IO (Scenario ())
add103 name changingCells values comment locked hidden =
  function1 "Add"
            [ inString name
            , inVariant changingCells
            , inVariant values
            , inVariant comment
            , inVariant locked
            , inVariant hidden
            ]
            outIUnknown

getCount149 :: Scenarios a0
            -> IO Int32
getCount149 =
  propertyGet "Count"
              []
              outInt32

createSummary0 :: (Variant a2, Variant a3)
               => a2
               -> a3
               -> Scenarios a0
               -> IO a1
createSummary0 reportType resultCells =
  function1 "CreateSummary"
            [ inDefaultValue (inInt32 1) inVariant reportType
            , inVariant resultCells
            ]
            outVariant

item73 :: a1
       -> Scenarios a0
       -> IO (Scenario ())
item73 index1 =
  function1 "Item"
            [inVariant index1]
            outIUnknown

merge4 :: a2
       -> Scenarios a0
       -> IO a1
merge4 source =
  function1 "Merge"
            [inVariant source]
            outVariant

newEnum59 :: Scenarios a0
          -> IO (IUnknown ())
newEnum59 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Scenario
-- 
-- --------------------------------------------------
data Scenario_ a = Scenario__ 
type Scenario a = IDispatch (Scenario_ a)
iidScenario :: IID (Scenario ())
iidScenario = mkIID "{00020897-0000-0000-C000-000000000046}"

queryInterface72 :: (Variant a1)
                 => GUID
                 -> Scenario a0
                 -> IO a1
queryInterface72 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef72 :: Scenario a0
         -> IO Word32
addRef72 =
  function1 "AddRef"
            []
            outWord32

release72 :: Scenario a0
          -> IO Word32
release72 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount72 :: Scenario a0
                   -> IO Word32
getTypeInfoCount72 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo72 :: (Variant a1)
              => Word32
              -> Word32
              -> Scenario a0
              -> IO a1
getTypeInfo72 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames72 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Scenario a0
                -> IO Int32
getIDsOfNames72 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke72 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Scenario a0
         -> IO (a1, a2, Word32)
invoke72 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication340 :: (Variant a1)
                  => Scenario a0
                  -> IO a1
getApplication340 =
  propertyGet "Application"
              []
              outVariant

getCreator340 :: Scenario a0
              -> IO XlCreator
getCreator340 =
  propertyGet "Creator"
              []
              outEnum

getParent355 :: Scenario a0
             -> IO (IDispatch ())
getParent355 =
  propertyGet "Parent"
              []
              outIDispatch

changeScenario0 :: (Variant a3)
                => a2
                -> a3
                -> Scenario a0
                -> IO a1
changeScenario0 changingCells values =
  function1 "ChangeScenario"
            [ inVariant changingCells
            , inVariant values
            ]
            outVariant

getChangingCells0 :: Scenario a0
                  -> IO (Range ())
getChangingCells0 =
  propertyGet "ChangingCells"
              []
              outIDispatch

getComment4 :: Scenario a0
            -> IO String
getComment4 =
  propertyGet "Comment"
              []
              outString

setComment2 :: String
            -> Scenario a0
            -> IO ()
setComment2 rhs =
  propertySet "Comment"
              [inString rhs]

delete165 :: Scenario a0
          -> IO a1
delete165 =
  function1 "Delete"
            []
            outVariant

getHidden5 :: Scenario a0
           -> IO Bool
getHidden5 =
  propertyGet "Hidden"
              []
              outBool

setHidden5 :: Bool
           -> Scenario a0
           -> IO ()
setHidden5 rhs =
  propertySet "Hidden"
              [inBool rhs]

getIndex59 :: Scenario a0
           -> IO Int32
getIndex59 =
  propertyGet "Index"
              []
              outInt32

getLocked71 :: Scenario a0
            -> IO Bool
getLocked71 =
  propertyGet "Locked"
              []
              outBool

setLocked71 :: Bool
            -> Scenario a0
            -> IO ()
setLocked71 rhs =
  propertySet "Locked"
              [inBool rhs]

getName100 :: Scenario a0
           -> IO String
getName100 =
  propertyGet "Name"
              []
              outString

setName60 :: String
          -> Scenario a0
          -> IO ()
setName60 rhs =
  propertySet "Name"
              [inString rhs]

show6 :: Scenario a0
      -> IO a1
show6 =
  function1 "Show"
            []
            outVariant

getValues1 :: (Variant a2)
           => a2
           -> Scenario a0
           -> IO a1
getValues1 index1 =
  propertyGet "Values"
              [inVariant index1]
              outVariant

-- --------------------------------------------------
-- 
-- dispinterface GroupObject
-- 
-- --------------------------------------------------
data GroupObject_ a = GroupObject__ 
type GroupObject a = IDispatch (GroupObject_ a)
iidGroupObject :: IID (GroupObject ())
iidGroupObject = mkIID "{00020898-0000-0000-C000-000000000046}"

queryInterface73 :: (Variant a1)
                 => GUID
                 -> GroupObject a0
                 -> IO a1
queryInterface73 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef73 :: GroupObject a0
         -> IO Word32
addRef73 =
  function1 "AddRef"
            []
            outWord32

release73 :: GroupObject a0
          -> IO Word32
release73 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount73 :: GroupObject a0
                   -> IO Word32
getTypeInfoCount73 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo73 :: (Variant a1)
              => Word32
              -> Word32
              -> GroupObject a0
              -> IO a1
getTypeInfo73 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames73 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> GroupObject a0
                -> IO Int32
getIDsOfNames73 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke73 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> GroupObject a0
         -> IO (a1, a2, Word32)
invoke73 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication341 :: (Variant a1)
                  => GroupObject a0
                  -> IO a1
getApplication341 =
  propertyGet "Application"
              []
              outVariant

getCreator341 :: GroupObject a0
              -> IO XlCreator
getCreator341 =
  propertyGet "Creator"
              []
              outEnum

getParent356 :: GroupObject a0
             -> IO (IDispatch ())
getParent356 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell30 :: GroupObject a0
                     -> IO (Range ())
getBottomRightCell30 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront61 :: GroupObject a0
               -> IO a1
bringToFront61 =
  function1 "BringToFront"
            []
            outVariant

copy81 :: GroupObject a0
       -> IO a1
copy81 =
  function1 "Copy"
            []
            outVariant

copyPicture67 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> GroupObject a0
              -> IO a1
copyPicture67 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut64 :: GroupObject a0
      -> IO a1
cut64 =
  function1 "Cut"
            []
            outVariant

delete166 :: GroupObject a0
          -> IO a1
delete166 =
  function1 "Delete"
            []
            outVariant

duplicate64 :: GroupObject a0
            -> IO (IDispatch ())
duplicate64 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled71 :: GroupObject a0
             -> IO Bool
getEnabled71 =
  propertyGet "Enabled"
              []
              outBool

setEnabled71 :: Bool
             -> GroupObject a0
             -> IO ()
setEnabled71 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight79 :: GroupObject a0
            -> IO Double
getHeight79 =
  propertyGet "Height"
              []
              outDouble

setHeight74 :: Double
            -> GroupObject a0
            -> IO ()
setHeight74 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex60 :: GroupObject a0
           -> IO Int32
getIndex60 =
  propertyGet "Index"
              []
              outInt32

getLeft82 :: GroupObject a0
          -> IO Double
getLeft82 =
  propertyGet "Left"
              []
              outDouble

setLeft77 :: Double
          -> GroupObject a0
          -> IO ()
setLeft77 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked72 :: GroupObject a0
            -> IO Bool
getLocked72 =
  propertyGet "Locked"
              []
              outBool

setLocked72 :: Bool
            -> GroupObject a0
            -> IO ()
setLocked72 rhs =
  propertySet "Locked"
              [inBool rhs]

getName101 :: GroupObject a0
           -> IO String
getName101 =
  propertyGet "Name"
              []
              outString

setName61 :: String
          -> GroupObject a0
          -> IO ()
setName61 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction68 :: GroupObject a0
              -> IO String
getOnAction68 =
  propertyGet "OnAction"
              []
              outString

setOnAction68 :: String
              -> GroupObject a0
              -> IO ()
setOnAction68 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement62 :: GroupObject a0
               -> IO a1
getPlacement62 =
  propertyGet "Placement"
              []
              outVariant

setPlacement62 :: a1
               -> GroupObject a0
               -> IO ()
setPlacement62 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject62 :: GroupObject a0
                 -> IO Bool
getPrintObject62 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject62 :: Bool
                 -> GroupObject a0
                 -> IO ()
setPrintObject62 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select106 :: (Variant a2)
          => a2
          -> GroupObject a0
          -> IO a1
select106 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack61 :: GroupObject a0
             -> IO a1
sendToBack61 =
  function1 "SendToBack"
            []
            outVariant

getTop82 :: GroupObject a0
         -> IO Double
getTop82 =
  propertyGet "Top"
              []
              outDouble

setTop77 :: Double
         -> GroupObject a0
         -> IO ()
setTop77 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell30 :: GroupObject a0
                 -> IO (Range ())
getTopLeftCell30 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible89 :: GroupObject a0
             -> IO Bool
getVisible89 =
  propertyGet "Visible"
              []
              outBool

setVisible89 :: Bool
             -> GroupObject a0
             -> IO ()
setVisible89 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth81 :: GroupObject a0
           -> IO Double
getWidth81 =
  propertyGet "Width"
              []
              outDouble

setWidth76 :: Double
           -> GroupObject a0
           -> IO ()
setWidth76 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder60 :: GroupObject a0
            -> IO Int32
getZOrder60 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange63 :: GroupObject a0
                -> IO (ShapeRange ())
getShapeRange63 =
  propertyGet "ShapeRange"
              []
              outIUnknown

dummy272 :: GroupObject a0
         -> IO ()
dummy272 =
  method0 "_Dummy27"
          []

dummy284 :: GroupObject a0
         -> IO ()
dummy284 =
  method0 "_Dummy28"
          []

getAddIndent22 :: GroupObject a0
               -> IO Bool
getAddIndent22 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent22 :: Bool
               -> GroupObject a0
               -> IO ()
setAddIndent22 rhs =
  propertySet "AddIndent"
              [inBool rhs]

dummy303 :: GroupObject a0
         -> IO ()
dummy303 =
  method0 "_Dummy30"
          []

getArrowHeadLength5 :: GroupObject a0
                    -> IO a1
getArrowHeadLength5 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength5 :: a1
                    -> GroupObject a0
                    -> IO ()
setArrowHeadLength5 rhs =
  propertySet "ArrowHeadLength"
              [inVariant rhs]

getArrowHeadStyle5 :: GroupObject a0
                   -> IO a1
getArrowHeadStyle5 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle5 :: a1
                   -> GroupObject a0
                   -> IO ()
setArrowHeadStyle5 rhs =
  propertySet "ArrowHeadStyle"
              [inVariant rhs]

getArrowHeadWidth5 :: GroupObject a0
                   -> IO a1
getArrowHeadWidth5 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth5 :: a1
                   -> GroupObject a0
                   -> IO ()
setArrowHeadWidth5 rhs =
  propertySet "ArrowHeadWidth"
              [inVariant rhs]

getAutoSize19 :: GroupObject a0
              -> IO Bool
getAutoSize19 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize19 :: Bool
              -> GroupObject a0
              -> IO ()
setAutoSize19 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getBorder54 :: GroupObject a0
            -> IO (Border ())
getBorder54 =
  propertyGet "Border"
              []
              outIUnknown

dummy368 :: GroupObject a0
         -> IO ()
dummy368 =
  method0 "_Dummy36"
          []

dummy373 :: GroupObject a0
         -> IO ()
dummy373 =
  method0 "_Dummy37"
          []

dummy383 :: GroupObject a0
         -> IO ()
dummy383 =
  method0 "_Dummy38"
          []

checkSpelling47 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> GroupObject a0
                -> IO a1
checkSpelling47 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getDefault149 :: GroupObject a0
              -> IO Int32
getDefault149 =
  propertyGet "_Default"
              []
              outInt32

setDefault39 :: Int32
             -> GroupObject a0
             -> IO ()
setDefault39 rhs =
  propertySet "_Default"
              [inInt32 rhs]

dummy413 :: GroupObject a0
         -> IO ()
dummy413 =
  method0 "_Dummy41"
          []

dummy422 :: GroupObject a0
         -> IO ()
dummy422 =
  method0 "_Dummy42"
          []

dummy434 :: GroupObject a0
         -> IO ()
dummy434 =
  method0 "_Dummy43"
          []

dummy443 :: GroupObject a0
         -> IO ()
dummy443 =
  method0 "_Dummy44"
          []

dummy452 :: GroupObject a0
         -> IO ()
dummy452 =
  method0 "_Dummy45"
          []

getFont41 :: GroupObject a0
          -> IO (Font ())
getFont41 =
  propertyGet "Font"
              []
              outIDispatch

dummy473 :: GroupObject a0
         -> IO ()
dummy473 =
  method0 "_Dummy47"
          []

dummy481 :: GroupObject a0
         -> IO ()
dummy481 =
  method0 "_Dummy48"
          []

getHorizontalAlignment28 :: GroupObject a0
                         -> IO a1
getHorizontalAlignment28 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment28 :: a1
                         -> GroupObject a0
                         -> IO ()
setHorizontalAlignment28 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

dummy502 :: GroupObject a0
         -> IO ()
dummy502 =
  method0 "_Dummy50"
          []

getInterior52 :: GroupObject a0
              -> IO (Interior ())
getInterior52 =
  propertyGet "Interior"
              []
              outIUnknown

dummy521 :: GroupObject a0
         -> IO ()
dummy521 =
  method0 "_Dummy52"
          []

dummy531 :: GroupObject a0
         -> IO ()
dummy531 =
  method0 "_Dummy53"
          []

dummy543 :: GroupObject a0
         -> IO ()
dummy543 =
  method0 "_Dummy54"
          []

dummy551 :: GroupObject a0
         -> IO ()
dummy551 =
  method0 "_Dummy55"
          []

dummy564 :: GroupObject a0
         -> IO ()
dummy564 =
  method0 "_Dummy56"
          []

dummy571 :: GroupObject a0
         -> IO ()
dummy571 =
  method0 "_Dummy57"
          []

dummy581 :: GroupObject a0
         -> IO ()
dummy581 =
  method0 "_Dummy58"
          []

dummy591 :: GroupObject a0
         -> IO ()
dummy591 =
  method0 "_Dummy59"
          []

dummy601 :: GroupObject a0
         -> IO ()
dummy601 =
  method0 "_Dummy60"
          []

dummy611 :: GroupObject a0
         -> IO ()
dummy611 =
  method0 "_Dummy61"
          []

dummy621 :: GroupObject a0
         -> IO ()
dummy621 =
  method0 "_Dummy62"
          []

dummy631 :: GroupObject a0
         -> IO ()
dummy631 =
  method0 "_Dummy63"
          []

getOrientation35 :: GroupObject a0
                 -> IO a1
getOrientation35 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation35 :: a1
                 -> GroupObject a0
                 -> IO ()
setOrientation35 rhs =
  propertySet "Orientation"
              [inVariant rhs]

dummy652 :: GroupObject a0
         -> IO ()
dummy652 =
  method0 "_Dummy65"
          []

dummy662 :: GroupObject a0
         -> IO ()
dummy662 =
  method0 "_Dummy66"
          []

dummy672 :: GroupObject a0
         -> IO ()
dummy672 =
  method0 "_Dummy67"
          []

dummy681 :: GroupObject a0
         -> IO ()
dummy681 =
  method0 "_Dummy68"
          []

getRoundedCorners10 :: GroupObject a0
                    -> IO Bool
getRoundedCorners10 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners10 :: Bool
                    -> GroupObject a0
                    -> IO ()
setRoundedCorners10 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

dummy702 :: GroupObject a0
         -> IO ()
dummy702 =
  method0 "_Dummy70"
          []

getShadow32 :: GroupObject a0
            -> IO Bool
getShadow32 =
  propertyGet "Shadow"
              []
              outBool

setShadow29 :: Bool
            -> GroupObject a0
            -> IO ()
setShadow29 rhs =
  propertySet "Shadow"
              [inBool rhs]

dummy721 :: GroupObject a0
         -> IO ()
dummy721 =
  method0 "_Dummy72"
          []

dummy731 :: GroupObject a0
         -> IO ()
dummy731 =
  method0 "_Dummy73"
          []

ungroup7 :: GroupObject a0
         -> IO (IDispatch ())
ungroup7 =
  function1 "Ungroup"
            []
            outIDispatch

dummy752 :: GroupObject a0
         -> IO ()
dummy752 =
  method0 "_Dummy75"
          []

getVerticalAlignment28 :: GroupObject a0
                       -> IO a1
getVerticalAlignment28 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment28 :: a1
                       -> GroupObject a0
                       -> IO ()
setVerticalAlignment28 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

dummy771 :: GroupObject a0
         -> IO ()
dummy771 =
  method0 "_Dummy77"
          []

getReadingOrder28 :: GroupObject a0
                  -> IO Int32
getReadingOrder28 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder28 :: Int32
                  -> GroupObject a0
                  -> IO ()
setReadingOrder28 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface GroupObjects
-- 
-- --------------------------------------------------
data GroupObjects_ a = GroupObjects__ 
type GroupObjects a = IDispatch (GroupObjects_ a)
iidGroupObjects :: IID (GroupObjects ())
iidGroupObjects = mkIID "{00020899-0000-0000-C000-000000000046}"

queryInterface74 :: (Variant a1)
                 => GUID
                 -> GroupObjects a0
                 -> IO a1
queryInterface74 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef74 :: GroupObjects a0
         -> IO Word32
addRef74 =
  function1 "AddRef"
            []
            outWord32

release74 :: GroupObjects a0
          -> IO Word32
release74 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount74 :: GroupObjects a0
                   -> IO Word32
getTypeInfoCount74 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo74 :: (Variant a1)
              => Word32
              -> Word32
              -> GroupObjects a0
              -> IO a1
getTypeInfo74 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames74 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> GroupObjects a0
                -> IO Int32
getIDsOfNames74 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke74 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> GroupObjects a0
         -> IO (a1, a2, Word32)
invoke74 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication342 :: (Variant a1)
                  => GroupObjects a0
                  -> IO a1
getApplication342 =
  propertyGet "Application"
              []
              outVariant

getCreator342 :: GroupObjects a0
              -> IO XlCreator
getCreator342 =
  propertyGet "Creator"
              []
              outEnum

getParent357 :: GroupObjects a0
             -> IO (IDispatch ())
getParent357 =
  propertyGet "Parent"
              []
              outIDispatch

dummy348 :: GroupObjects a0
         -> IO ()
dummy348 =
  method0 "_Dummy3"
          []

bringToFront62 :: GroupObjects a0
               -> IO a1
bringToFront62 =
  function1 "BringToFront"
            []
            outVariant

copy82 :: GroupObjects a0
       -> IO a1
copy82 =
  function1 "Copy"
            []
            outVariant

copyPicture68 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> GroupObjects a0
              -> IO a1
copyPicture68 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut65 :: GroupObjects a0
      -> IO a1
cut65 =
  function1 "Cut"
            []
            outVariant

delete167 :: GroupObjects a0
          -> IO a1
delete167 =
  function1 "Delete"
            []
            outVariant

duplicate65 :: GroupObjects a0
            -> IO (IDispatch ())
duplicate65 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled72 :: GroupObjects a0
             -> IO Bool
getEnabled72 =
  propertyGet "Enabled"
              []
              outBool

setEnabled72 :: Bool
             -> GroupObjects a0
             -> IO ()
setEnabled72 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight80 :: GroupObjects a0
            -> IO Double
getHeight80 =
  propertyGet "Height"
              []
              outDouble

setHeight75 :: Double
            -> GroupObjects a0
            -> IO ()
setHeight75 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1235 :: GroupObjects a0
          -> IO ()
dummy1235 =
  method0 "_Dummy12"
          []

getLeft83 :: GroupObjects a0
          -> IO Double
getLeft83 =
  propertyGet "Left"
              []
              outDouble

setLeft78 :: Double
          -> GroupObjects a0
          -> IO ()
setLeft78 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked73 :: GroupObjects a0
            -> IO Bool
getLocked73 =
  propertyGet "Locked"
              []
              outBool

setLocked73 :: Bool
            -> GroupObjects a0
            -> IO ()
setLocked73 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1533 :: GroupObjects a0
          -> IO ()
dummy1533 =
  method0 "_Dummy15"
          []

getOnAction69 :: GroupObjects a0
              -> IO String
getOnAction69 =
  propertyGet "OnAction"
              []
              outString

setOnAction69 :: String
              -> GroupObjects a0
              -> IO ()
setOnAction69 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement63 :: GroupObjects a0
               -> IO a1
getPlacement63 =
  propertyGet "Placement"
              []
              outVariant

setPlacement63 :: a1
               -> GroupObjects a0
               -> IO ()
setPlacement63 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject63 :: GroupObjects a0
                 -> IO Bool
getPrintObject63 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject63 :: Bool
                 -> GroupObjects a0
                 -> IO ()
setPrintObject63 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select107 :: (Variant a2)
          => a2
          -> GroupObjects a0
          -> IO a1
select107 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack62 :: GroupObjects a0
             -> IO a1
sendToBack62 =
  function1 "SendToBack"
            []
            outVariant

getTop83 :: GroupObjects a0
         -> IO Double
getTop83 =
  propertyGet "Top"
              []
              outDouble

setTop78 :: Double
         -> GroupObjects a0
         -> IO ()
setTop78 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2233 :: GroupObjects a0
          -> IO ()
dummy2233 =
  method0 "_Dummy22"
          []

getVisible90 :: GroupObjects a0
             -> IO Bool
getVisible90 =
  propertyGet "Visible"
              []
              outBool

setVisible90 :: Bool
             -> GroupObjects a0
             -> IO ()
setVisible90 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth82 :: GroupObjects a0
           -> IO Double
getWidth82 =
  propertyGet "Width"
              []
              outDouble

setWidth77 :: Double
           -> GroupObjects a0
           -> IO ()
setWidth77 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder61 :: GroupObjects a0
            -> IO Int32
getZOrder61 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange64 :: GroupObjects a0
                -> IO (ShapeRange ())
getShapeRange64 =
  propertyGet "ShapeRange"
              []
              outIUnknown

dummy273 :: GroupObjects a0
         -> IO ()
dummy273 =
  method0 "_Dummy27"
          []

dummy285 :: GroupObjects a0
         -> IO ()
dummy285 =
  method0 "_Dummy28"
          []

getAddIndent23 :: GroupObjects a0
               -> IO Bool
getAddIndent23 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent23 :: Bool
               -> GroupObjects a0
               -> IO ()
setAddIndent23 rhs =
  propertySet "AddIndent"
              [inBool rhs]

dummy304 :: GroupObjects a0
         -> IO ()
dummy304 =
  method0 "_Dummy30"
          []

getArrowHeadLength6 :: GroupObjects a0
                    -> IO a1
getArrowHeadLength6 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength6 :: a1
                    -> GroupObjects a0
                    -> IO ()
setArrowHeadLength6 rhs =
  propertySet "ArrowHeadLength"
              [inVariant rhs]

getArrowHeadStyle6 :: GroupObjects a0
                   -> IO a1
getArrowHeadStyle6 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle6 :: a1
                   -> GroupObjects a0
                   -> IO ()
setArrowHeadStyle6 rhs =
  propertySet "ArrowHeadStyle"
              [inVariant rhs]

getArrowHeadWidth6 :: GroupObjects a0
                   -> IO a1
getArrowHeadWidth6 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth6 :: a1
                   -> GroupObjects a0
                   -> IO ()
setArrowHeadWidth6 rhs =
  propertySet "ArrowHeadWidth"
              [inVariant rhs]

getAutoSize20 :: GroupObjects a0
              -> IO Bool
getAutoSize20 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize20 :: Bool
              -> GroupObjects a0
              -> IO ()
setAutoSize20 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getBorder55 :: GroupObjects a0
            -> IO (Border ())
getBorder55 =
  propertyGet "Border"
              []
              outIUnknown

dummy369 :: GroupObjects a0
         -> IO ()
dummy369 =
  method0 "_Dummy36"
          []

dummy374 :: GroupObjects a0
         -> IO ()
dummy374 =
  method0 "_Dummy37"
          []

dummy384 :: GroupObjects a0
         -> IO ()
dummy384 =
  method0 "_Dummy38"
          []

checkSpelling48 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> GroupObjects a0
                -> IO a1
checkSpelling48 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getDefault150 :: GroupObjects a0
              -> IO Int32
getDefault150 =
  propertyGet "_Default"
              []
              outInt32

setDefault40 :: Int32
             -> GroupObjects a0
             -> IO ()
setDefault40 rhs =
  propertySet "_Default"
              [inInt32 rhs]

dummy414 :: GroupObjects a0
         -> IO ()
dummy414 =
  method0 "_Dummy41"
          []

dummy423 :: GroupObjects a0
         -> IO ()
dummy423 =
  method0 "_Dummy42"
          []

dummy435 :: GroupObjects a0
         -> IO ()
dummy435 =
  method0 "_Dummy43"
          []

dummy444 :: GroupObjects a0
         -> IO ()
dummy444 =
  method0 "_Dummy44"
          []

dummy453 :: GroupObjects a0
         -> IO ()
dummy453 =
  method0 "_Dummy45"
          []

getFont42 :: GroupObjects a0
          -> IO (Font ())
getFont42 =
  propertyGet "Font"
              []
              outIDispatch

dummy474 :: GroupObjects a0
         -> IO ()
dummy474 =
  method0 "_Dummy47"
          []

dummy482 :: GroupObjects a0
         -> IO ()
dummy482 =
  method0 "_Dummy48"
          []

getHorizontalAlignment29 :: GroupObjects a0
                         -> IO a1
getHorizontalAlignment29 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment29 :: a1
                         -> GroupObjects a0
                         -> IO ()
setHorizontalAlignment29 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

dummy503 :: GroupObjects a0
         -> IO ()
dummy503 =
  method0 "_Dummy50"
          []

getInterior53 :: GroupObjects a0
              -> IO (Interior ())
getInterior53 =
  propertyGet "Interior"
              []
              outIUnknown

dummy522 :: GroupObjects a0
         -> IO ()
dummy522 =
  method0 "_Dummy52"
          []

dummy532 :: GroupObjects a0
         -> IO ()
dummy532 =
  method0 "_Dummy53"
          []

dummy544 :: GroupObjects a0
         -> IO ()
dummy544 =
  method0 "_Dummy54"
          []

dummy552 :: GroupObjects a0
         -> IO ()
dummy552 =
  method0 "_Dummy55"
          []

dummy565 :: GroupObjects a0
         -> IO ()
dummy565 =
  method0 "_Dummy56"
          []

dummy572 :: GroupObjects a0
         -> IO ()
dummy572 =
  method0 "_Dummy57"
          []

dummy582 :: GroupObjects a0
         -> IO ()
dummy582 =
  method0 "_Dummy58"
          []

dummy592 :: GroupObjects a0
         -> IO ()
dummy592 =
  method0 "_Dummy59"
          []

dummy602 :: GroupObjects a0
         -> IO ()
dummy602 =
  method0 "_Dummy60"
          []

dummy612 :: GroupObjects a0
         -> IO ()
dummy612 =
  method0 "_Dummy61"
          []

dummy622 :: GroupObjects a0
         -> IO ()
dummy622 =
  method0 "_Dummy62"
          []

dummy632 :: GroupObjects a0
         -> IO ()
dummy632 =
  method0 "_Dummy63"
          []

getOrientation36 :: GroupObjects a0
                 -> IO a1
getOrientation36 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation36 :: a1
                 -> GroupObjects a0
                 -> IO ()
setOrientation36 rhs =
  propertySet "Orientation"
              [inVariant rhs]

dummy653 :: GroupObjects a0
         -> IO ()
dummy653 =
  method0 "_Dummy65"
          []

dummy663 :: GroupObjects a0
         -> IO ()
dummy663 =
  method0 "_Dummy66"
          []

dummy673 :: GroupObjects a0
         -> IO ()
dummy673 =
  method0 "_Dummy67"
          []

dummy682 :: GroupObjects a0
         -> IO ()
dummy682 =
  method0 "_Dummy68"
          []

getRoundedCorners11 :: GroupObjects a0
                    -> IO Bool
getRoundedCorners11 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners11 :: Bool
                    -> GroupObjects a0
                    -> IO ()
setRoundedCorners11 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

dummy703 :: GroupObjects a0
         -> IO ()
dummy703 =
  method0 "_Dummy70"
          []

getShadow33 :: GroupObjects a0
            -> IO Bool
getShadow33 =
  propertyGet "Shadow"
              []
              outBool

setShadow30 :: Bool
            -> GroupObjects a0
            -> IO ()
setShadow30 rhs =
  propertySet "Shadow"
              [inBool rhs]

dummy722 :: GroupObjects a0
         -> IO ()
dummy722 =
  method0 "_Dummy72"
          []

dummy732 :: GroupObjects a0
         -> IO ()
dummy732 =
  method0 "_Dummy73"
          []

ungroup8 :: GroupObjects a0
         -> IO (IDispatch ())
ungroup8 =
  function1 "Ungroup"
            []
            outIDispatch

dummy753 :: GroupObjects a0
         -> IO ()
dummy753 =
  method0 "_Dummy75"
          []

getVerticalAlignment29 :: GroupObjects a0
                       -> IO a1
getVerticalAlignment29 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment29 :: a1
                       -> GroupObjects a0
                       -> IO ()
setVerticalAlignment29 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

dummy772 :: GroupObjects a0
         -> IO ()
dummy772 =
  method0 "_Dummy77"
          []

getReadingOrder29 :: GroupObjects a0
                  -> IO Int32
getReadingOrder29 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder29 :: Int32
                  -> GroupObjects a0
                  -> IO ()
setReadingOrder29 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getCount150 :: GroupObjects a0
            -> IO Int32
getCount150 =
  propertyGet "Count"
              []
              outInt32

group34 :: GroupObjects a0
        -> IO (GroupObject ())
group34 =
  function1 "Group"
            []
            outIDispatch

item74 :: a1
       -> GroupObjects a0
       -> IO (IDispatch ())
item74 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum60 :: GroupObjects a0
          -> IO (IUnknown ())
newEnum60 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Line
-- 
-- --------------------------------------------------
data Line_ a = Line__ 
type Line a = IDispatch (Line_ a)
iidLine :: IID (Line ())
iidLine = mkIID "{0002089A-0000-0000-C000-000000000046}"

queryInterface75 :: (Variant a1)
                 => GUID
                 -> Line a0
                 -> IO a1
queryInterface75 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef75 :: Line a0
         -> IO Word32
addRef75 =
  function1 "AddRef"
            []
            outWord32

release75 :: Line a0
          -> IO Word32
release75 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount75 :: Line a0
                   -> IO Word32
getTypeInfoCount75 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo75 :: (Variant a1)
              => Word32
              -> Word32
              -> Line a0
              -> IO a1
getTypeInfo75 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames75 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Line a0
                -> IO Int32
getIDsOfNames75 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke75 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Line a0
         -> IO (a1, a2, Word32)
invoke75 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication343 :: (Variant a1)
                  => Line a0
                  -> IO a1
getApplication343 =
  propertyGet "Application"
              []
              outVariant

getCreator343 :: Line a0
              -> IO XlCreator
getCreator343 =
  propertyGet "Creator"
              []
              outEnum

getParent358 :: Line a0
             -> IO (IDispatch ())
getParent358 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell31 :: Line a0
                     -> IO (Range ())
getBottomRightCell31 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront63 :: Line a0
               -> IO a1
bringToFront63 =
  function1 "BringToFront"
            []
            outVariant

copy83 :: Line a0
       -> IO a1
copy83 =
  function1 "Copy"
            []
            outVariant

copyPicture69 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Line a0
              -> IO a1
copyPicture69 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut66 :: Line a0
      -> IO a1
cut66 =
  function1 "Cut"
            []
            outVariant

delete168 :: Line a0
          -> IO a1
delete168 =
  function1 "Delete"
            []
            outVariant

duplicate66 :: Line a0
            -> IO (IDispatch ())
duplicate66 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled73 :: Line a0
             -> IO Bool
getEnabled73 =
  propertyGet "Enabled"
              []
              outBool

setEnabled73 :: Bool
             -> Line a0
             -> IO ()
setEnabled73 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight81 :: Line a0
            -> IO Double
getHeight81 =
  propertyGet "Height"
              []
              outDouble

setHeight76 :: Double
            -> Line a0
            -> IO ()
setHeight76 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex61 :: Line a0
           -> IO Int32
getIndex61 =
  propertyGet "Index"
              []
              outInt32

getLeft84 :: Line a0
          -> IO Double
getLeft84 =
  propertyGet "Left"
              []
              outDouble

setLeft79 :: Double
          -> Line a0
          -> IO ()
setLeft79 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked74 :: Line a0
            -> IO Bool
getLocked74 =
  propertyGet "Locked"
              []
              outBool

setLocked74 :: Bool
            -> Line a0
            -> IO ()
setLocked74 rhs =
  propertySet "Locked"
              [inBool rhs]

getName102 :: Line a0
           -> IO String
getName102 =
  propertyGet "Name"
              []
              outString

setName62 :: String
          -> Line a0
          -> IO ()
setName62 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction70 :: Line a0
              -> IO String
getOnAction70 =
  propertyGet "OnAction"
              []
              outString

setOnAction70 :: String
              -> Line a0
              -> IO ()
setOnAction70 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement64 :: Line a0
               -> IO a1
getPlacement64 =
  propertyGet "Placement"
              []
              outVariant

setPlacement64 :: a1
               -> Line a0
               -> IO ()
setPlacement64 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject64 :: Line a0
                 -> IO Bool
getPrintObject64 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject64 :: Bool
                 -> Line a0
                 -> IO ()
setPrintObject64 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select108 :: (Variant a2)
          => a2
          -> Line a0
          -> IO a1
select108 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack63 :: Line a0
             -> IO a1
sendToBack63 =
  function1 "SendToBack"
            []
            outVariant

getTop84 :: Line a0
         -> IO Double
getTop84 =
  propertyGet "Top"
              []
              outDouble

setTop79 :: Double
         -> Line a0
         -> IO ()
setTop79 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell31 :: Line a0
                 -> IO (Range ())
getTopLeftCell31 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible91 :: Line a0
             -> IO Bool
getVisible91 =
  propertyGet "Visible"
              []
              outBool

setVisible91 :: Bool
             -> Line a0
             -> IO ()
setVisible91 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth83 :: Line a0
           -> IO Double
getWidth83 =
  propertyGet "Width"
              []
              outDouble

setWidth78 :: Double
           -> Line a0
           -> IO ()
setWidth78 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder62 :: Line a0
            -> IO Int32
getZOrder62 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange65 :: Line a0
                -> IO (ShapeRange ())
getShapeRange65 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getArrowHeadLength7 :: Line a0
                    -> IO a1
getArrowHeadLength7 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength7 :: a1
                    -> Line a0
                    -> IO ()
setArrowHeadLength7 rhs =
  propertySet "ArrowHeadLength"
              [inVariant rhs]

getArrowHeadStyle7 :: Line a0
                   -> IO a1
getArrowHeadStyle7 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle7 :: a1
                   -> Line a0
                   -> IO ()
setArrowHeadStyle7 rhs =
  propertySet "ArrowHeadStyle"
              [inVariant rhs]

getArrowHeadWidth7 :: Line a0
                   -> IO a1
getArrowHeadWidth7 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth7 :: a1
                   -> Line a0
                   -> IO ()
setArrowHeadWidth7 rhs =
  propertySet "ArrowHeadWidth"
              [inVariant rhs]

getBorder56 :: Line a0
            -> IO (Border ())
getBorder56 =
  propertyGet "Border"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Lines
-- 
-- --------------------------------------------------
data Lines_ a = Lines__ 
type Lines a = IDispatch (Lines_ a)
iidLines :: IID (Lines ())
iidLines = mkIID "{0002089B-0000-0000-C000-000000000046}"

queryInterface76 :: (Variant a1)
                 => GUID
                 -> Lines a0
                 -> IO a1
queryInterface76 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef76 :: Lines a0
         -> IO Word32
addRef76 =
  function1 "AddRef"
            []
            outWord32

release76 :: Lines a0
          -> IO Word32
release76 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount76 :: Lines a0
                   -> IO Word32
getTypeInfoCount76 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo76 :: (Variant a1)
              => Word32
              -> Word32
              -> Lines a0
              -> IO a1
getTypeInfo76 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames76 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Lines a0
                -> IO Int32
getIDsOfNames76 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke76 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Lines a0
         -> IO (a1, a2, Word32)
invoke76 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication344 :: (Variant a1)
                  => Lines a0
                  -> IO a1
getApplication344 =
  propertyGet "Application"
              []
              outVariant

getCreator344 :: Lines a0
              -> IO XlCreator
getCreator344 =
  propertyGet "Creator"
              []
              outEnum

getParent359 :: Lines a0
             -> IO (IDispatch ())
getParent359 =
  propertyGet "Parent"
              []
              outIDispatch

dummy349 :: Lines a0
         -> IO ()
dummy349 =
  method0 "_Dummy3"
          []

bringToFront64 :: Lines a0
               -> IO a1
bringToFront64 =
  function1 "BringToFront"
            []
            outVariant

copy84 :: Lines a0
       -> IO a1
copy84 =
  function1 "Copy"
            []
            outVariant

copyPicture70 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Lines a0
              -> IO a1
copyPicture70 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut67 :: Lines a0
      -> IO a1
cut67 =
  function1 "Cut"
            []
            outVariant

delete169 :: Lines a0
          -> IO a1
delete169 =
  function1 "Delete"
            []
            outVariant

duplicate67 :: Lines a0
            -> IO (IDispatch ())
duplicate67 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled74 :: Lines a0
             -> IO Bool
getEnabled74 =
  propertyGet "Enabled"
              []
              outBool

setEnabled74 :: Bool
             -> Lines a0
             -> IO ()
setEnabled74 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight82 :: Lines a0
            -> IO Double
getHeight82 =
  propertyGet "Height"
              []
              outDouble

setHeight77 :: Double
            -> Lines a0
            -> IO ()
setHeight77 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1236 :: Lines a0
          -> IO ()
dummy1236 =
  method0 "_Dummy12"
          []

getLeft85 :: Lines a0
          -> IO Double
getLeft85 =
  propertyGet "Left"
              []
              outDouble

setLeft80 :: Double
          -> Lines a0
          -> IO ()
setLeft80 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked75 :: Lines a0
            -> IO Bool
getLocked75 =
  propertyGet "Locked"
              []
              outBool

setLocked75 :: Bool
            -> Lines a0
            -> IO ()
setLocked75 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1534 :: Lines a0
          -> IO ()
dummy1534 =
  method0 "_Dummy15"
          []

getOnAction71 :: Lines a0
              -> IO String
getOnAction71 =
  propertyGet "OnAction"
              []
              outString

setOnAction71 :: String
              -> Lines a0
              -> IO ()
setOnAction71 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement65 :: Lines a0
               -> IO a1
getPlacement65 =
  propertyGet "Placement"
              []
              outVariant

setPlacement65 :: a1
               -> Lines a0
               -> IO ()
setPlacement65 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject65 :: Lines a0
                 -> IO Bool
getPrintObject65 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject65 :: Bool
                 -> Lines a0
                 -> IO ()
setPrintObject65 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select109 :: (Variant a2)
          => a2
          -> Lines a0
          -> IO a1
select109 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack64 :: Lines a0
             -> IO a1
sendToBack64 =
  function1 "SendToBack"
            []
            outVariant

getTop85 :: Lines a0
         -> IO Double
getTop85 =
  propertyGet "Top"
              []
              outDouble

setTop80 :: Double
         -> Lines a0
         -> IO ()
setTop80 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2234 :: Lines a0
          -> IO ()
dummy2234 =
  method0 "_Dummy22"
          []

getVisible92 :: Lines a0
             -> IO Bool
getVisible92 =
  propertyGet "Visible"
              []
              outBool

setVisible92 :: Bool
             -> Lines a0
             -> IO ()
setVisible92 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth84 :: Lines a0
           -> IO Double
getWidth84 =
  propertyGet "Width"
              []
              outDouble

setWidth79 :: Double
           -> Lines a0
           -> IO ()
setWidth79 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder63 :: Lines a0
            -> IO Int32
getZOrder63 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange66 :: Lines a0
                -> IO (ShapeRange ())
getShapeRange66 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getArrowHeadLength8 :: Lines a0
                    -> IO a1
getArrowHeadLength8 =
  propertyGet "ArrowHeadLength"
              []
              outVariant

setArrowHeadLength8 :: a1
                    -> Lines a0
                    -> IO ()
setArrowHeadLength8 rhs =
  propertySet "ArrowHeadLength"
              [inVariant rhs]

getArrowHeadStyle8 :: Lines a0
                   -> IO a1
getArrowHeadStyle8 =
  propertyGet "ArrowHeadStyle"
              []
              outVariant

setArrowHeadStyle8 :: a1
                   -> Lines a0
                   -> IO ()
setArrowHeadStyle8 rhs =
  propertySet "ArrowHeadStyle"
              [inVariant rhs]

getArrowHeadWidth8 :: Lines a0
                   -> IO a1
getArrowHeadWidth8 =
  propertyGet "ArrowHeadWidth"
              []
              outVariant

setArrowHeadWidth8 :: a1
                   -> Lines a0
                   -> IO ()
setArrowHeadWidth8 rhs =
  propertySet "ArrowHeadWidth"
              [inVariant rhs]

getBorder57 :: Lines a0
            -> IO (Border ())
getBorder57 =
  propertyGet "Border"
              []
              outIUnknown

add104 :: Double
       -> Double
       -> Double
       -> Double
       -> Lines a0
       -> IO (Line ())
add104 x1 y1 x2 y2 =
  function1 "Add"
            [ inDouble x1
            , inDouble y1
            , inDouble x2
            , inDouble y2
            ]
            outIDispatch

getCount151 :: Lines a0
            -> IO Int32
getCount151 =
  propertyGet "Count"
              []
              outInt32

group35 :: Lines a0
        -> IO (GroupObject ())
group35 =
  function1 "Group"
            []
            outIDispatch

item75 :: a1
       -> Lines a0
       -> IO (IDispatch ())
item75 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum61 :: Lines a0
          -> IO (IUnknown ())
newEnum61 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Rectangle
-- 
-- --------------------------------------------------
data Rectangle_ a = Rectangle__ 
type Rectangle a = IDispatch (Rectangle_ a)
iidRectangle :: IID (Rectangle ())
iidRectangle = mkIID "{0002089C-0000-0000-C000-000000000046}"

queryInterface77 :: (Variant a1)
                 => GUID
                 -> Rectangle a0
                 -> IO a1
queryInterface77 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef77 :: Rectangle a0
         -> IO Word32
addRef77 =
  function1 "AddRef"
            []
            outWord32

release77 :: Rectangle a0
          -> IO Word32
release77 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount77 :: Rectangle a0
                   -> IO Word32
getTypeInfoCount77 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo77 :: (Variant a1)
              => Word32
              -> Word32
              -> Rectangle a0
              -> IO a1
getTypeInfo77 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames77 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Rectangle a0
                -> IO Int32
getIDsOfNames77 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke77 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Rectangle a0
         -> IO (a1, a2, Word32)
invoke77 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication345 :: (Variant a1)
                  => Rectangle a0
                  -> IO a1
getApplication345 =
  propertyGet "Application"
              []
              outVariant

getCreator345 :: Rectangle a0
              -> IO XlCreator
getCreator345 =
  propertyGet "Creator"
              []
              outEnum

getParent360 :: Rectangle a0
             -> IO (IDispatch ())
getParent360 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell32 :: Rectangle a0
                     -> IO (Range ())
getBottomRightCell32 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront65 :: Rectangle a0
               -> IO a1
bringToFront65 =
  function1 "BringToFront"
            []
            outVariant

copy85 :: Rectangle a0
       -> IO a1
copy85 =
  function1 "Copy"
            []
            outVariant

copyPicture71 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Rectangle a0
              -> IO a1
copyPicture71 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut68 :: Rectangle a0
      -> IO a1
cut68 =
  function1 "Cut"
            []
            outVariant

delete170 :: Rectangle a0
          -> IO a1
delete170 =
  function1 "Delete"
            []
            outVariant

duplicate68 :: Rectangle a0
            -> IO (IDispatch ())
duplicate68 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled75 :: Rectangle a0
             -> IO Bool
getEnabled75 =
  propertyGet "Enabled"
              []
              outBool

setEnabled75 :: Bool
             -> Rectangle a0
             -> IO ()
setEnabled75 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight83 :: Rectangle a0
            -> IO Double
getHeight83 =
  propertyGet "Height"
              []
              outDouble

setHeight78 :: Double
            -> Rectangle a0
            -> IO ()
setHeight78 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex62 :: Rectangle a0
           -> IO Int32
getIndex62 =
  propertyGet "Index"
              []
              outInt32

getLeft86 :: Rectangle a0
          -> IO Double
getLeft86 =
  propertyGet "Left"
              []
              outDouble

setLeft81 :: Double
          -> Rectangle a0
          -> IO ()
setLeft81 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked76 :: Rectangle a0
            -> IO Bool
getLocked76 =
  propertyGet "Locked"
              []
              outBool

setLocked76 :: Bool
            -> Rectangle a0
            -> IO ()
setLocked76 rhs =
  propertySet "Locked"
              [inBool rhs]

getName103 :: Rectangle a0
           -> IO String
getName103 =
  propertyGet "Name"
              []
              outString

setName63 :: String
          -> Rectangle a0
          -> IO ()
setName63 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction72 :: Rectangle a0
              -> IO String
getOnAction72 =
  propertyGet "OnAction"
              []
              outString

setOnAction72 :: String
              -> Rectangle a0
              -> IO ()
setOnAction72 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement66 :: Rectangle a0
               -> IO a1
getPlacement66 =
  propertyGet "Placement"
              []
              outVariant

setPlacement66 :: a1
               -> Rectangle a0
               -> IO ()
setPlacement66 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject66 :: Rectangle a0
                 -> IO Bool
getPrintObject66 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject66 :: Bool
                 -> Rectangle a0
                 -> IO ()
setPrintObject66 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select110 :: (Variant a2)
          => a2
          -> Rectangle a0
          -> IO a1
select110 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack65 :: Rectangle a0
             -> IO a1
sendToBack65 =
  function1 "SendToBack"
            []
            outVariant

getTop86 :: Rectangle a0
         -> IO Double
getTop86 =
  propertyGet "Top"
              []
              outDouble

setTop81 :: Double
         -> Rectangle a0
         -> IO ()
setTop81 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell32 :: Rectangle a0
                 -> IO (Range ())
getTopLeftCell32 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible93 :: Rectangle a0
             -> IO Bool
getVisible93 =
  propertyGet "Visible"
              []
              outBool

setVisible93 :: Bool
             -> Rectangle a0
             -> IO ()
setVisible93 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth85 :: Rectangle a0
           -> IO Double
getWidth85 =
  propertyGet "Width"
              []
              outDouble

setWidth80 :: Double
           -> Rectangle a0
           -> IO ()
setWidth80 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder64 :: Rectangle a0
            -> IO Int32
getZOrder64 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange67 :: Rectangle a0
                -> IO (ShapeRange ())
getShapeRange67 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent24 :: Rectangle a0
               -> IO Bool
getAddIndent24 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent24 :: Bool
               -> Rectangle a0
               -> IO ()
setAddIndent24 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont23 :: Rectangle a0
                   -> IO a1
getAutoScaleFont23 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont23 :: a1
                   -> Rectangle a0
                   -> IO ()
setAutoScaleFont23 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize21 :: Rectangle a0
              -> IO Bool
getAutoSize21 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize21 :: Bool
              -> Rectangle a0
              -> IO ()
setAutoSize21 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption63 :: Rectangle a0
             -> IO String
getCaption63 =
  propertyGet "Caption"
              []
              outString

setCaption61 :: String
             -> Rectangle a0
             -> IO ()
setCaption61 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters47 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Rectangle a0
                -> IO (Characters ())
getCharacters47 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling49 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Rectangle a0
                -> IO a1
checkSpelling49 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont43 :: Rectangle a0
          -> IO (Font ())
getFont43 =
  propertyGet "Font"
              []
              outIDispatch

getFormula32 :: Rectangle a0
             -> IO String
getFormula32 =
  propertyGet "Formula"
              []
              outString

setFormula27 :: String
             -> Rectangle a0
             -> IO ()
setFormula27 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment30 :: Rectangle a0
                         -> IO a1
getHorizontalAlignment30 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment30 :: a1
                         -> Rectangle a0
                         -> IO ()
setHorizontalAlignment30 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText38 :: Rectangle a0
                -> IO Bool
getLockedText38 =
  propertyGet "LockedText"
              []
              outBool

setLockedText38 :: Bool
                -> Rectangle a0
                -> IO ()
setLockedText38 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation37 :: Rectangle a0
                 -> IO a1
getOrientation37 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation37 :: a1
                 -> Rectangle a0
                 -> IO ()
setOrientation37 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText54 :: Rectangle a0
          -> IO String
getText54 =
  propertyGet "Text"
              []
              outString

setText52 :: String
          -> Rectangle a0
          -> IO ()
setText52 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment30 :: Rectangle a0
                       -> IO a1
getVerticalAlignment30 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment30 :: a1
                       -> Rectangle a0
                       -> IO ()
setVerticalAlignment30 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder30 :: Rectangle a0
                  -> IO Int32
getReadingOrder30 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder30 :: Int32
                  -> Rectangle a0
                  -> IO ()
setReadingOrder30 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder58 :: Rectangle a0
            -> IO (Border ())
getBorder58 =
  propertyGet "Border"
              []
              outIUnknown

getInterior54 :: Rectangle a0
              -> IO (Interior ())
getInterior54 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow34 :: Rectangle a0
            -> IO Bool
getShadow34 =
  propertyGet "Shadow"
              []
              outBool

setShadow31 :: Bool
            -> Rectangle a0
            -> IO ()
setShadow31 rhs =
  propertySet "Shadow"
              [inBool rhs]

getRoundedCorners12 :: Rectangle a0
                    -> IO Bool
getRoundedCorners12 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners12 :: Bool
                    -> Rectangle a0
                    -> IO ()
setRoundedCorners12 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Rectangles
-- 
-- --------------------------------------------------
data Rectangles_ a = Rectangles__ 
type Rectangles a = IDispatch (Rectangles_ a)
iidRectangles :: IID (Rectangles ())
iidRectangles = mkIID "{0002089D-0000-0000-C000-000000000046}"

queryInterface78 :: (Variant a1)
                 => GUID
                 -> Rectangles a0
                 -> IO a1
queryInterface78 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef78 :: Rectangles a0
         -> IO Word32
addRef78 =
  function1 "AddRef"
            []
            outWord32

release78 :: Rectangles a0
          -> IO Word32
release78 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount78 :: Rectangles a0
                   -> IO Word32
getTypeInfoCount78 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo78 :: (Variant a1)
              => Word32
              -> Word32
              -> Rectangles a0
              -> IO a1
getTypeInfo78 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames78 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Rectangles a0
                -> IO Int32
getIDsOfNames78 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke78 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Rectangles a0
         -> IO (a1, a2, Word32)
invoke78 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication346 :: (Variant a1)
                  => Rectangles a0
                  -> IO a1
getApplication346 =
  propertyGet "Application"
              []
              outVariant

getCreator346 :: Rectangles a0
              -> IO XlCreator
getCreator346 =
  propertyGet "Creator"
              []
              outEnum

getParent361 :: Rectangles a0
             -> IO (IDispatch ())
getParent361 =
  propertyGet "Parent"
              []
              outIDispatch

dummy350 :: Rectangles a0
         -> IO ()
dummy350 =
  method0 "_Dummy3"
          []

bringToFront66 :: Rectangles a0
               -> IO a1
bringToFront66 =
  function1 "BringToFront"
            []
            outVariant

copy86 :: Rectangles a0
       -> IO a1
copy86 =
  function1 "Copy"
            []
            outVariant

copyPicture72 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Rectangles a0
              -> IO a1
copyPicture72 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut69 :: Rectangles a0
      -> IO a1
cut69 =
  function1 "Cut"
            []
            outVariant

delete171 :: Rectangles a0
          -> IO a1
delete171 =
  function1 "Delete"
            []
            outVariant

duplicate69 :: Rectangles a0
            -> IO (IDispatch ())
duplicate69 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled76 :: Rectangles a0
             -> IO Bool
getEnabled76 =
  propertyGet "Enabled"
              []
              outBool

setEnabled76 :: Bool
             -> Rectangles a0
             -> IO ()
setEnabled76 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight84 :: Rectangles a0
            -> IO Double
getHeight84 =
  propertyGet "Height"
              []
              outDouble

setHeight79 :: Double
            -> Rectangles a0
            -> IO ()
setHeight79 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1237 :: Rectangles a0
          -> IO ()
dummy1237 =
  method0 "_Dummy12"
          []

getLeft87 :: Rectangles a0
          -> IO Double
getLeft87 =
  propertyGet "Left"
              []
              outDouble

setLeft82 :: Double
          -> Rectangles a0
          -> IO ()
setLeft82 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked77 :: Rectangles a0
            -> IO Bool
getLocked77 =
  propertyGet "Locked"
              []
              outBool

setLocked77 :: Bool
            -> Rectangles a0
            -> IO ()
setLocked77 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1535 :: Rectangles a0
          -> IO ()
dummy1535 =
  method0 "_Dummy15"
          []

getOnAction73 :: Rectangles a0
              -> IO String
getOnAction73 =
  propertyGet "OnAction"
              []
              outString

setOnAction73 :: String
              -> Rectangles a0
              -> IO ()
setOnAction73 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement67 :: Rectangles a0
               -> IO a1
getPlacement67 =
  propertyGet "Placement"
              []
              outVariant

setPlacement67 :: a1
               -> Rectangles a0
               -> IO ()
setPlacement67 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject67 :: Rectangles a0
                 -> IO Bool
getPrintObject67 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject67 :: Bool
                 -> Rectangles a0
                 -> IO ()
setPrintObject67 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select111 :: (Variant a2)
          => a2
          -> Rectangles a0
          -> IO a1
select111 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack66 :: Rectangles a0
             -> IO a1
sendToBack66 =
  function1 "SendToBack"
            []
            outVariant

getTop87 :: Rectangles a0
         -> IO Double
getTop87 =
  propertyGet "Top"
              []
              outDouble

setTop82 :: Double
         -> Rectangles a0
         -> IO ()
setTop82 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2235 :: Rectangles a0
          -> IO ()
dummy2235 =
  method0 "_Dummy22"
          []

getVisible94 :: Rectangles a0
             -> IO Bool
getVisible94 =
  propertyGet "Visible"
              []
              outBool

setVisible94 :: Bool
             -> Rectangles a0
             -> IO ()
setVisible94 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth86 :: Rectangles a0
           -> IO Double
getWidth86 =
  propertyGet "Width"
              []
              outDouble

setWidth81 :: Double
           -> Rectangles a0
           -> IO ()
setWidth81 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder65 :: Rectangles a0
            -> IO Int32
getZOrder65 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange68 :: Rectangles a0
                -> IO (ShapeRange ())
getShapeRange68 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent25 :: Rectangles a0
               -> IO Bool
getAddIndent25 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent25 :: Bool
               -> Rectangles a0
               -> IO ()
setAddIndent25 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont24 :: Rectangles a0
                   -> IO a1
getAutoScaleFont24 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont24 :: a1
                   -> Rectangles a0
                   -> IO ()
setAutoScaleFont24 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize22 :: Rectangles a0
              -> IO Bool
getAutoSize22 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize22 :: Bool
              -> Rectangles a0
              -> IO ()
setAutoSize22 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption64 :: Rectangles a0
             -> IO String
getCaption64 =
  propertyGet "Caption"
              []
              outString

setCaption62 :: String
             -> Rectangles a0
             -> IO ()
setCaption62 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters48 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Rectangles a0
                -> IO (Characters ())
getCharacters48 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling50 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Rectangles a0
                -> IO a1
checkSpelling50 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont44 :: Rectangles a0
          -> IO (Font ())
getFont44 =
  propertyGet "Font"
              []
              outIDispatch

getFormula33 :: Rectangles a0
             -> IO String
getFormula33 =
  propertyGet "Formula"
              []
              outString

setFormula28 :: String
             -> Rectangles a0
             -> IO ()
setFormula28 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment31 :: Rectangles a0
                         -> IO a1
getHorizontalAlignment31 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment31 :: a1
                         -> Rectangles a0
                         -> IO ()
setHorizontalAlignment31 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText39 :: Rectangles a0
                -> IO Bool
getLockedText39 =
  propertyGet "LockedText"
              []
              outBool

setLockedText39 :: Bool
                -> Rectangles a0
                -> IO ()
setLockedText39 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation38 :: Rectangles a0
                 -> IO a1
getOrientation38 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation38 :: a1
                 -> Rectangles a0
                 -> IO ()
setOrientation38 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText55 :: Rectangles a0
          -> IO String
getText55 =
  propertyGet "Text"
              []
              outString

setText53 :: String
          -> Rectangles a0
          -> IO ()
setText53 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment31 :: Rectangles a0
                       -> IO a1
getVerticalAlignment31 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment31 :: a1
                       -> Rectangles a0
                       -> IO ()
setVerticalAlignment31 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder31 :: Rectangles a0
                  -> IO Int32
getReadingOrder31 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder31 :: Int32
                  -> Rectangles a0
                  -> IO ()
setReadingOrder31 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder59 :: Rectangles a0
            -> IO (Border ())
getBorder59 =
  propertyGet "Border"
              []
              outIUnknown

getInterior55 :: Rectangles a0
              -> IO (Interior ())
getInterior55 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow35 :: Rectangles a0
            -> IO Bool
getShadow35 =
  propertyGet "Shadow"
              []
              outBool

setShadow32 :: Bool
            -> Rectangles a0
            -> IO ()
setShadow32 rhs =
  propertySet "Shadow"
              [inBool rhs]

getRoundedCorners13 :: Rectangles a0
                    -> IO Bool
getRoundedCorners13 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners13 :: Bool
                    -> Rectangles a0
                    -> IO ()
setRoundedCorners13 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

add105 :: Double
       -> Double
       -> Double
       -> Double
       -> Rectangles a0
       -> IO (Rectangle ())
add105 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount152 :: Rectangles a0
            -> IO Int32
getCount152 =
  propertyGet "Count"
              []
              outInt32

group36 :: Rectangles a0
        -> IO (GroupObject ())
group36 =
  function1 "Group"
            []
            outIDispatch

item76 :: a1
       -> Rectangles a0
       -> IO (IDispatch ())
item76 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum62 :: Rectangles a0
          -> IO (IUnknown ())
newEnum62 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Oval
-- 
-- --------------------------------------------------
data Oval_ a = Oval__ 
type Oval a = IDispatch (Oval_ a)
iidOval :: IID (Oval ())
iidOval = mkIID "{0002089E-0000-0000-C000-000000000046}"

queryInterface79 :: (Variant a1)
                 => GUID
                 -> Oval a0
                 -> IO a1
queryInterface79 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef79 :: Oval a0
         -> IO Word32
addRef79 =
  function1 "AddRef"
            []
            outWord32

release79 :: Oval a0
          -> IO Word32
release79 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount79 :: Oval a0
                   -> IO Word32
getTypeInfoCount79 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo79 :: (Variant a1)
              => Word32
              -> Word32
              -> Oval a0
              -> IO a1
getTypeInfo79 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames79 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Oval a0
                -> IO Int32
getIDsOfNames79 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke79 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Oval a0
         -> IO (a1, a2, Word32)
invoke79 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication347 :: (Variant a1)
                  => Oval a0
                  -> IO a1
getApplication347 =
  propertyGet "Application"
              []
              outVariant

getCreator347 :: Oval a0
              -> IO XlCreator
getCreator347 =
  propertyGet "Creator"
              []
              outEnum

getParent362 :: Oval a0
             -> IO (IDispatch ())
getParent362 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell33 :: Oval a0
                     -> IO (Range ())
getBottomRightCell33 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront67 :: Oval a0
               -> IO a1
bringToFront67 =
  function1 "BringToFront"
            []
            outVariant

copy87 :: Oval a0
       -> IO a1
copy87 =
  function1 "Copy"
            []
            outVariant

copyPicture73 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Oval a0
              -> IO a1
copyPicture73 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut70 :: Oval a0
      -> IO a1
cut70 =
  function1 "Cut"
            []
            outVariant

delete172 :: Oval a0
          -> IO a1
delete172 =
  function1 "Delete"
            []
            outVariant

duplicate70 :: Oval a0
            -> IO (IDispatch ())
duplicate70 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled77 :: Oval a0
             -> IO Bool
getEnabled77 =
  propertyGet "Enabled"
              []
              outBool

setEnabled77 :: Bool
             -> Oval a0
             -> IO ()
setEnabled77 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight85 :: Oval a0
            -> IO Double
getHeight85 =
  propertyGet "Height"
              []
              outDouble

setHeight80 :: Double
            -> Oval a0
            -> IO ()
setHeight80 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex63 :: Oval a0
           -> IO Int32
getIndex63 =
  propertyGet "Index"
              []
              outInt32

getLeft88 :: Oval a0
          -> IO Double
getLeft88 =
  propertyGet "Left"
              []
              outDouble

setLeft83 :: Double
          -> Oval a0
          -> IO ()
setLeft83 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked78 :: Oval a0
            -> IO Bool
getLocked78 =
  propertyGet "Locked"
              []
              outBool

setLocked78 :: Bool
            -> Oval a0
            -> IO ()
setLocked78 rhs =
  propertySet "Locked"
              [inBool rhs]

getName104 :: Oval a0
           -> IO String
getName104 =
  propertyGet "Name"
              []
              outString

setName64 :: String
          -> Oval a0
          -> IO ()
setName64 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction74 :: Oval a0
              -> IO String
getOnAction74 =
  propertyGet "OnAction"
              []
              outString

setOnAction74 :: String
              -> Oval a0
              -> IO ()
setOnAction74 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement68 :: Oval a0
               -> IO a1
getPlacement68 =
  propertyGet "Placement"
              []
              outVariant

setPlacement68 :: a1
               -> Oval a0
               -> IO ()
setPlacement68 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject68 :: Oval a0
                 -> IO Bool
getPrintObject68 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject68 :: Bool
                 -> Oval a0
                 -> IO ()
setPrintObject68 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select112 :: (Variant a2)
          => a2
          -> Oval a0
          -> IO a1
select112 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack67 :: Oval a0
             -> IO a1
sendToBack67 =
  function1 "SendToBack"
            []
            outVariant

getTop88 :: Oval a0
         -> IO Double
getTop88 =
  propertyGet "Top"
              []
              outDouble

setTop83 :: Double
         -> Oval a0
         -> IO ()
setTop83 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell33 :: Oval a0
                 -> IO (Range ())
getTopLeftCell33 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible95 :: Oval a0
             -> IO Bool
getVisible95 =
  propertyGet "Visible"
              []
              outBool

setVisible95 :: Bool
             -> Oval a0
             -> IO ()
setVisible95 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth87 :: Oval a0
           -> IO Double
getWidth87 =
  propertyGet "Width"
              []
              outDouble

setWidth82 :: Double
           -> Oval a0
           -> IO ()
setWidth82 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder66 :: Oval a0
            -> IO Int32
getZOrder66 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange69 :: Oval a0
                -> IO (ShapeRange ())
getShapeRange69 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent26 :: Oval a0
               -> IO Bool
getAddIndent26 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent26 :: Bool
               -> Oval a0
               -> IO ()
setAddIndent26 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont25 :: Oval a0
                   -> IO a1
getAutoScaleFont25 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont25 :: a1
                   -> Oval a0
                   -> IO ()
setAutoScaleFont25 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize23 :: Oval a0
              -> IO Bool
getAutoSize23 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize23 :: Bool
              -> Oval a0
              -> IO ()
setAutoSize23 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption65 :: Oval a0
             -> IO String
getCaption65 =
  propertyGet "Caption"
              []
              outString

setCaption63 :: String
             -> Oval a0
             -> IO ()
setCaption63 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters49 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Oval a0
                -> IO (Characters ())
getCharacters49 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling51 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Oval a0
                -> IO a1
checkSpelling51 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont45 :: Oval a0
          -> IO (Font ())
getFont45 =
  propertyGet "Font"
              []
              outIDispatch

getFormula34 :: Oval a0
             -> IO String
getFormula34 =
  propertyGet "Formula"
              []
              outString

setFormula29 :: String
             -> Oval a0
             -> IO ()
setFormula29 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment32 :: Oval a0
                         -> IO a1
getHorizontalAlignment32 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment32 :: a1
                         -> Oval a0
                         -> IO ()
setHorizontalAlignment32 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText40 :: Oval a0
                -> IO Bool
getLockedText40 =
  propertyGet "LockedText"
              []
              outBool

setLockedText40 :: Bool
                -> Oval a0
                -> IO ()
setLockedText40 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation39 :: Oval a0
                 -> IO a1
getOrientation39 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation39 :: a1
                 -> Oval a0
                 -> IO ()
setOrientation39 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText56 :: Oval a0
          -> IO String
getText56 =
  propertyGet "Text"
              []
              outString

setText54 :: String
          -> Oval a0
          -> IO ()
setText54 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment32 :: Oval a0
                       -> IO a1
getVerticalAlignment32 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment32 :: a1
                       -> Oval a0
                       -> IO ()
setVerticalAlignment32 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder32 :: Oval a0
                  -> IO Int32
getReadingOrder32 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder32 :: Int32
                  -> Oval a0
                  -> IO ()
setReadingOrder32 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder60 :: Oval a0
            -> IO (Border ())
getBorder60 =
  propertyGet "Border"
              []
              outIUnknown

getInterior56 :: Oval a0
              -> IO (Interior ())
getInterior56 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow36 :: Oval a0
            -> IO Bool
getShadow36 =
  propertyGet "Shadow"
              []
              outBool

setShadow33 :: Bool
            -> Oval a0
            -> IO ()
setShadow33 rhs =
  propertySet "Shadow"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Ovals
-- 
-- --------------------------------------------------
data Ovals_ a = Ovals__ 
type Ovals a = IDispatch (Ovals_ a)
iidOvals :: IID (Ovals ())
iidOvals = mkIID "{0002089F-0000-0000-C000-000000000046}"

queryInterface80 :: (Variant a1)
                 => GUID
                 -> Ovals a0
                 -> IO a1
queryInterface80 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef80 :: Ovals a0
         -> IO Word32
addRef80 =
  function1 "AddRef"
            []
            outWord32

release80 :: Ovals a0
          -> IO Word32
release80 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount80 :: Ovals a0
                   -> IO Word32
getTypeInfoCount80 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo80 :: (Variant a1)
              => Word32
              -> Word32
              -> Ovals a0
              -> IO a1
getTypeInfo80 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames80 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Ovals a0
                -> IO Int32
getIDsOfNames80 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke80 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Ovals a0
         -> IO (a1, a2, Word32)
invoke80 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication348 :: (Variant a1)
                  => Ovals a0
                  -> IO a1
getApplication348 =
  propertyGet "Application"
              []
              outVariant

getCreator348 :: Ovals a0
              -> IO XlCreator
getCreator348 =
  propertyGet "Creator"
              []
              outEnum

getParent363 :: Ovals a0
             -> IO (IDispatch ())
getParent363 =
  propertyGet "Parent"
              []
              outIDispatch

dummy351 :: Ovals a0
         -> IO ()
dummy351 =
  method0 "_Dummy3"
          []

bringToFront68 :: Ovals a0
               -> IO a1
bringToFront68 =
  function1 "BringToFront"
            []
            outVariant

copy88 :: Ovals a0
       -> IO a1
copy88 =
  function1 "Copy"
            []
            outVariant

copyPicture74 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Ovals a0
              -> IO a1
copyPicture74 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut71 :: Ovals a0
      -> IO a1
cut71 =
  function1 "Cut"
            []
            outVariant

delete173 :: Ovals a0
          -> IO a1
delete173 =
  function1 "Delete"
            []
            outVariant

duplicate71 :: Ovals a0
            -> IO (IDispatch ())
duplicate71 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled78 :: Ovals a0
             -> IO Bool
getEnabled78 =
  propertyGet "Enabled"
              []
              outBool

setEnabled78 :: Bool
             -> Ovals a0
             -> IO ()
setEnabled78 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight86 :: Ovals a0
            -> IO Double
getHeight86 =
  propertyGet "Height"
              []
              outDouble

setHeight81 :: Double
            -> Ovals a0
            -> IO ()
setHeight81 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1238 :: Ovals a0
          -> IO ()
dummy1238 =
  method0 "_Dummy12"
          []

getLeft89 :: Ovals a0
          -> IO Double
getLeft89 =
  propertyGet "Left"
              []
              outDouble

setLeft84 :: Double
          -> Ovals a0
          -> IO ()
setLeft84 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked79 :: Ovals a0
            -> IO Bool
getLocked79 =
  propertyGet "Locked"
              []
              outBool

setLocked79 :: Bool
            -> Ovals a0
            -> IO ()
setLocked79 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1536 :: Ovals a0
          -> IO ()
dummy1536 =
  method0 "_Dummy15"
          []

getOnAction75 :: Ovals a0
              -> IO String
getOnAction75 =
  propertyGet "OnAction"
              []
              outString

setOnAction75 :: String
              -> Ovals a0
              -> IO ()
setOnAction75 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement69 :: Ovals a0
               -> IO a1
getPlacement69 =
  propertyGet "Placement"
              []
              outVariant

setPlacement69 :: a1
               -> Ovals a0
               -> IO ()
setPlacement69 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject69 :: Ovals a0
                 -> IO Bool
getPrintObject69 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject69 :: Bool
                 -> Ovals a0
                 -> IO ()
setPrintObject69 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select113 :: (Variant a2)
          => a2
          -> Ovals a0
          -> IO a1
select113 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack68 :: Ovals a0
             -> IO a1
sendToBack68 =
  function1 "SendToBack"
            []
            outVariant

getTop89 :: Ovals a0
         -> IO Double
getTop89 =
  propertyGet "Top"
              []
              outDouble

setTop84 :: Double
         -> Ovals a0
         -> IO ()
setTop84 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2236 :: Ovals a0
          -> IO ()
dummy2236 =
  method0 "_Dummy22"
          []

getVisible96 :: Ovals a0
             -> IO Bool
getVisible96 =
  propertyGet "Visible"
              []
              outBool

setVisible96 :: Bool
             -> Ovals a0
             -> IO ()
setVisible96 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth88 :: Ovals a0
           -> IO Double
getWidth88 =
  propertyGet "Width"
              []
              outDouble

setWidth83 :: Double
           -> Ovals a0
           -> IO ()
setWidth83 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder67 :: Ovals a0
            -> IO Int32
getZOrder67 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange70 :: Ovals a0
                -> IO (ShapeRange ())
getShapeRange70 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent27 :: Ovals a0
               -> IO Bool
getAddIndent27 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent27 :: Bool
               -> Ovals a0
               -> IO ()
setAddIndent27 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont26 :: Ovals a0
                   -> IO a1
getAutoScaleFont26 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont26 :: a1
                   -> Ovals a0
                   -> IO ()
setAutoScaleFont26 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize24 :: Ovals a0
              -> IO Bool
getAutoSize24 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize24 :: Bool
              -> Ovals a0
              -> IO ()
setAutoSize24 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption66 :: Ovals a0
             -> IO String
getCaption66 =
  propertyGet "Caption"
              []
              outString

setCaption64 :: String
             -> Ovals a0
             -> IO ()
setCaption64 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters50 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Ovals a0
                -> IO (Characters ())
getCharacters50 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling52 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Ovals a0
                -> IO a1
checkSpelling52 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont46 :: Ovals a0
          -> IO (Font ())
getFont46 =
  propertyGet "Font"
              []
              outIDispatch

getFormula35 :: Ovals a0
             -> IO String
getFormula35 =
  propertyGet "Formula"
              []
              outString

setFormula30 :: String
             -> Ovals a0
             -> IO ()
setFormula30 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment33 :: Ovals a0
                         -> IO a1
getHorizontalAlignment33 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment33 :: a1
                         -> Ovals a0
                         -> IO ()
setHorizontalAlignment33 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText41 :: Ovals a0
                -> IO Bool
getLockedText41 =
  propertyGet "LockedText"
              []
              outBool

setLockedText41 :: Bool
                -> Ovals a0
                -> IO ()
setLockedText41 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation40 :: Ovals a0
                 -> IO a1
getOrientation40 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation40 :: a1
                 -> Ovals a0
                 -> IO ()
setOrientation40 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText57 :: Ovals a0
          -> IO String
getText57 =
  propertyGet "Text"
              []
              outString

setText55 :: String
          -> Ovals a0
          -> IO ()
setText55 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment33 :: Ovals a0
                       -> IO a1
getVerticalAlignment33 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment33 :: a1
                       -> Ovals a0
                       -> IO ()
setVerticalAlignment33 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder33 :: Ovals a0
                  -> IO Int32
getReadingOrder33 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder33 :: Int32
                  -> Ovals a0
                  -> IO ()
setReadingOrder33 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder61 :: Ovals a0
            -> IO (Border ())
getBorder61 =
  propertyGet "Border"
              []
              outIUnknown

getInterior57 :: Ovals a0
              -> IO (Interior ())
getInterior57 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow37 :: Ovals a0
            -> IO Bool
getShadow37 =
  propertyGet "Shadow"
              []
              outBool

setShadow34 :: Bool
            -> Ovals a0
            -> IO ()
setShadow34 rhs =
  propertySet "Shadow"
              [inBool rhs]

add106 :: Double
       -> Double
       -> Double
       -> Double
       -> Ovals a0
       -> IO (Oval ())
add106 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount153 :: Ovals a0
            -> IO Int32
getCount153 =
  propertyGet "Count"
              []
              outInt32

group37 :: Ovals a0
        -> IO (GroupObject ())
group37 =
  function1 "Group"
            []
            outIDispatch

item77 :: a1
       -> Ovals a0
       -> IO (IDispatch ())
item77 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum63 :: Ovals a0
          -> IO (IUnknown ())
newEnum63 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Arc
-- 
-- --------------------------------------------------
data Arc_ a = Arc__ 
type Arc a = IDispatch (Arc_ a)
iidArc :: IID (Arc ())
iidArc = mkIID "{000208A0-0000-0000-C000-000000000046}"

queryInterface81 :: (Variant a1)
                 => GUID
                 -> Arc a0
                 -> IO a1
queryInterface81 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef81 :: Arc a0
         -> IO Word32
addRef81 =
  function1 "AddRef"
            []
            outWord32

release81 :: Arc a0
          -> IO Word32
release81 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount81 :: Arc a0
                   -> IO Word32
getTypeInfoCount81 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo81 :: (Variant a1)
              => Word32
              -> Word32
              -> Arc a0
              -> IO a1
getTypeInfo81 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames81 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Arc a0
                -> IO Int32
getIDsOfNames81 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke81 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Arc a0
         -> IO (a1, a2, Word32)
invoke81 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication349 :: (Variant a1)
                  => Arc a0
                  -> IO a1
getApplication349 =
  propertyGet "Application"
              []
              outVariant

getCreator349 :: Arc a0
              -> IO XlCreator
getCreator349 =
  propertyGet "Creator"
              []
              outEnum

getParent364 :: Arc a0
             -> IO (IDispatch ())
getParent364 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell34 :: Arc a0
                     -> IO (Range ())
getBottomRightCell34 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront69 :: Arc a0
               -> IO a1
bringToFront69 =
  function1 "BringToFront"
            []
            outVariant

copy89 :: Arc a0
       -> IO a1
copy89 =
  function1 "Copy"
            []
            outVariant

copyPicture75 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Arc a0
              -> IO a1
copyPicture75 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut72 :: Arc a0
      -> IO a1
cut72 =
  function1 "Cut"
            []
            outVariant

delete174 :: Arc a0
          -> IO a1
delete174 =
  function1 "Delete"
            []
            outVariant

duplicate72 :: Arc a0
            -> IO (IDispatch ())
duplicate72 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled79 :: Arc a0
             -> IO Bool
getEnabled79 =
  propertyGet "Enabled"
              []
              outBool

setEnabled79 :: Bool
             -> Arc a0
             -> IO ()
setEnabled79 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight87 :: Arc a0
            -> IO Double
getHeight87 =
  propertyGet "Height"
              []
              outDouble

setHeight82 :: Double
            -> Arc a0
            -> IO ()
setHeight82 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex64 :: Arc a0
           -> IO Int32
getIndex64 =
  propertyGet "Index"
              []
              outInt32

getLeft90 :: Arc a0
          -> IO Double
getLeft90 =
  propertyGet "Left"
              []
              outDouble

setLeft85 :: Double
          -> Arc a0
          -> IO ()
setLeft85 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked80 :: Arc a0
            -> IO Bool
getLocked80 =
  propertyGet "Locked"
              []
              outBool

setLocked80 :: Bool
            -> Arc a0
            -> IO ()
setLocked80 rhs =
  propertySet "Locked"
              [inBool rhs]

getName105 :: Arc a0
           -> IO String
getName105 =
  propertyGet "Name"
              []
              outString

setName65 :: String
          -> Arc a0
          -> IO ()
setName65 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction76 :: Arc a0
              -> IO String
getOnAction76 =
  propertyGet "OnAction"
              []
              outString

setOnAction76 :: String
              -> Arc a0
              -> IO ()
setOnAction76 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement70 :: Arc a0
               -> IO a1
getPlacement70 =
  propertyGet "Placement"
              []
              outVariant

setPlacement70 :: a1
               -> Arc a0
               -> IO ()
setPlacement70 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject70 :: Arc a0
                 -> IO Bool
getPrintObject70 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject70 :: Bool
                 -> Arc a0
                 -> IO ()
setPrintObject70 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select114 :: (Variant a2)
          => a2
          -> Arc a0
          -> IO a1
select114 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack69 :: Arc a0
             -> IO a1
sendToBack69 =
  function1 "SendToBack"
            []
            outVariant

getTop90 :: Arc a0
         -> IO Double
getTop90 =
  propertyGet "Top"
              []
              outDouble

setTop85 :: Double
         -> Arc a0
         -> IO ()
setTop85 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell34 :: Arc a0
                 -> IO (Range ())
getTopLeftCell34 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible97 :: Arc a0
             -> IO Bool
getVisible97 =
  propertyGet "Visible"
              []
              outBool

setVisible97 :: Bool
             -> Arc a0
             -> IO ()
setVisible97 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth89 :: Arc a0
           -> IO Double
getWidth89 =
  propertyGet "Width"
              []
              outDouble

setWidth84 :: Double
           -> Arc a0
           -> IO ()
setWidth84 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder68 :: Arc a0
            -> IO Int32
getZOrder68 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange71 :: Arc a0
                -> IO (ShapeRange ())
getShapeRange71 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent28 :: Arc a0
               -> IO Bool
getAddIndent28 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent28 :: Bool
               -> Arc a0
               -> IO ()
setAddIndent28 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont27 :: Arc a0
                   -> IO a1
getAutoScaleFont27 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont27 :: a1
                   -> Arc a0
                   -> IO ()
setAutoScaleFont27 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize25 :: Arc a0
              -> IO Bool
getAutoSize25 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize25 :: Bool
              -> Arc a0
              -> IO ()
setAutoSize25 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption67 :: Arc a0
             -> IO String
getCaption67 =
  propertyGet "Caption"
              []
              outString

setCaption65 :: String
             -> Arc a0
             -> IO ()
setCaption65 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters51 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Arc a0
                -> IO (Characters ())
getCharacters51 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling53 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Arc a0
                -> IO a1
checkSpelling53 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont47 :: Arc a0
          -> IO (Font ())
getFont47 =
  propertyGet "Font"
              []
              outIDispatch

getFormula36 :: Arc a0
             -> IO String
getFormula36 =
  propertyGet "Formula"
              []
              outString

setFormula31 :: String
             -> Arc a0
             -> IO ()
setFormula31 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment34 :: Arc a0
                         -> IO a1
getHorizontalAlignment34 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment34 :: a1
                         -> Arc a0
                         -> IO ()
setHorizontalAlignment34 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText42 :: Arc a0
                -> IO Bool
getLockedText42 =
  propertyGet "LockedText"
              []
              outBool

setLockedText42 :: Bool
                -> Arc a0
                -> IO ()
setLockedText42 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation41 :: Arc a0
                 -> IO a1
getOrientation41 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation41 :: a1
                 -> Arc a0
                 -> IO ()
setOrientation41 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText58 :: Arc a0
          -> IO String
getText58 =
  propertyGet "Text"
              []
              outString

setText56 :: String
          -> Arc a0
          -> IO ()
setText56 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment34 :: Arc a0
                       -> IO a1
getVerticalAlignment34 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment34 :: a1
                       -> Arc a0
                       -> IO ()
setVerticalAlignment34 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder34 :: Arc a0
                  -> IO Int32
getReadingOrder34 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder34 :: Int32
                  -> Arc a0
                  -> IO ()
setReadingOrder34 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder62 :: Arc a0
            -> IO (Border ())
getBorder62 =
  propertyGet "Border"
              []
              outIUnknown

getInterior58 :: Arc a0
              -> IO (Interior ())
getInterior58 =
  propertyGet "Interior"
              []
              outIUnknown

dummy436 :: Arc a0
         -> IO ()
dummy436 =
  method0 "_Dummy43"
          []

-- --------------------------------------------------
-- 
-- dispinterface Arcs
-- 
-- --------------------------------------------------
data Arcs_ a = Arcs__ 
type Arcs a = IDispatch (Arcs_ a)
iidArcs :: IID (Arcs ())
iidArcs = mkIID "{000208A1-0000-0000-C000-000000000046}"

queryInterface82 :: (Variant a1)
                 => GUID
                 -> Arcs a0
                 -> IO a1
queryInterface82 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef82 :: Arcs a0
         -> IO Word32
addRef82 =
  function1 "AddRef"
            []
            outWord32

release82 :: Arcs a0
          -> IO Word32
release82 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount82 :: Arcs a0
                   -> IO Word32
getTypeInfoCount82 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo82 :: (Variant a1)
              => Word32
              -> Word32
              -> Arcs a0
              -> IO a1
getTypeInfo82 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames82 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Arcs a0
                -> IO Int32
getIDsOfNames82 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke82 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Arcs a0
         -> IO (a1, a2, Word32)
invoke82 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication350 :: (Variant a1)
                  => Arcs a0
                  -> IO a1
getApplication350 =
  propertyGet "Application"
              []
              outVariant

getCreator350 :: Arcs a0
              -> IO XlCreator
getCreator350 =
  propertyGet "Creator"
              []
              outEnum

getParent365 :: Arcs a0
             -> IO (IDispatch ())
getParent365 =
  propertyGet "Parent"
              []
              outIDispatch

dummy352 :: Arcs a0
         -> IO ()
dummy352 =
  method0 "_Dummy3"
          []

bringToFront70 :: Arcs a0
               -> IO a1
bringToFront70 =
  function1 "BringToFront"
            []
            outVariant

copy90 :: Arcs a0
       -> IO a1
copy90 =
  function1 "Copy"
            []
            outVariant

copyPicture76 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Arcs a0
              -> IO a1
copyPicture76 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut73 :: Arcs a0
      -> IO a1
cut73 =
  function1 "Cut"
            []
            outVariant

delete175 :: Arcs a0
          -> IO a1
delete175 =
  function1 "Delete"
            []
            outVariant

duplicate73 :: Arcs a0
            -> IO (IDispatch ())
duplicate73 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled80 :: Arcs a0
             -> IO Bool
getEnabled80 =
  propertyGet "Enabled"
              []
              outBool

setEnabled80 :: Bool
             -> Arcs a0
             -> IO ()
setEnabled80 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight88 :: Arcs a0
            -> IO Double
getHeight88 =
  propertyGet "Height"
              []
              outDouble

setHeight83 :: Double
            -> Arcs a0
            -> IO ()
setHeight83 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1239 :: Arcs a0
          -> IO ()
dummy1239 =
  method0 "_Dummy12"
          []

getLeft91 :: Arcs a0
          -> IO Double
getLeft91 =
  propertyGet "Left"
              []
              outDouble

setLeft86 :: Double
          -> Arcs a0
          -> IO ()
setLeft86 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked81 :: Arcs a0
            -> IO Bool
getLocked81 =
  propertyGet "Locked"
              []
              outBool

setLocked81 :: Bool
            -> Arcs a0
            -> IO ()
setLocked81 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1537 :: Arcs a0
          -> IO ()
dummy1537 =
  method0 "_Dummy15"
          []

getOnAction77 :: Arcs a0
              -> IO String
getOnAction77 =
  propertyGet "OnAction"
              []
              outString

setOnAction77 :: String
              -> Arcs a0
              -> IO ()
setOnAction77 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement71 :: Arcs a0
               -> IO a1
getPlacement71 =
  propertyGet "Placement"
              []
              outVariant

setPlacement71 :: a1
               -> Arcs a0
               -> IO ()
setPlacement71 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject71 :: Arcs a0
                 -> IO Bool
getPrintObject71 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject71 :: Bool
                 -> Arcs a0
                 -> IO ()
setPrintObject71 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select115 :: (Variant a2)
          => a2
          -> Arcs a0
          -> IO a1
select115 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack70 :: Arcs a0
             -> IO a1
sendToBack70 =
  function1 "SendToBack"
            []
            outVariant

getTop91 :: Arcs a0
         -> IO Double
getTop91 =
  propertyGet "Top"
              []
              outDouble

setTop86 :: Double
         -> Arcs a0
         -> IO ()
setTop86 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2237 :: Arcs a0
          -> IO ()
dummy2237 =
  method0 "_Dummy22"
          []

getVisible98 :: Arcs a0
             -> IO Bool
getVisible98 =
  propertyGet "Visible"
              []
              outBool

setVisible98 :: Bool
             -> Arcs a0
             -> IO ()
setVisible98 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth90 :: Arcs a0
           -> IO Double
getWidth90 =
  propertyGet "Width"
              []
              outDouble

setWidth85 :: Double
           -> Arcs a0
           -> IO ()
setWidth85 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder69 :: Arcs a0
            -> IO Int32
getZOrder69 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange72 :: Arcs a0
                -> IO (ShapeRange ())
getShapeRange72 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent29 :: Arcs a0
               -> IO Bool
getAddIndent29 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent29 :: Bool
               -> Arcs a0
               -> IO ()
setAddIndent29 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont28 :: Arcs a0
                   -> IO a1
getAutoScaleFont28 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont28 :: a1
                   -> Arcs a0
                   -> IO ()
setAutoScaleFont28 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize26 :: Arcs a0
              -> IO Bool
getAutoSize26 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize26 :: Bool
              -> Arcs a0
              -> IO ()
setAutoSize26 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption68 :: Arcs a0
             -> IO String
getCaption68 =
  propertyGet "Caption"
              []
              outString

setCaption66 :: String
             -> Arcs a0
             -> IO ()
setCaption66 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters52 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Arcs a0
                -> IO (Characters ())
getCharacters52 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling54 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Arcs a0
                -> IO a1
checkSpelling54 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont48 :: Arcs a0
          -> IO (Font ())
getFont48 =
  propertyGet "Font"
              []
              outIDispatch

getFormula37 :: Arcs a0
             -> IO String
getFormula37 =
  propertyGet "Formula"
              []
              outString

setFormula32 :: String
             -> Arcs a0
             -> IO ()
setFormula32 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment35 :: Arcs a0
                         -> IO a1
getHorizontalAlignment35 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment35 :: a1
                         -> Arcs a0
                         -> IO ()
setHorizontalAlignment35 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText43 :: Arcs a0
                -> IO Bool
getLockedText43 =
  propertyGet "LockedText"
              []
              outBool

setLockedText43 :: Bool
                -> Arcs a0
                -> IO ()
setLockedText43 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation42 :: Arcs a0
                 -> IO a1
getOrientation42 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation42 :: a1
                 -> Arcs a0
                 -> IO ()
setOrientation42 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText59 :: Arcs a0
          -> IO String
getText59 =
  propertyGet "Text"
              []
              outString

setText57 :: String
          -> Arcs a0
          -> IO ()
setText57 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment35 :: Arcs a0
                       -> IO a1
getVerticalAlignment35 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment35 :: a1
                       -> Arcs a0
                       -> IO ()
setVerticalAlignment35 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder35 :: Arcs a0
                  -> IO Int32
getReadingOrder35 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder35 :: Int32
                  -> Arcs a0
                  -> IO ()
setReadingOrder35 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder63 :: Arcs a0
            -> IO (Border ())
getBorder63 =
  propertyGet "Border"
              []
              outIUnknown

getInterior59 :: Arcs a0
              -> IO (Interior ())
getInterior59 =
  propertyGet "Interior"
              []
              outIUnknown

dummy437 :: Arcs a0
         -> IO ()
dummy437 =
  method0 "_Dummy43"
          []

add107 :: Double
       -> Double
       -> Double
       -> Double
       -> Arcs a0
       -> IO (Arc ())
add107 x1 y1 x2 y2 =
  function1 "Add"
            [ inDouble x1
            , inDouble y1
            , inDouble x2
            , inDouble y2
            ]
            outIDispatch

getCount154 :: Arcs a0
            -> IO Int32
getCount154 =
  propertyGet "Count"
              []
              outInt32

group38 :: Arcs a0
        -> IO (GroupObject ())
group38 =
  function1 "Group"
            []
            outIDispatch

item78 :: a1
       -> Arcs a0
       -> IO (IDispatch ())
item78 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum64 :: Arcs a0
          -> IO (IUnknown ())
newEnum64 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface OLEObjectEvents
-- 
-- --------------------------------------------------
data OLEObjectEvents_ a = OLEObjectEvents__ 
type OLEObjectEvents a = IDispatch (OLEObjectEvents_ a)
iidOLEObjectEvents :: IID (OLEObjectEvents ())
iidOLEObjectEvents = mkIID "{00024410-0000-0000-C000-000000000046}"

mkOLEObjectEvents_vtbl :: (GUID -> objState -> IO (Ptr ()))
                       -> (objState -> IO Word32)
                       -> (objState -> IO Word32)
                       -> (objState -> IO Word32)
                       -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                       -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                       -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                       -> (objState -> IO ())
                       -> (objState -> IO ())
                       -> IO (ComVTable (OLEObjectEvents ()) objState)
mkOLEObjectEvents_vtbl queryInterface83 addRef83 release83 getTypeInfoCount83 getTypeInfo83 getIDsOfNames83 invoke83 gotFocus0 lostFocus0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface83 queryInterface83)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef83 addRef83)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release83 release83)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount83 getTypeInfoCount83)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo83 getTypeInfo83)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames83 getIDsOfNames83)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke83 invoke83)
   meth_arg7 = mkDispMethod "GotFocus" 0x605 (prim_gotFocus0 gotFocus0)
   meth_arg8 = mkDispMethod "LostFocus" 0x606 (prim_lostFocus0 lostFocus0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         ]

prim_queryInterface83 :: (GUID -> objState -> IO (Ptr ()))
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_queryInterface83 queryInterface83_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface83_meth riid)
          ppvObj

prim_addRef83 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_addRef83 addRef83_meth =
  retVal $ \ the_res ->
  apply_1 (addRef83_meth)
          the_res

prim_release83 :: (objState -> IO Word32)
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_release83 release83_meth =
  retVal $ \ the_res ->
  apply_1 (release83_meth)
          the_res

prim_getTypeInfoCount83 :: (objState -> IO Word32)
                        -> [VARIANT]
                        -> objState
                        -> IO (Maybe VARIANT)
prim_getTypeInfoCount83 getTypeInfoCount83_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount83_meth)
          pctinfo

prim_getTypeInfo83 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_getTypeInfo83 getTypeInfo83_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo83_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames83 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_getIDsOfNames83 getIDsOfNames83_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames83_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke83 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_invoke83 invoke83_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke83_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_gotFocus0 :: (objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_gotFocus0 gotFocus0_meth = apply_0 (gotFocus0_meth)

prim_lostFocus0 :: (objState -> IO ())
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_lostFocus0 lostFocus0_meth = apply_0 (lostFocus0_meth)

-- --------------------------------------------------
-- 
-- dispinterface _OLEObject
-- 
-- --------------------------------------------------
data OLEObject0_ a = OLEObject0__ 
type OLEObject0 a = IDispatch (OLEObject0_ a)
iidOLEObject0 :: IID (OLEObject0 ())
iidOLEObject0 = mkIID "{000208A2-0000-0000-C000-000000000046}"

queryInterface84 :: (Variant a1)
                 => GUID
                 -> OLEObject0 a0
                 -> IO a1
queryInterface84 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef84 :: OLEObject0 a0
         -> IO Word32
addRef84 =
  function1 "AddRef"
            []
            outWord32

release84 :: OLEObject0 a0
          -> IO Word32
release84 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount84 :: OLEObject0 a0
                   -> IO Word32
getTypeInfoCount84 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo84 :: (Variant a1)
              => Word32
              -> Word32
              -> OLEObject0 a0
              -> IO a1
getTypeInfo84 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames84 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> OLEObject0 a0
                -> IO Int32
getIDsOfNames84 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke84 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> OLEObject0 a0
         -> IO (a1, a2, Word32)
invoke84 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication351 :: (Variant a1)
                  => OLEObject0 a0
                  -> IO a1
getApplication351 =
  propertyGet "Application"
              []
              outVariant

getCreator351 :: OLEObject0 a0
              -> IO XlCreator
getCreator351 =
  propertyGet "Creator"
              []
              outEnum

getParent366 :: OLEObject0 a0
             -> IO (IDispatch ())
getParent366 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell35 :: OLEObject0 a0
                     -> IO (Range ())
getBottomRightCell35 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront71 :: OLEObject0 a0
               -> IO a1
bringToFront71 =
  function1 "BringToFront"
            []
            outVariant

copy91 :: OLEObject0 a0
       -> IO a1
copy91 =
  function1 "Copy"
            []
            outVariant

copyPicture77 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> OLEObject0 a0
              -> IO a1
copyPicture77 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut74 :: OLEObject0 a0
      -> IO a1
cut74 =
  function1 "Cut"
            []
            outVariant

delete176 :: OLEObject0 a0
          -> IO a1
delete176 =
  function1 "Delete"
            []
            outVariant

duplicate74 :: OLEObject0 a0
            -> IO (IDispatch ())
duplicate74 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled81 :: OLEObject0 a0
             -> IO Bool
getEnabled81 =
  propertyGet "Enabled"
              []
              outBool

setEnabled81 :: Bool
             -> OLEObject0 a0
             -> IO ()
setEnabled81 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight89 :: OLEObject0 a0
            -> IO Double
getHeight89 =
  propertyGet "Height"
              []
              outDouble

setHeight84 :: Double
            -> OLEObject0 a0
            -> IO ()
setHeight84 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex65 :: OLEObject0 a0
           -> IO Int32
getIndex65 =
  propertyGet "Index"
              []
              outInt32

getLeft92 :: OLEObject0 a0
          -> IO Double
getLeft92 =
  propertyGet "Left"
              []
              outDouble

setLeft87 :: Double
          -> OLEObject0 a0
          -> IO ()
setLeft87 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked82 :: OLEObject0 a0
            -> IO Bool
getLocked82 =
  propertyGet "Locked"
              []
              outBool

setLocked82 :: Bool
            -> OLEObject0 a0
            -> IO ()
setLocked82 rhs =
  propertySet "Locked"
              [inBool rhs]

getName106 :: OLEObject0 a0
           -> IO String
getName106 =
  propertyGet "Name"
              []
              outString

setName66 :: String
          -> OLEObject0 a0
          -> IO ()
setName66 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction78 :: OLEObject0 a0
              -> IO String
getOnAction78 =
  propertyGet "OnAction"
              []
              outString

setOnAction78 :: String
              -> OLEObject0 a0
              -> IO ()
setOnAction78 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement72 :: OLEObject0 a0
               -> IO a1
getPlacement72 =
  propertyGet "Placement"
              []
              outVariant

setPlacement72 :: a1
               -> OLEObject0 a0
               -> IO ()
setPlacement72 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject72 :: OLEObject0 a0
                 -> IO Bool
getPrintObject72 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject72 :: Bool
                 -> OLEObject0 a0
                 -> IO ()
setPrintObject72 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select116 :: (Variant a2)
          => a2
          -> OLEObject0 a0
          -> IO a1
select116 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack71 :: OLEObject0 a0
             -> IO a1
sendToBack71 =
  function1 "SendToBack"
            []
            outVariant

getTop92 :: OLEObject0 a0
         -> IO Double
getTop92 =
  propertyGet "Top"
              []
              outDouble

setTop87 :: Double
         -> OLEObject0 a0
         -> IO ()
setTop87 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell35 :: OLEObject0 a0
                 -> IO (Range ())
getTopLeftCell35 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible99 :: OLEObject0 a0
             -> IO Bool
getVisible99 =
  propertyGet "Visible"
              []
              outBool

setVisible99 :: Bool
             -> OLEObject0 a0
             -> IO ()
setVisible99 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth91 :: OLEObject0 a0
           -> IO Double
getWidth91 =
  propertyGet "Width"
              []
              outDouble

setWidth86 :: Double
           -> OLEObject0 a0
           -> IO ()
setWidth86 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder70 :: OLEObject0 a0
            -> IO Int32
getZOrder70 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange73 :: OLEObject0 a0
                -> IO (ShapeRange ())
getShapeRange73 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder64 :: OLEObject0 a0
            -> IO (Border ())
getBorder64 =
  propertyGet "Border"
              []
              outIUnknown

getInterior60 :: OLEObject0 a0
              -> IO (Interior ())
getInterior60 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow38 :: OLEObject0 a0
            -> IO Bool
getShadow38 =
  propertyGet "Shadow"
              []
              outBool

setShadow35 :: Bool
            -> OLEObject0 a0
            -> IO ()
setShadow35 rhs =
  propertySet "Shadow"
              [inBool rhs]

activate21 :: OLEObject0 a0
           -> IO a1
activate21 =
  function1 "Activate"
            []
            outVariant

getAutoLoad1 :: OLEObject0 a0
             -> IO Bool
getAutoLoad1 =
  propertyGet "AutoLoad"
              []
              outBool

setAutoLoad1 :: Bool
             -> OLEObject0 a0
             -> IO ()
setAutoLoad1 rhs =
  propertySet "AutoLoad"
              [inBool rhs]

getAutoUpdate1 :: OLEObject0 a0
               -> IO Bool
getAutoUpdate1 =
  propertyGet "AutoUpdate"
              []
              outBool

setAutoUpdate1 :: Bool
               -> OLEObject0 a0
               -> IO ()
setAutoUpdate1 rhs =
  propertySet "AutoUpdate"
              [inBool rhs]

getObject1 :: OLEObject0 a0
           -> IO (IDispatch ())
getObject1 =
  propertyGet "Object"
              []
              outIDispatch

getOLEType0 :: OLEObject0 a0
            -> IO a1
getOLEType0 =
  propertyGet "OLEType"
              []
              outVariant

getSourceName6 :: OLEObject0 a0
               -> IO String
getSourceName6 =
  propertyGet "SourceName"
              []
              outString

setSourceName1 :: String
               -> OLEObject0 a0
               -> IO ()
setSourceName1 rhs =
  propertySet "SourceName"
              [inString rhs]

update3 :: OLEObject0 a0
        -> IO a1
update3 =
  function1 "Update"
            []
            outVariant

verb1 :: (Variant a2)
      => a2
      -> OLEObject0 a0
      -> IO a1
verb1 verb2 =
  function1 "Verb"
            [inDefaultValue (inInt32 1) inVariant verb2]
            outVariant

getLinkedCell27 :: OLEObject0 a0
                -> IO String
getLinkedCell27 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell27 :: String
                -> OLEObject0 a0
                -> IO ()
setLinkedCell27 rhs =
  propertySet "LinkedCell"
              [inString rhs]

getListFillRange11 :: OLEObject0 a0
                   -> IO String
getListFillRange11 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange11 :: String
                   -> OLEObject0 a0
                   -> IO ()
setListFillRange11 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getProgID4 :: OLEObject0 a0
           -> IO String
getProgID4 =
  propertyGet "progID"
              []
              outString

getAltHTML0 :: OLEObject0 a0
            -> IO String
getAltHTML0 =
  propertyGet "AltHTML"
              []
              outString

setAltHTML0 :: String
            -> OLEObject0 a0
            -> IO ()
setAltHTML0 rhs =
  propertySet "AltHTML"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface OLEObjects
-- 
-- --------------------------------------------------
data OLEObjects_ a = OLEObjects__ 
type OLEObjects a = IDispatch (OLEObjects_ a)
iidOLEObjects :: IID (OLEObjects ())
iidOLEObjects = mkIID "{000208A3-0000-0000-C000-000000000046}"

queryInterface85 :: (Variant a1)
                 => GUID
                 -> OLEObjects a0
                 -> IO a1
queryInterface85 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef85 :: OLEObjects a0
         -> IO Word32
addRef85 =
  function1 "AddRef"
            []
            outWord32

release85 :: OLEObjects a0
          -> IO Word32
release85 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount85 :: OLEObjects a0
                   -> IO Word32
getTypeInfoCount85 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo85 :: (Variant a1)
              => Word32
              -> Word32
              -> OLEObjects a0
              -> IO a1
getTypeInfo85 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames85 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> OLEObjects a0
                -> IO Int32
getIDsOfNames85 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke85 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> OLEObjects a0
         -> IO (a1, a2, Word32)
invoke85 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication352 :: (Variant a1)
                  => OLEObjects a0
                  -> IO a1
getApplication352 =
  propertyGet "Application"
              []
              outVariant

getCreator352 :: OLEObjects a0
              -> IO XlCreator
getCreator352 =
  propertyGet "Creator"
              []
              outEnum

getParent367 :: OLEObjects a0
             -> IO (IDispatch ())
getParent367 =
  propertyGet "Parent"
              []
              outIDispatch

dummy353 :: OLEObjects a0
         -> IO ()
dummy353 =
  method0 "_Dummy3"
          []

bringToFront72 :: OLEObjects a0
               -> IO a1
bringToFront72 =
  function1 "BringToFront"
            []
            outVariant

copy92 :: OLEObjects a0
       -> IO a1
copy92 =
  function1 "Copy"
            []
            outVariant

copyPicture78 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> OLEObjects a0
              -> IO a1
copyPicture78 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut75 :: OLEObjects a0
      -> IO a1
cut75 =
  function1 "Cut"
            []
            outVariant

delete177 :: OLEObjects a0
          -> IO a1
delete177 =
  function1 "Delete"
            []
            outVariant

duplicate75 :: OLEObjects a0
            -> IO (IDispatch ())
duplicate75 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled82 :: OLEObjects a0
             -> IO Bool
getEnabled82 =
  propertyGet "Enabled"
              []
              outBool

setEnabled82 :: Bool
             -> OLEObjects a0
             -> IO ()
setEnabled82 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight90 :: OLEObjects a0
            -> IO Double
getHeight90 =
  propertyGet "Height"
              []
              outDouble

setHeight85 :: Double
            -> OLEObjects a0
            -> IO ()
setHeight85 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1240 :: OLEObjects a0
          -> IO ()
dummy1240 =
  method0 "_Dummy12"
          []

getLeft93 :: OLEObjects a0
          -> IO Double
getLeft93 =
  propertyGet "Left"
              []
              outDouble

setLeft88 :: Double
          -> OLEObjects a0
          -> IO ()
setLeft88 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked83 :: OLEObjects a0
            -> IO Bool
getLocked83 =
  propertyGet "Locked"
              []
              outBool

setLocked83 :: Bool
            -> OLEObjects a0
            -> IO ()
setLocked83 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1538 :: OLEObjects a0
          -> IO ()
dummy1538 =
  method0 "_Dummy15"
          []

getOnAction79 :: OLEObjects a0
              -> IO String
getOnAction79 =
  propertyGet "OnAction"
              []
              outString

setOnAction79 :: String
              -> OLEObjects a0
              -> IO ()
setOnAction79 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement73 :: OLEObjects a0
               -> IO a1
getPlacement73 =
  propertyGet "Placement"
              []
              outVariant

setPlacement73 :: a1
               -> OLEObjects a0
               -> IO ()
setPlacement73 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject73 :: OLEObjects a0
                 -> IO Bool
getPrintObject73 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject73 :: Bool
                 -> OLEObjects a0
                 -> IO ()
setPrintObject73 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select117 :: (Variant a2)
          => a2
          -> OLEObjects a0
          -> IO a1
select117 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack72 :: OLEObjects a0
             -> IO a1
sendToBack72 =
  function1 "SendToBack"
            []
            outVariant

getTop93 :: OLEObjects a0
         -> IO Double
getTop93 =
  propertyGet "Top"
              []
              outDouble

setTop88 :: Double
         -> OLEObjects a0
         -> IO ()
setTop88 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2238 :: OLEObjects a0
          -> IO ()
dummy2238 =
  method0 "_Dummy22"
          []

getVisible100 :: OLEObjects a0
              -> IO Bool
getVisible100 =
  propertyGet "Visible"
              []
              outBool

setVisible100 :: Bool
              -> OLEObjects a0
              -> IO ()
setVisible100 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth92 :: OLEObjects a0
           -> IO Double
getWidth92 =
  propertyGet "Width"
              []
              outDouble

setWidth87 :: Double
           -> OLEObjects a0
           -> IO ()
setWidth87 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder71 :: OLEObjects a0
            -> IO Int32
getZOrder71 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange74 :: OLEObjects a0
                -> IO (ShapeRange ())
getShapeRange74 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder65 :: OLEObjects a0
            -> IO (Border ())
getBorder65 =
  propertyGet "Border"
              []
              outIUnknown

getInterior61 :: OLEObjects a0
              -> IO (Interior ())
getInterior61 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow39 :: OLEObjects a0
            -> IO Bool
getShadow39 =
  propertyGet "Shadow"
              []
              outBool

setShadow36 :: Bool
            -> OLEObjects a0
            -> IO ()
setShadow36 rhs =
  propertySet "Shadow"
              [inBool rhs]

dummy305 :: OLEObjects a0
         -> IO ()
dummy305 =
  method0 "_Dummy30"
          []

getAutoLoad2 :: OLEObjects a0
             -> IO Bool
getAutoLoad2 =
  propertyGet "AutoLoad"
              []
              outBool

setAutoLoad2 :: Bool
             -> OLEObjects a0
             -> IO ()
setAutoLoad2 rhs =
  propertySet "AutoLoad"
              [inBool rhs]

dummy3210 :: OLEObjects a0
          -> IO ()
dummy3210 =
  method0 "_Dummy32"
          []

dummy3313 :: OLEObjects a0
          -> IO ()
dummy3313 =
  method0 "_Dummy33"
          []

dummy3410 :: OLEObjects a0
          -> IO ()
dummy3410 =
  method0 "_Dummy34"
          []

getSourceName7 :: OLEObjects a0
               -> IO String
getSourceName7 =
  propertyGet "SourceName"
              []
              outString

setSourceName2 :: String
               -> OLEObjects a0
               -> IO ()
setSourceName2 rhs =
  propertySet "SourceName"
              [inString rhs]

dummy3610 :: OLEObjects a0
          -> IO ()
dummy3610 =
  method0 "_Dummy36"
          []

dummy375 :: OLEObjects a0
         -> IO ()
dummy375 =
  method0 "_Dummy37"
          []

dummy385 :: OLEObjects a0
         -> IO ()
dummy385 =
  method0 "_Dummy38"
          []

dummy391 :: OLEObjects a0
         -> IO ()
dummy391 =
  method0 "_Dummy39"
          []

dummy402 :: OLEObjects a0
         -> IO ()
dummy402 =
  method0 "_Dummy40"
          []

dummy415 :: OLEObjects a0
         -> IO ()
dummy415 =
  method0 "_Dummy41"
          []

add108 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
       => a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> OLEObjects a0
       -> IO a1
add108 classType filename link displayAsIcon iconFileName iconIndex iconLabel left top width height =
  function1 "Add"
            [ inVariant classType
            , inVariant filename
            , inVariant link
            , inVariant displayAsIcon
            , inVariant iconFileName
            , inVariant iconIndex
            , inVariant iconLabel
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outVariant

getCount155 :: OLEObjects a0
            -> IO Int32
getCount155 =
  propertyGet "Count"
              []
              outInt32

group39 :: OLEObjects a0
        -> IO (GroupObject ())
group39 =
  function1 "Group"
            []
            outIDispatch

item79 :: a1
       -> OLEObjects a0
       -> IO (IDispatch ())
item79 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum65 :: OLEObjects a0
          -> IO (IUnknown ())
newEnum65 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface TextBox
-- 
-- --------------------------------------------------
data TextBox_ a = TextBox__ 
type TextBox a = IDispatch (TextBox_ a)
iidTextBox :: IID (TextBox ())
iidTextBox = mkIID "{000208A4-0000-0000-C000-000000000046}"

queryInterface86 :: (Variant a1)
                 => GUID
                 -> TextBox a0
                 -> IO a1
queryInterface86 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef86 :: TextBox a0
         -> IO Word32
addRef86 =
  function1 "AddRef"
            []
            outWord32

release86 :: TextBox a0
          -> IO Word32
release86 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount86 :: TextBox a0
                   -> IO Word32
getTypeInfoCount86 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo86 :: (Variant a1)
              => Word32
              -> Word32
              -> TextBox a0
              -> IO a1
getTypeInfo86 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames86 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> TextBox a0
                -> IO Int32
getIDsOfNames86 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke86 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> TextBox a0
         -> IO (a1, a2, Word32)
invoke86 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication353 :: (Variant a1)
                  => TextBox a0
                  -> IO a1
getApplication353 =
  propertyGet "Application"
              []
              outVariant

getCreator353 :: TextBox a0
              -> IO XlCreator
getCreator353 =
  propertyGet "Creator"
              []
              outEnum

getParent368 :: TextBox a0
             -> IO (IDispatch ())
getParent368 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell36 :: TextBox a0
                     -> IO (Range ())
getBottomRightCell36 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront73 :: TextBox a0
               -> IO a1
bringToFront73 =
  function1 "BringToFront"
            []
            outVariant

copy93 :: TextBox a0
       -> IO a1
copy93 =
  function1 "Copy"
            []
            outVariant

copyPicture79 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> TextBox a0
              -> IO a1
copyPicture79 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut76 :: TextBox a0
      -> IO a1
cut76 =
  function1 "Cut"
            []
            outVariant

delete178 :: TextBox a0
          -> IO a1
delete178 =
  function1 "Delete"
            []
            outVariant

duplicate76 :: TextBox a0
            -> IO (IDispatch ())
duplicate76 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled83 :: TextBox a0
             -> IO Bool
getEnabled83 =
  propertyGet "Enabled"
              []
              outBool

setEnabled83 :: Bool
             -> TextBox a0
             -> IO ()
setEnabled83 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight91 :: TextBox a0
            -> IO Double
getHeight91 =
  propertyGet "Height"
              []
              outDouble

setHeight86 :: Double
            -> TextBox a0
            -> IO ()
setHeight86 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex66 :: TextBox a0
           -> IO Int32
getIndex66 =
  propertyGet "Index"
              []
              outInt32

getLeft94 :: TextBox a0
          -> IO Double
getLeft94 =
  propertyGet "Left"
              []
              outDouble

setLeft89 :: Double
          -> TextBox a0
          -> IO ()
setLeft89 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked84 :: TextBox a0
            -> IO Bool
getLocked84 =
  propertyGet "Locked"
              []
              outBool

setLocked84 :: Bool
            -> TextBox a0
            -> IO ()
setLocked84 rhs =
  propertySet "Locked"
              [inBool rhs]

getName107 :: TextBox a0
           -> IO String
getName107 =
  propertyGet "Name"
              []
              outString

setName67 :: String
          -> TextBox a0
          -> IO ()
setName67 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction80 :: TextBox a0
              -> IO String
getOnAction80 =
  propertyGet "OnAction"
              []
              outString

setOnAction80 :: String
              -> TextBox a0
              -> IO ()
setOnAction80 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement74 :: TextBox a0
               -> IO a1
getPlacement74 =
  propertyGet "Placement"
              []
              outVariant

setPlacement74 :: a1
               -> TextBox a0
               -> IO ()
setPlacement74 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject74 :: TextBox a0
                 -> IO Bool
getPrintObject74 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject74 :: Bool
                 -> TextBox a0
                 -> IO ()
setPrintObject74 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select118 :: (Variant a2)
          => a2
          -> TextBox a0
          -> IO a1
select118 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack73 :: TextBox a0
             -> IO a1
sendToBack73 =
  function1 "SendToBack"
            []
            outVariant

getTop94 :: TextBox a0
         -> IO Double
getTop94 =
  propertyGet "Top"
              []
              outDouble

setTop89 :: Double
         -> TextBox a0
         -> IO ()
setTop89 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell36 :: TextBox a0
                 -> IO (Range ())
getTopLeftCell36 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible101 :: TextBox a0
              -> IO Bool
getVisible101 =
  propertyGet "Visible"
              []
              outBool

setVisible101 :: Bool
              -> TextBox a0
              -> IO ()
setVisible101 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth93 :: TextBox a0
           -> IO Double
getWidth93 =
  propertyGet "Width"
              []
              outDouble

setWidth88 :: Double
           -> TextBox a0
           -> IO ()
setWidth88 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder72 :: TextBox a0
            -> IO Int32
getZOrder72 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange75 :: TextBox a0
                -> IO (ShapeRange ())
getShapeRange75 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent30 :: TextBox a0
               -> IO Bool
getAddIndent30 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent30 :: Bool
               -> TextBox a0
               -> IO ()
setAddIndent30 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont29 :: TextBox a0
                   -> IO a1
getAutoScaleFont29 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont29 :: a1
                   -> TextBox a0
                   -> IO ()
setAutoScaleFont29 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize27 :: TextBox a0
              -> IO Bool
getAutoSize27 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize27 :: Bool
              -> TextBox a0
              -> IO ()
setAutoSize27 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption69 :: TextBox a0
             -> IO String
getCaption69 =
  propertyGet "Caption"
              []
              outString

setCaption67 :: String
             -> TextBox a0
             -> IO ()
setCaption67 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters53 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> TextBox a0
                -> IO (Characters ())
getCharacters53 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling55 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> TextBox a0
                -> IO a1
checkSpelling55 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont49 :: TextBox a0
          -> IO (Font ())
getFont49 =
  propertyGet "Font"
              []
              outIDispatch

getFormula38 :: TextBox a0
             -> IO String
getFormula38 =
  propertyGet "Formula"
              []
              outString

setFormula33 :: String
             -> TextBox a0
             -> IO ()
setFormula33 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment36 :: TextBox a0
                         -> IO a1
getHorizontalAlignment36 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment36 :: a1
                         -> TextBox a0
                         -> IO ()
setHorizontalAlignment36 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText44 :: TextBox a0
                -> IO Bool
getLockedText44 =
  propertyGet "LockedText"
              []
              outBool

setLockedText44 :: Bool
                -> TextBox a0
                -> IO ()
setLockedText44 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation43 :: TextBox a0
                 -> IO a1
getOrientation43 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation43 :: a1
                 -> TextBox a0
                 -> IO ()
setOrientation43 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText60 :: TextBox a0
          -> IO String
getText60 =
  propertyGet "Text"
              []
              outString

setText58 :: String
          -> TextBox a0
          -> IO ()
setText58 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment36 :: TextBox a0
                       -> IO a1
getVerticalAlignment36 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment36 :: a1
                       -> TextBox a0
                       -> IO ()
setVerticalAlignment36 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder36 :: TextBox a0
                  -> IO Int32
getReadingOrder36 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder36 :: Int32
                  -> TextBox a0
                  -> IO ()
setReadingOrder36 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder66 :: TextBox a0
            -> IO (Border ())
getBorder66 =
  propertyGet "Border"
              []
              outIUnknown

getInterior62 :: TextBox a0
              -> IO (Interior ())
getInterior62 =
  propertyGet "Interior"
              []
              outIUnknown

getRoundedCorners14 :: TextBox a0
                    -> IO Bool
getRoundedCorners14 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners14 :: Bool
                    -> TextBox a0
                    -> IO ()
setRoundedCorners14 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

getShadow40 :: TextBox a0
            -> IO Bool
getShadow40 =
  propertyGet "Shadow"
              []
              outBool

setShadow37 :: Bool
            -> TextBox a0
            -> IO ()
setShadow37 rhs =
  propertySet "Shadow"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface TextBoxes
-- 
-- --------------------------------------------------
data TextBoxes_ a = TextBoxes__ 
type TextBoxes a = IDispatch (TextBoxes_ a)
iidTextBoxes :: IID (TextBoxes ())
iidTextBoxes = mkIID "{000208A5-0000-0000-C000-000000000046}"

queryInterface87 :: (Variant a1)
                 => GUID
                 -> TextBoxes a0
                 -> IO a1
queryInterface87 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef87 :: TextBoxes a0
         -> IO Word32
addRef87 =
  function1 "AddRef"
            []
            outWord32

release87 :: TextBoxes a0
          -> IO Word32
release87 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount87 :: TextBoxes a0
                   -> IO Word32
getTypeInfoCount87 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo87 :: (Variant a1)
              => Word32
              -> Word32
              -> TextBoxes a0
              -> IO a1
getTypeInfo87 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames87 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> TextBoxes a0
                -> IO Int32
getIDsOfNames87 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke87 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> TextBoxes a0
         -> IO (a1, a2, Word32)
invoke87 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication354 :: (Variant a1)
                  => TextBoxes a0
                  -> IO a1
getApplication354 =
  propertyGet "Application"
              []
              outVariant

getCreator354 :: TextBoxes a0
              -> IO XlCreator
getCreator354 =
  propertyGet "Creator"
              []
              outEnum

getParent369 :: TextBoxes a0
             -> IO (IDispatch ())
getParent369 =
  propertyGet "Parent"
              []
              outIDispatch

dummy354 :: TextBoxes a0
         -> IO ()
dummy354 =
  method0 "_Dummy3"
          []

bringToFront74 :: TextBoxes a0
               -> IO a1
bringToFront74 =
  function1 "BringToFront"
            []
            outVariant

copy94 :: TextBoxes a0
       -> IO a1
copy94 =
  function1 "Copy"
            []
            outVariant

copyPicture80 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> TextBoxes a0
              -> IO a1
copyPicture80 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut77 :: TextBoxes a0
      -> IO a1
cut77 =
  function1 "Cut"
            []
            outVariant

delete179 :: TextBoxes a0
          -> IO a1
delete179 =
  function1 "Delete"
            []
            outVariant

duplicate77 :: TextBoxes a0
            -> IO (IDispatch ())
duplicate77 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled84 :: TextBoxes a0
             -> IO Bool
getEnabled84 =
  propertyGet "Enabled"
              []
              outBool

setEnabled84 :: Bool
             -> TextBoxes a0
             -> IO ()
setEnabled84 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight92 :: TextBoxes a0
            -> IO Double
getHeight92 =
  propertyGet "Height"
              []
              outDouble

setHeight87 :: Double
            -> TextBoxes a0
            -> IO ()
setHeight87 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1241 :: TextBoxes a0
          -> IO ()
dummy1241 =
  method0 "_Dummy12"
          []

getLeft95 :: TextBoxes a0
          -> IO Double
getLeft95 =
  propertyGet "Left"
              []
              outDouble

setLeft90 :: Double
          -> TextBoxes a0
          -> IO ()
setLeft90 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked85 :: TextBoxes a0
            -> IO Bool
getLocked85 =
  propertyGet "Locked"
              []
              outBool

setLocked85 :: Bool
            -> TextBoxes a0
            -> IO ()
setLocked85 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1539 :: TextBoxes a0
          -> IO ()
dummy1539 =
  method0 "_Dummy15"
          []

getOnAction81 :: TextBoxes a0
              -> IO String
getOnAction81 =
  propertyGet "OnAction"
              []
              outString

setOnAction81 :: String
              -> TextBoxes a0
              -> IO ()
setOnAction81 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement75 :: TextBoxes a0
               -> IO a1
getPlacement75 =
  propertyGet "Placement"
              []
              outVariant

setPlacement75 :: a1
               -> TextBoxes a0
               -> IO ()
setPlacement75 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject75 :: TextBoxes a0
                 -> IO Bool
getPrintObject75 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject75 :: Bool
                 -> TextBoxes a0
                 -> IO ()
setPrintObject75 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select119 :: (Variant a2)
          => a2
          -> TextBoxes a0
          -> IO a1
select119 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack74 :: TextBoxes a0
             -> IO a1
sendToBack74 =
  function1 "SendToBack"
            []
            outVariant

getTop95 :: TextBoxes a0
         -> IO Double
getTop95 =
  propertyGet "Top"
              []
              outDouble

setTop90 :: Double
         -> TextBoxes a0
         -> IO ()
setTop90 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2239 :: TextBoxes a0
          -> IO ()
dummy2239 =
  method0 "_Dummy22"
          []

getVisible102 :: TextBoxes a0
              -> IO Bool
getVisible102 =
  propertyGet "Visible"
              []
              outBool

setVisible102 :: Bool
              -> TextBoxes a0
              -> IO ()
setVisible102 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth94 :: TextBoxes a0
           -> IO Double
getWidth94 =
  propertyGet "Width"
              []
              outDouble

setWidth89 :: Double
           -> TextBoxes a0
           -> IO ()
setWidth89 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder73 :: TextBoxes a0
            -> IO Int32
getZOrder73 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange76 :: TextBoxes a0
                -> IO (ShapeRange ())
getShapeRange76 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent31 :: TextBoxes a0
               -> IO Bool
getAddIndent31 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent31 :: Bool
               -> TextBoxes a0
               -> IO ()
setAddIndent31 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont30 :: TextBoxes a0
                   -> IO a1
getAutoScaleFont30 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont30 :: a1
                   -> TextBoxes a0
                   -> IO ()
setAutoScaleFont30 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize28 :: TextBoxes a0
              -> IO Bool
getAutoSize28 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize28 :: Bool
              -> TextBoxes a0
              -> IO ()
setAutoSize28 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption70 :: TextBoxes a0
             -> IO String
getCaption70 =
  propertyGet "Caption"
              []
              outString

setCaption68 :: String
             -> TextBoxes a0
             -> IO ()
setCaption68 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters54 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> TextBoxes a0
                -> IO (Characters ())
getCharacters54 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling56 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> TextBoxes a0
                -> IO a1
checkSpelling56 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont50 :: TextBoxes a0
          -> IO (Font ())
getFont50 =
  propertyGet "Font"
              []
              outIDispatch

getFormula39 :: TextBoxes a0
             -> IO String
getFormula39 =
  propertyGet "Formula"
              []
              outString

setFormula34 :: String
             -> TextBoxes a0
             -> IO ()
setFormula34 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment37 :: TextBoxes a0
                         -> IO a1
getHorizontalAlignment37 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment37 :: a1
                         -> TextBoxes a0
                         -> IO ()
setHorizontalAlignment37 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText45 :: TextBoxes a0
                -> IO Bool
getLockedText45 =
  propertyGet "LockedText"
              []
              outBool

setLockedText45 :: Bool
                -> TextBoxes a0
                -> IO ()
setLockedText45 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation44 :: TextBoxes a0
                 -> IO a1
getOrientation44 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation44 :: a1
                 -> TextBoxes a0
                 -> IO ()
setOrientation44 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText61 :: TextBoxes a0
          -> IO String
getText61 =
  propertyGet "Text"
              []
              outString

setText59 :: String
          -> TextBoxes a0
          -> IO ()
setText59 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment37 :: TextBoxes a0
                       -> IO a1
getVerticalAlignment37 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment37 :: a1
                       -> TextBoxes a0
                       -> IO ()
setVerticalAlignment37 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder37 :: TextBoxes a0
                  -> IO Int32
getReadingOrder37 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder37 :: Int32
                  -> TextBoxes a0
                  -> IO ()
setReadingOrder37 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder67 :: TextBoxes a0
            -> IO (Border ())
getBorder67 =
  propertyGet "Border"
              []
              outIUnknown

getInterior63 :: TextBoxes a0
              -> IO (Interior ())
getInterior63 =
  propertyGet "Interior"
              []
              outIUnknown

getRoundedCorners15 :: TextBoxes a0
                    -> IO Bool
getRoundedCorners15 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners15 :: Bool
                    -> TextBoxes a0
                    -> IO ()
setRoundedCorners15 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

getShadow41 :: TextBoxes a0
            -> IO Bool
getShadow41 =
  propertyGet "Shadow"
              []
              outBool

setShadow38 :: Bool
            -> TextBoxes a0
            -> IO ()
setShadow38 rhs =
  propertySet "Shadow"
              [inBool rhs]

add109 :: Double
       -> Double
       -> Double
       -> Double
       -> TextBoxes a0
       -> IO (TextBox ())
add109 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount156 :: TextBoxes a0
            -> IO Int32
getCount156 =
  propertyGet "Count"
              []
              outInt32

group40 :: TextBoxes a0
        -> IO (GroupObject ())
group40 =
  function1 "Group"
            []
            outIDispatch

item80 :: a1
       -> TextBoxes a0
       -> IO (IDispatch ())
item80 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum66 :: TextBoxes a0
          -> IO (IUnknown ())
newEnum66 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Picture
-- 
-- --------------------------------------------------
data Picture_ a = Picture__ 
type Picture a = IDispatch (Picture_ a)
iidPicture :: IID (Picture ())
iidPicture = mkIID "{000208A6-0000-0000-C000-000000000046}"

queryInterface88 :: (Variant a1)
                 => GUID
                 -> Picture a0
                 -> IO a1
queryInterface88 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef88 :: Picture a0
         -> IO Word32
addRef88 =
  function1 "AddRef"
            []
            outWord32

release88 :: Picture a0
          -> IO Word32
release88 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount88 :: Picture a0
                   -> IO Word32
getTypeInfoCount88 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo88 :: (Variant a1)
              => Word32
              -> Word32
              -> Picture a0
              -> IO a1
getTypeInfo88 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames88 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Picture a0
                -> IO Int32
getIDsOfNames88 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke88 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Picture a0
         -> IO (a1, a2, Word32)
invoke88 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication355 :: (Variant a1)
                  => Picture a0
                  -> IO a1
getApplication355 =
  propertyGet "Application"
              []
              outVariant

getCreator355 :: Picture a0
              -> IO XlCreator
getCreator355 =
  propertyGet "Creator"
              []
              outEnum

getParent370 :: Picture a0
             -> IO (IDispatch ())
getParent370 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell37 :: Picture a0
                     -> IO (Range ())
getBottomRightCell37 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront75 :: Picture a0
               -> IO a1
bringToFront75 =
  function1 "BringToFront"
            []
            outVariant

copy95 :: Picture a0
       -> IO a1
copy95 =
  function1 "Copy"
            []
            outVariant

copyPicture81 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Picture a0
              -> IO a1
copyPicture81 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut78 :: Picture a0
      -> IO a1
cut78 =
  function1 "Cut"
            []
            outVariant

delete180 :: Picture a0
          -> IO a1
delete180 =
  function1 "Delete"
            []
            outVariant

duplicate78 :: Picture a0
            -> IO (IDispatch ())
duplicate78 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled85 :: Picture a0
             -> IO Bool
getEnabled85 =
  propertyGet "Enabled"
              []
              outBool

setEnabled85 :: Bool
             -> Picture a0
             -> IO ()
setEnabled85 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight93 :: Picture a0
            -> IO Double
getHeight93 =
  propertyGet "Height"
              []
              outDouble

setHeight88 :: Double
            -> Picture a0
            -> IO ()
setHeight88 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex67 :: Picture a0
           -> IO Int32
getIndex67 =
  propertyGet "Index"
              []
              outInt32

getLeft96 :: Picture a0
          -> IO Double
getLeft96 =
  propertyGet "Left"
              []
              outDouble

setLeft91 :: Double
          -> Picture a0
          -> IO ()
setLeft91 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked86 :: Picture a0
            -> IO Bool
getLocked86 =
  propertyGet "Locked"
              []
              outBool

setLocked86 :: Bool
            -> Picture a0
            -> IO ()
setLocked86 rhs =
  propertySet "Locked"
              [inBool rhs]

getName108 :: Picture a0
           -> IO String
getName108 =
  propertyGet "Name"
              []
              outString

setName68 :: String
          -> Picture a0
          -> IO ()
setName68 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction82 :: Picture a0
              -> IO String
getOnAction82 =
  propertyGet "OnAction"
              []
              outString

setOnAction82 :: String
              -> Picture a0
              -> IO ()
setOnAction82 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement76 :: Picture a0
               -> IO a1
getPlacement76 =
  propertyGet "Placement"
              []
              outVariant

setPlacement76 :: a1
               -> Picture a0
               -> IO ()
setPlacement76 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject76 :: Picture a0
                 -> IO Bool
getPrintObject76 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject76 :: Bool
                 -> Picture a0
                 -> IO ()
setPrintObject76 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select120 :: (Variant a2)
          => a2
          -> Picture a0
          -> IO a1
select120 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack75 :: Picture a0
             -> IO a1
sendToBack75 =
  function1 "SendToBack"
            []
            outVariant

getTop96 :: Picture a0
         -> IO Double
getTop96 =
  propertyGet "Top"
              []
              outDouble

setTop91 :: Double
         -> Picture a0
         -> IO ()
setTop91 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell37 :: Picture a0
                 -> IO (Range ())
getTopLeftCell37 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible103 :: Picture a0
              -> IO Bool
getVisible103 =
  propertyGet "Visible"
              []
              outBool

setVisible103 :: Bool
              -> Picture a0
              -> IO ()
setVisible103 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth95 :: Picture a0
           -> IO Double
getWidth95 =
  propertyGet "Width"
              []
              outDouble

setWidth90 :: Double
           -> Picture a0
           -> IO ()
setWidth90 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder74 :: Picture a0
            -> IO Int32
getZOrder74 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange77 :: Picture a0
                -> IO (ShapeRange ())
getShapeRange77 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder68 :: Picture a0
            -> IO (Border ())
getBorder68 =
  propertyGet "Border"
              []
              outIUnknown

getInterior64 :: Picture a0
              -> IO (Interior ())
getInterior64 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow42 :: Picture a0
            -> IO Bool
getShadow42 =
  propertyGet "Shadow"
              []
              outBool

setShadow39 :: Bool
            -> Picture a0
            -> IO ()
setShadow39 rhs =
  propertySet "Shadow"
              [inBool rhs]

getFormula40 :: Picture a0
             -> IO String
getFormula40 =
  propertyGet "Formula"
              []
              outString

setFormula35 :: String
             -> Picture a0
             -> IO ()
setFormula35 rhs =
  propertySet "Formula"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface Pictures
-- 
-- --------------------------------------------------
data Pictures_ a = Pictures__ 
type Pictures a = IDispatch (Pictures_ a)
iidPictures :: IID (Pictures ())
iidPictures = mkIID "{000208A7-0000-0000-C000-000000000046}"

queryInterface89 :: (Variant a1)
                 => GUID
                 -> Pictures a0
                 -> IO a1
queryInterface89 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef89 :: Pictures a0
         -> IO Word32
addRef89 =
  function1 "AddRef"
            []
            outWord32

release89 :: Pictures a0
          -> IO Word32
release89 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount89 :: Pictures a0
                   -> IO Word32
getTypeInfoCount89 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo89 :: (Variant a1)
              => Word32
              -> Word32
              -> Pictures a0
              -> IO a1
getTypeInfo89 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames89 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Pictures a0
                -> IO Int32
getIDsOfNames89 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke89 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Pictures a0
         -> IO (a1, a2, Word32)
invoke89 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication356 :: (Variant a1)
                  => Pictures a0
                  -> IO a1
getApplication356 =
  propertyGet "Application"
              []
              outVariant

getCreator356 :: Pictures a0
              -> IO XlCreator
getCreator356 =
  propertyGet "Creator"
              []
              outEnum

getParent371 :: Pictures a0
             -> IO (IDispatch ())
getParent371 =
  propertyGet "Parent"
              []
              outIDispatch

dummy355 :: Pictures a0
         -> IO ()
dummy355 =
  method0 "_Dummy3"
          []

bringToFront76 :: Pictures a0
               -> IO a1
bringToFront76 =
  function1 "BringToFront"
            []
            outVariant

copy96 :: Pictures a0
       -> IO a1
copy96 =
  function1 "Copy"
            []
            outVariant

copyPicture82 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Pictures a0
              -> IO a1
copyPicture82 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut79 :: Pictures a0
      -> IO a1
cut79 =
  function1 "Cut"
            []
            outVariant

delete181 :: Pictures a0
          -> IO a1
delete181 =
  function1 "Delete"
            []
            outVariant

duplicate79 :: Pictures a0
            -> IO (IDispatch ())
duplicate79 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled86 :: Pictures a0
             -> IO Bool
getEnabled86 =
  propertyGet "Enabled"
              []
              outBool

setEnabled86 :: Bool
             -> Pictures a0
             -> IO ()
setEnabled86 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight94 :: Pictures a0
            -> IO Double
getHeight94 =
  propertyGet "Height"
              []
              outDouble

setHeight89 :: Double
            -> Pictures a0
            -> IO ()
setHeight89 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1242 :: Pictures a0
          -> IO ()
dummy1242 =
  method0 "_Dummy12"
          []

getLeft97 :: Pictures a0
          -> IO Double
getLeft97 =
  propertyGet "Left"
              []
              outDouble

setLeft92 :: Double
          -> Pictures a0
          -> IO ()
setLeft92 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked87 :: Pictures a0
            -> IO Bool
getLocked87 =
  propertyGet "Locked"
              []
              outBool

setLocked87 :: Bool
            -> Pictures a0
            -> IO ()
setLocked87 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1540 :: Pictures a0
          -> IO ()
dummy1540 =
  method0 "_Dummy15"
          []

getOnAction83 :: Pictures a0
              -> IO String
getOnAction83 =
  propertyGet "OnAction"
              []
              outString

setOnAction83 :: String
              -> Pictures a0
              -> IO ()
setOnAction83 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement77 :: Pictures a0
               -> IO a1
getPlacement77 =
  propertyGet "Placement"
              []
              outVariant

setPlacement77 :: a1
               -> Pictures a0
               -> IO ()
setPlacement77 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject77 :: Pictures a0
                 -> IO Bool
getPrintObject77 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject77 :: Bool
                 -> Pictures a0
                 -> IO ()
setPrintObject77 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select121 :: (Variant a2)
          => a2
          -> Pictures a0
          -> IO a1
select121 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack76 :: Pictures a0
             -> IO a1
sendToBack76 =
  function1 "SendToBack"
            []
            outVariant

getTop97 :: Pictures a0
         -> IO Double
getTop97 =
  propertyGet "Top"
              []
              outDouble

setTop92 :: Double
         -> Pictures a0
         -> IO ()
setTop92 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2240 :: Pictures a0
          -> IO ()
dummy2240 =
  method0 "_Dummy22"
          []

getVisible104 :: Pictures a0
              -> IO Bool
getVisible104 =
  propertyGet "Visible"
              []
              outBool

setVisible104 :: Bool
              -> Pictures a0
              -> IO ()
setVisible104 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth96 :: Pictures a0
           -> IO Double
getWidth96 =
  propertyGet "Width"
              []
              outDouble

setWidth91 :: Double
           -> Pictures a0
           -> IO ()
setWidth91 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder75 :: Pictures a0
            -> IO Int32
getZOrder75 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange78 :: Pictures a0
                -> IO (ShapeRange ())
getShapeRange78 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getBorder69 :: Pictures a0
            -> IO (Border ())
getBorder69 =
  propertyGet "Border"
              []
              outIUnknown

getInterior65 :: Pictures a0
              -> IO (Interior ())
getInterior65 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow43 :: Pictures a0
            -> IO Bool
getShadow43 =
  propertyGet "Shadow"
              []
              outBool

setShadow40 :: Bool
            -> Pictures a0
            -> IO ()
setShadow40 rhs =
  propertySet "Shadow"
              [inBool rhs]

getFormula41 :: Pictures a0
             -> IO String
getFormula41 =
  propertyGet "Formula"
              []
              outString

setFormula36 :: String
             -> Pictures a0
             -> IO ()
setFormula36 rhs =
  propertySet "Formula"
              [inString rhs]

add110 :: Double
       -> Double
       -> Double
       -> Double
       -> Pictures a0
       -> IO (Picture ())
add110 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount157 :: Pictures a0
            -> IO Int32
getCount157 =
  propertyGet "Count"
              []
              outInt32

group41 :: Pictures a0
        -> IO (GroupObject ())
group41 =
  function1 "Group"
            []
            outIDispatch

insert5 :: (Variant a1)
        => String
        -> a1
        -> Pictures a0
        -> IO (Picture ())
insert5 filename converter =
  function1 "Insert"
            [ inString filename
            , inVariant converter
            ]
            outIDispatch

item81 :: a1
       -> Pictures a0
       -> IO (IDispatch ())
item81 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum67 :: Pictures a0
          -> IO (IUnknown ())
newEnum67 =
  function1 "_NewEnum"
            []
            outIUnknown

paste8 :: (Variant a1)
       => a1
       -> Pictures a0
       -> IO (Picture ())
paste8 link =
  function1 "Paste"
            [inVariant link]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Drawing
-- 
-- --------------------------------------------------
data Drawing_ a = Drawing__ 
type Drawing a = IDispatch (Drawing_ a)
iidDrawing :: IID (Drawing ())
iidDrawing = mkIID "{000208A8-0000-0000-C000-000000000046}"

queryInterface90 :: (Variant a1)
                 => GUID
                 -> Drawing a0
                 -> IO a1
queryInterface90 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef90 :: Drawing a0
         -> IO Word32
addRef90 =
  function1 "AddRef"
            []
            outWord32

release90 :: Drawing a0
          -> IO Word32
release90 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount90 :: Drawing a0
                   -> IO Word32
getTypeInfoCount90 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo90 :: (Variant a1)
              => Word32
              -> Word32
              -> Drawing a0
              -> IO a1
getTypeInfo90 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames90 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Drawing a0
                -> IO Int32
getIDsOfNames90 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke90 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Drawing a0
         -> IO (a1, a2, Word32)
invoke90 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication357 :: (Variant a1)
                  => Drawing a0
                  -> IO a1
getApplication357 =
  propertyGet "Application"
              []
              outVariant

getCreator357 :: Drawing a0
              -> IO XlCreator
getCreator357 =
  propertyGet "Creator"
              []
              outEnum

getParent372 :: Drawing a0
             -> IO (IDispatch ())
getParent372 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell38 :: Drawing a0
                     -> IO (Range ())
getBottomRightCell38 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront77 :: Drawing a0
               -> IO a1
bringToFront77 =
  function1 "BringToFront"
            []
            outVariant

copy97 :: Drawing a0
       -> IO a1
copy97 =
  function1 "Copy"
            []
            outVariant

copyPicture83 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Drawing a0
              -> IO a1
copyPicture83 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut80 :: Drawing a0
      -> IO a1
cut80 =
  function1 "Cut"
            []
            outVariant

delete182 :: Drawing a0
          -> IO a1
delete182 =
  function1 "Delete"
            []
            outVariant

duplicate80 :: Drawing a0
            -> IO (IDispatch ())
duplicate80 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled87 :: Drawing a0
             -> IO Bool
getEnabled87 =
  propertyGet "Enabled"
              []
              outBool

setEnabled87 :: Bool
             -> Drawing a0
             -> IO ()
setEnabled87 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight95 :: Drawing a0
            -> IO Double
getHeight95 =
  propertyGet "Height"
              []
              outDouble

setHeight90 :: Double
            -> Drawing a0
            -> IO ()
setHeight90 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex68 :: Drawing a0
           -> IO Int32
getIndex68 =
  propertyGet "Index"
              []
              outInt32

getLeft98 :: Drawing a0
          -> IO Double
getLeft98 =
  propertyGet "Left"
              []
              outDouble

setLeft93 :: Double
          -> Drawing a0
          -> IO ()
setLeft93 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked88 :: Drawing a0
            -> IO Bool
getLocked88 =
  propertyGet "Locked"
              []
              outBool

setLocked88 :: Bool
            -> Drawing a0
            -> IO ()
setLocked88 rhs =
  propertySet "Locked"
              [inBool rhs]

getName109 :: Drawing a0
           -> IO String
getName109 =
  propertyGet "Name"
              []
              outString

setName69 :: String
          -> Drawing a0
          -> IO ()
setName69 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction84 :: Drawing a0
              -> IO String
getOnAction84 =
  propertyGet "OnAction"
              []
              outString

setOnAction84 :: String
              -> Drawing a0
              -> IO ()
setOnAction84 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement78 :: Drawing a0
               -> IO a1
getPlacement78 =
  propertyGet "Placement"
              []
              outVariant

setPlacement78 :: a1
               -> Drawing a0
               -> IO ()
setPlacement78 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject78 :: Drawing a0
                 -> IO Bool
getPrintObject78 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject78 :: Bool
                 -> Drawing a0
                 -> IO ()
setPrintObject78 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select122 :: (Variant a2)
          => a2
          -> Drawing a0
          -> IO a1
select122 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack77 :: Drawing a0
             -> IO a1
sendToBack77 =
  function1 "SendToBack"
            []
            outVariant

getTop98 :: Drawing a0
         -> IO Double
getTop98 =
  propertyGet "Top"
              []
              outDouble

setTop93 :: Double
         -> Drawing a0
         -> IO ()
setTop93 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell38 :: Drawing a0
                 -> IO (Range ())
getTopLeftCell38 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible105 :: Drawing a0
              -> IO Bool
getVisible105 =
  propertyGet "Visible"
              []
              outBool

setVisible105 :: Bool
              -> Drawing a0
              -> IO ()
setVisible105 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth97 :: Drawing a0
           -> IO Double
getWidth97 =
  propertyGet "Width"
              []
              outDouble

setWidth92 :: Double
           -> Drawing a0
           -> IO ()
setWidth92 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder76 :: Drawing a0
            -> IO Int32
getZOrder76 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange79 :: Drawing a0
                -> IO (ShapeRange ())
getShapeRange79 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent32 :: Drawing a0
               -> IO Bool
getAddIndent32 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent32 :: Bool
               -> Drawing a0
               -> IO ()
setAddIndent32 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont31 :: Drawing a0
                   -> IO a1
getAutoScaleFont31 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont31 :: a1
                   -> Drawing a0
                   -> IO ()
setAutoScaleFont31 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize29 :: Drawing a0
              -> IO Bool
getAutoSize29 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize29 :: Bool
              -> Drawing a0
              -> IO ()
setAutoSize29 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption71 :: Drawing a0
             -> IO String
getCaption71 =
  propertyGet "Caption"
              []
              outString

setCaption69 :: String
             -> Drawing a0
             -> IO ()
setCaption69 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters55 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Drawing a0
                -> IO (Characters ())
getCharacters55 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling57 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Drawing a0
                -> IO a1
checkSpelling57 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont51 :: Drawing a0
          -> IO (Font ())
getFont51 =
  propertyGet "Font"
              []
              outIDispatch

getFormula42 :: Drawing a0
             -> IO String
getFormula42 =
  propertyGet "Formula"
              []
              outString

setFormula37 :: String
             -> Drawing a0
             -> IO ()
setFormula37 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment38 :: Drawing a0
                         -> IO a1
getHorizontalAlignment38 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment38 :: a1
                         -> Drawing a0
                         -> IO ()
setHorizontalAlignment38 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText46 :: Drawing a0
                -> IO Bool
getLockedText46 =
  propertyGet "LockedText"
              []
              outBool

setLockedText46 :: Bool
                -> Drawing a0
                -> IO ()
setLockedText46 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation45 :: Drawing a0
                 -> IO a1
getOrientation45 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation45 :: a1
                 -> Drawing a0
                 -> IO ()
setOrientation45 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText62 :: Drawing a0
          -> IO String
getText62 =
  propertyGet "Text"
              []
              outString

setText60 :: String
          -> Drawing a0
          -> IO ()
setText60 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment38 :: Drawing a0
                       -> IO a1
getVerticalAlignment38 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment38 :: a1
                       -> Drawing a0
                       -> IO ()
setVerticalAlignment38 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder38 :: Drawing a0
                  -> IO Int32
getReadingOrder38 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder38 :: Int32
                  -> Drawing a0
                  -> IO ()
setReadingOrder38 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder70 :: Drawing a0
            -> IO (Border ())
getBorder70 =
  propertyGet "Border"
              []
              outIUnknown

getInterior66 :: Drawing a0
              -> IO (Interior ())
getInterior66 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow44 :: Drawing a0
            -> IO Bool
getShadow44 =
  propertyGet "Shadow"
              []
              outBool

setShadow41 :: Bool
            -> Drawing a0
            -> IO ()
setShadow41 rhs =
  propertySet "Shadow"
              [inBool rhs]

addVertex0 :: Double
           -> Double
           -> Drawing a0
           -> IO a1
addVertex0 left top =
  function1 "AddVertex"
            [ inDouble left
            , inDouble top
            ]
            outVariant

reshape3 :: (Variant a2, Variant a3)
         => Int32
         -> Bool
         -> a2
         -> a3
         -> Drawing a0
         -> IO a1
reshape3 vertex insert6 left top =
  function1 "Reshape"
            [ inInt32 vertex
            , inBool insert6
            , inVariant left
            , inVariant top
            ]
            outVariant

getVertices2 :: (Variant a2, Variant a3)
             => a2
             -> a3
             -> Drawing a0
             -> IO a1
getVertices2 index1 index2 =
  propertyGet "Vertices"
              [ inVariant index1
              , inVariant index2
              ]
              outVariant

-- --------------------------------------------------
-- 
-- dispinterface Drawings
-- 
-- --------------------------------------------------
data Drawings_ a = Drawings__ 
type Drawings a = IDispatch (Drawings_ a)
iidDrawings :: IID (Drawings ())
iidDrawings = mkIID "{000208A9-0000-0000-C000-000000000046}"

queryInterface91 :: (Variant a1)
                 => GUID
                 -> Drawings a0
                 -> IO a1
queryInterface91 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef91 :: Drawings a0
         -> IO Word32
addRef91 =
  function1 "AddRef"
            []
            outWord32

release91 :: Drawings a0
          -> IO Word32
release91 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount91 :: Drawings a0
                   -> IO Word32
getTypeInfoCount91 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo91 :: (Variant a1)
              => Word32
              -> Word32
              -> Drawings a0
              -> IO a1
getTypeInfo91 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames91 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Drawings a0
                -> IO Int32
getIDsOfNames91 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke91 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Drawings a0
         -> IO (a1, a2, Word32)
invoke91 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication358 :: (Variant a1)
                  => Drawings a0
                  -> IO a1
getApplication358 =
  propertyGet "Application"
              []
              outVariant

getCreator358 :: Drawings a0
              -> IO XlCreator
getCreator358 =
  propertyGet "Creator"
              []
              outEnum

getParent373 :: Drawings a0
             -> IO (IDispatch ())
getParent373 =
  propertyGet "Parent"
              []
              outIDispatch

dummy356 :: Drawings a0
         -> IO ()
dummy356 =
  method0 "_Dummy3"
          []

bringToFront78 :: Drawings a0
               -> IO a1
bringToFront78 =
  function1 "BringToFront"
            []
            outVariant

copy98 :: Drawings a0
       -> IO a1
copy98 =
  function1 "Copy"
            []
            outVariant

copyPicture84 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> Drawings a0
              -> IO a1
copyPicture84 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut81 :: Drawings a0
      -> IO a1
cut81 =
  function1 "Cut"
            []
            outVariant

delete183 :: Drawings a0
          -> IO a1
delete183 =
  function1 "Delete"
            []
            outVariant

duplicate81 :: Drawings a0
            -> IO (IDispatch ())
duplicate81 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled88 :: Drawings a0
             -> IO Bool
getEnabled88 =
  propertyGet "Enabled"
              []
              outBool

setEnabled88 :: Bool
             -> Drawings a0
             -> IO ()
setEnabled88 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight96 :: Drawings a0
            -> IO Double
getHeight96 =
  propertyGet "Height"
              []
              outDouble

setHeight91 :: Double
            -> Drawings a0
            -> IO ()
setHeight91 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1243 :: Drawings a0
          -> IO ()
dummy1243 =
  method0 "_Dummy12"
          []

getLeft99 :: Drawings a0
          -> IO Double
getLeft99 =
  propertyGet "Left"
              []
              outDouble

setLeft94 :: Double
          -> Drawings a0
          -> IO ()
setLeft94 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked89 :: Drawings a0
            -> IO Bool
getLocked89 =
  propertyGet "Locked"
              []
              outBool

setLocked89 :: Bool
            -> Drawings a0
            -> IO ()
setLocked89 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1541 :: Drawings a0
          -> IO ()
dummy1541 =
  method0 "_Dummy15"
          []

getOnAction85 :: Drawings a0
              -> IO String
getOnAction85 =
  propertyGet "OnAction"
              []
              outString

setOnAction85 :: String
              -> Drawings a0
              -> IO ()
setOnAction85 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement79 :: Drawings a0
               -> IO a1
getPlacement79 =
  propertyGet "Placement"
              []
              outVariant

setPlacement79 :: a1
               -> Drawings a0
               -> IO ()
setPlacement79 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject79 :: Drawings a0
                 -> IO Bool
getPrintObject79 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject79 :: Bool
                 -> Drawings a0
                 -> IO ()
setPrintObject79 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select123 :: (Variant a2)
          => a2
          -> Drawings a0
          -> IO a1
select123 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack78 :: Drawings a0
             -> IO a1
sendToBack78 =
  function1 "SendToBack"
            []
            outVariant

getTop99 :: Drawings a0
         -> IO Double
getTop99 =
  propertyGet "Top"
              []
              outDouble

setTop94 :: Double
         -> Drawings a0
         -> IO ()
setTop94 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2241 :: Drawings a0
          -> IO ()
dummy2241 =
  method0 "_Dummy22"
          []

getVisible106 :: Drawings a0
              -> IO Bool
getVisible106 =
  propertyGet "Visible"
              []
              outBool

setVisible106 :: Bool
              -> Drawings a0
              -> IO ()
setVisible106 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth98 :: Drawings a0
           -> IO Double
getWidth98 =
  propertyGet "Width"
              []
              outDouble

setWidth93 :: Double
           -> Drawings a0
           -> IO ()
setWidth93 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder77 :: Drawings a0
            -> IO Int32
getZOrder77 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange80 :: Drawings a0
                -> IO (ShapeRange ())
getShapeRange80 =
  propertyGet "ShapeRange"
              []
              outIUnknown

getAddIndent33 :: Drawings a0
               -> IO Bool
getAddIndent33 =
  propertyGet "AddIndent"
              []
              outBool

setAddIndent33 :: Bool
               -> Drawings a0
               -> IO ()
setAddIndent33 rhs =
  propertySet "AddIndent"
              [inBool rhs]

getAutoScaleFont32 :: Drawings a0
                   -> IO a1
getAutoScaleFont32 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont32 :: a1
                   -> Drawings a0
                   -> IO ()
setAutoScaleFont32 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoSize30 :: Drawings a0
              -> IO Bool
getAutoSize30 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize30 :: Bool
              -> Drawings a0
              -> IO ()
setAutoSize30 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getCaption72 :: Drawings a0
             -> IO String
getCaption72 =
  propertyGet "Caption"
              []
              outString

setCaption70 :: String
             -> Drawings a0
             -> IO ()
setCaption70 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters56 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Drawings a0
                -> IO (Characters ())
getCharacters56 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

checkSpelling58 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                => a2
                -> a3
                -> a4
                -> a5
                -> Drawings a0
                -> IO a1
checkSpelling58 customDictionary ignoreUppercase alwaysSuggest spellLang =
  function1 "CheckSpelling"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant alwaysSuggest
            , inVariant spellLang
            ]
            outVariant

getFont52 :: Drawings a0
          -> IO (Font ())
getFont52 =
  propertyGet "Font"
              []
              outIDispatch

getFormula43 :: Drawings a0
             -> IO String
getFormula43 =
  propertyGet "Formula"
              []
              outString

setFormula38 :: String
             -> Drawings a0
             -> IO ()
setFormula38 rhs =
  propertySet "Formula"
              [inString rhs]

getHorizontalAlignment39 :: Drawings a0
                         -> IO a1
getHorizontalAlignment39 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment39 :: a1
                         -> Drawings a0
                         -> IO ()
setHorizontalAlignment39 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLockedText47 :: Drawings a0
                -> IO Bool
getLockedText47 =
  propertyGet "LockedText"
              []
              outBool

setLockedText47 :: Bool
                -> Drawings a0
                -> IO ()
setLockedText47 rhs =
  propertySet "LockedText"
              [inBool rhs]

getOrientation46 :: Drawings a0
                 -> IO a1
getOrientation46 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation46 :: a1
                 -> Drawings a0
                 -> IO ()
setOrientation46 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getText63 :: Drawings a0
          -> IO String
getText63 =
  propertyGet "Text"
              []
              outString

setText61 :: String
          -> Drawings a0
          -> IO ()
setText61 rhs =
  propertySet "Text"
              [inString rhs]

getVerticalAlignment39 :: Drawings a0
                       -> IO a1
getVerticalAlignment39 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment39 :: a1
                       -> Drawings a0
                       -> IO ()
setVerticalAlignment39 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder39 :: Drawings a0
                  -> IO Int32
getReadingOrder39 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder39 :: Int32
                  -> Drawings a0
                  -> IO ()
setReadingOrder39 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getBorder71 :: Drawings a0
            -> IO (Border ())
getBorder71 =
  propertyGet "Border"
              []
              outIUnknown

getInterior67 :: Drawings a0
              -> IO (Interior ())
getInterior67 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow45 :: Drawings a0
            -> IO Bool
getShadow45 =
  propertyGet "Shadow"
              []
              outBool

setShadow42 :: Bool
            -> Drawings a0
            -> IO ()
setShadow42 rhs =
  propertySet "Shadow"
              [inBool rhs]

dummy445 :: Drawings a0
         -> IO ()
dummy445 =
  method0 "_Dummy44"
          []

reshape4 :: (Variant a2, Variant a3)
         => Int32
         -> Bool
         -> a2
         -> a3
         -> Drawings a0
         -> IO a1
reshape4 vertex insert6 left top =
  function1 "Reshape"
            [ inInt32 vertex
            , inBool insert6
            , inVariant left
            , inVariant top
            ]
            outVariant

dummy460 :: Drawings a0
         -> IO ()
dummy460 =
  method0 "_Dummy46"
          []

add111 :: Double
       -> Double
       -> Double
       -> Double
       -> Bool
       -> Drawings a0
       -> IO (Drawing ())
add111 x1 y1 x2 y2 closed =
  function1 "Add"
            [ inDouble x1
            , inDouble y1
            , inDouble x2
            , inDouble y2
            , inBool closed
            ]
            outIDispatch

getCount158 :: Drawings a0
            -> IO Int32
getCount158 =
  propertyGet "Count"
              []
              outInt32

group42 :: Drawings a0
        -> IO (GroupObject ())
group42 =
  function1 "Group"
            []
            outIDispatch

item82 :: a1
       -> Drawings a0
       -> IO (IDispatch ())
item82 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum68 :: Drawings a0
          -> IO (IUnknown ())
newEnum68 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface RoutingSlip
-- 
-- --------------------------------------------------
data RoutingSlip_ a = RoutingSlip__ 
type RoutingSlip a = IDispatch (RoutingSlip_ a)
iidRoutingSlip :: IID (RoutingSlip ())
iidRoutingSlip = mkIID "{000208AA-0000-0000-C000-000000000046}"

queryInterface92 :: (Variant a1)
                 => GUID
                 -> RoutingSlip a0
                 -> IO a1
queryInterface92 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef92 :: RoutingSlip a0
         -> IO Word32
addRef92 =
  function1 "AddRef"
            []
            outWord32

release92 :: RoutingSlip a0
          -> IO Word32
release92 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount92 :: RoutingSlip a0
                   -> IO Word32
getTypeInfoCount92 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo92 :: (Variant a1)
              => Word32
              -> Word32
              -> RoutingSlip a0
              -> IO a1
getTypeInfo92 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames92 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> RoutingSlip a0
                -> IO Int32
getIDsOfNames92 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke92 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> RoutingSlip a0
         -> IO (a1, a2, Word32)
invoke92 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication359 :: (Variant a1)
                  => RoutingSlip a0
                  -> IO a1
getApplication359 =
  propertyGet "Application"
              []
              outVariant

getCreator359 :: RoutingSlip a0
              -> IO XlCreator
getCreator359 =
  propertyGet "Creator"
              []
              outEnum

getParent374 :: RoutingSlip a0
             -> IO (IDispatch ())
getParent374 =
  propertyGet "Parent"
              []
              outIDispatch

getDelivery0 :: RoutingSlip a0
             -> IO XlRoutingSlipDelivery
getDelivery0 =
  propertyGet "Delivery"
              []
              outEnum

setDelivery0 :: XlRoutingSlipDelivery
             -> RoutingSlip a0
             -> IO ()
setDelivery0 rhs =
  propertySet "Delivery"
              [inEnum rhs]

getMessage0 :: RoutingSlip a0
            -> IO a1
getMessage0 =
  propertyGet "Message"
              []
              outVariant

setMessage0 :: a1
            -> RoutingSlip a0
            -> IO ()
setMessage0 rhs =
  propertySet "Message"
              [inVariant rhs]

getRecipients0 :: (Variant a2)
               => a2
               -> RoutingSlip a0
               -> IO a1
getRecipients0 index1 =
  propertyGet "Recipients"
              [inVariant index1]
              outVariant

setRecipients0 :: (Variant a1)
               => a1
               -> a2
               -> RoutingSlip a0
               -> IO ()
setRecipients0 index1 rhs =
  propertySet "Recipients"
              [ inVariant index1
              , inVariant rhs
              ]

reset6 :: RoutingSlip a0
       -> IO a1
reset6 =
  function1 "Reset"
            []
            outVariant

getReturnWhenDone0 :: RoutingSlip a0
                   -> IO Bool
getReturnWhenDone0 =
  propertyGet "ReturnWhenDone"
              []
              outBool

setReturnWhenDone0 :: Bool
                   -> RoutingSlip a0
                   -> IO ()
setReturnWhenDone0 rhs =
  propertySet "ReturnWhenDone"
              [inBool rhs]

getStatus0 :: RoutingSlip a0
           -> IO XlRoutingSlipStatus
getStatus0 =
  propertyGet "Status"
              []
              outEnum

getSubject4 :: RoutingSlip a0
            -> IO a1
getSubject4 =
  propertyGet "Subject"
              []
              outVariant

setSubject2 :: a1
            -> RoutingSlip a0
            -> IO ()
setSubject2 rhs =
  propertySet "Subject"
              [inVariant rhs]

getTrackStatus0 :: RoutingSlip a0
                -> IO Bool
getTrackStatus0 =
  propertyGet "TrackStatus"
              []
              outBool

setTrackStatus0 :: Bool
                -> RoutingSlip a0
                -> IO ()
setTrackStatus0 rhs =
  propertySet "TrackStatus"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Outline
-- 
-- --------------------------------------------------
data Outline_ a = Outline__ 
type Outline a = IDispatch (Outline_ a)
iidOutline :: IID (Outline ())
iidOutline = mkIID "{000208AB-0000-0000-C000-000000000046}"

queryInterface93 :: (Variant a1)
                 => GUID
                 -> Outline a0
                 -> IO a1
queryInterface93 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef93 :: Outline a0
         -> IO Word32
addRef93 =
  function1 "AddRef"
            []
            outWord32

release93 :: Outline a0
          -> IO Word32
release93 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount93 :: Outline a0
                   -> IO Word32
getTypeInfoCount93 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo93 :: (Variant a1)
              => Word32
              -> Word32
              -> Outline a0
              -> IO a1
getTypeInfo93 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames93 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Outline a0
                -> IO Int32
getIDsOfNames93 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke93 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Outline a0
         -> IO (a1, a2, Word32)
invoke93 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication360 :: (Variant a1)
                  => Outline a0
                  -> IO a1
getApplication360 =
  propertyGet "Application"
              []
              outVariant

getCreator360 :: Outline a0
              -> IO XlCreator
getCreator360 =
  propertyGet "Creator"
              []
              outEnum

getParent375 :: Outline a0
             -> IO (IDispatch ())
getParent375 =
  propertyGet "Parent"
              []
              outIDispatch

getAutomaticStyles0 :: Outline a0
                    -> IO Bool
getAutomaticStyles0 =
  propertyGet "AutomaticStyles"
              []
              outBool

setAutomaticStyles0 :: Bool
                    -> Outline a0
                    -> IO ()
setAutomaticStyles0 rhs =
  propertySet "AutomaticStyles"
              [inBool rhs]

showLevels0 :: (Variant a2, Variant a3)
            => a2
            -> a3
            -> Outline a0
            -> IO a1
showLevels0 rowLevels columnLevels =
  function1 "ShowLevels"
            [ inVariant rowLevels
            , inVariant columnLevels
            ]
            outVariant

getSummaryColumn0 :: Outline a0
                  -> IO XlSummaryColumn
getSummaryColumn0 =
  propertyGet "SummaryColumn"
              []
              outEnum

setSummaryColumn0 :: XlSummaryColumn
                  -> Outline a0
                  -> IO ()
setSummaryColumn0 rhs =
  propertySet "SummaryColumn"
              [inEnum rhs]

getSummaryRow0 :: Outline a0
               -> IO XlSummaryRow
getSummaryRow0 =
  propertyGet "SummaryRow"
              []
              outEnum

setSummaryRow0 :: XlSummaryRow
               -> Outline a0
               -> IO ()
setSummaryRow0 rhs =
  propertySet "SummaryRow"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface Module
-- 
-- --------------------------------------------------
data Module_ a = Module__ 
type Module a = IDispatch (Module_ a)
iidModule :: IID (Module ())
iidModule = mkIID "{000208AD-0000-0000-C000-000000000046}"

queryInterface94 :: (Variant a1)
                 => GUID
                 -> Module a0
                 -> IO a1
queryInterface94 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef94 :: Module a0
         -> IO Word32
addRef94 =
  function1 "AddRef"
            []
            outWord32

release94 :: Module a0
          -> IO Word32
release94 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount94 :: Module a0
                   -> IO Word32
getTypeInfoCount94 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo94 :: (Variant a1)
              => Word32
              -> Word32
              -> Module a0
              -> IO a1
getTypeInfo94 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames94 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Module a0
                -> IO Int32
getIDsOfNames94 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke94 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Module a0
         -> IO (a1, a2, Word32)
invoke94 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication361 :: (Variant a1)
                  => Module a0
                  -> IO a1
getApplication361 =
  propertyGet "Application"
              []
              outVariant

getCreator361 :: Module a0
              -> IO XlCreator
getCreator361 =
  propertyGet "Creator"
              []
              outEnum

getParent376 :: Module a0
             -> IO (IDispatch ())
getParent376 =
  propertyGet "Parent"
              []
              outIDispatch

activate22 :: Module a0
           -> IO ()
activate22 =
  method0 "Activate"
          []

copy99 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Module a0
       -> IO ()
copy99 before after =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          ]

delete184 :: Module a0
          -> IO ()
delete184 =
  method0 "Delete"
          []

getCodeName9 :: Module a0
             -> IO String
getCodeName9 =
  propertyGet "CodeName"
              []
              outString

getCodeName10 :: Module a0
              -> IO String
getCodeName10 =
  propertyGet "_CodeName"
              []
              outString

setCodeName4 :: String
             -> Module a0
             -> IO ()
setCodeName4 rhs =
  propertySet "_CodeName"
              [inString rhs]

getIndex69 :: Module a0
           -> IO Int32
getIndex69 =
  propertyGet "Index"
              []
              outInt32

move11 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Module a0
       -> IO ()
move11 before after =
  method0 "Move"
          [ inVariant before
          , inVariant after
          ]

getName110 :: Module a0
           -> IO String
getName110 =
  propertyGet "Name"
              []
              outString

setName70 :: String
          -> Module a0
          -> IO ()
setName70 rhs =
  propertySet "Name"
              [inString rhs]

getNext5 :: Module a0
         -> IO (IDispatch ())
getNext5 =
  propertyGet "Next"
              []
              outIDispatch

getOnDoubleClick4 :: Module a0
                  -> IO String
getOnDoubleClick4 =
  propertyGet "OnDoubleClick"
              []
              outString

setOnDoubleClick4 :: String
                  -> Module a0
                  -> IO ()
setOnDoubleClick4 rhs =
  propertySet "OnDoubleClick"
              [inString rhs]

getOnSheetActivate5 :: Module a0
                    -> IO String
getOnSheetActivate5 =
  propertyGet "OnSheetActivate"
              []
              outString

setOnSheetActivate5 :: String
                    -> Module a0
                    -> IO ()
setOnSheetActivate5 rhs =
  propertySet "OnSheetActivate"
              [inString rhs]

getOnSheetDeactivate5 :: Module a0
                      -> IO String
getOnSheetDeactivate5 =
  propertyGet "OnSheetDeactivate"
              []
              outString

setOnSheetDeactivate5 :: String
                      -> Module a0
                      -> IO ()
setOnSheetDeactivate5 rhs =
  propertySet "OnSheetDeactivate"
              [inString rhs]

getPageSetup3 :: Module a0
              -> IO (PageSetup ())
getPageSetup3 =
  propertyGet "PageSetup"
              []
              outIUnknown

getPrevious5 :: Module a0
             -> IO (IDispatch ())
getPrevious5 =
  propertyGet "Previous"
              []
              outIDispatch

printOut42 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Module a0
           -> IO ()
printOut42 from to copies preview activePrinter printToFile collate =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

dummy182 :: Module a0
         -> IO ()
dummy182 =
  method0 "_Dummy18"
          []

protect9 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Module a0
         -> IO ()
protect9 password drawingObjects2 contents scenarios0 userInterfaceOnly =
  method0 "_Protect"
          [ inVariant password
          , inVariant drawingObjects2
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          ]

getProtectContents3 :: Module a0
                    -> IO Bool
getProtectContents3 =
  propertyGet "ProtectContents"
              []
              outBool

dummy211 :: Module a0
         -> IO ()
dummy211 =
  method0 "_Dummy21"
          []

getProtectionMode3 :: Module a0
                   -> IO Bool
getProtectionMode3 =
  propertyGet "ProtectionMode"
              []
              outBool

dummy233 :: Module a0
         -> IO ()
dummy233 =
  method0 "_Dummy23"
          []

saveAs9 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> Module a0
        -> IO ()
saveAs9 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout =
  method0 "_SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          ]

select124 :: (Variant a1)
          => a1
          -> Module a0
          -> IO ()
select124 replace3 =
  method0 "Select"
          [inVariant replace3]

unprotect5 :: (Variant a1)
           => a1
           -> Module a0
           -> IO ()
unprotect5 password =
  method0 "Unprotect"
          [inVariant password]

getVisible107 :: Module a0
              -> IO XlSheetVisibility
getVisible107 =
  propertyGet "Visible"
              []
              outEnum

setVisible107 :: XlSheetVisibility
              -> Module a0
              -> IO ()
setVisible107 rhs =
  propertySet "Visible"
              [inEnum rhs]

getShapes3 :: Module a0
           -> IO (Shapes ())
getShapes3 =
  propertyGet "Shapes"
              []
              outIUnknown

insertFile0 :: (Variant a3)
            => a2
            -> a3
            -> Module a0
            -> IO a1
insertFile0 filename merge5 =
  function1 "InsertFile"
            [ inVariant filename
            , inVariant merge5
            ]
            outVariant

saveAs10 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
         => String
         -> a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> Module a0
         -> IO ()
saveAs10 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout =
  method0 "SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          ]

protect10 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> Module a0
          -> IO ()
protect10 password drawingObjects2 contents scenarios0 userInterfaceOnly =
  method0 "Protect"
          [ inVariant password
          , inVariant drawingObjects2
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          ]

printOut43 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Module a0
           -> IO ()
printOut43 from to copies preview activePrinter printToFile collate =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

printOut44 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Module a0
           -> IO ()
printOut44 from to copies preview activePrinter printToFile collate =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

-- --------------------------------------------------
-- 
-- dispinterface Modules
-- 
-- --------------------------------------------------
data Modules_ a = Modules__ 
type Modules a = IDispatch (Modules_ a)
iidModules :: IID (Modules ())
iidModules = mkIID "{000208AE-0000-0000-C000-000000000046}"

queryInterface95 :: (Variant a1)
                 => GUID
                 -> Modules a0
                 -> IO a1
queryInterface95 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef95 :: Modules a0
         -> IO Word32
addRef95 =
  function1 "AddRef"
            []
            outWord32

release95 :: Modules a0
          -> IO Word32
release95 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount95 :: Modules a0
                   -> IO Word32
getTypeInfoCount95 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo95 :: (Variant a1)
              => Word32
              -> Word32
              -> Modules a0
              -> IO a1
getTypeInfo95 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames95 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Modules a0
                -> IO Int32
getIDsOfNames95 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke95 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Modules a0
         -> IO (a1, a2, Word32)
invoke95 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication362 :: (Variant a1)
                  => Modules a0
                  -> IO a1
getApplication362 =
  propertyGet "Application"
              []
              outVariant

getCreator362 :: Modules a0
              -> IO XlCreator
getCreator362 =
  propertyGet "Creator"
              []
              outEnum

getParent377 :: Modules a0
             -> IO (IDispatch ())
getParent377 =
  propertyGet "Parent"
              []
              outIDispatch

add112 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Modules a0
       -> IO (Module ())
add112 before after count1 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count1
            ]
            outIDispatch

copy100 :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Modules a0
        -> IO ()
copy100 before after =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          ]

getCount159 :: Modules a0
            -> IO Int32
getCount159 =
  propertyGet "Count"
              []
              outInt32

delete185 :: Modules a0
          -> IO ()
delete185 =
  method0 "Delete"
          []

dummy713 :: Modules a0
         -> IO ()
dummy713 =
  method0 "_Dummy7"
          []

getItem72 :: a1
          -> Modules a0
          -> IO (IDispatch ())
getItem72 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

move12 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Modules a0
       -> IO ()
move12 before after =
  method0 "Move"
          [ inVariant before
          , inVariant after
          ]

getNewEnum83 :: Modules a0
             -> IO (IUnknown ())
getNewEnum83 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut45 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Modules a0
           -> IO ()
printOut45 from to copies preview activePrinter printToFile collate =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

dummy1244 :: Modules a0
          -> IO ()
dummy1244 =
  method0 "_Dummy12"
          []

select125 :: (Variant a1)
          => a1
          -> Modules a0
          -> IO ()
select125 replace3 =
  method0 "Select"
          [inVariant replace3]

getHPageBreaks7 :: Modules a0
                -> IO (HPageBreaks ())
getHPageBreaks7 =
  propertyGet "HPageBreaks"
              []
              outIDispatch

getVPageBreaks7 :: Modules a0
                -> IO (VPageBreaks ())
getVPageBreaks7 =
  propertyGet "VPageBreaks"
              []
              outIDispatch

getVisible108 :: Modules a0
              -> IO a1
getVisible108 =
  propertyGet "Visible"
              []
              outVariant

setVisible108 :: a1
              -> Modules a0
              -> IO ()
setVisible108 rhs =
  propertySet "Visible"
              [inVariant rhs]

getDefault151 :: a1
              -> Modules a0
              -> IO (IDispatch ())
getDefault151 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

printOut46 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Modules a0
           -> IO ()
printOut46 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

printOut47 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Modules a0
           -> IO ()
printOut47 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          ]

-- --------------------------------------------------
-- 
-- dispinterface DialogSheet
-- 
-- --------------------------------------------------
data DialogSheet_ a = DialogSheet__ 
type DialogSheet a = IDispatch (DialogSheet_ a)
iidDialogSheet :: IID (DialogSheet ())
iidDialogSheet = mkIID "{000208AF-0000-0000-C000-000000000046}"

queryInterface96 :: (Variant a1)
                 => GUID
                 -> DialogSheet a0
                 -> IO a1
queryInterface96 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef96 :: DialogSheet a0
         -> IO Word32
addRef96 =
  function1 "AddRef"
            []
            outWord32

release96 :: DialogSheet a0
          -> IO Word32
release96 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount96 :: DialogSheet a0
                   -> IO Word32
getTypeInfoCount96 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo96 :: (Variant a1)
              => Word32
              -> Word32
              -> DialogSheet a0
              -> IO a1
getTypeInfo96 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames96 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> DialogSheet a0
                -> IO Int32
getIDsOfNames96 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke96 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> DialogSheet a0
         -> IO (a1, a2, Word32)
invoke96 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication363 :: (Variant a1)
                  => DialogSheet a0
                  -> IO a1
getApplication363 =
  propertyGet "Application"
              []
              outVariant

getCreator363 :: DialogSheet a0
              -> IO XlCreator
getCreator363 =
  propertyGet "Creator"
              []
              outEnum

getParent378 :: DialogSheet a0
             -> IO (IDispatch ())
getParent378 =
  propertyGet "Parent"
              []
              outIDispatch

activate23 :: DialogSheet a0
           -> IO ()
activate23 =
  method0 "Activate"
          []

copy101 :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> DialogSheet a0
        -> IO ()
copy101 before after =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          ]

delete186 :: DialogSheet a0
          -> IO ()
delete186 =
  method0 "Delete"
          []

getCodeName11 :: DialogSheet a0
              -> IO String
getCodeName11 =
  propertyGet "CodeName"
              []
              outString

getCodeName12 :: DialogSheet a0
              -> IO String
getCodeName12 =
  propertyGet "_CodeName"
              []
              outString

setCodeName5 :: String
             -> DialogSheet a0
             -> IO ()
setCodeName5 rhs =
  propertySet "_CodeName"
              [inString rhs]

getIndex70 :: DialogSheet a0
           -> IO Int32
getIndex70 =
  propertyGet "Index"
              []
              outInt32

move13 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> DialogSheet a0
       -> IO ()
move13 before after =
  method0 "Move"
          [ inVariant before
          , inVariant after
          ]

getName111 :: DialogSheet a0
           -> IO String
getName111 =
  propertyGet "Name"
              []
              outString

setName71 :: String
          -> DialogSheet a0
          -> IO ()
setName71 rhs =
  propertySet "Name"
              [inString rhs]

getNext6 :: DialogSheet a0
         -> IO (IDispatch ())
getNext6 =
  propertyGet "Next"
              []
              outIDispatch

getOnDoubleClick5 :: DialogSheet a0
                  -> IO String
getOnDoubleClick5 =
  propertyGet "OnDoubleClick"
              []
              outString

setOnDoubleClick5 :: String
                  -> DialogSheet a0
                  -> IO ()
setOnDoubleClick5 rhs =
  propertySet "OnDoubleClick"
              [inString rhs]

getOnSheetActivate6 :: DialogSheet a0
                    -> IO String
getOnSheetActivate6 =
  propertyGet "OnSheetActivate"
              []
              outString

setOnSheetActivate6 :: String
                    -> DialogSheet a0
                    -> IO ()
setOnSheetActivate6 rhs =
  propertySet "OnSheetActivate"
              [inString rhs]

getOnSheetDeactivate6 :: DialogSheet a0
                      -> IO String
getOnSheetDeactivate6 =
  propertyGet "OnSheetDeactivate"
              []
              outString

setOnSheetDeactivate6 :: String
                      -> DialogSheet a0
                      -> IO ()
setOnSheetDeactivate6 rhs =
  propertySet "OnSheetDeactivate"
              [inString rhs]

getPageSetup4 :: DialogSheet a0
              -> IO (PageSetup ())
getPageSetup4 =
  propertyGet "PageSetup"
              []
              outIUnknown

getPrevious6 :: DialogSheet a0
             -> IO (IDispatch ())
getPrevious6 =
  propertyGet "Previous"
              []
              outIDispatch

printOut48 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> DialogSheet a0
           -> IO ()
printOut48 from to copies preview activePrinter printToFile collate =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

printPreview12 :: (Variant a1)
               => a1
               -> DialogSheet a0
               -> IO ()
printPreview12 enableChanges =
  method0 "PrintPreview"
          [inVariant enableChanges]

protect11 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> DialogSheet a0
          -> IO ()
protect11 password drawingObjects2 contents scenarios0 userInterfaceOnly =
  method0 "_Protect"
          [ inVariant password
          , inVariant drawingObjects2
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          ]

getProtectContents4 :: DialogSheet a0
                    -> IO Bool
getProtectContents4 =
  propertyGet "ProtectContents"
              []
              outBool

getProtectDrawingObjects2 :: DialogSheet a0
                          -> IO Bool
getProtectDrawingObjects2 =
  propertyGet "ProtectDrawingObjects"
              []
              outBool

getProtectionMode4 :: DialogSheet a0
                   -> IO Bool
getProtectionMode4 =
  propertyGet "ProtectionMode"
              []
              outBool

getProtectScenarios1 :: DialogSheet a0
                     -> IO Bool
getProtectScenarios1 =
  propertyGet "ProtectScenarios"
              []
              outBool

saveAs11 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
         => String
         -> a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> DialogSheet a0
         -> IO ()
saveAs11 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout =
  method0 "_SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          ]

select126 :: (Variant a1)
          => a1
          -> DialogSheet a0
          -> IO ()
select126 replace3 =
  method0 "Select"
          [inVariant replace3]

unprotect6 :: (Variant a1)
           => a1
           -> DialogSheet a0
           -> IO ()
unprotect6 password =
  method0 "Unprotect"
          [inVariant password]

getVisible109 :: DialogSheet a0
              -> IO XlSheetVisibility
getVisible109 =
  propertyGet "Visible"
              []
              outEnum

setVisible109 :: XlSheetVisibility
              -> DialogSheet a0
              -> IO ()
setVisible109 rhs =
  propertySet "Visible"
              [inEnum rhs]

getShapes4 :: DialogSheet a0
           -> IO (Shapes ())
getShapes4 =
  propertyGet "Shapes"
              []
              outIUnknown

dummy290 :: DialogSheet a0
         -> IO ()
dummy290 =
  method0 "_Dummy29"
          []

arcs2 :: (Variant a1)
      => a1
      -> DialogSheet a0
      -> IO (IDispatch ())
arcs2 index1 =
  function1 "Arcs"
            [inVariant index1]
            outIDispatch

dummy3113 :: DialogSheet a0
          -> IO ()
dummy3113 =
  method0 "_Dummy31"
          []

dummy3211 :: DialogSheet a0
          -> IO ()
dummy3211 =
  method0 "_Dummy32"
          []

buttons2 :: (Variant a1)
         => a1
         -> DialogSheet a0
         -> IO (IDispatch ())
buttons2 index1 =
  function1 "Buttons"
            [inVariant index1]
            outIDispatch

dummy3411 :: DialogSheet a0
          -> IO ()
dummy3411 =
  method0 "_Dummy34"
          []

getEnableCalculation1 :: DialogSheet a0
                      -> IO Bool
getEnableCalculation1 =
  propertyGet "EnableCalculation"
              []
              outBool

setEnableCalculation1 :: Bool
                      -> DialogSheet a0
                      -> IO ()
setEnableCalculation1 rhs =
  propertySet "EnableCalculation"
              [inBool rhs]

dummy3611 :: DialogSheet a0
          -> IO ()
dummy3611 =
  method0 "_Dummy36"
          []

chartObjects2 :: (Variant a1)
              => a1
              -> DialogSheet a0
              -> IO (IDispatch ())
chartObjects2 index1 =
  function1 "ChartObjects"
            [inVariant index1]
            outIDispatch

checkBoxes2 :: (Variant a1)
            => a1
            -> DialogSheet a0
            -> IO (IDispatch ())
checkBoxes2 index1 =
  function1 "CheckBoxes"
            [inVariant index1]
            outIDispatch

checkSpelling59 :: (Variant a1, Variant a2, Variant a3, Variant a4)
                => a1
                -> a2
                -> a3
                -> a4
                -> DialogSheet a0
                -> IO ()
checkSpelling59 customDictionary ignoreUppercase alwaysSuggest spellLang =
  method0 "CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          ]

dummy403 :: DialogSheet a0
         -> IO ()
dummy403 =
  method0 "_Dummy40"
          []

dummy416 :: DialogSheet a0
         -> IO ()
dummy416 =
  method0 "_Dummy41"
          []

dummy424 :: DialogSheet a0
         -> IO ()
dummy424 =
  method0 "_Dummy42"
          []

dummy438 :: DialogSheet a0
         -> IO ()
dummy438 =
  method0 "_Dummy43"
          []

dummy446 :: DialogSheet a0
         -> IO ()
dummy446 =
  method0 "_Dummy44"
          []

dummy454 :: DialogSheet a0
         -> IO ()
dummy454 =
  method0 "_Dummy45"
          []

getDisplayAutomaticPageBreaks1 :: DialogSheet a0
                               -> IO Bool
getDisplayAutomaticPageBreaks1 =
  propertyGet "DisplayAutomaticPageBreaks"
              []
              outBool

setDisplayAutomaticPageBreaks1 :: Bool
                               -> DialogSheet a0
                               -> IO ()
setDisplayAutomaticPageBreaks1 rhs =
  propertySet "DisplayAutomaticPageBreaks"
              [inBool rhs]

drawings2 :: (Variant a1)
          => a1
          -> DialogSheet a0
          -> IO (IDispatch ())
drawings2 index1 =
  function1 "Drawings"
            [inVariant index1]
            outIDispatch

drawingObjects2 :: (Variant a1)
                => a1
                -> DialogSheet a0
                -> IO (IDispatch ())
drawingObjects2 index1 =
  function1 "DrawingObjects"
            [inVariant index1]
            outIDispatch

dropDowns2 :: (Variant a1)
           => a1
           -> DialogSheet a0
           -> IO (IDispatch ())
dropDowns2 index1 =
  function1 "DropDowns"
            [inVariant index1]
            outIDispatch

getEnableAutoFilter1 :: DialogSheet a0
                     -> IO Bool
getEnableAutoFilter1 =
  propertyGet "EnableAutoFilter"
              []
              outBool

setEnableAutoFilter1 :: Bool
                     -> DialogSheet a0
                     -> IO ()
setEnableAutoFilter1 rhs =
  propertySet "EnableAutoFilter"
              [inBool rhs]

getEnableSelection1 :: DialogSheet a0
                    -> IO XlEnableSelection
getEnableSelection1 =
  propertyGet "EnableSelection"
              []
              outEnum

setEnableSelection1 :: XlEnableSelection
                    -> DialogSheet a0
                    -> IO ()
setEnableSelection1 rhs =
  propertySet "EnableSelection"
              [inEnum rhs]

getEnableOutlining1 :: DialogSheet a0
                    -> IO Bool
getEnableOutlining1 =
  propertyGet "EnableOutlining"
              []
              outBool

setEnableOutlining1 :: Bool
                    -> DialogSheet a0
                    -> IO ()
setEnableOutlining1 rhs =
  propertySet "EnableOutlining"
              [inBool rhs]

getEnablePivotTable1 :: DialogSheet a0
                     -> IO Bool
getEnablePivotTable1 =
  propertyGet "EnablePivotTable"
              []
              outBool

setEnablePivotTable1 :: Bool
                     -> DialogSheet a0
                     -> IO ()
setEnablePivotTable1 rhs =
  propertySet "EnablePivotTable"
              [inBool rhs]

evaluate9 :: a2
          -> DialogSheet a0
          -> IO a1
evaluate9 name =
  function1 "Evaluate"
            [inVariant name]
            outVariant

evaluate10 :: a2
           -> DialogSheet a0
           -> IO a1
evaluate10 name =
  function1 "_Evaluate"
            [inVariant name]
            outVariant

dummy566 :: DialogSheet a0
         -> IO ()
dummy566 =
  method0 "_Dummy56"
          []

resetAllPageBreaks1 :: DialogSheet a0
                    -> IO ()
resetAllPageBreaks1 =
  method0 "ResetAllPageBreaks"
          []

groupBoxes2 :: (Variant a1)
            => a1
            -> DialogSheet a0
            -> IO (IDispatch ())
groupBoxes2 index1 =
  function1 "GroupBoxes"
            [inVariant index1]
            outIDispatch

groupObjects2 :: (Variant a1)
              => a1
              -> DialogSheet a0
              -> IO (IDispatch ())
groupObjects2 index1 =
  function1 "GroupObjects"
            [inVariant index1]
            outIDispatch

labels2 :: (Variant a1)
        => a1
        -> DialogSheet a0
        -> IO (IDispatch ())
labels2 index1 =
  function1 "Labels"
            [inVariant index1]
            outIDispatch

lines2 :: (Variant a1)
       => a1
       -> DialogSheet a0
       -> IO (IDispatch ())
lines2 index1 =
  function1 "Lines"
            [inVariant index1]
            outIDispatch

listBoxes2 :: (Variant a1)
           => a1
           -> DialogSheet a0
           -> IO (IDispatch ())
listBoxes2 index1 =
  function1 "ListBoxes"
            [inVariant index1]
            outIDispatch

getNames4 :: DialogSheet a0
          -> IO (Names ())
getNames4 =
  propertyGet "Names"
              []
              outIUnknown

oLEObjects2 :: (Variant a1)
            => a1
            -> DialogSheet a0
            -> IO (IDispatch ())
oLEObjects2 index1 =
  function1 "OLEObjects"
            [inVariant index1]
            outIDispatch

dummy654 :: DialogSheet a0
         -> IO ()
dummy654 =
  method0 "_Dummy65"
          []

dummy664 :: DialogSheet a0
         -> IO ()
dummy664 =
  method0 "_Dummy66"
          []

dummy674 :: DialogSheet a0
         -> IO ()
dummy674 =
  method0 "_Dummy67"
          []

optionButtons2 :: (Variant a1)
               => a1
               -> DialogSheet a0
               -> IO (IDispatch ())
optionButtons2 index1 =
  function1 "OptionButtons"
            [inVariant index1]
            outIDispatch

dummy690 :: DialogSheet a0
         -> IO ()
dummy690 =
  method0 "_Dummy69"
          []

ovals2 :: (Variant a1)
       => a1
       -> DialogSheet a0
       -> IO (IDispatch ())
ovals2 index1 =
  function1 "Ovals"
            [inVariant index1]
            outIDispatch

paste9 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> DialogSheet a0
       -> IO ()
paste9 destination link =
  method0 "Paste"
          [ inVariant destination
          , inVariant link
          ]

pasteSpecial7 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> DialogSheet a0
              -> IO ()
pasteSpecial7 format1 link displayAsIcon iconFileName iconIndex iconLabel =
  method0 "_PasteSpecial"
          [ inVariant format1
          , inVariant link
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          ]

pictures2 :: (Variant a1)
          => a1
          -> DialogSheet a0
          -> IO (IDispatch ())
pictures2 index1 =
  function1 "Pictures"
            [inVariant index1]
            outIDispatch

dummy741 :: DialogSheet a0
         -> IO ()
dummy741 =
  method0 "_Dummy74"
          []

dummy754 :: DialogSheet a0
         -> IO ()
dummy754 =
  method0 "_Dummy75"
          []

dummy760 :: DialogSheet a0
         -> IO ()
dummy760 =
  method0 "_Dummy76"
          []

rectangles2 :: (Variant a1)
            => a1
            -> DialogSheet a0
            -> IO (IDispatch ())
rectangles2 index1 =
  function1 "Rectangles"
            [inVariant index1]
            outIDispatch

dummy780 :: DialogSheet a0
         -> IO ()
dummy780 =
  method0 "_Dummy78"
          []

dummy790 :: DialogSheet a0
         -> IO ()
dummy790 =
  method0 "_Dummy79"
          []

getScrollArea1 :: DialogSheet a0
               -> IO String
getScrollArea1 =
  propertyGet "ScrollArea"
              []
              outString

setScrollArea1 :: String
               -> DialogSheet a0
               -> IO ()
setScrollArea1 rhs =
  propertySet "ScrollArea"
              [inString rhs]

scrollBars2 :: (Variant a1)
            => a1
            -> DialogSheet a0
            -> IO (IDispatch ())
scrollBars2 index1 =
  function1 "ScrollBars"
            [inVariant index1]
            outIDispatch

dummy820 :: DialogSheet a0
         -> IO ()
dummy820 =
  method0 "_Dummy82"
          []

dummy830 :: DialogSheet a0
         -> IO ()
dummy830 =
  method0 "_Dummy83"
          []

spinners2 :: (Variant a1)
          => a1
          -> DialogSheet a0
          -> IO (IDispatch ())
spinners2 index1 =
  function1 "Spinners"
            [inVariant index1]
            outIDispatch

dummy850 :: DialogSheet a0
         -> IO ()
dummy850 =
  method0 "_Dummy85"
          []

dummy860 :: DialogSheet a0
         -> IO ()
dummy860 =
  method0 "_Dummy86"
          []

textBoxes2 :: (Variant a1)
           => a1
           -> DialogSheet a0
           -> IO (IDispatch ())
textBoxes2 index1 =
  function1 "TextBoxes"
            [inVariant index1]
            outIDispatch

dummy880 :: DialogSheet a0
         -> IO ()
dummy880 =
  method0 "_Dummy88"
          []

dummy890 :: DialogSheet a0
         -> IO ()
dummy890 =
  method0 "_Dummy89"
          []

dummy901 :: DialogSheet a0
         -> IO ()
dummy901 =
  method0 "_Dummy90"
          []

getHPageBreaks8 :: DialogSheet a0
                -> IO (HPageBreaks ())
getHPageBreaks8 =
  propertyGet "HPageBreaks"
              []
              outIDispatch

getVPageBreaks8 :: DialogSheet a0
                -> IO (VPageBreaks ())
getVPageBreaks8 =
  propertyGet "VPageBreaks"
              []
              outIDispatch

getQueryTables1 :: DialogSheet a0
                -> IO (QueryTables ())
getQueryTables1 =
  propertyGet "QueryTables"
              []
              outIUnknown

getDisplayPageBreaks1 :: DialogSheet a0
                      -> IO Bool
getDisplayPageBreaks1 =
  propertyGet "DisplayPageBreaks"
              []
              outBool

setDisplayPageBreaks1 :: Bool
                      -> DialogSheet a0
                      -> IO ()
setDisplayPageBreaks1 rhs =
  propertySet "DisplayPageBreaks"
              [inBool rhs]

getComments4 :: DialogSheet a0
             -> IO (Comments ())
getComments4 =
  propertyGet "Comments"
              []
              outIUnknown

getHyperlinks4 :: DialogSheet a0
               -> IO (Hyperlinks ())
getHyperlinks4 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

clearCircles1 :: DialogSheet a0
              -> IO ()
clearCircles1 =
  method0 "ClearCircles"
          []

circleInvalid1 :: DialogSheet a0
               -> IO ()
circleInvalid1 =
  method0 "CircleInvalid"
          []

getDisplayRightToLeft8 :: DialogSheet a0
                       -> IO Int32
getDisplayRightToLeft8 =
  propertyGet "_DisplayRightToLeft"
              []
              outInt32

setDisplayRightToLeft7 :: Int32
                       -> DialogSheet a0
                       -> IO ()
setDisplayRightToLeft7 rhs =
  propertySet "_DisplayRightToLeft"
              [inInt32 rhs]

getAutoFilter2 :: DialogSheet a0
               -> IO (AutoFilter ())
getAutoFilter2 =
  propertyGet "AutoFilter"
              []
              outIUnknown

getDisplayRightToLeft9 :: DialogSheet a0
                       -> IO Bool
getDisplayRightToLeft9 =
  propertyGet "DisplayRightToLeft"
              []
              outBool

setDisplayRightToLeft8 :: Bool
                       -> DialogSheet a0
                       -> IO ()
setDisplayRightToLeft8 rhs =
  propertySet "DisplayRightToLeft"
              [inBool rhs]

getScripts2 :: (Variant a1)
            => DialogSheet a0
            -> IO a1
getScripts2 =
  propertyGet "Scripts"
              []
              outVariant

printOut49 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> DialogSheet a0
           -> IO ()
printOut49 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

checkSpelling60 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> DialogSheet a0
                -> IO ()
checkSpelling60 customDictionary ignoreUppercase alwaysSuggest spellLang ignoreFinalYaa spellScript =
  method0 "_CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant spellLang
          , inVariant ignoreFinalYaa
          , inVariant spellScript
          ]

getTab2 :: DialogSheet a0
        -> IO (Tab ())
getTab2 =
  propertyGet "Tab"
              []
              outIUnknown

getMailEnvelope2 :: (Variant a1)
                 => DialogSheet a0
                 -> IO a1
getMailEnvelope2 =
  propertyGet "MailEnvelope"
              []
              outVariant

saveAs12 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
         => String
         -> a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> DialogSheet a0
         -> IO ()
saveAs12 filename fileFormat password writeResPassword readOnlyRecommended createBackup addToMru textCodepage textVisualLayout local =
  method0 "SaveAs"
          [ inString filename
          , inVariant fileFormat
          , inVariant password
          , inVariant writeResPassword
          , inVariant readOnlyRecommended
          , inVariant createBackup
          , inVariant addToMru
          , inVariant textCodepage
          , inVariant textVisualLayout
          , inVariant local
          ]

getCustomProperties1 :: DialogSheet a0
                     -> IO (CustomProperties ())
getCustomProperties1 =
  propertyGet "CustomProperties"
              []
              outIUnknown

getSmartTags3 :: DialogSheet a0
              -> IO (SmartTags ())
getSmartTags3 =
  propertyGet "SmartTags"
              []
              outIUnknown

getProtection3 :: DialogSheet a0
               -> IO (Protection ())
getProtection3 =
  propertyGet "Protection"
              []
              outIUnknown

pasteSpecial8 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> DialogSheet a0
              -> IO ()
pasteSpecial8 format1 link displayAsIcon iconFileName iconIndex iconLabel noHTMLFormatting =
  method0 "PasteSpecial"
          [ inVariant format1
          , inVariant link
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          , inVariant noHTMLFormatting
          ]

protect12 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> DialogSheet a0
          -> IO ()
protect12 password drawingObjects3 contents scenarios0 userInterfaceOnly allowFormattingCells allowFormattingColumns allowFormattingRows allowInsertingColumns allowInsertingRows allowInsertingHyperlinks allowDeletingColumns allowDeletingRows allowSorting allowFiltering allowUsingPivotTables =
  method0 "Protect"
          [ inVariant password
          , inVariant drawingObjects3
          , inVariant contents
          , inVariant scenarios0
          , inVariant userInterfaceOnly
          , inVariant allowFormattingCells
          , inVariant allowFormattingColumns
          , inVariant allowFormattingRows
          , inVariant allowInsertingColumns
          , inVariant allowInsertingRows
          , inVariant allowInsertingHyperlinks
          , inVariant allowDeletingColumns
          , inVariant allowDeletingRows
          , inVariant allowSorting
          , inVariant allowFiltering
          , inVariant allowUsingPivotTables
          ]

dummy1130 :: DialogSheet a0
          -> IO ()
dummy1130 =
  method0 "_Dummy113"
          []

dummy1140 :: DialogSheet a0
          -> IO ()
dummy1140 =
  method0 "_Dummy114"
          []

dummy1150 :: DialogSheet a0
          -> IO ()
dummy1150 =
  method0 "_Dummy115"
          []

printOut50 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> DialogSheet a0
           -> IO ()
printOut50 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

getEnableFormatConditionsCalculation1 :: DialogSheet a0
                                      -> IO Bool
getEnableFormatConditionsCalculation1 =
  propertyGet "EnableFormatConditionsCalculation"
              []
              outBool

setEnableFormatConditionsCalculation1 :: Bool
                                      -> DialogSheet a0
                                      -> IO ()
setEnableFormatConditionsCalculation1 rhs =
  propertySet "EnableFormatConditionsCalculation"
              [inBool rhs]

getSort4 :: DialogSheet a0
         -> IO (Sort ())
getSort4 =
  propertyGet "Sort"
              []
              outIUnknown

exportAsFixedFormat5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                     => XlFixedFormatType
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> DialogSheet a0
                     -> IO ()
exportAsFixedFormat5 type0 filename quality includeDocProperties ignorePrintAreas from to openAfterPublish fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inEnum type0
          , inVariant filename
          , inVariant quality
          , inVariant includeDocProperties
          , inVariant ignorePrintAreas
          , inVariant from
          , inVariant to
          , inVariant openAfterPublish
          , inVariant fixedFormatExtClassPtr
          ]

getDefaultButton6 :: DialogSheet a0
                  -> IO a1
getDefaultButton6 =
  propertyGet "DefaultButton"
              []
              outVariant

setDefaultButton6 :: a1
                  -> DialogSheet a0
                  -> IO ()
setDefaultButton6 rhs =
  propertySet "DefaultButton"
              [inVariant rhs]

getDialogFrame0 :: DialogSheet a0
                -> IO (DialogFrame ())
getDialogFrame0 =
  propertyGet "DialogFrame"
              []
              outIDispatch

editBoxes0 :: (Variant a1)
           => a1
           -> DialogSheet a0
           -> IO (IDispatch ())
editBoxes0 index1 =
  function1 "EditBoxes"
            [inVariant index1]
            outIDispatch

getFocus0 :: DialogSheet a0
          -> IO a1
getFocus0 =
  propertyGet "Focus"
              []
              outVariant

setFocus0 :: a1
          -> DialogSheet a0
          -> IO ()
setFocus0 rhs =
  propertySet "Focus"
              [inVariant rhs]

hide0 :: (Variant a1)
      => a1
      -> DialogSheet a0
      -> IO Bool
hide0 cancel =
  function1 "Hide"
            [inVariant cancel]
            outBool

show7 :: DialogSheet a0
      -> IO Bool
show7 =
  function1 "Show"
            []
            outBool

-- --------------------------------------------------
-- 
-- dispinterface DialogSheets
-- 
-- --------------------------------------------------
data DialogSheets_ a = DialogSheets__ 
type DialogSheets a = IDispatch (DialogSheets_ a)
iidDialogSheets :: IID (DialogSheets ())
iidDialogSheets = mkIID "{000208B0-0000-0000-C000-000000000046}"

queryInterface97 :: (Variant a1)
                 => GUID
                 -> DialogSheets a0
                 -> IO a1
queryInterface97 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef97 :: DialogSheets a0
         -> IO Word32
addRef97 =
  function1 "AddRef"
            []
            outWord32

release97 :: DialogSheets a0
          -> IO Word32
release97 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount97 :: DialogSheets a0
                   -> IO Word32
getTypeInfoCount97 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo97 :: (Variant a1)
              => Word32
              -> Word32
              -> DialogSheets a0
              -> IO a1
getTypeInfo97 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames97 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> DialogSheets a0
                -> IO Int32
getIDsOfNames97 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke97 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> DialogSheets a0
         -> IO (a1, a2, Word32)
invoke97 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication364 :: (Variant a1)
                  => DialogSheets a0
                  -> IO a1
getApplication364 =
  propertyGet "Application"
              []
              outVariant

getCreator364 :: DialogSheets a0
              -> IO XlCreator
getCreator364 =
  propertyGet "Creator"
              []
              outEnum

getParent379 :: DialogSheets a0
             -> IO (IDispatch ())
getParent379 =
  propertyGet "Parent"
              []
              outIDispatch

add113 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> DialogSheets a0
       -> IO (DialogSheet ())
add113 before after count1 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count1
            ]
            outIDispatch

copy102 :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> DialogSheets a0
        -> IO ()
copy102 before after =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          ]

getCount160 :: DialogSheets a0
            -> IO Int32
getCount160 =
  propertyGet "Count"
              []
              outInt32

delete187 :: DialogSheets a0
          -> IO ()
delete187 =
  method0 "Delete"
          []

dummy714 :: DialogSheets a0
         -> IO ()
dummy714 =
  method0 "_Dummy7"
          []

getItem73 :: a1
          -> DialogSheets a0
          -> IO (IDispatch ())
getItem73 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

move14 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> DialogSheets a0
       -> IO ()
move14 before after =
  method0 "Move"
          [ inVariant before
          , inVariant after
          ]

getNewEnum84 :: DialogSheets a0
             -> IO (IUnknown ())
getNewEnum84 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut51 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> DialogSheets a0
           -> IO ()
printOut51 from to copies preview activePrinter printToFile collate =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

printPreview13 :: (Variant a1)
               => a1
               -> DialogSheets a0
               -> IO ()
printPreview13 enableChanges =
  method0 "PrintPreview"
          [inVariant enableChanges]

select127 :: (Variant a1)
          => a1
          -> DialogSheets a0
          -> IO ()
select127 replace3 =
  method0 "Select"
          [inVariant replace3]

getHPageBreaks9 :: DialogSheets a0
                -> IO (HPageBreaks ())
getHPageBreaks9 =
  propertyGet "HPageBreaks"
              []
              outIDispatch

getVPageBreaks9 :: DialogSheets a0
                -> IO (VPageBreaks ())
getVPageBreaks9 =
  propertyGet "VPageBreaks"
              []
              outIDispatch

getVisible110 :: DialogSheets a0
              -> IO a1
getVisible110 =
  propertyGet "Visible"
              []
              outVariant

setVisible110 :: a1
              -> DialogSheets a0
              -> IO ()
setVisible110 rhs =
  propertySet "Visible"
              [inVariant rhs]

getDefault152 :: a1
              -> DialogSheets a0
              -> IO (IDispatch ())
getDefault152 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

printOut52 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> DialogSheets a0
           -> IO ()
printOut52 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

printOut53 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> DialogSheets a0
           -> IO ()
printOut53 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

-- --------------------------------------------------
-- 
-- dispinterface Worksheets
-- 
-- --------------------------------------------------
data Worksheets_ a = Worksheets__ 
type Worksheets a = IDispatch (Worksheets_ a)
iidWorksheets :: IID (Worksheets ())
iidWorksheets = mkIID "{000208B1-0000-0000-C000-000000000046}"

queryInterface98 :: (Variant a1)
                 => GUID
                 -> Worksheets a0
                 -> IO a1
queryInterface98 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef98 :: Worksheets a0
         -> IO Word32
addRef98 =
  function1 "AddRef"
            []
            outWord32

release98 :: Worksheets a0
          -> IO Word32
release98 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount98 :: Worksheets a0
                   -> IO Word32
getTypeInfoCount98 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo98 :: (Variant a1)
              => Word32
              -> Word32
              -> Worksheets a0
              -> IO a1
getTypeInfo98 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames98 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> Worksheets a0
                -> IO Int32
getIDsOfNames98 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke98 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> Worksheets a0
         -> IO (a1, a2, Word32)
invoke98 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication365 :: (Variant a1)
                  => Worksheets a0
                  -> IO a1
getApplication365 =
  propertyGet "Application"
              []
              outVariant

getCreator365 :: Worksheets a0
              -> IO XlCreator
getCreator365 =
  propertyGet "Creator"
              []
              outEnum

getParent380 :: Worksheets a0
             -> IO (IDispatch ())
getParent380 =
  propertyGet "Parent"
              []
              outIDispatch

add114 :: (Variant a1, Variant a2, Variant a3, Variant a4)
       => a1
       -> a2
       -> a3
       -> a4
       -> Worksheets a0
       -> IO (IDispatch ())
add114 before after count1 type0 =
  function1 "Add"
            [ inVariant before
            , inVariant after
            , inVariant count1
            , inVariant type0
            ]
            outIDispatch

copy103 :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Worksheets a0
        -> IO ()
copy103 before after =
  method0 "Copy"
          [ inVariant before
          , inVariant after
          ]

getCount161 :: Worksheets a0
            -> IO Int32
getCount161 =
  propertyGet "Count"
              []
              outInt32

delete188 :: Worksheets a0
          -> IO ()
delete188 =
  method0 "Delete"
          []

fillAcrossSheets1 :: (Variant a2)
                  => Range a1
                  -> a2
                  -> Worksheets a0
                  -> IO ()
fillAcrossSheets1 range type0 =
  method0 "FillAcrossSheets"
          [ inIDispatch range
          , inDefaultValue (inInt32 (-4104)) inVariant type0
          ]

getItem74 :: a1
          -> Worksheets a0
          -> IO (IDispatch ())
getItem74 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

move15 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Worksheets a0
       -> IO ()
move15 before after =
  method0 "Move"
          [ inVariant before
          , inVariant after
          ]

getNewEnum85 :: Worksheets a0
             -> IO (IUnknown ())
getNewEnum85 =
  propertyGet "_NewEnum"
              []
              outIUnknown

printOut54 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Worksheets a0
           -> IO ()
printOut54 from to copies preview activePrinter printToFile collate =
  method0 "__PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          ]

printPreview14 :: (Variant a1)
               => a1
               -> Worksheets a0
               -> IO ()
printPreview14 enableChanges =
  method0 "PrintPreview"
          [inVariant enableChanges]

select128 :: (Variant a1)
          => a1
          -> Worksheets a0
          -> IO ()
select128 replace3 =
  method0 "Select"
          [inVariant replace3]

getHPageBreaks10 :: Worksheets a0
                 -> IO (HPageBreaks ())
getHPageBreaks10 =
  propertyGet "HPageBreaks"
              []
              outIDispatch

getVPageBreaks10 :: Worksheets a0
                 -> IO (VPageBreaks ())
getVPageBreaks10 =
  propertyGet "VPageBreaks"
              []
              outIDispatch

getVisible111 :: Worksheets a0
              -> IO a1
getVisible111 =
  propertyGet "Visible"
              []
              outVariant

setVisible111 :: a1
              -> Worksheets a0
              -> IO ()
setVisible111 rhs =
  propertySet "Visible"
              [inVariant rhs]

getDefault153 :: a1
              -> Worksheets a0
              -> IO (IDispatch ())
getDefault153 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

printOut55 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Worksheets a0
           -> IO ()
printOut55 from to copies preview activePrinter printToFile collate prToFileName =
  method0 "_PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          ]

printOut56 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Worksheets a0
           -> IO ()
printOut56 from to copies preview activePrinter printToFile collate prToFileName ignorePrintAreas =
  method0 "PrintOut"
          [ inVariant from
          , inVariant to
          , inVariant copies
          , inVariant preview
          , inVariant activePrinter
          , inVariant printToFile
          , inVariant collate
          , inVariant prToFileName
          , inVariant ignorePrintAreas
          ]

-- --------------------------------------------------
-- 
-- dispinterface PageSetup
-- 
-- --------------------------------------------------
data PageSetup_ a = PageSetup__ 
type PageSetup a = IDispatch (PageSetup_ a)
iidPageSetup :: IID (PageSetup ())
iidPageSetup = mkIID "{000208B4-0000-0000-C000-000000000046}"

queryInterface99 :: (Variant a1)
                 => GUID
                 -> PageSetup a0
                 -> IO a1
queryInterface99 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef99 :: PageSetup a0
         -> IO Word32
addRef99 =
  function1 "AddRef"
            []
            outWord32

release99 :: PageSetup a0
          -> IO Word32
release99 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount99 :: PageSetup a0
                   -> IO Word32
getTypeInfoCount99 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo99 :: (Variant a1)
              => Word32
              -> Word32
              -> PageSetup a0
              -> IO a1
getTypeInfo99 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames99 :: GUID
                -> Char
                -> Word32
                -> Word32
                -> PageSetup a0
                -> IO Int32
getIDsOfNames99 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke99 :: (Variant a1, Variant a2, Variant a3)
         => Int32
         -> GUID
         -> Word32
         -> Word16
         -> a3
         -> PageSetup a0
         -> IO (a1, a2, Word32)
invoke99 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication366 :: (Variant a1)
                  => PageSetup a0
                  -> IO a1
getApplication366 =
  propertyGet "Application"
              []
              outVariant

getCreator366 :: PageSetup a0
              -> IO XlCreator
getCreator366 =
  propertyGet "Creator"
              []
              outEnum

getParent381 :: PageSetup a0
             -> IO (IDispatch ())
getParent381 =
  propertyGet "Parent"
              []
              outIDispatch

getBlackAndWhite0 :: PageSetup a0
                  -> IO Bool
getBlackAndWhite0 =
  propertyGet "BlackAndWhite"
              []
              outBool

setBlackAndWhite0 :: Bool
                  -> PageSetup a0
                  -> IO ()
setBlackAndWhite0 rhs =
  propertySet "BlackAndWhite"
              [inBool rhs]

getBottomMargin0 :: PageSetup a0
                 -> IO Double
getBottomMargin0 =
  propertyGet "BottomMargin"
              []
              outDouble

setBottomMargin0 :: Double
                 -> PageSetup a0
                 -> IO ()
setBottomMargin0 rhs =
  propertySet "BottomMargin"
              [inDouble rhs]

getCenterFooter1 :: PageSetup a0
                 -> IO String
getCenterFooter1 =
  propertyGet "CenterFooter"
              []
              outString

setCenterFooter0 :: String
                 -> PageSetup a0
                 -> IO ()
setCenterFooter0 rhs =
  propertySet "CenterFooter"
              [inString rhs]

getCenterHeader1 :: PageSetup a0
                 -> IO String
getCenterHeader1 =
  propertyGet "CenterHeader"
              []
              outString

setCenterHeader0 :: String
                 -> PageSetup a0
                 -> IO ()
setCenterHeader0 rhs =
  propertySet "CenterHeader"
              [inString rhs]

getCenterHorizontally0 :: PageSetup a0
                       -> IO Bool
getCenterHorizontally0 =
  propertyGet "CenterHorizontally"
              []
              outBool

setCenterHorizontally0 :: Bool
                       -> PageSetup a0
                       -> IO ()
setCenterHorizontally0 rhs =
  propertySet "CenterHorizontally"
              [inBool rhs]

getCenterVertically0 :: PageSetup a0
                     -> IO Bool
getCenterVertically0 =
  propertyGet "CenterVertically"
              []
              outBool

setCenterVertically0 :: Bool
                     -> PageSetup a0
                     -> IO ()
setCenterVertically0 rhs =
  propertySet "CenterVertically"
              [inBool rhs]

getChartSize0 :: PageSetup a0
              -> IO XlObjectSize
getChartSize0 =
  propertyGet "ChartSize"
              []
              outEnum

setChartSize0 :: XlObjectSize
              -> PageSetup a0
              -> IO ()
setChartSize0 rhs =
  propertySet "ChartSize"
              [inEnum rhs]

getDraft0 :: PageSetup a0
          -> IO Bool
getDraft0 =
  propertyGet "Draft"
              []
              outBool

setDraft0 :: Bool
          -> PageSetup a0
          -> IO ()
setDraft0 rhs =
  propertySet "Draft"
              [inBool rhs]

getFirstPageNumber0 :: PageSetup a0
                    -> IO Int32
getFirstPageNumber0 =
  propertyGet "FirstPageNumber"
              []
              outInt32

setFirstPageNumber0 :: Int32
                    -> PageSetup a0
                    -> IO ()
setFirstPageNumber0 rhs =
  propertySet "FirstPageNumber"
              [inInt32 rhs]

getFitToPagesTall0 :: PageSetup a0
                   -> IO a1
getFitToPagesTall0 =
  propertyGet "FitToPagesTall"
              []
              outVariant

setFitToPagesTall0 :: a1
                   -> PageSetup a0
                   -> IO ()
setFitToPagesTall0 rhs =
  propertySet "FitToPagesTall"
              [inVariant rhs]

getFitToPagesWide0 :: PageSetup a0
                   -> IO a1
getFitToPagesWide0 =
  propertyGet "FitToPagesWide"
              []
              outVariant

setFitToPagesWide0 :: a1
                   -> PageSetup a0
                   -> IO ()
setFitToPagesWide0 rhs =
  propertySet "FitToPagesWide"
              [inVariant rhs]

getFooterMargin0 :: PageSetup a0
                 -> IO Double
getFooterMargin0 =
  propertyGet "FooterMargin"
              []
              outDouble

setFooterMargin0 :: Double
                 -> PageSetup a0
                 -> IO ()
setFooterMargin0 rhs =
  propertySet "FooterMargin"
              [inDouble rhs]

getHeaderMargin0 :: PageSetup a0
                 -> IO Double
getHeaderMargin0 =
  propertyGet "HeaderMargin"
              []
              outDouble

setHeaderMargin0 :: Double
                 -> PageSetup a0
                 -> IO ()
setHeaderMargin0 rhs =
  propertySet "HeaderMargin"
              [inDouble rhs]

getLeftFooter1 :: PageSetup a0
               -> IO String
getLeftFooter1 =
  propertyGet "LeftFooter"
              []
              outString

setLeftFooter0 :: String
               -> PageSetup a0
               -> IO ()
setLeftFooter0 rhs =
  propertySet "LeftFooter"
              [inString rhs]

getLeftHeader1 :: PageSetup a0
               -> IO String
getLeftHeader1 =
  propertyGet "LeftHeader"
              []
              outString

setLeftHeader0 :: String
               -> PageSetup a0
               -> IO ()
setLeftHeader0 rhs =
  propertySet "LeftHeader"
              [inString rhs]

getLeftMargin0 :: PageSetup a0
               -> IO Double
getLeftMargin0 =
  propertyGet "LeftMargin"
              []
              outDouble

setLeftMargin0 :: Double
               -> PageSetup a0
               -> IO ()
setLeftMargin0 rhs =
  propertySet "LeftMargin"
              [inDouble rhs]

getOrder3 :: PageSetup a0
          -> IO XlOrder
getOrder3 =
  propertyGet "Order"
              []
              outEnum

setOrder3 :: XlOrder
          -> PageSetup a0
          -> IO ()
setOrder3 rhs =
  propertySet "Order"
              [inEnum rhs]

getOrientation47 :: PageSetup a0
                 -> IO XlPageOrientation
getOrientation47 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation47 :: XlPageOrientation
                 -> PageSetup a0
                 -> IO ()
setOrientation47 rhs =
  propertySet "Orientation"
              [inEnum rhs]

getPaperSize0 :: PageSetup a0
              -> IO XlPaperSize
getPaperSize0 =
  propertyGet "PaperSize"
              []
              outEnum

setPaperSize0 :: XlPaperSize
              -> PageSetup a0
              -> IO ()
setPaperSize0 rhs =
  propertySet "PaperSize"
              [inEnum rhs]

getPrintArea0 :: PageSetup a0
              -> IO String
getPrintArea0 =
  propertyGet "PrintArea"
              []
              outString

setPrintArea0 :: String
              -> PageSetup a0
              -> IO ()
setPrintArea0 rhs =
  propertySet "PrintArea"
              [inString rhs]

getPrintGridlines0 :: PageSetup a0
                   -> IO Bool
getPrintGridlines0 =
  propertyGet "PrintGridlines"
              []
              outBool

setPrintGridlines0 :: Bool
                   -> PageSetup a0
                   -> IO ()
setPrintGridlines0 rhs =
  propertySet "PrintGridlines"
              [inBool rhs]

getPrintHeadings0 :: PageSetup a0
                  -> IO Bool
getPrintHeadings0 =
  propertyGet "PrintHeadings"
              []
              outBool

setPrintHeadings0 :: Bool
                  -> PageSetup a0
                  -> IO ()
setPrintHeadings0 rhs =
  propertySet "PrintHeadings"
              [inBool rhs]

getPrintNotes0 :: PageSetup a0
               -> IO Bool
getPrintNotes0 =
  propertyGet "PrintNotes"
              []
              outBool

setPrintNotes0 :: Bool
               -> PageSetup a0
               -> IO ()
setPrintNotes0 rhs =
  propertySet "PrintNotes"
              [inBool rhs]

getPrintQuality0 :: (Variant a2)
                 => a2
                 -> PageSetup a0
                 -> IO a1
getPrintQuality0 index1 =
  propertyGet "PrintQuality"
              [inVariant index1]
              outVariant

setPrintQuality0 :: (Variant a1)
                 => a1
                 -> a2
                 -> PageSetup a0
                 -> IO ()
setPrintQuality0 index1 rhs =
  propertySet "PrintQuality"
              [ inVariant index1
              , inVariant rhs
              ]

getPrintTitleColumns0 :: PageSetup a0
                      -> IO String
getPrintTitleColumns0 =
  propertyGet "PrintTitleColumns"
              []
              outString

setPrintTitleColumns0 :: String
                      -> PageSetup a0
                      -> IO ()
setPrintTitleColumns0 rhs =
  propertySet "PrintTitleColumns"
              [inString rhs]

getPrintTitleRows0 :: PageSetup a0
                   -> IO String
getPrintTitleRows0 =
  propertyGet "PrintTitleRows"
              []
              outString

setPrintTitleRows0 :: String
                   -> PageSetup a0
                   -> IO ()
setPrintTitleRows0 rhs =
  propertySet "PrintTitleRows"
              [inString rhs]

getRightFooter1 :: PageSetup a0
                -> IO String
getRightFooter1 =
  propertyGet "RightFooter"
              []
              outString

setRightFooter0 :: String
                -> PageSetup a0
                -> IO ()
setRightFooter0 rhs =
  propertySet "RightFooter"
              [inString rhs]

getRightHeader1 :: PageSetup a0
                -> IO String
getRightHeader1 =
  propertyGet "RightHeader"
              []
              outString

setRightHeader0 :: String
                -> PageSetup a0
                -> IO ()
setRightHeader0 rhs =
  propertySet "RightHeader"
              [inString rhs]

getRightMargin0 :: PageSetup a0
                -> IO Double
getRightMargin0 =
  propertyGet "RightMargin"
              []
              outDouble

setRightMargin0 :: Double
                -> PageSetup a0
                -> IO ()
setRightMargin0 rhs =
  propertySet "RightMargin"
              [inDouble rhs]

getTopMargin0 :: PageSetup a0
              -> IO Double
getTopMargin0 =
  propertyGet "TopMargin"
              []
              outDouble

setTopMargin0 :: Double
              -> PageSetup a0
              -> IO ()
setTopMargin0 rhs =
  propertySet "TopMargin"
              [inDouble rhs]

getZoom2 :: PageSetup a0
         -> IO a1
getZoom2 =
  propertyGet "Zoom"
              []
              outVariant

setZoom2 :: a1
         -> PageSetup a0
         -> IO ()
setZoom2 rhs =
  propertySet "Zoom"
              [inVariant rhs]

getPrintComments0 :: PageSetup a0
                  -> IO XlPrintLocation
getPrintComments0 =
  propertyGet "PrintComments"
              []
              outEnum

setPrintComments0 :: XlPrintLocation
                  -> PageSetup a0
                  -> IO ()
setPrintComments0 rhs =
  propertySet "PrintComments"
              [inEnum rhs]

getPrintErrors0 :: PageSetup a0
                -> IO XlPrintErrors
getPrintErrors0 =
  propertyGet "PrintErrors"
              []
              outEnum

setPrintErrors0 :: XlPrintErrors
                -> PageSetup a0
                -> IO ()
setPrintErrors0 rhs =
  propertySet "PrintErrors"
              [inEnum rhs]

getCenterHeaderPicture0 :: PageSetup a0
                        -> IO (Graphic ())
getCenterHeaderPicture0 =
  propertyGet "CenterHeaderPicture"
              []
              outIUnknown

getCenterFooterPicture0 :: PageSetup a0
                        -> IO (Graphic ())
getCenterFooterPicture0 =
  propertyGet "CenterFooterPicture"
              []
              outIUnknown

getLeftHeaderPicture0 :: PageSetup a0
                      -> IO (Graphic ())
getLeftHeaderPicture0 =
  propertyGet "LeftHeaderPicture"
              []
              outIUnknown

getLeftFooterPicture0 :: PageSetup a0
                      -> IO (Graphic ())
getLeftFooterPicture0 =
  propertyGet "LeftFooterPicture"
              []
              outIUnknown

getRightHeaderPicture0 :: PageSetup a0
                       -> IO (Graphic ())
getRightHeaderPicture0 =
  propertyGet "RightHeaderPicture"
              []
              outIUnknown

getRightFooterPicture0 :: PageSetup a0
                       -> IO (Graphic ())
getRightFooterPicture0 =
  propertyGet "RightFooterPicture"
              []
              outIUnknown

getOddAndEvenPagesHeaderFooter0 :: PageSetup a0
                                -> IO Bool
getOddAndEvenPagesHeaderFooter0 =
  propertyGet "OddAndEvenPagesHeaderFooter"
              []
              outBool

setOddAndEvenPagesHeaderFooter0 :: Bool
                                -> PageSetup a0
                                -> IO ()
setOddAndEvenPagesHeaderFooter0 rhs =
  propertySet "OddAndEvenPagesHeaderFooter"
              [inBool rhs]

getDifferentFirstPageHeaderFooter0 :: PageSetup a0
                                   -> IO Bool
getDifferentFirstPageHeaderFooter0 =
  propertyGet "DifferentFirstPageHeaderFooter"
              []
              outBool

setDifferentFirstPageHeaderFooter0 :: Bool
                                   -> PageSetup a0
                                   -> IO ()
setDifferentFirstPageHeaderFooter0 rhs =
  propertySet "DifferentFirstPageHeaderFooter"
              [inBool rhs]

getScaleWithDocHeaderFooter0 :: PageSetup a0
                             -> IO Bool
getScaleWithDocHeaderFooter0 =
  propertyGet "ScaleWithDocHeaderFooter"
              []
              outBool

setScaleWithDocHeaderFooter0 :: Bool
                             -> PageSetup a0
                             -> IO ()
setScaleWithDocHeaderFooter0 rhs =
  propertySet "ScaleWithDocHeaderFooter"
              [inBool rhs]

getAlignMarginsHeaderFooter0 :: PageSetup a0
                             -> IO Bool
getAlignMarginsHeaderFooter0 =
  propertyGet "AlignMarginsHeaderFooter"
              []
              outBool

setAlignMarginsHeaderFooter0 :: Bool
                             -> PageSetup a0
                             -> IO ()
setAlignMarginsHeaderFooter0 rhs =
  propertySet "AlignMarginsHeaderFooter"
              [inBool rhs]

getPages0 :: PageSetup a0
          -> IO (Pages ())
getPages0 =
  propertyGet "Pages"
              []
              outIUnknown

getEvenPage0 :: PageSetup a0
             -> IO (Page ())
getEvenPage0 =
  propertyGet "EvenPage"
              []
              outIUnknown

getFirstPage0 :: PageSetup a0
              -> IO (Page ())
getFirstPage0 =
  propertyGet "FirstPage"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Names
-- 
-- --------------------------------------------------
data Names_ a = Names__ 
type Names a = IDispatch (Names_ a)
iidNames :: IID (Names ())
iidNames = mkIID "{000208B8-0000-0000-C000-000000000046}"

queryInterface100 :: (Variant a1)
                  => GUID
                  -> Names a0
                  -> IO a1
queryInterface100 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef100 :: Names a0
          -> IO Word32
addRef100 =
  function1 "AddRef"
            []
            outWord32

release100 :: Names a0
           -> IO Word32
release100 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount100 :: Names a0
                    -> IO Word32
getTypeInfoCount100 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo100 :: (Variant a1)
               => Word32
               -> Word32
               -> Names a0
               -> IO a1
getTypeInfo100 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames100 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Names a0
                 -> IO Int32
getIDsOfNames100 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke100 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Names a0
          -> IO (a1, a2, Word32)
invoke100 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication367 :: (Variant a1)
                  => Names a0
                  -> IO a1
getApplication367 =
  propertyGet "Application"
              []
              outVariant

getCreator367 :: Names a0
              -> IO XlCreator
getCreator367 =
  propertyGet "Creator"
              []
              outEnum

getParent382 :: Names a0
             -> IO (IDispatch ())
getParent382 =
  propertyGet "Parent"
              []
              outIDispatch

add115 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> Names a0
       -> IO (Name ())
add115 name refersTo visible macroType shortcutKey category nameLocal refersToLocal categoryLocal refersToR1C1 refersToR1C1Local =
  function1 "Add"
            [ inVariant name
            , inVariant refersTo
            , inVariant visible
            , inVariant macroType
            , inVariant shortcutKey
            , inVariant category
            , inVariant nameLocal
            , inVariant refersToLocal
            , inVariant categoryLocal
            , inVariant refersToR1C1
            , inVariant refersToR1C1Local
            ]
            outIUnknown

item83 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Names a0
       -> IO (Name ())
item83 index1 indexLocal refersTo =
  function1 "Item"
            [ inVariant index1
            , inVariant indexLocal
            , inVariant refersTo
            ]
            outIUnknown

default11 :: (Variant a1, Variant a2, Variant a3)
          => a1
          -> a2
          -> a3
          -> Names a0
          -> IO (Name ())
default11 index1 indexLocal refersTo =
  function1 "_Default"
            [ inVariant index1
            , inVariant indexLocal
            , inVariant refersTo
            ]
            outIUnknown

getCount162 :: Names a0
            -> IO Int32
getCount162 =
  propertyGet "Count"
              []
              outInt32

getNewEnum86 :: Names a0
             -> IO (IUnknown ())
getNewEnum86 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Name
-- 
-- --------------------------------------------------
data Name_ a = Name__ 
type Name a = IDispatch (Name_ a)
iidName :: IID (Name ())
iidName = mkIID "{000208B9-0000-0000-C000-000000000046}"

queryInterface101 :: (Variant a1)
                  => GUID
                  -> Name a0
                  -> IO a1
queryInterface101 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef101 :: Name a0
          -> IO Word32
addRef101 =
  function1 "AddRef"
            []
            outWord32

release101 :: Name a0
           -> IO Word32
release101 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount101 :: Name a0
                    -> IO Word32
getTypeInfoCount101 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo101 :: (Variant a1)
               => Word32
               -> Word32
               -> Name a0
               -> IO a1
getTypeInfo101 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames101 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Name a0
                 -> IO Int32
getIDsOfNames101 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke101 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Name a0
          -> IO (a1, a2, Word32)
invoke101 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication368 :: (Variant a1)
                  => Name a0
                  -> IO a1
getApplication368 =
  propertyGet "Application"
              []
              outVariant

getCreator368 :: Name a0
              -> IO XlCreator
getCreator368 =
  propertyGet "Creator"
              []
              outEnum

getParent383 :: Name a0
             -> IO (IDispatch ())
getParent383 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault154 :: Name a0
              -> IO String
getDefault154 =
  propertyGet "_Default"
              []
              outString

getIndex71 :: Name a0
           -> IO Int32
getIndex71 =
  propertyGet "Index"
              []
              outInt32

getCategory0 :: Name a0
             -> IO String
getCategory0 =
  propertyGet "Category"
              []
              outString

setCategory0 :: String
             -> Name a0
             -> IO ()
setCategory0 rhs =
  propertySet "Category"
              [inString rhs]

getCategoryLocal0 :: Name a0
                  -> IO String
getCategoryLocal0 =
  propertyGet "CategoryLocal"
              []
              outString

setCategoryLocal0 :: String
                  -> Name a0
                  -> IO ()
setCategoryLocal0 rhs =
  propertySet "CategoryLocal"
              [inString rhs]

delete189 :: Name a0
          -> IO ()
delete189 =
  method0 "Delete"
          []

getMacroType0 :: Name a0
              -> IO XlXLMMacroType
getMacroType0 =
  propertyGet "MacroType"
              []
              outEnum

setMacroType0 :: XlXLMMacroType
              -> Name a0
              -> IO ()
setMacroType0 rhs =
  propertySet "MacroType"
              [inEnum rhs]

getName112 :: Name a0
           -> IO String
getName112 =
  propertyGet "Name"
              []
              outString

setName72 :: String
          -> Name a0
          -> IO ()
setName72 rhs =
  propertySet "Name"
              [inString rhs]

getRefersTo0 :: Name a0
             -> IO a1
getRefersTo0 =
  propertyGet "RefersTo"
              []
              outVariant

setRefersTo0 :: a1
             -> Name a0
             -> IO ()
setRefersTo0 rhs =
  propertySet "RefersTo"
              [inVariant rhs]

getShortcutKey0 :: Name a0
                -> IO String
getShortcutKey0 =
  propertyGet "ShortcutKey"
              []
              outString

setShortcutKey0 :: String
                -> Name a0
                -> IO ()
setShortcutKey0 rhs =
  propertySet "ShortcutKey"
              [inString rhs]

getValue53 :: Name a0
           -> IO String
getValue53 =
  propertyGet "Value"
              []
              outString

setValue45 :: String
           -> Name a0
           -> IO ()
setValue45 rhs =
  propertySet "Value"
              [inString rhs]

getVisible112 :: Name a0
              -> IO Bool
getVisible112 =
  propertyGet "Visible"
              []
              outBool

setVisible112 :: Bool
              -> Name a0
              -> IO ()
setVisible112 rhs =
  propertySet "Visible"
              [inBool rhs]

getNameLocal3 :: Name a0
              -> IO String
getNameLocal3 =
  propertyGet "NameLocal"
              []
              outString

setNameLocal0 :: String
              -> Name a0
              -> IO ()
setNameLocal0 rhs =
  propertySet "NameLocal"
              [inString rhs]

getRefersToLocal0 :: Name a0
                  -> IO a1
getRefersToLocal0 =
  propertyGet "RefersToLocal"
              []
              outVariant

setRefersToLocal0 :: a1
                  -> Name a0
                  -> IO ()
setRefersToLocal0 rhs =
  propertySet "RefersToLocal"
              [inVariant rhs]

getRefersToR1C10 :: Name a0
                 -> IO a1
getRefersToR1C10 =
  propertyGet "RefersToR1C1"
              []
              outVariant

setRefersToR1C10 :: a1
                 -> Name a0
                 -> IO ()
setRefersToR1C10 rhs =
  propertySet "RefersToR1C1"
              [inVariant rhs]

getRefersToR1C1Local0 :: Name a0
                      -> IO a1
getRefersToR1C1Local0 =
  propertyGet "RefersToR1C1Local"
              []
              outVariant

setRefersToR1C1Local0 :: a1
                      -> Name a0
                      -> IO ()
setRefersToR1C1Local0 rhs =
  propertySet "RefersToR1C1Local"
              [inVariant rhs]

getRefersToRange0 :: Name a0
                  -> IO (Range ())
getRefersToRange0 =
  propertyGet "RefersToRange"
              []
              outIDispatch

getComment5 :: Name a0
            -> IO String
getComment5 =
  propertyGet "Comment"
              []
              outString

setComment3 :: String
            -> Name a0
            -> IO ()
setComment3 rhs =
  propertySet "Comment"
              [inString rhs]

getWorkbookParameter0 :: Name a0
                      -> IO Bool
getWorkbookParameter0 =
  propertyGet "WorkbookParameter"
              []
              outBool

setWorkbookParameter0 :: Bool
                      -> Name a0
                      -> IO ()
setWorkbookParameter0 rhs =
  propertySet "WorkbookParameter"
              [inBool rhs]

getValidWorkbookParameter0 :: Name a0
                           -> IO Bool
getValidWorkbookParameter0 =
  propertyGet "ValidWorkbookParameter"
              []
              outBool

-- --------------------------------------------------
-- 
-- dispinterface ChartObject
-- 
-- --------------------------------------------------
data ChartObject_ a = ChartObject__ 
type ChartObject a = IDispatch (ChartObject_ a)
iidChartObject :: IID (ChartObject ())
iidChartObject = mkIID "{000208CF-0000-0000-C000-000000000046}"

queryInterface102 :: (Variant a1)
                  => GUID
                  -> ChartObject a0
                  -> IO a1
queryInterface102 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef102 :: ChartObject a0
          -> IO Word32
addRef102 =
  function1 "AddRef"
            []
            outWord32

release102 :: ChartObject a0
           -> IO Word32
release102 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount102 :: ChartObject a0
                    -> IO Word32
getTypeInfoCount102 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo102 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartObject a0
               -> IO a1
getTypeInfo102 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames102 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartObject a0
                 -> IO Int32
getIDsOfNames102 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke102 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartObject a0
          -> IO (a1, a2, Word32)
invoke102 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication369 :: (Variant a1)
                  => ChartObject a0
                  -> IO a1
getApplication369 =
  propertyGet "Application"
              []
              outVariant

getCreator369 :: ChartObject a0
              -> IO XlCreator
getCreator369 =
  propertyGet "Creator"
              []
              outEnum

getParent384 :: ChartObject a0
             -> IO (IDispatch ())
getParent384 =
  propertyGet "Parent"
              []
              outIDispatch

getBottomRightCell39 :: ChartObject a0
                     -> IO (Range ())
getBottomRightCell39 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

bringToFront79 :: ChartObject a0
               -> IO a1
bringToFront79 =
  function1 "BringToFront"
            []
            outVariant

copy104 :: ChartObject a0
        -> IO a1
copy104 =
  function1 "_Copy"
            []
            outVariant

copyPicture85 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> ChartObject a0
              -> IO a1
copyPicture85 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut82 :: ChartObject a0
      -> IO a1
cut82 =
  function1 "Cut"
            []
            outVariant

delete190 :: ChartObject a0
          -> IO a1
delete190 =
  function1 "Delete"
            []
            outVariant

duplicate82 :: ChartObject a0
            -> IO (IDispatch ())
duplicate82 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled89 :: ChartObject a0
             -> IO Bool
getEnabled89 =
  propertyGet "Enabled"
              []
              outBool

setEnabled89 :: Bool
             -> ChartObject a0
             -> IO ()
setEnabled89 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight97 :: ChartObject a0
            -> IO Double
getHeight97 =
  propertyGet "Height"
              []
              outDouble

setHeight92 :: Double
            -> ChartObject a0
            -> IO ()
setHeight92 rhs =
  propertySet "Height"
              [inDouble rhs]

getIndex72 :: ChartObject a0
           -> IO Int32
getIndex72 =
  propertyGet "Index"
              []
              outInt32

getLeft100 :: ChartObject a0
           -> IO Double
getLeft100 =
  propertyGet "Left"
              []
              outDouble

setLeft95 :: Double
          -> ChartObject a0
          -> IO ()
setLeft95 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked90 :: ChartObject a0
            -> IO Bool
getLocked90 =
  propertyGet "Locked"
              []
              outBool

setLocked90 :: Bool
            -> ChartObject a0
            -> IO ()
setLocked90 rhs =
  propertySet "Locked"
              [inBool rhs]

getName113 :: ChartObject a0
           -> IO String
getName113 =
  propertyGet "Name"
              []
              outString

setName73 :: String
          -> ChartObject a0
          -> IO ()
setName73 rhs =
  propertySet "Name"
              [inString rhs]

getOnAction86 :: ChartObject a0
              -> IO String
getOnAction86 =
  propertyGet "OnAction"
              []
              outString

setOnAction86 :: String
              -> ChartObject a0
              -> IO ()
setOnAction86 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement80 :: ChartObject a0
               -> IO a1
getPlacement80 =
  propertyGet "Placement"
              []
              outVariant

setPlacement80 :: a1
               -> ChartObject a0
               -> IO ()
setPlacement80 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject80 :: ChartObject a0
                 -> IO Bool
getPrintObject80 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject80 :: Bool
                 -> ChartObject a0
                 -> IO ()
setPrintObject80 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select129 :: (Variant a2)
          => a2
          -> ChartObject a0
          -> IO a1
select129 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack79 :: ChartObject a0
             -> IO a1
sendToBack79 =
  function1 "SendToBack"
            []
            outVariant

getTop100 :: ChartObject a0
          -> IO Double
getTop100 =
  propertyGet "Top"
              []
              outDouble

setTop95 :: Double
         -> ChartObject a0
         -> IO ()
setTop95 rhs =
  propertySet "Top"
              [inDouble rhs]

getTopLeftCell39 :: ChartObject a0
                 -> IO (Range ())
getTopLeftCell39 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getVisible113 :: ChartObject a0
              -> IO Bool
getVisible113 =
  propertyGet "Visible"
              []
              outBool

setVisible113 :: Bool
              -> ChartObject a0
              -> IO ()
setVisible113 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth99 :: ChartObject a0
           -> IO Double
getWidth99 =
  propertyGet "Width"
              []
              outDouble

setWidth94 :: Double
           -> ChartObject a0
           -> IO ()
setWidth94 rhs =
  propertySet "Width"
              [inDouble rhs]

getZOrder78 :: ChartObject a0
            -> IO Int32
getZOrder78 =
  propertyGet "ZOrder"
              []
              outInt32

getShapeRange81 :: ChartObject a0
                -> IO (ShapeRange ())
getShapeRange81 =
  propertyGet "ShapeRange"
              []
              outIUnknown

activate24 :: ChartObject a0
           -> IO a1
activate24 =
  function1 "Activate"
            []
            outVariant

getChart2 :: (Variant a1)
          => ChartObject a0
          -> IO a1
getChart2 =
  propertyGet "Chart"
              []
              outVariant

getProtectChartObject1 :: ChartObject a0
                       -> IO Bool
getProtectChartObject1 =
  propertyGet "ProtectChartObject"
              []
              outBool

setProtectChartObject1 :: Bool
                       -> ChartObject a0
                       -> IO ()
setProtectChartObject1 rhs =
  propertySet "ProtectChartObject"
              [inBool rhs]

getRoundedCorners16 :: ChartObject a0
                    -> IO Bool
getRoundedCorners16 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners16 :: Bool
                    -> ChartObject a0
                    -> IO ()
setRoundedCorners16 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

getBorder72 :: ChartObject a0
            -> IO (Border ())
getBorder72 =
  propertyGet "Border"
              []
              outIUnknown

getInterior68 :: ChartObject a0
              -> IO (Interior ())
getInterior68 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow46 :: ChartObject a0
            -> IO Bool
getShadow46 =
  propertyGet "Shadow"
              []
              outBool

setShadow43 :: Bool
            -> ChartObject a0
            -> IO ()
setShadow43 rhs =
  propertySet "Shadow"
              [inBool rhs]

copy105 :: ChartObject a0
        -> IO a1
copy105 =
  function1 "Copy"
            []
            outVariant

-- --------------------------------------------------
-- 
-- dispinterface ChartObjects
-- 
-- --------------------------------------------------
data ChartObjects_ a = ChartObjects__ 
type ChartObjects a = IDispatch (ChartObjects_ a)
iidChartObjects :: IID (ChartObjects ())
iidChartObjects = mkIID "{000208D0-0000-0000-C000-000000000046}"

queryInterface103 :: (Variant a1)
                  => GUID
                  -> ChartObjects a0
                  -> IO a1
queryInterface103 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef103 :: ChartObjects a0
          -> IO Word32
addRef103 =
  function1 "AddRef"
            []
            outWord32

release103 :: ChartObjects a0
           -> IO Word32
release103 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount103 :: ChartObjects a0
                    -> IO Word32
getTypeInfoCount103 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo103 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartObjects a0
               -> IO a1
getTypeInfo103 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames103 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartObjects a0
                 -> IO Int32
getIDsOfNames103 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke103 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartObjects a0
          -> IO (a1, a2, Word32)
invoke103 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication370 :: (Variant a1)
                  => ChartObjects a0
                  -> IO a1
getApplication370 =
  propertyGet "Application"
              []
              outVariant

getCreator370 :: ChartObjects a0
              -> IO XlCreator
getCreator370 =
  propertyGet "Creator"
              []
              outEnum

getParent385 :: ChartObjects a0
             -> IO (IDispatch ())
getParent385 =
  propertyGet "Parent"
              []
              outIDispatch

dummy357 :: ChartObjects a0
         -> IO ()
dummy357 =
  method0 "_Dummy3"
          []

bringToFront80 :: ChartObjects a0
               -> IO a1
bringToFront80 =
  function1 "BringToFront"
            []
            outVariant

copy106 :: ChartObjects a0
        -> IO a1
copy106 =
  function1 "_Copy"
            []
            outVariant

copyPicture86 :: (Variant a2, Variant a3)
              => a2
              -> a3
              -> ChartObjects a0
              -> IO a1
copyPicture86 appearance format1 =
  function1 "CopyPicture"
            [ inDefaultValue (inInt32 2) inVariant appearance
            , inDefaultValue (inInt32 (-4147)) inVariant format1
            ]
            outVariant

cut83 :: ChartObjects a0
      -> IO a1
cut83 =
  function1 "Cut"
            []
            outVariant

delete191 :: ChartObjects a0
          -> IO a1
delete191 =
  function1 "Delete"
            []
            outVariant

duplicate83 :: ChartObjects a0
            -> IO (IDispatch ())
duplicate83 =
  function1 "Duplicate"
            []
            outIDispatch

getEnabled90 :: ChartObjects a0
             -> IO Bool
getEnabled90 =
  propertyGet "Enabled"
              []
              outBool

setEnabled90 :: Bool
             -> ChartObjects a0
             -> IO ()
setEnabled90 rhs =
  propertySet "Enabled"
              [inBool rhs]

getHeight98 :: ChartObjects a0
            -> IO Double
getHeight98 =
  propertyGet "Height"
              []
              outDouble

setHeight93 :: Double
            -> ChartObjects a0
            -> IO ()
setHeight93 rhs =
  propertySet "Height"
              [inDouble rhs]

dummy1245 :: ChartObjects a0
          -> IO ()
dummy1245 =
  method0 "_Dummy12"
          []

getLeft101 :: ChartObjects a0
           -> IO Double
getLeft101 =
  propertyGet "Left"
              []
              outDouble

setLeft96 :: Double
          -> ChartObjects a0
          -> IO ()
setLeft96 rhs =
  propertySet "Left"
              [inDouble rhs]

getLocked91 :: ChartObjects a0
            -> IO Bool
getLocked91 =
  propertyGet "Locked"
              []
              outBool

setLocked91 :: Bool
            -> ChartObjects a0
            -> IO ()
setLocked91 rhs =
  propertySet "Locked"
              [inBool rhs]

dummy1542 :: ChartObjects a0
          -> IO ()
dummy1542 =
  method0 "_Dummy15"
          []

getOnAction87 :: ChartObjects a0
              -> IO String
getOnAction87 =
  propertyGet "OnAction"
              []
              outString

setOnAction87 :: String
              -> ChartObjects a0
              -> IO ()
setOnAction87 rhs =
  propertySet "OnAction"
              [inString rhs]

getPlacement81 :: ChartObjects a0
               -> IO a1
getPlacement81 =
  propertyGet "Placement"
              []
              outVariant

setPlacement81 :: a1
               -> ChartObjects a0
               -> IO ()
setPlacement81 rhs =
  propertySet "Placement"
              [inVariant rhs]

getPrintObject81 :: ChartObjects a0
                 -> IO Bool
getPrintObject81 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject81 :: Bool
                 -> ChartObjects a0
                 -> IO ()
setPrintObject81 rhs =
  propertySet "PrintObject"
              [inBool rhs]

select130 :: (Variant a2)
          => a2
          -> ChartObjects a0
          -> IO a1
select130 replace3 =
  function1 "Select"
            [inVariant replace3]
            outVariant

sendToBack80 :: ChartObjects a0
             -> IO a1
sendToBack80 =
  function1 "SendToBack"
            []
            outVariant

getTop101 :: ChartObjects a0
          -> IO Double
getTop101 =
  propertyGet "Top"
              []
              outDouble

setTop96 :: Double
         -> ChartObjects a0
         -> IO ()
setTop96 rhs =
  propertySet "Top"
              [inDouble rhs]

dummy2242 :: ChartObjects a0
          -> IO ()
dummy2242 =
  method0 "_Dummy22"
          []

getVisible114 :: ChartObjects a0
              -> IO Bool
getVisible114 =
  propertyGet "Visible"
              []
              outBool

setVisible114 :: Bool
              -> ChartObjects a0
              -> IO ()
setVisible114 rhs =
  propertySet "Visible"
              [inBool rhs]

getWidth100 :: ChartObjects a0
            -> IO Double
getWidth100 =
  propertyGet "Width"
              []
              outDouble

setWidth95 :: Double
           -> ChartObjects a0
           -> IO ()
setWidth95 rhs =
  propertySet "Width"
              [inDouble rhs]

dummy252 :: ChartObjects a0
         -> IO ()
dummy252 =
  method0 "_Dummy25"
          []

getShapeRange82 :: ChartObjects a0
                -> IO (ShapeRange ())
getShapeRange82 =
  propertyGet "ShapeRange"
              []
              outIUnknown

dummy274 :: ChartObjects a0
         -> IO ()
dummy274 =
  method0 "_Dummy27"
          []

dummy286 :: ChartObjects a0
         -> IO ()
dummy286 =
  method0 "_Dummy28"
          []

getProtectChartObject2 :: ChartObjects a0
                       -> IO Bool
getProtectChartObject2 =
  propertyGet "ProtectChartObject"
              []
              outBool

setProtectChartObject2 :: Bool
                       -> ChartObjects a0
                       -> IO ()
setProtectChartObject2 rhs =
  propertySet "ProtectChartObject"
              [inBool rhs]

getRoundedCorners17 :: ChartObjects a0
                    -> IO Bool
getRoundedCorners17 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners17 :: Bool
                    -> ChartObjects a0
                    -> IO ()
setRoundedCorners17 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

getBorder73 :: ChartObjects a0
            -> IO (Border ())
getBorder73 =
  propertyGet "Border"
              []
              outIUnknown

getInterior69 :: ChartObjects a0
              -> IO (Interior ())
getInterior69 =
  propertyGet "Interior"
              []
              outIUnknown

getShadow47 :: ChartObjects a0
            -> IO Bool
getShadow47 =
  propertyGet "Shadow"
              []
              outBool

setShadow44 :: Bool
            -> ChartObjects a0
            -> IO ()
setShadow44 rhs =
  propertySet "Shadow"
              [inBool rhs]

copy107 :: ChartObjects a0
        -> IO a1
copy107 =
  function1 "Copy"
            []
            outVariant

add116 :: Double
       -> Double
       -> Double
       -> Double
       -> ChartObjects a0
       -> IO (ChartObject ())
add116 left top width height =
  function1 "Add"
            [ inDouble left
            , inDouble top
            , inDouble width
            , inDouble height
            ]
            outIDispatch

getCount163 :: ChartObjects a0
            -> IO Int32
getCount163 =
  propertyGet "Count"
              []
              outInt32

group43 :: ChartObjects a0
        -> IO (GroupObject ())
group43 =
  function1 "Group"
            []
            outIDispatch

item84 :: a1
       -> ChartObjects a0
       -> IO (IDispatch ())
item84 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum69 :: ChartObjects a0
          -> IO (IUnknown ())
newEnum69 =
  function1 "_NewEnum"
            []
            outIUnknown

default12 :: a1
          -> ChartObjects a0
          -> IO (IDispatch ())
default12 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Mailer
-- 
-- --------------------------------------------------
data Mailer_ a = Mailer__ 
type Mailer a = IDispatch (Mailer_ a)
iidMailer :: IID (Mailer ())
iidMailer = mkIID "{000208D1-0000-0000-C000-000000000046}"

queryInterface104 :: (Variant a1)
                  => GUID
                  -> Mailer a0
                  -> IO a1
queryInterface104 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef104 :: Mailer a0
          -> IO Word32
addRef104 =
  function1 "AddRef"
            []
            outWord32

release104 :: Mailer a0
           -> IO Word32
release104 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount104 :: Mailer a0
                    -> IO Word32
getTypeInfoCount104 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo104 :: (Variant a1)
               => Word32
               -> Word32
               -> Mailer a0
               -> IO a1
getTypeInfo104 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames104 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Mailer a0
                 -> IO Int32
getIDsOfNames104 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke104 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Mailer a0
          -> IO (a1, a2, Word32)
invoke104 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication371 :: (Variant a1)
                  => Mailer a0
                  -> IO a1
getApplication371 =
  propertyGet "Application"
              []
              outVariant

getCreator371 :: Mailer a0
              -> IO XlCreator
getCreator371 =
  propertyGet "Creator"
              []
              outEnum

getParent386 :: Mailer a0
             -> IO (IDispatch ())
getParent386 =
  propertyGet "Parent"
              []
              outIDispatch

getBCCRecipients0 :: Mailer a0
                  -> IO a1
getBCCRecipients0 =
  propertyGet "BCCRecipients"
              []
              outVariant

setBCCRecipients0 :: a1
                  -> Mailer a0
                  -> IO ()
setBCCRecipients0 rhs =
  propertySet "BCCRecipients"
              [inVariant rhs]

getCCRecipients0 :: Mailer a0
                 -> IO a1
getCCRecipients0 =
  propertyGet "CCRecipients"
              []
              outVariant

setCCRecipients0 :: a1
                 -> Mailer a0
                 -> IO ()
setCCRecipients0 rhs =
  propertySet "CCRecipients"
              [inVariant rhs]

getEnclosures0 :: Mailer a0
               -> IO a1
getEnclosures0 =
  propertyGet "Enclosures"
              []
              outVariant

setEnclosures0 :: a1
               -> Mailer a0
               -> IO ()
setEnclosures0 rhs =
  propertySet "Enclosures"
              [inVariant rhs]

getReceived0 :: Mailer a0
             -> IO Bool
getReceived0 =
  propertyGet "Received"
              []
              outBool

getSendDateTime0 :: Mailer a0
                 -> IO Int64
getSendDateTime0 =
  propertyGet "SendDateTime"
              []
              outDate

getSender0 :: Mailer a0
           -> IO String
getSender0 =
  propertyGet "Sender"
              []
              outString

getSubject5 :: Mailer a0
            -> IO String
getSubject5 =
  propertyGet "Subject"
              []
              outString

setSubject3 :: String
            -> Mailer a0
            -> IO ()
setSubject3 rhs =
  propertySet "Subject"
              [inString rhs]

getToRecipients0 :: Mailer a0
                 -> IO a1
getToRecipients0 =
  propertyGet "ToRecipients"
              []
              outVariant

setToRecipients0 :: a1
                 -> Mailer a0
                 -> IO ()
setToRecipients0 rhs =
  propertySet "ToRecipients"
              [inVariant rhs]

getWhichAddress0 :: Mailer a0
                 -> IO a1
getWhichAddress0 =
  propertyGet "WhichAddress"
              []
              outVariant

setWhichAddress0 :: a1
                 -> Mailer a0
                 -> IO ()
setWhichAddress0 rhs =
  propertySet "WhichAddress"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface CustomViews
-- 
-- --------------------------------------------------
data CustomViews_ a = CustomViews__ 
type CustomViews a = IDispatch (CustomViews_ a)
iidCustomViews :: IID (CustomViews ())
iidCustomViews = mkIID "{00024422-0000-0000-C000-000000000046}"

queryInterface105 :: (Variant a1)
                  => GUID
                  -> CustomViews a0
                  -> IO a1
queryInterface105 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef105 :: CustomViews a0
          -> IO Word32
addRef105 =
  function1 "AddRef"
            []
            outWord32

release105 :: CustomViews a0
           -> IO Word32
release105 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount105 :: CustomViews a0
                    -> IO Word32
getTypeInfoCount105 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo105 :: (Variant a1)
               => Word32
               -> Word32
               -> CustomViews a0
               -> IO a1
getTypeInfo105 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames105 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CustomViews a0
                 -> IO Int32
getIDsOfNames105 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke105 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CustomViews a0
          -> IO (a1, a2, Word32)
invoke105 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication372 :: (Variant a1)
                  => CustomViews a0
                  -> IO a1
getApplication372 =
  propertyGet "Application"
              []
              outVariant

getCreator372 :: CustomViews a0
              -> IO XlCreator
getCreator372 =
  propertyGet "Creator"
              []
              outEnum

getParent387 :: CustomViews a0
             -> IO (IDispatch ())
getParent387 =
  propertyGet "Parent"
              []
              outIDispatch

getCount164 :: CustomViews a0
            -> IO Int32
getCount164 =
  propertyGet "Count"
              []
              outInt32

item85 :: a1
       -> CustomViews a0
       -> IO (CustomView ())
item85 viewName =
  function1 "Item"
            [inVariant viewName]
            outIUnknown

add117 :: (Variant a1, Variant a2)
       => String
       -> a1
       -> a2
       -> CustomViews a0
       -> IO (CustomView ())
add117 viewName printSettings rowColSettings =
  function1 "Add"
            [ inString viewName
            , inVariant printSettings
            , inVariant rowColSettings
            ]
            outIUnknown

getDefault155 :: a1
              -> CustomViews a0
              -> IO (CustomView ())
getDefault155 viewName =
  propertyGet "_Default"
              [inVariant viewName]
              outIUnknown

getNewEnum87 :: CustomViews a0
             -> IO (IUnknown ())
getNewEnum87 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CustomView
-- 
-- --------------------------------------------------
data CustomView_ a = CustomView__ 
type CustomView a = IDispatch (CustomView_ a)
iidCustomView :: IID (CustomView ())
iidCustomView = mkIID "{00024423-0000-0000-C000-000000000046}"

queryInterface106 :: (Variant a1)
                  => GUID
                  -> CustomView a0
                  -> IO a1
queryInterface106 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef106 :: CustomView a0
          -> IO Word32
addRef106 =
  function1 "AddRef"
            []
            outWord32

release106 :: CustomView a0
           -> IO Word32
release106 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount106 :: CustomView a0
                    -> IO Word32
getTypeInfoCount106 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo106 :: (Variant a1)
               => Word32
               -> Word32
               -> CustomView a0
               -> IO a1
getTypeInfo106 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames106 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CustomView a0
                 -> IO Int32
getIDsOfNames106 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke106 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CustomView a0
          -> IO (a1, a2, Word32)
invoke106 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication373 :: (Variant a1)
                  => CustomView a0
                  -> IO a1
getApplication373 =
  propertyGet "Application"
              []
              outVariant

getCreator373 :: CustomView a0
              -> IO XlCreator
getCreator373 =
  propertyGet "Creator"
              []
              outEnum

getParent388 :: CustomView a0
             -> IO (IDispatch ())
getParent388 =
  propertyGet "Parent"
              []
              outIDispatch

getName114 :: CustomView a0
           -> IO String
getName114 =
  propertyGet "Name"
              []
              outString

getPrintSettings0 :: CustomView a0
                  -> IO Bool
getPrintSettings0 =
  propertyGet "PrintSettings"
              []
              outBool

getRowColSettings0 :: CustomView a0
                   -> IO Bool
getRowColSettings0 =
  propertyGet "RowColSettings"
              []
              outBool

show8 :: CustomView a0
      -> IO ()
show8 =
  method0 "Show"
          []

delete192 :: CustomView a0
          -> IO ()
delete192 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- dispinterface FormatConditions
-- 
-- --------------------------------------------------
data FormatConditions_ a = FormatConditions__ 
type FormatConditions a = IDispatch (FormatConditions_ a)
iidFormatConditions :: IID (FormatConditions ())
iidFormatConditions =
  mkIID "{00024424-0000-0000-C000-000000000046}"

queryInterface107 :: (Variant a1)
                  => GUID
                  -> FormatConditions a0
                  -> IO a1
queryInterface107 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef107 :: FormatConditions a0
          -> IO Word32
addRef107 =
  function1 "AddRef"
            []
            outWord32

release107 :: FormatConditions a0
           -> IO Word32
release107 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount107 :: FormatConditions a0
                    -> IO Word32
getTypeInfoCount107 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo107 :: (Variant a1)
               => Word32
               -> Word32
               -> FormatConditions a0
               -> IO a1
getTypeInfo107 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames107 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> FormatConditions a0
                 -> IO Int32
getIDsOfNames107 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke107 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> FormatConditions a0
          -> IO (a1, a2, Word32)
invoke107 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication374 :: (Variant a1)
                  => FormatConditions a0
                  -> IO a1
getApplication374 =
  propertyGet "Application"
              []
              outVariant

getCreator374 :: FormatConditions a0
              -> IO XlCreator
getCreator374 =
  propertyGet "Creator"
              []
              outEnum

getParent389 :: FormatConditions a0
             -> IO (IDispatch ())
getParent389 =
  propertyGet "Parent"
              []
              outIDispatch

getCount165 :: FormatConditions a0
            -> IO Int32
getCount165 =
  propertyGet "Count"
              []
              outInt32

item86 :: a1
       -> FormatConditions a0
       -> IO (IDispatch ())
item86 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

add118 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
       => XlFormatConditionType
       -> a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> FormatConditions a0
       -> IO (IDispatch ())
add118 type0 operator formula1 formula2 string textOperator dateOperator scopeType =
  function1 "Add"
            [ inEnum type0
            , inVariant operator
            , inVariant formula1
            , inVariant formula2
            , inVariant string
            , inVariant textOperator
            , inVariant dateOperator
            , inVariant scopeType
            ]
            outIDispatch

getDefault156 :: a1
              -> FormatConditions a0
              -> IO (IDispatch ())
getDefault156 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum88 :: FormatConditions a0
             -> IO (IUnknown ())
getNewEnum88 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete193 :: FormatConditions a0
          -> IO ()
delete193 =
  method0 "Delete"
          []

addColorScale0 :: Int32
               -> FormatConditions a0
               -> IO (IDispatch ())
addColorScale0 colorScaleType =
  function1 "AddColorScale"
            [inInt32 colorScaleType]
            outIDispatch

addDatabar0 :: FormatConditions a0
            -> IO (IDispatch ())
addDatabar0 =
  function1 "AddDatabar"
            []
            outIDispatch

addIconSetCondition0 :: FormatConditions a0
                     -> IO (IDispatch ())
addIconSetCondition0 =
  function1 "AddIconSetCondition"
            []
            outIDispatch

addTop100 :: FormatConditions a0
          -> IO (IDispatch ())
addTop100 =
  function1 "AddTop10"
            []
            outIDispatch

addAboveAverage0 :: FormatConditions a0
                 -> IO (IDispatch ())
addAboveAverage0 =
  function1 "AddAboveAverage"
            []
            outIDispatch

addUniqueValues0 :: FormatConditions a0
                 -> IO (IDispatch ())
addUniqueValues0 =
  function1 "AddUniqueValues"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface FormatCondition
-- 
-- --------------------------------------------------
data FormatCondition_ a = FormatCondition__ 
type FormatCondition a = IDispatch (FormatCondition_ a)
iidFormatCondition :: IID (FormatCondition ())
iidFormatCondition = mkIID "{00024425-0000-0000-C000-000000000046}"

queryInterface108 :: (Variant a1)
                  => GUID
                  -> FormatCondition a0
                  -> IO a1
queryInterface108 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef108 :: FormatCondition a0
          -> IO Word32
addRef108 =
  function1 "AddRef"
            []
            outWord32

release108 :: FormatCondition a0
           -> IO Word32
release108 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount108 :: FormatCondition a0
                    -> IO Word32
getTypeInfoCount108 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo108 :: (Variant a1)
               => Word32
               -> Word32
               -> FormatCondition a0
               -> IO a1
getTypeInfo108 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames108 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> FormatCondition a0
                 -> IO Int32
getIDsOfNames108 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke108 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> FormatCondition a0
          -> IO (a1, a2, Word32)
invoke108 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication375 :: (Variant a1)
                  => FormatCondition a0
                  -> IO a1
getApplication375 =
  propertyGet "Application"
              []
              outVariant

getCreator375 :: FormatCondition a0
              -> IO XlCreator
getCreator375 =
  propertyGet "Creator"
              []
              outEnum

getParent390 :: FormatCondition a0
             -> IO (IDispatch ())
getParent390 =
  propertyGet "Parent"
              []
              outIDispatch

modify3 :: (Variant a1, Variant a2, Variant a3)
        => XlFormatConditionType
        -> a1
        -> a2
        -> a3
        -> FormatCondition a0
        -> IO ()
modify3 type0 operator formula1 formula2 =
  method0 "_Modify"
          [ inEnum type0
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          ]

getType41 :: FormatCondition a0
          -> IO Int32
getType41 =
  propertyGet "Type"
              []
              outInt32

getOperator4 :: FormatCondition a0
             -> IO Int32
getOperator4 =
  propertyGet "Operator"
              []
              outInt32

getFormula110 :: FormatCondition a0
              -> IO String
getFormula110 =
  propertyGet "Formula1"
              []
              outString

getFormula210 :: FormatCondition a0
              -> IO String
getFormula210 =
  propertyGet "Formula2"
              []
              outString

getInterior70 :: FormatCondition a0
              -> IO (Interior ())
getInterior70 =
  propertyGet "Interior"
              []
              outIUnknown

getBorders9 :: FormatCondition a0
            -> IO (Borders ())
getBorders9 =
  propertyGet "Borders"
              []
              outIDispatch

getFont53 :: FormatCondition a0
          -> IO (Font ())
getFont53 =
  propertyGet "Font"
              []
              outIDispatch

delete194 :: FormatCondition a0
          -> IO ()
delete194 =
  method0 "Delete"
          []

modify4 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => XlFormatConditionType
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> FormatCondition a0
        -> IO ()
modify4 type0 operator formula1 formula2 string operator2 =
  method0 "Modify"
          [ inEnum type0
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          , inVariant string
          , inVariant operator2
          ]

getText64 :: FormatCondition a0
          -> IO String
getText64 =
  propertyGet "Text"
              []
              outString

setText62 :: String
          -> FormatCondition a0
          -> IO ()
setText62 rhs =
  propertySet "Text"
              [inString rhs]

getTextOperator0 :: FormatCondition a0
                 -> IO XlContainsOperator
getTextOperator0 =
  propertyGet "TextOperator"
              []
              outEnum

setTextOperator0 :: XlContainsOperator
                 -> FormatCondition a0
                 -> IO ()
setTextOperator0 rhs =
  propertySet "TextOperator"
              [inEnum rhs]

getDateOperator0 :: FormatCondition a0
                 -> IO XlTimePeriods
getDateOperator0 =
  propertyGet "DateOperator"
              []
              outEnum

setDateOperator0 :: XlTimePeriods
                 -> FormatCondition a0
                 -> IO ()
setDateOperator0 rhs =
  propertySet "DateOperator"
              [inEnum rhs]

getNumberFormat13 :: FormatCondition a0
                  -> IO a1
getNumberFormat13 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat13 :: a1
                  -> FormatCondition a0
                  -> IO ()
setNumberFormat13 rhs =
  propertySet "NumberFormat"
              [inVariant rhs]

getPriority7 :: FormatCondition a0
             -> IO Int32
getPriority7 =
  propertyGet "Priority"
              []
              outInt32

setPriority7 :: Int32
             -> FormatCondition a0
             -> IO ()
setPriority7 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue6 :: FormatCondition a0
               -> IO Bool
getStopIfTrue6 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue3 :: Bool
               -> FormatCondition a0
               -> IO ()
setStopIfTrue3 rhs =
  propertySet "StopIfTrue"
              [inBool rhs]

getAppliesTo6 :: FormatCondition a0
              -> IO (Range ())
getAppliesTo6 =
  propertyGet "AppliesTo"
              []
              outIDispatch

modifyAppliesToRange6 :: Range a1
                      -> FormatCondition a0
                      -> IO ()
modifyAppliesToRange6 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

setFirstPriority6 :: FormatCondition a0
                  -> IO ()
setFirstPriority6 =
  method0 "SetFirstPriority"
          []

setLastPriority6 :: FormatCondition a0
                 -> IO ()
setLastPriority6 =
  method0 "SetLastPriority"
          []

getPTCondition6 :: FormatCondition a0
                -> IO Bool
getPTCondition6 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType6 :: FormatCondition a0
              -> IO XlPivotConditionScope
getScopeType6 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType6 :: XlPivotConditionScope
              -> FormatCondition a0
              -> IO ()
setScopeType6 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface Comments
-- 
-- --------------------------------------------------
data Comments_ a = Comments__ 
type Comments a = IDispatch (Comments_ a)
iidComments :: IID (Comments ())
iidComments = mkIID "{00024426-0000-0000-C000-000000000046}"

queryInterface109 :: (Variant a1)
                  => GUID
                  -> Comments a0
                  -> IO a1
queryInterface109 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef109 :: Comments a0
          -> IO Word32
addRef109 =
  function1 "AddRef"
            []
            outWord32

release109 :: Comments a0
           -> IO Word32
release109 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount109 :: Comments a0
                    -> IO Word32
getTypeInfoCount109 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo109 :: (Variant a1)
               => Word32
               -> Word32
               -> Comments a0
               -> IO a1
getTypeInfo109 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames109 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Comments a0
                 -> IO Int32
getIDsOfNames109 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke109 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Comments a0
          -> IO (a1, a2, Word32)
invoke109 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication376 :: (Variant a1)
                  => Comments a0
                  -> IO a1
getApplication376 =
  propertyGet "Application"
              []
              outVariant

getCreator376 :: Comments a0
              -> IO XlCreator
getCreator376 =
  propertyGet "Creator"
              []
              outEnum

getParent391 :: Comments a0
             -> IO (IDispatch ())
getParent391 =
  propertyGet "Parent"
              []
              outIDispatch

getCount166 :: Comments a0
            -> IO Int32
getCount166 =
  propertyGet "Count"
              []
              outInt32

item87 :: Int32
       -> Comments a0
       -> IO (Comment ())
item87 index1 =
  function1 "Item"
            [inInt32 index1]
            outIUnknown

getDefault157 :: Int32
              -> Comments a0
              -> IO (Comment ())
getDefault157 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIUnknown

getNewEnum89 :: Comments a0
             -> IO (IUnknown ())
getNewEnum89 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Comment
-- 
-- --------------------------------------------------
data Comment_ a = Comment__ 
type Comment a = IDispatch (Comment_ a)
iidComment :: IID (Comment ())
iidComment = mkIID "{00024427-0000-0000-C000-000000000046}"

queryInterface110 :: (Variant a1)
                  => GUID
                  -> Comment a0
                  -> IO a1
queryInterface110 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef110 :: Comment a0
          -> IO Word32
addRef110 =
  function1 "AddRef"
            []
            outWord32

release110 :: Comment a0
           -> IO Word32
release110 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount110 :: Comment a0
                    -> IO Word32
getTypeInfoCount110 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo110 :: (Variant a1)
               => Word32
               -> Word32
               -> Comment a0
               -> IO a1
getTypeInfo110 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames110 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Comment a0
                 -> IO Int32
getIDsOfNames110 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke110 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Comment a0
          -> IO (a1, a2, Word32)
invoke110 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication377 :: (Variant a1)
                  => Comment a0
                  -> IO a1
getApplication377 =
  propertyGet "Application"
              []
              outVariant

getCreator377 :: Comment a0
              -> IO XlCreator
getCreator377 =
  propertyGet "Creator"
              []
              outEnum

getParent392 :: Comment a0
             -> IO (IDispatch ())
getParent392 =
  propertyGet "Parent"
              []
              outIDispatch

getAuthor3 :: Comment a0
           -> IO String
getAuthor3 =
  propertyGet "Author"
              []
              outString

getShape2 :: Comment a0
          -> IO (Shape ())
getShape2 =
  propertyGet "Shape"
              []
              outIUnknown

getVisible115 :: Comment a0
              -> IO Bool
getVisible115 =
  propertyGet "Visible"
              []
              outBool

setVisible115 :: Bool
              -> Comment a0
              -> IO ()
setVisible115 rhs =
  propertySet "Visible"
              [inBool rhs]

text2 :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> Comment a0
      -> IO String
text2 text3 start overwrite =
  function1 "Text"
            [ inVariant text3
            , inVariant start
            , inVariant overwrite
            ]
            outString

delete195 :: Comment a0
          -> IO ()
delete195 =
  method0 "Delete"
          []

next0 :: Comment a0
      -> IO (Comment ())
next0 =
  function1 "Next"
            []
            outIDispatch

previous0 :: Comment a0
          -> IO (Comment ())
previous0 =
  function1 "Previous"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface RefreshEvents
-- 
-- --------------------------------------------------
data RefreshEvents_ a = RefreshEvents__ 
type RefreshEvents a = IDispatch (RefreshEvents_ a)
iidRefreshEvents :: IID (RefreshEvents ())
iidRefreshEvents = mkIID "{0002441B-0000-0000-C000-000000000046}"

mkRefreshEvents_vtbl :: (GUID -> objState -> IO (Ptr ()))
                     -> (objState -> IO Word32)
                     -> (objState -> IO Word32)
                     -> (objState -> IO Word32)
                     -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                     -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                     -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                     -> (Bool -> objState -> IO Bool)
                     -> (Bool -> objState -> IO ())
                     -> IO (ComVTable (RefreshEvents ()) objState)
mkRefreshEvents_vtbl queryInterface111 addRef111 release111 getTypeInfoCount111 getTypeInfo111 getIDsOfNames111 invoke111 beforeRefresh0 afterRefresh0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface111 queryInterface111)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef111 addRef111)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release111 release111)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount111 getTypeInfoCount111)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo111 getTypeInfo111)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames111 getIDsOfNames111)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke111 invoke111)
   meth_arg7 = mkDispMethod "BeforeRefresh" 0x63c (prim_beforeRefresh0 beforeRefresh0)
   meth_arg8 = mkDispMethod "AfterRefresh" 0x63d (prim_afterRefresh0 afterRefresh0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         ]

prim_queryInterface111 :: (GUID -> objState -> IO (Ptr ()))
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_queryInterface111 queryInterface111_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface111_meth riid)
          ppvObj

prim_addRef111 :: (objState -> IO Word32)
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_addRef111 addRef111_meth =
  retVal $ \ the_res ->
  apply_1 (addRef111_meth)
          the_res

prim_release111 :: (objState -> IO Word32)
                -> [VARIANT]
                -> objState
                -> IO (Maybe VARIANT)
prim_release111 release111_meth =
  retVal $ \ the_res ->
  apply_1 (release111_meth)
          the_res

prim_getTypeInfoCount111 :: (objState -> IO Word32)
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_getTypeInfoCount111 getTypeInfoCount111_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount111_meth)
          pctinfo

prim_getTypeInfo111 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_getTypeInfo111 getTypeInfo111_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo111_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames111 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_getIDsOfNames111 getIDsOfNames111_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames111_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke111 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_invoke111 invoke111_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke111_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_beforeRefresh0 :: (Bool -> objState -> IO Bool)
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_beforeRefresh0 beforeRefresh0_meth =
  inoutArg $ \ cancel out_cancel ->
  apply_1 (beforeRefresh0_meth cancel)
          out_cancel

prim_afterRefresh0 :: (Bool -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_afterRefresh0 afterRefresh0_meth =
  inArg $ \ success ->
  apply_0 (afterRefresh0_meth success)

-- --------------------------------------------------
-- 
-- dispinterface _QueryTable
-- 
-- --------------------------------------------------
data QueryTable0_ a = QueryTable0__ 
type QueryTable0 a = IDispatch (QueryTable0_ a)
iidQueryTable0 :: IID (QueryTable0 ())
iidQueryTable0 = mkIID "{00024428-0000-0000-C000-000000000046}"

queryInterface112 :: (Variant a1)
                  => GUID
                  -> QueryTable0 a0
                  -> IO a1
queryInterface112 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef112 :: QueryTable0 a0
          -> IO Word32
addRef112 =
  function1 "AddRef"
            []
            outWord32

release112 :: QueryTable0 a0
           -> IO Word32
release112 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount112 :: QueryTable0 a0
                    -> IO Word32
getTypeInfoCount112 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo112 :: (Variant a1)
               => Word32
               -> Word32
               -> QueryTable0 a0
               -> IO a1
getTypeInfo112 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames112 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> QueryTable0 a0
                 -> IO Int32
getIDsOfNames112 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke112 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> QueryTable0 a0
          -> IO (a1, a2, Word32)
invoke112 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication378 :: (Variant a1)
                  => QueryTable0 a0
                  -> IO a1
getApplication378 =
  propertyGet "Application"
              []
              outVariant

getCreator378 :: QueryTable0 a0
              -> IO XlCreator
getCreator378 =
  propertyGet "Creator"
              []
              outEnum

getParent393 :: QueryTable0 a0
             -> IO (IDispatch ())
getParent393 =
  propertyGet "Parent"
              []
              outIDispatch

getName115 :: QueryTable0 a0
           -> IO String
getName115 =
  propertyGet "Name"
              []
              outString

setName74 :: String
          -> QueryTable0 a0
          -> IO ()
setName74 rhs =
  propertySet "Name"
              [inString rhs]

getFieldNames0 :: QueryTable0 a0
               -> IO Bool
getFieldNames0 =
  propertyGet "FieldNames"
              []
              outBool

setFieldNames0 :: Bool
               -> QueryTable0 a0
               -> IO ()
setFieldNames0 rhs =
  propertySet "FieldNames"
              [inBool rhs]

getRowNumbers0 :: QueryTable0 a0
               -> IO Bool
getRowNumbers0 =
  propertyGet "RowNumbers"
              []
              outBool

setRowNumbers0 :: Bool
               -> QueryTable0 a0
               -> IO ()
setRowNumbers0 rhs =
  propertySet "RowNumbers"
              [inBool rhs]

getFillAdjacentFormulas0 :: QueryTable0 a0
                         -> IO Bool
getFillAdjacentFormulas0 =
  propertyGet "FillAdjacentFormulas"
              []
              outBool

setFillAdjacentFormulas0 :: Bool
                         -> QueryTable0 a0
                         -> IO ()
setFillAdjacentFormulas0 rhs =
  propertySet "FillAdjacentFormulas"
              [inBool rhs]

getHasAutoFormat2 :: QueryTable0 a0
                  -> IO Bool
getHasAutoFormat2 =
  propertyGet "HasAutoFormat"
              []
              outBool

setHasAutoFormat2 :: Bool
                  -> QueryTable0 a0
                  -> IO ()
setHasAutoFormat2 rhs =
  propertySet "HasAutoFormat"
              [inBool rhs]

getRefreshOnFileOpen4 :: QueryTable0 a0
                      -> IO Bool
getRefreshOnFileOpen4 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen4 :: Bool
                      -> QueryTable0 a0
                      -> IO ()
setRefreshOnFileOpen4 rhs =
  propertySet "RefreshOnFileOpen"
              [inBool rhs]

getRefreshing2 :: QueryTable0 a0
               -> IO Bool
getRefreshing2 =
  propertyGet "Refreshing"
              []
              outBool

getFetchedRowOverflow0 :: QueryTable0 a0
                       -> IO Bool
getFetchedRowOverflow0 =
  propertyGet "FetchedRowOverflow"
              []
              outBool

getBackgroundQuery4 :: QueryTable0 a0
                    -> IO Bool
getBackgroundQuery4 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery4 :: Bool
                    -> QueryTable0 a0
                    -> IO ()
setBackgroundQuery4 rhs =
  propertySet "BackgroundQuery"
              [inBool rhs]

cancelRefresh2 :: QueryTable0 a0
               -> IO ()
cancelRefresh2 =
  method0 "CancelRefresh"
          []

getRefreshStyle0 :: QueryTable0 a0
                 -> IO XlCellInsertionMode
getRefreshStyle0 =
  propertyGet "RefreshStyle"
              []
              outEnum

setRefreshStyle0 :: XlCellInsertionMode
                 -> QueryTable0 a0
                 -> IO ()
setRefreshStyle0 rhs =
  propertySet "RefreshStyle"
              [inEnum rhs]

getEnableRefresh4 :: QueryTable0 a0
                  -> IO Bool
getEnableRefresh4 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh4 :: Bool
                  -> QueryTable0 a0
                  -> IO ()
setEnableRefresh4 rhs =
  propertySet "EnableRefresh"
              [inBool rhs]

getSavePassword4 :: QueryTable0 a0
                 -> IO Bool
getSavePassword4 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword4 :: Bool
                 -> QueryTable0 a0
                 -> IO ()
setSavePassword4 rhs =
  propertySet "SavePassword"
              [inBool rhs]

getDestination0 :: QueryTable0 a0
                -> IO (Range ())
getDestination0 =
  propertyGet "Destination"
              []
              outIDispatch

getConnection4 :: QueryTable0 a0
               -> IO a1
getConnection4 =
  propertyGet "Connection"
              []
              outVariant

setConnection4 :: a1
               -> QueryTable0 a0
               -> IO ()
setConnection4 rhs =
  propertySet "Connection"
              [inVariant rhs]

getSql2 :: QueryTable0 a0
        -> IO a1
getSql2 =
  propertyGet "Sql"
              []
              outVariant

setSql2 :: a1
        -> QueryTable0 a0
        -> IO ()
setSql2 rhs =
  propertySet "Sql"
              [inVariant rhs]

getPostText0 :: QueryTable0 a0
             -> IO String
getPostText0 =
  propertyGet "PostText"
              []
              outString

setPostText0 :: String
             -> QueryTable0 a0
             -> IO ()
setPostText0 rhs =
  propertySet "PostText"
              [inString rhs]

getResultRange0 :: QueryTable0 a0
                -> IO (Range ())
getResultRange0 =
  propertyGet "ResultRange"
              []
              outIDispatch

delete196 :: QueryTable0 a0
          -> IO ()
delete196 =
  method0 "Delete"
          []

refresh8 :: (Variant a1)
         => a1
         -> QueryTable0 a0
         -> IO Bool
refresh8 backgroundQuery =
  function1 "Refresh"
            [inVariant backgroundQuery]
            outBool

getParameters0 :: QueryTable0 a0
               -> IO (Parameters ())
getParameters0 =
  propertyGet "Parameters"
              []
              outIUnknown

getRecordset2 :: QueryTable0 a0
              -> IO (IDispatch ())
getRecordset2 =
  propertyGet "Recordset"
              []
              outIDispatch

setRecordset2 :: IDispatch a1
              -> QueryTable0 a0
              -> IO ()
setRecordset2 rhs =
  propertySet "Recordset"
              [inIDispatch rhs]

getSaveData2 :: QueryTable0 a0
             -> IO Bool
getSaveData2 =
  propertyGet "SaveData"
              []
              outBool

setSaveData2 :: Bool
             -> QueryTable0 a0
             -> IO ()
setSaveData2 rhs =
  propertySet "SaveData"
              [inBool rhs]

getTablesOnlyFromHTML0 :: QueryTable0 a0
                       -> IO Bool
getTablesOnlyFromHTML0 =
  propertyGet "TablesOnlyFromHTML"
              []
              outBool

setTablesOnlyFromHTML0 :: Bool
                       -> QueryTable0 a0
                       -> IO ()
setTablesOnlyFromHTML0 rhs =
  propertySet "TablesOnlyFromHTML"
              [inBool rhs]

getEnableEditing0 :: QueryTable0 a0
                  -> IO Bool
getEnableEditing0 =
  propertyGet "EnableEditing"
              []
              outBool

setEnableEditing0 :: Bool
                  -> QueryTable0 a0
                  -> IO ()
setEnableEditing0 rhs =
  propertySet "EnableEditing"
              [inBool rhs]

getTextFilePlatform0 :: QueryTable0 a0
                     -> IO Int32
getTextFilePlatform0 =
  propertyGet "TextFilePlatform"
              []
              outInt32

setTextFilePlatform0 :: Int32
                     -> QueryTable0 a0
                     -> IO ()
setTextFilePlatform0 rhs =
  propertySet "TextFilePlatform"
              [inInt32 rhs]

getTextFileStartRow0 :: QueryTable0 a0
                     -> IO Int32
getTextFileStartRow0 =
  propertyGet "TextFileStartRow"
              []
              outInt32

setTextFileStartRow0 :: Int32
                     -> QueryTable0 a0
                     -> IO ()
setTextFileStartRow0 rhs =
  propertySet "TextFileStartRow"
              [inInt32 rhs]

getTextFileParseType0 :: QueryTable0 a0
                      -> IO XlTextParsingType
getTextFileParseType0 =
  propertyGet "TextFileParseType"
              []
              outEnum

setTextFileParseType0 :: XlTextParsingType
                      -> QueryTable0 a0
                      -> IO ()
setTextFileParseType0 rhs =
  propertySet "TextFileParseType"
              [inEnum rhs]

getTextFileTextQualifier0 :: QueryTable0 a0
                          -> IO XlTextQualifier
getTextFileTextQualifier0 =
  propertyGet "TextFileTextQualifier"
              []
              outEnum

setTextFileTextQualifier0 :: XlTextQualifier
                          -> QueryTable0 a0
                          -> IO ()
setTextFileTextQualifier0 rhs =
  propertySet "TextFileTextQualifier"
              [inEnum rhs]

getTextFileConsecutiveDelimiter0 :: QueryTable0 a0
                                 -> IO Bool
getTextFileConsecutiveDelimiter0 =
  propertyGet "TextFileConsecutiveDelimiter"
              []
              outBool

setTextFileConsecutiveDelimiter0 :: Bool
                                 -> QueryTable0 a0
                                 -> IO ()
setTextFileConsecutiveDelimiter0 rhs =
  propertySet "TextFileConsecutiveDelimiter"
              [inBool rhs]

getTextFileTabDelimiter0 :: QueryTable0 a0
                         -> IO Bool
getTextFileTabDelimiter0 =
  propertyGet "TextFileTabDelimiter"
              []
              outBool

setTextFileTabDelimiter0 :: Bool
                         -> QueryTable0 a0
                         -> IO ()
setTextFileTabDelimiter0 rhs =
  propertySet "TextFileTabDelimiter"
              [inBool rhs]

getTextFileSemicolonDelimiter0 :: QueryTable0 a0
                               -> IO Bool
getTextFileSemicolonDelimiter0 =
  propertyGet "TextFileSemicolonDelimiter"
              []
              outBool

setTextFileSemicolonDelimiter0 :: Bool
                               -> QueryTable0 a0
                               -> IO ()
setTextFileSemicolonDelimiter0 rhs =
  propertySet "TextFileSemicolonDelimiter"
              [inBool rhs]

getTextFileCommaDelimiter0 :: QueryTable0 a0
                           -> IO Bool
getTextFileCommaDelimiter0 =
  propertyGet "TextFileCommaDelimiter"
              []
              outBool

setTextFileCommaDelimiter0 :: Bool
                           -> QueryTable0 a0
                           -> IO ()
setTextFileCommaDelimiter0 rhs =
  propertySet "TextFileCommaDelimiter"
              [inBool rhs]

getTextFileSpaceDelimiter0 :: QueryTable0 a0
                           -> IO Bool
getTextFileSpaceDelimiter0 =
  propertyGet "TextFileSpaceDelimiter"
              []
              outBool

setTextFileSpaceDelimiter0 :: Bool
                           -> QueryTable0 a0
                           -> IO ()
setTextFileSpaceDelimiter0 rhs =
  propertySet "TextFileSpaceDelimiter"
              [inBool rhs]

getTextFileOtherDelimiter0 :: QueryTable0 a0
                           -> IO String
getTextFileOtherDelimiter0 =
  propertyGet "TextFileOtherDelimiter"
              []
              outString

setTextFileOtherDelimiter0 :: String
                           -> QueryTable0 a0
                           -> IO ()
setTextFileOtherDelimiter0 rhs =
  propertySet "TextFileOtherDelimiter"
              [inString rhs]

getTextFileColumnDataTypes0 :: QueryTable0 a0
                            -> IO a1
getTextFileColumnDataTypes0 =
  propertyGet "TextFileColumnDataTypes"
              []
              outVariant

setTextFileColumnDataTypes0 :: a1
                            -> QueryTable0 a0
                            -> IO ()
setTextFileColumnDataTypes0 rhs =
  propertySet "TextFileColumnDataTypes"
              [inVariant rhs]

getTextFileFixedColumnWidths0 :: QueryTable0 a0
                              -> IO a1
getTextFileFixedColumnWidths0 =
  propertyGet "TextFileFixedColumnWidths"
              []
              outVariant

setTextFileFixedColumnWidths0 :: a1
                              -> QueryTable0 a0
                              -> IO ()
setTextFileFixedColumnWidths0 rhs =
  propertySet "TextFileFixedColumnWidths"
              [inVariant rhs]

getPreserveColumnInfo0 :: QueryTable0 a0
                       -> IO Bool
getPreserveColumnInfo0 =
  propertyGet "PreserveColumnInfo"
              []
              outBool

setPreserveColumnInfo0 :: Bool
                       -> QueryTable0 a0
                       -> IO ()
setPreserveColumnInfo0 rhs =
  propertySet "PreserveColumnInfo"
              [inBool rhs]

getPreserveFormatting2 :: QueryTable0 a0
                       -> IO Bool
getPreserveFormatting2 =
  propertyGet "PreserveFormatting"
              []
              outBool

setPreserveFormatting2 :: Bool
                       -> QueryTable0 a0
                       -> IO ()
setPreserveFormatting2 rhs =
  propertySet "PreserveFormatting"
              [inBool rhs]

getAdjustColumnWidth1 :: QueryTable0 a0
                      -> IO Bool
getAdjustColumnWidth1 =
  propertyGet "AdjustColumnWidth"
              []
              outBool

setAdjustColumnWidth1 :: Bool
                      -> QueryTable0 a0
                      -> IO ()
setAdjustColumnWidth1 rhs =
  propertySet "AdjustColumnWidth"
              [inBool rhs]

getCommandText4 :: QueryTable0 a0
                -> IO a1
getCommandText4 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText4 :: a1
                -> QueryTable0 a0
                -> IO ()
setCommandText4 rhs =
  propertySet "CommandText"
              [inVariant rhs]

getCommandType4 :: QueryTable0 a0
                -> IO XlCmdType
getCommandType4 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType4 :: XlCmdType
                -> QueryTable0 a0
                -> IO ()
setCommandType4 rhs =
  propertySet "CommandType"
              [inEnum rhs]

getTextFilePromptOnRefresh0 :: QueryTable0 a0
                            -> IO Bool
getTextFilePromptOnRefresh0 =
  propertyGet "TextFilePromptOnRefresh"
              []
              outBool

setTextFilePromptOnRefresh0 :: Bool
                            -> QueryTable0 a0
                            -> IO ()
setTextFilePromptOnRefresh0 rhs =
  propertySet "TextFilePromptOnRefresh"
              [inBool rhs]

getQueryType2 :: QueryTable0 a0
              -> IO XlQueryType
getQueryType2 =
  propertyGet "QueryType"
              []
              outEnum

getMaintainConnection3 :: QueryTable0 a0
                       -> IO Bool
getMaintainConnection3 =
  propertyGet "MaintainConnection"
              []
              outBool

setMaintainConnection3 :: Bool
                       -> QueryTable0 a0
                       -> IO ()
setMaintainConnection3 rhs =
  propertySet "MaintainConnection"
              [inBool rhs]

getTextFileDecimalSeparator0 :: QueryTable0 a0
                             -> IO String
getTextFileDecimalSeparator0 =
  propertyGet "TextFileDecimalSeparator"
              []
              outString

setTextFileDecimalSeparator0 :: String
                             -> QueryTable0 a0
                             -> IO ()
setTextFileDecimalSeparator0 rhs =
  propertySet "TextFileDecimalSeparator"
              [inString rhs]

getTextFileThousandsSeparator0 :: QueryTable0 a0
                               -> IO String
getTextFileThousandsSeparator0 =
  propertyGet "TextFileThousandsSeparator"
              []
              outString

setTextFileThousandsSeparator0 :: String
                               -> QueryTable0 a0
                               -> IO ()
setTextFileThousandsSeparator0 rhs =
  propertySet "TextFileThousandsSeparator"
              [inString rhs]

getRefreshPeriod4 :: QueryTable0 a0
                  -> IO Int32
getRefreshPeriod4 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod4 :: Int32
                  -> QueryTable0 a0
                  -> IO ()
setRefreshPeriod4 rhs =
  propertySet "RefreshPeriod"
              [inInt32 rhs]

resetTimer2 :: QueryTable0 a0
            -> IO ()
resetTimer2 =
  method0 "ResetTimer"
          []

getWebSelectionType0 :: QueryTable0 a0
                     -> IO XlWebSelectionType
getWebSelectionType0 =
  propertyGet "WebSelectionType"
              []
              outEnum

setWebSelectionType0 :: XlWebSelectionType
                     -> QueryTable0 a0
                     -> IO ()
setWebSelectionType0 rhs =
  propertySet "WebSelectionType"
              [inEnum rhs]

getWebFormatting0 :: QueryTable0 a0
                  -> IO XlWebFormatting
getWebFormatting0 =
  propertyGet "WebFormatting"
              []
              outEnum

setWebFormatting0 :: XlWebFormatting
                  -> QueryTable0 a0
                  -> IO ()
setWebFormatting0 rhs =
  propertySet "WebFormatting"
              [inEnum rhs]

getWebTables0 :: QueryTable0 a0
              -> IO String
getWebTables0 =
  propertyGet "WebTables"
              []
              outString

setWebTables0 :: String
              -> QueryTable0 a0
              -> IO ()
setWebTables0 rhs =
  propertySet "WebTables"
              [inString rhs]

getWebPreFormattedTextToColumns0 :: QueryTable0 a0
                                 -> IO Bool
getWebPreFormattedTextToColumns0 =
  propertyGet "WebPreFormattedTextToColumns"
              []
              outBool

setWebPreFormattedTextToColumns0 :: Bool
                                 -> QueryTable0 a0
                                 -> IO ()
setWebPreFormattedTextToColumns0 rhs =
  propertySet "WebPreFormattedTextToColumns"
              [inBool rhs]

getWebSingleBlockTextImport0 :: QueryTable0 a0
                             -> IO Bool
getWebSingleBlockTextImport0 =
  propertyGet "WebSingleBlockTextImport"
              []
              outBool

setWebSingleBlockTextImport0 :: Bool
                             -> QueryTable0 a0
                             -> IO ()
setWebSingleBlockTextImport0 rhs =
  propertySet "WebSingleBlockTextImport"
              [inBool rhs]

getWebDisableDateRecognition0 :: QueryTable0 a0
                              -> IO Bool
getWebDisableDateRecognition0 =
  propertyGet "WebDisableDateRecognition"
              []
              outBool

setWebDisableDateRecognition0 :: Bool
                              -> QueryTable0 a0
                              -> IO ()
setWebDisableDateRecognition0 rhs =
  propertySet "WebDisableDateRecognition"
              [inBool rhs]

getWebConsecutiveDelimitersAsOne0 :: QueryTable0 a0
                                  -> IO Bool
getWebConsecutiveDelimitersAsOne0 =
  propertyGet "WebConsecutiveDelimitersAsOne"
              []
              outBool

setWebConsecutiveDelimitersAsOne0 :: Bool
                                  -> QueryTable0 a0
                                  -> IO ()
setWebConsecutiveDelimitersAsOne0 rhs =
  propertySet "WebConsecutiveDelimitersAsOne"
              [inBool rhs]

getWebDisableRedirections0 :: QueryTable0 a0
                           -> IO Bool
getWebDisableRedirections0 =
  propertyGet "WebDisableRedirections"
              []
              outBool

setWebDisableRedirections0 :: Bool
                           -> QueryTable0 a0
                           -> IO ()
setWebDisableRedirections0 rhs =
  propertySet "WebDisableRedirections"
              [inBool rhs]

getEditWebPage0 :: QueryTable0 a0
                -> IO a1
getEditWebPage0 =
  propertyGet "EditWebPage"
              []
              outVariant

setEditWebPage0 :: a1
                -> QueryTable0 a0
                -> IO ()
setEditWebPage0 rhs =
  propertySet "EditWebPage"
              [inVariant rhs]

getSourceConnectionFile4 :: QueryTable0 a0
                         -> IO String
getSourceConnectionFile4 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile4 :: String
                         -> QueryTable0 a0
                         -> IO ()
setSourceConnectionFile4 rhs =
  propertySet "SourceConnectionFile"
              [inString rhs]

getSourceDataFile4 :: QueryTable0 a0
                   -> IO String
getSourceDataFile4 =
  propertyGet "SourceDataFile"
              []
              outString

setSourceDataFile2 :: String
                   -> QueryTable0 a0
                   -> IO ()
setSourceDataFile2 rhs =
  propertySet "SourceDataFile"
              [inString rhs]

getRobustConnect4 :: QueryTable0 a0
                  -> IO XlRobustConnect
getRobustConnect4 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect4 :: XlRobustConnect
                  -> QueryTable0 a0
                  -> IO ()
setRobustConnect4 rhs =
  propertySet "RobustConnect"
              [inEnum rhs]

getTextFileTrailingMinusNumbers0 :: QueryTable0 a0
                                 -> IO Bool
getTextFileTrailingMinusNumbers0 =
  propertyGet "TextFileTrailingMinusNumbers"
              []
              outBool

setTextFileTrailingMinusNumbers0 :: Bool
                                 -> QueryTable0 a0
                                 -> IO ()
setTextFileTrailingMinusNumbers0 rhs =
  propertySet "TextFileTrailingMinusNumbers"
              [inBool rhs]

saveAsODC4 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> QueryTable0 a0
           -> IO ()
saveAsODC4 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getListObject2 :: QueryTable0 a0
               -> IO (ListObject ())
getListObject2 =
  propertyGet "ListObject"
              []
              outIUnknown

getTextFileVisualLayout0 :: QueryTable0 a0
                         -> IO XlTextVisualLayoutType
getTextFileVisualLayout0 =
  propertyGet "TextFileVisualLayout"
              []
              outEnum

setTextFileVisualLayout0 :: XlTextVisualLayoutType
                         -> QueryTable0 a0
                         -> IO ()
setTextFileVisualLayout0 rhs =
  propertySet "TextFileVisualLayout"
              [inEnum rhs]

getWorkbookConnection3 :: QueryTable0 a0
                       -> IO (WorkbookConnection ())
getWorkbookConnection3 =
  propertyGet "WorkbookConnection"
              []
              outIUnknown

getSort5 :: QueryTable0 a0
         -> IO (Sort ())
getSort5 =
  propertyGet "Sort"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface QueryTables
-- 
-- --------------------------------------------------
data QueryTables_ a = QueryTables__ 
type QueryTables a = IDispatch (QueryTables_ a)
iidQueryTables :: IID (QueryTables ())
iidQueryTables = mkIID "{00024429-0000-0000-C000-000000000046}"

queryInterface113 :: (Variant a1)
                  => GUID
                  -> QueryTables a0
                  -> IO a1
queryInterface113 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef113 :: QueryTables a0
          -> IO Word32
addRef113 =
  function1 "AddRef"
            []
            outWord32

release113 :: QueryTables a0
           -> IO Word32
release113 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount113 :: QueryTables a0
                    -> IO Word32
getTypeInfoCount113 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo113 :: (Variant a1)
               => Word32
               -> Word32
               -> QueryTables a0
               -> IO a1
getTypeInfo113 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames113 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> QueryTables a0
                 -> IO Int32
getIDsOfNames113 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke113 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> QueryTables a0
          -> IO (a1, a2, Word32)
invoke113 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication379 :: (Variant a1)
                  => QueryTables a0
                  -> IO a1
getApplication379 =
  propertyGet "Application"
              []
              outVariant

getCreator379 :: QueryTables a0
              -> IO XlCreator
getCreator379 =
  propertyGet "Creator"
              []
              outEnum

getParent394 :: QueryTables a0
             -> IO (IDispatch ())
getParent394 =
  propertyGet "Parent"
              []
              outIDispatch

getCount167 :: QueryTables a0
            -> IO Int32
getCount167 =
  propertyGet "Count"
              []
              outInt32

add119 :: (Variant a1, Variant a4)
       => a2
       -> Range a3
       -> a4
       -> QueryTables a0
       -> IO a1
add119 connection destination sql =
  function1 "Add"
            [ inVariant connection
            , inIDispatch destination
            , inVariant sql
            ]
            outVariant

item88 :: (Variant a1)
       => a2
       -> QueryTables a0
       -> IO a1
item88 index1 =
  function1 "Item"
            [inVariant index1]
            outVariant

getDefault158 :: (Variant a1)
              => a2
              -> QueryTables a0
              -> IO a1
getDefault158 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outVariant

newEnum70 :: QueryTables a0
          -> IO (IUnknown ())
newEnum70 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Parameter
-- 
-- --------------------------------------------------
data Parameter_ a = Parameter__ 
type Parameter a = IDispatch (Parameter_ a)
iidParameter :: IID (Parameter ())
iidParameter = mkIID "{0002442A-0000-0000-C000-000000000046}"

queryInterface114 :: (Variant a1)
                  => GUID
                  -> Parameter a0
                  -> IO a1
queryInterface114 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef114 :: Parameter a0
          -> IO Word32
addRef114 =
  function1 "AddRef"
            []
            outWord32

release114 :: Parameter a0
           -> IO Word32
release114 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount114 :: Parameter a0
                    -> IO Word32
getTypeInfoCount114 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo114 :: (Variant a1)
               => Word32
               -> Word32
               -> Parameter a0
               -> IO a1
getTypeInfo114 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames114 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Parameter a0
                 -> IO Int32
getIDsOfNames114 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke114 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Parameter a0
          -> IO (a1, a2, Word32)
invoke114 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication380 :: (Variant a1)
                  => Parameter a0
                  -> IO a1
getApplication380 =
  propertyGet "Application"
              []
              outVariant

getCreator380 :: Parameter a0
              -> IO XlCreator
getCreator380 =
  propertyGet "Creator"
              []
              outEnum

getParent395 :: Parameter a0
             -> IO (IDispatch ())
getParent395 =
  propertyGet "Parent"
              []
              outIDispatch

getDataType2 :: Parameter a0
             -> IO XlParameterDataType
getDataType2 =
  propertyGet "DataType"
              []
              outEnum

setDataType0 :: XlParameterDataType
             -> Parameter a0
             -> IO ()
setDataType0 rhs =
  propertySet "DataType"
              [inEnum rhs]

getType42 :: Parameter a0
          -> IO XlParameterType
getType42 =
  propertyGet "Type"
              []
              outEnum

getPromptString0 :: Parameter a0
                 -> IO String
getPromptString0 =
  propertyGet "PromptString"
              []
              outString

getValue54 :: Parameter a0
           -> IO a1
getValue54 =
  propertyGet "Value"
              []
              outVariant

getSourceRange0 :: Parameter a0
                -> IO (Range ())
getSourceRange0 =
  propertyGet "SourceRange"
              []
              outIDispatch

getName116 :: Parameter a0
           -> IO String
getName116 =
  propertyGet "Name"
              []
              outString

setName75 :: String
          -> Parameter a0
          -> IO ()
setName75 rhs =
  propertySet "Name"
              [inString rhs]

setParam0 :: XlParameterType
          -> a1
          -> Parameter a0
          -> IO ()
setParam0 type0 value =
  method0 "SetParam"
          [ inEnum type0
          , inVariant value
          ]

getRefreshOnChange0 :: Parameter a0
                    -> IO Bool
getRefreshOnChange0 =
  propertyGet "RefreshOnChange"
              []
              outBool

setRefreshOnChange0 :: Bool
                    -> Parameter a0
                    -> IO ()
setRefreshOnChange0 rhs =
  propertySet "RefreshOnChange"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Parameters
-- 
-- --------------------------------------------------
data Parameters_ a = Parameters__ 
type Parameters a = IDispatch (Parameters_ a)
iidParameters :: IID (Parameters ())
iidParameters = mkIID "{0002442B-0000-0000-C000-000000000046}"

queryInterface115 :: (Variant a1)
                  => GUID
                  -> Parameters a0
                  -> IO a1
queryInterface115 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef115 :: Parameters a0
          -> IO Word32
addRef115 =
  function1 "AddRef"
            []
            outWord32

release115 :: Parameters a0
           -> IO Word32
release115 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount115 :: Parameters a0
                    -> IO Word32
getTypeInfoCount115 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo115 :: (Variant a1)
               => Word32
               -> Word32
               -> Parameters a0
               -> IO a1
getTypeInfo115 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames115 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Parameters a0
                 -> IO Int32
getIDsOfNames115 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke115 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Parameters a0
          -> IO (a1, a2, Word32)
invoke115 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication381 :: (Variant a1)
                  => Parameters a0
                  -> IO a1
getApplication381 =
  propertyGet "Application"
              []
              outVariant

getCreator381 :: Parameters a0
              -> IO XlCreator
getCreator381 =
  propertyGet "Creator"
              []
              outEnum

getParent396 :: Parameters a0
             -> IO (IDispatch ())
getParent396 =
  propertyGet "Parent"
              []
              outIDispatch

add120 :: (Variant a1)
       => String
       -> a1
       -> Parameters a0
       -> IO (Parameter ())
add120 name iDataType =
  function1 "Add"
            [ inString name
            , inVariant iDataType
            ]
            outIDispatch

getCount168 :: Parameters a0
            -> IO Int32
getCount168 =
  propertyGet "Count"
              []
              outInt32

item89 :: a1
       -> Parameters a0
       -> IO (Parameter ())
item89 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault159 :: a1
              -> Parameters a0
              -> IO (Parameter ())
getDefault159 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

delete197 :: Parameters a0
          -> IO ()
delete197 =
  method0 "Delete"
          []

newEnum71 :: Parameters a0
          -> IO (IUnknown ())
newEnum71 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ODBCError
-- 
-- --------------------------------------------------
data ODBCError_ a = ODBCError__ 
type ODBCError a = IDispatch (ODBCError_ a)
iidODBCError :: IID (ODBCError ())
iidODBCError = mkIID "{0002442C-0000-0000-C000-000000000046}"

queryInterface116 :: (Variant a1)
                  => GUID
                  -> ODBCError a0
                  -> IO a1
queryInterface116 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef116 :: ODBCError a0
          -> IO Word32
addRef116 =
  function1 "AddRef"
            []
            outWord32

release116 :: ODBCError a0
           -> IO Word32
release116 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount116 :: ODBCError a0
                    -> IO Word32
getTypeInfoCount116 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo116 :: (Variant a1)
               => Word32
               -> Word32
               -> ODBCError a0
               -> IO a1
getTypeInfo116 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames116 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ODBCError a0
                 -> IO Int32
getIDsOfNames116 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke116 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ODBCError a0
          -> IO (a1, a2, Word32)
invoke116 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication382 :: (Variant a1)
                  => ODBCError a0
                  -> IO a1
getApplication382 =
  propertyGet "Application"
              []
              outVariant

getCreator382 :: ODBCError a0
              -> IO XlCreator
getCreator382 =
  propertyGet "Creator"
              []
              outEnum

getParent397 :: ODBCError a0
             -> IO (IDispatch ())
getParent397 =
  propertyGet "Parent"
              []
              outIDispatch

getSqlState1 :: ODBCError a0
             -> IO String
getSqlState1 =
  propertyGet "SqlState"
              []
              outString

getErrorString3 :: ODBCError a0
                -> IO String
getErrorString3 =
  propertyGet "ErrorString"
              []
              outString

-- --------------------------------------------------
-- 
-- dispinterface ODBCErrors
-- 
-- --------------------------------------------------
data ODBCErrors_ a = ODBCErrors__ 
type ODBCErrors a = IDispatch (ODBCErrors_ a)
iidODBCErrors :: IID (ODBCErrors ())
iidODBCErrors = mkIID "{0002442D-0000-0000-C000-000000000046}"

queryInterface117 :: (Variant a1)
                  => GUID
                  -> ODBCErrors a0
                  -> IO a1
queryInterface117 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef117 :: ODBCErrors a0
          -> IO Word32
addRef117 =
  function1 "AddRef"
            []
            outWord32

release117 :: ODBCErrors a0
           -> IO Word32
release117 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount117 :: ODBCErrors a0
                    -> IO Word32
getTypeInfoCount117 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo117 :: (Variant a1)
               => Word32
               -> Word32
               -> ODBCErrors a0
               -> IO a1
getTypeInfo117 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames117 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ODBCErrors a0
                 -> IO Int32
getIDsOfNames117 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke117 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ODBCErrors a0
          -> IO (a1, a2, Word32)
invoke117 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication383 :: (Variant a1)
                  => ODBCErrors a0
                  -> IO a1
getApplication383 =
  propertyGet "Application"
              []
              outVariant

getCreator383 :: ODBCErrors a0
              -> IO XlCreator
getCreator383 =
  propertyGet "Creator"
              []
              outEnum

getParent398 :: ODBCErrors a0
             -> IO (IDispatch ())
getParent398 =
  propertyGet "Parent"
              []
              outIDispatch

getCount169 :: ODBCErrors a0
            -> IO Int32
getCount169 =
  propertyGet "Count"
              []
              outInt32

item90 :: Int32
       -> ODBCErrors a0
       -> IO (ODBCError ())
item90 index1 =
  function1 "Item"
            [inInt32 index1]
            outIDispatch

getDefault160 :: Int32
              -> ODBCErrors a0
              -> IO (ODBCError ())
getDefault160 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

newEnum72 :: ODBCErrors a0
          -> IO (IUnknown ())
newEnum72 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Validation
-- 
-- --------------------------------------------------
data Validation_ a = Validation__ 
type Validation a = IDispatch (Validation_ a)
iidValidation :: IID (Validation ())
iidValidation = mkIID "{0002442F-0000-0000-C000-000000000046}"

queryInterface118 :: (Variant a1)
                  => GUID
                  -> Validation a0
                  -> IO a1
queryInterface118 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef118 :: Validation a0
          -> IO Word32
addRef118 =
  function1 "AddRef"
            []
            outWord32

release118 :: Validation a0
           -> IO Word32
release118 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount118 :: Validation a0
                    -> IO Word32
getTypeInfoCount118 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo118 :: (Variant a1)
               => Word32
               -> Word32
               -> Validation a0
               -> IO a1
getTypeInfo118 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames118 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Validation a0
                 -> IO Int32
getIDsOfNames118 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke118 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Validation a0
          -> IO (a1, a2, Word32)
invoke118 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication384 :: (Variant a1)
                  => Validation a0
                  -> IO a1
getApplication384 =
  propertyGet "Application"
              []
              outVariant

getCreator384 :: Validation a0
              -> IO XlCreator
getCreator384 =
  propertyGet "Creator"
              []
              outEnum

getParent399 :: Validation a0
             -> IO (IDispatch ())
getParent399 =
  propertyGet "Parent"
              []
              outIDispatch

add121 :: (Variant a1, Variant a2, Variant a3, Variant a4)
       => XlDVType
       -> a1
       -> a2
       -> a3
       -> a4
       -> Validation a0
       -> IO ()
add121 type0 alertStyle operator formula1 formula2 =
  method0 "Add"
          [ inEnum type0
          , inVariant alertStyle
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          ]

getAlertStyle0 :: Validation a0
               -> IO Int32
getAlertStyle0 =
  propertyGet "AlertStyle"
              []
              outInt32

getIgnoreBlank0 :: Validation a0
                -> IO Bool
getIgnoreBlank0 =
  propertyGet "IgnoreBlank"
              []
              outBool

setIgnoreBlank0 :: Bool
                -> Validation a0
                -> IO ()
setIgnoreBlank0 rhs =
  propertySet "IgnoreBlank"
              [inBool rhs]

getIMEMode0 :: Validation a0
            -> IO Int32
getIMEMode0 =
  propertyGet "IMEMode"
              []
              outInt32

setIMEMode0 :: Int32
            -> Validation a0
            -> IO ()
setIMEMode0 rhs =
  propertySet "IMEMode"
              [inInt32 rhs]

getInCellDropdown0 :: Validation a0
                   -> IO Bool
getInCellDropdown0 =
  propertyGet "InCellDropdown"
              []
              outBool

setInCellDropdown0 :: Bool
                   -> Validation a0
                   -> IO ()
setInCellDropdown0 rhs =
  propertySet "InCellDropdown"
              [inBool rhs]

delete198 :: Validation a0
          -> IO ()
delete198 =
  method0 "Delete"
          []

getErrorMessage0 :: Validation a0
                 -> IO String
getErrorMessage0 =
  propertyGet "ErrorMessage"
              []
              outString

setErrorMessage0 :: String
                 -> Validation a0
                 -> IO ()
setErrorMessage0 rhs =
  propertySet "ErrorMessage"
              [inString rhs]

getErrorTitle0 :: Validation a0
               -> IO String
getErrorTitle0 =
  propertyGet "ErrorTitle"
              []
              outString

setErrorTitle0 :: String
               -> Validation a0
               -> IO ()
setErrorTitle0 rhs =
  propertySet "ErrorTitle"
              [inString rhs]

getInputMessage0 :: Validation a0
                 -> IO String
getInputMessage0 =
  propertyGet "InputMessage"
              []
              outString

setInputMessage0 :: String
                 -> Validation a0
                 -> IO ()
setInputMessage0 rhs =
  propertySet "InputMessage"
              [inString rhs]

getInputTitle0 :: Validation a0
               -> IO String
getInputTitle0 =
  propertyGet "InputTitle"
              []
              outString

setInputTitle0 :: String
               -> Validation a0
               -> IO ()
setInputTitle0 rhs =
  propertySet "InputTitle"
              [inString rhs]

getFormula111 :: Validation a0
              -> IO String
getFormula111 =
  propertyGet "Formula1"
              []
              outString

getFormula211 :: Validation a0
              -> IO String
getFormula211 =
  propertyGet "Formula2"
              []
              outString

modify5 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> Validation a0
        -> IO ()
modify5 type0 alertStyle operator formula1 formula2 =
  method0 "Modify"
          [ inVariant type0
          , inVariant alertStyle
          , inVariant operator
          , inVariant formula1
          , inVariant formula2
          ]

getOperator5 :: Validation a0
             -> IO Int32
getOperator5 =
  propertyGet "Operator"
              []
              outInt32

getShowError0 :: Validation a0
              -> IO Bool
getShowError0 =
  propertyGet "ShowError"
              []
              outBool

setShowError0 :: Bool
              -> Validation a0
              -> IO ()
setShowError0 rhs =
  propertySet "ShowError"
              [inBool rhs]

getShowInput0 :: Validation a0
              -> IO Bool
getShowInput0 =
  propertyGet "ShowInput"
              []
              outBool

setShowInput0 :: Bool
              -> Validation a0
              -> IO ()
setShowInput0 rhs =
  propertySet "ShowInput"
              [inBool rhs]

getType43 :: Validation a0
          -> IO Int32
getType43 =
  propertyGet "Type"
              []
              outInt32

getValue55 :: Validation a0
           -> IO Bool
getValue55 =
  propertyGet "Value"
              []
              outBool

-- --------------------------------------------------
-- 
-- dispinterface Hyperlinks
-- 
-- --------------------------------------------------
data Hyperlinks_ a = Hyperlinks__ 
type Hyperlinks a = IDispatch (Hyperlinks_ a)
iidHyperlinks :: IID (Hyperlinks ())
iidHyperlinks = mkIID "{00024430-0000-0000-C000-000000000046}"

queryInterface119 :: (Variant a1)
                  => GUID
                  -> Hyperlinks a0
                  -> IO a1
queryInterface119 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef119 :: Hyperlinks a0
          -> IO Word32
addRef119 =
  function1 "AddRef"
            []
            outWord32

release119 :: Hyperlinks a0
           -> IO Word32
release119 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount119 :: Hyperlinks a0
                    -> IO Word32
getTypeInfoCount119 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo119 :: (Variant a1)
               => Word32
               -> Word32
               -> Hyperlinks a0
               -> IO a1
getTypeInfo119 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames119 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Hyperlinks a0
                 -> IO Int32
getIDsOfNames119 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke119 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Hyperlinks a0
          -> IO (a1, a2, Word32)
invoke119 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication385 :: (Variant a1)
                  => Hyperlinks a0
                  -> IO a1
getApplication385 =
  propertyGet "Application"
              []
              outVariant

getCreator385 :: Hyperlinks a0
              -> IO XlCreator
getCreator385 =
  propertyGet "Creator"
              []
              outEnum

getParent400 :: Hyperlinks a0
             -> IO (IDispatch ())
getParent400 =
  propertyGet "Parent"
              []
              outIDispatch

add122 :: (Variant a2, Variant a3, Variant a4)
       => IDispatch a1
       -> String
       -> a2
       -> a3
       -> a4
       -> Hyperlinks a0
       -> IO (IDispatch ())
add122 anchor address subAddress screenTip textToDisplay =
  function1 "Add"
            [ inIDispatch anchor
            , inString address
            , inVariant subAddress
            , inVariant screenTip
            , inVariant textToDisplay
            ]
            outIDispatch

getCount170 :: Hyperlinks a0
            -> IO Int32
getCount170 =
  propertyGet "Count"
              []
              outInt32

getItem75 :: a1
          -> Hyperlinks a0
          -> IO (Hyperlink ())
getItem75 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getDefault161 :: a1
              -> Hyperlinks a0
              -> IO (Hyperlink ())
getDefault161 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum90 :: Hyperlinks a0
             -> IO (IUnknown ())
getNewEnum90 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete199 :: Hyperlinks a0
          -> IO ()
delete199 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- dispinterface Hyperlink
-- 
-- --------------------------------------------------
data Hyperlink_ a = Hyperlink__ 
type Hyperlink a = IDispatch (Hyperlink_ a)
iidHyperlink :: IID (Hyperlink ())
iidHyperlink = mkIID "{00024431-0000-0000-C000-000000000046}"

queryInterface120 :: (Variant a1)
                  => GUID
                  -> Hyperlink a0
                  -> IO a1
queryInterface120 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef120 :: Hyperlink a0
          -> IO Word32
addRef120 =
  function1 "AddRef"
            []
            outWord32

release120 :: Hyperlink a0
           -> IO Word32
release120 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount120 :: Hyperlink a0
                    -> IO Word32
getTypeInfoCount120 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo120 :: (Variant a1)
               => Word32
               -> Word32
               -> Hyperlink a0
               -> IO a1
getTypeInfo120 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames120 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Hyperlink a0
                 -> IO Int32
getIDsOfNames120 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke120 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Hyperlink a0
          -> IO (a1, a2, Word32)
invoke120 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication386 :: (Variant a1)
                  => Hyperlink a0
                  -> IO a1
getApplication386 =
  propertyGet "Application"
              []
              outVariant

getCreator386 :: Hyperlink a0
              -> IO XlCreator
getCreator386 =
  propertyGet "Creator"
              []
              outEnum

getParent401 :: Hyperlink a0
             -> IO (IDispatch ())
getParent401 =
  propertyGet "Parent"
              []
              outIDispatch

getName117 :: Hyperlink a0
           -> IO String
getName117 =
  propertyGet "Name"
              []
              outString

getRange14 :: Hyperlink a0
           -> IO (Range ())
getRange14 =
  propertyGet "Range"
              []
              outIDispatch

getShape3 :: Hyperlink a0
          -> IO (Shape ())
getShape3 =
  propertyGet "Shape"
              []
              outIUnknown

getSubAddress0 :: Hyperlink a0
               -> IO String
getSubAddress0 =
  propertyGet "SubAddress"
              []
              outString

setSubAddress0 :: String
               -> Hyperlink a0
               -> IO ()
setSubAddress0 rhs =
  propertySet "SubAddress"
              [inString rhs]

getAddress2 :: Hyperlink a0
            -> IO String
getAddress2 =
  propertyGet "Address"
              []
              outString

setAddress0 :: String
            -> Hyperlink a0
            -> IO ()
setAddress0 rhs =
  propertySet "Address"
              [inString rhs]

getType44 :: Hyperlink a0
          -> IO Int32
getType44 =
  propertyGet "Type"
              []
              outInt32

addToFavorites1 :: Hyperlink a0
                -> IO ()
addToFavorites1 =
  method0 "AddToFavorites"
          []

delete200 :: Hyperlink a0
          -> IO ()
delete200 =
  method0 "Delete"
          []

follow0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> Hyperlink a0
        -> IO ()
follow0 newWindow2 addHistory extraInfo method headerInfo =
  method0 "Follow"
          [ inVariant newWindow2
          , inVariant addHistory
          , inVariant extraInfo
          , inVariant method
          , inVariant headerInfo
          ]

getEmailSubject0 :: Hyperlink a0
                 -> IO String
getEmailSubject0 =
  propertyGet "EmailSubject"
              []
              outString

setEmailSubject0 :: String
                 -> Hyperlink a0
                 -> IO ()
setEmailSubject0 rhs =
  propertySet "EmailSubject"
              [inString rhs]

getScreenTip0 :: Hyperlink a0
              -> IO String
getScreenTip0 =
  propertyGet "ScreenTip"
              []
              outString

setScreenTip0 :: String
              -> Hyperlink a0
              -> IO ()
setScreenTip0 rhs =
  propertySet "ScreenTip"
              [inString rhs]

getTextToDisplay0 :: Hyperlink a0
                  -> IO String
getTextToDisplay0 =
  propertyGet "TextToDisplay"
              []
              outString

setTextToDisplay0 :: String
                  -> Hyperlink a0
                  -> IO ()
setTextToDisplay0 rhs =
  propertySet "TextToDisplay"
              [inString rhs]

createNewDocument0 :: String
                   -> Bool
                   -> Bool
                   -> Hyperlink a0
                   -> IO ()
createNewDocument0 filename editNow overwrite =
  method0 "CreateNewDocument"
          [ inString filename
          , inBool editNow
          , inBool overwrite
          ]

-- --------------------------------------------------
-- 
-- dispinterface AutoFilter
-- 
-- --------------------------------------------------
data AutoFilter_ a = AutoFilter__ 
type AutoFilter a = IDispatch (AutoFilter_ a)
iidAutoFilter :: IID (AutoFilter ())
iidAutoFilter = mkIID "{00024432-0000-0000-C000-000000000046}"

queryInterface121 :: (Variant a1)
                  => GUID
                  -> AutoFilter a0
                  -> IO a1
queryInterface121 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef121 :: AutoFilter a0
          -> IO Word32
addRef121 =
  function1 "AddRef"
            []
            outWord32

release121 :: AutoFilter a0
           -> IO Word32
release121 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount121 :: AutoFilter a0
                    -> IO Word32
getTypeInfoCount121 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo121 :: (Variant a1)
               => Word32
               -> Word32
               -> AutoFilter a0
               -> IO a1
getTypeInfo121 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames121 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AutoFilter a0
                 -> IO Int32
getIDsOfNames121 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke121 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AutoFilter a0
          -> IO (a1, a2, Word32)
invoke121 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication387 :: (Variant a1)
                  => AutoFilter a0
                  -> IO a1
getApplication387 =
  propertyGet "Application"
              []
              outVariant

getCreator387 :: AutoFilter a0
              -> IO XlCreator
getCreator387 =
  propertyGet "Creator"
              []
              outEnum

getParent402 :: AutoFilter a0
             -> IO (IDispatch ())
getParent402 =
  propertyGet "Parent"
              []
              outIDispatch

getRange15 :: AutoFilter a0
           -> IO (Range ())
getRange15 =
  propertyGet "Range"
              []
              outIDispatch

getFilters0 :: AutoFilter a0
            -> IO (Filters ())
getFilters0 =
  propertyGet "Filters"
              []
              outIUnknown

getFilterMode1 :: AutoFilter a0
               -> IO Bool
getFilterMode1 =
  propertyGet "FilterMode"
              []
              outBool

getSort6 :: AutoFilter a0
         -> IO (Sort ())
getSort6 =
  propertyGet "Sort"
              []
              outIUnknown

applyFilter0 :: AutoFilter a0
             -> IO ()
applyFilter0 =
  method0 "ApplyFilter"
          []

showAllData1 :: AutoFilter a0
             -> IO ()
showAllData1 =
  method0 "ShowAllData"
          []

-- --------------------------------------------------
-- 
-- dispinterface Filters
-- 
-- --------------------------------------------------
data Filters_ a = Filters__ 
type Filters a = IDispatch (Filters_ a)
iidFilters :: IID (Filters ())
iidFilters = mkIID "{00024433-0000-0000-C000-000000000046}"

queryInterface122 :: (Variant a1)
                  => GUID
                  -> Filters a0
                  -> IO a1
queryInterface122 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef122 :: Filters a0
          -> IO Word32
addRef122 =
  function1 "AddRef"
            []
            outWord32

release122 :: Filters a0
           -> IO Word32
release122 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount122 :: Filters a0
                    -> IO Word32
getTypeInfoCount122 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo122 :: (Variant a1)
               => Word32
               -> Word32
               -> Filters a0
               -> IO a1
getTypeInfo122 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames122 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Filters a0
                 -> IO Int32
getIDsOfNames122 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke122 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Filters a0
          -> IO (a1, a2, Word32)
invoke122 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication388 :: (Variant a1)
                  => Filters a0
                  -> IO a1
getApplication388 =
  propertyGet "Application"
              []
              outVariant

getCreator388 :: Filters a0
              -> IO XlCreator
getCreator388 =
  propertyGet "Creator"
              []
              outEnum

getParent403 :: Filters a0
             -> IO (IDispatch ())
getParent403 =
  propertyGet "Parent"
              []
              outIDispatch

getCount171 :: Filters a0
            -> IO Int32
getCount171 =
  propertyGet "Count"
              []
              outInt32

getDefault162 :: Int32
              -> Filters a0
              -> IO (Filter ())
getDefault162 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIUnknown

getItem76 :: Int32
          -> Filters a0
          -> IO (Filter ())
getItem76 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIUnknown

getNewEnum91 :: Filters a0
             -> IO (IUnknown ())
getNewEnum91 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Filter
-- 
-- --------------------------------------------------
data Filter_ a = Filter__ 
type Filter a = IDispatch (Filter_ a)
iidFilter :: IID (Filter ())
iidFilter = mkIID "{00024434-0000-0000-C000-000000000046}"

queryInterface123 :: (Variant a1)
                  => GUID
                  -> Filter a0
                  -> IO a1
queryInterface123 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef123 :: Filter a0
          -> IO Word32
addRef123 =
  function1 "AddRef"
            []
            outWord32

release123 :: Filter a0
           -> IO Word32
release123 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount123 :: Filter a0
                    -> IO Word32
getTypeInfoCount123 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo123 :: (Variant a1)
               => Word32
               -> Word32
               -> Filter a0
               -> IO a1
getTypeInfo123 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames123 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Filter a0
                 -> IO Int32
getIDsOfNames123 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke123 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Filter a0
          -> IO (a1, a2, Word32)
invoke123 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication389 :: (Variant a1)
                  => Filter a0
                  -> IO a1
getApplication389 =
  propertyGet "Application"
              []
              outVariant

getCreator389 :: Filter a0
              -> IO XlCreator
getCreator389 =
  propertyGet "Creator"
              []
              outEnum

getParent404 :: Filter a0
             -> IO (IDispatch ())
getParent404 =
  propertyGet "Parent"
              []
              outIDispatch

getOn0 :: Filter a0
       -> IO Bool
getOn0 =
  propertyGet "On"
              []
              outBool

getCriteria10 :: Filter a0
              -> IO a1
getCriteria10 =
  propertyGet "Criteria1"
              []
              outVariant

getOperator6 :: Filter a0
             -> IO XlAutoFilterOperator
getOperator6 =
  propertyGet "_Operator"
              []
              outEnum

getCriteria20 :: Filter a0
              -> IO a1
getCriteria20 =
  propertyGet "Criteria2"
              []
              outVariant

getOperator7 :: Filter a0
             -> IO XlAutoFilterOperator
getOperator7 =
  propertyGet "Operator"
              []
              outEnum

setOperator1 :: XlAutoFilterOperator
             -> Filter a0
             -> IO ()
setOperator1 rhs =
  propertySet "Operator"
              [inEnum rhs]

getCount172 :: Filter a0
            -> IO Int32
getCount172 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface AutoCorrect
-- 
-- --------------------------------------------------
data AutoCorrect_ a = AutoCorrect__ 
type AutoCorrect a = IDispatch (AutoCorrect_ a)
iidAutoCorrect :: IID (AutoCorrect ())
iidAutoCorrect = mkIID "{000208D4-0000-0000-C000-000000000046}"

queryInterface124 :: (Variant a1)
                  => GUID
                  -> AutoCorrect a0
                  -> IO a1
queryInterface124 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef124 :: AutoCorrect a0
          -> IO Word32
addRef124 =
  function1 "AddRef"
            []
            outWord32

release124 :: AutoCorrect a0
           -> IO Word32
release124 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount124 :: AutoCorrect a0
                    -> IO Word32
getTypeInfoCount124 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo124 :: (Variant a1)
               => Word32
               -> Word32
               -> AutoCorrect a0
               -> IO a1
getTypeInfo124 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames124 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AutoCorrect a0
                 -> IO Int32
getIDsOfNames124 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke124 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AutoCorrect a0
          -> IO (a1, a2, Word32)
invoke124 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication390 :: (Variant a1)
                  => AutoCorrect a0
                  -> IO a1
getApplication390 =
  propertyGet "Application"
              []
              outVariant

getCreator390 :: AutoCorrect a0
              -> IO XlCreator
getCreator390 =
  propertyGet "Creator"
              []
              outEnum

getParent405 :: AutoCorrect a0
             -> IO (IDispatch ())
getParent405 =
  propertyGet "Parent"
              []
              outIDispatch

addReplacement0 :: String
                -> String
                -> AutoCorrect a0
                -> IO a1
addReplacement0 what replacement =
  function1 "AddReplacement"
            [ inString what
            , inString replacement
            ]
            outVariant

getCapitalizeNamesOfDays0 :: AutoCorrect a0
                          -> IO Bool
getCapitalizeNamesOfDays0 =
  propertyGet "CapitalizeNamesOfDays"
              []
              outBool

setCapitalizeNamesOfDays0 :: Bool
                          -> AutoCorrect a0
                          -> IO ()
setCapitalizeNamesOfDays0 rhs =
  propertySet "CapitalizeNamesOfDays"
              [inBool rhs]

deleteReplacement0 :: String
                   -> AutoCorrect a0
                   -> IO a1
deleteReplacement0 what =
  function1 "DeleteReplacement"
            [inString what]
            outVariant

getReplacementList0 :: (Variant a2)
                    => a2
                    -> AutoCorrect a0
                    -> IO a1
getReplacementList0 index1 =
  propertyGet "ReplacementList"
              [inVariant index1]
              outVariant

setReplacementList0 :: (Variant a1)
                    => a1
                    -> a2
                    -> AutoCorrect a0
                    -> IO ()
setReplacementList0 index1 rhs =
  propertySet "ReplacementList"
              [ inVariant index1
              , inVariant rhs
              ]

getReplaceText0 :: AutoCorrect a0
                -> IO Bool
getReplaceText0 =
  propertyGet "ReplaceText"
              []
              outBool

setReplaceText0 :: Bool
                -> AutoCorrect a0
                -> IO ()
setReplaceText0 rhs =
  propertySet "ReplaceText"
              [inBool rhs]

getTwoInitialCapitals0 :: AutoCorrect a0
                       -> IO Bool
getTwoInitialCapitals0 =
  propertyGet "TwoInitialCapitals"
              []
              outBool

setTwoInitialCapitals0 :: Bool
                       -> AutoCorrect a0
                       -> IO ()
setTwoInitialCapitals0 rhs =
  propertySet "TwoInitialCapitals"
              [inBool rhs]

getCorrectSentenceCap0 :: AutoCorrect a0
                       -> IO Bool
getCorrectSentenceCap0 =
  propertyGet "CorrectSentenceCap"
              []
              outBool

setCorrectSentenceCap0 :: Bool
                       -> AutoCorrect a0
                       -> IO ()
setCorrectSentenceCap0 rhs =
  propertySet "CorrectSentenceCap"
              [inBool rhs]

getCorrectCapsLock0 :: AutoCorrect a0
                    -> IO Bool
getCorrectCapsLock0 =
  propertyGet "CorrectCapsLock"
              []
              outBool

setCorrectCapsLock0 :: Bool
                    -> AutoCorrect a0
                    -> IO ()
setCorrectCapsLock0 rhs =
  propertySet "CorrectCapsLock"
              [inBool rhs]

getDisplayAutoCorrectOptions0 :: AutoCorrect a0
                              -> IO Bool
getDisplayAutoCorrectOptions0 =
  propertyGet "DisplayAutoCorrectOptions"
              []
              outBool

setDisplayAutoCorrectOptions0 :: Bool
                              -> AutoCorrect a0
                              -> IO ()
setDisplayAutoCorrectOptions0 rhs =
  propertySet "DisplayAutoCorrectOptions"
              [inBool rhs]

getAutoExpandListRange0 :: AutoCorrect a0
                        -> IO Bool
getAutoExpandListRange0 =
  propertyGet "AutoExpandListRange"
              []
              outBool

setAutoExpandListRange0 :: Bool
                        -> AutoCorrect a0
                        -> IO ()
setAutoExpandListRange0 rhs =
  propertySet "AutoExpandListRange"
              [inBool rhs]

getAutoFillFormulasInLists0 :: AutoCorrect a0
                            -> IO Bool
getAutoFillFormulasInLists0 =
  propertyGet "AutoFillFormulasInLists"
              []
              outBool

setAutoFillFormulasInLists0 :: Bool
                            -> AutoCorrect a0
                            -> IO ()
setAutoFillFormulasInLists0 rhs =
  propertySet "AutoFillFormulasInLists"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Border
-- 
-- --------------------------------------------------
data Border_ a = Border__ 
type Border a = IDispatch (Border_ a)
iidBorder :: IID (Border ())
iidBorder = mkIID "{00020854-0000-0000-C000-000000000046}"

queryInterface125 :: (Variant a1)
                  => GUID
                  -> Border a0
                  -> IO a1
queryInterface125 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef125 :: Border a0
          -> IO Word32
addRef125 =
  function1 "AddRef"
            []
            outWord32

release125 :: Border a0
           -> IO Word32
release125 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount125 :: Border a0
                    -> IO Word32
getTypeInfoCount125 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo125 :: (Variant a1)
               => Word32
               -> Word32
               -> Border a0
               -> IO a1
getTypeInfo125 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames125 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Border a0
                 -> IO Int32
getIDsOfNames125 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke125 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Border a0
          -> IO (a1, a2, Word32)
invoke125 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication391 :: (Variant a1)
                  => Border a0
                  -> IO a1
getApplication391 =
  propertyGet "Application"
              []
              outVariant

getCreator391 :: Border a0
              -> IO XlCreator
getCreator391 =
  propertyGet "Creator"
              []
              outEnum

getParent406 :: Border a0
             -> IO (IDispatch ())
getParent406 =
  propertyGet "Parent"
              []
              outIDispatch

getColor8 :: Border a0
          -> IO a1
getColor8 =
  propertyGet "Color"
              []
              outVariant

setColor8 :: a1
          -> Border a0
          -> IO ()
setColor8 rhs =
  propertySet "Color"
              [inVariant rhs]

getColorIndex7 :: Border a0
               -> IO a1
getColorIndex7 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex7 :: a1
               -> Border a0
               -> IO ()
setColorIndex7 rhs =
  propertySet "ColorIndex"
              [inVariant rhs]

getLineStyle2 :: Border a0
              -> IO a1
getLineStyle2 =
  propertyGet "LineStyle"
              []
              outVariant

setLineStyle2 :: a1
              -> Border a0
              -> IO ()
setLineStyle2 rhs =
  propertySet "LineStyle"
              [inVariant rhs]

getWeight3 :: Border a0
           -> IO a1
getWeight3 =
  propertyGet "Weight"
              []
              outVariant

setWeight3 :: a1
           -> Border a0
           -> IO ()
setWeight3 rhs =
  propertySet "Weight"
              [inVariant rhs]

getThemeColor8 :: Border a0
               -> IO a1
getThemeColor8 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor8 :: a1
               -> Border a0
               -> IO ()
setThemeColor8 rhs =
  propertySet "ThemeColor"
              [inVariant rhs]

getTintAndShade9 :: Border a0
                 -> IO a1
getTintAndShade9 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade9 :: a1
                 -> Border a0
                 -> IO ()
setTintAndShade9 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface Interior
-- 
-- --------------------------------------------------
data Interior_ a = Interior__ 
type Interior a = IDispatch (Interior_ a)
iidInterior :: IID (Interior ())
iidInterior = mkIID "{00020870-0000-0000-C000-000000000046}"

queryInterface126 :: (Variant a1)
                  => GUID
                  -> Interior a0
                  -> IO a1
queryInterface126 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef126 :: Interior a0
          -> IO Word32
addRef126 =
  function1 "AddRef"
            []
            outWord32

release126 :: Interior a0
           -> IO Word32
release126 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount126 :: Interior a0
                    -> IO Word32
getTypeInfoCount126 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo126 :: (Variant a1)
               => Word32
               -> Word32
               -> Interior a0
               -> IO a1
getTypeInfo126 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames126 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Interior a0
                 -> IO Int32
getIDsOfNames126 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke126 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Interior a0
          -> IO (a1, a2, Word32)
invoke126 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication392 :: (Variant a1)
                  => Interior a0
                  -> IO a1
getApplication392 =
  propertyGet "Application"
              []
              outVariant

getCreator392 :: Interior a0
              -> IO XlCreator
getCreator392 =
  propertyGet "Creator"
              []
              outEnum

getParent407 :: Interior a0
             -> IO (IDispatch ())
getParent407 =
  propertyGet "Parent"
              []
              outIDispatch

getColor9 :: Interior a0
          -> IO a1
getColor9 =
  propertyGet "Color"
              []
              outVariant

setColor9 :: a1
          -> Interior a0
          -> IO ()
setColor9 rhs =
  propertySet "Color"
              [inVariant rhs]

getColorIndex8 :: Interior a0
               -> IO a1
getColorIndex8 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex8 :: a1
               -> Interior a0
               -> IO ()
setColorIndex8 rhs =
  propertySet "ColorIndex"
              [inVariant rhs]

getInvertIfNegative3 :: Interior a0
                     -> IO a1
getInvertIfNegative3 =
  propertyGet "InvertIfNegative"
              []
              outVariant

setInvertIfNegative3 :: a1
                     -> Interior a0
                     -> IO ()
setInvertIfNegative3 rhs =
  propertySet "InvertIfNegative"
              [inVariant rhs]

getPattern3 :: Interior a0
            -> IO a1
getPattern3 =
  propertyGet "Pattern"
              []
              outVariant

setPattern1 :: a1
            -> Interior a0
            -> IO ()
setPattern1 rhs =
  propertySet "Pattern"
              [inVariant rhs]

getPatternColor0 :: Interior a0
                 -> IO a1
getPatternColor0 =
  propertyGet "PatternColor"
              []
              outVariant

setPatternColor0 :: a1
                 -> Interior a0
                 -> IO ()
setPatternColor0 rhs =
  propertySet "PatternColor"
              [inVariant rhs]

getPatternColorIndex0 :: Interior a0
                      -> IO a1
getPatternColorIndex0 =
  propertyGet "PatternColorIndex"
              []
              outVariant

setPatternColorIndex0 :: a1
                      -> Interior a0
                      -> IO ()
setPatternColorIndex0 rhs =
  propertySet "PatternColorIndex"
              [inVariant rhs]

getThemeColor9 :: Interior a0
               -> IO a1
getThemeColor9 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor9 :: a1
               -> Interior a0
               -> IO ()
setThemeColor9 rhs =
  propertySet "ThemeColor"
              [inVariant rhs]

getTintAndShade10 :: Interior a0
                  -> IO a1
getTintAndShade10 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade10 :: a1
                  -> Interior a0
                  -> IO ()
setTintAndShade10 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

getPatternThemeColor0 :: Interior a0
                      -> IO a1
getPatternThemeColor0 =
  propertyGet "PatternThemeColor"
              []
              outVariant

setPatternThemeColor0 :: a1
                      -> Interior a0
                      -> IO ()
setPatternThemeColor0 rhs =
  propertySet "PatternThemeColor"
              [inVariant rhs]

getPatternTintAndShade0 :: Interior a0
                        -> IO a1
getPatternTintAndShade0 =
  propertyGet "PatternTintAndShade"
              []
              outVariant

setPatternTintAndShade0 :: a1
                        -> Interior a0
                        -> IO ()
setPatternTintAndShade0 rhs =
  propertySet "PatternTintAndShade"
              [inVariant rhs]

getGradient0 :: Interior a0
             -> IO (IDispatch ())
getGradient0 =
  propertyGet "Gradient"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface ChartFillFormat
-- 
-- --------------------------------------------------
data ChartFillFormat_ a = ChartFillFormat__ 
type ChartFillFormat a = IDispatch (ChartFillFormat_ a)
iidChartFillFormat :: IID (ChartFillFormat ())
iidChartFillFormat = mkIID "{00024435-0000-0000-C000-000000000046}"

queryInterface127 :: (Variant a1)
                  => GUID
                  -> ChartFillFormat a0
                  -> IO a1
queryInterface127 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef127 :: ChartFillFormat a0
          -> IO Word32
addRef127 =
  function1 "AddRef"
            []
            outWord32

release127 :: ChartFillFormat a0
           -> IO Word32
release127 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount127 :: ChartFillFormat a0
                    -> IO Word32
getTypeInfoCount127 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo127 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartFillFormat a0
               -> IO a1
getTypeInfo127 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames127 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartFillFormat a0
                 -> IO Int32
getIDsOfNames127 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke127 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartFillFormat a0
          -> IO (a1, a2, Word32)
invoke127 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication393 :: (Variant a1)
                  => ChartFillFormat a0
                  -> IO a1
getApplication393 =
  propertyGet "Application"
              []
              outVariant

getCreator393 :: ChartFillFormat a0
              -> IO XlCreator
getCreator393 =
  propertyGet "Creator"
              []
              outEnum

getParent408 :: ChartFillFormat a0
             -> IO (IDispatch ())
getParent408 =
  propertyGet "Parent"
              []
              outIDispatch

oneColorGradient1 :: (Variant a1)
                  => a1
                  -> Int32
                  -> Float
                  -> ChartFillFormat a0
                  -> IO ()
oneColorGradient1 style variant degree =
  method0 "OneColorGradient"
          [ inVariant style
          , inInt32 variant
          , inFloat degree
          ]

twoColorGradient1 :: (Variant a1)
                  => a1
                  -> Int32
                  -> ChartFillFormat a0
                  -> IO ()
twoColorGradient1 style variant =
  method0 "TwoColorGradient"
          [ inVariant style
          , inInt32 variant
          ]

presetTextured1 :: (Variant a1)
                => a1
                -> ChartFillFormat a0
                -> IO ()
presetTextured1 presetTexture =
  method0 "PresetTextured"
          [inVariant presetTexture]

solid1 :: ChartFillFormat a0
       -> IO ()
solid1 =
  method0 "Solid"
          []

patterned1 :: (Variant a1)
           => a1
           -> ChartFillFormat a0
           -> IO ()
patterned1 pattern =
  method0 "Patterned"
          [inVariant pattern]

userPicture1 :: (Variant a1, Variant a2, Variant a3, Variant a4)
             => a1
             -> a2
             -> a3
             -> a4
             -> ChartFillFormat a0
             -> IO ()
userPicture1 pictureFile pictureFormat pictureStackUnit picturePlacement =
  method0 "UserPicture"
          [ inVariant pictureFile
          , inVariant pictureFormat
          , inVariant pictureStackUnit
          , inVariant picturePlacement
          ]

userTextured1 :: String
              -> ChartFillFormat a0
              -> IO ()
userTextured1 textureFile =
  method0 "UserTextured"
          [inString textureFile]

presetGradient1 :: (Variant a1, Variant a2)
                => a1
                -> Int32
                -> a2
                -> ChartFillFormat a0
                -> IO ()
presetGradient1 style variant presetGradientType =
  method0 "PresetGradient"
          [ inVariant style
          , inInt32 variant
          , inVariant presetGradientType
          ]

getBackColor2 :: ChartFillFormat a0
              -> IO (ChartColorFormat ())
getBackColor2 =
  propertyGet "BackColor"
              []
              outIUnknown

getForeColor3 :: ChartFillFormat a0
              -> IO (ChartColorFormat ())
getForeColor3 =
  propertyGet "ForeColor"
              []
              outIUnknown

getGradientColorType1 :: (Variant a1)
                      => ChartFillFormat a0
                      -> IO a1
getGradientColorType1 =
  propertyGet "GradientColorType"
              []
              outVariant

getGradientDegree1 :: ChartFillFormat a0
                   -> IO Float
getGradientDegree1 =
  propertyGet "GradientDegree"
              []
              outFloat

getGradientStyle1 :: (Variant a1)
                  => ChartFillFormat a0
                  -> IO a1
getGradientStyle1 =
  propertyGet "GradientStyle"
              []
              outVariant

getGradientVariant1 :: ChartFillFormat a0
                    -> IO Int32
getGradientVariant1 =
  propertyGet "GradientVariant"
              []
              outInt32

getPattern4 :: (Variant a1)
            => ChartFillFormat a0
            -> IO a1
getPattern4 =
  propertyGet "Pattern"
              []
              outVariant

getPresetGradientType1 :: (Variant a1)
                       => ChartFillFormat a0
                       -> IO a1
getPresetGradientType1 =
  propertyGet "PresetGradientType"
              []
              outVariant

getPresetTexture1 :: (Variant a1)
                  => ChartFillFormat a0
                  -> IO a1
getPresetTexture1 =
  propertyGet "PresetTexture"
              []
              outVariant

getTextureName1 :: ChartFillFormat a0
                -> IO String
getTextureName1 =
  propertyGet "TextureName"
              []
              outString

getTextureType1 :: (Variant a1)
                => ChartFillFormat a0
                -> IO a1
getTextureType1 =
  propertyGet "TextureType"
              []
              outVariant

getType45 :: (Variant a1)
          => ChartFillFormat a0
          -> IO a1
getType45 =
  propertyGet "Type"
              []
              outVariant

getVisible116 :: (Variant a1)
              => ChartFillFormat a0
              -> IO a1
getVisible116 =
  propertyGet "Visible"
              []
              outVariant

setVisible116 :: (Variant a1)
              => a1
              -> ChartFillFormat a0
              -> IO ()
setVisible116 rhs =
  propertySet "Visible"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface ChartColorFormat
-- 
-- --------------------------------------------------
data ChartColorFormat_ a = ChartColorFormat__ 
type ChartColorFormat a = IDispatch (ChartColorFormat_ a)
iidChartColorFormat :: IID (ChartColorFormat ())
iidChartColorFormat =
  mkIID "{00024436-0000-0000-C000-000000000046}"

queryInterface128 :: (Variant a1)
                  => GUID
                  -> ChartColorFormat a0
                  -> IO a1
queryInterface128 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef128 :: ChartColorFormat a0
          -> IO Word32
addRef128 =
  function1 "AddRef"
            []
            outWord32

release128 :: ChartColorFormat a0
           -> IO Word32
release128 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount128 :: ChartColorFormat a0
                    -> IO Word32
getTypeInfoCount128 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo128 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartColorFormat a0
               -> IO a1
getTypeInfo128 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames128 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartColorFormat a0
                 -> IO Int32
getIDsOfNames128 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke128 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartColorFormat a0
          -> IO (a1, a2, Word32)
invoke128 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication394 :: (Variant a1)
                  => ChartColorFormat a0
                  -> IO a1
getApplication394 =
  propertyGet "Application"
              []
              outVariant

getCreator394 :: ChartColorFormat a0
              -> IO XlCreator
getCreator394 =
  propertyGet "Creator"
              []
              outEnum

getParent409 :: ChartColorFormat a0
             -> IO (IDispatch ())
getParent409 =
  propertyGet "Parent"
              []
              outIDispatch

getSchemeColor1 :: ChartColorFormat a0
                -> IO Int32
getSchemeColor1 =
  propertyGet "SchemeColor"
              []
              outInt32

setSchemeColor1 :: Int32
                -> ChartColorFormat a0
                -> IO ()
setSchemeColor1 rhs =
  propertySet "SchemeColor"
              [inInt32 rhs]

getRGB1 :: ChartColorFormat a0
        -> IO Int32
getRGB1 =
  propertyGet "RGB"
              []
              outInt32

getDefault163 :: ChartColorFormat a0
              -> IO Int32
getDefault163 =
  propertyGet "_Default"
              []
              outInt32

getType46 :: ChartColorFormat a0
          -> IO Int32
getType46 =
  propertyGet "Type"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface Axis
-- 
-- --------------------------------------------------
data Axis_ a = Axis__ 
type Axis a = IDispatch (Axis_ a)
iidAxis :: IID (Axis ())
iidAxis = mkIID "{00020848-0000-0000-C000-000000000046}"

queryInterface129 :: (Variant a1)
                  => GUID
                  -> Axis a0
                  -> IO a1
queryInterface129 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef129 :: Axis a0
          -> IO Word32
addRef129 =
  function1 "AddRef"
            []
            outWord32

release129 :: Axis a0
           -> IO Word32
release129 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount129 :: Axis a0
                    -> IO Word32
getTypeInfoCount129 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo129 :: (Variant a1)
               => Word32
               -> Word32
               -> Axis a0
               -> IO a1
getTypeInfo129 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames129 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Axis a0
                 -> IO Int32
getIDsOfNames129 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke129 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Axis a0
          -> IO (a1, a2, Word32)
invoke129 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication395 :: (Variant a1)
                  => Axis a0
                  -> IO a1
getApplication395 =
  propertyGet "Application"
              []
              outVariant

getCreator395 :: Axis a0
              -> IO XlCreator
getCreator395 =
  propertyGet "Creator"
              []
              outEnum

getParent410 :: Axis a0
             -> IO (IDispatch ())
getParent410 =
  propertyGet "Parent"
              []
              outIDispatch

getAxisBetweenCategories0 :: Axis a0
                          -> IO Bool
getAxisBetweenCategories0 =
  propertyGet "AxisBetweenCategories"
              []
              outBool

setAxisBetweenCategories0 :: Bool
                          -> Axis a0
                          -> IO ()
setAxisBetweenCategories0 rhs =
  propertySet "AxisBetweenCategories"
              [inBool rhs]

getAxisGroup2 :: Axis a0
              -> IO XlAxisGroup
getAxisGroup2 =
  propertyGet "AxisGroup"
              []
              outEnum

getAxisTitle0 :: Axis a0
              -> IO (AxisTitle ())
getAxisTitle0 =
  propertyGet "AxisTitle"
              []
              outIUnknown

getBorder74 :: Axis a0
            -> IO (Border ())
getBorder74 =
  propertyGet "Border"
              []
              outIDispatch

getCategoryNames0 :: Axis a0
                  -> IO a1
getCategoryNames0 =
  propertyGet "CategoryNames"
              []
              outVariant

setCategoryNames0 :: a1
                  -> Axis a0
                  -> IO ()
setCategoryNames0 rhs =
  propertySet "CategoryNames"
              [inVariant rhs]

getCrosses0 :: Axis a0
            -> IO XlAxisCrosses
getCrosses0 =
  propertyGet "Crosses"
              []
              outEnum

setCrosses0 :: XlAxisCrosses
            -> Axis a0
            -> IO ()
setCrosses0 rhs =
  propertySet "Crosses"
              [inEnum rhs]

getCrossesAt0 :: Axis a0
              -> IO Double
getCrossesAt0 =
  propertyGet "CrossesAt"
              []
              outDouble

setCrossesAt0 :: Double
              -> Axis a0
              -> IO ()
setCrossesAt0 rhs =
  propertySet "CrossesAt"
              [inDouble rhs]

delete201 :: Axis a0
          -> IO a1
delete201 =
  function1 "Delete"
            []
            outVariant

getHasMajorGridlines0 :: Axis a0
                      -> IO Bool
getHasMajorGridlines0 =
  propertyGet "HasMajorGridlines"
              []
              outBool

setHasMajorGridlines0 :: Bool
                      -> Axis a0
                      -> IO ()
setHasMajorGridlines0 rhs =
  propertySet "HasMajorGridlines"
              [inBool rhs]

getHasMinorGridlines0 :: Axis a0
                      -> IO Bool
getHasMinorGridlines0 =
  propertyGet "HasMinorGridlines"
              []
              outBool

setHasMinorGridlines0 :: Bool
                      -> Axis a0
                      -> IO ()
setHasMinorGridlines0 rhs =
  propertySet "HasMinorGridlines"
              [inBool rhs]

getHasTitle1 :: Axis a0
             -> IO Bool
getHasTitle1 =
  propertyGet "HasTitle"
              []
              outBool

setHasTitle1 :: Bool
             -> Axis a0
             -> IO ()
setHasTitle1 rhs =
  propertySet "HasTitle"
              [inBool rhs]

getMajorGridlines0 :: Axis a0
                   -> IO (Gridlines ())
getMajorGridlines0 =
  propertyGet "MajorGridlines"
              []
              outIUnknown

getMajorTickMark0 :: Axis a0
                  -> IO XlTickMark
getMajorTickMark0 =
  propertyGet "MajorTickMark"
              []
              outEnum

setMajorTickMark0 :: XlTickMark
                  -> Axis a0
                  -> IO ()
setMajorTickMark0 rhs =
  propertySet "MajorTickMark"
              [inEnum rhs]

getMajorUnit0 :: Axis a0
              -> IO Double
getMajorUnit0 =
  propertyGet "MajorUnit"
              []
              outDouble

setMajorUnit0 :: Double
              -> Axis a0
              -> IO ()
setMajorUnit0 rhs =
  propertySet "MajorUnit"
              [inDouble rhs]

getMajorUnitIsAuto0 :: Axis a0
                    -> IO Bool
getMajorUnitIsAuto0 =
  propertyGet "MajorUnitIsAuto"
              []
              outBool

setMajorUnitIsAuto0 :: Bool
                    -> Axis a0
                    -> IO ()
setMajorUnitIsAuto0 rhs =
  propertySet "MajorUnitIsAuto"
              [inBool rhs]

getMaximumScale0 :: Axis a0
                 -> IO Double
getMaximumScale0 =
  propertyGet "MaximumScale"
              []
              outDouble

setMaximumScale0 :: Double
                 -> Axis a0
                 -> IO ()
setMaximumScale0 rhs =
  propertySet "MaximumScale"
              [inDouble rhs]

getMaximumScaleIsAuto0 :: Axis a0
                       -> IO Bool
getMaximumScaleIsAuto0 =
  propertyGet "MaximumScaleIsAuto"
              []
              outBool

setMaximumScaleIsAuto0 :: Bool
                       -> Axis a0
                       -> IO ()
setMaximumScaleIsAuto0 rhs =
  propertySet "MaximumScaleIsAuto"
              [inBool rhs]

getMinimumScale0 :: Axis a0
                 -> IO Double
getMinimumScale0 =
  propertyGet "MinimumScale"
              []
              outDouble

setMinimumScale0 :: Double
                 -> Axis a0
                 -> IO ()
setMinimumScale0 rhs =
  propertySet "MinimumScale"
              [inDouble rhs]

getMinimumScaleIsAuto0 :: Axis a0
                       -> IO Bool
getMinimumScaleIsAuto0 =
  propertyGet "MinimumScaleIsAuto"
              []
              outBool

setMinimumScaleIsAuto0 :: Bool
                       -> Axis a0
                       -> IO ()
setMinimumScaleIsAuto0 rhs =
  propertySet "MinimumScaleIsAuto"
              [inBool rhs]

getMinorGridlines0 :: Axis a0
                   -> IO (Gridlines ())
getMinorGridlines0 =
  propertyGet "MinorGridlines"
              []
              outIUnknown

getMinorTickMark0 :: Axis a0
                  -> IO XlTickMark
getMinorTickMark0 =
  propertyGet "MinorTickMark"
              []
              outEnum

setMinorTickMark0 :: XlTickMark
                  -> Axis a0
                  -> IO ()
setMinorTickMark0 rhs =
  propertySet "MinorTickMark"
              [inEnum rhs]

getMinorUnit0 :: Axis a0
              -> IO Double
getMinorUnit0 =
  propertyGet "MinorUnit"
              []
              outDouble

setMinorUnit0 :: Double
              -> Axis a0
              -> IO ()
setMinorUnit0 rhs =
  propertySet "MinorUnit"
              [inDouble rhs]

getMinorUnitIsAuto0 :: Axis a0
                    -> IO Bool
getMinorUnitIsAuto0 =
  propertyGet "MinorUnitIsAuto"
              []
              outBool

setMinorUnitIsAuto0 :: Bool
                    -> Axis a0
                    -> IO ()
setMinorUnitIsAuto0 rhs =
  propertySet "MinorUnitIsAuto"
              [inBool rhs]

getReversePlotOrder0 :: Axis a0
                     -> IO Bool
getReversePlotOrder0 =
  propertyGet "ReversePlotOrder"
              []
              outBool

setReversePlotOrder0 :: Bool
                     -> Axis a0
                     -> IO ()
setReversePlotOrder0 rhs =
  propertySet "ReversePlotOrder"
              [inBool rhs]

getScaleType0 :: Axis a0
              -> IO XlScaleType
getScaleType0 =
  propertyGet "ScaleType"
              []
              outEnum

setScaleType0 :: XlScaleType
              -> Axis a0
              -> IO ()
setScaleType0 rhs =
  propertySet "ScaleType"
              [inEnum rhs]

select131 :: Axis a0
          -> IO a1
select131 =
  function1 "Select"
            []
            outVariant

getTickLabelPosition0 :: Axis a0
                      -> IO XlTickLabelPosition
getTickLabelPosition0 =
  propertyGet "TickLabelPosition"
              []
              outEnum

setTickLabelPosition0 :: XlTickLabelPosition
                      -> Axis a0
                      -> IO ()
setTickLabelPosition0 rhs =
  propertySet "TickLabelPosition"
              [inEnum rhs]

getTickLabels0 :: Axis a0
               -> IO (TickLabels ())
getTickLabels0 =
  propertyGet "TickLabels"
              []
              outIUnknown

getTickLabelSpacing0 :: Axis a0
                     -> IO Int32
getTickLabelSpacing0 =
  propertyGet "TickLabelSpacing"
              []
              outInt32

setTickLabelSpacing0 :: Int32
                     -> Axis a0
                     -> IO ()
setTickLabelSpacing0 rhs =
  propertySet "TickLabelSpacing"
              [inInt32 rhs]

getTickMarkSpacing0 :: Axis a0
                    -> IO Int32
getTickMarkSpacing0 =
  propertyGet "TickMarkSpacing"
              []
              outInt32

setTickMarkSpacing0 :: Int32
                    -> Axis a0
                    -> IO ()
setTickMarkSpacing0 rhs =
  propertySet "TickMarkSpacing"
              [inInt32 rhs]

getType47 :: Axis a0
          -> IO XlAxisType
getType47 =
  propertyGet "Type"
              []
              outEnum

setType15 :: XlAxisType
          -> Axis a0
          -> IO ()
setType15 rhs =
  propertySet "Type"
              [inEnum rhs]

getBaseUnit0 :: Axis a0
             -> IO XlTimeUnit
getBaseUnit0 =
  propertyGet "BaseUnit"
              []
              outEnum

setBaseUnit0 :: XlTimeUnit
             -> Axis a0
             -> IO ()
setBaseUnit0 rhs =
  propertySet "BaseUnit"
              [inEnum rhs]

getBaseUnitIsAuto0 :: Axis a0
                   -> IO Bool
getBaseUnitIsAuto0 =
  propertyGet "BaseUnitIsAuto"
              []
              outBool

setBaseUnitIsAuto0 :: Bool
                   -> Axis a0
                   -> IO ()
setBaseUnitIsAuto0 rhs =
  propertySet "BaseUnitIsAuto"
              [inBool rhs]

getMajorUnitScale0 :: Axis a0
                   -> IO XlTimeUnit
getMajorUnitScale0 =
  propertyGet "MajorUnitScale"
              []
              outEnum

setMajorUnitScale0 :: XlTimeUnit
                   -> Axis a0
                   -> IO ()
setMajorUnitScale0 rhs =
  propertySet "MajorUnitScale"
              [inEnum rhs]

getMinorUnitScale0 :: Axis a0
                   -> IO XlTimeUnit
getMinorUnitScale0 =
  propertyGet "MinorUnitScale"
              []
              outEnum

setMinorUnitScale0 :: XlTimeUnit
                   -> Axis a0
                   -> IO ()
setMinorUnitScale0 rhs =
  propertySet "MinorUnitScale"
              [inEnum rhs]

getCategoryType0 :: Axis a0
                 -> IO XlCategoryType
getCategoryType0 =
  propertyGet "CategoryType"
              []
              outEnum

setCategoryType0 :: XlCategoryType
                 -> Axis a0
                 -> IO ()
setCategoryType0 rhs =
  propertySet "CategoryType"
              [inEnum rhs]

getLeft102 :: Axis a0
           -> IO Double
getLeft102 =
  propertyGet "Left"
              []
              outDouble

getTop102 :: Axis a0
          -> IO Double
getTop102 =
  propertyGet "Top"
              []
              outDouble

getWidth101 :: Axis a0
            -> IO Double
getWidth101 =
  propertyGet "Width"
              []
              outDouble

getHeight99 :: Axis a0
            -> IO Double
getHeight99 =
  propertyGet "Height"
              []
              outDouble

getDisplayUnit0 :: Axis a0
                -> IO XlDisplayUnit
getDisplayUnit0 =
  propertyGet "DisplayUnit"
              []
              outEnum

setDisplayUnit0 :: XlDisplayUnit
                -> Axis a0
                -> IO ()
setDisplayUnit0 rhs =
  propertySet "DisplayUnit"
              [inEnum rhs]

getDisplayUnitCustom0 :: Axis a0
                      -> IO Double
getDisplayUnitCustom0 =
  propertyGet "DisplayUnitCustom"
              []
              outDouble

setDisplayUnitCustom0 :: Double
                      -> Axis a0
                      -> IO ()
setDisplayUnitCustom0 rhs =
  propertySet "DisplayUnitCustom"
              [inDouble rhs]

getHasDisplayUnitLabel0 :: Axis a0
                        -> IO Bool
getHasDisplayUnitLabel0 =
  propertyGet "HasDisplayUnitLabel"
              []
              outBool

setHasDisplayUnitLabel0 :: Bool
                        -> Axis a0
                        -> IO ()
setHasDisplayUnitLabel0 rhs =
  propertySet "HasDisplayUnitLabel"
              [inBool rhs]

getDisplayUnitLabel0 :: Axis a0
                     -> IO (DisplayUnitLabel ())
getDisplayUnitLabel0 =
  propertyGet "DisplayUnitLabel"
              []
              outIUnknown

getLogBase0 :: Axis a0
            -> IO Double
getLogBase0 =
  propertyGet "LogBase"
              []
              outDouble

setLogBase0 :: Double
            -> Axis a0
            -> IO ()
setLogBase0 rhs =
  propertySet "LogBase"
              [inDouble rhs]

getTickLabelSpacingIsAuto0 :: Axis a0
                           -> IO Bool
getTickLabelSpacingIsAuto0 =
  propertyGet "TickLabelSpacingIsAuto"
              []
              outBool

setTickLabelSpacingIsAuto0 :: Bool
                           -> Axis a0
                           -> IO ()
setTickLabelSpacingIsAuto0 rhs =
  propertySet "TickLabelSpacingIsAuto"
              [inBool rhs]

getFormat25 :: Axis a0
            -> IO (ChartFormat ())
getFormat25 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ChartTitle
-- 
-- --------------------------------------------------
data ChartTitle_ a = ChartTitle__ 
type ChartTitle a = IDispatch (ChartTitle_ a)
iidChartTitle :: IID (ChartTitle ())
iidChartTitle = mkIID "{00020849-0000-0000-C000-000000000046}"

queryInterface130 :: (Variant a1)
                  => GUID
                  -> ChartTitle a0
                  -> IO a1
queryInterface130 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef130 :: ChartTitle a0
          -> IO Word32
addRef130 =
  function1 "AddRef"
            []
            outWord32

release130 :: ChartTitle a0
           -> IO Word32
release130 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount130 :: ChartTitle a0
                    -> IO Word32
getTypeInfoCount130 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo130 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartTitle a0
               -> IO a1
getTypeInfo130 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames130 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartTitle a0
                 -> IO Int32
getIDsOfNames130 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke130 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartTitle a0
          -> IO (a1, a2, Word32)
invoke130 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication396 :: (Variant a1)
                  => ChartTitle a0
                  -> IO a1
getApplication396 =
  propertyGet "Application"
              []
              outVariant

getCreator396 :: ChartTitle a0
              -> IO XlCreator
getCreator396 =
  propertyGet "Creator"
              []
              outEnum

getParent411 :: ChartTitle a0
             -> IO (IDispatch ())
getParent411 =
  propertyGet "Parent"
              []
              outIDispatch

getName118 :: ChartTitle a0
           -> IO String
getName118 =
  propertyGet "Name"
              []
              outString

select132 :: ChartTitle a0
          -> IO a1
select132 =
  function1 "Select"
            []
            outVariant

getBorder75 :: ChartTitle a0
            -> IO (Border ())
getBorder75 =
  propertyGet "Border"
              []
              outIDispatch

delete202 :: ChartTitle a0
          -> IO a1
delete202 =
  function1 "Delete"
            []
            outVariant

getInterior71 :: ChartTitle a0
              -> IO (Interior ())
getInterior71 =
  propertyGet "Interior"
              []
              outIDispatch

getFill17 :: ChartTitle a0
          -> IO (ChartFillFormat ())
getFill17 =
  propertyGet "Fill"
              []
              outIDispatch

getCaption73 :: ChartTitle a0
             -> IO String
getCaption73 =
  propertyGet "Caption"
              []
              outString

setCaption71 :: String
             -> ChartTitle a0
             -> IO ()
setCaption71 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters57 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> ChartTitle a0
                -> IO (Characters ())
getCharacters57 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

getFont54 :: ChartTitle a0
          -> IO (Font ())
getFont54 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment40 :: ChartTitle a0
                         -> IO a1
getHorizontalAlignment40 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment40 :: a1
                         -> ChartTitle a0
                         -> IO ()
setHorizontalAlignment40 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLeft103 :: ChartTitle a0
           -> IO Double
getLeft103 =
  propertyGet "Left"
              []
              outDouble

setLeft97 :: Double
          -> ChartTitle a0
          -> IO ()
setLeft97 rhs =
  propertySet "Left"
              [inDouble rhs]

getOrientation48 :: ChartTitle a0
                 -> IO a1
getOrientation48 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation48 :: a1
                 -> ChartTitle a0
                 -> IO ()
setOrientation48 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getShadow48 :: ChartTitle a0
            -> IO Bool
getShadow48 =
  propertyGet "Shadow"
              []
              outBool

setShadow45 :: Bool
            -> ChartTitle a0
            -> IO ()
setShadow45 rhs =
  propertySet "Shadow"
              [inBool rhs]

getText65 :: ChartTitle a0
          -> IO String
getText65 =
  propertyGet "Text"
              []
              outString

setText63 :: String
          -> ChartTitle a0
          -> IO ()
setText63 rhs =
  propertySet "Text"
              [inString rhs]

getTop103 :: ChartTitle a0
          -> IO Double
getTop103 =
  propertyGet "Top"
              []
              outDouble

setTop97 :: Double
         -> ChartTitle a0
         -> IO ()
setTop97 rhs =
  propertySet "Top"
              [inDouble rhs]

getVerticalAlignment40 :: ChartTitle a0
                       -> IO a1
getVerticalAlignment40 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment40 :: a1
                       -> ChartTitle a0
                       -> IO ()
setVerticalAlignment40 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder40 :: ChartTitle a0
                  -> IO Int32
getReadingOrder40 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder40 :: Int32
                  -> ChartTitle a0
                  -> IO ()
setReadingOrder40 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoScaleFont33 :: ChartTitle a0
                   -> IO a1
getAutoScaleFont33 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont33 :: a1
                   -> ChartTitle a0
                   -> IO ()
setAutoScaleFont33 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getIncludeInLayout2 :: ChartTitle a0
                    -> IO Bool
getIncludeInLayout2 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout2 :: Bool
                    -> ChartTitle a0
                    -> IO ()
setIncludeInLayout2 rhs =
  propertySet "IncludeInLayout"
              [inBool rhs]

getPosition15 :: ChartTitle a0
              -> IO XlChartElementPosition
getPosition15 =
  propertyGet "Position"
              []
              outEnum

setPosition15 :: XlChartElementPosition
              -> ChartTitle a0
              -> IO ()
setPosition15 rhs =
  propertySet "Position"
              [inEnum rhs]

getFormat26 :: ChartTitle a0
            -> IO (ChartFormat ())
getFormat26 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface AxisTitle
-- 
-- --------------------------------------------------
data AxisTitle_ a = AxisTitle__ 
type AxisTitle a = IDispatch (AxisTitle_ a)
iidAxisTitle :: IID (AxisTitle ())
iidAxisTitle = mkIID "{0002084A-0000-0000-C000-000000000046}"

queryInterface131 :: (Variant a1)
                  => GUID
                  -> AxisTitle a0
                  -> IO a1
queryInterface131 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef131 :: AxisTitle a0
          -> IO Word32
addRef131 =
  function1 "AddRef"
            []
            outWord32

release131 :: AxisTitle a0
           -> IO Word32
release131 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount131 :: AxisTitle a0
                    -> IO Word32
getTypeInfoCount131 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo131 :: (Variant a1)
               => Word32
               -> Word32
               -> AxisTitle a0
               -> IO a1
getTypeInfo131 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames131 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AxisTitle a0
                 -> IO Int32
getIDsOfNames131 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke131 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AxisTitle a0
          -> IO (a1, a2, Word32)
invoke131 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication397 :: (Variant a1)
                  => AxisTitle a0
                  -> IO a1
getApplication397 =
  propertyGet "Application"
              []
              outVariant

getCreator397 :: AxisTitle a0
              -> IO XlCreator
getCreator397 =
  propertyGet "Creator"
              []
              outEnum

getParent412 :: AxisTitle a0
             -> IO (IDispatch ())
getParent412 =
  propertyGet "Parent"
              []
              outIDispatch

getName119 :: AxisTitle a0
           -> IO String
getName119 =
  propertyGet "Name"
              []
              outString

select133 :: AxisTitle a0
          -> IO a1
select133 =
  function1 "Select"
            []
            outVariant

getBorder76 :: AxisTitle a0
            -> IO (Border ())
getBorder76 =
  propertyGet "Border"
              []
              outIDispatch

delete203 :: AxisTitle a0
          -> IO a1
delete203 =
  function1 "Delete"
            []
            outVariant

getInterior72 :: AxisTitle a0
              -> IO (Interior ())
getInterior72 =
  propertyGet "Interior"
              []
              outIDispatch

getFill18 :: AxisTitle a0
          -> IO (ChartFillFormat ())
getFill18 =
  propertyGet "Fill"
              []
              outIDispatch

getCaption74 :: AxisTitle a0
             -> IO String
getCaption74 =
  propertyGet "Caption"
              []
              outString

setCaption72 :: String
             -> AxisTitle a0
             -> IO ()
setCaption72 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters58 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> AxisTitle a0
                -> IO (Characters ())
getCharacters58 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

getFont55 :: AxisTitle a0
          -> IO (Font ())
getFont55 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment41 :: AxisTitle a0
                         -> IO a1
getHorizontalAlignment41 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment41 :: a1
                         -> AxisTitle a0
                         -> IO ()
setHorizontalAlignment41 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLeft104 :: AxisTitle a0
           -> IO Double
getLeft104 =
  propertyGet "Left"
              []
              outDouble

setLeft98 :: Double
          -> AxisTitle a0
          -> IO ()
setLeft98 rhs =
  propertySet "Left"
              [inDouble rhs]

getOrientation49 :: AxisTitle a0
                 -> IO a1
getOrientation49 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation49 :: a1
                 -> AxisTitle a0
                 -> IO ()
setOrientation49 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getShadow49 :: AxisTitle a0
            -> IO Bool
getShadow49 =
  propertyGet "Shadow"
              []
              outBool

setShadow46 :: Bool
            -> AxisTitle a0
            -> IO ()
setShadow46 rhs =
  propertySet "Shadow"
              [inBool rhs]

getText66 :: AxisTitle a0
          -> IO String
getText66 =
  propertyGet "Text"
              []
              outString

setText64 :: String
          -> AxisTitle a0
          -> IO ()
setText64 rhs =
  propertySet "Text"
              [inString rhs]

getTop104 :: AxisTitle a0
          -> IO Double
getTop104 =
  propertyGet "Top"
              []
              outDouble

setTop98 :: Double
         -> AxisTitle a0
         -> IO ()
setTop98 rhs =
  propertySet "Top"
              [inDouble rhs]

getVerticalAlignment41 :: AxisTitle a0
                       -> IO a1
getVerticalAlignment41 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment41 :: a1
                       -> AxisTitle a0
                       -> IO ()
setVerticalAlignment41 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder41 :: AxisTitle a0
                  -> IO Int32
getReadingOrder41 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder41 :: Int32
                  -> AxisTitle a0
                  -> IO ()
setReadingOrder41 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoScaleFont34 :: AxisTitle a0
                   -> IO a1
getAutoScaleFont34 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont34 :: a1
                   -> AxisTitle a0
                   -> IO ()
setAutoScaleFont34 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getIncludeInLayout3 :: AxisTitle a0
                    -> IO Bool
getIncludeInLayout3 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout3 :: Bool
                    -> AxisTitle a0
                    -> IO ()
setIncludeInLayout3 rhs =
  propertySet "IncludeInLayout"
              [inBool rhs]

getPosition16 :: AxisTitle a0
              -> IO XlChartElementPosition
getPosition16 =
  propertyGet "Position"
              []
              outEnum

setPosition16 :: XlChartElementPosition
              -> AxisTitle a0
              -> IO ()
setPosition16 rhs =
  propertySet "Position"
              [inEnum rhs]

getFormat27 :: AxisTitle a0
            -> IO (ChartFormat ())
getFormat27 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ChartGroup
-- 
-- --------------------------------------------------
data ChartGroup_ a = ChartGroup__ 
type ChartGroup a = IDispatch (ChartGroup_ a)
iidChartGroup :: IID (ChartGroup ())
iidChartGroup = mkIID "{00020859-0000-0000-C000-000000000046}"

queryInterface132 :: (Variant a1)
                  => GUID
                  -> ChartGroup a0
                  -> IO a1
queryInterface132 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef132 :: ChartGroup a0
          -> IO Word32
addRef132 =
  function1 "AddRef"
            []
            outWord32

release132 :: ChartGroup a0
           -> IO Word32
release132 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount132 :: ChartGroup a0
                    -> IO Word32
getTypeInfoCount132 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo132 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartGroup a0
               -> IO a1
getTypeInfo132 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames132 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartGroup a0
                 -> IO Int32
getIDsOfNames132 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke132 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartGroup a0
          -> IO (a1, a2, Word32)
invoke132 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication398 :: (Variant a1)
                  => ChartGroup a0
                  -> IO a1
getApplication398 =
  propertyGet "Application"
              []
              outVariant

getCreator398 :: ChartGroup a0
              -> IO XlCreator
getCreator398 =
  propertyGet "Creator"
              []
              outEnum

getParent413 :: ChartGroup a0
             -> IO (IDispatch ())
getParent413 =
  propertyGet "Parent"
              []
              outIDispatch

getAxisGroup3 :: ChartGroup a0
              -> IO XlAxisGroup
getAxisGroup3 =
  propertyGet "AxisGroup"
              []
              outEnum

setAxisGroup1 :: XlAxisGroup
              -> ChartGroup a0
              -> IO ()
setAxisGroup1 rhs =
  propertySet "AxisGroup"
              [inEnum rhs]

getDoughnutHoleSize0 :: ChartGroup a0
                     -> IO Int32
getDoughnutHoleSize0 =
  propertyGet "DoughnutHoleSize"
              []
              outInt32

setDoughnutHoleSize0 :: Int32
                     -> ChartGroup a0
                     -> IO ()
setDoughnutHoleSize0 rhs =
  propertySet "DoughnutHoleSize"
              [inInt32 rhs]

getDownBars0 :: ChartGroup a0
             -> IO (DownBars ())
getDownBars0 =
  propertyGet "DownBars"
              []
              outIUnknown

getDropLines0 :: ChartGroup a0
              -> IO (DropLines ())
getDropLines0 =
  propertyGet "DropLines"
              []
              outIUnknown

getFirstSliceAngle0 :: ChartGroup a0
                    -> IO Int32
getFirstSliceAngle0 =
  propertyGet "FirstSliceAngle"
              []
              outInt32

setFirstSliceAngle0 :: Int32
                    -> ChartGroup a0
                    -> IO ()
setFirstSliceAngle0 rhs =
  propertySet "FirstSliceAngle"
              [inInt32 rhs]

getGapWidth0 :: ChartGroup a0
             -> IO Int32
getGapWidth0 =
  propertyGet "GapWidth"
              []
              outInt32

setGapWidth0 :: Int32
             -> ChartGroup a0
             -> IO ()
setGapWidth0 rhs =
  propertySet "GapWidth"
              [inInt32 rhs]

getHasDropLines0 :: ChartGroup a0
                 -> IO Bool
getHasDropLines0 =
  propertyGet "HasDropLines"
              []
              outBool

setHasDropLines0 :: Bool
                 -> ChartGroup a0
                 -> IO ()
setHasDropLines0 rhs =
  propertySet "HasDropLines"
              [inBool rhs]

getHasHiLoLines0 :: ChartGroup a0
                 -> IO Bool
getHasHiLoLines0 =
  propertyGet "HasHiLoLines"
              []
              outBool

setHasHiLoLines0 :: Bool
                 -> ChartGroup a0
                 -> IO ()
setHasHiLoLines0 rhs =
  propertySet "HasHiLoLines"
              [inBool rhs]

getHasRadarAxisLabels0 :: ChartGroup a0
                       -> IO Bool
getHasRadarAxisLabels0 =
  propertyGet "HasRadarAxisLabels"
              []
              outBool

setHasRadarAxisLabels0 :: Bool
                       -> ChartGroup a0
                       -> IO ()
setHasRadarAxisLabels0 rhs =
  propertySet "HasRadarAxisLabels"
              [inBool rhs]

getHasSeriesLines0 :: ChartGroup a0
                   -> IO Bool
getHasSeriesLines0 =
  propertyGet "HasSeriesLines"
              []
              outBool

setHasSeriesLines0 :: Bool
                   -> ChartGroup a0
                   -> IO ()
setHasSeriesLines0 rhs =
  propertySet "HasSeriesLines"
              [inBool rhs]

getHasUpDownBars0 :: ChartGroup a0
                  -> IO Bool
getHasUpDownBars0 =
  propertyGet "HasUpDownBars"
              []
              outBool

setHasUpDownBars0 :: Bool
                  -> ChartGroup a0
                  -> IO ()
setHasUpDownBars0 rhs =
  propertySet "HasUpDownBars"
              [inBool rhs]

getHiLoLines0 :: ChartGroup a0
              -> IO (HiLoLines ())
getHiLoLines0 =
  propertyGet "HiLoLines"
              []
              outIUnknown

getIndex73 :: ChartGroup a0
           -> IO Int32
getIndex73 =
  propertyGet "Index"
              []
              outInt32

getOverlap0 :: ChartGroup a0
            -> IO Int32
getOverlap0 =
  propertyGet "Overlap"
              []
              outInt32

setOverlap0 :: Int32
            -> ChartGroup a0
            -> IO ()
setOverlap0 rhs =
  propertySet "Overlap"
              [inInt32 rhs]

getRadarAxisLabels0 :: ChartGroup a0
                    -> IO (TickLabels ())
getRadarAxisLabels0 =
  propertyGet "RadarAxisLabels"
              []
              outIUnknown

seriesCollection1 :: (Variant a1)
                  => a1
                  -> ChartGroup a0
                  -> IO (IDispatch ())
seriesCollection1 index1 =
  function1 "SeriesCollection"
            [inVariant index1]
            outIDispatch

getSeriesLines0 :: ChartGroup a0
                -> IO (SeriesLines ())
getSeriesLines0 =
  propertyGet "SeriesLines"
              []
              outIUnknown

getSubType1 :: ChartGroup a0
            -> IO Int32
getSubType1 =
  propertyGet "SubType"
              []
              outInt32

setSubType1 :: Int32
            -> ChartGroup a0
            -> IO ()
setSubType1 rhs =
  propertySet "SubType"
              [inInt32 rhs]

getType48 :: ChartGroup a0
          -> IO Int32
getType48 =
  propertyGet "Type"
              []
              outInt32

setType16 :: Int32
          -> ChartGroup a0
          -> IO ()
setType16 rhs =
  propertySet "Type"
              [inInt32 rhs]

getUpBars0 :: ChartGroup a0
           -> IO (UpBars ())
getUpBars0 =
  propertyGet "UpBars"
              []
              outIUnknown

getVaryByCategories0 :: ChartGroup a0
                     -> IO Bool
getVaryByCategories0 =
  propertyGet "VaryByCategories"
              []
              outBool

setVaryByCategories0 :: Bool
                     -> ChartGroup a0
                     -> IO ()
setVaryByCategories0 rhs =
  propertySet "VaryByCategories"
              [inBool rhs]

getSizeRepresents0 :: ChartGroup a0
                   -> IO XlSizeRepresents
getSizeRepresents0 =
  propertyGet "SizeRepresents"
              []
              outEnum

setSizeRepresents0 :: XlSizeRepresents
                   -> ChartGroup a0
                   -> IO ()
setSizeRepresents0 rhs =
  propertySet "SizeRepresents"
              [inEnum rhs]

getBubbleScale0 :: ChartGroup a0
                -> IO Int32
getBubbleScale0 =
  propertyGet "BubbleScale"
              []
              outInt32

setBubbleScale0 :: Int32
                -> ChartGroup a0
                -> IO ()
setBubbleScale0 rhs =
  propertySet "BubbleScale"
              [inInt32 rhs]

getShowNegativeBubbles0 :: ChartGroup a0
                        -> IO Bool
getShowNegativeBubbles0 =
  propertyGet "ShowNegativeBubbles"
              []
              outBool

setShowNegativeBubbles0 :: Bool
                        -> ChartGroup a0
                        -> IO ()
setShowNegativeBubbles0 rhs =
  propertySet "ShowNegativeBubbles"
              [inBool rhs]

getSplitType0 :: ChartGroup a0
              -> IO XlChartSplitType
getSplitType0 =
  propertyGet "SplitType"
              []
              outEnum

setSplitType0 :: XlChartSplitType
              -> ChartGroup a0
              -> IO ()
setSplitType0 rhs =
  propertySet "SplitType"
              [inEnum rhs]

getSplitValue0 :: ChartGroup a0
               -> IO a1
getSplitValue0 =
  propertyGet "SplitValue"
              []
              outVariant

setSplitValue0 :: a1
               -> ChartGroup a0
               -> IO ()
setSplitValue0 rhs =
  propertySet "SplitValue"
              [inVariant rhs]

getSecondPlotSize0 :: ChartGroup a0
                   -> IO Int32
getSecondPlotSize0 =
  propertyGet "SecondPlotSize"
              []
              outInt32

setSecondPlotSize0 :: Int32
                   -> ChartGroup a0
                   -> IO ()
setSecondPlotSize0 rhs =
  propertySet "SecondPlotSize"
              [inInt32 rhs]

getHas3DShading0 :: ChartGroup a0
                 -> IO Bool
getHas3DShading0 =
  propertyGet "Has3DShading"
              []
              outBool

setHas3DShading0 :: Bool
                 -> ChartGroup a0
                 -> IO ()
setHas3DShading0 rhs =
  propertySet "Has3DShading"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface ChartGroups
-- 
-- --------------------------------------------------
data ChartGroups_ a = ChartGroups__ 
type ChartGroups a = IDispatch (ChartGroups_ a)
iidChartGroups :: IID (ChartGroups ())
iidChartGroups = mkIID "{0002085A-0000-0000-C000-000000000046}"

queryInterface133 :: (Variant a1)
                  => GUID
                  -> ChartGroups a0
                  -> IO a1
queryInterface133 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef133 :: ChartGroups a0
          -> IO Word32
addRef133 =
  function1 "AddRef"
            []
            outWord32

release133 :: ChartGroups a0
           -> IO Word32
release133 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount133 :: ChartGroups a0
                    -> IO Word32
getTypeInfoCount133 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo133 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartGroups a0
               -> IO a1
getTypeInfo133 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames133 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartGroups a0
                 -> IO Int32
getIDsOfNames133 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke133 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartGroups a0
          -> IO (a1, a2, Word32)
invoke133 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication399 :: (Variant a1)
                  => ChartGroups a0
                  -> IO a1
getApplication399 =
  propertyGet "Application"
              []
              outVariant

getCreator399 :: ChartGroups a0
              -> IO XlCreator
getCreator399 =
  propertyGet "Creator"
              []
              outEnum

getParent414 :: ChartGroups a0
             -> IO (IDispatch ())
getParent414 =
  propertyGet "Parent"
              []
              outIDispatch

getCount173 :: ChartGroups a0
            -> IO Int32
getCount173 =
  propertyGet "Count"
              []
              outInt32

item91 :: a1
       -> ChartGroups a0
       -> IO (ChartGroup ())
item91 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum73 :: ChartGroups a0
          -> IO (IUnknown ())
newEnum73 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Axes
-- 
-- --------------------------------------------------
data Axes_ a = Axes__ 
type Axes a = IDispatch (Axes_ a)
iidAxes :: IID (Axes ())
iidAxes = mkIID "{0002085B-0000-0000-C000-000000000046}"

queryInterface134 :: (Variant a1)
                  => GUID
                  -> Axes a0
                  -> IO a1
queryInterface134 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef134 :: Axes a0
          -> IO Word32
addRef134 =
  function1 "AddRef"
            []
            outWord32

release134 :: Axes a0
           -> IO Word32
release134 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount134 :: Axes a0
                    -> IO Word32
getTypeInfoCount134 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo134 :: (Variant a1)
               => Word32
               -> Word32
               -> Axes a0
               -> IO a1
getTypeInfo134 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames134 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Axes a0
                 -> IO Int32
getIDsOfNames134 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke134 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Axes a0
          -> IO (a1, a2, Word32)
invoke134 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication400 :: (Variant a1)
                  => Axes a0
                  -> IO a1
getApplication400 =
  propertyGet "Application"
              []
              outVariant

getCreator400 :: Axes a0
              -> IO XlCreator
getCreator400 =
  propertyGet "Creator"
              []
              outEnum

getParent415 :: Axes a0
             -> IO (IDispatch ())
getParent415 =
  propertyGet "Parent"
              []
              outIDispatch

getCount174 :: Axes a0
            -> IO Int32
getCount174 =
  propertyGet "Count"
              []
              outInt32

item92 :: (Variant a1)
       => XlAxisType
       -> a1
       -> Axes a0
       -> IO (Axis ())
item92 type0 axisGroup =
  function1 "Item"
            [ inEnum type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            ]
            outIDispatch

newEnum74 :: Axes a0
          -> IO (IUnknown ())
newEnum74 =
  function1 "_NewEnum"
            []
            outIUnknown

default13 :: (Variant a1)
          => XlAxisType
          -> a1
          -> Axes a0
          -> IO (Axis ())
default13 type0 axisGroup =
  function1 "_Default"
            [ inEnum type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Points
-- 
-- --------------------------------------------------
data Points_ a = Points__ 
type Points a = IDispatch (Points_ a)
iidPoints :: IID (Points ())
iidPoints = mkIID "{00020869-0000-0000-C000-000000000046}"

queryInterface135 :: (Variant a1)
                  => GUID
                  -> Points a0
                  -> IO a1
queryInterface135 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef135 :: Points a0
          -> IO Word32
addRef135 =
  function1 "AddRef"
            []
            outWord32

release135 :: Points a0
           -> IO Word32
release135 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount135 :: Points a0
                    -> IO Word32
getTypeInfoCount135 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo135 :: (Variant a1)
               => Word32
               -> Word32
               -> Points a0
               -> IO a1
getTypeInfo135 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames135 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Points a0
                 -> IO Int32
getIDsOfNames135 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke135 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Points a0
          -> IO (a1, a2, Word32)
invoke135 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication401 :: (Variant a1)
                  => Points a0
                  -> IO a1
getApplication401 =
  propertyGet "Application"
              []
              outVariant

getCreator401 :: Points a0
              -> IO XlCreator
getCreator401 =
  propertyGet "Creator"
              []
              outEnum

getParent416 :: Points a0
             -> IO (IDispatch ())
getParent416 =
  propertyGet "Parent"
              []
              outIDispatch

getCount175 :: Points a0
            -> IO Int32
getCount175 =
  propertyGet "Count"
              []
              outInt32

item93 :: Int32
       -> Points a0
       -> IO (Point ())
item93 index1 =
  function1 "Item"
            [inInt32 index1]
            outIUnknown

newEnum75 :: Points a0
          -> IO (IUnknown ())
newEnum75 =
  function1 "_NewEnum"
            []
            outIUnknown

default14 :: Int32
          -> Points a0
          -> IO (Point ())
default14 index1 =
  function1 "_Default"
            [inInt32 index1]
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Point
-- 
-- --------------------------------------------------
data Point_ a = Point__ 
type Point a = IDispatch (Point_ a)
iidPoint :: IID (Point ())
iidPoint = mkIID "{0002086A-0000-0000-C000-000000000046}"

queryInterface136 :: (Variant a1)
                  => GUID
                  -> Point a0
                  -> IO a1
queryInterface136 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef136 :: Point a0
          -> IO Word32
addRef136 =
  function1 "AddRef"
            []
            outWord32

release136 :: Point a0
           -> IO Word32
release136 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount136 :: Point a0
                    -> IO Word32
getTypeInfoCount136 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo136 :: (Variant a1)
               => Word32
               -> Word32
               -> Point a0
               -> IO a1
getTypeInfo136 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames136 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Point a0
                 -> IO Int32
getIDsOfNames136 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke136 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Point a0
          -> IO (a1, a2, Word32)
invoke136 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication402 :: (Variant a1)
                  => Point a0
                  -> IO a1
getApplication402 =
  propertyGet "Application"
              []
              outVariant

getCreator402 :: Point a0
              -> IO XlCreator
getCreator402 =
  propertyGet "Creator"
              []
              outEnum

getParent417 :: Point a0
             -> IO (IDispatch ())
getParent417 =
  propertyGet "Parent"
              []
              outIDispatch

applyDataLabels5 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> Point a0
                 -> IO a1
applyDataLabels5 type0 legendKey autoText hasLeaderLines =
  function1 "_ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            ]
            outVariant

getBorder77 :: Point a0
            -> IO (Border ())
getBorder77 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats10 :: Point a0
               -> IO a1
clearFormats10 =
  function1 "ClearFormats"
            []
            outVariant

copy108 :: Point a0
        -> IO a1
copy108 =
  function1 "Copy"
            []
            outVariant

getDataLabel1 :: Point a0
              -> IO (DataLabel ())
getDataLabel1 =
  propertyGet "DataLabel"
              []
              outIUnknown

delete204 :: Point a0
          -> IO a1
delete204 =
  function1 "Delete"
            []
            outVariant

getExplosion1 :: Point a0
              -> IO Int32
getExplosion1 =
  propertyGet "Explosion"
              []
              outInt32

setExplosion1 :: Int32
              -> Point a0
              -> IO ()
setExplosion1 rhs =
  propertySet "Explosion"
              [inInt32 rhs]

getHasDataLabel0 :: Point a0
                 -> IO Bool
getHasDataLabel0 =
  propertyGet "HasDataLabel"
              []
              outBool

setHasDataLabel0 :: Bool
                 -> Point a0
                 -> IO ()
setHasDataLabel0 rhs =
  propertySet "HasDataLabel"
              [inBool rhs]

getInterior73 :: Point a0
              -> IO (Interior ())
getInterior73 =
  propertyGet "Interior"
              []
              outIDispatch

getInvertIfNegative4 :: Point a0
                     -> IO Bool
getInvertIfNegative4 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative4 :: Bool
                     -> Point a0
                     -> IO ()
setInvertIfNegative4 rhs =
  propertySet "InvertIfNegative"
              [inBool rhs]

getMarkerBackgroundColor2 :: Point a0
                          -> IO Int32
getMarkerBackgroundColor2 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor2 :: Int32
                          -> Point a0
                          -> IO ()
setMarkerBackgroundColor2 rhs =
  propertySet "MarkerBackgroundColor"
              [inInt32 rhs]

getMarkerBackgroundColorIndex2 :: Point a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex2 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex2 :: XlColorIndex
                               -> Point a0
                               -> IO ()
setMarkerBackgroundColorIndex2 rhs =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum rhs]

getMarkerForegroundColor2 :: Point a0
                          -> IO Int32
getMarkerForegroundColor2 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor2 :: Int32
                          -> Point a0
                          -> IO ()
setMarkerForegroundColor2 rhs =
  propertySet "MarkerForegroundColor"
              [inInt32 rhs]

getMarkerForegroundColorIndex2 :: Point a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex2 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex2 :: XlColorIndex
                               -> Point a0
                               -> IO ()
setMarkerForegroundColorIndex2 rhs =
  propertySet "MarkerForegroundColorIndex"
              [inEnum rhs]

getMarkerSize2 :: Point a0
               -> IO Int32
getMarkerSize2 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize2 :: Int32
               -> Point a0
               -> IO ()
setMarkerSize2 rhs =
  propertySet "MarkerSize"
              [inInt32 rhs]

getMarkerStyle2 :: Point a0
                -> IO XlMarkerStyle
getMarkerStyle2 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle2 :: XlMarkerStyle
                -> Point a0
                -> IO ()
setMarkerStyle2 rhs =
  propertySet "MarkerStyle"
              [inEnum rhs]

paste10 :: Point a0
        -> IO a1
paste10 =
  function1 "Paste"
            []
            outVariant

getPictureType4 :: Point a0
                -> IO XlChartPictureType
getPictureType4 =
  propertyGet "PictureType"
              []
              outEnum

setPictureType4 :: XlChartPictureType
                -> Point a0
                -> IO ()
setPictureType4 rhs =
  propertySet "PictureType"
              [inEnum rhs]

getPictureUnit4 :: Point a0
                -> IO Int32
getPictureUnit4 =
  propertyGet "PictureUnit"
              []
              outInt32

setPictureUnit4 :: Int32
                -> Point a0
                -> IO ()
setPictureUnit4 rhs =
  propertySet "PictureUnit"
              [inInt32 rhs]

select134 :: Point a0
          -> IO a1
select134 =
  function1 "Select"
            []
            outVariant

getApplyPictToSides1 :: Point a0
                     -> IO Bool
getApplyPictToSides1 =
  propertyGet "ApplyPictToSides"
              []
              outBool

setApplyPictToSides1 :: Bool
                     -> Point a0
                     -> IO ()
setApplyPictToSides1 rhs =
  propertySet "ApplyPictToSides"
              [inBool rhs]

getApplyPictToFront1 :: Point a0
                     -> IO Bool
getApplyPictToFront1 =
  propertyGet "ApplyPictToFront"
              []
              outBool

setApplyPictToFront1 :: Bool
                     -> Point a0
                     -> IO ()
setApplyPictToFront1 rhs =
  propertySet "ApplyPictToFront"
              [inBool rhs]

getApplyPictToEnd1 :: Point a0
                   -> IO Bool
getApplyPictToEnd1 =
  propertyGet "ApplyPictToEnd"
              []
              outBool

setApplyPictToEnd1 :: Bool
                   -> Point a0
                   -> IO ()
setApplyPictToEnd1 rhs =
  propertySet "ApplyPictToEnd"
              [inBool rhs]

getShadow50 :: Point a0
            -> IO Bool
getShadow50 =
  propertyGet "Shadow"
              []
              outBool

setShadow47 :: Bool
            -> Point a0
            -> IO ()
setShadow47 rhs =
  propertySet "Shadow"
              [inBool rhs]

getSecondaryPlot0 :: Point a0
                  -> IO Bool
getSecondaryPlot0 =
  propertyGet "SecondaryPlot"
              []
              outBool

setSecondaryPlot0 :: Bool
                  -> Point a0
                  -> IO ()
setSecondaryPlot0 rhs =
  propertySet "SecondaryPlot"
              [inBool rhs]

getFill19 :: Point a0
          -> IO (ChartFillFormat ())
getFill19 =
  propertyGet "Fill"
              []
              outIDispatch

applyDataLabels6 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> Point a0
                 -> IO a1
applyDataLabels6 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator =
  function1 "ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            , inVariant showSeriesName
            , inVariant showCategoryName
            , inVariant showValue
            , inVariant showPercentage
            , inVariant showBubbleSize
            , inVariant separator
            ]
            outVariant

getHas3DEffect1 :: Point a0
                -> IO Bool
getHas3DEffect1 =
  propertyGet "Has3DEffect"
              []
              outBool

setHas3DEffect1 :: Bool
                -> Point a0
                -> IO ()
setHas3DEffect1 rhs =
  propertySet "Has3DEffect"
              [inBool rhs]

getPictureUnit22 :: Point a0
                 -> IO Double
getPictureUnit22 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit22 :: Double
                 -> Point a0
                 -> IO ()
setPictureUnit22 rhs =
  propertySet "PictureUnit2"
              [inDouble rhs]

getFormat28 :: Point a0
            -> IO (ChartFormat ())
getFormat28 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Series
-- 
-- --------------------------------------------------
data Series_ a = Series__ 
type Series a = IDispatch (Series_ a)
iidSeries :: IID (Series ())
iidSeries = mkIID "{0002086B-0000-0000-C000-000000000046}"

queryInterface137 :: (Variant a1)
                  => GUID
                  -> Series a0
                  -> IO a1
queryInterface137 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef137 :: Series a0
          -> IO Word32
addRef137 =
  function1 "AddRef"
            []
            outWord32

release137 :: Series a0
           -> IO Word32
release137 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount137 :: Series a0
                    -> IO Word32
getTypeInfoCount137 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo137 :: (Variant a1)
               => Word32
               -> Word32
               -> Series a0
               -> IO a1
getTypeInfo137 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames137 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Series a0
                 -> IO Int32
getIDsOfNames137 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke137 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Series a0
          -> IO (a1, a2, Word32)
invoke137 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication403 :: (Variant a1)
                  => Series a0
                  -> IO a1
getApplication403 =
  propertyGet "Application"
              []
              outVariant

getCreator403 :: Series a0
              -> IO XlCreator
getCreator403 =
  propertyGet "Creator"
              []
              outEnum

getParent418 :: Series a0
             -> IO (IDispatch ())
getParent418 =
  propertyGet "Parent"
              []
              outIDispatch

applyDataLabels7 :: (Variant a2, Variant a3, Variant a4, Variant a5)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> Series a0
                 -> IO a1
applyDataLabels7 type0 legendKey autoText hasLeaderLines =
  function1 "_ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            ]
            outVariant

getAxisGroup4 :: Series a0
              -> IO XlAxisGroup
getAxisGroup4 =
  propertyGet "AxisGroup"
              []
              outEnum

setAxisGroup2 :: XlAxisGroup
              -> Series a0
              -> IO ()
setAxisGroup2 rhs =
  propertySet "AxisGroup"
              [inEnum rhs]

getBorder78 :: Series a0
            -> IO (Border ())
getBorder78 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats11 :: Series a0
               -> IO a1
clearFormats11 =
  function1 "ClearFormats"
            []
            outVariant

copy109 :: Series a0
        -> IO a1
copy109 =
  function1 "Copy"
            []
            outVariant

dataLabels0 :: (Variant a1)
            => a1
            -> Series a0
            -> IO (IDispatch ())
dataLabels0 index1 =
  function1 "DataLabels"
            [inVariant index1]
            outIDispatch

delete205 :: Series a0
          -> IO a1
delete205 =
  function1 "Delete"
            []
            outVariant

errorBar0 :: (Variant a2, Variant a3)
          => XlErrorBarDirection
          -> XlErrorBarInclude
          -> XlErrorBarType
          -> a2
          -> a3
          -> Series a0
          -> IO a1
errorBar0 direction include type0 amount minusValues =
  function1 "ErrorBar"
            [ inEnum direction
            , inEnum include
            , inEnum type0
            , inVariant amount
            , inVariant minusValues
            ]
            outVariant

getErrorBars0 :: Series a0
              -> IO (ErrorBars ())
getErrorBars0 =
  propertyGet "ErrorBars"
              []
              outIUnknown

getExplosion2 :: Series a0
              -> IO Int32
getExplosion2 =
  propertyGet "Explosion"
              []
              outInt32

setExplosion2 :: Int32
              -> Series a0
              -> IO ()
setExplosion2 rhs =
  propertySet "Explosion"
              [inInt32 rhs]

getFormula44 :: Series a0
             -> IO String
getFormula44 =
  propertyGet "Formula"
              []
              outString

setFormula39 :: String
             -> Series a0
             -> IO ()
setFormula39 rhs =
  propertySet "Formula"
              [inString rhs]

getFormulaLocal2 :: Series a0
                 -> IO String
getFormulaLocal2 =
  propertyGet "FormulaLocal"
              []
              outString

setFormulaLocal2 :: String
                 -> Series a0
                 -> IO ()
setFormulaLocal2 rhs =
  propertySet "FormulaLocal"
              [inString rhs]

getFormulaR1C12 :: Series a0
                -> IO String
getFormulaR1C12 =
  propertyGet "FormulaR1C1"
              []
              outString

setFormulaR1C12 :: String
                -> Series a0
                -> IO ()
setFormulaR1C12 rhs =
  propertySet "FormulaR1C1"
              [inString rhs]

getFormulaR1C1Local2 :: Series a0
                     -> IO String
getFormulaR1C1Local2 =
  propertyGet "FormulaR1C1Local"
              []
              outString

setFormulaR1C1Local2 :: String
                     -> Series a0
                     -> IO ()
setFormulaR1C1Local2 rhs =
  propertySet "FormulaR1C1Local"
              [inString rhs]

getHasDataLabels0 :: Series a0
                  -> IO Bool
getHasDataLabels0 =
  propertyGet "HasDataLabels"
              []
              outBool

setHasDataLabels0 :: Bool
                  -> Series a0
                  -> IO ()
setHasDataLabels0 rhs =
  propertySet "HasDataLabels"
              [inBool rhs]

getHasErrorBars0 :: Series a0
                 -> IO Bool
getHasErrorBars0 =
  propertyGet "HasErrorBars"
              []
              outBool

setHasErrorBars0 :: Bool
                 -> Series a0
                 -> IO ()
setHasErrorBars0 rhs =
  propertySet "HasErrorBars"
              [inBool rhs]

getInterior74 :: Series a0
              -> IO (Interior ())
getInterior74 =
  propertyGet "Interior"
              []
              outIDispatch

getFill20 :: Series a0
          -> IO (ChartFillFormat ())
getFill20 =
  propertyGet "Fill"
              []
              outIDispatch

getInvertIfNegative5 :: Series a0
                     -> IO Bool
getInvertIfNegative5 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative5 :: Bool
                     -> Series a0
                     -> IO ()
setInvertIfNegative5 rhs =
  propertySet "InvertIfNegative"
              [inBool rhs]

getMarkerBackgroundColor3 :: Series a0
                          -> IO Int32
getMarkerBackgroundColor3 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor3 :: Int32
                          -> Series a0
                          -> IO ()
setMarkerBackgroundColor3 rhs =
  propertySet "MarkerBackgroundColor"
              [inInt32 rhs]

getMarkerBackgroundColorIndex3 :: Series a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex3 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex3 :: XlColorIndex
                               -> Series a0
                               -> IO ()
setMarkerBackgroundColorIndex3 rhs =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum rhs]

getMarkerForegroundColor3 :: Series a0
                          -> IO Int32
getMarkerForegroundColor3 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor3 :: Int32
                          -> Series a0
                          -> IO ()
setMarkerForegroundColor3 rhs =
  propertySet "MarkerForegroundColor"
              [inInt32 rhs]

getMarkerForegroundColorIndex3 :: Series a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex3 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex3 :: XlColorIndex
                               -> Series a0
                               -> IO ()
setMarkerForegroundColorIndex3 rhs =
  propertySet "MarkerForegroundColorIndex"
              [inEnum rhs]

getMarkerSize3 :: Series a0
               -> IO Int32
getMarkerSize3 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize3 :: Int32
               -> Series a0
               -> IO ()
setMarkerSize3 rhs =
  propertySet "MarkerSize"
              [inInt32 rhs]

getMarkerStyle3 :: Series a0
                -> IO XlMarkerStyle
getMarkerStyle3 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle3 :: XlMarkerStyle
                -> Series a0
                -> IO ()
setMarkerStyle3 rhs =
  propertySet "MarkerStyle"
              [inEnum rhs]

getName120 :: Series a0
           -> IO String
getName120 =
  propertyGet "Name"
              []
              outString

setName76 :: String
          -> Series a0
          -> IO ()
setName76 rhs =
  propertySet "Name"
              [inString rhs]

paste11 :: Series a0
        -> IO a1
paste11 =
  function1 "Paste"
            []
            outVariant

getPictureType5 :: Series a0
                -> IO XlChartPictureType
getPictureType5 =
  propertyGet "PictureType"
              []
              outEnum

setPictureType5 :: XlChartPictureType
                -> Series a0
                -> IO ()
setPictureType5 rhs =
  propertySet "PictureType"
              [inEnum rhs]

getPictureUnit5 :: Series a0
                -> IO Int32
getPictureUnit5 =
  propertyGet "PictureUnit"
              []
              outInt32

setPictureUnit5 :: Int32
                -> Series a0
                -> IO ()
setPictureUnit5 rhs =
  propertySet "PictureUnit"
              [inInt32 rhs]

getPlotOrder0 :: Series a0
              -> IO Int32
getPlotOrder0 =
  propertyGet "PlotOrder"
              []
              outInt32

setPlotOrder0 :: Int32
              -> Series a0
              -> IO ()
setPlotOrder0 rhs =
  propertySet "PlotOrder"
              [inInt32 rhs]

points0 :: (Variant a1)
        => a1
        -> Series a0
        -> IO (IDispatch ())
points0 index1 =
  function1 "Points"
            [inVariant index1]
            outIDispatch

select135 :: Series a0
          -> IO a1
select135 =
  function1 "Select"
            []
            outVariant

getSmooth1 :: Series a0
           -> IO Bool
getSmooth1 =
  propertyGet "Smooth"
              []
              outBool

setSmooth1 :: Bool
           -> Series a0
           -> IO ()
setSmooth1 rhs =
  propertySet "Smooth"
              [inBool rhs]

trendlines0 :: (Variant a1)
            => a1
            -> Series a0
            -> IO (IDispatch ())
trendlines0 index1 =
  function1 "Trendlines"
            [inVariant index1]
            outIDispatch

getType49 :: Series a0
          -> IO Int32
getType49 =
  propertyGet "Type"
              []
              outInt32

setType17 :: Int32
          -> Series a0
          -> IO ()
setType17 rhs =
  propertySet "Type"
              [inInt32 rhs]

getChartType1 :: Series a0
              -> IO XlChartType
getChartType1 =
  propertyGet "ChartType"
              []
              outEnum

setChartType1 :: XlChartType
              -> Series a0
              -> IO ()
setChartType1 rhs =
  propertySet "ChartType"
              [inEnum rhs]

applyCustomType1 :: XlChartType
                 -> Series a0
                 -> IO ()
applyCustomType1 chartType =
  method0 "ApplyCustomType"
          [inEnum chartType]

getValues2 :: Series a0
           -> IO a1
getValues2 =
  propertyGet "Values"
              []
              outVariant

setValues0 :: a1
           -> Series a0
           -> IO ()
setValues0 rhs =
  propertySet "Values"
              [inVariant rhs]

getXValues0 :: Series a0
            -> IO a1
getXValues0 =
  propertyGet "XValues"
              []
              outVariant

setXValues0 :: a1
            -> Series a0
            -> IO ()
setXValues0 rhs =
  propertySet "XValues"
              [inVariant rhs]

getBubbleSizes0 :: Series a0
                -> IO a1
getBubbleSizes0 =
  propertyGet "BubbleSizes"
              []
              outVariant

setBubbleSizes0 :: a1
                -> Series a0
                -> IO ()
setBubbleSizes0 rhs =
  propertySet "BubbleSizes"
              [inVariant rhs]

getBarShape1 :: Series a0
             -> IO XlBarShape
getBarShape1 =
  propertyGet "BarShape"
              []
              outEnum

setBarShape1 :: XlBarShape
             -> Series a0
             -> IO ()
setBarShape1 rhs =
  propertySet "BarShape"
              [inEnum rhs]

getApplyPictToSides2 :: Series a0
                     -> IO Bool
getApplyPictToSides2 =
  propertyGet "ApplyPictToSides"
              []
              outBool

setApplyPictToSides2 :: Bool
                     -> Series a0
                     -> IO ()
setApplyPictToSides2 rhs =
  propertySet "ApplyPictToSides"
              [inBool rhs]

getApplyPictToFront2 :: Series a0
                     -> IO Bool
getApplyPictToFront2 =
  propertyGet "ApplyPictToFront"
              []
              outBool

setApplyPictToFront2 :: Bool
                     -> Series a0
                     -> IO ()
setApplyPictToFront2 rhs =
  propertySet "ApplyPictToFront"
              [inBool rhs]

getApplyPictToEnd2 :: Series a0
                   -> IO Bool
getApplyPictToEnd2 =
  propertyGet "ApplyPictToEnd"
              []
              outBool

setApplyPictToEnd2 :: Bool
                   -> Series a0
                   -> IO ()
setApplyPictToEnd2 rhs =
  propertySet "ApplyPictToEnd"
              [inBool rhs]

getHas3DEffect2 :: Series a0
                -> IO Bool
getHas3DEffect2 =
  propertyGet "Has3DEffect"
              []
              outBool

setHas3DEffect2 :: Bool
                -> Series a0
                -> IO ()
setHas3DEffect2 rhs =
  propertySet "Has3DEffect"
              [inBool rhs]

getShadow51 :: Series a0
            -> IO Bool
getShadow51 =
  propertyGet "Shadow"
              []
              outBool

setShadow48 :: Bool
            -> Series a0
            -> IO ()
setShadow48 rhs =
  propertySet "Shadow"
              [inBool rhs]

getHasLeaderLines0 :: Series a0
                   -> IO Bool
getHasLeaderLines0 =
  propertyGet "HasLeaderLines"
              []
              outBool

setHasLeaderLines0 :: Bool
                   -> Series a0
                   -> IO ()
setHasLeaderLines0 rhs =
  propertySet "HasLeaderLines"
              [inBool rhs]

getLeaderLines0 :: Series a0
                -> IO (LeaderLines ())
getLeaderLines0 =
  propertyGet "LeaderLines"
              []
              outIUnknown

applyDataLabels8 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> Series a0
                 -> IO a1
applyDataLabels8 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator =
  function1 "ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            , inVariant showSeriesName
            , inVariant showCategoryName
            , inVariant showValue
            , inVariant showPercentage
            , inVariant showBubbleSize
            , inVariant separator
            ]
            outVariant

getPictureUnit23 :: Series a0
                 -> IO Double
getPictureUnit23 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit23 :: Double
                 -> Series a0
                 -> IO ()
setPictureUnit23 rhs =
  propertySet "PictureUnit2"
              [inDouble rhs]

getFormat29 :: Series a0
            -> IO (ChartFormat ())
getFormat29 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface SeriesCollection
-- 
-- --------------------------------------------------
data SeriesCollection_ a = SeriesCollection__ 
type SeriesCollection a = IDispatch (SeriesCollection_ a)
iidSeriesCollection :: IID (SeriesCollection ())
iidSeriesCollection =
  mkIID "{0002086C-0000-0000-C000-000000000046}"

queryInterface138 :: (Variant a1)
                  => GUID
                  -> SeriesCollection a0
                  -> IO a1
queryInterface138 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef138 :: SeriesCollection a0
          -> IO Word32
addRef138 =
  function1 "AddRef"
            []
            outWord32

release138 :: SeriesCollection a0
           -> IO Word32
release138 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount138 :: SeriesCollection a0
                    -> IO Word32
getTypeInfoCount138 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo138 :: (Variant a1)
               => Word32
               -> Word32
               -> SeriesCollection a0
               -> IO a1
getTypeInfo138 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames138 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SeriesCollection a0
                 -> IO Int32
getIDsOfNames138 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke138 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SeriesCollection a0
          -> IO (a1, a2, Word32)
invoke138 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication404 :: (Variant a1)
                  => SeriesCollection a0
                  -> IO a1
getApplication404 =
  propertyGet "Application"
              []
              outVariant

getCreator404 :: SeriesCollection a0
              -> IO XlCreator
getCreator404 =
  propertyGet "Creator"
              []
              outEnum

getParent419 :: SeriesCollection a0
             -> IO (IDispatch ())
getParent419 =
  propertyGet "Parent"
              []
              outIDispatch

add123 :: (Variant a2, Variant a3, Variant a4, Variant a5)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> SeriesCollection a0
       -> IO (Series ())
add123 source rowcol seriesLabels categoryLabels replace3 =
  function1 "Add"
            [ inVariant source
            , inDefaultValue (inInt32 (-4105)) inVariant rowcol
            , inVariant seriesLabels
            , inVariant categoryLabels
            , inVariant replace3
            ]
            outIDispatch

getCount176 :: SeriesCollection a0
            -> IO Int32
getCount176 =
  propertyGet "Count"
              []
              outInt32

extend0 :: (Variant a3, Variant a4)
        => a2
        -> a3
        -> a4
        -> SeriesCollection a0
        -> IO a1
extend0 source rowcol categoryLabels =
  function1 "Extend"
            [ inVariant source
            , inVariant rowcol
            , inVariant categoryLabels
            ]
            outVariant

item94 :: a1
       -> SeriesCollection a0
       -> IO (Series ())
item94 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum76 :: SeriesCollection a0
          -> IO (IUnknown ())
newEnum76 =
  function1 "_NewEnum"
            []
            outIUnknown

paste12 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
        => a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> SeriesCollection a0
        -> IO a1
paste12 rowcol seriesLabels categoryLabels replace3 newSeries0 =
  function1 "Paste"
            [ inDefaultValue (inInt32 (-4105)) inVariant rowcol
            , inVariant seriesLabels
            , inVariant categoryLabels
            , inVariant replace3
            , inVariant newSeries0
            ]
            outVariant

newSeries0 :: SeriesCollection a0
           -> IO (Series ())
newSeries0 =
  function1 "NewSeries"
            []
            outIDispatch

default15 :: a1
          -> SeriesCollection a0
          -> IO (Series ())
default15 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface DataLabel
-- 
-- --------------------------------------------------
data DataLabel_ a = DataLabel__ 
type DataLabel a = IDispatch (DataLabel_ a)
iidDataLabel :: IID (DataLabel ())
iidDataLabel = mkIID "{000208B2-0000-0000-C000-000000000046}"

queryInterface139 :: (Variant a1)
                  => GUID
                  -> DataLabel a0
                  -> IO a1
queryInterface139 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef139 :: DataLabel a0
          -> IO Word32
addRef139 =
  function1 "AddRef"
            []
            outWord32

release139 :: DataLabel a0
           -> IO Word32
release139 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount139 :: DataLabel a0
                    -> IO Word32
getTypeInfoCount139 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo139 :: (Variant a1)
               => Word32
               -> Word32
               -> DataLabel a0
               -> IO a1
getTypeInfo139 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames139 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DataLabel a0
                 -> IO Int32
getIDsOfNames139 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke139 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DataLabel a0
          -> IO (a1, a2, Word32)
invoke139 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication405 :: (Variant a1)
                  => DataLabel a0
                  -> IO a1
getApplication405 =
  propertyGet "Application"
              []
              outVariant

getCreator405 :: DataLabel a0
              -> IO XlCreator
getCreator405 =
  propertyGet "Creator"
              []
              outEnum

getParent420 :: DataLabel a0
             -> IO (IDispatch ())
getParent420 =
  propertyGet "Parent"
              []
              outIDispatch

getName121 :: DataLabel a0
           -> IO String
getName121 =
  propertyGet "Name"
              []
              outString

select136 :: DataLabel a0
          -> IO a1
select136 =
  function1 "Select"
            []
            outVariant

getBorder79 :: DataLabel a0
            -> IO (Border ())
getBorder79 =
  propertyGet "Border"
              []
              outIDispatch

delete206 :: DataLabel a0
          -> IO a1
delete206 =
  function1 "Delete"
            []
            outVariant

getInterior75 :: DataLabel a0
              -> IO (Interior ())
getInterior75 =
  propertyGet "Interior"
              []
              outIDispatch

getFill21 :: DataLabel a0
          -> IO (ChartFillFormat ())
getFill21 =
  propertyGet "Fill"
              []
              outIDispatch

getCaption75 :: DataLabel a0
             -> IO String
getCaption75 =
  propertyGet "Caption"
              []
              outString

setCaption73 :: String
             -> DataLabel a0
             -> IO ()
setCaption73 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters59 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> DataLabel a0
                -> IO (Characters ())
getCharacters59 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

getFont56 :: DataLabel a0
          -> IO (Font ())
getFont56 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment42 :: DataLabel a0
                         -> IO a1
getHorizontalAlignment42 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment42 :: a1
                         -> DataLabel a0
                         -> IO ()
setHorizontalAlignment42 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLeft105 :: DataLabel a0
           -> IO Double
getLeft105 =
  propertyGet "Left"
              []
              outDouble

setLeft99 :: Double
          -> DataLabel a0
          -> IO ()
setLeft99 rhs =
  propertySet "Left"
              [inDouble rhs]

getOrientation50 :: DataLabel a0
                 -> IO a1
getOrientation50 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation50 :: a1
                 -> DataLabel a0
                 -> IO ()
setOrientation50 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getShadow52 :: DataLabel a0
            -> IO Bool
getShadow52 =
  propertyGet "Shadow"
              []
              outBool

setShadow49 :: Bool
            -> DataLabel a0
            -> IO ()
setShadow49 rhs =
  propertySet "Shadow"
              [inBool rhs]

getText67 :: DataLabel a0
          -> IO String
getText67 =
  propertyGet "Text"
              []
              outString

setText65 :: String
          -> DataLabel a0
          -> IO ()
setText65 rhs =
  propertySet "Text"
              [inString rhs]

getTop105 :: DataLabel a0
          -> IO Double
getTop105 =
  propertyGet "Top"
              []
              outDouble

setTop99 :: Double
         -> DataLabel a0
         -> IO ()
setTop99 rhs =
  propertySet "Top"
              [inDouble rhs]

getVerticalAlignment42 :: DataLabel a0
                       -> IO a1
getVerticalAlignment42 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment42 :: a1
                       -> DataLabel a0
                       -> IO ()
setVerticalAlignment42 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder42 :: DataLabel a0
                  -> IO Int32
getReadingOrder42 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder42 :: Int32
                  -> DataLabel a0
                  -> IO ()
setReadingOrder42 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoScaleFont35 :: DataLabel a0
                   -> IO a1
getAutoScaleFont35 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont35 :: a1
                   -> DataLabel a0
                   -> IO ()
setAutoScaleFont35 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoText1 :: DataLabel a0
             -> IO Bool
getAutoText1 =
  propertyGet "AutoText"
              []
              outBool

setAutoText1 :: Bool
             -> DataLabel a0
             -> IO ()
setAutoText1 rhs =
  propertySet "AutoText"
              [inBool rhs]

getNumberFormat14 :: DataLabel a0
                  -> IO String
getNumberFormat14 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat14 :: String
                  -> DataLabel a0
                  -> IO ()
setNumberFormat14 rhs =
  propertySet "NumberFormat"
              [inString rhs]

getNumberFormatLinked2 :: DataLabel a0
                       -> IO Bool
getNumberFormatLinked2 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked2 :: Bool
                       -> DataLabel a0
                       -> IO ()
setNumberFormatLinked2 rhs =
  propertySet "NumberFormatLinked"
              [inBool rhs]

getNumberFormatLocal7 :: DataLabel a0
                      -> IO a1
getNumberFormatLocal7 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal7 :: a1
                      -> DataLabel a0
                      -> IO ()
setNumberFormatLocal7 rhs =
  propertySet "NumberFormatLocal"
              [inVariant rhs]

getShowLegendKey2 :: DataLabel a0
                  -> IO Bool
getShowLegendKey2 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey2 :: Bool
                  -> DataLabel a0
                  -> IO ()
setShowLegendKey2 rhs =
  propertySet "ShowLegendKey"
              [inBool rhs]

getType50 :: DataLabel a0
          -> IO a1
getType50 =
  propertyGet "Type"
              []
              outVariant

setType18 :: a1
          -> DataLabel a0
          -> IO ()
setType18 rhs =
  propertySet "Type"
              [inVariant rhs]

getPosition17 :: DataLabel a0
              -> IO XlDataLabelPosition
getPosition17 =
  propertyGet "Position"
              []
              outEnum

setPosition17 :: XlDataLabelPosition
              -> DataLabel a0
              -> IO ()
setPosition17 rhs =
  propertySet "Position"
              [inEnum rhs]

getShowSeriesName1 :: DataLabel a0
                   -> IO Bool
getShowSeriesName1 =
  propertyGet "ShowSeriesName"
              []
              outBool

setShowSeriesName1 :: Bool
                   -> DataLabel a0
                   -> IO ()
setShowSeriesName1 rhs =
  propertySet "ShowSeriesName"
              [inBool rhs]

getShowCategoryName1 :: DataLabel a0
                     -> IO Bool
getShowCategoryName1 =
  propertyGet "ShowCategoryName"
              []
              outBool

setShowCategoryName1 :: Bool
                     -> DataLabel a0
                     -> IO ()
setShowCategoryName1 rhs =
  propertySet "ShowCategoryName"
              [inBool rhs]

getShowValue2 :: DataLabel a0
              -> IO Bool
getShowValue2 =
  propertyGet "ShowValue"
              []
              outBool

setShowValue2 :: Bool
              -> DataLabel a0
              -> IO ()
setShowValue2 rhs =
  propertySet "ShowValue"
              [inBool rhs]

getShowPercentage1 :: DataLabel a0
                   -> IO Bool
getShowPercentage1 =
  propertyGet "ShowPercentage"
              []
              outBool

setShowPercentage1 :: Bool
                   -> DataLabel a0
                   -> IO ()
setShowPercentage1 rhs =
  propertySet "ShowPercentage"
              [inBool rhs]

getShowBubbleSize1 :: DataLabel a0
                   -> IO Bool
getShowBubbleSize1 =
  propertyGet "ShowBubbleSize"
              []
              outBool

setShowBubbleSize1 :: Bool
                   -> DataLabel a0
                   -> IO ()
setShowBubbleSize1 rhs =
  propertySet "ShowBubbleSize"
              [inBool rhs]

getSeparator1 :: DataLabel a0
              -> IO a1
getSeparator1 =
  propertyGet "Separator"
              []
              outVariant

setSeparator1 :: a1
              -> DataLabel a0
              -> IO ()
setSeparator1 rhs =
  propertySet "Separator"
              [inVariant rhs]

getFormat30 :: DataLabel a0
            -> IO (ChartFormat ())
getFormat30 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DataLabels
-- 
-- --------------------------------------------------
data DataLabels_ a = DataLabels__ 
type DataLabels a = IDispatch (DataLabels_ a)
iidDataLabels :: IID (DataLabels ())
iidDataLabels = mkIID "{000208B3-0000-0000-C000-000000000046}"

queryInterface140 :: (Variant a1)
                  => GUID
                  -> DataLabels a0
                  -> IO a1
queryInterface140 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef140 :: DataLabels a0
          -> IO Word32
addRef140 =
  function1 "AddRef"
            []
            outWord32

release140 :: DataLabels a0
           -> IO Word32
release140 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount140 :: DataLabels a0
                    -> IO Word32
getTypeInfoCount140 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo140 :: (Variant a1)
               => Word32
               -> Word32
               -> DataLabels a0
               -> IO a1
getTypeInfo140 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames140 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DataLabels a0
                 -> IO Int32
getIDsOfNames140 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke140 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DataLabels a0
          -> IO (a1, a2, Word32)
invoke140 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication406 :: (Variant a1)
                  => DataLabels a0
                  -> IO a1
getApplication406 =
  propertyGet "Application"
              []
              outVariant

getCreator406 :: DataLabels a0
              -> IO XlCreator
getCreator406 =
  propertyGet "Creator"
              []
              outEnum

getParent421 :: DataLabels a0
             -> IO (IDispatch ())
getParent421 =
  propertyGet "Parent"
              []
              outIDispatch

getName122 :: DataLabels a0
           -> IO String
getName122 =
  propertyGet "Name"
              []
              outString

select137 :: DataLabels a0
          -> IO a1
select137 =
  function1 "Select"
            []
            outVariant

getBorder80 :: DataLabels a0
            -> IO (Border ())
getBorder80 =
  propertyGet "Border"
              []
              outIDispatch

delete207 :: DataLabels a0
          -> IO a1
delete207 =
  function1 "Delete"
            []
            outVariant

getInterior76 :: DataLabels a0
              -> IO (Interior ())
getInterior76 =
  propertyGet "Interior"
              []
              outIDispatch

getFill22 :: DataLabels a0
          -> IO (ChartFillFormat ())
getFill22 =
  propertyGet "Fill"
              []
              outIDispatch

dummy93 :: DataLabels a0
        -> IO ()
dummy93 =
  method0 "_Dummy9"
          []

dummy103 :: DataLabels a0
         -> IO ()
dummy103 =
  method0 "_Dummy10"
          []

getFont57 :: DataLabels a0
          -> IO (Font ())
getFont57 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment43 :: DataLabels a0
                         -> IO a1
getHorizontalAlignment43 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment43 :: a1
                         -> DataLabels a0
                         -> IO ()
setHorizontalAlignment43 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

dummy131 :: DataLabels a0
         -> IO ()
dummy131 =
  method0 "_Dummy13"
          []

getOrientation51 :: DataLabels a0
                 -> IO a1
getOrientation51 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation51 :: a1
                 -> DataLabels a0
                 -> IO ()
setOrientation51 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getShadow53 :: DataLabels a0
            -> IO Bool
getShadow53 =
  propertyGet "Shadow"
              []
              outBool

setShadow50 :: Bool
            -> DataLabels a0
            -> IO ()
setShadow50 rhs =
  propertySet "Shadow"
              [inBool rhs]

dummy161 :: DataLabels a0
         -> IO ()
dummy161 =
  method0 "_Dummy16"
          []

dummy173 :: DataLabels a0
         -> IO ()
dummy173 =
  method0 "_Dummy17"
          []

getVerticalAlignment43 :: DataLabels a0
                       -> IO a1
getVerticalAlignment43 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment43 :: a1
                       -> DataLabels a0
                       -> IO ()
setVerticalAlignment43 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder43 :: DataLabels a0
                  -> IO Int32
getReadingOrder43 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder43 :: Int32
                  -> DataLabels a0
                  -> IO ()
setReadingOrder43 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoScaleFont36 :: DataLabels a0
                   -> IO a1
getAutoScaleFont36 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont36 :: a1
                   -> DataLabels a0
                   -> IO ()
setAutoScaleFont36 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getAutoText2 :: DataLabels a0
             -> IO Bool
getAutoText2 =
  propertyGet "AutoText"
              []
              outBool

setAutoText2 :: Bool
             -> DataLabels a0
             -> IO ()
setAutoText2 rhs =
  propertySet "AutoText"
              [inBool rhs]

getNumberFormat15 :: DataLabels a0
                  -> IO String
getNumberFormat15 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat15 :: String
                  -> DataLabels a0
                  -> IO ()
setNumberFormat15 rhs =
  propertySet "NumberFormat"
              [inString rhs]

getNumberFormatLinked3 :: DataLabels a0
                       -> IO Bool
getNumberFormatLinked3 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked3 :: Bool
                       -> DataLabels a0
                       -> IO ()
setNumberFormatLinked3 rhs =
  propertySet "NumberFormatLinked"
              [inBool rhs]

getNumberFormatLocal8 :: DataLabels a0
                      -> IO a1
getNumberFormatLocal8 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal8 :: a1
                      -> DataLabels a0
                      -> IO ()
setNumberFormatLocal8 rhs =
  propertySet "NumberFormatLocal"
              [inVariant rhs]

getShowLegendKey3 :: DataLabels a0
                  -> IO Bool
getShowLegendKey3 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey3 :: Bool
                  -> DataLabels a0
                  -> IO ()
setShowLegendKey3 rhs =
  propertySet "ShowLegendKey"
              [inBool rhs]

getType51 :: DataLabels a0
          -> IO a1
getType51 =
  propertyGet "Type"
              []
              outVariant

setType19 :: a1
          -> DataLabels a0
          -> IO ()
setType19 rhs =
  propertySet "Type"
              [inVariant rhs]

getPosition18 :: DataLabels a0
              -> IO XlDataLabelPosition
getPosition18 =
  propertyGet "Position"
              []
              outEnum

setPosition18 :: XlDataLabelPosition
              -> DataLabels a0
              -> IO ()
setPosition18 rhs =
  propertySet "Position"
              [inEnum rhs]

getShowSeriesName2 :: DataLabels a0
                   -> IO Bool
getShowSeriesName2 =
  propertyGet "ShowSeriesName"
              []
              outBool

setShowSeriesName2 :: Bool
                   -> DataLabels a0
                   -> IO ()
setShowSeriesName2 rhs =
  propertySet "ShowSeriesName"
              [inBool rhs]

getShowCategoryName2 :: DataLabels a0
                     -> IO Bool
getShowCategoryName2 =
  propertyGet "ShowCategoryName"
              []
              outBool

setShowCategoryName2 :: Bool
                     -> DataLabels a0
                     -> IO ()
setShowCategoryName2 rhs =
  propertySet "ShowCategoryName"
              [inBool rhs]

getShowValue3 :: DataLabels a0
              -> IO Bool
getShowValue3 =
  propertyGet "ShowValue"
              []
              outBool

setShowValue3 :: Bool
              -> DataLabels a0
              -> IO ()
setShowValue3 rhs =
  propertySet "ShowValue"
              [inBool rhs]

getShowPercentage2 :: DataLabels a0
                   -> IO Bool
getShowPercentage2 =
  propertyGet "ShowPercentage"
              []
              outBool

setShowPercentage2 :: Bool
                   -> DataLabels a0
                   -> IO ()
setShowPercentage2 rhs =
  propertySet "ShowPercentage"
              [inBool rhs]

getShowBubbleSize2 :: DataLabels a0
                   -> IO Bool
getShowBubbleSize2 =
  propertyGet "ShowBubbleSize"
              []
              outBool

setShowBubbleSize2 :: Bool
                   -> DataLabels a0
                   -> IO ()
setShowBubbleSize2 rhs =
  propertySet "ShowBubbleSize"
              [inBool rhs]

getSeparator2 :: DataLabels a0
              -> IO a1
getSeparator2 =
  propertyGet "Separator"
              []
              outVariant

setSeparator2 :: a1
              -> DataLabels a0
              -> IO ()
setSeparator2 rhs =
  propertySet "Separator"
              [inVariant rhs]

getCount177 :: DataLabels a0
            -> IO Int32
getCount177 =
  propertyGet "Count"
              []
              outInt32

item95 :: a1
       -> DataLabels a0
       -> IO (DataLabel ())
item95 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum77 :: DataLabels a0
          -> IO (IUnknown ())
newEnum77 =
  function1 "_NewEnum"
            []
            outIUnknown

default16 :: a1
          -> DataLabels a0
          -> IO (DataLabel ())
default16 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

getFormat31 :: DataLabels a0
            -> IO (ChartFormat ())
getFormat31 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface LegendEntry
-- 
-- --------------------------------------------------
data LegendEntry_ a = LegendEntry__ 
type LegendEntry a = IDispatch (LegendEntry_ a)
iidLegendEntry :: IID (LegendEntry ())
iidLegendEntry = mkIID "{000208BA-0000-0000-C000-000000000046}"

queryInterface141 :: (Variant a1)
                  => GUID
                  -> LegendEntry a0
                  -> IO a1
queryInterface141 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef141 :: LegendEntry a0
          -> IO Word32
addRef141 =
  function1 "AddRef"
            []
            outWord32

release141 :: LegendEntry a0
           -> IO Word32
release141 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount141 :: LegendEntry a0
                    -> IO Word32
getTypeInfoCount141 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo141 :: (Variant a1)
               => Word32
               -> Word32
               -> LegendEntry a0
               -> IO a1
getTypeInfo141 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames141 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> LegendEntry a0
                 -> IO Int32
getIDsOfNames141 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke141 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> LegendEntry a0
          -> IO (a1, a2, Word32)
invoke141 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication407 :: (Variant a1)
                  => LegendEntry a0
                  -> IO a1
getApplication407 =
  propertyGet "Application"
              []
              outVariant

getCreator407 :: LegendEntry a0
              -> IO XlCreator
getCreator407 =
  propertyGet "Creator"
              []
              outEnum

getParent422 :: LegendEntry a0
             -> IO (IDispatch ())
getParent422 =
  propertyGet "Parent"
              []
              outIDispatch

delete208 :: LegendEntry a0
          -> IO a1
delete208 =
  function1 "Delete"
            []
            outVariant

getFont58 :: LegendEntry a0
          -> IO (Font ())
getFont58 =
  propertyGet "Font"
              []
              outIDispatch

getIndex74 :: LegendEntry a0
           -> IO Int32
getIndex74 =
  propertyGet "Index"
              []
              outInt32

getLegendKey0 :: LegendEntry a0
              -> IO (LegendKey ())
getLegendKey0 =
  propertyGet "LegendKey"
              []
              outIUnknown

select138 :: LegendEntry a0
          -> IO a1
select138 =
  function1 "Select"
            []
            outVariant

getAutoScaleFont37 :: LegendEntry a0
                   -> IO a1
getAutoScaleFont37 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont37 :: a1
                   -> LegendEntry a0
                   -> IO ()
setAutoScaleFont37 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getLeft106 :: LegendEntry a0
           -> IO Double
getLeft106 =
  propertyGet "Left"
              []
              outDouble

getTop106 :: LegendEntry a0
          -> IO Double
getTop106 =
  propertyGet "Top"
              []
              outDouble

getWidth102 :: LegendEntry a0
            -> IO Double
getWidth102 =
  propertyGet "Width"
              []
              outDouble

getHeight100 :: LegendEntry a0
             -> IO Double
getHeight100 =
  propertyGet "Height"
              []
              outDouble

getFormat32 :: LegendEntry a0
            -> IO (ChartFormat ())
getFormat32 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface LegendEntries
-- 
-- --------------------------------------------------
data LegendEntries_ a = LegendEntries__ 
type LegendEntries a = IDispatch (LegendEntries_ a)
iidLegendEntries :: IID (LegendEntries ())
iidLegendEntries = mkIID "{000208BB-0000-0000-C000-000000000046}"

queryInterface142 :: (Variant a1)
                  => GUID
                  -> LegendEntries a0
                  -> IO a1
queryInterface142 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef142 :: LegendEntries a0
          -> IO Word32
addRef142 =
  function1 "AddRef"
            []
            outWord32

release142 :: LegendEntries a0
           -> IO Word32
release142 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount142 :: LegendEntries a0
                    -> IO Word32
getTypeInfoCount142 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo142 :: (Variant a1)
               => Word32
               -> Word32
               -> LegendEntries a0
               -> IO a1
getTypeInfo142 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames142 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> LegendEntries a0
                 -> IO Int32
getIDsOfNames142 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke142 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> LegendEntries a0
          -> IO (a1, a2, Word32)
invoke142 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication408 :: (Variant a1)
                  => LegendEntries a0
                  -> IO a1
getApplication408 =
  propertyGet "Application"
              []
              outVariant

getCreator408 :: LegendEntries a0
              -> IO XlCreator
getCreator408 =
  propertyGet "Creator"
              []
              outEnum

getParent423 :: LegendEntries a0
             -> IO (IDispatch ())
getParent423 =
  propertyGet "Parent"
              []
              outIDispatch

getCount178 :: LegendEntries a0
            -> IO Int32
getCount178 =
  propertyGet "Count"
              []
              outInt32

item96 :: a1
       -> LegendEntries a0
       -> IO (LegendEntry ())
item96 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

newEnum78 :: LegendEntries a0
          -> IO (IUnknown ())
newEnum78 =
  function1 "_NewEnum"
            []
            outIUnknown

default17 :: a1
          -> LegendEntries a0
          -> IO (LegendEntry ())
default17 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface LegendKey
-- 
-- --------------------------------------------------
data LegendKey_ a = LegendKey__ 
type LegendKey a = IDispatch (LegendKey_ a)
iidLegendKey :: IID (LegendKey ())
iidLegendKey = mkIID "{000208BC-0000-0000-C000-000000000046}"

queryInterface143 :: (Variant a1)
                  => GUID
                  -> LegendKey a0
                  -> IO a1
queryInterface143 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef143 :: LegendKey a0
          -> IO Word32
addRef143 =
  function1 "AddRef"
            []
            outWord32

release143 :: LegendKey a0
           -> IO Word32
release143 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount143 :: LegendKey a0
                    -> IO Word32
getTypeInfoCount143 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo143 :: (Variant a1)
               => Word32
               -> Word32
               -> LegendKey a0
               -> IO a1
getTypeInfo143 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames143 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> LegendKey a0
                 -> IO Int32
getIDsOfNames143 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke143 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> LegendKey a0
          -> IO (a1, a2, Word32)
invoke143 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication409 :: (Variant a1)
                  => LegendKey a0
                  -> IO a1
getApplication409 =
  propertyGet "Application"
              []
              outVariant

getCreator409 :: LegendKey a0
              -> IO XlCreator
getCreator409 =
  propertyGet "Creator"
              []
              outEnum

getParent424 :: LegendKey a0
             -> IO (IDispatch ())
getParent424 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder81 :: LegendKey a0
            -> IO (Border ())
getBorder81 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats12 :: LegendKey a0
               -> IO a1
clearFormats12 =
  function1 "ClearFormats"
            []
            outVariant

delete209 :: LegendKey a0
          -> IO a1
delete209 =
  function1 "Delete"
            []
            outVariant

getInterior77 :: LegendKey a0
              -> IO (Interior ())
getInterior77 =
  propertyGet "Interior"
              []
              outIDispatch

getFill23 :: LegendKey a0
          -> IO (ChartFillFormat ())
getFill23 =
  propertyGet "Fill"
              []
              outIDispatch

getInvertIfNegative6 :: LegendKey a0
                     -> IO Bool
getInvertIfNegative6 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative6 :: Bool
                     -> LegendKey a0
                     -> IO ()
setInvertIfNegative6 rhs =
  propertySet "InvertIfNegative"
              [inBool rhs]

getMarkerBackgroundColor4 :: LegendKey a0
                          -> IO Int32
getMarkerBackgroundColor4 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor4 :: Int32
                          -> LegendKey a0
                          -> IO ()
setMarkerBackgroundColor4 rhs =
  propertySet "MarkerBackgroundColor"
              [inInt32 rhs]

getMarkerBackgroundColorIndex4 :: LegendKey a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex4 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex4 :: XlColorIndex
                               -> LegendKey a0
                               -> IO ()
setMarkerBackgroundColorIndex4 rhs =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum rhs]

getMarkerForegroundColor4 :: LegendKey a0
                          -> IO Int32
getMarkerForegroundColor4 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor4 :: Int32
                          -> LegendKey a0
                          -> IO ()
setMarkerForegroundColor4 rhs =
  propertySet "MarkerForegroundColor"
              [inInt32 rhs]

getMarkerForegroundColorIndex4 :: LegendKey a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex4 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex4 :: XlColorIndex
                               -> LegendKey a0
                               -> IO ()
setMarkerForegroundColorIndex4 rhs =
  propertySet "MarkerForegroundColorIndex"
              [inEnum rhs]

getMarkerSize4 :: LegendKey a0
               -> IO Int32
getMarkerSize4 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize4 :: Int32
               -> LegendKey a0
               -> IO ()
setMarkerSize4 rhs =
  propertySet "MarkerSize"
              [inInt32 rhs]

getMarkerStyle4 :: LegendKey a0
                -> IO XlMarkerStyle
getMarkerStyle4 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle4 :: XlMarkerStyle
                -> LegendKey a0
                -> IO ()
setMarkerStyle4 rhs =
  propertySet "MarkerStyle"
              [inEnum rhs]

getPictureType6 :: LegendKey a0
                -> IO Int32
getPictureType6 =
  propertyGet "PictureType"
              []
              outInt32

setPictureType6 :: Int32
                -> LegendKey a0
                -> IO ()
setPictureType6 rhs =
  propertySet "PictureType"
              [inInt32 rhs]

getPictureUnit6 :: LegendKey a0
                -> IO Int32
getPictureUnit6 =
  propertyGet "PictureUnit"
              []
              outInt32

setPictureUnit6 :: Int32
                -> LegendKey a0
                -> IO ()
setPictureUnit6 rhs =
  propertySet "PictureUnit"
              [inInt32 rhs]

select139 :: LegendKey a0
          -> IO a1
select139 =
  function1 "Select"
            []
            outVariant

getSmooth2 :: LegendKey a0
           -> IO Bool
getSmooth2 =
  propertyGet "Smooth"
              []
              outBool

setSmooth2 :: Bool
           -> LegendKey a0
           -> IO ()
setSmooth2 rhs =
  propertySet "Smooth"
              [inBool rhs]

getLeft107 :: LegendKey a0
           -> IO Double
getLeft107 =
  propertyGet "Left"
              []
              outDouble

getTop107 :: LegendKey a0
          -> IO Double
getTop107 =
  propertyGet "Top"
              []
              outDouble

getWidth103 :: LegendKey a0
            -> IO Double
getWidth103 =
  propertyGet "Width"
              []
              outDouble

getHeight101 :: LegendKey a0
             -> IO Double
getHeight101 =
  propertyGet "Height"
              []
              outDouble

getShadow54 :: LegendKey a0
            -> IO Bool
getShadow54 =
  propertyGet "Shadow"
              []
              outBool

setShadow51 :: Bool
            -> LegendKey a0
            -> IO ()
setShadow51 rhs =
  propertySet "Shadow"
              [inBool rhs]

getPictureUnit24 :: LegendKey a0
                 -> IO Double
getPictureUnit24 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit24 :: Double
                 -> LegendKey a0
                 -> IO ()
setPictureUnit24 rhs =
  propertySet "PictureUnit2"
              [inDouble rhs]

getFormat33 :: LegendKey a0
            -> IO (ChartFormat ())
getFormat33 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Trendlines
-- 
-- --------------------------------------------------
data Trendlines_ a = Trendlines__ 
type Trendlines a = IDispatch (Trendlines_ a)
iidTrendlines :: IID (Trendlines ())
iidTrendlines = mkIID "{000208BD-0000-0000-C000-000000000046}"

queryInterface144 :: (Variant a1)
                  => GUID
                  -> Trendlines a0
                  -> IO a1
queryInterface144 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef144 :: Trendlines a0
          -> IO Word32
addRef144 =
  function1 "AddRef"
            []
            outWord32

release144 :: Trendlines a0
           -> IO Word32
release144 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount144 :: Trendlines a0
                    -> IO Word32
getTypeInfoCount144 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo144 :: (Variant a1)
               => Word32
               -> Word32
               -> Trendlines a0
               -> IO a1
getTypeInfo144 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames144 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Trendlines a0
                 -> IO Int32
getIDsOfNames144 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke144 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Trendlines a0
          -> IO (a1, a2, Word32)
invoke144 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication410 :: (Variant a1)
                  => Trendlines a0
                  -> IO a1
getApplication410 =
  propertyGet "Application"
              []
              outVariant

getCreator410 :: Trendlines a0
              -> IO XlCreator
getCreator410 =
  propertyGet "Creator"
              []
              outEnum

getParent425 :: Trendlines a0
             -> IO (IDispatch ())
getParent425 =
  propertyGet "Parent"
              []
              outIDispatch

add124 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> Trendlines a0
       -> IO (Trendline ())
add124 type0 order period forward backward intercept1 displayEquation displayRSquared name =
  function1 "Add"
            [ inDefaultValue (inInt32 (-4132)) inVariant type0
            , inVariant order
            , inVariant period
            , inVariant forward
            , inVariant backward
            , inVariant intercept1
            , inVariant displayEquation
            , inVariant displayRSquared
            , inVariant name
            ]
            outIUnknown

getCount179 :: Trendlines a0
            -> IO Int32
getCount179 =
  propertyGet "Count"
              []
              outInt32

item97 :: (Variant a1)
       => a1
       -> Trendlines a0
       -> IO (Trendline ())
item97 index1 =
  function1 "Item"
            [inVariant index1]
            outIUnknown

newEnum79 :: Trendlines a0
          -> IO (IUnknown ())
newEnum79 =
  function1 "_NewEnum"
            []
            outIUnknown

default18 :: (Variant a1)
          => a1
          -> Trendlines a0
          -> IO (Trendline ())
default18 index1 =
  function1 "_Default"
            [inVariant index1]
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Trendline
-- 
-- --------------------------------------------------
data Trendline_ a = Trendline__ 
type Trendline a = IDispatch (Trendline_ a)
iidTrendline :: IID (Trendline ())
iidTrendline = mkIID "{000208BE-0000-0000-C000-000000000046}"

queryInterface145 :: (Variant a1)
                  => GUID
                  -> Trendline a0
                  -> IO a1
queryInterface145 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef145 :: Trendline a0
          -> IO Word32
addRef145 =
  function1 "AddRef"
            []
            outWord32

release145 :: Trendline a0
           -> IO Word32
release145 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount145 :: Trendline a0
                    -> IO Word32
getTypeInfoCount145 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo145 :: (Variant a1)
               => Word32
               -> Word32
               -> Trendline a0
               -> IO a1
getTypeInfo145 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames145 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Trendline a0
                 -> IO Int32
getIDsOfNames145 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke145 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Trendline a0
          -> IO (a1, a2, Word32)
invoke145 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication411 :: (Variant a1)
                  => Trendline a0
                  -> IO a1
getApplication411 =
  propertyGet "Application"
              []
              outVariant

getCreator411 :: Trendline a0
              -> IO XlCreator
getCreator411 =
  propertyGet "Creator"
              []
              outEnum

getParent426 :: Trendline a0
             -> IO (IDispatch ())
getParent426 =
  propertyGet "Parent"
              []
              outIDispatch

getBackward0 :: Trendline a0
             -> IO Int32
getBackward0 =
  propertyGet "Backward"
              []
              outInt32

setBackward0 :: Int32
             -> Trendline a0
             -> IO ()
setBackward0 rhs =
  propertySet "Backward"
              [inInt32 rhs]

getBorder82 :: Trendline a0
            -> IO (Border ())
getBorder82 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats13 :: Trendline a0
               -> IO a1
clearFormats13 =
  function1 "ClearFormats"
            []
            outVariant

getDataLabel2 :: Trendline a0
              -> IO (DataLabel ())
getDataLabel2 =
  propertyGet "DataLabel"
              []
              outIDispatch

delete210 :: Trendline a0
          -> IO a1
delete210 =
  function1 "Delete"
            []
            outVariant

getDisplayEquation0 :: Trendline a0
                    -> IO Bool
getDisplayEquation0 =
  propertyGet "DisplayEquation"
              []
              outBool

setDisplayEquation0 :: Bool
                    -> Trendline a0
                    -> IO ()
setDisplayEquation0 rhs =
  propertySet "DisplayEquation"
              [inBool rhs]

getDisplayRSquared0 :: Trendline a0
                    -> IO Bool
getDisplayRSquared0 =
  propertyGet "DisplayRSquared"
              []
              outBool

setDisplayRSquared0 :: Bool
                    -> Trendline a0
                    -> IO ()
setDisplayRSquared0 rhs =
  propertySet "DisplayRSquared"
              [inBool rhs]

getForward0 :: Trendline a0
            -> IO Int32
getForward0 =
  propertyGet "Forward"
              []
              outInt32

setForward0 :: Int32
            -> Trendline a0
            -> IO ()
setForward0 rhs =
  propertySet "Forward"
              [inInt32 rhs]

getIndex75 :: Trendline a0
           -> IO Int32
getIndex75 =
  propertyGet "Index"
              []
              outInt32

getIntercept0 :: Trendline a0
              -> IO Double
getIntercept0 =
  propertyGet "Intercept"
              []
              outDouble

setIntercept0 :: Double
              -> Trendline a0
              -> IO ()
setIntercept0 rhs =
  propertySet "Intercept"
              [inDouble rhs]

getInterceptIsAuto0 :: Trendline a0
                    -> IO Bool
getInterceptIsAuto0 =
  propertyGet "InterceptIsAuto"
              []
              outBool

setInterceptIsAuto0 :: Bool
                    -> Trendline a0
                    -> IO ()
setInterceptIsAuto0 rhs =
  propertySet "InterceptIsAuto"
              [inBool rhs]

getName123 :: Trendline a0
           -> IO String
getName123 =
  propertyGet "Name"
              []
              outString

setName77 :: String
          -> Trendline a0
          -> IO ()
setName77 rhs =
  propertySet "Name"
              [inString rhs]

getNameIsAuto0 :: Trendline a0
               -> IO Bool
getNameIsAuto0 =
  propertyGet "NameIsAuto"
              []
              outBool

setNameIsAuto0 :: Bool
               -> Trendline a0
               -> IO ()
setNameIsAuto0 rhs =
  propertySet "NameIsAuto"
              [inBool rhs]

getOrder4 :: Trendline a0
          -> IO Int32
getOrder4 =
  propertyGet "Order"
              []
              outInt32

setOrder4 :: Int32
          -> Trendline a0
          -> IO ()
setOrder4 rhs =
  propertySet "Order"
              [inInt32 rhs]

getPeriod0 :: Trendline a0
           -> IO Int32
getPeriod0 =
  propertyGet "Period"
              []
              outInt32

setPeriod0 :: Int32
           -> Trendline a0
           -> IO ()
setPeriod0 rhs =
  propertySet "Period"
              [inInt32 rhs]

select140 :: Trendline a0
          -> IO a1
select140 =
  function1 "Select"
            []
            outVariant

getType52 :: Trendline a0
          -> IO XlTrendlineType
getType52 =
  propertyGet "Type"
              []
              outEnum

setType20 :: XlTrendlineType
          -> Trendline a0
          -> IO ()
setType20 rhs =
  propertySet "Type"
              [inEnum rhs]

getBackward20 :: Trendline a0
              -> IO Double
getBackward20 =
  propertyGet "Backward2"
              []
              outDouble

setBackward20 :: Double
              -> Trendline a0
              -> IO ()
setBackward20 rhs =
  propertySet "Backward2"
              [inDouble rhs]

getForward20 :: Trendline a0
             -> IO Double
getForward20 =
  propertyGet "Forward2"
              []
              outDouble

setForward20 :: Double
             -> Trendline a0
             -> IO ()
setForward20 rhs =
  propertySet "Forward2"
              [inDouble rhs]

getFormat34 :: Trendline a0
            -> IO (ChartFormat ())
getFormat34 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Corners
-- 
-- --------------------------------------------------
data Corners_ a = Corners__ 
type Corners a = IDispatch (Corners_ a)
iidCorners :: IID (Corners ())
iidCorners = mkIID "{000208C0-0000-0000-C000-000000000046}"

queryInterface146 :: (Variant a1)
                  => GUID
                  -> Corners a0
                  -> IO a1
queryInterface146 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef146 :: Corners a0
          -> IO Word32
addRef146 =
  function1 "AddRef"
            []
            outWord32

release146 :: Corners a0
           -> IO Word32
release146 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount146 :: Corners a0
                    -> IO Word32
getTypeInfoCount146 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo146 :: (Variant a1)
               => Word32
               -> Word32
               -> Corners a0
               -> IO a1
getTypeInfo146 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames146 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Corners a0
                 -> IO Int32
getIDsOfNames146 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke146 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Corners a0
          -> IO (a1, a2, Word32)
invoke146 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication412 :: (Variant a1)
                  => Corners a0
                  -> IO a1
getApplication412 =
  propertyGet "Application"
              []
              outVariant

getCreator412 :: Corners a0
              -> IO XlCreator
getCreator412 =
  propertyGet "Creator"
              []
              outEnum

getParent427 :: Corners a0
             -> IO (IDispatch ())
getParent427 =
  propertyGet "Parent"
              []
              outIDispatch

getName124 :: Corners a0
           -> IO String
getName124 =
  propertyGet "Name"
              []
              outString

select141 :: Corners a0
          -> IO a1
select141 =
  function1 "Select"
            []
            outVariant

-- --------------------------------------------------
-- 
-- dispinterface SeriesLines
-- 
-- --------------------------------------------------
data SeriesLines_ a = SeriesLines__ 
type SeriesLines a = IDispatch (SeriesLines_ a)
iidSeriesLines :: IID (SeriesLines ())
iidSeriesLines = mkIID "{000208C1-0000-0000-C000-000000000046}"

queryInterface147 :: (Variant a1)
                  => GUID
                  -> SeriesLines a0
                  -> IO a1
queryInterface147 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef147 :: SeriesLines a0
          -> IO Word32
addRef147 =
  function1 "AddRef"
            []
            outWord32

release147 :: SeriesLines a0
           -> IO Word32
release147 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount147 :: SeriesLines a0
                    -> IO Word32
getTypeInfoCount147 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo147 :: (Variant a1)
               => Word32
               -> Word32
               -> SeriesLines a0
               -> IO a1
getTypeInfo147 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames147 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SeriesLines a0
                 -> IO Int32
getIDsOfNames147 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke147 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SeriesLines a0
          -> IO (a1, a2, Word32)
invoke147 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication413 :: (Variant a1)
                  => SeriesLines a0
                  -> IO a1
getApplication413 =
  propertyGet "Application"
              []
              outVariant

getCreator413 :: SeriesLines a0
              -> IO XlCreator
getCreator413 =
  propertyGet "Creator"
              []
              outEnum

getParent428 :: SeriesLines a0
             -> IO (IDispatch ())
getParent428 =
  propertyGet "Parent"
              []
              outIDispatch

getName125 :: SeriesLines a0
           -> IO String
getName125 =
  propertyGet "Name"
              []
              outString

select142 :: SeriesLines a0
          -> IO a1
select142 =
  function1 "Select"
            []
            outVariant

getBorder83 :: SeriesLines a0
            -> IO (Border ())
getBorder83 =
  propertyGet "Border"
              []
              outIDispatch

delete211 :: SeriesLines a0
          -> IO a1
delete211 =
  function1 "Delete"
            []
            outVariant

getFormat35 :: SeriesLines a0
            -> IO (ChartFormat ())
getFormat35 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface HiLoLines
-- 
-- --------------------------------------------------
data HiLoLines_ a = HiLoLines__ 
type HiLoLines a = IDispatch (HiLoLines_ a)
iidHiLoLines :: IID (HiLoLines ())
iidHiLoLines = mkIID "{000208C2-0000-0000-C000-000000000046}"

queryInterface148 :: (Variant a1)
                  => GUID
                  -> HiLoLines a0
                  -> IO a1
queryInterface148 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef148 :: HiLoLines a0
          -> IO Word32
addRef148 =
  function1 "AddRef"
            []
            outWord32

release148 :: HiLoLines a0
           -> IO Word32
release148 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount148 :: HiLoLines a0
                    -> IO Word32
getTypeInfoCount148 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo148 :: (Variant a1)
               => Word32
               -> Word32
               -> HiLoLines a0
               -> IO a1
getTypeInfo148 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames148 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> HiLoLines a0
                 -> IO Int32
getIDsOfNames148 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke148 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> HiLoLines a0
          -> IO (a1, a2, Word32)
invoke148 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication414 :: (Variant a1)
                  => HiLoLines a0
                  -> IO a1
getApplication414 =
  propertyGet "Application"
              []
              outVariant

getCreator414 :: HiLoLines a0
              -> IO XlCreator
getCreator414 =
  propertyGet "Creator"
              []
              outEnum

getParent429 :: HiLoLines a0
             -> IO (IDispatch ())
getParent429 =
  propertyGet "Parent"
              []
              outIDispatch

getName126 :: HiLoLines a0
           -> IO String
getName126 =
  propertyGet "Name"
              []
              outString

select143 :: HiLoLines a0
          -> IO a1
select143 =
  function1 "Select"
            []
            outVariant

getBorder84 :: HiLoLines a0
            -> IO (Border ())
getBorder84 =
  propertyGet "Border"
              []
              outIDispatch

delete212 :: HiLoLines a0
          -> IO a1
delete212 =
  function1 "Delete"
            []
            outVariant

getFormat36 :: HiLoLines a0
            -> IO (ChartFormat ())
getFormat36 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Gridlines
-- 
-- --------------------------------------------------
data Gridlines_ a = Gridlines__ 
type Gridlines a = IDispatch (Gridlines_ a)
iidGridlines :: IID (Gridlines ())
iidGridlines = mkIID "{000208C3-0000-0000-C000-000000000046}"

queryInterface149 :: (Variant a1)
                  => GUID
                  -> Gridlines a0
                  -> IO a1
queryInterface149 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef149 :: Gridlines a0
          -> IO Word32
addRef149 =
  function1 "AddRef"
            []
            outWord32

release149 :: Gridlines a0
           -> IO Word32
release149 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount149 :: Gridlines a0
                    -> IO Word32
getTypeInfoCount149 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo149 :: (Variant a1)
               => Word32
               -> Word32
               -> Gridlines a0
               -> IO a1
getTypeInfo149 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames149 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Gridlines a0
                 -> IO Int32
getIDsOfNames149 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke149 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Gridlines a0
          -> IO (a1, a2, Word32)
invoke149 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication415 :: (Variant a1)
                  => Gridlines a0
                  -> IO a1
getApplication415 =
  propertyGet "Application"
              []
              outVariant

getCreator415 :: Gridlines a0
              -> IO XlCreator
getCreator415 =
  propertyGet "Creator"
              []
              outEnum

getParent430 :: Gridlines a0
             -> IO (IDispatch ())
getParent430 =
  propertyGet "Parent"
              []
              outIDispatch

getName127 :: Gridlines a0
           -> IO String
getName127 =
  propertyGet "Name"
              []
              outString

select144 :: Gridlines a0
          -> IO a1
select144 =
  function1 "Select"
            []
            outVariant

getBorder85 :: Gridlines a0
            -> IO (Border ())
getBorder85 =
  propertyGet "Border"
              []
              outIDispatch

delete213 :: Gridlines a0
          -> IO a1
delete213 =
  function1 "Delete"
            []
            outVariant

getFormat37 :: Gridlines a0
            -> IO (ChartFormat ())
getFormat37 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DropLines
-- 
-- --------------------------------------------------
data DropLines_ a = DropLines__ 
type DropLines a = IDispatch (DropLines_ a)
iidDropLines :: IID (DropLines ())
iidDropLines = mkIID "{000208C4-0000-0000-C000-000000000046}"

queryInterface150 :: (Variant a1)
                  => GUID
                  -> DropLines a0
                  -> IO a1
queryInterface150 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef150 :: DropLines a0
          -> IO Word32
addRef150 =
  function1 "AddRef"
            []
            outWord32

release150 :: DropLines a0
           -> IO Word32
release150 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount150 :: DropLines a0
                    -> IO Word32
getTypeInfoCount150 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo150 :: (Variant a1)
               => Word32
               -> Word32
               -> DropLines a0
               -> IO a1
getTypeInfo150 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames150 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DropLines a0
                 -> IO Int32
getIDsOfNames150 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke150 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DropLines a0
          -> IO (a1, a2, Word32)
invoke150 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication416 :: (Variant a1)
                  => DropLines a0
                  -> IO a1
getApplication416 =
  propertyGet "Application"
              []
              outVariant

getCreator416 :: DropLines a0
              -> IO XlCreator
getCreator416 =
  propertyGet "Creator"
              []
              outEnum

getParent431 :: DropLines a0
             -> IO (IDispatch ())
getParent431 =
  propertyGet "Parent"
              []
              outIDispatch

getName128 :: DropLines a0
           -> IO String
getName128 =
  propertyGet "Name"
              []
              outString

select145 :: DropLines a0
          -> IO a1
select145 =
  function1 "Select"
            []
            outVariant

getBorder86 :: DropLines a0
            -> IO (Border ())
getBorder86 =
  propertyGet "Border"
              []
              outIDispatch

delete214 :: DropLines a0
          -> IO a1
delete214 =
  function1 "Delete"
            []
            outVariant

getFormat38 :: DropLines a0
            -> IO (ChartFormat ())
getFormat38 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface LeaderLines
-- 
-- --------------------------------------------------
data LeaderLines_ a = LeaderLines__ 
type LeaderLines a = IDispatch (LeaderLines_ a)
iidLeaderLines :: IID (LeaderLines ())
iidLeaderLines = mkIID "{00024437-0000-0000-C000-000000000046}"

queryInterface151 :: (Variant a1)
                  => GUID
                  -> LeaderLines a0
                  -> IO a1
queryInterface151 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef151 :: LeaderLines a0
          -> IO Word32
addRef151 =
  function1 "AddRef"
            []
            outWord32

release151 :: LeaderLines a0
           -> IO Word32
release151 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount151 :: LeaderLines a0
                    -> IO Word32
getTypeInfoCount151 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo151 :: (Variant a1)
               => Word32
               -> Word32
               -> LeaderLines a0
               -> IO a1
getTypeInfo151 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames151 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> LeaderLines a0
                 -> IO Int32
getIDsOfNames151 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke151 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> LeaderLines a0
          -> IO (a1, a2, Word32)
invoke151 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication417 :: (Variant a1)
                  => LeaderLines a0
                  -> IO a1
getApplication417 =
  propertyGet "Application"
              []
              outVariant

getCreator417 :: LeaderLines a0
              -> IO XlCreator
getCreator417 =
  propertyGet "Creator"
              []
              outEnum

getParent432 :: LeaderLines a0
             -> IO (IDispatch ())
getParent432 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder87 :: LeaderLines a0
            -> IO (Border ())
getBorder87 =
  propertyGet "Border"
              []
              outIDispatch

delete215 :: LeaderLines a0
          -> IO ()
delete215 =
  method0 "Delete"
          []

select146 :: LeaderLines a0
          -> IO ()
select146 =
  method0 "Select"
          []

getFormat39 :: LeaderLines a0
            -> IO (ChartFormat ())
getFormat39 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface UpBars
-- 
-- --------------------------------------------------
data UpBars_ a = UpBars__ 
type UpBars a = IDispatch (UpBars_ a)
iidUpBars :: IID (UpBars ())
iidUpBars = mkIID "{000208C5-0000-0000-C000-000000000046}"

queryInterface152 :: (Variant a1)
                  => GUID
                  -> UpBars a0
                  -> IO a1
queryInterface152 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef152 :: UpBars a0
          -> IO Word32
addRef152 =
  function1 "AddRef"
            []
            outWord32

release152 :: UpBars a0
           -> IO Word32
release152 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount152 :: UpBars a0
                    -> IO Word32
getTypeInfoCount152 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo152 :: (Variant a1)
               => Word32
               -> Word32
               -> UpBars a0
               -> IO a1
getTypeInfo152 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames152 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> UpBars a0
                 -> IO Int32
getIDsOfNames152 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke152 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> UpBars a0
          -> IO (a1, a2, Word32)
invoke152 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication418 :: (Variant a1)
                  => UpBars a0
                  -> IO a1
getApplication418 =
  propertyGet "Application"
              []
              outVariant

getCreator418 :: UpBars a0
              -> IO XlCreator
getCreator418 =
  propertyGet "Creator"
              []
              outEnum

getParent433 :: UpBars a0
             -> IO (IDispatch ())
getParent433 =
  propertyGet "Parent"
              []
              outIDispatch

getName129 :: UpBars a0
           -> IO String
getName129 =
  propertyGet "Name"
              []
              outString

select147 :: UpBars a0
          -> IO a1
select147 =
  function1 "Select"
            []
            outVariant

getBorder88 :: UpBars a0
            -> IO (Border ())
getBorder88 =
  propertyGet "Border"
              []
              outIDispatch

delete216 :: UpBars a0
          -> IO a1
delete216 =
  function1 "Delete"
            []
            outVariant

getInterior78 :: UpBars a0
              -> IO (Interior ())
getInterior78 =
  propertyGet "Interior"
              []
              outIDispatch

getFill24 :: UpBars a0
          -> IO (ChartFillFormat ())
getFill24 =
  propertyGet "Fill"
              []
              outIDispatch

getFormat40 :: UpBars a0
            -> IO (ChartFormat ())
getFormat40 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DownBars
-- 
-- --------------------------------------------------
data DownBars_ a = DownBars__ 
type DownBars a = IDispatch (DownBars_ a)
iidDownBars :: IID (DownBars ())
iidDownBars = mkIID "{000208C6-0000-0000-C000-000000000046}"

queryInterface153 :: (Variant a1)
                  => GUID
                  -> DownBars a0
                  -> IO a1
queryInterface153 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef153 :: DownBars a0
          -> IO Word32
addRef153 =
  function1 "AddRef"
            []
            outWord32

release153 :: DownBars a0
           -> IO Word32
release153 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount153 :: DownBars a0
                    -> IO Word32
getTypeInfoCount153 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo153 :: (Variant a1)
               => Word32
               -> Word32
               -> DownBars a0
               -> IO a1
getTypeInfo153 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames153 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DownBars a0
                 -> IO Int32
getIDsOfNames153 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke153 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DownBars a0
          -> IO (a1, a2, Word32)
invoke153 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication419 :: (Variant a1)
                  => DownBars a0
                  -> IO a1
getApplication419 =
  propertyGet "Application"
              []
              outVariant

getCreator419 :: DownBars a0
              -> IO XlCreator
getCreator419 =
  propertyGet "Creator"
              []
              outEnum

getParent434 :: DownBars a0
             -> IO (IDispatch ())
getParent434 =
  propertyGet "Parent"
              []
              outIDispatch

getName130 :: DownBars a0
           -> IO String
getName130 =
  propertyGet "Name"
              []
              outString

select148 :: DownBars a0
          -> IO a1
select148 =
  function1 "Select"
            []
            outVariant

getBorder89 :: DownBars a0
            -> IO (Border ())
getBorder89 =
  propertyGet "Border"
              []
              outIDispatch

delete217 :: DownBars a0
          -> IO a1
delete217 =
  function1 "Delete"
            []
            outVariant

getInterior79 :: DownBars a0
              -> IO (Interior ())
getInterior79 =
  propertyGet "Interior"
              []
              outIDispatch

getFill25 :: DownBars a0
          -> IO (ChartFillFormat ())
getFill25 =
  propertyGet "Fill"
              []
              outIDispatch

getFormat41 :: DownBars a0
            -> IO (ChartFormat ())
getFormat41 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Floor
-- 
-- --------------------------------------------------
data Floor_ a = Floor__ 
type Floor a = IDispatch (Floor_ a)
iidFloor :: IID (Floor ())
iidFloor = mkIID "{000208C7-0000-0000-C000-000000000046}"

queryInterface154 :: (Variant a1)
                  => GUID
                  -> Floor a0
                  -> IO a1
queryInterface154 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef154 :: Floor a0
          -> IO Word32
addRef154 =
  function1 "AddRef"
            []
            outWord32

release154 :: Floor a0
           -> IO Word32
release154 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount154 :: Floor a0
                    -> IO Word32
getTypeInfoCount154 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo154 :: (Variant a1)
               => Word32
               -> Word32
               -> Floor a0
               -> IO a1
getTypeInfo154 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames154 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Floor a0
                 -> IO Int32
getIDsOfNames154 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke154 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Floor a0
          -> IO (a1, a2, Word32)
invoke154 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication420 :: (Variant a1)
                  => Floor a0
                  -> IO a1
getApplication420 =
  propertyGet "Application"
              []
              outVariant

getCreator420 :: Floor a0
              -> IO XlCreator
getCreator420 =
  propertyGet "Creator"
              []
              outEnum

getParent435 :: Floor a0
             -> IO (IDispatch ())
getParent435 =
  propertyGet "Parent"
              []
              outIDispatch

getName131 :: Floor a0
           -> IO String
getName131 =
  propertyGet "Name"
              []
              outString

select149 :: Floor a0
          -> IO a1
select149 =
  function1 "Select"
            []
            outVariant

getBorder90 :: Floor a0
            -> IO (Border ())
getBorder90 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats14 :: Floor a0
               -> IO a1
clearFormats14 =
  function1 "ClearFormats"
            []
            outVariant

getInterior80 :: Floor a0
              -> IO (Interior ())
getInterior80 =
  propertyGet "Interior"
              []
              outIDispatch

getFill26 :: Floor a0
          -> IO (ChartFillFormat ())
getFill26 =
  propertyGet "Fill"
              []
              outIDispatch

getPictureType7 :: Floor a0
                -> IO a1
getPictureType7 =
  propertyGet "PictureType"
              []
              outVariant

setPictureType7 :: a1
                -> Floor a0
                -> IO ()
setPictureType7 rhs =
  propertySet "PictureType"
              [inVariant rhs]

paste13 :: Floor a0
        -> IO ()
paste13 =
  method0 "Paste"
          []

getThickness1 :: Floor a0
              -> IO Int32
getThickness1 =
  propertyGet "Thickness"
              []
              outInt32

setThickness1 :: Int32
              -> Floor a0
              -> IO ()
setThickness1 rhs =
  propertySet "Thickness"
              [inInt32 rhs]

getFormat42 :: Floor a0
            -> IO (ChartFormat ())
getFormat42 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Walls
-- 
-- --------------------------------------------------
data Walls_ a = Walls__ 
type Walls a = IDispatch (Walls_ a)
iidWalls :: IID (Walls ())
iidWalls = mkIID "{000208C8-0000-0000-C000-000000000046}"

queryInterface155 :: (Variant a1)
                  => GUID
                  -> Walls a0
                  -> IO a1
queryInterface155 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef155 :: Walls a0
          -> IO Word32
addRef155 =
  function1 "AddRef"
            []
            outWord32

release155 :: Walls a0
           -> IO Word32
release155 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount155 :: Walls a0
                    -> IO Word32
getTypeInfoCount155 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo155 :: (Variant a1)
               => Word32
               -> Word32
               -> Walls a0
               -> IO a1
getTypeInfo155 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames155 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Walls a0
                 -> IO Int32
getIDsOfNames155 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke155 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Walls a0
          -> IO (a1, a2, Word32)
invoke155 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication421 :: (Variant a1)
                  => Walls a0
                  -> IO a1
getApplication421 =
  propertyGet "Application"
              []
              outVariant

getCreator421 :: Walls a0
              -> IO XlCreator
getCreator421 =
  propertyGet "Creator"
              []
              outEnum

getParent436 :: Walls a0
             -> IO (IDispatch ())
getParent436 =
  propertyGet "Parent"
              []
              outIDispatch

getName132 :: Walls a0
           -> IO String
getName132 =
  propertyGet "Name"
              []
              outString

select150 :: Walls a0
          -> IO a1
select150 =
  function1 "Select"
            []
            outVariant

getBorder91 :: Walls a0
            -> IO (Border ())
getBorder91 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats15 :: Walls a0
               -> IO a1
clearFormats15 =
  function1 "ClearFormats"
            []
            outVariant

getInterior81 :: Walls a0
              -> IO (Interior ())
getInterior81 =
  propertyGet "Interior"
              []
              outIDispatch

getFill27 :: Walls a0
          -> IO (ChartFillFormat ())
getFill27 =
  propertyGet "Fill"
              []
              outIDispatch

getPictureType8 :: Walls a0
                -> IO a1
getPictureType8 =
  propertyGet "PictureType"
              []
              outVariant

setPictureType8 :: a1
                -> Walls a0
                -> IO ()
setPictureType8 rhs =
  propertySet "PictureType"
              [inVariant rhs]

paste14 :: Walls a0
        -> IO ()
paste14 =
  method0 "Paste"
          []

getPictureUnit7 :: Walls a0
                -> IO a1
getPictureUnit7 =
  propertyGet "PictureUnit"
              []
              outVariant

setPictureUnit7 :: a1
                -> Walls a0
                -> IO ()
setPictureUnit7 rhs =
  propertySet "PictureUnit"
              [inVariant rhs]

getThickness2 :: Walls a0
              -> IO Int32
getThickness2 =
  propertyGet "Thickness"
              []
              outInt32

setThickness2 :: Int32
              -> Walls a0
              -> IO ()
setThickness2 rhs =
  propertySet "Thickness"
              [inInt32 rhs]

getFormat43 :: Walls a0
            -> IO (ChartFormat ())
getFormat43 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface TickLabels
-- 
-- --------------------------------------------------
data TickLabels_ a = TickLabels__ 
type TickLabels a = IDispatch (TickLabels_ a)
iidTickLabels :: IID (TickLabels ())
iidTickLabels = mkIID "{000208C9-0000-0000-C000-000000000046}"

queryInterface156 :: (Variant a1)
                  => GUID
                  -> TickLabels a0
                  -> IO a1
queryInterface156 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef156 :: TickLabels a0
          -> IO Word32
addRef156 =
  function1 "AddRef"
            []
            outWord32

release156 :: TickLabels a0
           -> IO Word32
release156 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount156 :: TickLabels a0
                    -> IO Word32
getTypeInfoCount156 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo156 :: (Variant a1)
               => Word32
               -> Word32
               -> TickLabels a0
               -> IO a1
getTypeInfo156 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames156 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> TickLabels a0
                 -> IO Int32
getIDsOfNames156 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke156 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> TickLabels a0
          -> IO (a1, a2, Word32)
invoke156 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication422 :: (Variant a1)
                  => TickLabels a0
                  -> IO a1
getApplication422 =
  propertyGet "Application"
              []
              outVariant

getCreator422 :: TickLabels a0
              -> IO XlCreator
getCreator422 =
  propertyGet "Creator"
              []
              outEnum

getParent437 :: TickLabels a0
             -> IO (IDispatch ())
getParent437 =
  propertyGet "Parent"
              []
              outIDispatch

delete218 :: TickLabels a0
          -> IO a1
delete218 =
  function1 "Delete"
            []
            outVariant

getFont59 :: TickLabels a0
          -> IO (Font ())
getFont59 =
  propertyGet "Font"
              []
              outIDispatch

getName133 :: TickLabels a0
           -> IO String
getName133 =
  propertyGet "Name"
              []
              outString

getNumberFormat16 :: TickLabels a0
                  -> IO String
getNumberFormat16 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat16 :: String
                  -> TickLabels a0
                  -> IO ()
setNumberFormat16 rhs =
  propertySet "NumberFormat"
              [inString rhs]

getNumberFormatLinked4 :: TickLabels a0
                       -> IO Bool
getNumberFormatLinked4 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked4 :: Bool
                       -> TickLabels a0
                       -> IO ()
setNumberFormatLinked4 rhs =
  propertySet "NumberFormatLinked"
              [inBool rhs]

getNumberFormatLocal9 :: TickLabels a0
                      -> IO a1
getNumberFormatLocal9 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal9 :: a1
                      -> TickLabels a0
                      -> IO ()
setNumberFormatLocal9 rhs =
  propertySet "NumberFormatLocal"
              [inVariant rhs]

getOrientation52 :: TickLabels a0
                 -> IO XlTickLabelOrientation
getOrientation52 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation52 :: XlTickLabelOrientation
                 -> TickLabels a0
                 -> IO ()
setOrientation52 rhs =
  propertySet "Orientation"
              [inEnum rhs]

select151 :: TickLabels a0
          -> IO a1
select151 =
  function1 "Select"
            []
            outVariant

getReadingOrder44 :: TickLabels a0
                  -> IO Int32
getReadingOrder44 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder44 :: Int32
                  -> TickLabels a0
                  -> IO ()
setReadingOrder44 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoScaleFont38 :: TickLabels a0
                   -> IO a1
getAutoScaleFont38 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont38 :: a1
                   -> TickLabels a0
                   -> IO ()
setAutoScaleFont38 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getDepth1 :: TickLabels a0
          -> IO Int32
getDepth1 =
  propertyGet "Depth"
              []
              outInt32

getOffset2 :: TickLabels a0
           -> IO Int32
getOffset2 =
  propertyGet "Offset"
              []
              outInt32

setOffset0 :: Int32
           -> TickLabels a0
           -> IO ()
setOffset0 rhs =
  propertySet "Offset"
              [inInt32 rhs]

getAlignment3 :: TickLabels a0
              -> IO Int32
getAlignment3 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment3 :: Int32
              -> TickLabels a0
              -> IO ()
setAlignment3 rhs =
  propertySet "Alignment"
              [inInt32 rhs]

getMultiLevel0 :: TickLabels a0
               -> IO Bool
getMultiLevel0 =
  propertyGet "MultiLevel"
              []
              outBool

setMultiLevel0 :: Bool
               -> TickLabels a0
               -> IO ()
setMultiLevel0 rhs =
  propertySet "MultiLevel"
              [inBool rhs]

getFormat44 :: TickLabels a0
            -> IO (ChartFormat ())
getFormat44 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface PlotArea
-- 
-- --------------------------------------------------
data PlotArea_ a = PlotArea__ 
type PlotArea a = IDispatch (PlotArea_ a)
iidPlotArea :: IID (PlotArea ())
iidPlotArea = mkIID "{000208CB-0000-0000-C000-000000000046}"

queryInterface157 :: (Variant a1)
                  => GUID
                  -> PlotArea a0
                  -> IO a1
queryInterface157 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef157 :: PlotArea a0
          -> IO Word32
addRef157 =
  function1 "AddRef"
            []
            outWord32

release157 :: PlotArea a0
           -> IO Word32
release157 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount157 :: PlotArea a0
                    -> IO Word32
getTypeInfoCount157 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo157 :: (Variant a1)
               => Word32
               -> Word32
               -> PlotArea a0
               -> IO a1
getTypeInfo157 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames157 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PlotArea a0
                 -> IO Int32
getIDsOfNames157 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke157 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PlotArea a0
          -> IO (a1, a2, Word32)
invoke157 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication423 :: (Variant a1)
                  => PlotArea a0
                  -> IO a1
getApplication423 =
  propertyGet "Application"
              []
              outVariant

getCreator423 :: PlotArea a0
              -> IO XlCreator
getCreator423 =
  propertyGet "Creator"
              []
              outEnum

getParent438 :: PlotArea a0
             -> IO (IDispatch ())
getParent438 =
  propertyGet "Parent"
              []
              outIDispatch

getName134 :: PlotArea a0
           -> IO String
getName134 =
  propertyGet "Name"
              []
              outString

select152 :: PlotArea a0
          -> IO a1
select152 =
  function1 "Select"
            []
            outVariant

getBorder92 :: PlotArea a0
            -> IO (Border ())
getBorder92 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats16 :: PlotArea a0
               -> IO a1
clearFormats16 =
  function1 "ClearFormats"
            []
            outVariant

getHeight102 :: PlotArea a0
             -> IO Double
getHeight102 =
  propertyGet "Height"
              []
              outDouble

setHeight94 :: Double
            -> PlotArea a0
            -> IO ()
setHeight94 rhs =
  propertySet "Height"
              [inDouble rhs]

getInterior82 :: PlotArea a0
              -> IO (Interior ())
getInterior82 =
  propertyGet "Interior"
              []
              outIDispatch

getFill28 :: PlotArea a0
          -> IO (ChartFillFormat ())
getFill28 =
  propertyGet "Fill"
              []
              outIDispatch

getLeft108 :: PlotArea a0
           -> IO Double
getLeft108 =
  propertyGet "Left"
              []
              outDouble

setLeft100 :: Double
           -> PlotArea a0
           -> IO ()
setLeft100 rhs =
  propertySet "Left"
              [inDouble rhs]

getTop108 :: PlotArea a0
          -> IO Double
getTop108 =
  propertyGet "Top"
              []
              outDouble

setTop100 :: Double
          -> PlotArea a0
          -> IO ()
setTop100 rhs =
  propertySet "Top"
              [inDouble rhs]

getWidth104 :: PlotArea a0
            -> IO Double
getWidth104 =
  propertyGet "Width"
              []
              outDouble

setWidth96 :: Double
           -> PlotArea a0
           -> IO ()
setWidth96 rhs =
  propertySet "Width"
              [inDouble rhs]

getInsideLeft1 :: PlotArea a0
               -> IO Double
getInsideLeft1 =
  propertyGet "_InsideLeft"
              []
              outDouble

getInsideTop1 :: PlotArea a0
              -> IO Double
getInsideTop1 =
  propertyGet "_InsideTop"
              []
              outDouble

getInsideWidth1 :: PlotArea a0
                -> IO Double
getInsideWidth1 =
  propertyGet "_InsideWidth"
              []
              outDouble

getInsideHeight1 :: PlotArea a0
                 -> IO Double
getInsideHeight1 =
  propertyGet "_InsideHeight"
              []
              outDouble

getInsideLeft2 :: PlotArea a0
               -> IO Double
getInsideLeft2 =
  propertyGet "InsideLeft"
              []
              outDouble

setInsideLeft0 :: Double
               -> PlotArea a0
               -> IO ()
setInsideLeft0 rhs =
  propertySet "InsideLeft"
              [inDouble rhs]

getInsideTop2 :: PlotArea a0
              -> IO Double
getInsideTop2 =
  propertyGet "InsideTop"
              []
              outDouble

setInsideTop0 :: Double
              -> PlotArea a0
              -> IO ()
setInsideTop0 rhs =
  propertySet "InsideTop"
              [inDouble rhs]

getInsideWidth2 :: PlotArea a0
                -> IO Double
getInsideWidth2 =
  propertyGet "InsideWidth"
              []
              outDouble

setInsideWidth0 :: Double
                -> PlotArea a0
                -> IO ()
setInsideWidth0 rhs =
  propertySet "InsideWidth"
              [inDouble rhs]

getInsideHeight2 :: PlotArea a0
                 -> IO Double
getInsideHeight2 =
  propertyGet "InsideHeight"
              []
              outDouble

setInsideHeight0 :: Double
                 -> PlotArea a0
                 -> IO ()
setInsideHeight0 rhs =
  propertySet "InsideHeight"
              [inDouble rhs]

getPosition19 :: PlotArea a0
              -> IO XlChartElementPosition
getPosition19 =
  propertyGet "Position"
              []
              outEnum

setPosition19 :: XlChartElementPosition
              -> PlotArea a0
              -> IO ()
setPosition19 rhs =
  propertySet "Position"
              [inEnum rhs]

getFormat45 :: PlotArea a0
            -> IO (ChartFormat ())
getFormat45 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ChartArea
-- 
-- --------------------------------------------------
data ChartArea_ a = ChartArea__ 
type ChartArea a = IDispatch (ChartArea_ a)
iidChartArea :: IID (ChartArea ())
iidChartArea = mkIID "{000208CC-0000-0000-C000-000000000046}"

queryInterface158 :: (Variant a1)
                  => GUID
                  -> ChartArea a0
                  -> IO a1
queryInterface158 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef158 :: ChartArea a0
          -> IO Word32
addRef158 =
  function1 "AddRef"
            []
            outWord32

release158 :: ChartArea a0
           -> IO Word32
release158 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount158 :: ChartArea a0
                    -> IO Word32
getTypeInfoCount158 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo158 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartArea a0
               -> IO a1
getTypeInfo158 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames158 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartArea a0
                 -> IO Int32
getIDsOfNames158 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke158 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartArea a0
          -> IO (a1, a2, Word32)
invoke158 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication424 :: (Variant a1)
                  => ChartArea a0
                  -> IO a1
getApplication424 =
  propertyGet "Application"
              []
              outVariant

getCreator424 :: ChartArea a0
              -> IO XlCreator
getCreator424 =
  propertyGet "Creator"
              []
              outEnum

getParent439 :: ChartArea a0
             -> IO (IDispatch ())
getParent439 =
  propertyGet "Parent"
              []
              outIDispatch

getName135 :: ChartArea a0
           -> IO String
getName135 =
  propertyGet "Name"
              []
              outString

select153 :: ChartArea a0
          -> IO a1
select153 =
  function1 "Select"
            []
            outVariant

getBorder93 :: ChartArea a0
            -> IO (Border ())
getBorder93 =
  propertyGet "Border"
              []
              outIDispatch

clear8 :: ChartArea a0
       -> IO a1
clear8 =
  function1 "Clear"
            []
            outVariant

clearContents2 :: ChartArea a0
               -> IO a1
clearContents2 =
  function1 "ClearContents"
            []
            outVariant

copy110 :: ChartArea a0
        -> IO a1
copy110 =
  function1 "Copy"
            []
            outVariant

getFont60 :: ChartArea a0
          -> IO (Font ())
getFont60 =
  propertyGet "Font"
              []
              outIDispatch

getShadow55 :: ChartArea a0
            -> IO Bool
getShadow55 =
  propertyGet "Shadow"
              []
              outBool

setShadow52 :: Bool
            -> ChartArea a0
            -> IO ()
setShadow52 rhs =
  propertySet "Shadow"
              [inBool rhs]

clearFormats17 :: ChartArea a0
               -> IO a1
clearFormats17 =
  function1 "ClearFormats"
            []
            outVariant

getHeight103 :: ChartArea a0
             -> IO Double
getHeight103 =
  propertyGet "Height"
              []
              outDouble

setHeight95 :: Double
            -> ChartArea a0
            -> IO ()
setHeight95 rhs =
  propertySet "Height"
              [inDouble rhs]

getInterior83 :: ChartArea a0
              -> IO (Interior ())
getInterior83 =
  propertyGet "Interior"
              []
              outIDispatch

getFill29 :: ChartArea a0
          -> IO (ChartFillFormat ())
getFill29 =
  propertyGet "Fill"
              []
              outIDispatch

getLeft109 :: ChartArea a0
           -> IO Double
getLeft109 =
  propertyGet "Left"
              []
              outDouble

setLeft101 :: Double
           -> ChartArea a0
           -> IO ()
setLeft101 rhs =
  propertySet "Left"
              [inDouble rhs]

getTop109 :: ChartArea a0
          -> IO Double
getTop109 =
  propertyGet "Top"
              []
              outDouble

setTop101 :: Double
          -> ChartArea a0
          -> IO ()
setTop101 rhs =
  propertySet "Top"
              [inDouble rhs]

getWidth105 :: ChartArea a0
            -> IO Double
getWidth105 =
  propertyGet "Width"
              []
              outDouble

setWidth97 :: Double
           -> ChartArea a0
           -> IO ()
setWidth97 rhs =
  propertySet "Width"
              [inDouble rhs]

getAutoScaleFont39 :: ChartArea a0
                   -> IO a1
getAutoScaleFont39 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont39 :: a1
                   -> ChartArea a0
                   -> IO ()
setAutoScaleFont39 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getFormat46 :: ChartArea a0
            -> IO (ChartFormat ())
getFormat46 =
  propertyGet "Format"
              []
              outIUnknown

getRoundedCorners18 :: ChartArea a0
                    -> IO Bool
getRoundedCorners18 =
  propertyGet "RoundedCorners"
              []
              outBool

setRoundedCorners18 :: Bool
                    -> ChartArea a0
                    -> IO ()
setRoundedCorners18 rhs =
  propertySet "RoundedCorners"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Legend
-- 
-- --------------------------------------------------
data Legend_ a = Legend__ 
type Legend a = IDispatch (Legend_ a)
iidLegend :: IID (Legend ())
iidLegend = mkIID "{000208CD-0000-0000-C000-000000000046}"

queryInterface159 :: (Variant a1)
                  => GUID
                  -> Legend a0
                  -> IO a1
queryInterface159 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef159 :: Legend a0
          -> IO Word32
addRef159 =
  function1 "AddRef"
            []
            outWord32

release159 :: Legend a0
           -> IO Word32
release159 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount159 :: Legend a0
                    -> IO Word32
getTypeInfoCount159 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo159 :: (Variant a1)
               => Word32
               -> Word32
               -> Legend a0
               -> IO a1
getTypeInfo159 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames159 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Legend a0
                 -> IO Int32
getIDsOfNames159 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke159 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Legend a0
          -> IO (a1, a2, Word32)
invoke159 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication425 :: (Variant a1)
                  => Legend a0
                  -> IO a1
getApplication425 =
  propertyGet "Application"
              []
              outVariant

getCreator425 :: Legend a0
              -> IO XlCreator
getCreator425 =
  propertyGet "Creator"
              []
              outEnum

getParent440 :: Legend a0
             -> IO (IDispatch ())
getParent440 =
  propertyGet "Parent"
              []
              outIDispatch

getName136 :: Legend a0
           -> IO String
getName136 =
  propertyGet "Name"
              []
              outString

select154 :: Legend a0
          -> IO a1
select154 =
  function1 "Select"
            []
            outVariant

getBorder94 :: Legend a0
            -> IO (Border ())
getBorder94 =
  propertyGet "Border"
              []
              outIDispatch

delete219 :: Legend a0
          -> IO a1
delete219 =
  function1 "Delete"
            []
            outVariant

getFont61 :: Legend a0
          -> IO (Font ())
getFont61 =
  propertyGet "Font"
              []
              outIDispatch

legendEntries0 :: (Variant a1)
               => a1
               -> Legend a0
               -> IO (IDispatch ())
legendEntries0 index1 =
  function1 "LegendEntries"
            [inVariant index1]
            outIDispatch

getPosition20 :: Legend a0
              -> IO XlLegendPosition
getPosition20 =
  propertyGet "Position"
              []
              outEnum

setPosition20 :: XlLegendPosition
              -> Legend a0
              -> IO ()
setPosition20 rhs =
  propertySet "Position"
              [inEnum rhs]

getShadow56 :: Legend a0
            -> IO Bool
getShadow56 =
  propertyGet "Shadow"
              []
              outBool

setShadow53 :: Bool
            -> Legend a0
            -> IO ()
setShadow53 rhs =
  propertySet "Shadow"
              [inBool rhs]

clear9 :: Legend a0
       -> IO a1
clear9 =
  function1 "Clear"
            []
            outVariant

getHeight104 :: Legend a0
             -> IO Double
getHeight104 =
  propertyGet "Height"
              []
              outDouble

setHeight96 :: Double
            -> Legend a0
            -> IO ()
setHeight96 rhs =
  propertySet "Height"
              [inDouble rhs]

getInterior84 :: Legend a0
              -> IO (Interior ())
getInterior84 =
  propertyGet "Interior"
              []
              outIDispatch

getFill30 :: Legend a0
          -> IO (ChartFillFormat ())
getFill30 =
  propertyGet "Fill"
              []
              outIDispatch

getLeft110 :: Legend a0
           -> IO Double
getLeft110 =
  propertyGet "Left"
              []
              outDouble

setLeft102 :: Double
           -> Legend a0
           -> IO ()
setLeft102 rhs =
  propertySet "Left"
              [inDouble rhs]

getTop110 :: Legend a0
          -> IO Double
getTop110 =
  propertyGet "Top"
              []
              outDouble

setTop102 :: Double
          -> Legend a0
          -> IO ()
setTop102 rhs =
  propertySet "Top"
              [inDouble rhs]

getWidth106 :: Legend a0
            -> IO Double
getWidth106 =
  propertyGet "Width"
              []
              outDouble

setWidth98 :: Double
           -> Legend a0
           -> IO ()
setWidth98 rhs =
  propertySet "Width"
              [inDouble rhs]

getAutoScaleFont40 :: Legend a0
                   -> IO a1
getAutoScaleFont40 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont40 :: a1
                   -> Legend a0
                   -> IO ()
setAutoScaleFont40 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getIncludeInLayout4 :: Legend a0
                    -> IO Bool
getIncludeInLayout4 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout4 :: Bool
                    -> Legend a0
                    -> IO ()
setIncludeInLayout4 rhs =
  propertySet "IncludeInLayout"
              [inBool rhs]

getFormat47 :: Legend a0
            -> IO (ChartFormat ())
getFormat47 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ErrorBars
-- 
-- --------------------------------------------------
data ErrorBars_ a = ErrorBars__ 
type ErrorBars a = IDispatch (ErrorBars_ a)
iidErrorBars :: IID (ErrorBars ())
iidErrorBars = mkIID "{000208CE-0000-0000-C000-000000000046}"

queryInterface160 :: (Variant a1)
                  => GUID
                  -> ErrorBars a0
                  -> IO a1
queryInterface160 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef160 :: ErrorBars a0
          -> IO Word32
addRef160 =
  function1 "AddRef"
            []
            outWord32

release160 :: ErrorBars a0
           -> IO Word32
release160 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount160 :: ErrorBars a0
                    -> IO Word32
getTypeInfoCount160 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo160 :: (Variant a1)
               => Word32
               -> Word32
               -> ErrorBars a0
               -> IO a1
getTypeInfo160 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames160 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ErrorBars a0
                 -> IO Int32
getIDsOfNames160 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke160 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ErrorBars a0
          -> IO (a1, a2, Word32)
invoke160 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication426 :: (Variant a1)
                  => ErrorBars a0
                  -> IO a1
getApplication426 =
  propertyGet "Application"
              []
              outVariant

getCreator426 :: ErrorBars a0
              -> IO XlCreator
getCreator426 =
  propertyGet "Creator"
              []
              outEnum

getParent441 :: ErrorBars a0
             -> IO (IDispatch ())
getParent441 =
  propertyGet "Parent"
              []
              outIDispatch

getName137 :: ErrorBars a0
           -> IO String
getName137 =
  propertyGet "Name"
              []
              outString

select155 :: ErrorBars a0
          -> IO a1
select155 =
  function1 "Select"
            []
            outVariant

getBorder95 :: ErrorBars a0
            -> IO (Border ())
getBorder95 =
  propertyGet "Border"
              []
              outIDispatch

delete220 :: ErrorBars a0
          -> IO a1
delete220 =
  function1 "Delete"
            []
            outVariant

clearFormats18 :: ErrorBars a0
               -> IO a1
clearFormats18 =
  function1 "ClearFormats"
            []
            outVariant

getEndStyle0 :: ErrorBars a0
             -> IO XlEndStyleCap
getEndStyle0 =
  propertyGet "EndStyle"
              []
              outEnum

setEndStyle0 :: XlEndStyleCap
             -> ErrorBars a0
             -> IO ()
setEndStyle0 rhs =
  propertySet "EndStyle"
              [inEnum rhs]

getFormat48 :: ErrorBars a0
            -> IO (ChartFormat ())
getFormat48 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface DataTable
-- 
-- --------------------------------------------------
data DataTable_ a = DataTable__ 
type DataTable a = IDispatch (DataTable_ a)
iidDataTable :: IID (DataTable ())
iidDataTable = mkIID "{00020843-0000-0000-C000-000000000046}"

queryInterface161 :: (Variant a1)
                  => GUID
                  -> DataTable a0
                  -> IO a1
queryInterface161 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef161 :: DataTable a0
          -> IO Word32
addRef161 =
  function1 "AddRef"
            []
            outWord32

release161 :: DataTable a0
           -> IO Word32
release161 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount161 :: DataTable a0
                    -> IO Word32
getTypeInfoCount161 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo161 :: (Variant a1)
               => Word32
               -> Word32
               -> DataTable a0
               -> IO a1
getTypeInfo161 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames161 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DataTable a0
                 -> IO Int32
getIDsOfNames161 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke161 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DataTable a0
          -> IO (a1, a2, Word32)
invoke161 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication427 :: (Variant a1)
                  => DataTable a0
                  -> IO a1
getApplication427 =
  propertyGet "Application"
              []
              outVariant

getCreator427 :: DataTable a0
              -> IO XlCreator
getCreator427 =
  propertyGet "Creator"
              []
              outEnum

getParent442 :: DataTable a0
             -> IO (IDispatch ())
getParent442 =
  propertyGet "Parent"
              []
              outIDispatch

getShowLegendKey4 :: DataTable a0
                  -> IO Bool
getShowLegendKey4 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey4 :: Bool
                  -> DataTable a0
                  -> IO ()
setShowLegendKey4 rhs =
  propertySet "ShowLegendKey"
              [inBool rhs]

getHasBorderHorizontal0 :: DataTable a0
                        -> IO Bool
getHasBorderHorizontal0 =
  propertyGet "HasBorderHorizontal"
              []
              outBool

setHasBorderHorizontal0 :: Bool
                        -> DataTable a0
                        -> IO ()
setHasBorderHorizontal0 rhs =
  propertySet "HasBorderHorizontal"
              [inBool rhs]

getHasBorderVertical0 :: DataTable a0
                      -> IO Bool
getHasBorderVertical0 =
  propertyGet "HasBorderVertical"
              []
              outBool

setHasBorderVertical0 :: Bool
                      -> DataTable a0
                      -> IO ()
setHasBorderVertical0 rhs =
  propertySet "HasBorderVertical"
              [inBool rhs]

getHasBorderOutline0 :: DataTable a0
                     -> IO Bool
getHasBorderOutline0 =
  propertyGet "HasBorderOutline"
              []
              outBool

setHasBorderOutline0 :: Bool
                     -> DataTable a0
                     -> IO ()
setHasBorderOutline0 rhs =
  propertySet "HasBorderOutline"
              [inBool rhs]

getBorder96 :: DataTable a0
            -> IO (Border ())
getBorder96 =
  propertyGet "Border"
              []
              outIDispatch

getFont62 :: DataTable a0
          -> IO (Font ())
getFont62 =
  propertyGet "Font"
              []
              outIDispatch

select156 :: DataTable a0
          -> IO ()
select156 =
  method0 "Select"
          []

delete221 :: DataTable a0
          -> IO ()
delete221 =
  method0 "Delete"
          []

getAutoScaleFont41 :: DataTable a0
                   -> IO a1
getAutoScaleFont41 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont41 :: a1
                   -> DataTable a0
                   -> IO ()
setAutoScaleFont41 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

getFormat49 :: DataTable a0
            -> IO (ChartFormat ())
getFormat49 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Phonetic
-- 
-- --------------------------------------------------
data Phonetic_ a = Phonetic__ 
type Phonetic a = IDispatch (Phonetic_ a)
iidPhonetic :: IID (Phonetic ())
iidPhonetic = mkIID "{00024438-0000-0000-C000-000000000046}"

queryInterface162 :: (Variant a1)
                  => GUID
                  -> Phonetic a0
                  -> IO a1
queryInterface162 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef162 :: Phonetic a0
          -> IO Word32
addRef162 =
  function1 "AddRef"
            []
            outWord32

release162 :: Phonetic a0
           -> IO Word32
release162 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount162 :: Phonetic a0
                    -> IO Word32
getTypeInfoCount162 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo162 :: (Variant a1)
               => Word32
               -> Word32
               -> Phonetic a0
               -> IO a1
getTypeInfo162 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames162 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Phonetic a0
                 -> IO Int32
getIDsOfNames162 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke162 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Phonetic a0
          -> IO (a1, a2, Word32)
invoke162 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication428 :: (Variant a1)
                  => Phonetic a0
                  -> IO a1
getApplication428 =
  propertyGet "Application"
              []
              outVariant

getCreator428 :: Phonetic a0
              -> IO XlCreator
getCreator428 =
  propertyGet "Creator"
              []
              outEnum

getParent443 :: Phonetic a0
             -> IO (IDispatch ())
getParent443 =
  propertyGet "Parent"
              []
              outIDispatch

getVisible117 :: Phonetic a0
              -> IO Bool
getVisible117 =
  propertyGet "Visible"
              []
              outBool

setVisible117 :: Bool
              -> Phonetic a0
              -> IO ()
setVisible117 rhs =
  propertySet "Visible"
              [inBool rhs]

getCharacterType1 :: Phonetic a0
                  -> IO Int32
getCharacterType1 =
  propertyGet "CharacterType"
              []
              outInt32

setCharacterType1 :: Int32
                  -> Phonetic a0
                  -> IO ()
setCharacterType1 rhs =
  propertySet "CharacterType"
              [inInt32 rhs]

getAlignment4 :: Phonetic a0
              -> IO Int32
getAlignment4 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment4 :: Int32
              -> Phonetic a0
              -> IO ()
setAlignment4 rhs =
  propertySet "Alignment"
              [inInt32 rhs]

getFont63 :: Phonetic a0
          -> IO (Font ())
getFont63 =
  propertyGet "Font"
              []
              outIDispatch

getText68 :: Phonetic a0
          -> IO String
getText68 =
  propertyGet "Text"
              []
              outString

setText66 :: String
          -> Phonetic a0
          -> IO ()
setText66 rhs =
  propertySet "Text"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface Shape
-- 
-- --------------------------------------------------
data Shape_ a = Shape__ 
type Shape a = IDispatch (Shape_ a)
iidShape :: IID (Shape ())
iidShape = mkIID "{00024439-0000-0000-C000-000000000046}"

queryInterface163 :: (Variant a1)
                  => GUID
                  -> Shape a0
                  -> IO a1
queryInterface163 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef163 :: Shape a0
          -> IO Word32
addRef163 =
  function1 "AddRef"
            []
            outWord32

release163 :: Shape a0
           -> IO Word32
release163 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount163 :: Shape a0
                    -> IO Word32
getTypeInfoCount163 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo163 :: (Variant a1)
               => Word32
               -> Word32
               -> Shape a0
               -> IO a1
getTypeInfo163 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames163 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Shape a0
                 -> IO Int32
getIDsOfNames163 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke163 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Shape a0
          -> IO (a1, a2, Word32)
invoke163 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication429 :: (Variant a1)
                  => Shape a0
                  -> IO a1
getApplication429 =
  propertyGet "Application"
              []
              outVariant

getCreator429 :: Shape a0
              -> IO XlCreator
getCreator429 =
  propertyGet "Creator"
              []
              outEnum

getParent444 :: Shape a0
             -> IO (IDispatch ())
getParent444 =
  propertyGet "Parent"
              []
              outIDispatch

apply2 :: Shape a0
       -> IO ()
apply2 =
  method0 "Apply"
          []

delete222 :: Shape a0
          -> IO ()
delete222 =
  method0 "Delete"
          []

duplicate84 :: Shape a0
            -> IO (Shape ())
duplicate84 =
  function1 "Duplicate"
            []
            outIDispatch

flip1 :: (Variant a1)
      => a1
      -> Shape a0
      -> IO ()
flip1 flipCmd =
  method0 "Flip"
          [inVariant flipCmd]

incrementLeft1 :: Float
               -> Shape a0
               -> IO ()
incrementLeft1 increment =
  method0 "IncrementLeft"
          [inFloat increment]

incrementRotation1 :: Float
                   -> Shape a0
                   -> IO ()
incrementRotation1 increment =
  method0 "IncrementRotation"
          [inFloat increment]

incrementTop1 :: Float
              -> Shape a0
              -> IO ()
incrementTop1 increment =
  method0 "IncrementTop"
          [inFloat increment]

pickUp1 :: Shape a0
        -> IO ()
pickUp1 =
  method0 "PickUp"
          []

rerouteConnections1 :: Shape a0
                    -> IO ()
rerouteConnections1 =
  method0 "RerouteConnections"
          []

scaleHeight1 :: (Variant a1, Variant a2)
             => Float
             -> a1
             -> a2
             -> Shape a0
             -> IO ()
scaleHeight1 factor relativeToOriginalSize scale =
  method0 "ScaleHeight"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

scaleWidth1 :: (Variant a1, Variant a2)
            => Float
            -> a1
            -> a2
            -> Shape a0
            -> IO ()
scaleWidth1 factor relativeToOriginalSize scale =
  method0 "ScaleWidth"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

select157 :: (Variant a1)
          => a1
          -> Shape a0
          -> IO ()
select157 replace3 =
  method0 "Select"
          [inVariant replace3]

setShapesDefaultProperties1 :: Shape a0
                            -> IO ()
setShapesDefaultProperties1 =
  method0 "SetShapesDefaultProperties"
          []

ungroup9 :: Shape a0
         -> IO (ShapeRange ())
ungroup9 =
  function1 "Ungroup"
            []
            outIUnknown

zOrder1 :: (Variant a1)
        => a1
        -> Shape a0
        -> IO ()
zOrder1 zOrderCmd =
  method0 "ZOrder"
          [inVariant zOrderCmd]

getAdjustments1 :: Shape a0
                -> IO (Adjustments ())
getAdjustments1 =
  propertyGet "Adjustments"
              []
              outIUnknown

getTextFrame1 :: Shape a0
              -> IO (TextFrame ())
getTextFrame1 =
  propertyGet "TextFrame"
              []
              outIUnknown

getAutoShapeType1 :: (Variant a1)
                  => Shape a0
                  -> IO a1
getAutoShapeType1 =
  propertyGet "AutoShapeType"
              []
              outVariant

setAutoShapeType1 :: (Variant a1)
                  => a1
                  -> Shape a0
                  -> IO ()
setAutoShapeType1 rhs =
  propertySet "AutoShapeType"
              [inVariant rhs]

getCallout1 :: Shape a0
            -> IO (CalloutFormat ())
getCallout1 =
  propertyGet "Callout"
              []
              outIUnknown

getConnectionSiteCount1 :: Shape a0
                        -> IO Int32
getConnectionSiteCount1 =
  propertyGet "ConnectionSiteCount"
              []
              outInt32

getConnector1 :: (Variant a1)
              => Shape a0
              -> IO a1
getConnector1 =
  propertyGet "Connector"
              []
              outVariant

getConnectorFormat1 :: Shape a0
                    -> IO (ConnectorFormat ())
getConnectorFormat1 =
  propertyGet "ConnectorFormat"
              []
              outIUnknown

getFill31 :: Shape a0
          -> IO (FillFormat ())
getFill31 =
  propertyGet "Fill"
              []
              outIUnknown

getGroupItems1 :: Shape a0
               -> IO (GroupShapes ())
getGroupItems1 =
  propertyGet "GroupItems"
              []
              outIUnknown

getHeight105 :: Shape a0
             -> IO Float
getHeight105 =
  propertyGet "Height"
              []
              outFloat

setHeight97 :: Float
            -> Shape a0
            -> IO ()
setHeight97 rhs =
  propertySet "Height"
              [inFloat rhs]

getHorizontalFlip1 :: (Variant a1)
                   => Shape a0
                   -> IO a1
getHorizontalFlip1 =
  propertyGet "HorizontalFlip"
              []
              outVariant

getLeft111 :: Shape a0
           -> IO Float
getLeft111 =
  propertyGet "Left"
              []
              outFloat

setLeft103 :: Float
           -> Shape a0
           -> IO ()
setLeft103 rhs =
  propertySet "Left"
              [inFloat rhs]

getLine2 :: Shape a0
         -> IO (LineFormat ())
getLine2 =
  propertyGet "Line"
              []
              outIUnknown

getLockAspectRatio2 :: (Variant a1)
                    => Shape a0
                    -> IO a1
getLockAspectRatio2 =
  propertyGet "LockAspectRatio"
              []
              outVariant

setLockAspectRatio2 :: (Variant a1)
                    => a1
                    -> Shape a0
                    -> IO ()
setLockAspectRatio2 rhs =
  propertySet "LockAspectRatio"
              [inVariant rhs]

getName138 :: Shape a0
           -> IO String
getName138 =
  propertyGet "Name"
              []
              outString

setName78 :: String
          -> Shape a0
          -> IO ()
setName78 rhs =
  propertySet "Name"
              [inString rhs]

getNodes2 :: Shape a0
          -> IO (ShapeNodes ())
getNodes2 =
  propertyGet "Nodes"
              []
              outIUnknown

getRotation2 :: Shape a0
             -> IO Float
getRotation2 =
  propertyGet "Rotation"
              []
              outFloat

setRotation2 :: Float
             -> Shape a0
             -> IO ()
setRotation2 rhs =
  propertySet "Rotation"
              [inFloat rhs]

getPictureFormat2 :: Shape a0
                  -> IO (PictureFormat ())
getPictureFormat2 =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow57 :: Shape a0
            -> IO (ShadowFormat ())
getShadow57 =
  propertyGet "Shadow"
              []
              outIUnknown

getTextEffect1 :: Shape a0
               -> IO (TextEffectFormat ())
getTextEffect1 =
  propertyGet "TextEffect"
              []
              outIUnknown

getThreeD3 :: Shape a0
           -> IO (ThreeDFormat ())
getThreeD3 =
  propertyGet "ThreeD"
              []
              outIUnknown

getTop111 :: Shape a0
          -> IO Float
getTop111 =
  propertyGet "Top"
              []
              outFloat

setTop103 :: Float
          -> Shape a0
          -> IO ()
setTop103 rhs =
  propertySet "Top"
              [inFloat rhs]

getType53 :: (Variant a1)
          => Shape a0
          -> IO a1
getType53 =
  propertyGet "Type"
              []
              outVariant

getVerticalFlip1 :: (Variant a1)
                 => Shape a0
                 -> IO a1
getVerticalFlip1 =
  propertyGet "VerticalFlip"
              []
              outVariant

getVertices3 :: Shape a0
             -> IO a1
getVertices3 =
  propertyGet "Vertices"
              []
              outVariant

getVisible118 :: (Variant a1)
              => Shape a0
              -> IO a1
getVisible118 =
  propertyGet "Visible"
              []
              outVariant

setVisible118 :: (Variant a1)
              => a1
              -> Shape a0
              -> IO ()
setVisible118 rhs =
  propertySet "Visible"
              [inVariant rhs]

getWidth107 :: Shape a0
            -> IO Float
getWidth107 =
  propertyGet "Width"
              []
              outFloat

setWidth99 :: Float
           -> Shape a0
           -> IO ()
setWidth99 rhs =
  propertySet "Width"
              [inFloat rhs]

getZOrderPosition1 :: Shape a0
                   -> IO Int32
getZOrderPosition1 =
  propertyGet "ZOrderPosition"
              []
              outInt32

getHyperlink0 :: Shape a0
              -> IO (Hyperlink ())
getHyperlink0 =
  propertyGet "Hyperlink"
              []
              outIDispatch

getBlackWhiteMode1 :: (Variant a1)
                   => Shape a0
                   -> IO a1
getBlackWhiteMode1 =
  propertyGet "BlackWhiteMode"
              []
              outVariant

setBlackWhiteMode1 :: (Variant a1)
                   => a1
                   -> Shape a0
                   -> IO ()
setBlackWhiteMode1 rhs =
  propertySet "BlackWhiteMode"
              [inVariant rhs]

getDrawingObject0 :: Shape a0
                  -> IO (IDispatch ())
getDrawingObject0 =
  propertyGet "DrawingObject"
              []
              outIDispatch

getOnAction88 :: Shape a0
              -> IO String
getOnAction88 =
  propertyGet "OnAction"
              []
              outString

setOnAction88 :: String
              -> Shape a0
              -> IO ()
setOnAction88 rhs =
  propertySet "OnAction"
              [inString rhs]

getLocked92 :: Shape a0
            -> IO Bool
getLocked92 =
  propertyGet "Locked"
              []
              outBool

setLocked92 :: Bool
            -> Shape a0
            -> IO ()
setLocked92 rhs =
  propertySet "Locked"
              [inBool rhs]

getTopLeftCell40 :: Shape a0
                 -> IO (Range ())
getTopLeftCell40 =
  propertyGet "TopLeftCell"
              []
              outIDispatch

getBottomRightCell40 :: Shape a0
                     -> IO (Range ())
getBottomRightCell40 =
  propertyGet "BottomRightCell"
              []
              outIDispatch

getPlacement82 :: Shape a0
               -> IO XlPlacement
getPlacement82 =
  propertyGet "Placement"
              []
              outEnum

setPlacement82 :: XlPlacement
               -> Shape a0
               -> IO ()
setPlacement82 rhs =
  propertySet "Placement"
              [inEnum rhs]

copy111 :: Shape a0
        -> IO ()
copy111 =
  method0 "Copy"
          []

cut84 :: Shape a0
      -> IO ()
cut84 =
  method0 "Cut"
          []

copyPicture87 :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> Shape a0
              -> IO ()
copyPicture87 appearance format1 =
  method0 "CopyPicture"
          [ inVariant appearance
          , inVariant format1
          ]

getControlFormat0 :: Shape a0
                  -> IO (ControlFormat ())
getControlFormat0 =
  propertyGet "ControlFormat"
              []
              outIUnknown

getLinkFormat0 :: Shape a0
               -> IO (LinkFormat ())
getLinkFormat0 =
  propertyGet "LinkFormat"
              []
              outIUnknown

getOLEFormat0 :: Shape a0
              -> IO (OLEFormat ())
getOLEFormat0 =
  propertyGet "OLEFormat"
              []
              outIUnknown

getFormControlType0 :: Shape a0
                    -> IO XlFormControl
getFormControlType0 =
  propertyGet "FormControlType"
              []
              outEnum

getAlternativeText1 :: Shape a0
                    -> IO String
getAlternativeText1 =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText1 :: String
                    -> Shape a0
                    -> IO ()
setAlternativeText1 rhs =
  propertySet "AlternativeText"
              [inString rhs]

getScript0 :: (Variant a1)
           => Shape a0
           -> IO a1
getScript0 =
  propertyGet "Script"
              []
              outVariant

getDiagramNode1 :: Shape a0
                -> IO (DiagramNode ())
getDiagramNode1 =
  propertyGet "DiagramNode"
              []
              outIUnknown

getHasDiagramNode1 :: (Variant a1)
                   => Shape a0
                   -> IO a1
getHasDiagramNode1 =
  propertyGet "HasDiagramNode"
              []
              outVariant

getDiagram2 :: Shape a0
            -> IO (Diagram ())
getDiagram2 =
  propertyGet "Diagram"
              []
              outIUnknown

getHasDiagram1 :: (Variant a1)
               => Shape a0
               -> IO a1
getHasDiagram1 =
  propertyGet "HasDiagram"
              []
              outVariant

getChild1 :: (Variant a1)
          => Shape a0
          -> IO a1
getChild1 =
  propertyGet "Child"
              []
              outVariant

getParentGroup1 :: Shape a0
                -> IO (Shape ())
getParentGroup1 =
  propertyGet "ParentGroup"
              []
              outIDispatch

getCanvasItems1 :: (Variant a1)
                => Shape a0
                -> IO a1
getCanvasItems1 =
  propertyGet "CanvasItems"
              []
              outVariant

getID6 :: Shape a0
       -> IO Int32
getID6 =
  propertyGet "ID"
              []
              outInt32

canvasCropLeft1 :: Float
                -> Shape a0
                -> IO ()
canvasCropLeft1 increment =
  method0 "CanvasCropLeft"
          [inFloat increment]

canvasCropTop1 :: Float
               -> Shape a0
               -> IO ()
canvasCropTop1 increment =
  method0 "CanvasCropTop"
          [inFloat increment]

canvasCropRight1 :: Float
                 -> Shape a0
                 -> IO ()
canvasCropRight1 increment =
  method0 "CanvasCropRight"
          [inFloat increment]

canvasCropBottom1 :: Float
                  -> Shape a0
                  -> IO ()
canvasCropBottom1 increment =
  method0 "CanvasCropBottom"
          [inFloat increment]

getChart3 :: (Variant a1)
          => Shape a0
          -> IO a1
getChart3 =
  propertyGet "Chart"
              []
              outVariant

getHasChart1 :: (Variant a1)
             => Shape a0
             -> IO a1
getHasChart1 =
  propertyGet "HasChart"
              []
              outVariant

getTextFrame22 :: Shape a0
               -> IO (TextFrame2 ())
getTextFrame22 =
  propertyGet "TextFrame2"
              []
              outIUnknown

getShapeStyle1 :: (Variant a1)
               => Shape a0
               -> IO a1
getShapeStyle1 =
  propertyGet "ShapeStyle"
              []
              outVariant

setShapeStyle1 :: (Variant a1)
               => a1
               -> Shape a0
               -> IO ()
setShapeStyle1 rhs =
  propertySet "ShapeStyle"
              [inVariant rhs]

getBackgroundStyle1 :: (Variant a1)
                    => Shape a0
                    -> IO a1
getBackgroundStyle1 =
  propertyGet "BackgroundStyle"
              []
              outVariant

setBackgroundStyle1 :: (Variant a1)
                    => a1
                    -> Shape a0
                    -> IO ()
setBackgroundStyle1 rhs =
  propertySet "BackgroundStyle"
              [inVariant rhs]

getSoftEdge2 :: (Variant a1)
             => Shape a0
             -> IO a1
getSoftEdge2 =
  propertyGet "SoftEdge"
              []
              outVariant

getGlow2 :: (Variant a1)
         => Shape a0
         -> IO a1
getGlow2 =
  propertyGet "Glow"
              []
              outVariant

getReflection1 :: (Variant a1)
               => Shape a0
               -> IO a1
getReflection1 =
  propertyGet "Reflection"
              []
              outVariant

-- --------------------------------------------------
-- 
-- dispinterface Shapes
-- 
-- --------------------------------------------------
data Shapes_ a = Shapes__ 
type Shapes a = IDispatch (Shapes_ a)
iidShapes :: IID (Shapes ())
iidShapes = mkIID "{0002443A-0000-0000-C000-000000000046}"

queryInterface164 :: (Variant a1)
                  => GUID
                  -> Shapes a0
                  -> IO a1
queryInterface164 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef164 :: Shapes a0
          -> IO Word32
addRef164 =
  function1 "AddRef"
            []
            outWord32

release164 :: Shapes a0
           -> IO Word32
release164 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount164 :: Shapes a0
                    -> IO Word32
getTypeInfoCount164 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo164 :: (Variant a1)
               => Word32
               -> Word32
               -> Shapes a0
               -> IO a1
getTypeInfo164 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames164 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Shapes a0
                 -> IO Int32
getIDsOfNames164 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke164 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Shapes a0
          -> IO (a1, a2, Word32)
invoke164 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication430 :: (Variant a1)
                  => Shapes a0
                  -> IO a1
getApplication430 =
  propertyGet "Application"
              []
              outVariant

getCreator430 :: Shapes a0
              -> IO XlCreator
getCreator430 =
  propertyGet "Creator"
              []
              outEnum

getParent445 :: Shapes a0
             -> IO (IDispatch ())
getParent445 =
  propertyGet "Parent"
              []
              outIDispatch

getCount180 :: Shapes a0
            -> IO Int32
getCount180 =
  propertyGet "Count"
              []
              outInt32

item98 :: a1
       -> Shapes a0
       -> IO (Shape ())
item98 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

default19 :: a1
          -> Shapes a0
          -> IO (Shape ())
default19 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

getNewEnum92 :: Shapes a0
             -> IO (IUnknown ())
getNewEnum92 =
  propertyGet "_NewEnum"
              []
              outIUnknown

addCallout0 :: (Variant a1)
            => a1
            -> Float
            -> Float
            -> Float
            -> Float
            -> Shapes a0
            -> IO (Shape ())
addCallout0 type0 left top width height =
  function1 "AddCallout"
            [ inVariant type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addConnector0 :: (Variant a1)
              => a1
              -> Float
              -> Float
              -> Float
              -> Float
              -> Shapes a0
              -> IO (Shape ())
addConnector0 type0 beginX beginY endX endY =
  function1 "AddConnector"
            [ inVariant type0
            , inFloat beginX
            , inFloat beginY
            , inFloat endX
            , inFloat endY
            ]
            outIDispatch

addCurve0 :: a1
          -> Shapes a0
          -> IO (Shape ())
addCurve0 safeArrayOfPoints =
  function1 "AddCurve"
            [inVariant safeArrayOfPoints]
            outIDispatch

addLabel0 :: (Variant a1)
          => a1
          -> Float
          -> Float
          -> Float
          -> Float
          -> Shapes a0
          -> IO (Shape ())
addLabel0 orientation left top width height =
  function1 "AddLabel"
            [ inVariant orientation
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addLine0 :: Float
         -> Float
         -> Float
         -> Float
         -> Shapes a0
         -> IO (Shape ())
addLine0 beginX beginY endX endY =
  function1 "AddLine"
            [ inFloat beginX
            , inFloat beginY
            , inFloat endX
            , inFloat endY
            ]
            outIDispatch

addPicture0 :: (Variant a1, Variant a2)
            => String
            -> a1
            -> a2
            -> Float
            -> Float
            -> Float
            -> Float
            -> Shapes a0
            -> IO (Shape ())
addPicture0 filename linkToFile saveWithDocument left top width height =
  function1 "AddPicture"
            [ inString filename
            , inVariant linkToFile
            , inVariant saveWithDocument
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addPolyline0 :: a1
             -> Shapes a0
             -> IO (Shape ())
addPolyline0 safeArrayOfPoints =
  function1 "AddPolyline"
            [inVariant safeArrayOfPoints]
            outIDispatch

addShape0 :: (Variant a1)
          => a1
          -> Float
          -> Float
          -> Float
          -> Float
          -> Shapes a0
          -> IO (Shape ())
addShape0 type0 left top width height =
  function1 "AddShape"
            [ inVariant type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addTextEffect0 :: (Variant a1, Variant a2, Variant a3)
               => a1
               -> String
               -> String
               -> Float
               -> a2
               -> a3
               -> Float
               -> Float
               -> Shapes a0
               -> IO (Shape ())
addTextEffect0 presetTextEffect text3 fontName fontSize fontBold fontItalic left top =
  function1 "AddTextEffect"
            [ inVariant presetTextEffect
            , inString text3
            , inString fontName
            , inFloat fontSize
            , inVariant fontBold
            , inVariant fontItalic
            , inFloat left
            , inFloat top
            ]
            outIDispatch

addTextbox0 :: (Variant a1)
            => a1
            -> Float
            -> Float
            -> Float
            -> Float
            -> Shapes a0
            -> IO (Shape ())
addTextbox0 orientation left top width height =
  function1 "AddTextbox"
            [ inVariant orientation
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

buildFreeform0 :: (Variant a1)
               => a1
               -> Float
               -> Float
               -> Shapes a0
               -> IO (FreeformBuilder ())
buildFreeform0 editingType x1 y1 =
  function1 "BuildFreeform"
            [ inVariant editingType
            , inFloat x1
            , inFloat y1
            ]
            outIUnknown

getRange16 :: a1
           -> Shapes a0
           -> IO (ShapeRange ())
getRange16 index1 =
  propertyGet "Range"
              [inVariant index1]
              outIUnknown

selectAll2 :: Shapes a0
           -> IO ()
selectAll2 =
  method0 "SelectAll"
          []

addFormControl0 :: XlFormControl
                -> Int32
                -> Int32
                -> Int32
                -> Int32
                -> Shapes a0
                -> IO (Shape ())
addFormControl0 type0 left top width height =
  function1 "AddFormControl"
            [ inEnum type0
            , inInt32 left
            , inInt32 top
            , inInt32 width
            , inInt32 height
            ]
            outIDispatch

addOLEObject0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> Shapes a0
              -> IO (Shape ())
addOLEObject0 classType filename link displayAsIcon iconFileName iconIndex iconLabel left top width height =
  function1 "AddOLEObject"
            [ inVariant classType
            , inVariant filename
            , inVariant link
            , inVariant displayAsIcon
            , inVariant iconFileName
            , inVariant iconIndex
            , inVariant iconLabel
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outIDispatch

addDiagram0 :: (Variant a1)
            => a1
            -> Float
            -> Float
            -> Float
            -> Float
            -> Shapes a0
            -> IO (Shape ())
addDiagram0 type0 left top width height =
  function1 "AddDiagram"
            [ inVariant type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addCanvas0 :: Float
           -> Float
           -> Float
           -> Float
           -> Shapes a0
           -> IO (Shape ())
addCanvas0 left top width height =
  function1 "AddCanvas"
            [ inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addChart0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> Shapes a0
          -> IO (Shape ())
addChart0 xlChartType left top width height =
  function1 "AddChart"
            [ inVariant xlChartType
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface ShapeRange
-- 
-- --------------------------------------------------
data ShapeRange_ a = ShapeRange__ 
type ShapeRange a = IDispatch (ShapeRange_ a)
iidShapeRange :: IID (ShapeRange ())
iidShapeRange = mkIID "{0002443B-0000-0000-C000-000000000046}"

queryInterface165 :: (Variant a1)
                  => GUID
                  -> ShapeRange a0
                  -> IO a1
queryInterface165 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef165 :: ShapeRange a0
          -> IO Word32
addRef165 =
  function1 "AddRef"
            []
            outWord32

release165 :: ShapeRange a0
           -> IO Word32
release165 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount165 :: ShapeRange a0
                    -> IO Word32
getTypeInfoCount165 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo165 :: (Variant a1)
               => Word32
               -> Word32
               -> ShapeRange a0
               -> IO a1
getTypeInfo165 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames165 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ShapeRange a0
                 -> IO Int32
getIDsOfNames165 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke165 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ShapeRange a0
          -> IO (a1, a2, Word32)
invoke165 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication431 :: (Variant a1)
                  => ShapeRange a0
                  -> IO a1
getApplication431 =
  propertyGet "Application"
              []
              outVariant

getCreator431 :: ShapeRange a0
              -> IO XlCreator
getCreator431 =
  propertyGet "Creator"
              []
              outEnum

getParent446 :: ShapeRange a0
             -> IO (IDispatch ())
getParent446 =
  propertyGet "Parent"
              []
              outIDispatch

getCount181 :: ShapeRange a0
            -> IO Int32
getCount181 =
  propertyGet "Count"
              []
              outInt32

item99 :: a1
       -> ShapeRange a0
       -> IO (Shape ())
item99 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

default20 :: a1
          -> ShapeRange a0
          -> IO (Shape ())
default20 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

getNewEnum93 :: ShapeRange a0
             -> IO (IUnknown ())
getNewEnum93 =
  propertyGet "_NewEnum"
              []
              outIUnknown

align0 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> ShapeRange a0
       -> IO ()
align0 alignCmd relativeTo =
  method0 "Align"
          [ inVariant alignCmd
          , inVariant relativeTo
          ]

apply3 :: ShapeRange a0
       -> IO ()
apply3 =
  method0 "Apply"
          []

delete223 :: ShapeRange a0
          -> IO ()
delete223 =
  method0 "Delete"
          []

distribute0 :: (Variant a1, Variant a2)
            => a1
            -> a2
            -> ShapeRange a0
            -> IO ()
distribute0 distributeCmd relativeTo =
  method0 "Distribute"
          [ inVariant distributeCmd
          , inVariant relativeTo
          ]

duplicate85 :: ShapeRange a0
            -> IO (ShapeRange ())
duplicate85 =
  function1 "Duplicate"
            []
            outIDispatch

flip2 :: (Variant a1)
      => a1
      -> ShapeRange a0
      -> IO ()
flip2 flipCmd =
  method0 "Flip"
          [inVariant flipCmd]

incrementLeft2 :: Float
               -> ShapeRange a0
               -> IO ()
incrementLeft2 increment =
  method0 "IncrementLeft"
          [inFloat increment]

incrementRotation2 :: Float
                   -> ShapeRange a0
                   -> IO ()
incrementRotation2 increment =
  method0 "IncrementRotation"
          [inFloat increment]

incrementTop2 :: Float
              -> ShapeRange a0
              -> IO ()
incrementTop2 increment =
  method0 "IncrementTop"
          [inFloat increment]

group44 :: ShapeRange a0
        -> IO (Shape ())
group44 =
  function1 "Group"
            []
            outIDispatch

pickUp2 :: ShapeRange a0
        -> IO ()
pickUp2 =
  method0 "PickUp"
          []

rerouteConnections2 :: ShapeRange a0
                    -> IO ()
rerouteConnections2 =
  method0 "RerouteConnections"
          []

regroup0 :: ShapeRange a0
         -> IO (Shape ())
regroup0 =
  function1 "Regroup"
            []
            outIDispatch

scaleHeight2 :: (Variant a1, Variant a2)
             => Float
             -> a1
             -> a2
             -> ShapeRange a0
             -> IO ()
scaleHeight2 factor relativeToOriginalSize scale =
  method0 "ScaleHeight"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

scaleWidth2 :: (Variant a1, Variant a2)
            => Float
            -> a1
            -> a2
            -> ShapeRange a0
            -> IO ()
scaleWidth2 factor relativeToOriginalSize scale =
  method0 "ScaleWidth"
          [ inFloat factor
          , inVariant relativeToOriginalSize
          , inVariant scale
          ]

select158 :: (Variant a1)
          => a1
          -> ShapeRange a0
          -> IO ()
select158 replace3 =
  method0 "Select"
          [inVariant replace3]

setShapesDefaultProperties2 :: ShapeRange a0
                            -> IO ()
setShapesDefaultProperties2 =
  method0 "SetShapesDefaultProperties"
          []

ungroup10 :: ShapeRange a0
          -> IO (ShapeRange ())
ungroup10 =
  function1 "Ungroup"
            []
            outIDispatch

zOrder2 :: (Variant a1)
        => a1
        -> ShapeRange a0
        -> IO ()
zOrder2 zOrderCmd =
  method0 "ZOrder"
          [inVariant zOrderCmd]

getAdjustments2 :: ShapeRange a0
                -> IO (Adjustments ())
getAdjustments2 =
  propertyGet "Adjustments"
              []
              outIUnknown

getTextFrame3 :: ShapeRange a0
              -> IO (TextFrame ())
getTextFrame3 =
  propertyGet "TextFrame"
              []
              outIUnknown

getAutoShapeType2 :: (Variant a1)
                  => ShapeRange a0
                  -> IO a1
getAutoShapeType2 =
  propertyGet "AutoShapeType"
              []
              outVariant

setAutoShapeType2 :: (Variant a1)
                  => a1
                  -> ShapeRange a0
                  -> IO ()
setAutoShapeType2 rhs =
  propertySet "AutoShapeType"
              [inVariant rhs]

getCallout2 :: ShapeRange a0
            -> IO (CalloutFormat ())
getCallout2 =
  propertyGet "Callout"
              []
              outIUnknown

getConnectionSiteCount2 :: ShapeRange a0
                        -> IO Int32
getConnectionSiteCount2 =
  propertyGet "ConnectionSiteCount"
              []
              outInt32

getConnector2 :: (Variant a1)
              => ShapeRange a0
              -> IO a1
getConnector2 =
  propertyGet "Connector"
              []
              outVariant

getConnectorFormat2 :: ShapeRange a0
                    -> IO (ConnectorFormat ())
getConnectorFormat2 =
  propertyGet "ConnectorFormat"
              []
              outIUnknown

getFill32 :: ShapeRange a0
          -> IO (FillFormat ())
getFill32 =
  propertyGet "Fill"
              []
              outIUnknown

getGroupItems2 :: ShapeRange a0
               -> IO (GroupShapes ())
getGroupItems2 =
  propertyGet "GroupItems"
              []
              outIUnknown

getHeight106 :: ShapeRange a0
             -> IO Float
getHeight106 =
  propertyGet "Height"
              []
              outFloat

setHeight98 :: Float
            -> ShapeRange a0
            -> IO ()
setHeight98 rhs =
  propertySet "Height"
              [inFloat rhs]

getHorizontalFlip2 :: (Variant a1)
                   => ShapeRange a0
                   -> IO a1
getHorizontalFlip2 =
  propertyGet "HorizontalFlip"
              []
              outVariant

getLeft112 :: ShapeRange a0
           -> IO Float
getLeft112 =
  propertyGet "Left"
              []
              outFloat

setLeft104 :: Float
           -> ShapeRange a0
           -> IO ()
setLeft104 rhs =
  propertySet "Left"
              [inFloat rhs]

getLine3 :: ShapeRange a0
         -> IO (LineFormat ())
getLine3 =
  propertyGet "Line"
              []
              outIUnknown

getLockAspectRatio3 :: (Variant a1)
                    => ShapeRange a0
                    -> IO a1
getLockAspectRatio3 =
  propertyGet "LockAspectRatio"
              []
              outVariant

setLockAspectRatio3 :: (Variant a1)
                    => a1
                    -> ShapeRange a0
                    -> IO ()
setLockAspectRatio3 rhs =
  propertySet "LockAspectRatio"
              [inVariant rhs]

getName139 :: ShapeRange a0
           -> IO String
getName139 =
  propertyGet "Name"
              []
              outString

setName79 :: String
          -> ShapeRange a0
          -> IO ()
setName79 rhs =
  propertySet "Name"
              [inString rhs]

getNodes3 :: ShapeRange a0
          -> IO (ShapeNodes ())
getNodes3 =
  propertyGet "Nodes"
              []
              outIUnknown

getRotation3 :: ShapeRange a0
             -> IO Float
getRotation3 =
  propertyGet "Rotation"
              []
              outFloat

setRotation3 :: Float
             -> ShapeRange a0
             -> IO ()
setRotation3 rhs =
  propertySet "Rotation"
              [inFloat rhs]

getPictureFormat3 :: ShapeRange a0
                  -> IO (PictureFormat ())
getPictureFormat3 =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow58 :: ShapeRange a0
            -> IO (ShadowFormat ())
getShadow58 =
  propertyGet "Shadow"
              []
              outIUnknown

getTextEffect2 :: ShapeRange a0
               -> IO (TextEffectFormat ())
getTextEffect2 =
  propertyGet "TextEffect"
              []
              outIUnknown

getThreeD4 :: ShapeRange a0
           -> IO (ThreeDFormat ())
getThreeD4 =
  propertyGet "ThreeD"
              []
              outIUnknown

getTop112 :: ShapeRange a0
          -> IO Float
getTop112 =
  propertyGet "Top"
              []
              outFloat

setTop104 :: Float
          -> ShapeRange a0
          -> IO ()
setTop104 rhs =
  propertySet "Top"
              [inFloat rhs]

getType54 :: (Variant a1)
          => ShapeRange a0
          -> IO a1
getType54 =
  propertyGet "Type"
              []
              outVariant

getVerticalFlip2 :: (Variant a1)
                 => ShapeRange a0
                 -> IO a1
getVerticalFlip2 =
  propertyGet "VerticalFlip"
              []
              outVariant

getVertices4 :: ShapeRange a0
             -> IO a1
getVertices4 =
  propertyGet "Vertices"
              []
              outVariant

getVisible119 :: (Variant a1)
              => ShapeRange a0
              -> IO a1
getVisible119 =
  propertyGet "Visible"
              []
              outVariant

setVisible119 :: (Variant a1)
              => a1
              -> ShapeRange a0
              -> IO ()
setVisible119 rhs =
  propertySet "Visible"
              [inVariant rhs]

getWidth108 :: ShapeRange a0
            -> IO Float
getWidth108 =
  propertyGet "Width"
              []
              outFloat

setWidth100 :: Float
            -> ShapeRange a0
            -> IO ()
setWidth100 rhs =
  propertySet "Width"
              [inFloat rhs]

getZOrderPosition2 :: ShapeRange a0
                   -> IO Int32
getZOrderPosition2 =
  propertyGet "ZOrderPosition"
              []
              outInt32

getBlackWhiteMode2 :: (Variant a1)
                   => ShapeRange a0
                   -> IO a1
getBlackWhiteMode2 =
  propertyGet "BlackWhiteMode"
              []
              outVariant

setBlackWhiteMode2 :: (Variant a1)
                   => a1
                   -> ShapeRange a0
                   -> IO ()
setBlackWhiteMode2 rhs =
  propertySet "BlackWhiteMode"
              [inVariant rhs]

getAlternativeText2 :: ShapeRange a0
                    -> IO String
getAlternativeText2 =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText2 :: String
                    -> ShapeRange a0
                    -> IO ()
setAlternativeText2 rhs =
  propertySet "AlternativeText"
              [inString rhs]

getDiagramNode2 :: ShapeRange a0
                -> IO (DiagramNode ())
getDiagramNode2 =
  propertyGet "DiagramNode"
              []
              outIUnknown

getHasDiagramNode2 :: (Variant a1)
                   => ShapeRange a0
                   -> IO a1
getHasDiagramNode2 =
  propertyGet "HasDiagramNode"
              []
              outVariant

getDiagram3 :: ShapeRange a0
            -> IO (Diagram ())
getDiagram3 =
  propertyGet "Diagram"
              []
              outIUnknown

getHasDiagram2 :: (Variant a1)
               => ShapeRange a0
               -> IO a1
getHasDiagram2 =
  propertyGet "HasDiagram"
              []
              outVariant

getChild2 :: (Variant a1)
          => ShapeRange a0
          -> IO a1
getChild2 =
  propertyGet "Child"
              []
              outVariant

getParentGroup2 :: ShapeRange a0
                -> IO (Shape ())
getParentGroup2 =
  propertyGet "ParentGroup"
              []
              outIDispatch

getCanvasItems2 :: (Variant a1)
                => ShapeRange a0
                -> IO a1
getCanvasItems2 =
  propertyGet "CanvasItems"
              []
              outVariant

getID7 :: ShapeRange a0
       -> IO Int32
getID7 =
  propertyGet "ID"
              []
              outInt32

canvasCropLeft2 :: Float
                -> ShapeRange a0
                -> IO ()
canvasCropLeft2 increment =
  method0 "CanvasCropLeft"
          [inFloat increment]

canvasCropTop2 :: Float
               -> ShapeRange a0
               -> IO ()
canvasCropTop2 increment =
  method0 "CanvasCropTop"
          [inFloat increment]

canvasCropRight2 :: Float
                 -> ShapeRange a0
                 -> IO ()
canvasCropRight2 increment =
  method0 "CanvasCropRight"
          [inFloat increment]

canvasCropBottom2 :: Float
                  -> ShapeRange a0
                  -> IO ()
canvasCropBottom2 increment =
  method0 "CanvasCropBottom"
          [inFloat increment]

getChart4 :: (Variant a1)
          => ShapeRange a0
          -> IO a1
getChart4 =
  propertyGet "Chart"
              []
              outVariant

getHasChart2 :: (Variant a1)
             => ShapeRange a0
             -> IO a1
getHasChart2 =
  propertyGet "HasChart"
              []
              outVariant

getTextFrame23 :: ShapeRange a0
               -> IO (TextFrame2 ())
getTextFrame23 =
  propertyGet "TextFrame2"
              []
              outIUnknown

getShapeStyle2 :: (Variant a1)
               => ShapeRange a0
               -> IO a1
getShapeStyle2 =
  propertyGet "ShapeStyle"
              []
              outVariant

setShapeStyle2 :: (Variant a1)
               => a1
               -> ShapeRange a0
               -> IO ()
setShapeStyle2 rhs =
  propertySet "ShapeStyle"
              [inVariant rhs]

getBackgroundStyle2 :: (Variant a1)
                    => ShapeRange a0
                    -> IO a1
getBackgroundStyle2 =
  propertyGet "BackgroundStyle"
              []
              outVariant

setBackgroundStyle2 :: (Variant a1)
                    => a1
                    -> ShapeRange a0
                    -> IO ()
setBackgroundStyle2 rhs =
  propertySet "BackgroundStyle"
              [inVariant rhs]

getSoftEdge3 :: (Variant a1)
             => ShapeRange a0
             -> IO a1
getSoftEdge3 =
  propertyGet "SoftEdge"
              []
              outVariant

getGlow3 :: (Variant a1)
         => ShapeRange a0
         -> IO a1
getGlow3 =
  propertyGet "Glow"
              []
              outVariant

getReflection2 :: (Variant a1)
               => ShapeRange a0
               -> IO a1
getReflection2 =
  propertyGet "Reflection"
              []
              outVariant

-- --------------------------------------------------
-- 
-- dispinterface GroupShapes
-- 
-- --------------------------------------------------
data GroupShapes_ a = GroupShapes__ 
type GroupShapes a = IDispatch (GroupShapes_ a)
iidGroupShapes :: IID (GroupShapes ())
iidGroupShapes = mkIID "{0002443C-0000-0000-C000-000000000046}"

queryInterface166 :: (Variant a1)
                  => GUID
                  -> GroupShapes a0
                  -> IO a1
queryInterface166 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef166 :: GroupShapes a0
          -> IO Word32
addRef166 =
  function1 "AddRef"
            []
            outWord32

release166 :: GroupShapes a0
           -> IO Word32
release166 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount166 :: GroupShapes a0
                    -> IO Word32
getTypeInfoCount166 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo166 :: (Variant a1)
               => Word32
               -> Word32
               -> GroupShapes a0
               -> IO a1
getTypeInfo166 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames166 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> GroupShapes a0
                 -> IO Int32
getIDsOfNames166 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke166 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> GroupShapes a0
          -> IO (a1, a2, Word32)
invoke166 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication432 :: (Variant a1)
                  => GroupShapes a0
                  -> IO a1
getApplication432 =
  propertyGet "Application"
              []
              outVariant

getCreator432 :: GroupShapes a0
              -> IO XlCreator
getCreator432 =
  propertyGet "Creator"
              []
              outEnum

getParent447 :: GroupShapes a0
             -> IO (IDispatch ())
getParent447 =
  propertyGet "Parent"
              []
              outIDispatch

getCount182 :: GroupShapes a0
            -> IO Int32
getCount182 =
  propertyGet "Count"
              []
              outInt32

item100 :: a1
        -> GroupShapes a0
        -> IO (Shape ())
item100 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

default21 :: a1
          -> GroupShapes a0
          -> IO (Shape ())
default21 index1 =
  function1 "_Default"
            [inVariant index1]
            outIDispatch

getNewEnum94 :: GroupShapes a0
             -> IO (IUnknown ())
getNewEnum94 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getRange17 :: a1
           -> GroupShapes a0
           -> IO (ShapeRange ())
getRange17 index1 =
  propertyGet "Range"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface TextFrame
-- 
-- --------------------------------------------------
data TextFrame_ a = TextFrame__ 
type TextFrame a = IDispatch (TextFrame_ a)
iidTextFrame :: IID (TextFrame ())
iidTextFrame = mkIID "{0002443D-0000-0000-C000-000000000046}"

queryInterface167 :: (Variant a1)
                  => GUID
                  -> TextFrame a0
                  -> IO a1
queryInterface167 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef167 :: TextFrame a0
          -> IO Word32
addRef167 =
  function1 "AddRef"
            []
            outWord32

release167 :: TextFrame a0
           -> IO Word32
release167 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount167 :: TextFrame a0
                    -> IO Word32
getTypeInfoCount167 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo167 :: (Variant a1)
               => Word32
               -> Word32
               -> TextFrame a0
               -> IO a1
getTypeInfo167 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames167 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> TextFrame a0
                 -> IO Int32
getIDsOfNames167 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke167 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> TextFrame a0
          -> IO (a1, a2, Word32)
invoke167 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication433 :: (Variant a1)
                  => TextFrame a0
                  -> IO a1
getApplication433 =
  propertyGet "Application"
              []
              outVariant

getCreator433 :: TextFrame a0
              -> IO XlCreator
getCreator433 =
  propertyGet "Creator"
              []
              outEnum

getParent448 :: TextFrame a0
             -> IO (IDispatch ())
getParent448 =
  propertyGet "Parent"
              []
              outIDispatch

getMarginBottom1 :: TextFrame a0
                 -> IO Float
getMarginBottom1 =
  propertyGet "MarginBottom"
              []
              outFloat

setMarginBottom1 :: Float
                 -> TextFrame a0
                 -> IO ()
setMarginBottom1 rhs =
  propertySet "MarginBottom"
              [inFloat rhs]

getMarginLeft1 :: TextFrame a0
               -> IO Float
getMarginLeft1 =
  propertyGet "MarginLeft"
              []
              outFloat

setMarginLeft1 :: Float
               -> TextFrame a0
               -> IO ()
setMarginLeft1 rhs =
  propertySet "MarginLeft"
              [inFloat rhs]

getMarginRight1 :: TextFrame a0
                -> IO Float
getMarginRight1 =
  propertyGet "MarginRight"
              []
              outFloat

setMarginRight1 :: Float
                -> TextFrame a0
                -> IO ()
setMarginRight1 rhs =
  propertySet "MarginRight"
              [inFloat rhs]

getMarginTop1 :: TextFrame a0
              -> IO Float
getMarginTop1 =
  propertyGet "MarginTop"
              []
              outFloat

setMarginTop1 :: Float
              -> TextFrame a0
              -> IO ()
setMarginTop1 rhs =
  propertySet "MarginTop"
              [inFloat rhs]

getOrientation53 :: (Variant a1)
                 => TextFrame a0
                 -> IO a1
getOrientation53 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation53 :: (Variant a1)
                 => a1
                 -> TextFrame a0
                 -> IO ()
setOrientation53 rhs =
  propertySet "Orientation"
              [inVariant rhs]

characters0 :: (Variant a1, Variant a2)
            => a1
            -> a2
            -> TextFrame a0
            -> IO (Characters ())
characters0 start length =
  function1 "Characters"
            [ inVariant start
            , inVariant length
            ]
            outIDispatch

getHorizontalAlignment44 :: TextFrame a0
                         -> IO XlHAlign
getHorizontalAlignment44 =
  propertyGet "HorizontalAlignment"
              []
              outEnum

setHorizontalAlignment44 :: XlHAlign
                         -> TextFrame a0
                         -> IO ()
setHorizontalAlignment44 rhs =
  propertySet "HorizontalAlignment"
              [inEnum rhs]

getVerticalAlignment44 :: TextFrame a0
                       -> IO XlVAlign
getVerticalAlignment44 =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment44 :: XlVAlign
                       -> TextFrame a0
                       -> IO ()
setVerticalAlignment44 rhs =
  propertySet "VerticalAlignment"
              [inEnum rhs]

getAutoSize31 :: TextFrame a0
              -> IO Bool
getAutoSize31 =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize31 :: Bool
              -> TextFrame a0
              -> IO ()
setAutoSize31 rhs =
  propertySet "AutoSize"
              [inBool rhs]

getReadingOrder45 :: TextFrame a0
                  -> IO Int32
getReadingOrder45 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder45 :: Int32
                  -> TextFrame a0
                  -> IO ()
setReadingOrder45 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoMargins0 :: TextFrame a0
                -> IO Bool
getAutoMargins0 =
  propertyGet "AutoMargins"
              []
              outBool

setAutoMargins0 :: Bool
                -> TextFrame a0
                -> IO ()
setAutoMargins0 rhs =
  propertySet "AutoMargins"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface ConnectorFormat
-- 
-- --------------------------------------------------
data ConnectorFormat_ a = ConnectorFormat__ 
type ConnectorFormat a = IDispatch (ConnectorFormat_ a)
iidConnectorFormat :: IID (ConnectorFormat ())
iidConnectorFormat = mkIID "{0002443E-0000-0000-C000-000000000046}"

queryInterface168 :: (Variant a1)
                  => GUID
                  -> ConnectorFormat a0
                  -> IO a1
queryInterface168 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef168 :: ConnectorFormat a0
          -> IO Word32
addRef168 =
  function1 "AddRef"
            []
            outWord32

release168 :: ConnectorFormat a0
           -> IO Word32
release168 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount168 :: ConnectorFormat a0
                    -> IO Word32
getTypeInfoCount168 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo168 :: (Variant a1)
               => Word32
               -> Word32
               -> ConnectorFormat a0
               -> IO a1
getTypeInfo168 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames168 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ConnectorFormat a0
                 -> IO Int32
getIDsOfNames168 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke168 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ConnectorFormat a0
          -> IO (a1, a2, Word32)
invoke168 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication434 :: (Variant a1)
                  => ConnectorFormat a0
                  -> IO a1
getApplication434 =
  propertyGet "Application"
              []
              outVariant

getCreator434 :: ConnectorFormat a0
              -> IO XlCreator
getCreator434 =
  propertyGet "Creator"
              []
              outEnum

getParent449 :: ConnectorFormat a0
             -> IO (IDispatch ())
getParent449 =
  propertyGet "Parent"
              []
              outIDispatch

beginConnect0 :: Shape a1
              -> Int32
              -> ConnectorFormat a0
              -> IO ()
beginConnect0 connectedShape connectionSite =
  method0 "BeginConnect"
          [ inIDispatch connectedShape
          , inInt32 connectionSite
          ]

beginDisconnect0 :: ConnectorFormat a0
                 -> IO ()
beginDisconnect0 =
  method0 "BeginDisconnect"
          []

endConnect0 :: Shape a1
            -> Int32
            -> ConnectorFormat a0
            -> IO ()
endConnect0 connectedShape connectionSite =
  method0 "EndConnect"
          [ inIDispatch connectedShape
          , inInt32 connectionSite
          ]

endDisconnect0 :: ConnectorFormat a0
               -> IO ()
endDisconnect0 =
  method0 "EndDisconnect"
          []

getBeginConnected0 :: (Variant a1)
                   => ConnectorFormat a0
                   -> IO a1
getBeginConnected0 =
  propertyGet "BeginConnected"
              []
              outVariant

getBeginConnectedShape0 :: ConnectorFormat a0
                        -> IO (Shape ())
getBeginConnectedShape0 =
  propertyGet "BeginConnectedShape"
              []
              outIDispatch

getBeginConnectionSite0 :: ConnectorFormat a0
                        -> IO Int32
getBeginConnectionSite0 =
  propertyGet "BeginConnectionSite"
              []
              outInt32

getEndConnected0 :: (Variant a1)
                 => ConnectorFormat a0
                 -> IO a1
getEndConnected0 =
  propertyGet "EndConnected"
              []
              outVariant

getEndConnectedShape0 :: ConnectorFormat a0
                      -> IO (Shape ())
getEndConnectedShape0 =
  propertyGet "EndConnectedShape"
              []
              outIDispatch

getEndConnectionSite0 :: ConnectorFormat a0
                      -> IO Int32
getEndConnectionSite0 =
  propertyGet "EndConnectionSite"
              []
              outInt32

getType55 :: (Variant a1)
          => ConnectorFormat a0
          -> IO a1
getType55 =
  propertyGet "Type"
              []
              outVariant

setType21 :: (Variant a1)
          => a1
          -> ConnectorFormat a0
          -> IO ()
setType21 rhs =
  propertySet "Type"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface FreeformBuilder
-- 
-- --------------------------------------------------
data FreeformBuilder_ a = FreeformBuilder__ 
type FreeformBuilder a = IDispatch (FreeformBuilder_ a)
iidFreeformBuilder :: IID (FreeformBuilder ())
iidFreeformBuilder = mkIID "{0002443F-0000-0000-C000-000000000046}"

queryInterface169 :: (Variant a1)
                  => GUID
                  -> FreeformBuilder a0
                  -> IO a1
queryInterface169 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef169 :: FreeformBuilder a0
          -> IO Word32
addRef169 =
  function1 "AddRef"
            []
            outWord32

release169 :: FreeformBuilder a0
           -> IO Word32
release169 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount169 :: FreeformBuilder a0
                    -> IO Word32
getTypeInfoCount169 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo169 :: (Variant a1)
               => Word32
               -> Word32
               -> FreeformBuilder a0
               -> IO a1
getTypeInfo169 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames169 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> FreeformBuilder a0
                 -> IO Int32
getIDsOfNames169 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke169 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> FreeformBuilder a0
          -> IO (a1, a2, Word32)
invoke169 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication435 :: (Variant a1)
                  => FreeformBuilder a0
                  -> IO a1
getApplication435 =
  propertyGet "Application"
              []
              outVariant

getCreator435 :: FreeformBuilder a0
              -> IO XlCreator
getCreator435 =
  propertyGet "Creator"
              []
              outEnum

getParent450 :: FreeformBuilder a0
             -> IO (IDispatch ())
getParent450 =
  propertyGet "Parent"
              []
              outIDispatch

addNodes0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
          => a1
          -> a2
          -> Float
          -> Float
          -> a3
          -> a4
          -> a5
          -> a6
          -> FreeformBuilder a0
          -> IO ()
addNodes0 segmentType editingType x1 y1 x2 y2 x3 y3 =
  method0 "AddNodes"
          [ inVariant segmentType
          , inVariant editingType
          , inFloat x1
          , inFloat y1
          , inVariant x2
          , inVariant y2
          , inVariant x3
          , inVariant y3
          ]

convertToShape0 :: FreeformBuilder a0
                -> IO (Shape ())
convertToShape0 =
  function1 "ConvertToShape"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface ControlFormat
-- 
-- --------------------------------------------------
data ControlFormat_ a = ControlFormat__ 
type ControlFormat a = IDispatch (ControlFormat_ a)
iidControlFormat :: IID (ControlFormat ())
iidControlFormat = mkIID "{00024440-0000-0000-C000-000000000046}"

queryInterface170 :: (Variant a1)
                  => GUID
                  -> ControlFormat a0
                  -> IO a1
queryInterface170 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef170 :: ControlFormat a0
          -> IO Word32
addRef170 =
  function1 "AddRef"
            []
            outWord32

release170 :: ControlFormat a0
           -> IO Word32
release170 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount170 :: ControlFormat a0
                    -> IO Word32
getTypeInfoCount170 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo170 :: (Variant a1)
               => Word32
               -> Word32
               -> ControlFormat a0
               -> IO a1
getTypeInfo170 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames170 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ControlFormat a0
                 -> IO Int32
getIDsOfNames170 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke170 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ControlFormat a0
          -> IO (a1, a2, Word32)
invoke170 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication436 :: (Variant a1)
                  => ControlFormat a0
                  -> IO a1
getApplication436 =
  propertyGet "Application"
              []
              outVariant

getCreator436 :: ControlFormat a0
              -> IO XlCreator
getCreator436 =
  propertyGet "Creator"
              []
              outEnum

getParent451 :: ControlFormat a0
             -> IO (IDispatch ())
getParent451 =
  propertyGet "Parent"
              []
              outIDispatch

addItem10 :: (Variant a1)
          => String
          -> a1
          -> ControlFormat a0
          -> IO ()
addItem10 text3 index1 =
  method0 "AddItem"
          [ inString text3
          , inVariant index1
          ]

removeAllItems10 :: ControlFormat a0
                 -> IO ()
removeAllItems10 =
  method0 "RemoveAllItems"
          []

removeItem10 :: (Variant a1)
             => Int32
             -> a1
             -> ControlFormat a0
             -> IO ()
removeItem10 index1 count1 =
  method0 "RemoveItem"
          [ inInt32 index1
          , inVariant count1
          ]

getDropDownLines6 :: ControlFormat a0
                  -> IO Int32
getDropDownLines6 =
  propertyGet "DropDownLines"
              []
              outInt32

setDropDownLines6 :: Int32
                  -> ControlFormat a0
                  -> IO ()
setDropDownLines6 rhs =
  propertySet "DropDownLines"
              [inInt32 rhs]

getEnabled91 :: ControlFormat a0
             -> IO Bool
getEnabled91 =
  propertyGet "Enabled"
              []
              outBool

setEnabled91 :: Bool
             -> ControlFormat a0
             -> IO ()
setEnabled91 rhs =
  propertySet "Enabled"
              [inBool rhs]

getLargeChange6 :: ControlFormat a0
                -> IO Int32
getLargeChange6 =
  propertyGet "LargeChange"
              []
              outInt32

setLargeChange6 :: Int32
                -> ControlFormat a0
                -> IO ()
setLargeChange6 rhs =
  propertySet "LargeChange"
              [inInt32 rhs]

getLinkedCell28 :: ControlFormat a0
                -> IO String
getLinkedCell28 =
  propertyGet "LinkedCell"
              []
              outString

setLinkedCell28 :: String
                -> ControlFormat a0
                -> IO ()
setLinkedCell28 rhs =
  propertySet "LinkedCell"
              [inString rhs]

list2 :: (Variant a2)
      => a2
      -> ControlFormat a0
      -> IO a1
list2 index1 =
  function1 "List"
            [inVariant index1]
            outVariant

getListCount4 :: ControlFormat a0
              -> IO Int32
getListCount4 =
  propertyGet "ListCount"
              []
              outInt32

setListCount0 :: Int32
              -> ControlFormat a0
              -> IO ()
setListCount0 rhs =
  propertySet "ListCount"
              [inInt32 rhs]

getListFillRange12 :: ControlFormat a0
                   -> IO String
getListFillRange12 =
  propertyGet "ListFillRange"
              []
              outString

setListFillRange12 :: String
                   -> ControlFormat a0
                   -> IO ()
setListFillRange12 rhs =
  propertySet "ListFillRange"
              [inString rhs]

getListIndex10 :: ControlFormat a0
               -> IO Int32
getListIndex10 =
  propertyGet "ListIndex"
              []
              outInt32

setListIndex10 :: Int32
               -> ControlFormat a0
               -> IO ()
setListIndex10 rhs =
  propertySet "ListIndex"
              [inInt32 rhs]

getLockedText48 :: ControlFormat a0
                -> IO Bool
getLockedText48 =
  propertyGet "LockedText"
              []
              outBool

setLockedText48 :: Bool
                -> ControlFormat a0
                -> IO ()
setLockedText48 rhs =
  propertySet "LockedText"
              [inBool rhs]

getMax10 :: ControlFormat a0
         -> IO Int32
getMax10 =
  propertyGet "Max"
              []
              outInt32

setMax10 :: Int32
         -> ControlFormat a0
         -> IO ()
setMax10 rhs =
  propertySet "Max"
              [inInt32 rhs]

getMin10 :: ControlFormat a0
         -> IO Int32
getMin10 =
  propertyGet "Min"
              []
              outInt32

setMin10 :: Int32
         -> ControlFormat a0
         -> IO ()
setMin10 rhs =
  propertySet "Min"
              [inInt32 rhs]

getMultiSelect6 :: ControlFormat a0
                -> IO Int32
getMultiSelect6 =
  propertyGet "MultiSelect"
              []
              outInt32

setMultiSelect6 :: Int32
                -> ControlFormat a0
                -> IO ()
setMultiSelect6 rhs =
  propertySet "MultiSelect"
              [inInt32 rhs]

getPrintObject82 :: ControlFormat a0
                 -> IO Bool
getPrintObject82 =
  propertyGet "PrintObject"
              []
              outBool

setPrintObject82 :: Bool
                 -> ControlFormat a0
                 -> IO ()
setPrintObject82 rhs =
  propertySet "PrintObject"
              [inBool rhs]

getSmallChange10 :: ControlFormat a0
                 -> IO Int32
getSmallChange10 =
  propertyGet "SmallChange"
              []
              outInt32

setSmallChange10 :: Int32
                 -> ControlFormat a0
                 -> IO ()
setSmallChange10 rhs =
  propertySet "SmallChange"
              [inInt32 rhs]

getDefault164 :: ControlFormat a0
              -> IO Int32
getDefault164 =
  propertyGet "_Default"
              []
              outInt32

setDefault41 :: Int32
             -> ControlFormat a0
             -> IO ()
setDefault41 rhs =
  propertySet "_Default"
              [inInt32 rhs]

getValue56 :: ControlFormat a0
           -> IO Int32
getValue56 =
  propertyGet "Value"
              []
              outInt32

setValue46 :: Int32
           -> ControlFormat a0
           -> IO ()
setValue46 rhs =
  propertySet "Value"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface OLEFormat
-- 
-- --------------------------------------------------
data OLEFormat_ a = OLEFormat__ 
type OLEFormat a = IDispatch (OLEFormat_ a)
iidOLEFormat :: IID (OLEFormat ())
iidOLEFormat = mkIID "{00024441-0000-0000-C000-000000000046}"

queryInterface171 :: (Variant a1)
                  => GUID
                  -> OLEFormat a0
                  -> IO a1
queryInterface171 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef171 :: OLEFormat a0
          -> IO Word32
addRef171 =
  function1 "AddRef"
            []
            outWord32

release171 :: OLEFormat a0
           -> IO Word32
release171 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount171 :: OLEFormat a0
                    -> IO Word32
getTypeInfoCount171 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo171 :: (Variant a1)
               => Word32
               -> Word32
               -> OLEFormat a0
               -> IO a1
getTypeInfo171 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames171 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> OLEFormat a0
                 -> IO Int32
getIDsOfNames171 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke171 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> OLEFormat a0
          -> IO (a1, a2, Word32)
invoke171 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication437 :: (Variant a1)
                  => OLEFormat a0
                  -> IO a1
getApplication437 =
  propertyGet "Application"
              []
              outVariant

getCreator437 :: OLEFormat a0
              -> IO XlCreator
getCreator437 =
  propertyGet "Creator"
              []
              outEnum

getParent452 :: OLEFormat a0
             -> IO (IDispatch ())
getParent452 =
  propertyGet "Parent"
              []
              outIDispatch

activate25 :: OLEFormat a0
           -> IO ()
activate25 =
  method0 "Activate"
          []

getObject2 :: OLEFormat a0
           -> IO (IDispatch ())
getObject2 =
  propertyGet "Object"
              []
              outIDispatch

getProgID5 :: OLEFormat a0
           -> IO String
getProgID5 =
  propertyGet "progID"
              []
              outString

verb2 :: (Variant a1)
      => a1
      -> OLEFormat a0
      -> IO ()
verb2 verb3 =
  method0 "Verb"
          [inVariant verb3]

-- --------------------------------------------------
-- 
-- dispinterface LinkFormat
-- 
-- --------------------------------------------------
data LinkFormat_ a = LinkFormat__ 
type LinkFormat a = IDispatch (LinkFormat_ a)
iidLinkFormat :: IID (LinkFormat ())
iidLinkFormat = mkIID "{00024442-0000-0000-C000-000000000046}"

queryInterface172 :: (Variant a1)
                  => GUID
                  -> LinkFormat a0
                  -> IO a1
queryInterface172 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef172 :: LinkFormat a0
          -> IO Word32
addRef172 =
  function1 "AddRef"
            []
            outWord32

release172 :: LinkFormat a0
           -> IO Word32
release172 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount172 :: LinkFormat a0
                    -> IO Word32
getTypeInfoCount172 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo172 :: (Variant a1)
               => Word32
               -> Word32
               -> LinkFormat a0
               -> IO a1
getTypeInfo172 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames172 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> LinkFormat a0
                 -> IO Int32
getIDsOfNames172 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke172 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> LinkFormat a0
          -> IO (a1, a2, Word32)
invoke172 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication438 :: (Variant a1)
                  => LinkFormat a0
                  -> IO a1
getApplication438 =
  propertyGet "Application"
              []
              outVariant

getCreator438 :: LinkFormat a0
              -> IO XlCreator
getCreator438 =
  propertyGet "Creator"
              []
              outEnum

getParent453 :: LinkFormat a0
             -> IO (IDispatch ())
getParent453 =
  propertyGet "Parent"
              []
              outIDispatch

getAutoUpdate2 :: LinkFormat a0
               -> IO Bool
getAutoUpdate2 =
  propertyGet "AutoUpdate"
              []
              outBool

setAutoUpdate2 :: Bool
               -> LinkFormat a0
               -> IO ()
setAutoUpdate2 rhs =
  propertySet "AutoUpdate"
              [inBool rhs]

getLocked93 :: LinkFormat a0
            -> IO Bool
getLocked93 =
  propertyGet "Locked"
              []
              outBool

setLocked93 :: Bool
            -> LinkFormat a0
            -> IO ()
setLocked93 rhs =
  propertySet "Locked"
              [inBool rhs]

update4 :: LinkFormat a0
        -> IO ()
update4 =
  method0 "Update"
          []

-- --------------------------------------------------
-- 
-- dispinterface PublishObjects
-- 
-- --------------------------------------------------
data PublishObjects_ a = PublishObjects__ 
type PublishObjects a = IDispatch (PublishObjects_ a)
iidPublishObjects :: IID (PublishObjects ())
iidPublishObjects = mkIID "{00024443-0000-0000-C000-000000000046}"

queryInterface173 :: (Variant a1)
                  => GUID
                  -> PublishObjects a0
                  -> IO a1
queryInterface173 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef173 :: PublishObjects a0
          -> IO Word32
addRef173 =
  function1 "AddRef"
            []
            outWord32

release173 :: PublishObjects a0
           -> IO Word32
release173 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount173 :: PublishObjects a0
                    -> IO Word32
getTypeInfoCount173 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo173 :: (Variant a1)
               => Word32
               -> Word32
               -> PublishObjects a0
               -> IO a1
getTypeInfo173 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames173 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PublishObjects a0
                 -> IO Int32
getIDsOfNames173 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke173 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PublishObjects a0
          -> IO (a1, a2, Word32)
invoke173 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication439 :: (Variant a1)
                  => PublishObjects a0
                  -> IO a1
getApplication439 =
  propertyGet "Application"
              []
              outVariant

getCreator439 :: PublishObjects a0
              -> IO XlCreator
getCreator439 =
  propertyGet "Creator"
              []
              outEnum

getParent454 :: PublishObjects a0
             -> IO (IDispatch ())
getParent454 =
  propertyGet "Parent"
              []
              outIDispatch

add125 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
       => XlSourceType
       -> String
       -> a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> PublishObjects a0
       -> IO (PublishObject ())
add125 sourceType filename sheet source htmlType divID title =
  function1 "Add"
            [ inEnum sourceType
            , inString filename
            , inVariant sheet
            , inVariant source
            , inVariant htmlType
            , inVariant divID
            , inVariant title
            ]
            outIDispatch

getCount183 :: PublishObjects a0
            -> IO Int32
getCount183 =
  propertyGet "Count"
              []
              outInt32

getItem77 :: a1
          -> PublishObjects a0
          -> IO (PublishObject ())
getItem77 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getDefault165 :: a1
              -> PublishObjects a0
              -> IO (PublishObject ())
getDefault165 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum95 :: PublishObjects a0
             -> IO (IUnknown ())
getNewEnum95 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete224 :: PublishObjects a0
          -> IO ()
delete224 =
  method0 "Delete"
          []

publish2 :: PublishObjects a0
         -> IO ()
publish2 =
  method0 "Publish"
          []

-- --------------------------------------------------
-- 
-- dispinterface OLEDBError
-- 
-- --------------------------------------------------
data OLEDBError_ a = OLEDBError__ 
type OLEDBError a = IDispatch (OLEDBError_ a)
iidOLEDBError :: IID (OLEDBError ())
iidOLEDBError = mkIID "{00024445-0000-0000-C000-000000000046}"

queryInterface174 :: (Variant a1)
                  => GUID
                  -> OLEDBError a0
                  -> IO a1
queryInterface174 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef174 :: OLEDBError a0
          -> IO Word32
addRef174 =
  function1 "AddRef"
            []
            outWord32

release174 :: OLEDBError a0
           -> IO Word32
release174 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount174 :: OLEDBError a0
                    -> IO Word32
getTypeInfoCount174 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo174 :: (Variant a1)
               => Word32
               -> Word32
               -> OLEDBError a0
               -> IO a1
getTypeInfo174 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames174 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> OLEDBError a0
                 -> IO Int32
getIDsOfNames174 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke174 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> OLEDBError a0
          -> IO (a1, a2, Word32)
invoke174 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication440 :: (Variant a1)
                  => OLEDBError a0
                  -> IO a1
getApplication440 =
  propertyGet "Application"
              []
              outVariant

getCreator440 :: OLEDBError a0
              -> IO XlCreator
getCreator440 =
  propertyGet "Creator"
              []
              outEnum

getParent455 :: OLEDBError a0
             -> IO (IDispatch ())
getParent455 =
  propertyGet "Parent"
              []
              outIDispatch

getSqlState2 :: OLEDBError a0
             -> IO String
getSqlState2 =
  propertyGet "SqlState"
              []
              outString

getErrorString4 :: OLEDBError a0
                -> IO String
getErrorString4 =
  propertyGet "ErrorString"
              []
              outString

getNative0 :: OLEDBError a0
           -> IO Int32
getNative0 =
  propertyGet "Native"
              []
              outInt32

getNumber0 :: OLEDBError a0
           -> IO Int32
getNumber0 =
  propertyGet "Number"
              []
              outInt32

getStage0 :: OLEDBError a0
          -> IO Int32
getStage0 =
  propertyGet "Stage"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface OLEDBErrors
-- 
-- --------------------------------------------------
data OLEDBErrors_ a = OLEDBErrors__ 
type OLEDBErrors a = IDispatch (OLEDBErrors_ a)
iidOLEDBErrors :: IID (OLEDBErrors ())
iidOLEDBErrors = mkIID "{00024446-0000-0000-C000-000000000046}"

queryInterface175 :: (Variant a1)
                  => GUID
                  -> OLEDBErrors a0
                  -> IO a1
queryInterface175 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef175 :: OLEDBErrors a0
          -> IO Word32
addRef175 =
  function1 "AddRef"
            []
            outWord32

release175 :: OLEDBErrors a0
           -> IO Word32
release175 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount175 :: OLEDBErrors a0
                    -> IO Word32
getTypeInfoCount175 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo175 :: (Variant a1)
               => Word32
               -> Word32
               -> OLEDBErrors a0
               -> IO a1
getTypeInfo175 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames175 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> OLEDBErrors a0
                 -> IO Int32
getIDsOfNames175 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke175 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> OLEDBErrors a0
          -> IO (a1, a2, Word32)
invoke175 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication441 :: (Variant a1)
                  => OLEDBErrors a0
                  -> IO a1
getApplication441 =
  propertyGet "Application"
              []
              outVariant

getCreator441 :: OLEDBErrors a0
              -> IO XlCreator
getCreator441 =
  propertyGet "Creator"
              []
              outEnum

getParent456 :: OLEDBErrors a0
             -> IO (IDispatch ())
getParent456 =
  propertyGet "Parent"
              []
              outIDispatch

getCount184 :: OLEDBErrors a0
            -> IO Int32
getCount184 =
  propertyGet "Count"
              []
              outInt32

item101 :: Int32
        -> OLEDBErrors a0
        -> IO (OLEDBError ())
item101 index1 =
  function1 "Item"
            [inInt32 index1]
            outIDispatch

getDefault166 :: Int32
              -> OLEDBErrors a0
              -> IO (OLEDBError ())
getDefault166 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

newEnum80 :: OLEDBErrors a0
          -> IO (IUnknown ())
newEnum80 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Phonetics
-- 
-- --------------------------------------------------
data Phonetics_ a = Phonetics__ 
type Phonetics a = IDispatch (Phonetics_ a)
iidPhonetics :: IID (Phonetics ())
iidPhonetics = mkIID "{00024447-0000-0000-C000-000000000046}"

queryInterface176 :: (Variant a1)
                  => GUID
                  -> Phonetics a0
                  -> IO a1
queryInterface176 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef176 :: Phonetics a0
          -> IO Word32
addRef176 =
  function1 "AddRef"
            []
            outWord32

release176 :: Phonetics a0
           -> IO Word32
release176 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount176 :: Phonetics a0
                    -> IO Word32
getTypeInfoCount176 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo176 :: (Variant a1)
               => Word32
               -> Word32
               -> Phonetics a0
               -> IO a1
getTypeInfo176 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames176 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Phonetics a0
                 -> IO Int32
getIDsOfNames176 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke176 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Phonetics a0
          -> IO (a1, a2, Word32)
invoke176 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication442 :: (Variant a1)
                  => Phonetics a0
                  -> IO a1
getApplication442 =
  propertyGet "Application"
              []
              outVariant

getCreator442 :: Phonetics a0
              -> IO XlCreator
getCreator442 =
  propertyGet "Creator"
              []
              outEnum

getParent457 :: Phonetics a0
             -> IO (IDispatch ())
getParent457 =
  propertyGet "Parent"
              []
              outIDispatch

getCount185 :: Phonetics a0
            -> IO Int32
getCount185 =
  propertyGet "Count"
              []
              outInt32

getStart0 :: Phonetics a0
          -> IO Int32
getStart0 =
  propertyGet "Start"
              []
              outInt32

getLength1 :: Phonetics a0
           -> IO Int32
getLength1 =
  propertyGet "Length"
              []
              outInt32

getVisible120 :: Phonetics a0
              -> IO Bool
getVisible120 =
  propertyGet "Visible"
              []
              outBool

setVisible120 :: Bool
              -> Phonetics a0
              -> IO ()
setVisible120 rhs =
  propertySet "Visible"
              [inBool rhs]

getCharacterType2 :: Phonetics a0
                  -> IO Int32
getCharacterType2 =
  propertyGet "CharacterType"
              []
              outInt32

setCharacterType2 :: Int32
                  -> Phonetics a0
                  -> IO ()
setCharacterType2 rhs =
  propertySet "CharacterType"
              [inInt32 rhs]

getAlignment5 :: Phonetics a0
              -> IO Int32
getAlignment5 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment5 :: Int32
              -> Phonetics a0
              -> IO ()
setAlignment5 rhs =
  propertySet "Alignment"
              [inInt32 rhs]

getFont64 :: Phonetics a0
          -> IO (Font ())
getFont64 =
  propertyGet "Font"
              []
              outIDispatch

getItem78 :: Int32
          -> Phonetics a0
          -> IO (IDispatch ())
getItem78 index1 =
  propertyGet "Item"
              [inInt32 index1]
              outIDispatch

delete225 :: Phonetics a0
          -> IO ()
delete225 =
  method0 "Delete"
          []

add126 :: Int32
       -> Int32
       -> String
       -> Phonetics a0
       -> IO ()
add126 start length text3 =
  method0 "Add"
          [ inInt32 start
          , inInt32 length
          , inString text3
          ]

getText69 :: Phonetics a0
          -> IO String
getText69 =
  propertyGet "Text"
              []
              outString

setText67 :: String
          -> Phonetics a0
          -> IO ()
setText67 rhs =
  propertySet "Text"
              [inString rhs]

getDefault167 :: Int32
              -> Phonetics a0
              -> IO (IDispatch ())
getDefault167 index1 =
  propertyGet "_Default"
              [inInt32 index1]
              outIDispatch

getNewEnum96 :: Phonetics a0
             -> IO (IUnknown ())
getNewEnum96 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface PivotLayout
-- 
-- --------------------------------------------------
data PivotLayout_ a = PivotLayout__ 
type PivotLayout a = IDispatch (PivotLayout_ a)
iidPivotLayout :: IID (PivotLayout ())
iidPivotLayout = mkIID "{0002444A-0000-0000-C000-000000000046}"

queryInterface177 :: (Variant a1)
                  => GUID
                  -> PivotLayout a0
                  -> IO a1
queryInterface177 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef177 :: PivotLayout a0
          -> IO Word32
addRef177 =
  function1 "AddRef"
            []
            outWord32

release177 :: PivotLayout a0
           -> IO Word32
release177 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount177 :: PivotLayout a0
                    -> IO Word32
getTypeInfoCount177 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo177 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotLayout a0
               -> IO a1
getTypeInfo177 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames177 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotLayout a0
                 -> IO Int32
getIDsOfNames177 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke177 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotLayout a0
          -> IO (a1, a2, Word32)
invoke177 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication443 :: (Variant a1)
                  => PivotLayout a0
                  -> IO a1
getApplication443 =
  propertyGet "Application"
              []
              outVariant

getCreator443 :: PivotLayout a0
              -> IO XlCreator
getCreator443 =
  propertyGet "Creator"
              []
              outEnum

getParent458 :: PivotLayout a0
             -> IO (IDispatch ())
getParent458 =
  propertyGet "Parent"
              []
              outIDispatch

getColumnFields2 :: (Variant a1)
                 => a1
                 -> PivotLayout a0
                 -> IO (IDispatch ())
getColumnFields2 index1 =
  propertyGet "ColumnFields"
              [inVariant index1]
              outIDispatch

getDataFields2 :: (Variant a1)
               => a1
               -> PivotLayout a0
               -> IO (IDispatch ())
getDataFields2 index1 =
  propertyGet "DataFields"
              [inVariant index1]
              outIDispatch

getPageFields2 :: (Variant a1)
               => a1
               -> PivotLayout a0
               -> IO (IDispatch ())
getPageFields2 index1 =
  propertyGet "PageFields"
              [inVariant index1]
              outIDispatch

getRowFields2 :: (Variant a1)
              => a1
              -> PivotLayout a0
              -> IO (IDispatch ())
getRowFields2 index1 =
  propertyGet "RowFields"
              [inVariant index1]
              outIDispatch

getHiddenFields2 :: (Variant a1)
                 => a1
                 -> PivotLayout a0
                 -> IO (IDispatch ())
getHiddenFields2 index1 =
  propertyGet "HiddenFields"
              [inVariant index1]
              outIDispatch

getVisibleFields2 :: (Variant a1)
                  => a1
                  -> PivotLayout a0
                  -> IO (IDispatch ())
getVisibleFields2 index1 =
  propertyGet "VisibleFields"
              [inVariant index1]
              outIDispatch

getPivotFields1 :: (Variant a1)
                => a1
                -> PivotLayout a0
                -> IO (IDispatch ())
getPivotFields1 index1 =
  propertyGet "PivotFields"
              [inVariant index1]
              outIDispatch

getCubeFields2 :: PivotLayout a0
               -> IO (CubeFields ())
getCubeFields2 =
  propertyGet "CubeFields"
              []
              outIDispatch

getPivotCache0 :: PivotLayout a0
               -> IO (PivotCache ())
getPivotCache0 =
  propertyGet "PivotCache"
              []
              outIDispatch

getPivotTable3 :: PivotLayout a0
               -> IO (PivotTable ())
getPivotTable3 =
  propertyGet "PivotTable"
              []
              outIDispatch

getInnerDetail2 :: PivotLayout a0
                -> IO String
getInnerDetail2 =
  propertyGet "InnerDetail"
              []
              outString

setInnerDetail2 :: String
                -> PivotLayout a0
                -> IO ()
setInnerDetail2 rhs =
  propertySet "InnerDetail"
              [inString rhs]

addFields2 :: (Variant a1, Variant a2, Variant a3, Variant a4)
           => a1
           -> a2
           -> a3
           -> a4
           -> PivotLayout a0
           -> IO ()
addFields2 rowFields columnFields pageFields appendField =
  method0 "AddFields"
          [ inVariant rowFields
          , inVariant columnFields
          , inVariant pageFields
          , inVariant appendField
          ]

-- --------------------------------------------------
-- 
-- dispinterface DisplayUnitLabel
-- 
-- --------------------------------------------------
data DisplayUnitLabel_ a = DisplayUnitLabel__ 
type DisplayUnitLabel a = IDispatch (DisplayUnitLabel_ a)
iidDisplayUnitLabel :: IID (DisplayUnitLabel ())
iidDisplayUnitLabel =
  mkIID "{0002084C-0000-0000-C000-000000000046}"

queryInterface178 :: (Variant a1)
                  => GUID
                  -> DisplayUnitLabel a0
                  -> IO a1
queryInterface178 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef178 :: DisplayUnitLabel a0
          -> IO Word32
addRef178 =
  function1 "AddRef"
            []
            outWord32

release178 :: DisplayUnitLabel a0
           -> IO Word32
release178 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount178 :: DisplayUnitLabel a0
                    -> IO Word32
getTypeInfoCount178 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo178 :: (Variant a1)
               => Word32
               -> Word32
               -> DisplayUnitLabel a0
               -> IO a1
getTypeInfo178 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames178 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DisplayUnitLabel a0
                 -> IO Int32
getIDsOfNames178 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke178 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DisplayUnitLabel a0
          -> IO (a1, a2, Word32)
invoke178 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication444 :: (Variant a1)
                  => DisplayUnitLabel a0
                  -> IO a1
getApplication444 =
  propertyGet "Application"
              []
              outVariant

getCreator444 :: DisplayUnitLabel a0
              -> IO XlCreator
getCreator444 =
  propertyGet "Creator"
              []
              outEnum

getParent459 :: DisplayUnitLabel a0
             -> IO (IDispatch ())
getParent459 =
  propertyGet "Parent"
              []
              outIDispatch

getName140 :: DisplayUnitLabel a0
           -> IO String
getName140 =
  propertyGet "Name"
              []
              outString

select159 :: DisplayUnitLabel a0
          -> IO a1
select159 =
  function1 "Select"
            []
            outVariant

getBorder97 :: DisplayUnitLabel a0
            -> IO (Border ())
getBorder97 =
  propertyGet "Border"
              []
              outIDispatch

delete226 :: DisplayUnitLabel a0
          -> IO a1
delete226 =
  function1 "Delete"
            []
            outVariant

getInterior85 :: DisplayUnitLabel a0
              -> IO (Interior ())
getInterior85 =
  propertyGet "Interior"
              []
              outIDispatch

getFill33 :: DisplayUnitLabel a0
          -> IO (ChartFillFormat ())
getFill33 =
  propertyGet "Fill"
              []
              outIDispatch

getCaption76 :: DisplayUnitLabel a0
             -> IO String
getCaption76 =
  propertyGet "Caption"
              []
              outString

setCaption74 :: String
             -> DisplayUnitLabel a0
             -> IO ()
setCaption74 rhs =
  propertySet "Caption"
              [inString rhs]

getCharacters60 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> DisplayUnitLabel a0
                -> IO (Characters ())
getCharacters60 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIDispatch

getFont65 :: DisplayUnitLabel a0
          -> IO (Font ())
getFont65 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment45 :: DisplayUnitLabel a0
                         -> IO a1
getHorizontalAlignment45 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment45 :: a1
                         -> DisplayUnitLabel a0
                         -> IO ()
setHorizontalAlignment45 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getLeft113 :: DisplayUnitLabel a0
           -> IO Double
getLeft113 =
  propertyGet "Left"
              []
              outDouble

setLeft105 :: Double
           -> DisplayUnitLabel a0
           -> IO ()
setLeft105 rhs =
  propertySet "Left"
              [inDouble rhs]

getOrientation54 :: DisplayUnitLabel a0
                 -> IO a1
getOrientation54 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation54 :: a1
                 -> DisplayUnitLabel a0
                 -> IO ()
setOrientation54 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getShadow59 :: DisplayUnitLabel a0
            -> IO Bool
getShadow59 =
  propertyGet "Shadow"
              []
              outBool

setShadow54 :: Bool
            -> DisplayUnitLabel a0
            -> IO ()
setShadow54 rhs =
  propertySet "Shadow"
              [inBool rhs]

getText70 :: DisplayUnitLabel a0
          -> IO String
getText70 =
  propertyGet "Text"
              []
              outString

setText68 :: String
          -> DisplayUnitLabel a0
          -> IO ()
setText68 rhs =
  propertySet "Text"
              [inString rhs]

getTop113 :: DisplayUnitLabel a0
          -> IO Double
getTop113 =
  propertyGet "Top"
              []
              outDouble

setTop105 :: Double
          -> DisplayUnitLabel a0
          -> IO ()
setTop105 rhs =
  propertySet "Top"
              [inDouble rhs]

getVerticalAlignment45 :: DisplayUnitLabel a0
                       -> IO a1
getVerticalAlignment45 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment45 :: a1
                       -> DisplayUnitLabel a0
                       -> IO ()
setVerticalAlignment45 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getReadingOrder46 :: DisplayUnitLabel a0
                  -> IO Int32
getReadingOrder46 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder46 :: Int32
                  -> DisplayUnitLabel a0
                  -> IO ()
setReadingOrder46 rhs =
  propertySet "ReadingOrder"
              [inInt32 rhs]

getAutoScaleFont42 :: DisplayUnitLabel a0
                   -> IO a1
getAutoScaleFont42 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont42 :: a1
                   -> DisplayUnitLabel a0
                   -> IO ()
setAutoScaleFont42 rhs =
  propertySet "AutoScaleFont"
              [inVariant rhs]

dummy212 :: DisplayUnitLabel a0
         -> IO ()
dummy212 =
  method0 "_Dummy21"
          []

getPosition21 :: DisplayUnitLabel a0
              -> IO XlChartElementPosition
getPosition21 =
  propertyGet "Position"
              []
              outEnum

setPosition21 :: XlChartElementPosition
              -> DisplayUnitLabel a0
              -> IO ()
setPosition21 rhs =
  propertySet "Position"
              [inEnum rhs]

getFormat50 :: DisplayUnitLabel a0
            -> IO (ChartFormat ())
getFormat50 =
  propertyGet "Format"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CellFormat
-- 
-- --------------------------------------------------
data CellFormat_ a = CellFormat__ 
type CellFormat a = IDispatch (CellFormat_ a)
iidCellFormat :: IID (CellFormat ())
iidCellFormat = mkIID "{00024450-0000-0000-C000-000000000046}"

queryInterface179 :: (Variant a1)
                  => GUID
                  -> CellFormat a0
                  -> IO a1
queryInterface179 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef179 :: CellFormat a0
          -> IO Word32
addRef179 =
  function1 "AddRef"
            []
            outWord32

release179 :: CellFormat a0
           -> IO Word32
release179 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount179 :: CellFormat a0
                    -> IO Word32
getTypeInfoCount179 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo179 :: (Variant a1)
               => Word32
               -> Word32
               -> CellFormat a0
               -> IO a1
getTypeInfo179 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames179 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CellFormat a0
                 -> IO Int32
getIDsOfNames179 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke179 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CellFormat a0
          -> IO (a1, a2, Word32)
invoke179 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication445 :: (Variant a1)
                  => CellFormat a0
                  -> IO a1
getApplication445 =
  propertyGet "Application"
              []
              outVariant

getCreator445 :: CellFormat a0
              -> IO XlCreator
getCreator445 =
  propertyGet "Creator"
              []
              outEnum

getParent460 :: CellFormat a0
             -> IO (IDispatch ())
getParent460 =
  propertyGet "Parent"
              []
              outIDispatch

getBorders10 :: CellFormat a0
             -> IO (Borders ())
getBorders10 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders0 :: Borders a1
            -> CellFormat a0
            -> IO ()
setBorders0 rhs =
  propertySet "Borders"
              [inIDispatch rhs]

getFont66 :: CellFormat a0
          -> IO (Font ())
getFont66 =
  propertyGet "Font"
              []
              outIDispatch

setFont0 :: Font a1
         -> CellFormat a0
         -> IO ()
setFont0 rhs =
  propertySet "Font"
              [inIDispatch rhs]

getInterior86 :: CellFormat a0
              -> IO (Interior ())
getInterior86 =
  propertyGet "Interior"
              []
              outIDispatch

setInterior0 :: Interior a1
             -> CellFormat a0
             -> IO ()
setInterior0 rhs =
  propertySet "Interior"
              [inIDispatch rhs]

getNumberFormat17 :: CellFormat a0
                  -> IO a1
getNumberFormat17 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat17 :: a1
                  -> CellFormat a0
                  -> IO ()
setNumberFormat17 rhs =
  propertySet "NumberFormat"
              [inVariant rhs]

getNumberFormatLocal10 :: CellFormat a0
                       -> IO a1
getNumberFormatLocal10 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal10 :: a1
                       -> CellFormat a0
                       -> IO ()
setNumberFormatLocal10 rhs =
  propertySet "NumberFormatLocal"
              [inVariant rhs]

getAddIndent34 :: CellFormat a0
               -> IO a1
getAddIndent34 =
  propertyGet "AddIndent"
              []
              outVariant

setAddIndent34 :: a1
               -> CellFormat a0
               -> IO ()
setAddIndent34 rhs =
  propertySet "AddIndent"
              [inVariant rhs]

getIndentLevel4 :: CellFormat a0
                -> IO a1
getIndentLevel4 =
  propertyGet "IndentLevel"
              []
              outVariant

setIndentLevel4 :: a1
                -> CellFormat a0
                -> IO ()
setIndentLevel4 rhs =
  propertySet "IndentLevel"
              [inVariant rhs]

getHorizontalAlignment46 :: CellFormat a0
                         -> IO a1
getHorizontalAlignment46 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment46 :: a1
                         -> CellFormat a0
                         -> IO ()
setHorizontalAlignment46 rhs =
  propertySet "HorizontalAlignment"
              [inVariant rhs]

getVerticalAlignment46 :: CellFormat a0
                       -> IO a1
getVerticalAlignment46 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment46 :: a1
                       -> CellFormat a0
                       -> IO ()
setVerticalAlignment46 rhs =
  propertySet "VerticalAlignment"
              [inVariant rhs]

getOrientation55 :: CellFormat a0
                 -> IO a1
getOrientation55 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation55 :: a1
                 -> CellFormat a0
                 -> IO ()
setOrientation55 rhs =
  propertySet "Orientation"
              [inVariant rhs]

getShrinkToFit4 :: CellFormat a0
                -> IO a1
getShrinkToFit4 =
  propertyGet "ShrinkToFit"
              []
              outVariant

setShrinkToFit4 :: a1
                -> CellFormat a0
                -> IO ()
setShrinkToFit4 rhs =
  propertySet "ShrinkToFit"
              [inVariant rhs]

getWrapText4 :: CellFormat a0
             -> IO a1
getWrapText4 =
  propertyGet "WrapText"
              []
              outVariant

setWrapText4 :: a1
             -> CellFormat a0
             -> IO ()
setWrapText4 rhs =
  propertySet "WrapText"
              [inVariant rhs]

getLocked94 :: CellFormat a0
            -> IO a1
getLocked94 =
  propertyGet "Locked"
              []
              outVariant

setLocked94 :: a1
            -> CellFormat a0
            -> IO ()
setLocked94 rhs =
  propertySet "Locked"
              [inVariant rhs]

getFormulaHidden4 :: CellFormat a0
                  -> IO a1
getFormulaHidden4 =
  propertyGet "FormulaHidden"
              []
              outVariant

setFormulaHidden4 :: a1
                  -> CellFormat a0
                  -> IO ()
setFormulaHidden4 rhs =
  propertySet "FormulaHidden"
              [inVariant rhs]

getMergeCells4 :: CellFormat a0
               -> IO a1
getMergeCells4 =
  propertyGet "MergeCells"
              []
              outVariant

setMergeCells4 :: a1
               -> CellFormat a0
               -> IO ()
setMergeCells4 rhs =
  propertySet "MergeCells"
              [inVariant rhs]

clear10 :: CellFormat a0
        -> IO ()
clear10 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- dispinterface UsedObjects
-- 
-- --------------------------------------------------
data UsedObjects_ a = UsedObjects__ 
type UsedObjects a = IDispatch (UsedObjects_ a)
iidUsedObjects :: IID (UsedObjects ())
iidUsedObjects = mkIID "{00024451-0000-0000-C000-000000000046}"

queryInterface180 :: (Variant a1)
                  => GUID
                  -> UsedObjects a0
                  -> IO a1
queryInterface180 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef180 :: UsedObjects a0
          -> IO Word32
addRef180 =
  function1 "AddRef"
            []
            outWord32

release180 :: UsedObjects a0
           -> IO Word32
release180 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount180 :: UsedObjects a0
                    -> IO Word32
getTypeInfoCount180 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo180 :: (Variant a1)
               => Word32
               -> Word32
               -> UsedObjects a0
               -> IO a1
getTypeInfo180 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames180 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> UsedObjects a0
                 -> IO Int32
getIDsOfNames180 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke180 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> UsedObjects a0
          -> IO (a1, a2, Word32)
invoke180 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication446 :: (Variant a1)
                  => UsedObjects a0
                  -> IO a1
getApplication446 =
  propertyGet "Application"
              []
              outVariant

getCreator446 :: UsedObjects a0
              -> IO XlCreator
getCreator446 =
  propertyGet "Creator"
              []
              outEnum

getParent461 :: UsedObjects a0
             -> IO (IDispatch ())
getParent461 =
  propertyGet "Parent"
              []
              outIDispatch

getCount186 :: UsedObjects a0
            -> IO Int32
getCount186 =
  propertyGet "Count"
              []
              outInt32

getNewEnum97 :: UsedObjects a0
             -> IO (IUnknown ())
getNewEnum97 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getDefault168 :: a1
              -> UsedObjects a0
              -> IO (IDispatch ())
getDefault168 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem79 :: a1
          -> UsedObjects a0
          -> IO (IDispatch ())
getItem79 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface CustomProperties
-- 
-- --------------------------------------------------
data CustomProperties_ a = CustomProperties__ 
type CustomProperties a = IDispatch (CustomProperties_ a)
iidCustomProperties :: IID (CustomProperties ())
iidCustomProperties =
  mkIID "{00024452-0000-0000-C000-000000000046}"

queryInterface181 :: (Variant a1)
                  => GUID
                  -> CustomProperties a0
                  -> IO a1
queryInterface181 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef181 :: CustomProperties a0
          -> IO Word32
addRef181 =
  function1 "AddRef"
            []
            outWord32

release181 :: CustomProperties a0
           -> IO Word32
release181 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount181 :: CustomProperties a0
                    -> IO Word32
getTypeInfoCount181 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo181 :: (Variant a1)
               => Word32
               -> Word32
               -> CustomProperties a0
               -> IO a1
getTypeInfo181 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames181 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CustomProperties a0
                 -> IO Int32
getIDsOfNames181 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke181 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CustomProperties a0
          -> IO (a1, a2, Word32)
invoke181 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication447 :: (Variant a1)
                  => CustomProperties a0
                  -> IO a1
getApplication447 =
  propertyGet "Application"
              []
              outVariant

getCreator447 :: CustomProperties a0
              -> IO XlCreator
getCreator447 =
  propertyGet "Creator"
              []
              outEnum

getParent462 :: CustomProperties a0
             -> IO (IDispatch ())
getParent462 =
  propertyGet "Parent"
              []
              outIDispatch

add127 :: String
       -> a1
       -> CustomProperties a0
       -> IO (CustomProperty ())
add127 name value =
  function1 "Add"
            [ inString name
            , inVariant value
            ]
            outIUnknown

getCount187 :: CustomProperties a0
            -> IO Int32
getCount187 =
  propertyGet "Count"
              []
              outInt32

getDefault169 :: a1
              -> CustomProperties a0
              -> IO (CustomProperty ())
getDefault169 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getItem80 :: a1
          -> CustomProperties a0
          -> IO (CustomProperty ())
getItem80 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getNewEnum98 :: CustomProperties a0
             -> IO (IUnknown ())
getNewEnum98 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CustomProperty
-- 
-- --------------------------------------------------
data CustomProperty_ a = CustomProperty__ 
type CustomProperty a = IDispatch (CustomProperty_ a)
iidCustomProperty :: IID (CustomProperty ())
iidCustomProperty = mkIID "{00024453-0000-0000-C000-000000000046}"

queryInterface182 :: (Variant a1)
                  => GUID
                  -> CustomProperty a0
                  -> IO a1
queryInterface182 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef182 :: CustomProperty a0
          -> IO Word32
addRef182 =
  function1 "AddRef"
            []
            outWord32

release182 :: CustomProperty a0
           -> IO Word32
release182 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount182 :: CustomProperty a0
                    -> IO Word32
getTypeInfoCount182 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo182 :: (Variant a1)
               => Word32
               -> Word32
               -> CustomProperty a0
               -> IO a1
getTypeInfo182 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames182 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CustomProperty a0
                 -> IO Int32
getIDsOfNames182 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke182 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CustomProperty a0
          -> IO (a1, a2, Word32)
invoke182 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication448 :: (Variant a1)
                  => CustomProperty a0
                  -> IO a1
getApplication448 =
  propertyGet "Application"
              []
              outVariant

getCreator448 :: CustomProperty a0
              -> IO XlCreator
getCreator448 =
  propertyGet "Creator"
              []
              outEnum

getParent463 :: CustomProperty a0
             -> IO (IDispatch ())
getParent463 =
  propertyGet "Parent"
              []
              outIDispatch

getName141 :: CustomProperty a0
           -> IO String
getName141 =
  propertyGet "Name"
              []
              outString

setName80 :: String
          -> CustomProperty a0
          -> IO ()
setName80 rhs =
  propertySet "Name"
              [inString rhs]

getValue57 :: CustomProperty a0
           -> IO a1
getValue57 =
  propertyGet "Value"
              []
              outVariant

setValue47 :: a1
           -> CustomProperty a0
           -> IO ()
setValue47 rhs =
  propertySet "Value"
              [inVariant rhs]

getDefault170 :: CustomProperty a0
              -> IO a1
getDefault170 =
  propertyGet "_Default"
              []
              outVariant

delete227 :: CustomProperty a0
          -> IO ()
delete227 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- dispinterface CalculatedMembers
-- 
-- --------------------------------------------------
data CalculatedMembers_ a = CalculatedMembers__ 
type CalculatedMembers a = IDispatch (CalculatedMembers_ a)
iidCalculatedMembers :: IID (CalculatedMembers ())
iidCalculatedMembers =
  mkIID "{00024454-0000-0000-C000-000000000046}"

queryInterface183 :: (Variant a1)
                  => GUID
                  -> CalculatedMembers a0
                  -> IO a1
queryInterface183 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef183 :: CalculatedMembers a0
          -> IO Word32
addRef183 =
  function1 "AddRef"
            []
            outWord32

release183 :: CalculatedMembers a0
           -> IO Word32
release183 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount183 :: CalculatedMembers a0
                    -> IO Word32
getTypeInfoCount183 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo183 :: (Variant a1)
               => Word32
               -> Word32
               -> CalculatedMembers a0
               -> IO a1
getTypeInfo183 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames183 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CalculatedMembers a0
                 -> IO Int32
getIDsOfNames183 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke183 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CalculatedMembers a0
          -> IO (a1, a2, Word32)
invoke183 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication449 :: (Variant a1)
                  => CalculatedMembers a0
                  -> IO a1
getApplication449 =
  propertyGet "Application"
              []
              outVariant

getCreator449 :: CalculatedMembers a0
              -> IO XlCreator
getCreator449 =
  propertyGet "Creator"
              []
              outEnum

getParent464 :: CalculatedMembers a0
             -> IO (IDispatch ())
getParent464 =
  propertyGet "Parent"
              []
              outIDispatch

getCount188 :: CalculatedMembers a0
            -> IO Int32
getCount188 =
  propertyGet "Count"
              []
              outInt32

getItem81 :: a1
          -> CalculatedMembers a0
          -> IO (CalculatedMember ())
getItem81 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getDefault171 :: a1
              -> CalculatedMembers a0
              -> IO (CalculatedMember ())
getDefault171 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum99 :: CalculatedMembers a0
             -> IO (IUnknown ())
getNewEnum99 =
  propertyGet "_NewEnum"
              []
              outIUnknown

add128 :: (Variant a1, Variant a2)
       => String
       -> String
       -> a1
       -> a2
       -> CalculatedMembers a0
       -> IO (CalculatedMember ())
add128 name formula solveOrder type0 =
  function1 "Add"
            [ inString name
            , inString formula
            , inVariant solveOrder
            , inVariant type0
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface CalculatedMember
-- 
-- --------------------------------------------------
data CalculatedMember_ a = CalculatedMember__ 
type CalculatedMember a = IDispatch (CalculatedMember_ a)
iidCalculatedMember :: IID (CalculatedMember ())
iidCalculatedMember =
  mkIID "{00024455-0000-0000-C000-000000000046}"

queryInterface184 :: (Variant a1)
                  => GUID
                  -> CalculatedMember a0
                  -> IO a1
queryInterface184 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef184 :: CalculatedMember a0
          -> IO Word32
addRef184 =
  function1 "AddRef"
            []
            outWord32

release184 :: CalculatedMember a0
           -> IO Word32
release184 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount184 :: CalculatedMember a0
                    -> IO Word32
getTypeInfoCount184 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo184 :: (Variant a1)
               => Word32
               -> Word32
               -> CalculatedMember a0
               -> IO a1
getTypeInfo184 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames184 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> CalculatedMember a0
                 -> IO Int32
getIDsOfNames184 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke184 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> CalculatedMember a0
          -> IO (a1, a2, Word32)
invoke184 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication450 :: (Variant a1)
                  => CalculatedMember a0
                  -> IO a1
getApplication450 =
  propertyGet "Application"
              []
              outVariant

getCreator450 :: CalculatedMember a0
              -> IO XlCreator
getCreator450 =
  propertyGet "Creator"
              []
              outEnum

getParent465 :: CalculatedMember a0
             -> IO (IDispatch ())
getParent465 =
  propertyGet "Parent"
              []
              outIDispatch

getName142 :: CalculatedMember a0
           -> IO String
getName142 =
  propertyGet "Name"
              []
              outString

getFormula45 :: CalculatedMember a0
             -> IO String
getFormula45 =
  propertyGet "Formula"
              []
              outString

getSourceName8 :: CalculatedMember a0
               -> IO String
getSourceName8 =
  propertyGet "SourceName"
              []
              outString

getSolveOrder0 :: CalculatedMember a0
               -> IO Int32
getSolveOrder0 =
  propertyGet "SolveOrder"
              []
              outInt32

getIsValid0 :: CalculatedMember a0
            -> IO Bool
getIsValid0 =
  propertyGet "IsValid"
              []
              outBool

getDefault172 :: CalculatedMember a0
              -> IO String
getDefault172 =
  propertyGet "_Default"
              []
              outString

delete228 :: CalculatedMember a0
          -> IO ()
delete228 =
  method0 "Delete"
          []

getType56 :: CalculatedMember a0
          -> IO XlCalculatedMemberType
getType56 =
  propertyGet "Type"
              []
              outEnum

-- --------------------------------------------------
-- 
-- dispinterface Watches
-- 
-- --------------------------------------------------
data Watches_ a = Watches__ 
type Watches a = IDispatch (Watches_ a)
iidWatches :: IID (Watches ())
iidWatches = mkIID "{00024456-0000-0000-C000-000000000046}"

queryInterface185 :: (Variant a1)
                  => GUID
                  -> Watches a0
                  -> IO a1
queryInterface185 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef185 :: Watches a0
          -> IO Word32
addRef185 =
  function1 "AddRef"
            []
            outWord32

release185 :: Watches a0
           -> IO Word32
release185 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount185 :: Watches a0
                    -> IO Word32
getTypeInfoCount185 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo185 :: (Variant a1)
               => Word32
               -> Word32
               -> Watches a0
               -> IO a1
getTypeInfo185 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames185 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Watches a0
                 -> IO Int32
getIDsOfNames185 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke185 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Watches a0
          -> IO (a1, a2, Word32)
invoke185 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication451 :: (Variant a1)
                  => Watches a0
                  -> IO a1
getApplication451 =
  propertyGet "Application"
              []
              outVariant

getCreator451 :: Watches a0
              -> IO XlCreator
getCreator451 =
  propertyGet "Creator"
              []
              outEnum

getParent466 :: Watches a0
             -> IO (IDispatch ())
getParent466 =
  propertyGet "Parent"
              []
              outIDispatch

add129 :: a1
       -> Watches a0
       -> IO (Watch ())
add129 source =
  function1 "Add"
            [inVariant source]
            outIUnknown

getCount189 :: Watches a0
            -> IO Int32
getCount189 =
  propertyGet "Count"
              []
              outInt32

getDefault173 :: a1
              -> Watches a0
              -> IO (Watch ())
getDefault173 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getItem82 :: a1
          -> Watches a0
          -> IO (Watch ())
getItem82 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getNewEnum100 :: Watches a0
              -> IO (IUnknown ())
getNewEnum100 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete229 :: Watches a0
          -> IO ()
delete229 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- dispinterface Watch
-- 
-- --------------------------------------------------
data Watch_ a = Watch__ 
type Watch a = IDispatch (Watch_ a)
iidWatch :: IID (Watch ())
iidWatch = mkIID "{00024457-0000-0000-C000-000000000046}"

queryInterface186 :: (Variant a1)
                  => GUID
                  -> Watch a0
                  -> IO a1
queryInterface186 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef186 :: Watch a0
          -> IO Word32
addRef186 =
  function1 "AddRef"
            []
            outWord32

release186 :: Watch a0
           -> IO Word32
release186 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount186 :: Watch a0
                    -> IO Word32
getTypeInfoCount186 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo186 :: (Variant a1)
               => Word32
               -> Word32
               -> Watch a0
               -> IO a1
getTypeInfo186 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames186 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Watch a0
                 -> IO Int32
getIDsOfNames186 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke186 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Watch a0
          -> IO (a1, a2, Word32)
invoke186 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication452 :: (Variant a1)
                  => Watch a0
                  -> IO a1
getApplication452 =
  propertyGet "Application"
              []
              outVariant

getCreator452 :: Watch a0
              -> IO XlCreator
getCreator452 =
  propertyGet "Creator"
              []
              outEnum

getParent467 :: Watch a0
             -> IO (IDispatch ())
getParent467 =
  propertyGet "Parent"
              []
              outIDispatch

delete230 :: Watch a0
          -> IO ()
delete230 =
  method0 "Delete"
          []

getSource1 :: Watch a0
           -> IO a1
getSource1 =
  propertyGet "Source"
              []
              outVariant

-- --------------------------------------------------
-- 
-- dispinterface PivotCell
-- 
-- --------------------------------------------------
data PivotCell_ a = PivotCell__ 
type PivotCell a = IDispatch (PivotCell_ a)
iidPivotCell :: IID (PivotCell ())
iidPivotCell = mkIID "{00024458-0000-0000-C000-000000000046}"

queryInterface187 :: (Variant a1)
                  => GUID
                  -> PivotCell a0
                  -> IO a1
queryInterface187 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef187 :: PivotCell a0
          -> IO Word32
addRef187 =
  function1 "AddRef"
            []
            outWord32

release187 :: PivotCell a0
           -> IO Word32
release187 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount187 :: PivotCell a0
                    -> IO Word32
getTypeInfoCount187 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo187 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotCell a0
               -> IO a1
getTypeInfo187 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames187 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotCell a0
                 -> IO Int32
getIDsOfNames187 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke187 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotCell a0
          -> IO (a1, a2, Word32)
invoke187 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication453 :: (Variant a1)
                  => PivotCell a0
                  -> IO a1
getApplication453 =
  propertyGet "Application"
              []
              outVariant

getCreator453 :: PivotCell a0
              -> IO XlCreator
getCreator453 =
  propertyGet "Creator"
              []
              outEnum

getParent468 :: PivotCell a0
             -> IO (IDispatch ())
getParent468 =
  propertyGet "Parent"
              []
              outIDispatch

getPivotCellType0 :: PivotCell a0
                  -> IO XlPivotCellType
getPivotCellType0 =
  propertyGet "PivotCellType"
              []
              outEnum

getPivotTable4 :: PivotCell a0
               -> IO (PivotTable ())
getPivotTable4 =
  propertyGet "PivotTable"
              []
              outIDispatch

getDataField1 :: PivotCell a0
              -> IO (PivotField ())
getDataField1 =
  propertyGet "DataField"
              []
              outIDispatch

getPivotField3 :: PivotCell a0
               -> IO (PivotField ())
getPivotField3 =
  propertyGet "PivotField"
              []
              outIDispatch

getPivotItem2 :: PivotCell a0
              -> IO (PivotItem ())
getPivotItem2 =
  propertyGet "PivotItem"
              []
              outIDispatch

getRowItems0 :: PivotCell a0
             -> IO (PivotItemList ())
getRowItems0 =
  propertyGet "RowItems"
              []
              outIUnknown

getColumnItems0 :: PivotCell a0
                -> IO (PivotItemList ())
getColumnItems0 =
  propertyGet "ColumnItems"
              []
              outIUnknown

getRange18 :: PivotCell a0
           -> IO (Range ())
getRange18 =
  propertyGet "Range"
              []
              outIDispatch

getDummy180 :: PivotCell a0
            -> IO String
getDummy180 =
  propertyGet "Dummy18"
              []
              outString

getCustomSubtotalFunction0 :: PivotCell a0
                           -> IO XlConsolidationFunction
getCustomSubtotalFunction0 =
  propertyGet "CustomSubtotalFunction"
              []
              outEnum

getPivotRowLine0 :: PivotCell a0
                 -> IO (PivotLine ())
getPivotRowLine0 =
  propertyGet "PivotRowLine"
              []
              outIUnknown

getPivotColumnLine0 :: PivotCell a0
                    -> IO (PivotLine ())
getPivotColumnLine0 =
  propertyGet "PivotColumnLine"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Graphic
-- 
-- --------------------------------------------------
data Graphic_ a = Graphic__ 
type Graphic a = IDispatch (Graphic_ a)
iidGraphic :: IID (Graphic ())
iidGraphic = mkIID "{00024459-0000-0000-C000-000000000046}"

queryInterface188 :: (Variant a1)
                  => GUID
                  -> Graphic a0
                  -> IO a1
queryInterface188 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef188 :: Graphic a0
          -> IO Word32
addRef188 =
  function1 "AddRef"
            []
            outWord32

release188 :: Graphic a0
           -> IO Word32
release188 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount188 :: Graphic a0
                    -> IO Word32
getTypeInfoCount188 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo188 :: (Variant a1)
               => Word32
               -> Word32
               -> Graphic a0
               -> IO a1
getTypeInfo188 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames188 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Graphic a0
                 -> IO Int32
getIDsOfNames188 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke188 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Graphic a0
          -> IO (a1, a2, Word32)
invoke188 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication454 :: (Variant a1)
                  => Graphic a0
                  -> IO a1
getApplication454 =
  propertyGet "Application"
              []
              outVariant

getCreator454 :: Graphic a0
              -> IO XlCreator
getCreator454 =
  propertyGet "Creator"
              []
              outEnum

getParent469 :: Graphic a0
             -> IO (IDispatch ())
getParent469 =
  propertyGet "Parent"
              []
              outIDispatch

getBrightness1 :: Graphic a0
               -> IO Float
getBrightness1 =
  propertyGet "Brightness"
              []
              outFloat

setBrightness1 :: Float
               -> Graphic a0
               -> IO ()
setBrightness1 rhs =
  propertySet "Brightness"
              [inFloat rhs]

getColorType1 :: (Variant a1)
              => Graphic a0
              -> IO a1
getColorType1 =
  propertyGet "ColorType"
              []
              outVariant

setColorType1 :: (Variant a1)
              => a1
              -> Graphic a0
              -> IO ()
setColorType1 rhs =
  propertySet "ColorType"
              [inVariant rhs]

getContrast1 :: Graphic a0
             -> IO Float
getContrast1 =
  propertyGet "Contrast"
              []
              outFloat

setContrast1 :: Float
             -> Graphic a0
             -> IO ()
setContrast1 rhs =
  propertySet "Contrast"
              [inFloat rhs]

getCropBottom1 :: Graphic a0
               -> IO Float
getCropBottom1 =
  propertyGet "CropBottom"
              []
              outFloat

setCropBottom1 :: Float
               -> Graphic a0
               -> IO ()
setCropBottom1 rhs =
  propertySet "CropBottom"
              [inFloat rhs]

getCropLeft1 :: Graphic a0
             -> IO Float
getCropLeft1 =
  propertyGet "CropLeft"
              []
              outFloat

setCropLeft1 :: Float
             -> Graphic a0
             -> IO ()
setCropLeft1 rhs =
  propertySet "CropLeft"
              [inFloat rhs]

getCropRight1 :: Graphic a0
              -> IO Float
getCropRight1 =
  propertyGet "CropRight"
              []
              outFloat

setCropRight1 :: Float
              -> Graphic a0
              -> IO ()
setCropRight1 rhs =
  propertySet "CropRight"
              [inFloat rhs]

getCropTop1 :: Graphic a0
            -> IO Float
getCropTop1 =
  propertyGet "CropTop"
              []
              outFloat

setCropTop1 :: Float
            -> Graphic a0
            -> IO ()
setCropTop1 rhs =
  propertySet "CropTop"
              [inFloat rhs]

getFilename1 :: Graphic a0
             -> IO String
getFilename1 =
  propertyGet "Filename"
              []
              outString

setFilename1 :: String
             -> Graphic a0
             -> IO ()
setFilename1 rhs =
  propertySet "Filename"
              [inString rhs]

getHeight107 :: Graphic a0
             -> IO Float
getHeight107 =
  propertyGet "Height"
              []
              outFloat

setHeight99 :: Float
            -> Graphic a0
            -> IO ()
setHeight99 rhs =
  propertySet "Height"
              [inFloat rhs]

getLockAspectRatio4 :: (Variant a1)
                    => Graphic a0
                    -> IO a1
getLockAspectRatio4 =
  propertyGet "LockAspectRatio"
              []
              outVariant

setLockAspectRatio4 :: (Variant a1)
                    => a1
                    -> Graphic a0
                    -> IO ()
setLockAspectRatio4 rhs =
  propertySet "LockAspectRatio"
              [inVariant rhs]

getWidth109 :: Graphic a0
            -> IO Float
getWidth109 =
  propertyGet "Width"
              []
              outFloat

setWidth101 :: Float
            -> Graphic a0
            -> IO ()
setWidth101 rhs =
  propertySet "Width"
              [inFloat rhs]

-- --------------------------------------------------
-- 
-- dispinterface AutoRecover
-- 
-- --------------------------------------------------
data AutoRecover_ a = AutoRecover__ 
type AutoRecover a = IDispatch (AutoRecover_ a)
iidAutoRecover :: IID (AutoRecover ())
iidAutoRecover = mkIID "{0002445A-0000-0000-C000-000000000046}"

queryInterface189 :: (Variant a1)
                  => GUID
                  -> AutoRecover a0
                  -> IO a1
queryInterface189 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef189 :: AutoRecover a0
          -> IO Word32
addRef189 =
  function1 "AddRef"
            []
            outWord32

release189 :: AutoRecover a0
           -> IO Word32
release189 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount189 :: AutoRecover a0
                    -> IO Word32
getTypeInfoCount189 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo189 :: (Variant a1)
               => Word32
               -> Word32
               -> AutoRecover a0
               -> IO a1
getTypeInfo189 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames189 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AutoRecover a0
                 -> IO Int32
getIDsOfNames189 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke189 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AutoRecover a0
          -> IO (a1, a2, Word32)
invoke189 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication455 :: (Variant a1)
                  => AutoRecover a0
                  -> IO a1
getApplication455 =
  propertyGet "Application"
              []
              outVariant

getCreator455 :: AutoRecover a0
              -> IO XlCreator
getCreator455 =
  propertyGet "Creator"
              []
              outEnum

getParent470 :: AutoRecover a0
             -> IO (IDispatch ())
getParent470 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled92 :: AutoRecover a0
             -> IO Bool
getEnabled92 =
  propertyGet "Enabled"
              []
              outBool

setEnabled92 :: Bool
             -> AutoRecover a0
             -> IO ()
setEnabled92 rhs =
  propertySet "Enabled"
              [inBool rhs]

getTime0 :: AutoRecover a0
         -> IO Int32
getTime0 =
  propertyGet "Time"
              []
              outInt32

setTime0 :: Int32
         -> AutoRecover a0
         -> IO ()
setTime0 rhs =
  propertySet "Time"
              [inInt32 rhs]

getPath6 :: AutoRecover a0
         -> IO String
getPath6 =
  propertyGet "Path"
              []
              outString

setPath0 :: String
         -> AutoRecover a0
         -> IO ()
setPath0 rhs =
  propertySet "Path"
              [inString rhs]

-- --------------------------------------------------
-- 
-- dispinterface ErrorCheckingOptions
-- 
-- --------------------------------------------------
data ErrorCheckingOptions_ a = ErrorCheckingOptions__ 
type ErrorCheckingOptions a = IDispatch (ErrorCheckingOptions_ a)
iidErrorCheckingOptions :: IID (ErrorCheckingOptions ())
iidErrorCheckingOptions =
  mkIID "{0002445B-0000-0000-C000-000000000046}"

queryInterface190 :: (Variant a1)
                  => GUID
                  -> ErrorCheckingOptions a0
                  -> IO a1
queryInterface190 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef190 :: ErrorCheckingOptions a0
          -> IO Word32
addRef190 =
  function1 "AddRef"
            []
            outWord32

release190 :: ErrorCheckingOptions a0
           -> IO Word32
release190 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount190 :: ErrorCheckingOptions a0
                    -> IO Word32
getTypeInfoCount190 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo190 :: (Variant a1)
               => Word32
               -> Word32
               -> ErrorCheckingOptions a0
               -> IO a1
getTypeInfo190 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames190 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ErrorCheckingOptions a0
                 -> IO Int32
getIDsOfNames190 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke190 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ErrorCheckingOptions a0
          -> IO (a1, a2, Word32)
invoke190 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication456 :: (Variant a1)
                  => ErrorCheckingOptions a0
                  -> IO a1
getApplication456 =
  propertyGet "Application"
              []
              outVariant

getCreator456 :: ErrorCheckingOptions a0
              -> IO XlCreator
getCreator456 =
  propertyGet "Creator"
              []
              outEnum

getParent471 :: ErrorCheckingOptions a0
             -> IO (IDispatch ())
getParent471 =
  propertyGet "Parent"
              []
              outIDispatch

getBackgroundChecking0 :: ErrorCheckingOptions a0
                       -> IO Bool
getBackgroundChecking0 =
  propertyGet "BackgroundChecking"
              []
              outBool

setBackgroundChecking0 :: Bool
                       -> ErrorCheckingOptions a0
                       -> IO ()
setBackgroundChecking0 rhs =
  propertySet "BackgroundChecking"
              [inBool rhs]

getIndicatorColorIndex0 :: ErrorCheckingOptions a0
                        -> IO XlColorIndex
getIndicatorColorIndex0 =
  propertyGet "IndicatorColorIndex"
              []
              outEnum

setIndicatorColorIndex0 :: XlColorIndex
                        -> ErrorCheckingOptions a0
                        -> IO ()
setIndicatorColorIndex0 rhs =
  propertySet "IndicatorColorIndex"
              [inEnum rhs]

getEvaluateToError0 :: ErrorCheckingOptions a0
                    -> IO Bool
getEvaluateToError0 =
  propertyGet "EvaluateToError"
              []
              outBool

setEvaluateToError0 :: Bool
                    -> ErrorCheckingOptions a0
                    -> IO ()
setEvaluateToError0 rhs =
  propertySet "EvaluateToError"
              [inBool rhs]

getTextDate0 :: ErrorCheckingOptions a0
             -> IO Bool
getTextDate0 =
  propertyGet "TextDate"
              []
              outBool

setTextDate0 :: Bool
             -> ErrorCheckingOptions a0
             -> IO ()
setTextDate0 rhs =
  propertySet "TextDate"
              [inBool rhs]

getNumberAsText0 :: ErrorCheckingOptions a0
                 -> IO Bool
getNumberAsText0 =
  propertyGet "NumberAsText"
              []
              outBool

setNumberAsText0 :: Bool
                 -> ErrorCheckingOptions a0
                 -> IO ()
setNumberAsText0 rhs =
  propertySet "NumberAsText"
              [inBool rhs]

getInconsistentFormula0 :: ErrorCheckingOptions a0
                        -> IO Bool
getInconsistentFormula0 =
  propertyGet "InconsistentFormula"
              []
              outBool

setInconsistentFormula0 :: Bool
                        -> ErrorCheckingOptions a0
                        -> IO ()
setInconsistentFormula0 rhs =
  propertySet "InconsistentFormula"
              [inBool rhs]

getOmittedCells0 :: ErrorCheckingOptions a0
                 -> IO Bool
getOmittedCells0 =
  propertyGet "OmittedCells"
              []
              outBool

setOmittedCells0 :: Bool
                 -> ErrorCheckingOptions a0
                 -> IO ()
setOmittedCells0 rhs =
  propertySet "OmittedCells"
              [inBool rhs]

getUnlockedFormulaCells0 :: ErrorCheckingOptions a0
                         -> IO Bool
getUnlockedFormulaCells0 =
  propertyGet "UnlockedFormulaCells"
              []
              outBool

setUnlockedFormulaCells0 :: Bool
                         -> ErrorCheckingOptions a0
                         -> IO ()
setUnlockedFormulaCells0 rhs =
  propertySet "UnlockedFormulaCells"
              [inBool rhs]

getEmptyCellReferences0 :: ErrorCheckingOptions a0
                        -> IO Bool
getEmptyCellReferences0 =
  propertyGet "EmptyCellReferences"
              []
              outBool

setEmptyCellReferences0 :: Bool
                        -> ErrorCheckingOptions a0
                        -> IO ()
setEmptyCellReferences0 rhs =
  propertySet "EmptyCellReferences"
              [inBool rhs]

getListDataValidation0 :: ErrorCheckingOptions a0
                       -> IO Bool
getListDataValidation0 =
  propertyGet "ListDataValidation"
              []
              outBool

setListDataValidation0 :: Bool
                       -> ErrorCheckingOptions a0
                       -> IO ()
setListDataValidation0 rhs =
  propertySet "ListDataValidation"
              [inBool rhs]

getInconsistentTableFormula0 :: ErrorCheckingOptions a0
                             -> IO Bool
getInconsistentTableFormula0 =
  propertyGet "InconsistentTableFormula"
              []
              outBool

setInconsistentTableFormula0 :: Bool
                             -> ErrorCheckingOptions a0
                             -> IO ()
setInconsistentTableFormula0 rhs =
  propertySet "InconsistentTableFormula"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Errors
-- 
-- --------------------------------------------------
data Errors_ a = Errors__ 
type Errors a = IDispatch (Errors_ a)
iidErrors :: IID (Errors ())
iidErrors = mkIID "{0002445C-0000-0000-C000-000000000046}"

queryInterface191 :: (Variant a1)
                  => GUID
                  -> Errors a0
                  -> IO a1
queryInterface191 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef191 :: Errors a0
          -> IO Word32
addRef191 =
  function1 "AddRef"
            []
            outWord32

release191 :: Errors a0
           -> IO Word32
release191 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount191 :: Errors a0
                    -> IO Word32
getTypeInfoCount191 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo191 :: (Variant a1)
               => Word32
               -> Word32
               -> Errors a0
               -> IO a1
getTypeInfo191 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames191 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Errors a0
                 -> IO Int32
getIDsOfNames191 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke191 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Errors a0
          -> IO (a1, a2, Word32)
invoke191 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication457 :: (Variant a1)
                  => Errors a0
                  -> IO a1
getApplication457 =
  propertyGet "Application"
              []
              outVariant

getCreator457 :: Errors a0
              -> IO XlCreator
getCreator457 =
  propertyGet "Creator"
              []
              outEnum

getParent472 :: Errors a0
             -> IO (IDispatch ())
getParent472 =
  propertyGet "Parent"
              []
              outIDispatch

getItem83 :: a1
          -> Errors a0
          -> IO (Error ())
getItem83 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getDefault174 :: a1
              -> Errors a0
              -> IO (Error ())
getDefault174 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Error
-- 
-- --------------------------------------------------
data Error_ a = Error__ 
type Error a = IDispatch (Error_ a)
iidError :: IID (Error ())
iidError = mkIID "{0002445D-0000-0000-C000-000000000046}"

queryInterface192 :: (Variant a1)
                  => GUID
                  -> Error a0
                  -> IO a1
queryInterface192 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef192 :: Error a0
          -> IO Word32
addRef192 =
  function1 "AddRef"
            []
            outWord32

release192 :: Error a0
           -> IO Word32
release192 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount192 :: Error a0
                    -> IO Word32
getTypeInfoCount192 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo192 :: (Variant a1)
               => Word32
               -> Word32
               -> Error a0
               -> IO a1
getTypeInfo192 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames192 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Error a0
                 -> IO Int32
getIDsOfNames192 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke192 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Error a0
          -> IO (a1, a2, Word32)
invoke192 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication458 :: (Variant a1)
                  => Error a0
                  -> IO a1
getApplication458 =
  propertyGet "Application"
              []
              outVariant

getCreator458 :: Error a0
              -> IO XlCreator
getCreator458 =
  propertyGet "Creator"
              []
              outEnum

getParent473 :: Error a0
             -> IO (IDispatch ())
getParent473 =
  propertyGet "Parent"
              []
              outIDispatch

getValue58 :: Error a0
           -> IO Bool
getValue58 =
  propertyGet "Value"
              []
              outBool

getIgnore0 :: Error a0
           -> IO Bool
getIgnore0 =
  propertyGet "Ignore"
              []
              outBool

setIgnore0 :: Bool
           -> Error a0
           -> IO ()
setIgnore0 rhs =
  propertySet "Ignore"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface SmartTagAction
-- 
-- --------------------------------------------------
data SmartTagAction_ a = SmartTagAction__ 
type SmartTagAction a = IDispatch (SmartTagAction_ a)
iidSmartTagAction :: IID (SmartTagAction ())
iidSmartTagAction = mkIID "{0002445E-0000-0000-C000-000000000046}"

queryInterface193 :: (Variant a1)
                  => GUID
                  -> SmartTagAction a0
                  -> IO a1
queryInterface193 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef193 :: SmartTagAction a0
          -> IO Word32
addRef193 =
  function1 "AddRef"
            []
            outWord32

release193 :: SmartTagAction a0
           -> IO Word32
release193 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount193 :: SmartTagAction a0
                    -> IO Word32
getTypeInfoCount193 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo193 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTagAction a0
               -> IO a1
getTypeInfo193 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames193 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTagAction a0
                 -> IO Int32
getIDsOfNames193 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke193 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTagAction a0
          -> IO (a1, a2, Word32)
invoke193 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication459 :: (Variant a1)
                  => SmartTagAction a0
                  -> IO a1
getApplication459 =
  propertyGet "Application"
              []
              outVariant

getCreator459 :: SmartTagAction a0
              -> IO XlCreator
getCreator459 =
  propertyGet "Creator"
              []
              outEnum

getParent474 :: SmartTagAction a0
             -> IO (IDispatch ())
getParent474 =
  propertyGet "Parent"
              []
              outIDispatch

getName143 :: SmartTagAction a0
           -> IO String
getName143 =
  propertyGet "Name"
              []
              outString

execute1 :: SmartTagAction a0
         -> IO ()
execute1 =
  method0 "Execute"
          []

getDefault175 :: SmartTagAction a0
              -> IO String
getDefault175 =
  propertyGet "_Default"
              []
              outString

getType57 :: SmartTagAction a0
          -> IO XlSmartTagControlType
getType57 =
  propertyGet "Type"
              []
              outEnum

getPresentInPane0 :: SmartTagAction a0
                  -> IO Bool
getPresentInPane0 =
  propertyGet "PresentInPane"
              []
              outBool

getExpandHelp0 :: SmartTagAction a0
               -> IO Bool
getExpandHelp0 =
  propertyGet "ExpandHelp"
              []
              outBool

setExpandHelp0 :: Bool
               -> SmartTagAction a0
               -> IO ()
setExpandHelp0 rhs =
  propertySet "ExpandHelp"
              [inBool rhs]

getCheckboxState0 :: SmartTagAction a0
                  -> IO Bool
getCheckboxState0 =
  propertyGet "CheckboxState"
              []
              outBool

setCheckboxState0 :: Bool
                  -> SmartTagAction a0
                  -> IO ()
setCheckboxState0 rhs =
  propertySet "CheckboxState"
              [inBool rhs]

getTextboxText0 :: SmartTagAction a0
                -> IO String
getTextboxText0 =
  propertyGet "TextboxText"
              []
              outString

setTextboxText0 :: String
                -> SmartTagAction a0
                -> IO ()
setTextboxText0 rhs =
  propertySet "TextboxText"
              [inString rhs]

getListSelection0 :: SmartTagAction a0
                  -> IO Int32
getListSelection0 =
  propertyGet "ListSelection"
              []
              outInt32

setListSelection0 :: Int32
                  -> SmartTagAction a0
                  -> IO ()
setListSelection0 rhs =
  propertySet "ListSelection"
              [inInt32 rhs]

getRadioGroupSelection0 :: SmartTagAction a0
                        -> IO Int32
getRadioGroupSelection0 =
  propertyGet "RadioGroupSelection"
              []
              outInt32

setRadioGroupSelection0 :: Int32
                        -> SmartTagAction a0
                        -> IO ()
setRadioGroupSelection0 rhs =
  propertySet "RadioGroupSelection"
              [inInt32 rhs]

getActiveXControl0 :: SmartTagAction a0
                   -> IO (IDispatch ())
getActiveXControl0 =
  propertyGet "ActiveXControl"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface SmartTagActions
-- 
-- --------------------------------------------------
data SmartTagActions_ a = SmartTagActions__ 
type SmartTagActions a = IDispatch (SmartTagActions_ a)
iidSmartTagActions :: IID (SmartTagActions ())
iidSmartTagActions = mkIID "{0002445F-0000-0000-C000-000000000046}"

queryInterface194 :: (Variant a1)
                  => GUID
                  -> SmartTagActions a0
                  -> IO a1
queryInterface194 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef194 :: SmartTagActions a0
          -> IO Word32
addRef194 =
  function1 "AddRef"
            []
            outWord32

release194 :: SmartTagActions a0
           -> IO Word32
release194 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount194 :: SmartTagActions a0
                    -> IO Word32
getTypeInfoCount194 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo194 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTagActions a0
               -> IO a1
getTypeInfo194 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames194 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTagActions a0
                 -> IO Int32
getIDsOfNames194 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke194 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTagActions a0
          -> IO (a1, a2, Word32)
invoke194 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication460 :: (Variant a1)
                  => SmartTagActions a0
                  -> IO a1
getApplication460 =
  propertyGet "Application"
              []
              outVariant

getCreator460 :: SmartTagActions a0
              -> IO XlCreator
getCreator460 =
  propertyGet "Creator"
              []
              outEnum

getParent475 :: SmartTagActions a0
             -> IO (IDispatch ())
getParent475 =
  propertyGet "Parent"
              []
              outIDispatch

getCount190 :: SmartTagActions a0
            -> IO Int32
getCount190 =
  propertyGet "Count"
              []
              outInt32

getDefault176 :: a1
              -> SmartTagActions a0
              -> IO (SmartTagAction ())
getDefault176 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem84 :: a1
          -> SmartTagActions a0
          -> IO (SmartTagAction ())
getItem84 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getNewEnum101 :: SmartTagActions a0
              -> IO (IUnknown ())
getNewEnum101 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface SmartTag
-- 
-- --------------------------------------------------
data SmartTag_ a = SmartTag__ 
type SmartTag a = IDispatch (SmartTag_ a)
iidSmartTag :: IID (SmartTag ())
iidSmartTag = mkIID "{00024460-0000-0000-C000-000000000046}"

queryInterface195 :: (Variant a1)
                  => GUID
                  -> SmartTag a0
                  -> IO a1
queryInterface195 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef195 :: SmartTag a0
          -> IO Word32
addRef195 =
  function1 "AddRef"
            []
            outWord32

release195 :: SmartTag a0
           -> IO Word32
release195 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount195 :: SmartTag a0
                    -> IO Word32
getTypeInfoCount195 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo195 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTag a0
               -> IO a1
getTypeInfo195 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames195 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTag a0
                 -> IO Int32
getIDsOfNames195 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke195 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTag a0
          -> IO (a1, a2, Word32)
invoke195 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication461 :: (Variant a1)
                  => SmartTag a0
                  -> IO a1
getApplication461 =
  propertyGet "Application"
              []
              outVariant

getCreator461 :: SmartTag a0
              -> IO XlCreator
getCreator461 =
  propertyGet "Creator"
              []
              outEnum

getParent476 :: SmartTag a0
             -> IO (IDispatch ())
getParent476 =
  propertyGet "Parent"
              []
              outIDispatch

getDownloadURL0 :: SmartTag a0
                -> IO String
getDownloadURL0 =
  propertyGet "DownloadURL"
              []
              outString

getName144 :: SmartTag a0
           -> IO String
getName144 =
  propertyGet "Name"
              []
              outString

getDefault177 :: SmartTag a0
              -> IO String
getDefault177 =
  propertyGet "_Default"
              []
              outString

getXML1 :: SmartTag a0
        -> IO String
getXML1 =
  propertyGet "XML"
              []
              outString

getRange19 :: SmartTag a0
           -> IO (Range ())
getRange19 =
  propertyGet "Range"
              []
              outIDispatch

delete231 :: SmartTag a0
          -> IO ()
delete231 =
  method0 "Delete"
          []

getSmartTagActions0 :: SmartTag a0
                    -> IO (SmartTagActions ())
getSmartTagActions0 =
  propertyGet "SmartTagActions"
              []
              outIDispatch

getProperties0 :: SmartTag a0
               -> IO (CustomProperties ())
getProperties0 =
  propertyGet "Properties"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface SmartTags
-- 
-- --------------------------------------------------
data SmartTags_ a = SmartTags__ 
type SmartTags a = IDispatch (SmartTags_ a)
iidSmartTags :: IID (SmartTags ())
iidSmartTags = mkIID "{00024461-0000-0000-C000-000000000046}"

queryInterface196 :: (Variant a1)
                  => GUID
                  -> SmartTags a0
                  -> IO a1
queryInterface196 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef196 :: SmartTags a0
          -> IO Word32
addRef196 =
  function1 "AddRef"
            []
            outWord32

release196 :: SmartTags a0
           -> IO Word32
release196 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount196 :: SmartTags a0
                    -> IO Word32
getTypeInfoCount196 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo196 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTags a0
               -> IO a1
getTypeInfo196 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames196 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTags a0
                 -> IO Int32
getIDsOfNames196 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke196 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTags a0
          -> IO (a1, a2, Word32)
invoke196 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication462 :: (Variant a1)
                  => SmartTags a0
                  -> IO a1
getApplication462 =
  propertyGet "Application"
              []
              outVariant

getCreator462 :: SmartTags a0
              -> IO XlCreator
getCreator462 =
  propertyGet "Creator"
              []
              outEnum

getParent477 :: SmartTags a0
             -> IO (IDispatch ())
getParent477 =
  propertyGet "Parent"
              []
              outIDispatch

add130 :: String
       -> SmartTags a0
       -> IO (SmartTag ())
add130 smartTagType =
  function1 "Add"
            [inString smartTagType]
            outIDispatch

getCount191 :: SmartTags a0
            -> IO Int32
getCount191 =
  propertyGet "Count"
              []
              outInt32

getDefault178 :: a1
              -> SmartTags a0
              -> IO (SmartTag ())
getDefault178 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum102 :: SmartTags a0
              -> IO (IUnknown ())
getNewEnum102 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface SmartTagRecognizer
-- 
-- --------------------------------------------------
data SmartTagRecognizer_ a = SmartTagRecognizer__ 
type SmartTagRecognizer a = IDispatch (SmartTagRecognizer_ a)
iidSmartTagRecognizer :: IID (SmartTagRecognizer ())
iidSmartTagRecognizer =
  mkIID "{00024462-0000-0000-C000-000000000046}"

queryInterface197 :: (Variant a1)
                  => GUID
                  -> SmartTagRecognizer a0
                  -> IO a1
queryInterface197 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef197 :: SmartTagRecognizer a0
          -> IO Word32
addRef197 =
  function1 "AddRef"
            []
            outWord32

release197 :: SmartTagRecognizer a0
           -> IO Word32
release197 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount197 :: SmartTagRecognizer a0
                    -> IO Word32
getTypeInfoCount197 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo197 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTagRecognizer a0
               -> IO a1
getTypeInfo197 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames197 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTagRecognizer a0
                 -> IO Int32
getIDsOfNames197 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke197 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTagRecognizer a0
          -> IO (a1, a2, Word32)
invoke197 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication463 :: (Variant a1)
                  => SmartTagRecognizer a0
                  -> IO a1
getApplication463 =
  propertyGet "Application"
              []
              outVariant

getCreator463 :: SmartTagRecognizer a0
              -> IO XlCreator
getCreator463 =
  propertyGet "Creator"
              []
              outEnum

getParent478 :: SmartTagRecognizer a0
             -> IO (IDispatch ())
getParent478 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled93 :: SmartTagRecognizer a0
             -> IO Bool
getEnabled93 =
  propertyGet "Enabled"
              []
              outBool

setEnabled93 :: Bool
             -> SmartTagRecognizer a0
             -> IO ()
setEnabled93 rhs =
  propertySet "Enabled"
              [inBool rhs]

getProgID6 :: SmartTagRecognizer a0
           -> IO String
getProgID6 =
  propertyGet "progID"
              []
              outString

getDefault179 :: SmartTagRecognizer a0
              -> IO String
getDefault179 =
  propertyGet "_Default"
              []
              outString

getFullName3 :: SmartTagRecognizer a0
             -> IO String
getFullName3 =
  propertyGet "FullName"
              []
              outString

-- --------------------------------------------------
-- 
-- dispinterface SmartTagRecognizers
-- 
-- --------------------------------------------------
data SmartTagRecognizers_ a = SmartTagRecognizers__ 
type SmartTagRecognizers a = IDispatch (SmartTagRecognizers_ a)
iidSmartTagRecognizers :: IID (SmartTagRecognizers ())
iidSmartTagRecognizers =
  mkIID "{00024463-0000-0000-C000-000000000046}"

queryInterface198 :: (Variant a1)
                  => GUID
                  -> SmartTagRecognizers a0
                  -> IO a1
queryInterface198 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef198 :: SmartTagRecognizers a0
          -> IO Word32
addRef198 =
  function1 "AddRef"
            []
            outWord32

release198 :: SmartTagRecognizers a0
           -> IO Word32
release198 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount198 :: SmartTagRecognizers a0
                    -> IO Word32
getTypeInfoCount198 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo198 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTagRecognizers a0
               -> IO a1
getTypeInfo198 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames198 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTagRecognizers a0
                 -> IO Int32
getIDsOfNames198 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke198 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTagRecognizers a0
          -> IO (a1, a2, Word32)
invoke198 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication464 :: (Variant a1)
                  => SmartTagRecognizers a0
                  -> IO a1
getApplication464 =
  propertyGet "Application"
              []
              outVariant

getCreator464 :: SmartTagRecognizers a0
              -> IO XlCreator
getCreator464 =
  propertyGet "Creator"
              []
              outEnum

getParent479 :: SmartTagRecognizers a0
             -> IO (IDispatch ())
getParent479 =
  propertyGet "Parent"
              []
              outIDispatch

getCount192 :: SmartTagRecognizers a0
            -> IO Int32
getCount192 =
  propertyGet "Count"
              []
              outInt32

getItem85 :: a1
          -> SmartTagRecognizers a0
          -> IO (SmartTagRecognizer ())
getItem85 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getDefault180 :: a1
              -> SmartTagRecognizers a0
              -> IO (SmartTagRecognizer ())
getDefault180 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum103 :: SmartTagRecognizers a0
              -> IO (IUnknown ())
getNewEnum103 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getRecognize0 :: SmartTagRecognizers a0
              -> IO Bool
getRecognize0 =
  propertyGet "Recognize"
              []
              outBool

setRecognize0 :: Bool
              -> SmartTagRecognizers a0
              -> IO ()
setRecognize0 rhs =
  propertySet "Recognize"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface SmartTagOptions
-- 
-- --------------------------------------------------
data SmartTagOptions_ a = SmartTagOptions__ 
type SmartTagOptions a = IDispatch (SmartTagOptions_ a)
iidSmartTagOptions :: IID (SmartTagOptions ())
iidSmartTagOptions = mkIID "{00024464-0000-0000-C000-000000000046}"

queryInterface199 :: (Variant a1)
                  => GUID
                  -> SmartTagOptions a0
                  -> IO a1
queryInterface199 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef199 :: SmartTagOptions a0
          -> IO Word32
addRef199 =
  function1 "AddRef"
            []
            outWord32

release199 :: SmartTagOptions a0
           -> IO Word32
release199 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount199 :: SmartTagOptions a0
                    -> IO Word32
getTypeInfoCount199 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo199 :: (Variant a1)
               => Word32
               -> Word32
               -> SmartTagOptions a0
               -> IO a1
getTypeInfo199 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames199 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SmartTagOptions a0
                 -> IO Int32
getIDsOfNames199 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke199 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SmartTagOptions a0
          -> IO (a1, a2, Word32)
invoke199 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication465 :: (Variant a1)
                  => SmartTagOptions a0
                  -> IO a1
getApplication465 =
  propertyGet "Application"
              []
              outVariant

getCreator465 :: SmartTagOptions a0
              -> IO XlCreator
getCreator465 =
  propertyGet "Creator"
              []
              outEnum

getParent480 :: SmartTagOptions a0
             -> IO (IDispatch ())
getParent480 =
  propertyGet "Parent"
              []
              outIDispatch

getDisplaySmartTags0 :: SmartTagOptions a0
                     -> IO XlSmartTagDisplayMode
getDisplaySmartTags0 =
  propertyGet "DisplaySmartTags"
              []
              outEnum

setDisplaySmartTags0 :: XlSmartTagDisplayMode
                     -> SmartTagOptions a0
                     -> IO ()
setDisplaySmartTags0 rhs =
  propertySet "DisplaySmartTags"
              [inEnum rhs]

getEmbedSmartTags0 :: SmartTagOptions a0
                   -> IO Bool
getEmbedSmartTags0 =
  propertyGet "EmbedSmartTags"
              []
              outBool

setEmbedSmartTags0 :: Bool
                   -> SmartTagOptions a0
                   -> IO ()
setEmbedSmartTags0 rhs =
  propertySet "EmbedSmartTags"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface SpellingOptions
-- 
-- --------------------------------------------------
data SpellingOptions_ a = SpellingOptions__ 
type SpellingOptions a = IDispatch (SpellingOptions_ a)
iidSpellingOptions :: IID (SpellingOptions ())
iidSpellingOptions = mkIID "{00024465-0000-0000-C000-000000000046}"

queryInterface200 :: (Variant a1)
                  => GUID
                  -> SpellingOptions a0
                  -> IO a1
queryInterface200 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef200 :: SpellingOptions a0
          -> IO Word32
addRef200 =
  function1 "AddRef"
            []
            outWord32

release200 :: SpellingOptions a0
           -> IO Word32
release200 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount200 :: SpellingOptions a0
                    -> IO Word32
getTypeInfoCount200 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo200 :: (Variant a1)
               => Word32
               -> Word32
               -> SpellingOptions a0
               -> IO a1
getTypeInfo200 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames200 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SpellingOptions a0
                 -> IO Int32
getIDsOfNames200 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke200 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SpellingOptions a0
          -> IO (a1, a2, Word32)
invoke200 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getDictLang0 :: SpellingOptions a0
             -> IO Int32
getDictLang0 =
  propertyGet "DictLang"
              []
              outInt32

setDictLang0 :: Int32
             -> SpellingOptions a0
             -> IO ()
setDictLang0 rhs =
  propertySet "DictLang"
              [inInt32 rhs]

getUserDict0 :: SpellingOptions a0
             -> IO String
getUserDict0 =
  propertyGet "UserDict"
              []
              outString

setUserDict0 :: String
             -> SpellingOptions a0
             -> IO ()
setUserDict0 rhs =
  propertySet "UserDict"
              [inString rhs]

getIgnoreCaps0 :: SpellingOptions a0
               -> IO Bool
getIgnoreCaps0 =
  propertyGet "IgnoreCaps"
              []
              outBool

setIgnoreCaps0 :: Bool
               -> SpellingOptions a0
               -> IO ()
setIgnoreCaps0 rhs =
  propertySet "IgnoreCaps"
              [inBool rhs]

getSuggestMainOnly0 :: SpellingOptions a0
                    -> IO Bool
getSuggestMainOnly0 =
  propertyGet "SuggestMainOnly"
              []
              outBool

setSuggestMainOnly0 :: Bool
                    -> SpellingOptions a0
                    -> IO ()
setSuggestMainOnly0 rhs =
  propertySet "SuggestMainOnly"
              [inBool rhs]

getIgnoreMixedDigits0 :: SpellingOptions a0
                      -> IO Bool
getIgnoreMixedDigits0 =
  propertyGet "IgnoreMixedDigits"
              []
              outBool

setIgnoreMixedDigits0 :: Bool
                      -> SpellingOptions a0
                      -> IO ()
setIgnoreMixedDigits0 rhs =
  propertySet "IgnoreMixedDigits"
              [inBool rhs]

getIgnoreFileNames0 :: SpellingOptions a0
                    -> IO Bool
getIgnoreFileNames0 =
  propertyGet "IgnoreFileNames"
              []
              outBool

setIgnoreFileNames0 :: Bool
                    -> SpellingOptions a0
                    -> IO ()
setIgnoreFileNames0 rhs =
  propertySet "IgnoreFileNames"
              [inBool rhs]

getGermanPostReform0 :: SpellingOptions a0
                     -> IO Bool
getGermanPostReform0 =
  propertyGet "GermanPostReform"
              []
              outBool

setGermanPostReform0 :: Bool
                     -> SpellingOptions a0
                     -> IO ()
setGermanPostReform0 rhs =
  propertySet "GermanPostReform"
              [inBool rhs]

getKoreanCombineAux0 :: SpellingOptions a0
                     -> IO Bool
getKoreanCombineAux0 =
  propertyGet "KoreanCombineAux"
              []
              outBool

setKoreanCombineAux0 :: Bool
                     -> SpellingOptions a0
                     -> IO ()
setKoreanCombineAux0 rhs =
  propertySet "KoreanCombineAux"
              [inBool rhs]

getKoreanUseAutoChangeList0 :: SpellingOptions a0
                            -> IO Bool
getKoreanUseAutoChangeList0 =
  propertyGet "KoreanUseAutoChangeList"
              []
              outBool

setKoreanUseAutoChangeList0 :: Bool
                            -> SpellingOptions a0
                            -> IO ()
setKoreanUseAutoChangeList0 rhs =
  propertySet "KoreanUseAutoChangeList"
              [inBool rhs]

getKoreanProcessCompound0 :: SpellingOptions a0
                          -> IO Bool
getKoreanProcessCompound0 =
  propertyGet "KoreanProcessCompound"
              []
              outBool

setKoreanProcessCompound0 :: Bool
                          -> SpellingOptions a0
                          -> IO ()
setKoreanProcessCompound0 rhs =
  propertySet "KoreanProcessCompound"
              [inBool rhs]

getHebrewModes0 :: SpellingOptions a0
                -> IO XlHebrewModes
getHebrewModes0 =
  propertyGet "HebrewModes"
              []
              outEnum

setHebrewModes0 :: XlHebrewModes
                -> SpellingOptions a0
                -> IO ()
setHebrewModes0 rhs =
  propertySet "HebrewModes"
              [inEnum rhs]

getArabicModes0 :: SpellingOptions a0
                -> IO XlArabicModes
getArabicModes0 =
  propertyGet "ArabicModes"
              []
              outEnum

setArabicModes0 :: XlArabicModes
                -> SpellingOptions a0
                -> IO ()
setArabicModes0 rhs =
  propertySet "ArabicModes"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface Speech
-- 
-- --------------------------------------------------
data Speech_ a = Speech__ 
type Speech a = IDispatch (Speech_ a)
iidSpeech :: IID (Speech ())
iidSpeech = mkIID "{00024466-0000-0000-C000-000000000046}"

queryInterface201 :: (Variant a1)
                  => GUID
                  -> Speech a0
                  -> IO a1
queryInterface201 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef201 :: Speech a0
          -> IO Word32
addRef201 =
  function1 "AddRef"
            []
            outWord32

release201 :: Speech a0
           -> IO Word32
release201 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount201 :: Speech a0
                    -> IO Word32
getTypeInfoCount201 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo201 :: (Variant a1)
               => Word32
               -> Word32
               -> Speech a0
               -> IO a1
getTypeInfo201 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames201 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Speech a0
                 -> IO Int32
getIDsOfNames201 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke201 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Speech a0
          -> IO (a1, a2, Word32)
invoke201 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

speak2 :: (Variant a1, Variant a2, Variant a3)
       => String
       -> a1
       -> a2
       -> a3
       -> Speech a0
       -> IO ()
speak2 text3 speakAsync speakXML purge =
  method0 "Speak"
          [ inString text3
          , inVariant speakAsync
          , inVariant speakXML
          , inVariant purge
          ]

getDirection0 :: Speech a0
              -> IO XlSpeakDirection
getDirection0 =
  propertyGet "Direction"
              []
              outEnum

setDirection0 :: XlSpeakDirection
              -> Speech a0
              -> IO ()
setDirection0 rhs =
  propertySet "Direction"
              [inEnum rhs]

getSpeakCellOnEnter0 :: Speech a0
                     -> IO Bool
getSpeakCellOnEnter0 =
  propertyGet "SpeakCellOnEnter"
              []
              outBool

setSpeakCellOnEnter0 :: Bool
                     -> Speech a0
                     -> IO ()
setSpeakCellOnEnter0 rhs =
  propertySet "SpeakCellOnEnter"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Protection
-- 
-- --------------------------------------------------
data Protection_ a = Protection__ 
type Protection a = IDispatch (Protection_ a)
iidProtection :: IID (Protection ())
iidProtection = mkIID "{00024467-0000-0000-C000-000000000046}"

queryInterface202 :: (Variant a1)
                  => GUID
                  -> Protection a0
                  -> IO a1
queryInterface202 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef202 :: Protection a0
          -> IO Word32
addRef202 =
  function1 "AddRef"
            []
            outWord32

release202 :: Protection a0
           -> IO Word32
release202 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount202 :: Protection a0
                    -> IO Word32
getTypeInfoCount202 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo202 :: (Variant a1)
               => Word32
               -> Word32
               -> Protection a0
               -> IO a1
getTypeInfo202 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames202 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Protection a0
                 -> IO Int32
getIDsOfNames202 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke202 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Protection a0
          -> IO (a1, a2, Word32)
invoke202 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getAllowFormattingCells0 :: Protection a0
                         -> IO Bool
getAllowFormattingCells0 =
  propertyGet "AllowFormattingCells"
              []
              outBool

getAllowFormattingColumns0 :: Protection a0
                           -> IO Bool
getAllowFormattingColumns0 =
  propertyGet "AllowFormattingColumns"
              []
              outBool

getAllowFormattingRows0 :: Protection a0
                        -> IO Bool
getAllowFormattingRows0 =
  propertyGet "AllowFormattingRows"
              []
              outBool

getAllowInsertingColumns0 :: Protection a0
                          -> IO Bool
getAllowInsertingColumns0 =
  propertyGet "AllowInsertingColumns"
              []
              outBool

getAllowInsertingRows0 :: Protection a0
                       -> IO Bool
getAllowInsertingRows0 =
  propertyGet "AllowInsertingRows"
              []
              outBool

getAllowInsertingHyperlinks0 :: Protection a0
                             -> IO Bool
getAllowInsertingHyperlinks0 =
  propertyGet "AllowInsertingHyperlinks"
              []
              outBool

getAllowDeletingColumns0 :: Protection a0
                         -> IO Bool
getAllowDeletingColumns0 =
  propertyGet "AllowDeletingColumns"
              []
              outBool

getAllowDeletingRows0 :: Protection a0
                      -> IO Bool
getAllowDeletingRows0 =
  propertyGet "AllowDeletingRows"
              []
              outBool

getAllowSorting0 :: Protection a0
                 -> IO Bool
getAllowSorting0 =
  propertyGet "AllowSorting"
              []
              outBool

getAllowFiltering0 :: Protection a0
                   -> IO Bool
getAllowFiltering0 =
  propertyGet "AllowFiltering"
              []
              outBool

getAllowUsingPivotTables0 :: Protection a0
                          -> IO Bool
getAllowUsingPivotTables0 =
  propertyGet "AllowUsingPivotTables"
              []
              outBool

getAllowEditRanges0 :: Protection a0
                    -> IO (AllowEditRanges ())
getAllowEditRanges0 =
  propertyGet "AllowEditRanges"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface PivotItemList
-- 
-- --------------------------------------------------
data PivotItemList_ a = PivotItemList__ 
type PivotItemList a = IDispatch (PivotItemList_ a)
iidPivotItemList :: IID (PivotItemList ())
iidPivotItemList = mkIID "{00024468-0000-0000-C000-000000000046}"

queryInterface203 :: (Variant a1)
                  => GUID
                  -> PivotItemList a0
                  -> IO a1
queryInterface203 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef203 :: PivotItemList a0
          -> IO Word32
addRef203 =
  function1 "AddRef"
            []
            outWord32

release203 :: PivotItemList a0
           -> IO Word32
release203 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount203 :: PivotItemList a0
                    -> IO Word32
getTypeInfoCount203 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo203 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotItemList a0
               -> IO a1
getTypeInfo203 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames203 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotItemList a0
                 -> IO Int32
getIDsOfNames203 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke203 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotItemList a0
          -> IO (a1, a2, Word32)
invoke203 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication466 :: (Variant a1)
                  => PivotItemList a0
                  -> IO a1
getApplication466 =
  propertyGet "Application"
              []
              outVariant

getCreator466 :: PivotItemList a0
              -> IO XlCreator
getCreator466 =
  propertyGet "Creator"
              []
              outEnum

getParent481 :: PivotItemList a0
             -> IO (IDispatch ())
getParent481 =
  propertyGet "Parent"
              []
              outIDispatch

getCount193 :: PivotItemList a0
            -> IO Int32
getCount193 =
  propertyGet "Count"
              []
              outInt32

item102 :: a1
        -> PivotItemList a0
        -> IO (PivotItem ())
item102 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault181 :: a1
              -> PivotItemList a0
              -> IO (PivotItem ())
getDefault181 field =
  propertyGet "_Default"
              [inVariant field]
              outIDispatch

newEnum81 :: PivotItemList a0
          -> IO (IUnknown ())
newEnum81 =
  function1 "_NewEnum"
            []
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Tab
-- 
-- --------------------------------------------------
data Tab_ a = Tab__ 
type Tab a = IDispatch (Tab_ a)
iidTab :: IID (Tab ())
iidTab = mkIID "{00024469-0000-0000-C000-000000000046}"

queryInterface204 :: (Variant a1)
                  => GUID
                  -> Tab a0
                  -> IO a1
queryInterface204 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef204 :: Tab a0
          -> IO Word32
addRef204 =
  function1 "AddRef"
            []
            outWord32

release204 :: Tab a0
           -> IO Word32
release204 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount204 :: Tab a0
                    -> IO Word32
getTypeInfoCount204 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo204 :: (Variant a1)
               => Word32
               -> Word32
               -> Tab a0
               -> IO a1
getTypeInfo204 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames204 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Tab a0
                 -> IO Int32
getIDsOfNames204 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke204 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Tab a0
          -> IO (a1, a2, Word32)
invoke204 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication467 :: (Variant a1)
                  => Tab a0
                  -> IO a1
getApplication467 =
  propertyGet "Application"
              []
              outVariant

getCreator467 :: Tab a0
              -> IO XlCreator
getCreator467 =
  propertyGet "Creator"
              []
              outEnum

getParent482 :: Tab a0
             -> IO (IDispatch ())
getParent482 =
  propertyGet "Parent"
              []
              outIDispatch

getColor10 :: Tab a0
           -> IO a1
getColor10 =
  propertyGet "Color"
              []
              outVariant

setColor10 :: a1
           -> Tab a0
           -> IO ()
setColor10 rhs =
  propertySet "Color"
              [inVariant rhs]

getColorIndex9 :: Tab a0
               -> IO XlColorIndex
getColorIndex9 =
  propertyGet "ColorIndex"
              []
              outEnum

setColorIndex9 :: XlColorIndex
               -> Tab a0
               -> IO ()
setColorIndex9 rhs =
  propertySet "ColorIndex"
              [inEnum rhs]

getThemeColor10 :: Tab a0
                -> IO XlThemeColor
getThemeColor10 =
  propertyGet "ThemeColor"
              []
              outEnum

setThemeColor10 :: XlThemeColor
                -> Tab a0
                -> IO ()
setThemeColor10 rhs =
  propertySet "ThemeColor"
              [inEnum rhs]

getTintAndShade11 :: Tab a0
                  -> IO a1
getTintAndShade11 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade11 :: a1
                  -> Tab a0
                  -> IO ()
setTintAndShade11 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface AllowEditRanges
-- 
-- --------------------------------------------------
data AllowEditRanges_ a = AllowEditRanges__ 
type AllowEditRanges a = IDispatch (AllowEditRanges_ a)
iidAllowEditRanges :: IID (AllowEditRanges ())
iidAllowEditRanges = mkIID "{0002446A-0000-0000-C000-000000000046}"

queryInterface205 :: (Variant a1)
                  => GUID
                  -> AllowEditRanges a0
                  -> IO a1
queryInterface205 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef205 :: AllowEditRanges a0
          -> IO Word32
addRef205 =
  function1 "AddRef"
            []
            outWord32

release205 :: AllowEditRanges a0
           -> IO Word32
release205 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount205 :: AllowEditRanges a0
                    -> IO Word32
getTypeInfoCount205 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo205 :: (Variant a1)
               => Word32
               -> Word32
               -> AllowEditRanges a0
               -> IO a1
getTypeInfo205 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames205 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AllowEditRanges a0
                 -> IO Int32
getIDsOfNames205 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke205 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AllowEditRanges a0
          -> IO (a1, a2, Word32)
invoke205 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getCount194 :: AllowEditRanges a0
            -> IO Int32
getCount194 =
  propertyGet "Count"
              []
              outInt32

getItem86 :: a1
          -> AllowEditRanges a0
          -> IO (AllowEditRange ())
getItem86 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

add131 :: (Variant a2)
       => String
       -> Range a1
       -> a2
       -> AllowEditRanges a0
       -> IO (AllowEditRange ())
add131 title range password =
  function1 "Add"
            [ inString title
            , inIDispatch range
            , inVariant password
            ]
            outIUnknown

getDefault182 :: a1
              -> AllowEditRanges a0
              -> IO (AllowEditRange ())
getDefault182 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum104 :: AllowEditRanges a0
              -> IO (IUnknown ())
getNewEnum104 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface AllowEditRange
-- 
-- --------------------------------------------------
data AllowEditRange_ a = AllowEditRange__ 
type AllowEditRange a = IDispatch (AllowEditRange_ a)
iidAllowEditRange :: IID (AllowEditRange ())
iidAllowEditRange = mkIID "{0002446B-0000-0000-C000-000000000046}"

queryInterface206 :: (Variant a1)
                  => GUID
                  -> AllowEditRange a0
                  -> IO a1
queryInterface206 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef206 :: AllowEditRange a0
          -> IO Word32
addRef206 =
  function1 "AddRef"
            []
            outWord32

release206 :: AllowEditRange a0
           -> IO Word32
release206 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount206 :: AllowEditRange a0
                    -> IO Word32
getTypeInfoCount206 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo206 :: (Variant a1)
               => Word32
               -> Word32
               -> AllowEditRange a0
               -> IO a1
getTypeInfo206 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames206 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AllowEditRange a0
                 -> IO Int32
getIDsOfNames206 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke206 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AllowEditRange a0
          -> IO (a1, a2, Word32)
invoke206 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getTitle4 :: AllowEditRange a0
          -> IO String
getTitle4 =
  propertyGet "Title"
              []
              outString

setTitle2 :: String
          -> AllowEditRange a0
          -> IO ()
setTitle2 rhs =
  propertySet "Title"
              [inString rhs]

getRange20 :: AllowEditRange a0
           -> IO (Range ())
getRange20 =
  propertyGet "Range"
              []
              outIDispatch

setRange1 :: Range a1
          -> AllowEditRange a0
          -> IO ()
setRange1 rhs =
  propertySet "Range"
              [inIDispatch rhs]

changePassword0 :: String
                -> AllowEditRange a0
                -> IO ()
changePassword0 password =
  method0 "ChangePassword"
          [inString password]

delete232 :: AllowEditRange a0
          -> IO ()
delete232 =
  method0 "Delete"
          []

unprotect7 :: (Variant a1)
           => a1
           -> AllowEditRange a0
           -> IO ()
unprotect7 password =
  method0 "Unprotect"
          [inVariant password]

getUsers0 :: AllowEditRange a0
          -> IO (UserAccessList ())
getUsers0 =
  propertyGet "Users"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface UserAccessList
-- 
-- --------------------------------------------------
data UserAccessList_ a = UserAccessList__ 
type UserAccessList a = IDispatch (UserAccessList_ a)
iidUserAccessList :: IID (UserAccessList ())
iidUserAccessList = mkIID "{0002446C-0000-0000-C000-000000000046}"

queryInterface207 :: (Variant a1)
                  => GUID
                  -> UserAccessList a0
                  -> IO a1
queryInterface207 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef207 :: UserAccessList a0
          -> IO Word32
addRef207 =
  function1 "AddRef"
            []
            outWord32

release207 :: UserAccessList a0
           -> IO Word32
release207 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount207 :: UserAccessList a0
                    -> IO Word32
getTypeInfoCount207 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo207 :: (Variant a1)
               => Word32
               -> Word32
               -> UserAccessList a0
               -> IO a1
getTypeInfo207 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames207 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> UserAccessList a0
                 -> IO Int32
getIDsOfNames207 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke207 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> UserAccessList a0
          -> IO (a1, a2, Word32)
invoke207 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getCount195 :: UserAccessList a0
            -> IO Int32
getCount195 =
  propertyGet "Count"
              []
              outInt32

getItem87 :: a1
          -> UserAccessList a0
          -> IO (UserAccess ())
getItem87 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

add132 :: String
       -> Bool
       -> UserAccessList a0
       -> IO (UserAccess ())
add132 name allowEdit =
  function1 "Add"
            [ inString name
            , inBool allowEdit
            ]
            outIUnknown

deleteAll1 :: UserAccessList a0
           -> IO ()
deleteAll1 =
  method0 "DeleteAll"
          []

getDefault183 :: a1
              -> UserAccessList a0
              -> IO (UserAccess ())
getDefault183 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum105 :: UserAccessList a0
              -> IO (IUnknown ())
getNewEnum105 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface UserAccess
-- 
-- --------------------------------------------------
data UserAccess_ a = UserAccess__ 
type UserAccess a = IDispatch (UserAccess_ a)
iidUserAccess :: IID (UserAccess ())
iidUserAccess = mkIID "{0002446D-0000-0000-C000-000000000046}"

queryInterface208 :: (Variant a1)
                  => GUID
                  -> UserAccess a0
                  -> IO a1
queryInterface208 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef208 :: UserAccess a0
          -> IO Word32
addRef208 =
  function1 "AddRef"
            []
            outWord32

release208 :: UserAccess a0
           -> IO Word32
release208 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount208 :: UserAccess a0
                    -> IO Word32
getTypeInfoCount208 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo208 :: (Variant a1)
               => Word32
               -> Word32
               -> UserAccess a0
               -> IO a1
getTypeInfo208 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames208 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> UserAccess a0
                 -> IO Int32
getIDsOfNames208 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke208 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> UserAccess a0
          -> IO (a1, a2, Word32)
invoke208 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getName145 :: UserAccess a0
           -> IO String
getName145 =
  propertyGet "Name"
              []
              outString

getAllowEdit2 :: UserAccess a0
              -> IO Bool
getAllowEdit2 =
  propertyGet "AllowEdit"
              []
              outBool

setAllowEdit0 :: Bool
              -> UserAccess a0
              -> IO ()
setAllowEdit0 rhs =
  propertySet "AllowEdit"
              [inBool rhs]

delete233 :: UserAccess a0
          -> IO ()
delete233 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- dispinterface RTD
-- 
-- --------------------------------------------------
data RTD_ a = RTD__ 
type RTD a = IDispatch (RTD_ a)
iidRTD :: IID (RTD ())
iidRTD = mkIID "{0002446E-0000-0000-C000-000000000046}"

queryInterface209 :: (Variant a1)
                  => GUID
                  -> RTD a0
                  -> IO a1
queryInterface209 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef209 :: RTD a0
          -> IO Word32
addRef209 =
  function1 "AddRef"
            []
            outWord32

release209 :: RTD a0
           -> IO Word32
release209 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount209 :: RTD a0
                    -> IO Word32
getTypeInfoCount209 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo209 :: (Variant a1)
               => Word32
               -> Word32
               -> RTD a0
               -> IO a1
getTypeInfo209 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames209 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> RTD a0
                 -> IO Int32
getIDsOfNames209 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke209 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> RTD a0
          -> IO (a1, a2, Word32)
invoke209 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getThrottleInterval0 :: RTD a0
                     -> IO Int32
getThrottleInterval0 =
  propertyGet "ThrottleInterval"
              []
              outInt32

setThrottleInterval0 :: Int32
                     -> RTD a0
                     -> IO ()
setThrottleInterval0 rhs =
  propertySet "ThrottleInterval"
              [inInt32 rhs]

refreshData1 :: RTD a0
             -> IO ()
refreshData1 =
  method0 "RefreshData"
          []

restartServers0 :: RTD a0
                -> IO ()
restartServers0 =
  method0 "RestartServers"
          []

-- --------------------------------------------------
-- 
-- dispinterface Diagram
-- 
-- --------------------------------------------------
data Diagram_ a = Diagram__ 
type Diagram a = IDispatch (Diagram_ a)
iidDiagram :: IID (Diagram ())
iidDiagram = mkIID "{0002446F-0000-0000-C000-000000000046}"

queryInterface210 :: (Variant a1)
                  => GUID
                  -> Diagram a0
                  -> IO a1
queryInterface210 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef210 :: Diagram a0
          -> IO Word32
addRef210 =
  function1 "AddRef"
            []
            outWord32

release210 :: Diagram a0
           -> IO Word32
release210 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount210 :: Diagram a0
                    -> IO Word32
getTypeInfoCount210 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo210 :: (Variant a1)
               => Word32
               -> Word32
               -> Diagram a0
               -> IO a1
getTypeInfo210 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames210 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Diagram a0
                 -> IO Int32
getIDsOfNames210 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke210 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Diagram a0
          -> IO (a1, a2, Word32)
invoke210 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication468 :: (Variant a1)
                  => Diagram a0
                  -> IO a1
getApplication468 =
  propertyGet "Application"
              []
              outVariant

getCreator468 :: Diagram a0
              -> IO XlCreator
getCreator468 =
  propertyGet "Creator"
              []
              outEnum

getParent483 :: Diagram a0
             -> IO (IDispatch ())
getParent483 =
  propertyGet "Parent"
              []
              outIDispatch

getNodes4 :: Diagram a0
          -> IO (DiagramNodes ())
getNodes4 =
  propertyGet "Nodes"
              []
              outIUnknown

getType58 :: (Variant a1)
          => Diagram a0
          -> IO a1
getType58 =
  propertyGet "Type"
              []
              outVariant

getAutoLayout0 :: (Variant a1)
               => Diagram a0
               -> IO a1
getAutoLayout0 =
  propertyGet "AutoLayout"
              []
              outVariant

setAutoLayout0 :: (Variant a1)
               => a1
               -> Diagram a0
               -> IO ()
setAutoLayout0 rhs =
  propertySet "AutoLayout"
              [inVariant rhs]

getReverse0 :: (Variant a1)
            => Diagram a0
            -> IO a1
getReverse0 =
  propertyGet "Reverse"
              []
              outVariant

setReverse0 :: (Variant a1)
            => a1
            -> Diagram a0
            -> IO ()
setReverse0 rhs =
  propertySet "Reverse"
              [inVariant rhs]

getAutoFormat0 :: (Variant a1)
               => Diagram a0
               -> IO a1
getAutoFormat0 =
  propertyGet "AutoFormat"
              []
              outVariant

setAutoFormat0 :: (Variant a1)
               => a1
               -> Diagram a0
               -> IO ()
setAutoFormat0 rhs =
  propertySet "AutoFormat"
              [inVariant rhs]

convert2 :: (Variant a1)
         => a1
         -> Diagram a0
         -> IO ()
convert2 type0 =
  method0 "Convert"
          [inVariant type0]

fitText0 :: Diagram a0
         -> IO ()
fitText0 =
  method0 "FitText"
          []

-- --------------------------------------------------
-- 
-- dispinterface ListObjects
-- 
-- --------------------------------------------------
data ListObjects_ a = ListObjects__ 
type ListObjects a = IDispatch (ListObjects_ a)
iidListObjects :: IID (ListObjects ())
iidListObjects = mkIID "{00024470-0000-0000-C000-000000000046}"

queryInterface211 :: (Variant a1)
                  => GUID
                  -> ListObjects a0
                  -> IO a1
queryInterface211 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef211 :: ListObjects a0
          -> IO Word32
addRef211 =
  function1 "AddRef"
            []
            outWord32

release211 :: ListObjects a0
           -> IO Word32
release211 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount211 :: ListObjects a0
                    -> IO Word32
getTypeInfoCount211 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo211 :: (Variant a1)
               => Word32
               -> Word32
               -> ListObjects a0
               -> IO a1
getTypeInfo211 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames211 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListObjects a0
                 -> IO Int32
getIDsOfNames211 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke211 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListObjects a0
          -> IO (a1, a2, Word32)
invoke211 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication469 :: (Variant a1)
                  => ListObjects a0
                  -> IO a1
getApplication469 =
  propertyGet "Application"
              []
              outVariant

getCreator469 :: ListObjects a0
              -> IO XlCreator
getCreator469 =
  propertyGet "Creator"
              []
              outEnum

getParent484 :: ListObjects a0
             -> IO (IDispatch ())
getParent484 =
  propertyGet "Parent"
              []
              outIDispatch

add133 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> ListObjects a0
       -> IO (ListObject ())
add133 sourceType source linkSource xlListObjectHasHeaders destination =
  function1 "_Add"
            [ inDefaultValue (inInt32 1) inVariant sourceType
            , inVariant source
            , inVariant linkSource
            , inDefaultValue (inInt32 0) inVariant xlListObjectHasHeaders
            , inVariant destination
            ]
            outIUnknown

getDefault184 :: a1
              -> ListObjects a0
              -> IO (ListObject ())
getDefault184 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum106 :: ListObjects a0
              -> IO (IUnknown ())
getNewEnum106 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem88 :: a1
          -> ListObjects a0
          -> IO (ListObject ())
getItem88 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getCount196 :: ListObjects a0
            -> IO Int32
getCount196 =
  propertyGet "Count"
              []
              outInt32

add134 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> ListObjects a0
       -> IO (ListObject ())
add134 sourceType source linkSource xlListObjectHasHeaders destination tableStyleName =
  function1 "Add"
            [ inDefaultValue (inInt32 1) inVariant sourceType
            , inVariant source
            , inVariant linkSource
            , inDefaultValue (inInt32 0) inVariant xlListObjectHasHeaders
            , inVariant destination
            , inVariant tableStyleName
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ListObject
-- 
-- --------------------------------------------------
data ListObject_ a = ListObject__ 
type ListObject a = IDispatch (ListObject_ a)
iidListObject :: IID (ListObject ())
iidListObject = mkIID "{00024471-0000-0000-C000-000000000046}"

queryInterface212 :: (Variant a1)
                  => GUID
                  -> ListObject a0
                  -> IO a1
queryInterface212 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef212 :: ListObject a0
          -> IO Word32
addRef212 =
  function1 "AddRef"
            []
            outWord32

release212 :: ListObject a0
           -> IO Word32
release212 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount212 :: ListObject a0
                    -> IO Word32
getTypeInfoCount212 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo212 :: (Variant a1)
               => Word32
               -> Word32
               -> ListObject a0
               -> IO a1
getTypeInfo212 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames212 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListObject a0
                 -> IO Int32
getIDsOfNames212 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke212 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListObject a0
          -> IO (a1, a2, Word32)
invoke212 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication470 :: (Variant a1)
                  => ListObject a0
                  -> IO a1
getApplication470 =
  propertyGet "Application"
              []
              outVariant

getCreator470 :: ListObject a0
              -> IO XlCreator
getCreator470 =
  propertyGet "Creator"
              []
              outEnum

getParent485 :: ListObject a0
             -> IO (IDispatch ())
getParent485 =
  propertyGet "Parent"
              []
              outIDispatch

delete234 :: ListObject a0
          -> IO ()
delete234 =
  method0 "Delete"
          []

publish3 :: a1
         -> Bool
         -> ListObject a0
         -> IO String
publish3 target linkSource =
  function1 "Publish"
            [ inVariant target
            , inBool linkSource
            ]
            outString

refresh9 :: ListObject a0
         -> IO ()
refresh9 =
  method0 "Refresh"
          []

unlink0 :: ListObject a0
        -> IO ()
unlink0 =
  method0 "Unlink"
          []

unlist0 :: ListObject a0
        -> IO ()
unlist0 =
  method0 "Unlist"
          []

updateChanges0 :: (Variant a1)
               => a1
               -> ListObject a0
               -> IO ()
updateChanges0 iConflictType =
  method0 "UpdateChanges"
          [inDefaultValue (inInt32 0) inVariant iConflictType]

resize2 :: Range a1
        -> ListObject a0
        -> IO ()
resize2 range =
  method0 "Resize"
          [inIDispatch range]

getDefault185 :: ListObject a0
              -> IO String
getDefault185 =
  propertyGet "_Default"
              []
              outString

getActive1 :: ListObject a0
           -> IO Bool
getActive1 =
  propertyGet "Active"
              []
              outBool

getDataBodyRange3 :: ListObject a0
                  -> IO (Range ())
getDataBodyRange3 =
  propertyGet "DataBodyRange"
              []
              outIDispatch

getDisplayRightToLeft10 :: ListObject a0
                        -> IO Bool
getDisplayRightToLeft10 =
  propertyGet "DisplayRightToLeft"
              []
              outBool

getHeaderRowRange0 :: ListObject a0
                   -> IO (Range ())
getHeaderRowRange0 =
  propertyGet "HeaderRowRange"
              []
              outIDispatch

getInsertRowRange0 :: ListObject a0
                   -> IO (Range ())
getInsertRowRange0 =
  propertyGet "InsertRowRange"
              []
              outIDispatch

getListColumns0 :: ListObject a0
                -> IO (ListColumns ())
getListColumns0 =
  propertyGet "ListColumns"
              []
              outIUnknown

getListRows0 :: ListObject a0
             -> IO (ListRows ())
getListRows0 =
  propertyGet "ListRows"
              []
              outIUnknown

getName146 :: ListObject a0
           -> IO String
getName146 =
  propertyGet "Name"
              []
              outString

setName81 :: String
          -> ListObject a0
          -> IO ()
setName81 rhs =
  propertySet "Name"
              [inString rhs]

getQueryTable2 :: (Variant a1)
               => ListObject a0
               -> IO a1
getQueryTable2 =
  propertyGet "QueryTable"
              []
              outVariant

getRange21 :: ListObject a0
           -> IO (Range ())
getRange21 =
  propertyGet "Range"
              []
              outIDispatch

getShowAutoFilter0 :: ListObject a0
                   -> IO Bool
getShowAutoFilter0 =
  propertyGet "ShowAutoFilter"
              []
              outBool

setShowAutoFilter0 :: Bool
                   -> ListObject a0
                   -> IO ()
setShowAutoFilter0 rhs =
  propertySet "ShowAutoFilter"
              [inBool rhs]

getShowTotals0 :: ListObject a0
               -> IO Bool
getShowTotals0 =
  propertyGet "ShowTotals"
              []
              outBool

setShowTotals0 :: Bool
               -> ListObject a0
               -> IO ()
setShowTotals0 rhs =
  propertySet "ShowTotals"
              [inBool rhs]

getSourceType3 :: ListObject a0
               -> IO XlListObjectSourceType
getSourceType3 =
  propertyGet "SourceType"
              []
              outEnum

getTotalsRowRange0 :: ListObject a0
                   -> IO (Range ())
getTotalsRowRange0 =
  propertyGet "TotalsRowRange"
              []
              outIDispatch

getSharePointURL0 :: ListObject a0
                  -> IO String
getSharePointURL0 =
  propertyGet "SharePointURL"
              []
              outString

getXmlMap0 :: ListObject a0
           -> IO (XmlMap ())
getXmlMap0 =
  propertyGet "XmlMap"
              []
              outIUnknown

getDisplayName0 :: ListObject a0
                -> IO String
getDisplayName0 =
  propertyGet "DisplayName"
              []
              outString

setDisplayName0 :: String
                -> ListObject a0
                -> IO ()
setDisplayName0 rhs =
  propertySet "DisplayName"
              [inString rhs]

getShowHeaders0 :: ListObject a0
                -> IO Bool
getShowHeaders0 =
  propertyGet "ShowHeaders"
              []
              outBool

setShowHeaders0 :: Bool
                -> ListObject a0
                -> IO ()
setShowHeaders0 rhs =
  propertySet "ShowHeaders"
              [inBool rhs]

getAutoFilter3 :: ListObject a0
               -> IO (AutoFilter ())
getAutoFilter3 =
  propertyGet "AutoFilter"
              []
              outIDispatch

getTableStyle3 :: ListObject a0
               -> IO a1
getTableStyle3 =
  propertyGet "TableStyle"
              []
              outVariant

setTableStyle3 :: a1
               -> ListObject a0
               -> IO ()
setTableStyle3 rhs =
  propertySet "TableStyle"
              [inVariant rhs]

getShowTableStyleFirstColumn0 :: ListObject a0
                              -> IO Bool
getShowTableStyleFirstColumn0 =
  propertyGet "ShowTableStyleFirstColumn"
              []
              outBool

setShowTableStyleFirstColumn0 :: Bool
                              -> ListObject a0
                              -> IO ()
setShowTableStyleFirstColumn0 rhs =
  propertySet "ShowTableStyleFirstColumn"
              [inBool rhs]

getShowTableStyleLastColumn2 :: ListObject a0
                             -> IO Bool
getShowTableStyleLastColumn2 =
  propertyGet "ShowTableStyleLastColumn"
              []
              outBool

setShowTableStyleLastColumn2 :: Bool
                             -> ListObject a0
                             -> IO ()
setShowTableStyleLastColumn2 rhs =
  propertySet "ShowTableStyleLastColumn"
              [inBool rhs]

getShowTableStyleRowStripes2 :: ListObject a0
                             -> IO Bool
getShowTableStyleRowStripes2 =
  propertyGet "ShowTableStyleRowStripes"
              []
              outBool

setShowTableStyleRowStripes2 :: Bool
                             -> ListObject a0
                             -> IO ()
setShowTableStyleRowStripes2 rhs =
  propertySet "ShowTableStyleRowStripes"
              [inBool rhs]

getShowTableStyleColumnStripes2 :: ListObject a0
                                -> IO Bool
getShowTableStyleColumnStripes2 =
  propertyGet "ShowTableStyleColumnStripes"
              []
              outBool

setShowTableStyleColumnStripes2 :: Bool
                                -> ListObject a0
                                -> IO ()
setShowTableStyleColumnStripes2 rhs =
  propertySet "ShowTableStyleColumnStripes"
              [inBool rhs]

getSort7 :: ListObject a0
         -> IO (Sort ())
getSort7 =
  propertyGet "Sort"
              []
              outIUnknown

getComment6 :: ListObject a0
            -> IO String
getComment6 =
  propertyGet "Comment"
              []
              outString

setComment4 :: String
            -> ListObject a0
            -> IO ()
setComment4 rhs =
  propertySet "Comment"
              [inString rhs]

exportToVisio0 :: ListObject a0
               -> IO ()
exportToVisio0 =
  method0 "ExportToVisio"
          []

-- --------------------------------------------------
-- 
-- dispinterface ListColumns
-- 
-- --------------------------------------------------
data ListColumns_ a = ListColumns__ 
type ListColumns a = IDispatch (ListColumns_ a)
iidListColumns :: IID (ListColumns ())
iidListColumns = mkIID "{00024472-0000-0000-C000-000000000046}"

queryInterface213 :: (Variant a1)
                  => GUID
                  -> ListColumns a0
                  -> IO a1
queryInterface213 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef213 :: ListColumns a0
          -> IO Word32
addRef213 =
  function1 "AddRef"
            []
            outWord32

release213 :: ListColumns a0
           -> IO Word32
release213 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount213 :: ListColumns a0
                    -> IO Word32
getTypeInfoCount213 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo213 :: (Variant a1)
               => Word32
               -> Word32
               -> ListColumns a0
               -> IO a1
getTypeInfo213 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames213 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListColumns a0
                 -> IO Int32
getIDsOfNames213 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke213 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListColumns a0
          -> IO (a1, a2, Word32)
invoke213 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication471 :: (Variant a1)
                  => ListColumns a0
                  -> IO a1
getApplication471 =
  propertyGet "Application"
              []
              outVariant

getCreator471 :: ListColumns a0
              -> IO XlCreator
getCreator471 =
  propertyGet "Creator"
              []
              outEnum

getParent486 :: ListColumns a0
             -> IO (IDispatch ())
getParent486 =
  propertyGet "Parent"
              []
              outIDispatch

add135 :: (Variant a1)
       => a1
       -> ListColumns a0
       -> IO (ListColumn ())
add135 position =
  function1 "Add"
            [inVariant position]
            outIUnknown

getDefault186 :: a1
              -> ListColumns a0
              -> IO (ListColumn ())
getDefault186 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum107 :: ListColumns a0
              -> IO (IUnknown ())
getNewEnum107 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem89 :: a1
          -> ListColumns a0
          -> IO (ListColumn ())
getItem89 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getCount197 :: ListColumns a0
            -> IO Int32
getCount197 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface ListColumn
-- 
-- --------------------------------------------------
data ListColumn_ a = ListColumn__ 
type ListColumn a = IDispatch (ListColumn_ a)
iidListColumn :: IID (ListColumn ())
iidListColumn = mkIID "{00024473-0000-0000-C000-000000000046}"

queryInterface214 :: (Variant a1)
                  => GUID
                  -> ListColumn a0
                  -> IO a1
queryInterface214 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef214 :: ListColumn a0
          -> IO Word32
addRef214 =
  function1 "AddRef"
            []
            outWord32

release214 :: ListColumn a0
           -> IO Word32
release214 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount214 :: ListColumn a0
                    -> IO Word32
getTypeInfoCount214 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo214 :: (Variant a1)
               => Word32
               -> Word32
               -> ListColumn a0
               -> IO a1
getTypeInfo214 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames214 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListColumn a0
                 -> IO Int32
getIDsOfNames214 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke214 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListColumn a0
          -> IO (a1, a2, Word32)
invoke214 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication472 :: (Variant a1)
                  => ListColumn a0
                  -> IO a1
getApplication472 =
  propertyGet "Application"
              []
              outVariant

getCreator472 :: ListColumn a0
              -> IO XlCreator
getCreator472 =
  propertyGet "Creator"
              []
              outEnum

getParent487 :: ListColumn a0
             -> IO (IDispatch ())
getParent487 =
  propertyGet "Parent"
              []
              outIDispatch

delete235 :: ListColumn a0
          -> IO ()
delete235 =
  method0 "Delete"
          []

getDefault187 :: ListColumn a0
              -> IO String
getDefault187 =
  propertyGet "_Default"
              []
              outString

getListDataFormat0 :: ListColumn a0
                   -> IO (ListDataFormat ())
getListDataFormat0 =
  propertyGet "ListDataFormat"
              []
              outIUnknown

getIndex76 :: ListColumn a0
           -> IO Int32
getIndex76 =
  propertyGet "Index"
              []
              outInt32

getName147 :: ListColumn a0
           -> IO String
getName147 =
  propertyGet "Name"
              []
              outString

setName82 :: String
          -> ListColumn a0
          -> IO ()
setName82 rhs =
  propertySet "Name"
              [inString rhs]

getRange22 :: ListColumn a0
           -> IO (Range ())
getRange22 =
  propertyGet "Range"
              []
              outIDispatch

getTotalsCalculation0 :: ListColumn a0
                      -> IO XlTotalsCalculation
getTotalsCalculation0 =
  propertyGet "TotalsCalculation"
              []
              outEnum

setTotalsCalculation0 :: XlTotalsCalculation
                      -> ListColumn a0
                      -> IO ()
setTotalsCalculation0 rhs =
  propertySet "TotalsCalculation"
              [inEnum rhs]

getXPath2 :: ListColumn a0
          -> IO (XPath ())
getXPath2 =
  propertyGet "XPath"
              []
              outIUnknown

getSharePointFormula0 :: ListColumn a0
                      -> IO String
getSharePointFormula0 =
  propertyGet "SharePointFormula"
              []
              outString

getDataBodyRange4 :: ListColumn a0
                  -> IO (Range ())
getDataBodyRange4 =
  propertyGet "DataBodyRange"
              []
              outIDispatch

getTotal0 :: ListColumn a0
          -> IO (Range ())
getTotal0 =
  propertyGet "Total"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface ListRows
-- 
-- --------------------------------------------------
data ListRows_ a = ListRows__ 
type ListRows a = IDispatch (ListRows_ a)
iidListRows :: IID (ListRows ())
iidListRows = mkIID "{00024474-0000-0000-C000-000000000046}"

queryInterface215 :: (Variant a1)
                  => GUID
                  -> ListRows a0
                  -> IO a1
queryInterface215 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef215 :: ListRows a0
          -> IO Word32
addRef215 =
  function1 "AddRef"
            []
            outWord32

release215 :: ListRows a0
           -> IO Word32
release215 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount215 :: ListRows a0
                    -> IO Word32
getTypeInfoCount215 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo215 :: (Variant a1)
               => Word32
               -> Word32
               -> ListRows a0
               -> IO a1
getTypeInfo215 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames215 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListRows a0
                 -> IO Int32
getIDsOfNames215 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke215 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListRows a0
          -> IO (a1, a2, Word32)
invoke215 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication473 :: (Variant a1)
                  => ListRows a0
                  -> IO a1
getApplication473 =
  propertyGet "Application"
              []
              outVariant

getCreator473 :: ListRows a0
              -> IO XlCreator
getCreator473 =
  propertyGet "Creator"
              []
              outEnum

getParent488 :: ListRows a0
             -> IO (IDispatch ())
getParent488 =
  propertyGet "Parent"
              []
              outIDispatch

add136 :: (Variant a1)
       => a1
       -> ListRows a0
       -> IO (ListRow ())
add136 position =
  function1 "_Add"
            [inVariant position]
            outIUnknown

getDefault188 :: a1
              -> ListRows a0
              -> IO (ListRow ())
getDefault188 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum108 :: ListRows a0
              -> IO (IUnknown ())
getNewEnum108 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem90 :: a1
          -> ListRows a0
          -> IO (ListRow ())
getItem90 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

getCount198 :: ListRows a0
            -> IO Int32
getCount198 =
  propertyGet "Count"
              []
              outInt32

add137 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> ListRows a0
       -> IO (ListRow ())
add137 position alwaysInsert =
  function1 "Add"
            [ inVariant position
            , inVariant alwaysInsert
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ListRow
-- 
-- --------------------------------------------------
data ListRow_ a = ListRow__ 
type ListRow a = IDispatch (ListRow_ a)
iidListRow :: IID (ListRow ())
iidListRow = mkIID "{00024475-0000-0000-C000-000000000046}"

queryInterface216 :: (Variant a1)
                  => GUID
                  -> ListRow a0
                  -> IO a1
queryInterface216 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef216 :: ListRow a0
          -> IO Word32
addRef216 =
  function1 "AddRef"
            []
            outWord32

release216 :: ListRow a0
           -> IO Word32
release216 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount216 :: ListRow a0
                    -> IO Word32
getTypeInfoCount216 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo216 :: (Variant a1)
               => Word32
               -> Word32
               -> ListRow a0
               -> IO a1
getTypeInfo216 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames216 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListRow a0
                 -> IO Int32
getIDsOfNames216 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke216 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListRow a0
          -> IO (a1, a2, Word32)
invoke216 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication474 :: (Variant a1)
                  => ListRow a0
                  -> IO a1
getApplication474 =
  propertyGet "Application"
              []
              outVariant

getCreator474 :: ListRow a0
              -> IO XlCreator
getCreator474 =
  propertyGet "Creator"
              []
              outEnum

getParent489 :: ListRow a0
             -> IO (IDispatch ())
getParent489 =
  propertyGet "Parent"
              []
              outIDispatch

delete236 :: ListRow a0
          -> IO ()
delete236 =
  method0 "Delete"
          []

getIndex77 :: ListRow a0
           -> IO Int32
getIndex77 =
  propertyGet "Index"
              []
              outInt32

getInvalidData0 :: ListRow a0
                -> IO Bool
getInvalidData0 =
  propertyGet "InvalidData"
              []
              outBool

getRange23 :: ListRow a0
           -> IO (Range ())
getRange23 =
  propertyGet "Range"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface XmlNamespace
-- 
-- --------------------------------------------------
data XmlNamespace_ a = XmlNamespace__ 
type XmlNamespace a = IDispatch (XmlNamespace_ a)
iidXmlNamespace :: IID (XmlNamespace ())
iidXmlNamespace = mkIID "{00024476-0000-0000-C000-000000000046}"

queryInterface217 :: (Variant a1)
                  => GUID
                  -> XmlNamespace a0
                  -> IO a1
queryInterface217 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef217 :: XmlNamespace a0
          -> IO Word32
addRef217 =
  function1 "AddRef"
            []
            outWord32

release217 :: XmlNamespace a0
           -> IO Word32
release217 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount217 :: XmlNamespace a0
                    -> IO Word32
getTypeInfoCount217 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo217 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlNamespace a0
               -> IO a1
getTypeInfo217 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames217 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlNamespace a0
                 -> IO Int32
getIDsOfNames217 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke217 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlNamespace a0
          -> IO (a1, a2, Word32)
invoke217 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication475 :: (Variant a1)
                  => XmlNamespace a0
                  -> IO a1
getApplication475 =
  propertyGet "Application"
              []
              outVariant

getCreator475 :: XmlNamespace a0
              -> IO XlCreator
getCreator475 =
  propertyGet "Creator"
              []
              outEnum

getParent490 :: XmlNamespace a0
             -> IO (IDispatch ())
getParent490 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault189 :: XmlNamespace a0
              -> IO String
getDefault189 =
  propertyGet "_Default"
              []
              outString

getUri0 :: XmlNamespace a0
        -> IO String
getUri0 =
  propertyGet "Uri"
              []
              outString

getPrefix0 :: XmlNamespace a0
           -> IO String
getPrefix0 =
  propertyGet "Prefix"
              []
              outString

-- --------------------------------------------------
-- 
-- dispinterface XmlNamespaces
-- 
-- --------------------------------------------------
data XmlNamespaces_ a = XmlNamespaces__ 
type XmlNamespaces a = IDispatch (XmlNamespaces_ a)
iidXmlNamespaces :: IID (XmlNamespaces ())
iidXmlNamespaces = mkIID "{00024477-0000-0000-C000-000000000046}"

queryInterface218 :: (Variant a1)
                  => GUID
                  -> XmlNamespaces a0
                  -> IO a1
queryInterface218 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef218 :: XmlNamespaces a0
          -> IO Word32
addRef218 =
  function1 "AddRef"
            []
            outWord32

release218 :: XmlNamespaces a0
           -> IO Word32
release218 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount218 :: XmlNamespaces a0
                    -> IO Word32
getTypeInfoCount218 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo218 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlNamespaces a0
               -> IO a1
getTypeInfo218 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames218 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlNamespaces a0
                 -> IO Int32
getIDsOfNames218 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke218 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlNamespaces a0
          -> IO (a1, a2, Word32)
invoke218 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication476 :: (Variant a1)
                  => XmlNamespaces a0
                  -> IO a1
getApplication476 =
  propertyGet "Application"
              []
              outVariant

getCreator476 :: XmlNamespaces a0
              -> IO XlCreator
getCreator476 =
  propertyGet "Creator"
              []
              outEnum

getParent491 :: XmlNamespaces a0
             -> IO (IDispatch ())
getParent491 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault190 :: a1
              -> XmlNamespaces a0
              -> IO (XmlNamespace ())
getDefault190 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem91 :: a1
          -> XmlNamespaces a0
          -> IO (XmlNamespace ())
getItem91 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount199 :: XmlNamespaces a0
            -> IO Int32
getCount199 =
  propertyGet "Count"
              []
              outInt32

getValue59 :: XmlNamespaces a0
           -> IO String
getValue59 =
  propertyGet "Value"
              []
              outString

getNewEnum109 :: XmlNamespaces a0
              -> IO (IUnknown ())
getNewEnum109 =
  propertyGet "_NewEnum"
              []
              outIUnknown

installManifest0 :: (Variant a1)
                 => String
                 -> a1
                 -> XmlNamespaces a0
                 -> IO ()
installManifest0 path installForAllUsers =
  method0 "InstallManifest"
          [ inString path
          , inVariant installForAllUsers
          ]

-- --------------------------------------------------
-- 
-- dispinterface XmlDataBinding
-- 
-- --------------------------------------------------
data XmlDataBinding_ a = XmlDataBinding__ 
type XmlDataBinding a = IDispatch (XmlDataBinding_ a)
iidXmlDataBinding :: IID (XmlDataBinding ())
iidXmlDataBinding = mkIID "{00024478-0000-0000-C000-000000000046}"

queryInterface219 :: (Variant a1)
                  => GUID
                  -> XmlDataBinding a0
                  -> IO a1
queryInterface219 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef219 :: XmlDataBinding a0
          -> IO Word32
addRef219 =
  function1 "AddRef"
            []
            outWord32

release219 :: XmlDataBinding a0
           -> IO Word32
release219 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount219 :: XmlDataBinding a0
                    -> IO Word32
getTypeInfoCount219 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo219 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlDataBinding a0
               -> IO a1
getTypeInfo219 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames219 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlDataBinding a0
                 -> IO Int32
getIDsOfNames219 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke219 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlDataBinding a0
          -> IO (a1, a2, Word32)
invoke219 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication477 :: (Variant a1)
                  => XmlDataBinding a0
                  -> IO a1
getApplication477 =
  propertyGet "Application"
              []
              outVariant

getCreator477 :: XmlDataBinding a0
              -> IO XlCreator
getCreator477 =
  propertyGet "Creator"
              []
              outEnum

getParent492 :: XmlDataBinding a0
             -> IO (IDispatch ())
getParent492 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault191 :: XmlDataBinding a0
              -> IO String
getDefault191 =
  propertyGet "_Default"
              []
              outString

refresh10 :: XmlDataBinding a0
          -> IO XlXmlImportResult
refresh10 =
  function1 "Refresh"
            []
            outEnum

loadSettings0 :: String
              -> XmlDataBinding a0
              -> IO ()
loadSettings0 url =
  method0 "LoadSettings"
          [inString url]

clearSettings0 :: XmlDataBinding a0
               -> IO ()
clearSettings0 =
  method0 "ClearSettings"
          []

getSourceUrl0 :: XmlDataBinding a0
              -> IO String
getSourceUrl0 =
  propertyGet "SourceUrl"
              []
              outString

-- --------------------------------------------------
-- 
-- dispinterface XmlSchema
-- 
-- --------------------------------------------------
data XmlSchema_ a = XmlSchema__ 
type XmlSchema a = IDispatch (XmlSchema_ a)
iidXmlSchema :: IID (XmlSchema ())
iidXmlSchema = mkIID "{00024479-0000-0000-C000-000000000046}"

queryInterface220 :: (Variant a1)
                  => GUID
                  -> XmlSchema a0
                  -> IO a1
queryInterface220 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef220 :: XmlSchema a0
          -> IO Word32
addRef220 =
  function1 "AddRef"
            []
            outWord32

release220 :: XmlSchema a0
           -> IO Word32
release220 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount220 :: XmlSchema a0
                    -> IO Word32
getTypeInfoCount220 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo220 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlSchema a0
               -> IO a1
getTypeInfo220 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames220 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlSchema a0
                 -> IO Int32
getIDsOfNames220 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke220 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlSchema a0
          -> IO (a1, a2, Word32)
invoke220 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication478 :: (Variant a1)
                  => XmlSchema a0
                  -> IO a1
getApplication478 =
  propertyGet "Application"
              []
              outVariant

getCreator478 :: XmlSchema a0
              -> IO XlCreator
getCreator478 =
  propertyGet "Creator"
              []
              outEnum

getParent493 :: XmlSchema a0
             -> IO (IDispatch ())
getParent493 =
  propertyGet "Parent"
              []
              outIDispatch

getNamespace0 :: XmlSchema a0
              -> IO (XmlNamespace ())
getNamespace0 =
  propertyGet "Namespace"
              []
              outIDispatch

getXML2 :: XmlSchema a0
        -> IO String
getXML2 =
  propertyGet "XML"
              []
              outString

getName148 :: XmlSchema a0
           -> IO String
getName148 =
  propertyGet "Name"
              []
              outString

-- --------------------------------------------------
-- 
-- dispinterface XmlSchemas
-- 
-- --------------------------------------------------
data XmlSchemas_ a = XmlSchemas__ 
type XmlSchemas a = IDispatch (XmlSchemas_ a)
iidXmlSchemas :: IID (XmlSchemas ())
iidXmlSchemas = mkIID "{0002447A-0000-0000-C000-000000000046}"

queryInterface221 :: (Variant a1)
                  => GUID
                  -> XmlSchemas a0
                  -> IO a1
queryInterface221 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef221 :: XmlSchemas a0
          -> IO Word32
addRef221 =
  function1 "AddRef"
            []
            outWord32

release221 :: XmlSchemas a0
           -> IO Word32
release221 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount221 :: XmlSchemas a0
                    -> IO Word32
getTypeInfoCount221 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo221 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlSchemas a0
               -> IO a1
getTypeInfo221 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames221 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlSchemas a0
                 -> IO Int32
getIDsOfNames221 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke221 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlSchemas a0
          -> IO (a1, a2, Word32)
invoke221 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication479 :: (Variant a1)
                  => XmlSchemas a0
                  -> IO a1
getApplication479 =
  propertyGet "Application"
              []
              outVariant

getCreator479 :: XmlSchemas a0
              -> IO XlCreator
getCreator479 =
  propertyGet "Creator"
              []
              outEnum

getParent494 :: XmlSchemas a0
             -> IO (IDispatch ())
getParent494 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault192 :: a1
              -> XmlSchemas a0
              -> IO (XmlSchema ())
getDefault192 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem92 :: a1
          -> XmlSchemas a0
          -> IO (XmlSchema ())
getItem92 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount200 :: XmlSchemas a0
            -> IO Int32
getCount200 =
  propertyGet "Count"
              []
              outInt32

getNewEnum110 :: XmlSchemas a0
              -> IO (IUnknown ())
getNewEnum110 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface XmlMap
-- 
-- --------------------------------------------------
data XmlMap_ a = XmlMap__ 
type XmlMap a = IDispatch (XmlMap_ a)
iidXmlMap :: IID (XmlMap ())
iidXmlMap = mkIID "{0002447B-0000-0000-C000-000000000046}"

queryInterface222 :: (Variant a1)
                  => GUID
                  -> XmlMap a0
                  -> IO a1
queryInterface222 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef222 :: XmlMap a0
          -> IO Word32
addRef222 =
  function1 "AddRef"
            []
            outWord32

release222 :: XmlMap a0
           -> IO Word32
release222 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount222 :: XmlMap a0
                    -> IO Word32
getTypeInfoCount222 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo222 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlMap a0
               -> IO a1
getTypeInfo222 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames222 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlMap a0
                 -> IO Int32
getIDsOfNames222 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke222 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlMap a0
          -> IO (a1, a2, Word32)
invoke222 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication480 :: (Variant a1)
                  => XmlMap a0
                  -> IO a1
getApplication480 =
  propertyGet "Application"
              []
              outVariant

getCreator480 :: XmlMap a0
              -> IO XlCreator
getCreator480 =
  propertyGet "Creator"
              []
              outEnum

getParent495 :: XmlMap a0
             -> IO (IDispatch ())
getParent495 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault193 :: XmlMap a0
              -> IO String
getDefault193 =
  propertyGet "_Default"
              []
              outString

getName149 :: XmlMap a0
           -> IO String
getName149 =
  propertyGet "Name"
              []
              outString

setName83 :: String
          -> XmlMap a0
          -> IO ()
setName83 rhs =
  propertySet "Name"
              [inString rhs]

getIsExportable0 :: XmlMap a0
                 -> IO Bool
getIsExportable0 =
  propertyGet "IsExportable"
              []
              outBool

getShowImportExportValidationErrors0 :: XmlMap a0
                                     -> IO Bool
getShowImportExportValidationErrors0 =
  propertyGet "ShowImportExportValidationErrors"
              []
              outBool

setShowImportExportValidationErrors0 :: Bool
                                     -> XmlMap a0
                                     -> IO ()
setShowImportExportValidationErrors0 rhs =
  propertySet "ShowImportExportValidationErrors"
              [inBool rhs]

getSaveDataSourceDefinition0 :: XmlMap a0
                             -> IO Bool
getSaveDataSourceDefinition0 =
  propertyGet "SaveDataSourceDefinition"
              []
              outBool

setSaveDataSourceDefinition0 :: Bool
                             -> XmlMap a0
                             -> IO ()
setSaveDataSourceDefinition0 rhs =
  propertySet "SaveDataSourceDefinition"
              [inBool rhs]

getAdjustColumnWidth2 :: XmlMap a0
                      -> IO Bool
getAdjustColumnWidth2 =
  propertyGet "AdjustColumnWidth"
              []
              outBool

setAdjustColumnWidth2 :: Bool
                      -> XmlMap a0
                      -> IO ()
setAdjustColumnWidth2 rhs =
  propertySet "AdjustColumnWidth"
              [inBool rhs]

getPreserveColumnFilter0 :: XmlMap a0
                         -> IO Bool
getPreserveColumnFilter0 =
  propertyGet "PreserveColumnFilter"
              []
              outBool

setPreserveColumnFilter0 :: Bool
                         -> XmlMap a0
                         -> IO ()
setPreserveColumnFilter0 rhs =
  propertySet "PreserveColumnFilter"
              [inBool rhs]

getPreserveNumberFormatting0 :: XmlMap a0
                             -> IO Bool
getPreserveNumberFormatting0 =
  propertyGet "PreserveNumberFormatting"
              []
              outBool

setPreserveNumberFormatting0 :: Bool
                             -> XmlMap a0
                             -> IO ()
setPreserveNumberFormatting0 rhs =
  propertySet "PreserveNumberFormatting"
              [inBool rhs]

getAppendOnImport0 :: XmlMap a0
                   -> IO Bool
getAppendOnImport0 =
  propertyGet "AppendOnImport"
              []
              outBool

setAppendOnImport0 :: Bool
                   -> XmlMap a0
                   -> IO ()
setAppendOnImport0 rhs =
  propertySet "AppendOnImport"
              [inBool rhs]

getRootElementName0 :: XmlMap a0
                    -> IO String
getRootElementName0 =
  propertyGet "RootElementName"
              []
              outString

getRootElementNamespace0 :: XmlMap a0
                         -> IO (XmlNamespace ())
getRootElementNamespace0 =
  propertyGet "RootElementNamespace"
              []
              outIDispatch

getSchemas0 :: XmlMap a0
            -> IO (XmlSchemas ())
getSchemas0 =
  propertyGet "Schemas"
              []
              outIDispatch

getDataBinding0 :: XmlMap a0
                -> IO (XmlDataBinding ())
getDataBinding0 =
  propertyGet "DataBinding"
              []
              outIDispatch

delete237 :: XmlMap a0
          -> IO ()
delete237 =
  method0 "Delete"
          []

import3 :: (Variant a1)
        => String
        -> a1
        -> XmlMap a0
        -> IO XlXmlImportResult
import3 url overwrite =
  function1 "Import"
            [ inString url
            , inVariant overwrite
            ]
            outEnum

importXml0 :: (Variant a1)
           => String
           -> a1
           -> XmlMap a0
           -> IO XlXmlImportResult
importXml0 xmlData overwrite =
  function1 "ImportXml"
            [ inString xmlData
            , inVariant overwrite
            ]
            outEnum

export1 :: (Variant a1)
        => String
        -> a1
        -> XmlMap a0
        -> IO XlXmlExportResult
export1 url overwrite =
  function1 "Export"
            [ inString url
            , inVariant overwrite
            ]
            outEnum

exportXml0 :: XmlMap a0
           -> IO (String, XlXmlExportResult)
exportXml0 =
  method2 "ExportXml"
          []
          outString
          outEnum

getWorkbookConnection4 :: XmlMap a0
                       -> IO (WorkbookConnection ())
getWorkbookConnection4 =
  propertyGet "WorkbookConnection"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface XmlMaps
-- 
-- --------------------------------------------------
data XmlMaps_ a = XmlMaps__ 
type XmlMaps a = IDispatch (XmlMaps_ a)
iidXmlMaps :: IID (XmlMaps ())
iidXmlMaps = mkIID "{0002447C-0000-0000-C000-000000000046}"

queryInterface223 :: (Variant a1)
                  => GUID
                  -> XmlMaps a0
                  -> IO a1
queryInterface223 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef223 :: XmlMaps a0
          -> IO Word32
addRef223 =
  function1 "AddRef"
            []
            outWord32

release223 :: XmlMaps a0
           -> IO Word32
release223 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount223 :: XmlMaps a0
                    -> IO Word32
getTypeInfoCount223 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo223 :: (Variant a1)
               => Word32
               -> Word32
               -> XmlMaps a0
               -> IO a1
getTypeInfo223 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames223 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XmlMaps a0
                 -> IO Int32
getIDsOfNames223 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke223 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XmlMaps a0
          -> IO (a1, a2, Word32)
invoke223 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication481 :: (Variant a1)
                  => XmlMaps a0
                  -> IO a1
getApplication481 =
  propertyGet "Application"
              []
              outVariant

getCreator481 :: XmlMaps a0
              -> IO XlCreator
getCreator481 =
  propertyGet "Creator"
              []
              outEnum

getParent496 :: XmlMaps a0
             -> IO (IDispatch ())
getParent496 =
  propertyGet "Parent"
              []
              outIDispatch

add138 :: (Variant a1)
       => String
       -> a1
       -> XmlMaps a0
       -> IO (XmlMap ())
add138 schema rootElementName =
  function1 "Add"
            [ inString schema
            , inVariant rootElementName
            ]
            outIDispatch

getDefault194 :: a1
              -> XmlMaps a0
              -> IO (XmlMap ())
getDefault194 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getItem93 :: a1
          -> XmlMaps a0
          -> IO (XmlMap ())
getItem93 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount201 :: XmlMaps a0
            -> IO Int32
getCount201 =
  propertyGet "Count"
              []
              outInt32

getNewEnum111 :: XmlMaps a0
              -> IO (IUnknown ())
getNewEnum111 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ListDataFormat
-- 
-- --------------------------------------------------
data ListDataFormat_ a = ListDataFormat__ 
type ListDataFormat a = IDispatch (ListDataFormat_ a)
iidListDataFormat :: IID (ListDataFormat ())
iidListDataFormat = mkIID "{0002447D-0000-0000-C000-000000000046}"

queryInterface224 :: (Variant a1)
                  => GUID
                  -> ListDataFormat a0
                  -> IO a1
queryInterface224 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef224 :: ListDataFormat a0
          -> IO Word32
addRef224 =
  function1 "AddRef"
            []
            outWord32

release224 :: ListDataFormat a0
           -> IO Word32
release224 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount224 :: ListDataFormat a0
                    -> IO Word32
getTypeInfoCount224 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo224 :: (Variant a1)
               => Word32
               -> Word32
               -> ListDataFormat a0
               -> IO a1
getTypeInfo224 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames224 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ListDataFormat a0
                 -> IO Int32
getIDsOfNames224 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke224 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ListDataFormat a0
          -> IO (a1, a2, Word32)
invoke224 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication482 :: (Variant a1)
                  => ListDataFormat a0
                  -> IO a1
getApplication482 =
  propertyGet "Application"
              []
              outVariant

getCreator482 :: ListDataFormat a0
              -> IO XlCreator
getCreator482 =
  propertyGet "Creator"
              []
              outEnum

getParent497 :: ListDataFormat a0
             -> IO (IDispatch ())
getParent497 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault195 :: ListDataFormat a0
              -> IO XlListDataType
getDefault195 =
  propertyGet "_Default"
              []
              outEnum

getChoices0 :: ListDataFormat a0
            -> IO a1
getChoices0 =
  propertyGet "Choices"
              []
              outVariant

getDecimalPlaces0 :: ListDataFormat a0
                  -> IO Int32
getDecimalPlaces0 =
  propertyGet "DecimalPlaces"
              []
              outInt32

getDefaultValue0 :: ListDataFormat a0
                 -> IO a1
getDefaultValue0 =
  propertyGet "DefaultValue"
              []
              outVariant

getIsPercent0 :: ListDataFormat a0
              -> IO Bool
getIsPercent0 =
  propertyGet "IsPercent"
              []
              outBool

getLcid0 :: ListDataFormat a0
         -> IO Int32
getLcid0 =
  propertyGet "lcid"
              []
              outInt32

getMaxCharacters0 :: ListDataFormat a0
                  -> IO Int32
getMaxCharacters0 =
  propertyGet "MaxCharacters"
              []
              outInt32

getMaxNumber0 :: ListDataFormat a0
              -> IO a1
getMaxNumber0 =
  propertyGet "MaxNumber"
              []
              outVariant

getMinNumber0 :: ListDataFormat a0
              -> IO a1
getMinNumber0 =
  propertyGet "MinNumber"
              []
              outVariant

getRequired0 :: ListDataFormat a0
             -> IO Bool
getRequired0 =
  propertyGet "Required"
              []
              outBool

getType59 :: ListDataFormat a0
          -> IO XlListDataType
getType59 =
  propertyGet "Type"
              []
              outEnum

getReadOnly1 :: ListDataFormat a0
             -> IO Bool
getReadOnly1 =
  propertyGet "ReadOnly"
              []
              outBool

getAllowFillIn0 :: ListDataFormat a0
                -> IO Bool
getAllowFillIn0 =
  propertyGet "AllowFillIn"
              []
              outBool

-- --------------------------------------------------
-- 
-- dispinterface XPath
-- 
-- --------------------------------------------------
data XPath_ a = XPath__ 
type XPath a = IDispatch (XPath_ a)
iidXPath :: IID (XPath ())
iidXPath = mkIID "{0002447E-0000-0000-C000-000000000046}"

queryInterface225 :: (Variant a1)
                  => GUID
                  -> XPath a0
                  -> IO a1
queryInterface225 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef225 :: XPath a0
          -> IO Word32
addRef225 =
  function1 "AddRef"
            []
            outWord32

release225 :: XPath a0
           -> IO Word32
release225 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount225 :: XPath a0
                    -> IO Word32
getTypeInfoCount225 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo225 :: (Variant a1)
               => Word32
               -> Word32
               -> XPath a0
               -> IO a1
getTypeInfo225 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames225 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> XPath a0
                 -> IO Int32
getIDsOfNames225 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke225 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> XPath a0
          -> IO (a1, a2, Word32)
invoke225 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication483 :: (Variant a1)
                  => XPath a0
                  -> IO a1
getApplication483 =
  propertyGet "Application"
              []
              outVariant

getCreator483 :: XPath a0
              -> IO XlCreator
getCreator483 =
  propertyGet "Creator"
              []
              outEnum

getParent498 :: XPath a0
             -> IO (IDispatch ())
getParent498 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault196 :: XPath a0
              -> IO String
getDefault196 =
  propertyGet "_Default"
              []
              outString

getValue60 :: XPath a0
           -> IO String
getValue60 =
  propertyGet "Value"
              []
              outString

getMap0 :: XPath a0
        -> IO (XmlMap ())
getMap0 =
  propertyGet "Map"
              []
              outIDispatch

setValue48 :: (Variant a2, Variant a3)
           => XmlMap a1
           -> String
           -> a2
           -> a3
           -> XPath a0
           -> IO ()
setValue48 map xPath selectionNamespace repeating =
  method0 "SetValue"
          [ inIDispatch map
          , inString xPath
          , inVariant selectionNamespace
          , inVariant repeating
          ]

clear11 :: XPath a0
        -> IO ()
clear11 =
  method0 "Clear"
          []

getRepeating0 :: XPath a0
              -> IO Bool
getRepeating0 =
  propertyGet "Repeating"
              []
              outBool

-- --------------------------------------------------
-- 
-- dispinterface PivotLineCells
-- 
-- --------------------------------------------------
data PivotLineCells_ a = PivotLineCells__ 
type PivotLineCells a = IDispatch (PivotLineCells_ a)
iidPivotLineCells :: IID (PivotLineCells ())
iidPivotLineCells = mkIID "{0002447F-0000-0000-C000-000000000046}"

queryInterface226 :: (Variant a1)
                  => GUID
                  -> PivotLineCells a0
                  -> IO a1
queryInterface226 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef226 :: PivotLineCells a0
          -> IO Word32
addRef226 =
  function1 "AddRef"
            []
            outWord32

release226 :: PivotLineCells a0
           -> IO Word32
release226 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount226 :: PivotLineCells a0
                    -> IO Word32
getTypeInfoCount226 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo226 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotLineCells a0
               -> IO a1
getTypeInfo226 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames226 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotLineCells a0
                 -> IO Int32
getIDsOfNames226 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke226 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotLineCells a0
          -> IO (a1, a2, Word32)
invoke226 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication484 :: (Variant a1)
                  => PivotLineCells a0
                  -> IO a1
getApplication484 =
  propertyGet "Application"
              []
              outVariant

getCreator484 :: PivotLineCells a0
              -> IO XlCreator
getCreator484 =
  propertyGet "Creator"
              []
              outEnum

getParent499 :: PivotLineCells a0
             -> IO (IDispatch ())
getParent499 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault197 :: a1
              -> PivotLineCells a0
              -> IO (PivotCell ())
getDefault197 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum112 :: PivotLineCells a0
              -> IO (IUnknown ())
getNewEnum112 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem94 :: a1
          -> PivotLineCells a0
          -> IO (PivotCell ())
getItem94 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount202 :: PivotLineCells a0
            -> IO Int32
getCount202 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface PivotLine
-- 
-- --------------------------------------------------
data PivotLine_ a = PivotLine__ 
type PivotLine a = IDispatch (PivotLine_ a)
iidPivotLine :: IID (PivotLine ())
iidPivotLine = mkIID "{00024480-0000-0000-C000-000000000046}"

queryInterface227 :: (Variant a1)
                  => GUID
                  -> PivotLine a0
                  -> IO a1
queryInterface227 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef227 :: PivotLine a0
          -> IO Word32
addRef227 =
  function1 "AddRef"
            []
            outWord32

release227 :: PivotLine a0
           -> IO Word32
release227 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount227 :: PivotLine a0
                    -> IO Word32
getTypeInfoCount227 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo227 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotLine a0
               -> IO a1
getTypeInfo227 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames227 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotLine a0
                 -> IO Int32
getIDsOfNames227 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke227 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotLine a0
          -> IO (a1, a2, Word32)
invoke227 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication485 :: (Variant a1)
                  => PivotLine a0
                  -> IO a1
getApplication485 =
  propertyGet "Application"
              []
              outVariant

getCreator485 :: PivotLine a0
              -> IO XlCreator
getCreator485 =
  propertyGet "Creator"
              []
              outEnum

getParent500 :: PivotLine a0
             -> IO (IDispatch ())
getParent500 =
  propertyGet "Parent"
              []
              outIDispatch

getLineType0 :: PivotLine a0
             -> IO XlPivotLineType
getLineType0 =
  propertyGet "LineType"
              []
              outEnum

getPosition22 :: PivotLine a0
              -> IO Int32
getPosition22 =
  propertyGet "Position"
              []
              outInt32

getPivotLineCells0 :: PivotLine a0
                   -> IO (PivotLineCells ())
getPivotLineCells0 =
  propertyGet "PivotLineCells"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface PivotLines
-- 
-- --------------------------------------------------
data PivotLines_ a = PivotLines__ 
type PivotLines a = IDispatch (PivotLines_ a)
iidPivotLines :: IID (PivotLines ())
iidPivotLines = mkIID "{00024481-0000-0000-C000-000000000046}"

queryInterface228 :: (Variant a1)
                  => GUID
                  -> PivotLines a0
                  -> IO a1
queryInterface228 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef228 :: PivotLines a0
          -> IO Word32
addRef228 =
  function1 "AddRef"
            []
            outWord32

release228 :: PivotLines a0
           -> IO Word32
release228 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount228 :: PivotLines a0
                    -> IO Word32
getTypeInfoCount228 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo228 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotLines a0
               -> IO a1
getTypeInfo228 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames228 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotLines a0
                 -> IO Int32
getIDsOfNames228 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke228 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotLines a0
          -> IO (a1, a2, Word32)
invoke228 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication486 :: (Variant a1)
                  => PivotLines a0
                  -> IO a1
getApplication486 =
  propertyGet "Application"
              []
              outVariant

getCreator486 :: PivotLines a0
              -> IO XlCreator
getCreator486 =
  propertyGet "Creator"
              []
              outEnum

getParent501 :: PivotLines a0
             -> IO (IDispatch ())
getParent501 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault198 :: a1
              -> PivotLines a0
              -> IO (PivotLine ())
getDefault198 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum113 :: PivotLines a0
              -> IO (IUnknown ())
getNewEnum113 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem95 :: a1
          -> PivotLines a0
          -> IO (PivotLine ())
getItem95 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount203 :: PivotLines a0
            -> IO Int32
getCount203 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface PivotAxis
-- 
-- --------------------------------------------------
data PivotAxis_ a = PivotAxis__ 
type PivotAxis a = IDispatch (PivotAxis_ a)
iidPivotAxis :: IID (PivotAxis ())
iidPivotAxis = mkIID "{00024482-0000-0000-C000-000000000046}"

queryInterface229 :: (Variant a1)
                  => GUID
                  -> PivotAxis a0
                  -> IO a1
queryInterface229 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef229 :: PivotAxis a0
          -> IO Word32
addRef229 =
  function1 "AddRef"
            []
            outWord32

release229 :: PivotAxis a0
           -> IO Word32
release229 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount229 :: PivotAxis a0
                    -> IO Word32
getTypeInfoCount229 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo229 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotAxis a0
               -> IO a1
getTypeInfo229 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames229 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotAxis a0
                 -> IO Int32
getIDsOfNames229 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke229 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotAxis a0
          -> IO (a1, a2, Word32)
invoke229 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication487 :: (Variant a1)
                  => PivotAxis a0
                  -> IO a1
getApplication487 =
  propertyGet "Application"
              []
              outVariant

getCreator487 :: PivotAxis a0
              -> IO XlCreator
getCreator487 =
  propertyGet "Creator"
              []
              outEnum

getParent502 :: PivotAxis a0
             -> IO (IDispatch ())
getParent502 =
  propertyGet "Parent"
              []
              outIDispatch

getPivotLines0 :: PivotAxis a0
               -> IO (PivotLines ())
getPivotLines0 =
  propertyGet "PivotLines"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface PivotFilter
-- 
-- --------------------------------------------------
data PivotFilter_ a = PivotFilter__ 
type PivotFilter a = IDispatch (PivotFilter_ a)
iidPivotFilter :: IID (PivotFilter ())
iidPivotFilter = mkIID "{00024483-0000-0000-C000-000000000046}"

queryInterface230 :: (Variant a1)
                  => GUID
                  -> PivotFilter a0
                  -> IO a1
queryInterface230 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef230 :: PivotFilter a0
          -> IO Word32
addRef230 =
  function1 "AddRef"
            []
            outWord32

release230 :: PivotFilter a0
           -> IO Word32
release230 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount230 :: PivotFilter a0
                    -> IO Word32
getTypeInfoCount230 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo230 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotFilter a0
               -> IO a1
getTypeInfo230 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames230 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotFilter a0
                 -> IO Int32
getIDsOfNames230 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke230 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotFilter a0
          -> IO (a1, a2, Word32)
invoke230 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication488 :: (Variant a1)
                  => PivotFilter a0
                  -> IO a1
getApplication488 =
  propertyGet "Application"
              []
              outVariant

getCreator488 :: PivotFilter a0
              -> IO XlCreator
getCreator488 =
  propertyGet "Creator"
              []
              outEnum

getParent503 :: PivotFilter a0
             -> IO (IDispatch ())
getParent503 =
  propertyGet "Parent"
              []
              outIDispatch

getOrder5 :: PivotFilter a0
          -> IO Int32
getOrder5 =
  propertyGet "Order"
              []
              outInt32

setOrder5 :: Int32
          -> PivotFilter a0
          -> IO ()
setOrder5 rhs =
  propertySet "Order"
              [inInt32 rhs]

getFilterType0 :: PivotFilter a0
               -> IO XlPivotFilterType
getFilterType0 =
  propertyGet "FilterType"
              []
              outEnum

getName150 :: PivotFilter a0
           -> IO String
getName150 =
  propertyGet "Name"
              []
              outString

getDescription2 :: PivotFilter a0
                -> IO String
getDescription2 =
  propertyGet "Description"
              []
              outString

delete238 :: PivotFilter a0
          -> IO ()
delete238 =
  method0 "Delete"
          []

getActive2 :: PivotFilter a0
           -> IO Bool
getActive2 =
  propertyGet "Active"
              []
              outBool

getPivotField4 :: PivotFilter a0
               -> IO (PivotField ())
getPivotField4 =
  propertyGet "PivotField"
              []
              outIDispatch

getDataField2 :: PivotFilter a0
              -> IO (PivotField ())
getDataField2 =
  propertyGet "DataField"
              []
              outIDispatch

getDataCubeField0 :: PivotFilter a0
                  -> IO (CubeField ())
getDataCubeField0 =
  propertyGet "DataCubeField"
              []
              outIDispatch

getValue111 :: PivotFilter a0
            -> IO a1
getValue111 =
  propertyGet "Value1"
              []
              outVariant

getValue212 :: PivotFilter a0
            -> IO a1
getValue212 =
  propertyGet "Value2"
              []
              outVariant

getMemberPropertyField0 :: PivotFilter a0
                        -> IO (PivotField ())
getMemberPropertyField0 =
  propertyGet "MemberPropertyField"
              []
              outIDispatch

getIsMemberPropertyFilter0 :: PivotFilter a0
                           -> IO Bool
getIsMemberPropertyFilter0 =
  propertyGet "IsMemberPropertyFilter"
              []
              outBool

-- --------------------------------------------------
-- 
-- dispinterface PivotFilters
-- 
-- --------------------------------------------------
data PivotFilters_ a = PivotFilters__ 
type PivotFilters a = IDispatch (PivotFilters_ a)
iidPivotFilters :: IID (PivotFilters ())
iidPivotFilters = mkIID "{00024484-0000-0000-C000-000000000046}"

queryInterface231 :: (Variant a1)
                  => GUID
                  -> PivotFilters a0
                  -> IO a1
queryInterface231 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef231 :: PivotFilters a0
          -> IO Word32
addRef231 =
  function1 "AddRef"
            []
            outWord32

release231 :: PivotFilters a0
           -> IO Word32
release231 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount231 :: PivotFilters a0
                    -> IO Word32
getTypeInfoCount231 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo231 :: (Variant a1)
               => Word32
               -> Word32
               -> PivotFilters a0
               -> IO a1
getTypeInfo231 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames231 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> PivotFilters a0
                 -> IO Int32
getIDsOfNames231 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke231 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> PivotFilters a0
          -> IO (a1, a2, Word32)
invoke231 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication489 :: (Variant a1)
                  => PivotFilters a0
                  -> IO a1
getApplication489 =
  propertyGet "Application"
              []
              outVariant

getCreator489 :: PivotFilters a0
              -> IO XlCreator
getCreator489 =
  propertyGet "Creator"
              []
              outEnum

getParent504 :: PivotFilters a0
             -> IO (IDispatch ())
getParent504 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault199 :: a1
              -> PivotFilters a0
              -> IO (PivotFilter ())
getDefault199 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum114 :: PivotFilters a0
              -> IO (IUnknown ())
getNewEnum114 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem96 :: a1
          -> PivotFilters a0
          -> IO (PivotFilter ())
getItem96 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount204 :: PivotFilters a0
            -> IO Int32
getCount204 =
  propertyGet "Count"
              []
              outInt32

add139 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
       => XlPivotFilterType
       -> a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> PivotFilters a0
       -> IO (PivotFilter ())
add139 type0 dataField value1 value2 order name description memberPropertyField =
  function1 "Add"
            [ inEnum type0
            , inVariant dataField
            , inVariant value1
            , inVariant value2
            , inVariant order
            , inVariant name
            , inVariant description
            , inVariant memberPropertyField
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface WorkbookConnection
-- 
-- --------------------------------------------------
data WorkbookConnection_ a = WorkbookConnection__ 
type WorkbookConnection a = IDispatch (WorkbookConnection_ a)
iidWorkbookConnection :: IID (WorkbookConnection ())
iidWorkbookConnection =
  mkIID "{00024485-0000-0000-C000-000000000046}"

queryInterface232 :: (Variant a1)
                  => GUID
                  -> WorkbookConnection a0
                  -> IO a1
queryInterface232 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef232 :: WorkbookConnection a0
          -> IO Word32
addRef232 =
  function1 "AddRef"
            []
            outWord32

release232 :: WorkbookConnection a0
           -> IO Word32
release232 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount232 :: WorkbookConnection a0
                    -> IO Word32
getTypeInfoCount232 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo232 :: (Variant a1)
               => Word32
               -> Word32
               -> WorkbookConnection a0
               -> IO a1
getTypeInfo232 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames232 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> WorkbookConnection a0
                 -> IO Int32
getIDsOfNames232 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke232 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> WorkbookConnection a0
          -> IO (a1, a2, Word32)
invoke232 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication490 :: (Variant a1)
                  => WorkbookConnection a0
                  -> IO a1
getApplication490 =
  propertyGet "Application"
              []
              outVariant

getCreator490 :: WorkbookConnection a0
              -> IO XlCreator
getCreator490 =
  propertyGet "Creator"
              []
              outEnum

getParent505 :: WorkbookConnection a0
             -> IO (IDispatch ())
getParent505 =
  propertyGet "Parent"
              []
              outIDispatch

getName151 :: WorkbookConnection a0
           -> IO String
getName151 =
  propertyGet "Name"
              []
              outString

setName84 :: String
          -> WorkbookConnection a0
          -> IO ()
setName84 rhs =
  propertySet "Name"
              [inString rhs]

getDescription3 :: WorkbookConnection a0
                -> IO String
getDescription3 =
  propertyGet "Description"
              []
              outString

setDescription0 :: String
                -> WorkbookConnection a0
                -> IO ()
setDescription0 rhs =
  propertySet "Description"
              [inString rhs]

getDefault200 :: WorkbookConnection a0
              -> IO String
getDefault200 =
  propertyGet "_Default"
              []
              outString

setDefault42 :: String
             -> WorkbookConnection a0
             -> IO ()
setDefault42 rhs =
  propertySet "_Default"
              [inString rhs]

getType60 :: WorkbookConnection a0
          -> IO XlConnectionType
getType60 =
  propertyGet "Type"
              []
              outEnum

getOLEDBConnection0 :: WorkbookConnection a0
                    -> IO (OLEDBConnection ())
getOLEDBConnection0 =
  propertyGet "OLEDBConnection"
              []
              outIUnknown

getODBCConnection0 :: WorkbookConnection a0
                   -> IO (ODBCConnection ())
getODBCConnection0 =
  propertyGet "ODBCConnection"
              []
              outIUnknown

getRanges0 :: WorkbookConnection a0
           -> IO (Ranges ())
getRanges0 =
  propertyGet "Ranges"
              []
              outIUnknown

delete239 :: WorkbookConnection a0
          -> IO ()
delete239 =
  method0 "Delete"
          []

refresh11 :: WorkbookConnection a0
          -> IO ()
refresh11 =
  method0 "Refresh"
          []

-- --------------------------------------------------
-- 
-- dispinterface Connections
-- 
-- --------------------------------------------------
data Connections_ a = Connections__ 
type Connections a = IDispatch (Connections_ a)
iidConnections :: IID (Connections ())
iidConnections = mkIID "{00024486-0000-0000-C000-000000000046}"

queryInterface233 :: (Variant a1)
                  => GUID
                  -> Connections a0
                  -> IO a1
queryInterface233 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef233 :: Connections a0
          -> IO Word32
addRef233 =
  function1 "AddRef"
            []
            outWord32

release233 :: Connections a0
           -> IO Word32
release233 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount233 :: Connections a0
                    -> IO Word32
getTypeInfoCount233 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo233 :: (Variant a1)
               => Word32
               -> Word32
               -> Connections a0
               -> IO a1
getTypeInfo233 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames233 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Connections a0
                 -> IO Int32
getIDsOfNames233 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke233 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Connections a0
          -> IO (a1, a2, Word32)
invoke233 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication491 :: (Variant a1)
                  => Connections a0
                  -> IO a1
getApplication491 =
  propertyGet "Application"
              []
              outVariant

getCreator491 :: Connections a0
              -> IO XlCreator
getCreator491 =
  propertyGet "Creator"
              []
              outEnum

getParent506 :: Connections a0
             -> IO (IDispatch ())
getParent506 =
  propertyGet "Parent"
              []
              outIDispatch

getCount205 :: Connections a0
            -> IO Int32
getCount205 =
  propertyGet "Count"
              []
              outInt32

addFromFile0 :: String
             -> Connections a0
             -> IO (WorkbookConnection ())
addFromFile0 filename =
  function1 "AddFromFile"
            [inString filename]
            outIDispatch

add140 :: (Variant a3)
       => String
       -> String
       -> a1
       -> a2
       -> a3
       -> Connections a0
       -> IO (WorkbookConnection ())
add140 name description connectionString commandText lCmdtype =
  function1 "Add"
            [ inString name
            , inString description
            , inVariant connectionString
            , inVariant commandText
            , inVariant lCmdtype
            ]
            outIDispatch

item103 :: a1
        -> Connections a0
        -> IO (WorkbookConnection ())
item103 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault201 :: a1
              -> Connections a0
              -> IO (WorkbookConnection ())
getDefault201 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum115 :: Connections a0
              -> IO (IUnknown ())
getNewEnum115 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface WorksheetView
-- 
-- --------------------------------------------------
data WorksheetView_ a = WorksheetView__ 
type WorksheetView a = IDispatch (WorksheetView_ a)
iidWorksheetView :: IID (WorksheetView ())
iidWorksheetView = mkIID "{00024487-0000-0000-C000-000000000046}"

queryInterface234 :: (Variant a1)
                  => GUID
                  -> WorksheetView a0
                  -> IO a1
queryInterface234 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef234 :: WorksheetView a0
          -> IO Word32
addRef234 =
  function1 "AddRef"
            []
            outWord32

release234 :: WorksheetView a0
           -> IO Word32
release234 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount234 :: WorksheetView a0
                    -> IO Word32
getTypeInfoCount234 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo234 :: (Variant a1)
               => Word32
               -> Word32
               -> WorksheetView a0
               -> IO a1
getTypeInfo234 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames234 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> WorksheetView a0
                 -> IO Int32
getIDsOfNames234 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke234 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> WorksheetView a0
          -> IO (a1, a2, Word32)
invoke234 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication492 :: (Variant a1)
                  => WorksheetView a0
                  -> IO a1
getApplication492 =
  propertyGet "Application"
              []
              outVariant

getCreator492 :: WorksheetView a0
              -> IO XlCreator
getCreator492 =
  propertyGet "Creator"
              []
              outEnum

getParent507 :: WorksheetView a0
             -> IO (IDispatch ())
getParent507 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet4 :: WorksheetView a0
          -> IO (IDispatch ())
getSheet4 =
  propertyGet "Sheet"
              []
              outIDispatch

getDisplayGridlines2 :: WorksheetView a0
                     -> IO Bool
getDisplayGridlines2 =
  propertyGet "DisplayGridlines"
              []
              outBool

setDisplayGridlines2 :: Bool
                     -> WorksheetView a0
                     -> IO ()
setDisplayGridlines2 rhs =
  propertySet "DisplayGridlines"
              [inBool rhs]

getDisplayFormulas2 :: WorksheetView a0
                    -> IO Bool
getDisplayFormulas2 =
  propertyGet "DisplayFormulas"
              []
              outBool

setDisplayFormulas2 :: Bool
                    -> WorksheetView a0
                    -> IO ()
setDisplayFormulas2 rhs =
  propertySet "DisplayFormulas"
              [inBool rhs]

getDisplayHeadings2 :: WorksheetView a0
                    -> IO Bool
getDisplayHeadings2 =
  propertyGet "DisplayHeadings"
              []
              outBool

setDisplayHeadings2 :: Bool
                    -> WorksheetView a0
                    -> IO ()
setDisplayHeadings2 rhs =
  propertySet "DisplayHeadings"
              [inBool rhs]

getDisplayOutline2 :: WorksheetView a0
                   -> IO Bool
getDisplayOutline2 =
  propertyGet "DisplayOutline"
              []
              outBool

setDisplayOutline2 :: Bool
                   -> WorksheetView a0
                   -> IO ()
setDisplayOutline2 rhs =
  propertySet "DisplayOutline"
              [inBool rhs]

getDisplayZeros2 :: WorksheetView a0
                 -> IO Bool
getDisplayZeros2 =
  propertyGet "DisplayZeros"
              []
              outBool

setDisplayZeros2 :: Bool
                 -> WorksheetView a0
                 -> IO ()
setDisplayZeros2 rhs =
  propertySet "DisplayZeros"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface ChartView
-- 
-- --------------------------------------------------
data ChartView_ a = ChartView__ 
type ChartView a = IDispatch (ChartView_ a)
iidChartView :: IID (ChartView ())
iidChartView = mkIID "{00024488-0000-0000-C000-000000000046}"

queryInterface235 :: (Variant a1)
                  => GUID
                  -> ChartView a0
                  -> IO a1
queryInterface235 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef235 :: ChartView a0
          -> IO Word32
addRef235 =
  function1 "AddRef"
            []
            outWord32

release235 :: ChartView a0
           -> IO Word32
release235 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount235 :: ChartView a0
                    -> IO Word32
getTypeInfoCount235 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo235 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartView a0
               -> IO a1
getTypeInfo235 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames235 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartView a0
                 -> IO Int32
getIDsOfNames235 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke235 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartView a0
          -> IO (a1, a2, Word32)
invoke235 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication493 :: (Variant a1)
                  => ChartView a0
                  -> IO a1
getApplication493 =
  propertyGet "Application"
              []
              outVariant

getCreator493 :: ChartView a0
              -> IO XlCreator
getCreator493 =
  propertyGet "Creator"
              []
              outEnum

getParent508 :: ChartView a0
             -> IO (IDispatch ())
getParent508 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet5 :: ChartView a0
          -> IO (IDispatch ())
getSheet5 =
  propertyGet "Sheet"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface ModuleView
-- 
-- --------------------------------------------------
data ModuleView_ a = ModuleView__ 
type ModuleView a = IDispatch (ModuleView_ a)
iidModuleView :: IID (ModuleView ())
iidModuleView = mkIID "{00024489-0000-0000-C000-000000000046}"

queryInterface236 :: (Variant a1)
                  => GUID
                  -> ModuleView a0
                  -> IO a1
queryInterface236 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef236 :: ModuleView a0
          -> IO Word32
addRef236 =
  function1 "AddRef"
            []
            outWord32

release236 :: ModuleView a0
           -> IO Word32
release236 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount236 :: ModuleView a0
                    -> IO Word32
getTypeInfoCount236 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo236 :: (Variant a1)
               => Word32
               -> Word32
               -> ModuleView a0
               -> IO a1
getTypeInfo236 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames236 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ModuleView a0
                 -> IO Int32
getIDsOfNames236 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke236 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ModuleView a0
          -> IO (a1, a2, Word32)
invoke236 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication494 :: (Variant a1)
                  => ModuleView a0
                  -> IO a1
getApplication494 =
  propertyGet "Application"
              []
              outVariant

getCreator494 :: ModuleView a0
              -> IO XlCreator
getCreator494 =
  propertyGet "Creator"
              []
              outEnum

getParent509 :: ModuleView a0
             -> IO (IDispatch ())
getParent509 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet6 :: ModuleView a0
          -> IO (IDispatch ())
getSheet6 =
  propertyGet "Sheet"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface DialogSheetView
-- 
-- --------------------------------------------------
data DialogSheetView_ a = DialogSheetView__ 
type DialogSheetView a = IDispatch (DialogSheetView_ a)
iidDialogSheetView :: IID (DialogSheetView ())
iidDialogSheetView = mkIID "{0002448A-0000-0000-C000-000000000046}"

queryInterface237 :: (Variant a1)
                  => GUID
                  -> DialogSheetView a0
                  -> IO a1
queryInterface237 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef237 :: DialogSheetView a0
          -> IO Word32
addRef237 =
  function1 "AddRef"
            []
            outWord32

release237 :: DialogSheetView a0
           -> IO Word32
release237 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount237 :: DialogSheetView a0
                    -> IO Word32
getTypeInfoCount237 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo237 :: (Variant a1)
               => Word32
               -> Word32
               -> DialogSheetView a0
               -> IO a1
getTypeInfo237 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames237 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> DialogSheetView a0
                 -> IO Int32
getIDsOfNames237 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke237 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> DialogSheetView a0
          -> IO (a1, a2, Word32)
invoke237 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication495 :: (Variant a1)
                  => DialogSheetView a0
                  -> IO a1
getApplication495 =
  propertyGet "Application"
              []
              outVariant

getCreator495 :: DialogSheetView a0
              -> IO XlCreator
getCreator495 =
  propertyGet "Creator"
              []
              outEnum

getParent510 :: DialogSheetView a0
             -> IO (IDispatch ())
getParent510 =
  propertyGet "Parent"
              []
              outIDispatch

getSheet7 :: DialogSheetView a0
          -> IO (IDispatch ())
getSheet7 =
  propertyGet "Sheet"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface SheetViews
-- 
-- --------------------------------------------------
data SheetViews_ a = SheetViews__ 
type SheetViews a = IDispatch (SheetViews_ a)
iidSheetViews :: IID (SheetViews ())
iidSheetViews = mkIID "{0002448C-0000-0000-C000-000000000046}"

queryInterface238 :: (Variant a1)
                  => GUID
                  -> SheetViews a0
                  -> IO a1
queryInterface238 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef238 :: SheetViews a0
          -> IO Word32
addRef238 =
  function1 "AddRef"
            []
            outWord32

release238 :: SheetViews a0
           -> IO Word32
release238 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount238 :: SheetViews a0
                    -> IO Word32
getTypeInfoCount238 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo238 :: (Variant a1)
               => Word32
               -> Word32
               -> SheetViews a0
               -> IO a1
getTypeInfo238 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames238 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SheetViews a0
                 -> IO Int32
getIDsOfNames238 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke238 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SheetViews a0
          -> IO (a1, a2, Word32)
invoke238 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication496 :: (Variant a1)
                  => SheetViews a0
                  -> IO a1
getApplication496 =
  propertyGet "Application"
              []
              outVariant

getCreator496 :: SheetViews a0
              -> IO XlCreator
getCreator496 =
  propertyGet "Creator"
              []
              outEnum

getParent511 :: SheetViews a0
             -> IO (IDispatch ())
getParent511 =
  propertyGet "Parent"
              []
              outIDispatch

getCount206 :: SheetViews a0
            -> IO Int32
getCount206 =
  propertyGet "Count"
              []
              outInt32

newEnum82 :: SheetViews a0
          -> IO (IUnknown ())
newEnum82 =
  function1 "_NewEnum"
            []
            outIUnknown

getItem97 :: a1
          -> SheetViews a0
          -> IO (IDispatch ())
getItem97 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getDefault202 :: a1
              -> SheetViews a0
              -> IO (IDispatch ())
getDefault202 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface OLEDBConnection
-- 
-- --------------------------------------------------
data OLEDBConnection_ a = OLEDBConnection__ 
type OLEDBConnection a = IDispatch (OLEDBConnection_ a)
iidOLEDBConnection :: IID (OLEDBConnection ())
iidOLEDBConnection = mkIID "{0002448D-0000-0000-C000-000000000046}"

queryInterface239 :: (Variant a1)
                  => GUID
                  -> OLEDBConnection a0
                  -> IO a1
queryInterface239 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef239 :: OLEDBConnection a0
          -> IO Word32
addRef239 =
  function1 "AddRef"
            []
            outWord32

release239 :: OLEDBConnection a0
           -> IO Word32
release239 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount239 :: OLEDBConnection a0
                    -> IO Word32
getTypeInfoCount239 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo239 :: (Variant a1)
               => Word32
               -> Word32
               -> OLEDBConnection a0
               -> IO a1
getTypeInfo239 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames239 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> OLEDBConnection a0
                 -> IO Int32
getIDsOfNames239 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke239 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> OLEDBConnection a0
          -> IO (a1, a2, Word32)
invoke239 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication497 :: (Variant a1)
                  => OLEDBConnection a0
                  -> IO a1
getApplication497 =
  propertyGet "Application"
              []
              outVariant

getCreator497 :: OLEDBConnection a0
              -> IO XlCreator
getCreator497 =
  propertyGet "Creator"
              []
              outEnum

getParent512 :: OLEDBConnection a0
             -> IO (IDispatch ())
getParent512 =
  propertyGet "Parent"
              []
              outIDispatch

getADOConnection2 :: OLEDBConnection a0
                  -> IO (IDispatch ())
getADOConnection2 =
  propertyGet "ADOConnection"
              []
              outIDispatch

getBackgroundQuery5 :: OLEDBConnection a0
                    -> IO Bool
getBackgroundQuery5 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery5 :: Bool
                    -> OLEDBConnection a0
                    -> IO ()
setBackgroundQuery5 rhs =
  propertySet "BackgroundQuery"
              [inBool rhs]

cancelRefresh3 :: OLEDBConnection a0
               -> IO ()
cancelRefresh3 =
  method0 "CancelRefresh"
          []

getCommandText5 :: OLEDBConnection a0
                -> IO a1
getCommandText5 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText5 :: a1
                -> OLEDBConnection a0
                -> IO ()
setCommandText5 rhs =
  propertySet "CommandText"
              [inVariant rhs]

getCommandType5 :: OLEDBConnection a0
                -> IO XlCmdType
getCommandType5 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType5 :: XlCmdType
                -> OLEDBConnection a0
                -> IO ()
setCommandType5 rhs =
  propertySet "CommandType"
              [inEnum rhs]

getConnection5 :: OLEDBConnection a0
               -> IO a1
getConnection5 =
  propertyGet "Connection"
              []
              outVariant

setConnection5 :: a1
               -> OLEDBConnection a0
               -> IO ()
setConnection5 rhs =
  propertySet "Connection"
              [inVariant rhs]

getEnableRefresh5 :: OLEDBConnection a0
                  -> IO Bool
getEnableRefresh5 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh5 :: Bool
                  -> OLEDBConnection a0
                  -> IO ()
setEnableRefresh5 rhs =
  propertySet "EnableRefresh"
              [inBool rhs]

getLocalConnection2 :: OLEDBConnection a0
                    -> IO a1
getLocalConnection2 =
  propertyGet "LocalConnection"
              []
              outVariant

setLocalConnection2 :: a1
                    -> OLEDBConnection a0
                    -> IO ()
setLocalConnection2 rhs =
  propertySet "LocalConnection"
              [inVariant rhs]

getMaintainConnection4 :: OLEDBConnection a0
                       -> IO Bool
getMaintainConnection4 =
  propertyGet "MaintainConnection"
              []
              outBool

setMaintainConnection4 :: Bool
                       -> OLEDBConnection a0
                       -> IO ()
setMaintainConnection4 rhs =
  propertySet "MaintainConnection"
              [inBool rhs]

makeConnection2 :: OLEDBConnection a0
                -> IO ()
makeConnection2 =
  method0 "MakeConnection"
          []

refresh12 :: OLEDBConnection a0
          -> IO ()
refresh12 =
  method0 "Refresh"
          []

getRefreshDate5 :: OLEDBConnection a0
                -> IO Int64
getRefreshDate5 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshing3 :: OLEDBConnection a0
               -> IO Bool
getRefreshing3 =
  propertyGet "Refreshing"
              []
              outBool

getRefreshOnFileOpen5 :: OLEDBConnection a0
                      -> IO Bool
getRefreshOnFileOpen5 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen5 :: Bool
                      -> OLEDBConnection a0
                      -> IO ()
setRefreshOnFileOpen5 rhs =
  propertySet "RefreshOnFileOpen"
              [inBool rhs]

getRefreshPeriod5 :: OLEDBConnection a0
                  -> IO Int32
getRefreshPeriod5 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod5 :: Int32
                  -> OLEDBConnection a0
                  -> IO ()
setRefreshPeriod5 rhs =
  propertySet "RefreshPeriod"
              [inInt32 rhs]

getRobustConnect5 :: OLEDBConnection a0
                  -> IO XlRobustConnect
getRobustConnect5 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect5 :: XlRobustConnect
                  -> OLEDBConnection a0
                  -> IO ()
setRobustConnect5 rhs =
  propertySet "RobustConnect"
              [inEnum rhs]

saveAsODC5 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> OLEDBConnection a0
           -> IO ()
saveAsODC5 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getSavePassword5 :: OLEDBConnection a0
                 -> IO Bool
getSavePassword5 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword5 :: Bool
                 -> OLEDBConnection a0
                 -> IO ()
setSavePassword5 rhs =
  propertySet "SavePassword"
              [inBool rhs]

getSourceConnectionFile5 :: OLEDBConnection a0
                         -> IO String
getSourceConnectionFile5 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile5 :: String
                         -> OLEDBConnection a0
                         -> IO ()
setSourceConnectionFile5 rhs =
  propertySet "SourceConnectionFile"
              [inString rhs]

getSourceDataFile5 :: OLEDBConnection a0
                   -> IO String
getSourceDataFile5 =
  propertyGet "SourceDataFile"
              []
              outString

setSourceDataFile3 :: String
                   -> OLEDBConnection a0
                   -> IO ()
setSourceDataFile3 rhs =
  propertySet "SourceDataFile"
              [inString rhs]

getOLAP2 :: OLEDBConnection a0
         -> IO Bool
getOLAP2 =
  propertyGet "OLAP"
              []
              outBool

getUseLocalConnection2 :: OLEDBConnection a0
                       -> IO Bool
getUseLocalConnection2 =
  propertyGet "UseLocalConnection"
              []
              outBool

setUseLocalConnection2 :: Bool
                       -> OLEDBConnection a0
                       -> IO ()
setUseLocalConnection2 rhs =
  propertySet "UseLocalConnection"
              [inBool rhs]

getMaxDrillthroughRecords0 :: OLEDBConnection a0
                           -> IO Int32
getMaxDrillthroughRecords0 =
  propertyGet "MaxDrillthroughRecords"
              []
              outInt32

setMaxDrillthroughRecords0 :: Int32
                           -> OLEDBConnection a0
                           -> IO ()
setMaxDrillthroughRecords0 rhs =
  propertySet "MaxDrillthroughRecords"
              [inInt32 rhs]

getIsConnected2 :: OLEDBConnection a0
                -> IO Bool
getIsConnected2 =
  propertyGet "IsConnected"
              []
              outBool

getServerCredentialsMethod1 :: OLEDBConnection a0
                            -> IO XlCredentialsMethod
getServerCredentialsMethod1 =
  propertyGet "ServerCredentialsMethod"
              []
              outEnum

setServerCredentialsMethod1 :: XlCredentialsMethod
                            -> OLEDBConnection a0
                            -> IO ()
setServerCredentialsMethod1 rhs =
  propertySet "ServerCredentialsMethod"
              [inEnum rhs]

getServerSSOApplicationID1 :: OLEDBConnection a0
                           -> IO String
getServerSSOApplicationID1 =
  propertyGet "ServerSSOApplicationID"
              []
              outString

setServerSSOApplicationID1 :: String
                           -> OLEDBConnection a0
                           -> IO ()
setServerSSOApplicationID1 rhs =
  propertySet "ServerSSOApplicationID"
              [inString rhs]

getAlwaysUseConnectionFile1 :: OLEDBConnection a0
                            -> IO Bool
getAlwaysUseConnectionFile1 =
  propertyGet "AlwaysUseConnectionFile"
              []
              outBool

setAlwaysUseConnectionFile1 :: Bool
                            -> OLEDBConnection a0
                            -> IO ()
setAlwaysUseConnectionFile1 rhs =
  propertySet "AlwaysUseConnectionFile"
              [inBool rhs]

getServerFillColor0 :: OLEDBConnection a0
                    -> IO Bool
getServerFillColor0 =
  propertyGet "ServerFillColor"
              []
              outBool

setServerFillColor0 :: Bool
                    -> OLEDBConnection a0
                    -> IO ()
setServerFillColor0 rhs =
  propertySet "ServerFillColor"
              [inBool rhs]

getServerFontStyle0 :: OLEDBConnection a0
                    -> IO Bool
getServerFontStyle0 =
  propertyGet "ServerFontStyle"
              []
              outBool

setServerFontStyle0 :: Bool
                    -> OLEDBConnection a0
                    -> IO ()
setServerFontStyle0 rhs =
  propertySet "ServerFontStyle"
              [inBool rhs]

getServerNumberFormat0 :: OLEDBConnection a0
                       -> IO Bool
getServerNumberFormat0 =
  propertyGet "ServerNumberFormat"
              []
              outBool

setServerNumberFormat0 :: Bool
                       -> OLEDBConnection a0
                       -> IO ()
setServerNumberFormat0 rhs =
  propertySet "ServerNumberFormat"
              [inBool rhs]

getServerTextColor0 :: OLEDBConnection a0
                    -> IO Bool
getServerTextColor0 =
  propertyGet "ServerTextColor"
              []
              outBool

setServerTextColor0 :: Bool
                    -> OLEDBConnection a0
                    -> IO ()
setServerTextColor0 rhs =
  propertySet "ServerTextColor"
              [inBool rhs]

getRetrieveInOfficeUILang0 :: OLEDBConnection a0
                           -> IO Bool
getRetrieveInOfficeUILang0 =
  propertyGet "RetrieveInOfficeUILang"
              []
              outBool

setRetrieveInOfficeUILang0 :: Bool
                           -> OLEDBConnection a0
                           -> IO ()
setRetrieveInOfficeUILang0 rhs =
  propertySet "RetrieveInOfficeUILang"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface ODBCConnection
-- 
-- --------------------------------------------------
data ODBCConnection_ a = ODBCConnection__ 
type ODBCConnection a = IDispatch (ODBCConnection_ a)
iidODBCConnection :: IID (ODBCConnection ())
iidODBCConnection = mkIID "{0002448E-0000-0000-C000-000000000046}"

queryInterface240 :: (Variant a1)
                  => GUID
                  -> ODBCConnection a0
                  -> IO a1
queryInterface240 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef240 :: ODBCConnection a0
          -> IO Word32
addRef240 =
  function1 "AddRef"
            []
            outWord32

release240 :: ODBCConnection a0
           -> IO Word32
release240 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount240 :: ODBCConnection a0
                    -> IO Word32
getTypeInfoCount240 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo240 :: (Variant a1)
               => Word32
               -> Word32
               -> ODBCConnection a0
               -> IO a1
getTypeInfo240 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames240 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ODBCConnection a0
                 -> IO Int32
getIDsOfNames240 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke240 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ODBCConnection a0
          -> IO (a1, a2, Word32)
invoke240 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication498 :: (Variant a1)
                  => ODBCConnection a0
                  -> IO a1
getApplication498 =
  propertyGet "Application"
              []
              outVariant

getCreator498 :: ODBCConnection a0
              -> IO XlCreator
getCreator498 =
  propertyGet "Creator"
              []
              outEnum

getParent513 :: ODBCConnection a0
             -> IO (IDispatch ())
getParent513 =
  propertyGet "Parent"
              []
              outIDispatch

getBackgroundQuery6 :: ODBCConnection a0
                    -> IO Bool
getBackgroundQuery6 =
  propertyGet "BackgroundQuery"
              []
              outBool

setBackgroundQuery6 :: Bool
                    -> ODBCConnection a0
                    -> IO ()
setBackgroundQuery6 rhs =
  propertySet "BackgroundQuery"
              [inBool rhs]

cancelRefresh4 :: ODBCConnection a0
               -> IO ()
cancelRefresh4 =
  method0 "CancelRefresh"
          []

getCommandText6 :: ODBCConnection a0
                -> IO a1
getCommandText6 =
  propertyGet "CommandText"
              []
              outVariant

setCommandText6 :: a1
                -> ODBCConnection a0
                -> IO ()
setCommandText6 rhs =
  propertySet "CommandText"
              [inVariant rhs]

getCommandType6 :: ODBCConnection a0
                -> IO XlCmdType
getCommandType6 =
  propertyGet "CommandType"
              []
              outEnum

setCommandType6 :: XlCmdType
                -> ODBCConnection a0
                -> IO ()
setCommandType6 rhs =
  propertySet "CommandType"
              [inEnum rhs]

getConnection6 :: ODBCConnection a0
               -> IO a1
getConnection6 =
  propertyGet "Connection"
              []
              outVariant

setConnection6 :: a1
               -> ODBCConnection a0
               -> IO ()
setConnection6 rhs =
  propertySet "Connection"
              [inVariant rhs]

getEnableRefresh6 :: ODBCConnection a0
                  -> IO Bool
getEnableRefresh6 =
  propertyGet "EnableRefresh"
              []
              outBool

setEnableRefresh6 :: Bool
                  -> ODBCConnection a0
                  -> IO ()
setEnableRefresh6 rhs =
  propertySet "EnableRefresh"
              [inBool rhs]

refresh13 :: ODBCConnection a0
          -> IO ()
refresh13 =
  method0 "Refresh"
          []

getRefreshDate6 :: ODBCConnection a0
                -> IO Int64
getRefreshDate6 =
  propertyGet "RefreshDate"
              []
              outDate

getRefreshing4 :: ODBCConnection a0
               -> IO Bool
getRefreshing4 =
  propertyGet "Refreshing"
              []
              outBool

getRefreshOnFileOpen6 :: ODBCConnection a0
                      -> IO Bool
getRefreshOnFileOpen6 =
  propertyGet "RefreshOnFileOpen"
              []
              outBool

setRefreshOnFileOpen6 :: Bool
                      -> ODBCConnection a0
                      -> IO ()
setRefreshOnFileOpen6 rhs =
  propertySet "RefreshOnFileOpen"
              [inBool rhs]

getRefreshPeriod6 :: ODBCConnection a0
                  -> IO Int32
getRefreshPeriod6 =
  propertyGet "RefreshPeriod"
              []
              outInt32

setRefreshPeriod6 :: Int32
                  -> ODBCConnection a0
                  -> IO ()
setRefreshPeriod6 rhs =
  propertySet "RefreshPeriod"
              [inInt32 rhs]

getRobustConnect6 :: ODBCConnection a0
                  -> IO XlRobustConnect
getRobustConnect6 =
  propertyGet "RobustConnect"
              []
              outEnum

setRobustConnect6 :: XlRobustConnect
                  -> ODBCConnection a0
                  -> IO ()
setRobustConnect6 rhs =
  propertySet "RobustConnect"
              [inEnum rhs]

saveAsODC6 :: (Variant a1, Variant a2)
           => String
           -> a1
           -> a2
           -> ODBCConnection a0
           -> IO ()
saveAsODC6 oDCFileName description keywords =
  method0 "SaveAsODC"
          [ inString oDCFileName
          , inVariant description
          , inVariant keywords
          ]

getSavePassword6 :: ODBCConnection a0
                 -> IO Bool
getSavePassword6 =
  propertyGet "SavePassword"
              []
              outBool

setSavePassword6 :: Bool
                 -> ODBCConnection a0
                 -> IO ()
setSavePassword6 rhs =
  propertySet "SavePassword"
              [inBool rhs]

getSourceConnectionFile6 :: ODBCConnection a0
                         -> IO String
getSourceConnectionFile6 =
  propertyGet "SourceConnectionFile"
              []
              outString

setSourceConnectionFile6 :: String
                         -> ODBCConnection a0
                         -> IO ()
setSourceConnectionFile6 rhs =
  propertySet "SourceConnectionFile"
              [inString rhs]

getSourceData4 :: ODBCConnection a0
               -> IO a1
getSourceData4 =
  propertyGet "SourceData"
              []
              outVariant

setSourceData5 :: a1
               -> ODBCConnection a0
               -> IO ()
setSourceData5 rhs =
  propertySet "SourceData"
              [inVariant rhs]

getSourceDataFile6 :: ODBCConnection a0
                   -> IO String
getSourceDataFile6 =
  propertyGet "SourceDataFile"
              []
              outString

setSourceDataFile4 :: String
                   -> ODBCConnection a0
                   -> IO ()
setSourceDataFile4 rhs =
  propertySet "SourceDataFile"
              [inString rhs]

getServerCredentialsMethod2 :: ODBCConnection a0
                            -> IO XlCredentialsMethod
getServerCredentialsMethod2 =
  propertyGet "ServerCredentialsMethod"
              []
              outEnum

setServerCredentialsMethod2 :: XlCredentialsMethod
                            -> ODBCConnection a0
                            -> IO ()
setServerCredentialsMethod2 rhs =
  propertySet "ServerCredentialsMethod"
              [inEnum rhs]

getServerSSOApplicationID2 :: ODBCConnection a0
                           -> IO String
getServerSSOApplicationID2 =
  propertyGet "ServerSSOApplicationID"
              []
              outString

setServerSSOApplicationID2 :: String
                           -> ODBCConnection a0
                           -> IO ()
setServerSSOApplicationID2 rhs =
  propertySet "ServerSSOApplicationID"
              [inString rhs]

getAlwaysUseConnectionFile2 :: ODBCConnection a0
                            -> IO Bool
getAlwaysUseConnectionFile2 =
  propertyGet "AlwaysUseConnectionFile"
              []
              outBool

setAlwaysUseConnectionFile2 :: Bool
                            -> ODBCConnection a0
                            -> IO ()
setAlwaysUseConnectionFile2 rhs =
  propertySet "AlwaysUseConnectionFile"
              [inBool rhs]

-- --------------------------------------------------
-- 
-- dispinterface Action
-- 
-- --------------------------------------------------
data Action_ a = Action__ 
type Action a = IDispatch (Action_ a)
iidAction :: IID (Action ())
iidAction = mkIID "{0002448F-0000-0000-C000-000000000046}"

queryInterface241 :: (Variant a1)
                  => GUID
                  -> Action a0
                  -> IO a1
queryInterface241 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef241 :: Action a0
          -> IO Word32
addRef241 =
  function1 "AddRef"
            []
            outWord32

release241 :: Action a0
           -> IO Word32
release241 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount241 :: Action a0
                    -> IO Word32
getTypeInfoCount241 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo241 :: (Variant a1)
               => Word32
               -> Word32
               -> Action a0
               -> IO a1
getTypeInfo241 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames241 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Action a0
                 -> IO Int32
getIDsOfNames241 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke241 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Action a0
          -> IO (a1, a2, Word32)
invoke241 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication499 :: (Variant a1)
                  => Action a0
                  -> IO a1
getApplication499 =
  propertyGet "Application"
              []
              outVariant

getCreator499 :: Action a0
              -> IO XlCreator
getCreator499 =
  propertyGet "Creator"
              []
              outEnum

getParent514 :: Action a0
             -> IO (IDispatch ())
getParent514 =
  propertyGet "Parent"
              []
              outIDispatch

getName152 :: Action a0
           -> IO String
getName152 =
  propertyGet "Name"
              []
              outString

getCaption77 :: Action a0
             -> IO String
getCaption77 =
  propertyGet "Caption"
              []
              outString

getType61 :: Action a0
          -> IO XlActionType
getType61 =
  propertyGet "Type"
              []
              outEnum

getCoordinate0 :: Action a0
               -> IO String
getCoordinate0 =
  propertyGet "Coordinate"
              []
              outString

getContent0 :: Action a0
            -> IO String
getContent0 =
  propertyGet "Content"
              []
              outString

execute2 :: Action a0
         -> IO ()
execute2 =
  method0 "Execute"
          []

-- --------------------------------------------------
-- 
-- dispinterface Actions
-- 
-- --------------------------------------------------
data Actions_ a = Actions__ 
type Actions a = IDispatch (Actions_ a)
iidActions :: IID (Actions ())
iidActions = mkIID "{00024490-0000-0000-C000-000000000046}"

queryInterface242 :: (Variant a1)
                  => GUID
                  -> Actions a0
                  -> IO a1
queryInterface242 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef242 :: Actions a0
          -> IO Word32
addRef242 =
  function1 "AddRef"
            []
            outWord32

release242 :: Actions a0
           -> IO Word32
release242 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount242 :: Actions a0
                    -> IO Word32
getTypeInfoCount242 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo242 :: (Variant a1)
               => Word32
               -> Word32
               -> Actions a0
               -> IO a1
getTypeInfo242 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames242 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Actions a0
                 -> IO Int32
getIDsOfNames242 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke242 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Actions a0
          -> IO (a1, a2, Word32)
invoke242 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication500 :: (Variant a1)
                  => Actions a0
                  -> IO a1
getApplication500 =
  propertyGet "Application"
              []
              outVariant

getCreator500 :: Actions a0
              -> IO XlCreator
getCreator500 =
  propertyGet "Creator"
              []
              outEnum

getParent515 :: Actions a0
             -> IO (IDispatch ())
getParent515 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault203 :: a1
              -> Actions a0
              -> IO (Action ())
getDefault203 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum116 :: Actions a0
              -> IO (IUnknown ())
getNewEnum116 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem98 :: a1
          -> Actions a0
          -> IO (Action ())
getItem98 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount207 :: Actions a0
            -> IO Int32
getCount207 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface FormatColor
-- 
-- --------------------------------------------------
data FormatColor_ a = FormatColor__ 
type FormatColor a = IDispatch (FormatColor_ a)
iidFormatColor :: IID (FormatColor ())
iidFormatColor = mkIID "{00024491-0000-0000-C000-000000000046}"

queryInterface243 :: (Variant a1)
                  => GUID
                  -> FormatColor a0
                  -> IO a1
queryInterface243 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef243 :: FormatColor a0
          -> IO Word32
addRef243 =
  function1 "AddRef"
            []
            outWord32

release243 :: FormatColor a0
           -> IO Word32
release243 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount243 :: FormatColor a0
                    -> IO Word32
getTypeInfoCount243 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo243 :: (Variant a1)
               => Word32
               -> Word32
               -> FormatColor a0
               -> IO a1
getTypeInfo243 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames243 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> FormatColor a0
                 -> IO Int32
getIDsOfNames243 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke243 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> FormatColor a0
          -> IO (a1, a2, Word32)
invoke243 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication501 :: (Variant a1)
                  => FormatColor a0
                  -> IO a1
getApplication501 =
  propertyGet "Application"
              []
              outVariant

getCreator501 :: FormatColor a0
              -> IO XlCreator
getCreator501 =
  propertyGet "Creator"
              []
              outEnum

getParent516 :: FormatColor a0
             -> IO (IDispatch ())
getParent516 =
  propertyGet "Parent"
              []
              outIDispatch

getColor11 :: FormatColor a0
           -> IO a1
getColor11 =
  propertyGet "Color"
              []
              outVariant

setColor11 :: a1
           -> FormatColor a0
           -> IO ()
setColor11 rhs =
  propertySet "Color"
              [inVariant rhs]

getColorIndex10 :: FormatColor a0
                -> IO XlColorIndex
getColorIndex10 =
  propertyGet "ColorIndex"
              []
              outEnum

setColorIndex10 :: XlColorIndex
                -> FormatColor a0
                -> IO ()
setColorIndex10 rhs =
  propertySet "ColorIndex"
              [inEnum rhs]

getThemeColor11 :: FormatColor a0
                -> IO a1
getThemeColor11 =
  propertyGet "ThemeColor"
              []
              outVariant

setThemeColor11 :: a1
                -> FormatColor a0
                -> IO ()
setThemeColor11 rhs =
  propertySet "ThemeColor"
              [inVariant rhs]

getTintAndShade12 :: FormatColor a0
                  -> IO a1
getTintAndShade12 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade12 :: a1
                  -> FormatColor a0
                  -> IO ()
setTintAndShade12 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

-- --------------------------------------------------
-- 
-- dispinterface ConditionValue
-- 
-- --------------------------------------------------
data ConditionValue_ a = ConditionValue__ 
type ConditionValue a = IDispatch (ConditionValue_ a)
iidConditionValue :: IID (ConditionValue ())
iidConditionValue = mkIID "{00024492-0000-0000-C000-000000000046}"

queryInterface244 :: (Variant a1)
                  => GUID
                  -> ConditionValue a0
                  -> IO a1
queryInterface244 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef244 :: ConditionValue a0
          -> IO Word32
addRef244 =
  function1 "AddRef"
            []
            outWord32

release244 :: ConditionValue a0
           -> IO Word32
release244 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount244 :: ConditionValue a0
                    -> IO Word32
getTypeInfoCount244 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo244 :: (Variant a1)
               => Word32
               -> Word32
               -> ConditionValue a0
               -> IO a1
getTypeInfo244 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames244 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ConditionValue a0
                 -> IO Int32
getIDsOfNames244 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke244 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ConditionValue a0
          -> IO (a1, a2, Word32)
invoke244 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication502 :: (Variant a1)
                  => ConditionValue a0
                  -> IO a1
getApplication502 =
  propertyGet "Application"
              []
              outVariant

getCreator502 :: ConditionValue a0
              -> IO XlCreator
getCreator502 =
  propertyGet "Creator"
              []
              outEnum

getParent517 :: ConditionValue a0
             -> IO (IDispatch ())
getParent517 =
  propertyGet "Parent"
              []
              outIDispatch

modify6 :: (Variant a1)
        => XlConditionValueTypes
        -> a1
        -> ConditionValue a0
        -> IO ()
modify6 newtype0 newvalue =
  method0 "Modify"
          [ inEnum newtype0
          , inVariant newvalue
          ]

getType62 :: ConditionValue a0
          -> IO XlConditionValueTypes
getType62 =
  propertyGet "Type"
              []
              outEnum

getValue61 :: ConditionValue a0
           -> IO a1
getValue61 =
  propertyGet "Value"
              []
              outVariant

-- --------------------------------------------------
-- 
-- dispinterface ColorScale
-- 
-- --------------------------------------------------
data ColorScale_ a = ColorScale__ 
type ColorScale a = IDispatch (ColorScale_ a)
iidColorScale :: IID (ColorScale ())
iidColorScale = mkIID "{00024493-0000-0000-C000-000000000046}"

queryInterface245 :: (Variant a1)
                  => GUID
                  -> ColorScale a0
                  -> IO a1
queryInterface245 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef245 :: ColorScale a0
          -> IO Word32
addRef245 =
  function1 "AddRef"
            []
            outWord32

release245 :: ColorScale a0
           -> IO Word32
release245 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount245 :: ColorScale a0
                    -> IO Word32
getTypeInfoCount245 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo245 :: (Variant a1)
               => Word32
               -> Word32
               -> ColorScale a0
               -> IO a1
getTypeInfo245 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames245 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ColorScale a0
                 -> IO Int32
getIDsOfNames245 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke245 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ColorScale a0
          -> IO (a1, a2, Word32)
invoke245 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication503 :: (Variant a1)
                  => ColorScale a0
                  -> IO a1
getApplication503 =
  propertyGet "Application"
              []
              outVariant

getCreator503 :: ColorScale a0
              -> IO XlCreator
getCreator503 =
  propertyGet "Creator"
              []
              outEnum

getParent518 :: ColorScale a0
             -> IO (IDispatch ())
getParent518 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority8 :: ColorScale a0
             -> IO Int32
getPriority8 =
  propertyGet "Priority"
              []
              outInt32

setPriority8 :: Int32
             -> ColorScale a0
             -> IO ()
setPriority8 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue7 :: ColorScale a0
               -> IO Bool
getStopIfTrue7 =
  propertyGet "StopIfTrue"
              []
              outBool

getAppliesTo7 :: ColorScale a0
              -> IO (Range ())
getAppliesTo7 =
  propertyGet "AppliesTo"
              []
              outIDispatch

getFormula46 :: ColorScale a0
             -> IO String
getFormula46 =
  propertyGet "Formula"
              []
              outString

setFormula40 :: String
             -> ColorScale a0
             -> IO ()
setFormula40 rhs =
  propertySet "Formula"
              [inString rhs]

getType63 :: ColorScale a0
          -> IO Int32
getType63 =
  propertyGet "Type"
              []
              outInt32

setFirstPriority7 :: ColorScale a0
                  -> IO ()
setFirstPriority7 =
  method0 "SetFirstPriority"
          []

setLastPriority7 :: ColorScale a0
                 -> IO ()
setLastPriority7 =
  method0 "SetLastPriority"
          []

delete240 :: ColorScale a0
          -> IO ()
delete240 =
  method0 "Delete"
          []

modifyAppliesToRange7 :: Range a1
                      -> ColorScale a0
                      -> IO ()
modifyAppliesToRange7 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

getPTCondition7 :: ColorScale a0
                -> IO Bool
getPTCondition7 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType7 :: ColorScale a0
              -> IO XlPivotConditionScope
getScopeType7 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType7 :: XlPivotConditionScope
              -> ColorScale a0
              -> IO ()
setScopeType7 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

getColorScaleCriteria0 :: ColorScale a0
                       -> IO (ColorScaleCriteria ())
getColorScaleCriteria0 =
  propertyGet "ColorScaleCriteria"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ColorScaleCriteria
-- 
-- --------------------------------------------------
data ColorScaleCriteria_ a = ColorScaleCriteria__ 
type ColorScaleCriteria a = IDispatch (ColorScaleCriteria_ a)
iidColorScaleCriteria :: IID (ColorScaleCriteria ())
iidColorScaleCriteria =
  mkIID "{00024494-0000-0000-C000-000000000046}"

queryInterface246 :: (Variant a1)
                  => GUID
                  -> ColorScaleCriteria a0
                  -> IO a1
queryInterface246 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef246 :: ColorScaleCriteria a0
          -> IO Word32
addRef246 =
  function1 "AddRef"
            []
            outWord32

release246 :: ColorScaleCriteria a0
           -> IO Word32
release246 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount246 :: ColorScaleCriteria a0
                    -> IO Word32
getTypeInfoCount246 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo246 :: (Variant a1)
               => Word32
               -> Word32
               -> ColorScaleCriteria a0
               -> IO a1
getTypeInfo246 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames246 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ColorScaleCriteria a0
                 -> IO Int32
getIDsOfNames246 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke246 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ColorScaleCriteria a0
          -> IO (a1, a2, Word32)
invoke246 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getCount208 :: ColorScaleCriteria a0
            -> IO Int32
getCount208 =
  propertyGet "Count"
              []
              outInt32

getDefault204 :: a1
              -> ColorScaleCriteria a0
              -> IO (ColorScaleCriterion ())
getDefault204 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum117 :: ColorScaleCriteria a0
              -> IO (IUnknown ())
getNewEnum117 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem99 :: a1
          -> ColorScaleCriteria a0
          -> IO (ColorScaleCriterion ())
getItem99 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ColorScaleCriterion
-- 
-- --------------------------------------------------
data ColorScaleCriterion_ a = ColorScaleCriterion__ 
type ColorScaleCriterion a = IDispatch (ColorScaleCriterion_ a)
iidColorScaleCriterion :: IID (ColorScaleCriterion ())
iidColorScaleCriterion =
  mkIID "{00024495-0000-0000-C000-000000000046}"

queryInterface247 :: (Variant a1)
                  => GUID
                  -> ColorScaleCriterion a0
                  -> IO a1
queryInterface247 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef247 :: ColorScaleCriterion a0
          -> IO Word32
addRef247 =
  function1 "AddRef"
            []
            outWord32

release247 :: ColorScaleCriterion a0
           -> IO Word32
release247 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount247 :: ColorScaleCriterion a0
                    -> IO Word32
getTypeInfoCount247 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo247 :: (Variant a1)
               => Word32
               -> Word32
               -> ColorScaleCriterion a0
               -> IO a1
getTypeInfo247 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames247 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ColorScaleCriterion a0
                 -> IO Int32
getIDsOfNames247 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke247 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ColorScaleCriterion a0
          -> IO (a1, a2, Word32)
invoke247 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getIndex78 :: ColorScaleCriterion a0
           -> IO Int32
getIndex78 =
  propertyGet "Index"
              []
              outInt32

getType64 :: ColorScaleCriterion a0
          -> IO XlConditionValueTypes
getType64 =
  propertyGet "Type"
              []
              outEnum

setType22 :: XlConditionValueTypes
          -> ColorScaleCriterion a0
          -> IO ()
setType22 rhs =
  propertySet "Type"
              [inEnum rhs]

getValue62 :: ColorScaleCriterion a0
           -> IO a1
getValue62 =
  propertyGet "Value"
              []
              outVariant

setValue49 :: a1
           -> ColorScaleCriterion a0
           -> IO ()
setValue49 rhs =
  propertySet "Value"
              [inVariant rhs]

getFormatColor0 :: ColorScaleCriterion a0
                -> IO (FormatColor ())
getFormatColor0 =
  propertyGet "FormatColor"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Databar
-- 
-- --------------------------------------------------
data Databar_ a = Databar__ 
type Databar a = IDispatch (Databar_ a)
iidDatabar :: IID (Databar ())
iidDatabar = mkIID "{00024496-0000-0000-C000-000000000046}"

queryInterface248 :: (Variant a1)
                  => GUID
                  -> Databar a0
                  -> IO a1
queryInterface248 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef248 :: Databar a0
          -> IO Word32
addRef248 =
  function1 "AddRef"
            []
            outWord32

release248 :: Databar a0
           -> IO Word32
release248 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount248 :: Databar a0
                    -> IO Word32
getTypeInfoCount248 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo248 :: (Variant a1)
               => Word32
               -> Word32
               -> Databar a0
               -> IO a1
getTypeInfo248 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames248 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Databar a0
                 -> IO Int32
getIDsOfNames248 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke248 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Databar a0
          -> IO (a1, a2, Word32)
invoke248 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication504 :: (Variant a1)
                  => Databar a0
                  -> IO a1
getApplication504 =
  propertyGet "Application"
              []
              outVariant

getCreator504 :: Databar a0
              -> IO XlCreator
getCreator504 =
  propertyGet "Creator"
              []
              outEnum

getParent519 :: Databar a0
             -> IO (IDispatch ())
getParent519 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority9 :: Databar a0
             -> IO Int32
getPriority9 =
  propertyGet "Priority"
              []
              outInt32

setPriority9 :: Int32
             -> Databar a0
             -> IO ()
setPriority9 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue8 :: Databar a0
               -> IO Bool
getStopIfTrue8 =
  propertyGet "StopIfTrue"
              []
              outBool

getAppliesTo8 :: Databar a0
              -> IO (Range ())
getAppliesTo8 =
  propertyGet "AppliesTo"
              []
              outIDispatch

getMinPoint0 :: Databar a0
             -> IO (ConditionValue ())
getMinPoint0 =
  propertyGet "MinPoint"
              []
              outIDispatch

getMaxPoint0 :: Databar a0
             -> IO (ConditionValue ())
getMaxPoint0 =
  propertyGet "MaxPoint"
              []
              outIDispatch

getPercentMin0 :: Databar a0
               -> IO Int32
getPercentMin0 =
  propertyGet "PercentMin"
              []
              outInt32

setPercentMin0 :: Int32
               -> Databar a0
               -> IO ()
setPercentMin0 rhs =
  propertySet "PercentMin"
              [inInt32 rhs]

getPercentMax0 :: Databar a0
               -> IO Int32
getPercentMax0 =
  propertyGet "PercentMax"
              []
              outInt32

setPercentMax0 :: Int32
               -> Databar a0
               -> IO ()
setPercentMax0 rhs =
  propertySet "PercentMax"
              [inInt32 rhs]

getBarColor0 :: Databar a0
             -> IO (IDispatch ())
getBarColor0 =
  propertyGet "BarColor"
              []
              outIDispatch

getShowValue4 :: Databar a0
              -> IO Bool
getShowValue4 =
  propertyGet "ShowValue"
              []
              outBool

setShowValue4 :: Bool
              -> Databar a0
              -> IO ()
setShowValue4 rhs =
  propertySet "ShowValue"
              [inBool rhs]

getFormula47 :: Databar a0
             -> IO String
getFormula47 =
  propertyGet "Formula"
              []
              outString

setFormula41 :: String
             -> Databar a0
             -> IO ()
setFormula41 rhs =
  propertySet "Formula"
              [inString rhs]

getType65 :: Databar a0
          -> IO Int32
getType65 =
  propertyGet "Type"
              []
              outInt32

setFirstPriority8 :: Databar a0
                  -> IO ()
setFirstPriority8 =
  method0 "SetFirstPriority"
          []

setLastPriority8 :: Databar a0
                 -> IO ()
setLastPriority8 =
  method0 "SetLastPriority"
          []

delete241 :: Databar a0
          -> IO ()
delete241 =
  method0 "Delete"
          []

modifyAppliesToRange8 :: Range a1
                      -> Databar a0
                      -> IO ()
modifyAppliesToRange8 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

getPTCondition8 :: Databar a0
                -> IO Bool
getPTCondition8 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType8 :: Databar a0
              -> IO XlPivotConditionScope
getScopeType8 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType8 :: XlPivotConditionScope
              -> Databar a0
              -> IO ()
setScopeType8 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface IconSetCondition
-- 
-- --------------------------------------------------
data IconSetCondition_ a = IconSetCondition__ 
type IconSetCondition a = IDispatch (IconSetCondition_ a)
iidIconSetCondition :: IID (IconSetCondition ())
iidIconSetCondition =
  mkIID "{00024497-0000-0000-C000-000000000046}"

queryInterface249 :: (Variant a1)
                  => GUID
                  -> IconSetCondition a0
                  -> IO a1
queryInterface249 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef249 :: IconSetCondition a0
          -> IO Word32
addRef249 =
  function1 "AddRef"
            []
            outWord32

release249 :: IconSetCondition a0
           -> IO Word32
release249 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount249 :: IconSetCondition a0
                    -> IO Word32
getTypeInfoCount249 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo249 :: (Variant a1)
               => Word32
               -> Word32
               -> IconSetCondition a0
               -> IO a1
getTypeInfo249 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames249 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> IconSetCondition a0
                 -> IO Int32
getIDsOfNames249 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke249 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> IconSetCondition a0
          -> IO (a1, a2, Word32)
invoke249 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication505 :: (Variant a1)
                  => IconSetCondition a0
                  -> IO a1
getApplication505 =
  propertyGet "Application"
              []
              outVariant

getCreator505 :: IconSetCondition a0
              -> IO XlCreator
getCreator505 =
  propertyGet "Creator"
              []
              outEnum

getParent520 :: IconSetCondition a0
             -> IO (IDispatch ())
getParent520 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority10 :: IconSetCondition a0
              -> IO Int32
getPriority10 =
  propertyGet "Priority"
              []
              outInt32

setPriority10 :: Int32
              -> IconSetCondition a0
              -> IO ()
setPriority10 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue9 :: IconSetCondition a0
               -> IO Bool
getStopIfTrue9 =
  propertyGet "StopIfTrue"
              []
              outBool

getAppliesTo9 :: IconSetCondition a0
              -> IO (Range ())
getAppliesTo9 =
  propertyGet "AppliesTo"
              []
              outIDispatch

getType66 :: IconSetCondition a0
          -> IO Int32
getType66 =
  propertyGet "Type"
              []
              outInt32

modifyAppliesToRange9 :: Range a1
                      -> IconSetCondition a0
                      -> IO ()
modifyAppliesToRange9 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

getPTCondition9 :: IconSetCondition a0
                -> IO Bool
getPTCondition9 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType9 :: IconSetCondition a0
              -> IO XlPivotConditionScope
getScopeType9 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType9 :: XlPivotConditionScope
              -> IconSetCondition a0
              -> IO ()
setScopeType9 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

setFirstPriority9 :: IconSetCondition a0
                  -> IO ()
setFirstPriority9 =
  method0 "SetFirstPriority"
          []

setLastPriority9 :: IconSetCondition a0
                 -> IO ()
setLastPriority9 =
  method0 "SetLastPriority"
          []

delete242 :: IconSetCondition a0
          -> IO ()
delete242 =
  method0 "Delete"
          []

getReverseOrder0 :: IconSetCondition a0
                 -> IO Bool
getReverseOrder0 =
  propertyGet "ReverseOrder"
              []
              outBool

setReverseOrder0 :: Bool
                 -> IconSetCondition a0
                 -> IO ()
setReverseOrder0 rhs =
  propertySet "ReverseOrder"
              [inBool rhs]

getPercentileValues0 :: IconSetCondition a0
                     -> IO Bool
getPercentileValues0 =
  propertyGet "PercentileValues"
              []
              outBool

setPercentileValues0 :: Bool
                     -> IconSetCondition a0
                     -> IO ()
setPercentileValues0 rhs =
  propertySet "PercentileValues"
              [inBool rhs]

getShowIconOnly0 :: IconSetCondition a0
                 -> IO Bool
getShowIconOnly0 =
  propertyGet "ShowIconOnly"
              []
              outBool

setShowIconOnly0 :: Bool
                 -> IconSetCondition a0
                 -> IO ()
setShowIconOnly0 rhs =
  propertySet "ShowIconOnly"
              [inBool rhs]

getFormula48 :: IconSetCondition a0
             -> IO String
getFormula48 =
  propertyGet "Formula"
              []
              outString

setFormula42 :: String
             -> IconSetCondition a0
             -> IO ()
setFormula42 rhs =
  propertySet "Formula"
              [inString rhs]

getIconSet0 :: IconSetCondition a0
            -> IO a1
getIconSet0 =
  propertyGet "IconSet"
              []
              outVariant

setIconSet0 :: a1
            -> IconSetCondition a0
            -> IO ()
setIconSet0 rhs =
  propertySet "IconSet"
              [inVariant rhs]

getIconCriteria0 :: IconSetCondition a0
                 -> IO (IconCriteria ())
getIconCriteria0 =
  propertyGet "IconCriteria"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface IconCriteria
-- 
-- --------------------------------------------------
data IconCriteria_ a = IconCriteria__ 
type IconCriteria a = IDispatch (IconCriteria_ a)
iidIconCriteria :: IID (IconCriteria ())
iidIconCriteria = mkIID "{00024498-0000-0000-C000-000000000046}"

queryInterface250 :: (Variant a1)
                  => GUID
                  -> IconCriteria a0
                  -> IO a1
queryInterface250 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef250 :: IconCriteria a0
          -> IO Word32
addRef250 =
  function1 "AddRef"
            []
            outWord32

release250 :: IconCriteria a0
           -> IO Word32
release250 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount250 :: IconCriteria a0
                    -> IO Word32
getTypeInfoCount250 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo250 :: (Variant a1)
               => Word32
               -> Word32
               -> IconCriteria a0
               -> IO a1
getTypeInfo250 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames250 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> IconCriteria a0
                 -> IO Int32
getIDsOfNames250 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke250 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> IconCriteria a0
          -> IO (a1, a2, Word32)
invoke250 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getCount209 :: IconCriteria a0
            -> IO Int32
getCount209 =
  propertyGet "Count"
              []
              outInt32

getDefault205 :: a1
              -> IconCriteria a0
              -> IO (IconCriterion ())
getDefault205 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIUnknown

getNewEnum118 :: IconCriteria a0
              -> IO (IUnknown ())
getNewEnum118 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem100 :: a1
           -> IconCriteria a0
           -> IO (IconCriterion ())
getItem100 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface IconCriterion
-- 
-- --------------------------------------------------
data IconCriterion_ a = IconCriterion__ 
type IconCriterion a = IDispatch (IconCriterion_ a)
iidIconCriterion :: IID (IconCriterion ())
iidIconCriterion = mkIID "{00024499-0000-0000-C000-000000000046}"

queryInterface251 :: (Variant a1)
                  => GUID
                  -> IconCriterion a0
                  -> IO a1
queryInterface251 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef251 :: IconCriterion a0
          -> IO Word32
addRef251 =
  function1 "AddRef"
            []
            outWord32

release251 :: IconCriterion a0
           -> IO Word32
release251 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount251 :: IconCriterion a0
                    -> IO Word32
getTypeInfoCount251 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo251 :: (Variant a1)
               => Word32
               -> Word32
               -> IconCriterion a0
               -> IO a1
getTypeInfo251 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames251 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> IconCriterion a0
                 -> IO Int32
getIDsOfNames251 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke251 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> IconCriterion a0
          -> IO (a1, a2, Word32)
invoke251 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getIndex79 :: IconCriterion a0
           -> IO Int32
getIndex79 =
  propertyGet "Index"
              []
              outInt32

getType67 :: IconCriterion a0
          -> IO XlConditionValueTypes
getType67 =
  propertyGet "Type"
              []
              outEnum

setType23 :: XlConditionValueTypes
          -> IconCriterion a0
          -> IO ()
setType23 rhs =
  propertySet "Type"
              [inEnum rhs]

getValue63 :: IconCriterion a0
           -> IO a1
getValue63 =
  propertyGet "Value"
              []
              outVariant

setValue50 :: a1
           -> IconCriterion a0
           -> IO ()
setValue50 rhs =
  propertySet "Value"
              [inVariant rhs]

getOperator8 :: IconCriterion a0
             -> IO Int32
getOperator8 =
  propertyGet "Operator"
              []
              outInt32

setOperator2 :: Int32
             -> IconCriterion a0
             -> IO ()
setOperator2 rhs =
  propertySet "Operator"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface Icon
-- 
-- --------------------------------------------------
data Icon_ a = Icon__ 
type Icon a = IDispatch (Icon_ a)
iidIcon :: IID (Icon ())
iidIcon = mkIID "{0002449A-0000-0000-C000-000000000046}"

queryInterface252 :: (Variant a1)
                  => GUID
                  -> Icon a0
                  -> IO a1
queryInterface252 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef252 :: Icon a0
          -> IO Word32
addRef252 =
  function1 "AddRef"
            []
            outWord32

release252 :: Icon a0
           -> IO Word32
release252 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount252 :: Icon a0
                    -> IO Word32
getTypeInfoCount252 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo252 :: (Variant a1)
               => Word32
               -> Word32
               -> Icon a0
               -> IO a1
getTypeInfo252 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames252 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Icon a0
                 -> IO Int32
getIDsOfNames252 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke252 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Icon a0
          -> IO (a1, a2, Word32)
invoke252 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication506 :: (Variant a1)
                  => Icon a0
                  -> IO a1
getApplication506 =
  propertyGet "Application"
              []
              outVariant

getCreator506 :: Icon a0
              -> IO XlCreator
getCreator506 =
  propertyGet "Creator"
              []
              outEnum

getParent521 :: Icon a0
             -> IO (IconSet ())
getParent521 =
  propertyGet "Parent"
              []
              outIUnknown

getIndex80 :: Icon a0
           -> IO Int32
getIndex80 =
  propertyGet "Index"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface IconSet
-- 
-- --------------------------------------------------
data IconSet_ a = IconSet__ 
type IconSet a = IDispatch (IconSet_ a)
iidIconSet :: IID (IconSet ())
iidIconSet = mkIID "{0002449B-0000-0000-C000-000000000046}"

queryInterface253 :: (Variant a1)
                  => GUID
                  -> IconSet a0
                  -> IO a1
queryInterface253 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef253 :: IconSet a0
          -> IO Word32
addRef253 =
  function1 "AddRef"
            []
            outWord32

release253 :: IconSet a0
           -> IO Word32
release253 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount253 :: IconSet a0
                    -> IO Word32
getTypeInfoCount253 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo253 :: (Variant a1)
               => Word32
               -> Word32
               -> IconSet a0
               -> IO a1
getTypeInfo253 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames253 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> IconSet a0
                 -> IO Int32
getIDsOfNames253 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke253 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> IconSet a0
          -> IO (a1, a2, Word32)
invoke253 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication507 :: (Variant a1)
                  => IconSet a0
                  -> IO a1
getApplication507 =
  propertyGet "Application"
              []
              outVariant

getCreator507 :: IconSet a0
              -> IO XlCreator
getCreator507 =
  propertyGet "Creator"
              []
              outEnum

getParent522 :: IconSet a0
             -> IO (IDispatch ())
getParent522 =
  propertyGet "Parent"
              []
              outIDispatch

getID8 :: IconSet a0
       -> IO XlIconSet
getID8 =
  propertyGet "ID"
              []
              outEnum

getCount210 :: IconSet a0
            -> IO Int32
getCount210 =
  propertyGet "Count"
              []
              outInt32

getDefault206 :: a1
              -> IconSet a0
              -> IO (Icon ())
getDefault206 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum119 :: IconSet a0
              -> IO (IUnknown ())
getNewEnum119 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem101 :: a1
           -> IconSet a0
           -> IO (Icon ())
getItem101 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface IconSets
-- 
-- --------------------------------------------------
data IconSets_ a = IconSets__ 
type IconSets a = IDispatch (IconSets_ a)
iidIconSets :: IID (IconSets ())
iidIconSets = mkIID "{0002449C-0000-0000-C000-000000000046}"

queryInterface254 :: (Variant a1)
                  => GUID
                  -> IconSets a0
                  -> IO a1
queryInterface254 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef254 :: IconSets a0
          -> IO Word32
addRef254 =
  function1 "AddRef"
            []
            outWord32

release254 :: IconSets a0
           -> IO Word32
release254 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount254 :: IconSets a0
                    -> IO Word32
getTypeInfoCount254 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo254 :: (Variant a1)
               => Word32
               -> Word32
               -> IconSets a0
               -> IO a1
getTypeInfo254 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames254 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> IconSets a0
                 -> IO Int32
getIDsOfNames254 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke254 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> IconSets a0
          -> IO (a1, a2, Word32)
invoke254 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication508 :: (Variant a1)
                  => IconSets a0
                  -> IO a1
getApplication508 =
  propertyGet "Application"
              []
              outVariant

getCreator508 :: IconSets a0
              -> IO XlCreator
getCreator508 =
  propertyGet "Creator"
              []
              outEnum

getParent523 :: IconSets a0
             -> IO (IDispatch ())
getParent523 =
  propertyGet "Parent"
              []
              outIDispatch

getCount211 :: IconSets a0
            -> IO Int32
getCount211 =
  propertyGet "Count"
              []
              outInt32

getDefault207 :: a1
              -> IconSets a0
              -> IO (IDispatch ())
getDefault207 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum120 :: IconSets a0
              -> IO (IUnknown ())
getNewEnum120 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem102 :: a1
           -> IconSets a0
           -> IO (IDispatch ())
getItem102 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Top10
-- 
-- --------------------------------------------------
data Top10_ a = Top10__ 
type Top10 a = IDispatch (Top10_ a)
iidTop10 :: IID (Top10 ())
iidTop10 = mkIID "{0002449D-0000-0000-C000-000000000046}"

queryInterface255 :: (Variant a1)
                  => GUID
                  -> Top10 a0
                  -> IO a1
queryInterface255 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef255 :: Top10 a0
          -> IO Word32
addRef255 =
  function1 "AddRef"
            []
            outWord32

release255 :: Top10 a0
           -> IO Word32
release255 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount255 :: Top10 a0
                    -> IO Word32
getTypeInfoCount255 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo255 :: (Variant a1)
               => Word32
               -> Word32
               -> Top10 a0
               -> IO a1
getTypeInfo255 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames255 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Top10 a0
                 -> IO Int32
getIDsOfNames255 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke255 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Top10 a0
          -> IO (a1, a2, Word32)
invoke255 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication509 :: (Variant a1)
                  => Top10 a0
                  -> IO a1
getApplication509 =
  propertyGet "Application"
              []
              outVariant

getCreator509 :: Top10 a0
              -> IO XlCreator
getCreator509 =
  propertyGet "Creator"
              []
              outEnum

getParent524 :: Top10 a0
             -> IO (IDispatch ())
getParent524 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority11 :: Top10 a0
              -> IO Int32
getPriority11 =
  propertyGet "Priority"
              []
              outInt32

setPriority11 :: Int32
              -> Top10 a0
              -> IO ()
setPriority11 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue10 :: Top10 a0
                -> IO Bool
getStopIfTrue10 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue4 :: Bool
               -> Top10 a0
               -> IO ()
setStopIfTrue4 rhs =
  propertySet "StopIfTrue"
              [inBool rhs]

getAppliesTo10 :: Top10 a0
               -> IO (Range ())
getAppliesTo10 =
  propertyGet "AppliesTo"
              []
              outIDispatch

getTopBottom0 :: Top10 a0
              -> IO XlTopBottom
getTopBottom0 =
  propertyGet "TopBottom"
              []
              outEnum

setTopBottom0 :: XlTopBottom
              -> Top10 a0
              -> IO ()
setTopBottom0 rhs =
  propertySet "TopBottom"
              [inEnum rhs]

getRank0 :: Top10 a0
         -> IO Int32
getRank0 =
  propertyGet "Rank"
              []
              outInt32

setRank0 :: Int32
         -> Top10 a0
         -> IO ()
setRank0 rhs =
  propertySet "Rank"
              [inInt32 rhs]

getPercent0 :: Top10 a0
            -> IO Bool
getPercent0 =
  propertyGet "Percent"
              []
              outBool

setPercent0 :: Bool
            -> Top10 a0
            -> IO ()
setPercent0 rhs =
  propertySet "Percent"
              [inBool rhs]

getInterior87 :: Top10 a0
              -> IO (Interior ())
getInterior87 =
  propertyGet "Interior"
              []
              outIDispatch

getBorders11 :: Top10 a0
             -> IO (Borders ())
getBorders11 =
  propertyGet "Borders"
              []
              outIDispatch

getFont67 :: Top10 a0
          -> IO (Font ())
getFont67 =
  propertyGet "Font"
              []
              outIDispatch

getType68 :: Top10 a0
          -> IO Int32
getType68 =
  propertyGet "Type"
              []
              outInt32

getNumberFormat18 :: Top10 a0
                  -> IO a1
getNumberFormat18 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat18 :: a1
                  -> Top10 a0
                  -> IO ()
setNumberFormat18 rhs =
  propertySet "NumberFormat"
              [inVariant rhs]

setFirstPriority10 :: Top10 a0
                   -> IO ()
setFirstPriority10 =
  method0 "SetFirstPriority"
          []

setLastPriority10 :: Top10 a0
                  -> IO ()
setLastPriority10 =
  method0 "SetLastPriority"
          []

delete243 :: Top10 a0
          -> IO ()
delete243 =
  method0 "Delete"
          []

modifyAppliesToRange10 :: Range a1
                       -> Top10 a0
                       -> IO ()
modifyAppliesToRange10 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

getPTCondition10 :: Top10 a0
                 -> IO Bool
getPTCondition10 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType10 :: Top10 a0
               -> IO XlPivotConditionScope
getScopeType10 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType10 :: XlPivotConditionScope
               -> Top10 a0
               -> IO ()
setScopeType10 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

getCalcFor1 :: Top10 a0
            -> IO XlCalcFor
getCalcFor1 =
  propertyGet "CalcFor"
              []
              outEnum

setCalcFor1 :: XlCalcFor
            -> Top10 a0
            -> IO ()
setCalcFor1 rhs =
  propertySet "CalcFor"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface AboveAverage
-- 
-- --------------------------------------------------
data AboveAverage_ a = AboveAverage__ 
type AboveAverage a = IDispatch (AboveAverage_ a)
iidAboveAverage :: IID (AboveAverage ())
iidAboveAverage = mkIID "{0002449E-0000-0000-C000-000000000046}"

queryInterface256 :: (Variant a1)
                  => GUID
                  -> AboveAverage a0
                  -> IO a1
queryInterface256 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef256 :: AboveAverage a0
          -> IO Word32
addRef256 =
  function1 "AddRef"
            []
            outWord32

release256 :: AboveAverage a0
           -> IO Word32
release256 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount256 :: AboveAverage a0
                    -> IO Word32
getTypeInfoCount256 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo256 :: (Variant a1)
               => Word32
               -> Word32
               -> AboveAverage a0
               -> IO a1
getTypeInfo256 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames256 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> AboveAverage a0
                 -> IO Int32
getIDsOfNames256 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke256 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> AboveAverage a0
          -> IO (a1, a2, Word32)
invoke256 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication510 :: (Variant a1)
                  => AboveAverage a0
                  -> IO a1
getApplication510 =
  propertyGet "Application"
              []
              outVariant

getCreator510 :: AboveAverage a0
              -> IO XlCreator
getCreator510 =
  propertyGet "Creator"
              []
              outEnum

getParent525 :: AboveAverage a0
             -> IO (IDispatch ())
getParent525 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority12 :: AboveAverage a0
              -> IO Int32
getPriority12 =
  propertyGet "Priority"
              []
              outInt32

setPriority12 :: Int32
              -> AboveAverage a0
              -> IO ()
setPriority12 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue11 :: AboveAverage a0
                -> IO Bool
getStopIfTrue11 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue5 :: Bool
               -> AboveAverage a0
               -> IO ()
setStopIfTrue5 rhs =
  propertySet "StopIfTrue"
              [inBool rhs]

getAppliesTo11 :: AboveAverage a0
               -> IO (Range ())
getAppliesTo11 =
  propertyGet "AppliesTo"
              []
              outIDispatch

getAboveBelow0 :: AboveAverage a0
               -> IO XlAboveBelow
getAboveBelow0 =
  propertyGet "AboveBelow"
              []
              outEnum

setAboveBelow0 :: XlAboveBelow
               -> AboveAverage a0
               -> IO ()
setAboveBelow0 rhs =
  propertySet "AboveBelow"
              [inEnum rhs]

getInterior88 :: AboveAverage a0
              -> IO (Interior ())
getInterior88 =
  propertyGet "Interior"
              []
              outIDispatch

getBorders12 :: AboveAverage a0
             -> IO (Borders ())
getBorders12 =
  propertyGet "Borders"
              []
              outIDispatch

getFont68 :: AboveAverage a0
          -> IO (Font ())
getFont68 =
  propertyGet "Font"
              []
              outIDispatch

getType69 :: AboveAverage a0
          -> IO Int32
getType69 =
  propertyGet "Type"
              []
              outInt32

getNumberFormat19 :: AboveAverage a0
                  -> IO a1
getNumberFormat19 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat19 :: a1
                  -> AboveAverage a0
                  -> IO ()
setNumberFormat19 rhs =
  propertySet "NumberFormat"
              [inVariant rhs]

setFirstPriority11 :: AboveAverage a0
                   -> IO ()
setFirstPriority11 =
  method0 "SetFirstPriority"
          []

setLastPriority11 :: AboveAverage a0
                  -> IO ()
setLastPriority11 =
  method0 "SetLastPriority"
          []

delete244 :: AboveAverage a0
          -> IO ()
delete244 =
  method0 "Delete"
          []

modifyAppliesToRange11 :: Range a1
                       -> AboveAverage a0
                       -> IO ()
modifyAppliesToRange11 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

getPTCondition11 :: AboveAverage a0
                 -> IO Bool
getPTCondition11 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType11 :: AboveAverage a0
               -> IO XlPivotConditionScope
getScopeType11 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType11 :: XlPivotConditionScope
               -> AboveAverage a0
               -> IO ()
setScopeType11 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

getCalcFor2 :: AboveAverage a0
            -> IO XlCalcFor
getCalcFor2 =
  propertyGet "CalcFor"
              []
              outEnum

setCalcFor2 :: XlCalcFor
            -> AboveAverage a0
            -> IO ()
setCalcFor2 rhs =
  propertySet "CalcFor"
              [inEnum rhs]

getNumStdDev0 :: AboveAverage a0
              -> IO Int32
getNumStdDev0 =
  propertyGet "NumStdDev"
              []
              outInt32

setNumStdDev0 :: Int32
              -> AboveAverage a0
              -> IO ()
setNumStdDev0 rhs =
  propertySet "NumStdDev"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface UniqueValues
-- 
-- --------------------------------------------------
data UniqueValues_ a = UniqueValues__ 
type UniqueValues a = IDispatch (UniqueValues_ a)
iidUniqueValues :: IID (UniqueValues ())
iidUniqueValues = mkIID "{0002449F-0000-0000-C000-000000000046}"

queryInterface257 :: (Variant a1)
                  => GUID
                  -> UniqueValues a0
                  -> IO a1
queryInterface257 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef257 :: UniqueValues a0
          -> IO Word32
addRef257 =
  function1 "AddRef"
            []
            outWord32

release257 :: UniqueValues a0
           -> IO Word32
release257 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount257 :: UniqueValues a0
                    -> IO Word32
getTypeInfoCount257 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo257 :: (Variant a1)
               => Word32
               -> Word32
               -> UniqueValues a0
               -> IO a1
getTypeInfo257 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames257 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> UniqueValues a0
                 -> IO Int32
getIDsOfNames257 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke257 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> UniqueValues a0
          -> IO (a1, a2, Word32)
invoke257 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication511 :: (Variant a1)
                  => UniqueValues a0
                  -> IO a1
getApplication511 =
  propertyGet "Application"
              []
              outVariant

getCreator511 :: UniqueValues a0
              -> IO XlCreator
getCreator511 =
  propertyGet "Creator"
              []
              outEnum

getParent526 :: UniqueValues a0
             -> IO (IDispatch ())
getParent526 =
  propertyGet "Parent"
              []
              outIDispatch

getPriority13 :: UniqueValues a0
              -> IO Int32
getPriority13 =
  propertyGet "Priority"
              []
              outInt32

setPriority13 :: Int32
              -> UniqueValues a0
              -> IO ()
setPriority13 rhs =
  propertySet "Priority"
              [inInt32 rhs]

getStopIfTrue12 :: UniqueValues a0
                -> IO Bool
getStopIfTrue12 =
  propertyGet "StopIfTrue"
              []
              outBool

setStopIfTrue6 :: Bool
               -> UniqueValues a0
               -> IO ()
setStopIfTrue6 rhs =
  propertySet "StopIfTrue"
              [inBool rhs]

getAppliesTo12 :: UniqueValues a0
               -> IO (Range ())
getAppliesTo12 =
  propertyGet "AppliesTo"
              []
              outIDispatch

getDupeUnique0 :: UniqueValues a0
               -> IO XlDupeUnique
getDupeUnique0 =
  propertyGet "DupeUnique"
              []
              outEnum

setDupeUnique0 :: XlDupeUnique
               -> UniqueValues a0
               -> IO ()
setDupeUnique0 rhs =
  propertySet "DupeUnique"
              [inEnum rhs]

getInterior89 :: UniqueValues a0
              -> IO (Interior ())
getInterior89 =
  propertyGet "Interior"
              []
              outIDispatch

getBorders13 :: UniqueValues a0
             -> IO (Borders ())
getBorders13 =
  propertyGet "Borders"
              []
              outIDispatch

getFont69 :: UniqueValues a0
          -> IO (Font ())
getFont69 =
  propertyGet "Font"
              []
              outIDispatch

getType70 :: UniqueValues a0
          -> IO Int32
getType70 =
  propertyGet "Type"
              []
              outInt32

getNumberFormat20 :: UniqueValues a0
                  -> IO a1
getNumberFormat20 =
  propertyGet "NumberFormat"
              []
              outVariant

setNumberFormat20 :: a1
                  -> UniqueValues a0
                  -> IO ()
setNumberFormat20 rhs =
  propertySet "NumberFormat"
              [inVariant rhs]

setFirstPriority12 :: UniqueValues a0
                   -> IO ()
setFirstPriority12 =
  method0 "SetFirstPriority"
          []

setLastPriority12 :: UniqueValues a0
                  -> IO ()
setLastPriority12 =
  method0 "SetLastPriority"
          []

delete245 :: UniqueValues a0
          -> IO ()
delete245 =
  method0 "Delete"
          []

modifyAppliesToRange12 :: Range a1
                       -> UniqueValues a0
                       -> IO ()
modifyAppliesToRange12 range =
  method0 "ModifyAppliesToRange"
          [inIDispatch range]

getPTCondition12 :: UniqueValues a0
                 -> IO Bool
getPTCondition12 =
  propertyGet "PTCondition"
              []
              outBool

getScopeType12 :: UniqueValues a0
               -> IO XlPivotConditionScope
getScopeType12 =
  propertyGet "ScopeType"
              []
              outEnum

setScopeType12 :: XlPivotConditionScope
               -> UniqueValues a0
               -> IO ()
setScopeType12 rhs =
  propertySet "ScopeType"
              [inEnum rhs]

-- --------------------------------------------------
-- 
-- dispinterface Ranges
-- 
-- --------------------------------------------------
data Ranges_ a = Ranges__ 
type Ranges a = IDispatch (Ranges_ a)
iidRanges :: IID (Ranges ())
iidRanges = mkIID "{000244A0-0000-0000-C000-000000000046}"

queryInterface258 :: (Variant a1)
                  => GUID
                  -> Ranges a0
                  -> IO a1
queryInterface258 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef258 :: Ranges a0
          -> IO Word32
addRef258 =
  function1 "AddRef"
            []
            outWord32

release258 :: Ranges a0
           -> IO Word32
release258 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount258 :: Ranges a0
                    -> IO Word32
getTypeInfoCount258 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo258 :: (Variant a1)
               => Word32
               -> Word32
               -> Ranges a0
               -> IO a1
getTypeInfo258 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames258 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Ranges a0
                 -> IO Int32
getIDsOfNames258 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke258 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Ranges a0
          -> IO (a1, a2, Word32)
invoke258 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication512 :: (Variant a1)
                  => Ranges a0
                  -> IO a1
getApplication512 =
  propertyGet "Application"
              []
              outVariant

getCreator512 :: Ranges a0
              -> IO XlCreator
getCreator512 =
  propertyGet "Creator"
              []
              outEnum

getParent527 :: Ranges a0
             -> IO (IDispatch ())
getParent527 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault208 :: a1
              -> Ranges a0
              -> IO (Range ())
getDefault208 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum121 :: Ranges a0
              -> IO (IUnknown ())
getNewEnum121 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem103 :: a1
           -> Ranges a0
           -> IO (Range ())
getItem103 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount212 :: Ranges a0
            -> IO Int32
getCount212 =
  propertyGet "Count"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface HeaderFooter
-- 
-- --------------------------------------------------
data HeaderFooter_ a = HeaderFooter__ 
type HeaderFooter a = IDispatch (HeaderFooter_ a)
iidHeaderFooter :: IID (HeaderFooter ())
iidHeaderFooter = mkIID "{000244A1-0000-0000-C000-000000000046}"

queryInterface259 :: (Variant a1)
                  => GUID
                  -> HeaderFooter a0
                  -> IO a1
queryInterface259 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef259 :: HeaderFooter a0
          -> IO Word32
addRef259 =
  function1 "AddRef"
            []
            outWord32

release259 :: HeaderFooter a0
           -> IO Word32
release259 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount259 :: HeaderFooter a0
                    -> IO Word32
getTypeInfoCount259 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo259 :: (Variant a1)
               => Word32
               -> Word32
               -> HeaderFooter a0
               -> IO a1
getTypeInfo259 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames259 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> HeaderFooter a0
                 -> IO Int32
getIDsOfNames259 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke259 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> HeaderFooter a0
          -> IO (a1, a2, Word32)
invoke259 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getText71 :: HeaderFooter a0
          -> IO String
getText71 =
  propertyGet "Text"
              []
              outString

setText69 :: String
          -> HeaderFooter a0
          -> IO ()
setText69 rhs =
  propertySet "Text"
              [inString rhs]

getPicture0 :: HeaderFooter a0
            -> IO (Graphic ())
getPicture0 =
  propertyGet "Picture"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Page
-- 
-- --------------------------------------------------
data Page_ a = Page__ 
type Page a = IDispatch (Page_ a)
iidPage :: IID (Page ())
iidPage = mkIID "{000244A2-0000-0000-C000-000000000046}"

queryInterface260 :: (Variant a1)
                  => GUID
                  -> Page a0
                  -> IO a1
queryInterface260 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef260 :: Page a0
          -> IO Word32
addRef260 =
  function1 "AddRef"
            []
            outWord32

release260 :: Page a0
           -> IO Word32
release260 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount260 :: Page a0
                    -> IO Word32
getTypeInfoCount260 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo260 :: (Variant a1)
               => Word32
               -> Word32
               -> Page a0
               -> IO a1
getTypeInfo260 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames260 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Page a0
                 -> IO Int32
getIDsOfNames260 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke260 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Page a0
          -> IO (a1, a2, Word32)
invoke260 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getLeftHeader2 :: Page a0
               -> IO (HeaderFooter ())
getLeftHeader2 =
  propertyGet "LeftHeader"
              []
              outIDispatch

getCenterHeader2 :: Page a0
                 -> IO (HeaderFooter ())
getCenterHeader2 =
  propertyGet "CenterHeader"
              []
              outIDispatch

getRightHeader2 :: Page a0
                -> IO (HeaderFooter ())
getRightHeader2 =
  propertyGet "RightHeader"
              []
              outIDispatch

getLeftFooter2 :: Page a0
               -> IO (HeaderFooter ())
getLeftFooter2 =
  propertyGet "LeftFooter"
              []
              outIDispatch

getCenterFooter2 :: Page a0
                 -> IO (HeaderFooter ())
getCenterFooter2 =
  propertyGet "CenterFooter"
              []
              outIDispatch

getRightFooter2 :: Page a0
                -> IO (HeaderFooter ())
getRightFooter2 =
  propertyGet "RightFooter"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface Pages
-- 
-- --------------------------------------------------
data Pages_ a = Pages__ 
type Pages a = IDispatch (Pages_ a)
iidPages :: IID (Pages ())
iidPages = mkIID "{000244A3-0000-0000-C000-000000000046}"

queryInterface261 :: (Variant a1)
                  => GUID
                  -> Pages a0
                  -> IO a1
queryInterface261 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef261 :: Pages a0
          -> IO Word32
addRef261 =
  function1 "AddRef"
            []
            outWord32

release261 :: Pages a0
           -> IO Word32
release261 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount261 :: Pages a0
                    -> IO Word32
getTypeInfoCount261 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo261 :: (Variant a1)
               => Word32
               -> Word32
               -> Pages a0
               -> IO a1
getTypeInfo261 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames261 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Pages a0
                 -> IO Int32
getIDsOfNames261 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke261 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Pages a0
          -> IO (a1, a2, Word32)
invoke261 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getItem104 :: a1
           -> Pages a0
           -> IO (Page ())
getItem104 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getDefault209 :: a1
              -> Pages a0
              -> IO (Page ())
getDefault209 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getCount213 :: Pages a0
            -> IO Int32
getCount213 =
  propertyGet "Count"
              []
              outInt32

getNewEnum122 :: Pages a0
              -> IO (IUnknown ())
getNewEnum122 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface ServerViewableItems
-- 
-- --------------------------------------------------
data ServerViewableItems_ a = ServerViewableItems__ 
type ServerViewableItems a = IDispatch (ServerViewableItems_ a)
iidServerViewableItems :: IID (ServerViewableItems ())
iidServerViewableItems =
  mkIID "{000244A4-0000-0000-C000-000000000046}"

queryInterface262 :: (Variant a1)
                  => GUID
                  -> ServerViewableItems a0
                  -> IO a1
queryInterface262 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef262 :: ServerViewableItems a0
          -> IO Word32
addRef262 =
  function1 "AddRef"
            []
            outWord32

release262 :: ServerViewableItems a0
           -> IO Word32
release262 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount262 :: ServerViewableItems a0
                    -> IO Word32
getTypeInfoCount262 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo262 :: (Variant a1)
               => Word32
               -> Word32
               -> ServerViewableItems a0
               -> IO a1
getTypeInfo262 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames262 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ServerViewableItems a0
                 -> IO Int32
getIDsOfNames262 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke262 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ServerViewableItems a0
          -> IO (a1, a2, Word32)
invoke262 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication513 :: (Variant a1)
                  => ServerViewableItems a0
                  -> IO a1
getApplication513 =
  propertyGet "Application"
              []
              outVariant

getCreator513 :: ServerViewableItems a0
              -> IO XlCreator
getCreator513 =
  propertyGet "Creator"
              []
              outEnum

getParent528 :: ServerViewableItems a0
             -> IO (IDispatch ())
getParent528 =
  propertyGet "Parent"
              []
              outIDispatch

getCount214 :: ServerViewableItems a0
            -> IO Int32
getCount214 =
  propertyGet "Count"
              []
              outInt32

add141 :: a1
       -> ServerViewableItems a0
       -> IO (IDispatch ())
add141 obj =
  function1 "Add"
            [inVariant obj]
            outIDispatch

delete246 :: a1
          -> ServerViewableItems a0
          -> IO ()
delete246 index1 =
  method0 "Delete"
          [inVariant index1]

deleteAll2 :: ServerViewableItems a0
           -> IO ()
deleteAll2 =
  method0 "DeleteAll"
          []

item104 :: a1
        -> ServerViewableItems a0
        -> IO (IDispatch ())
item104 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault210 :: a1
              -> ServerViewableItems a0
              -> IO (IDispatch ())
getDefault210 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum123 :: ServerViewableItems a0
              -> IO (IUnknown ())
getNewEnum123 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface TableStyleElement
-- 
-- --------------------------------------------------
data TableStyleElement_ a = TableStyleElement__ 
type TableStyleElement a = IDispatch (TableStyleElement_ a)
iidTableStyleElement :: IID (TableStyleElement ())
iidTableStyleElement =
  mkIID "{000244A5-0000-0000-C000-000000000046}"

queryInterface263 :: (Variant a1)
                  => GUID
                  -> TableStyleElement a0
                  -> IO a1
queryInterface263 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef263 :: TableStyleElement a0
          -> IO Word32
addRef263 =
  function1 "AddRef"
            []
            outWord32

release263 :: TableStyleElement a0
           -> IO Word32
release263 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount263 :: TableStyleElement a0
                    -> IO Word32
getTypeInfoCount263 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo263 :: (Variant a1)
               => Word32
               -> Word32
               -> TableStyleElement a0
               -> IO a1
getTypeInfo263 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames263 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> TableStyleElement a0
                 -> IO Int32
getIDsOfNames263 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke263 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> TableStyleElement a0
          -> IO (a1, a2, Word32)
invoke263 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication514 :: (Variant a1)
                  => TableStyleElement a0
                  -> IO a1
getApplication514 =
  propertyGet "Application"
              []
              outVariant

getCreator514 :: TableStyleElement a0
              -> IO XlCreator
getCreator514 =
  propertyGet "Creator"
              []
              outEnum

getParent529 :: TableStyleElement a0
             -> IO (IDispatch ())
getParent529 =
  propertyGet "Parent"
              []
              outIDispatch

getHasFormat0 :: TableStyleElement a0
              -> IO Bool
getHasFormat0 =
  propertyGet "HasFormat"
              []
              outBool

getInterior90 :: TableStyleElement a0
              -> IO (Interior ())
getInterior90 =
  propertyGet "Interior"
              []
              outIDispatch

getBorders14 :: TableStyleElement a0
             -> IO (Borders ())
getBorders14 =
  propertyGet "Borders"
              []
              outIDispatch

getFont70 :: TableStyleElement a0
          -> IO (Font ())
getFont70 =
  propertyGet "Font"
              []
              outIDispatch

getStripeSize0 :: TableStyleElement a0
               -> IO Int32
getStripeSize0 =
  propertyGet "StripeSize"
              []
              outInt32

setStripeSize0 :: Int32
               -> TableStyleElement a0
               -> IO ()
setStripeSize0 rhs =
  propertySet "StripeSize"
              [inInt32 rhs]

clear12 :: TableStyleElement a0
        -> IO ()
clear12 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- dispinterface TableStyleElements
-- 
-- --------------------------------------------------
data TableStyleElements_ a = TableStyleElements__ 
type TableStyleElements a = IDispatch (TableStyleElements_ a)
iidTableStyleElements :: IID (TableStyleElements ())
iidTableStyleElements =
  mkIID "{000244A6-0000-0000-C000-000000000046}"

queryInterface264 :: (Variant a1)
                  => GUID
                  -> TableStyleElements a0
                  -> IO a1
queryInterface264 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef264 :: TableStyleElements a0
          -> IO Word32
addRef264 =
  function1 "AddRef"
            []
            outWord32

release264 :: TableStyleElements a0
           -> IO Word32
release264 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount264 :: TableStyleElements a0
                    -> IO Word32
getTypeInfoCount264 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo264 :: (Variant a1)
               => Word32
               -> Word32
               -> TableStyleElements a0
               -> IO a1
getTypeInfo264 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames264 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> TableStyleElements a0
                 -> IO Int32
getIDsOfNames264 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke264 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> TableStyleElements a0
          -> IO (a1, a2, Word32)
invoke264 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication515 :: (Variant a1)
                  => TableStyleElements a0
                  -> IO a1
getApplication515 =
  propertyGet "Application"
              []
              outVariant

getCreator515 :: TableStyleElements a0
              -> IO XlCreator
getCreator515 =
  propertyGet "Creator"
              []
              outEnum

getParent530 :: TableStyleElements a0
             -> IO (IDispatch ())
getParent530 =
  propertyGet "Parent"
              []
              outIDispatch

getCount215 :: TableStyleElements a0
            -> IO Int32
getCount215 =
  propertyGet "Count"
              []
              outInt32

item105 :: XlTableStyleElementType
        -> TableStyleElements a0
        -> IO (TableStyleElement ())
item105 index1 =
  function1 "Item"
            [inEnum index1]
            outIDispatch

getDefault211 :: XlTableStyleElementType
              -> TableStyleElements a0
              -> IO (TableStyleElement ())
getDefault211 index1 =
  propertyGet "_Default"
              [inEnum index1]
              outIDispatch

getNewEnum124 :: TableStyleElements a0
              -> IO (IUnknown ())
getNewEnum124 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface TableStyle
-- 
-- --------------------------------------------------
data TableStyle_ a = TableStyle__ 
type TableStyle a = IDispatch (TableStyle_ a)
iidTableStyle :: IID (TableStyle ())
iidTableStyle = mkIID "{000244A7-0000-0000-C000-000000000046}"

queryInterface265 :: (Variant a1)
                  => GUID
                  -> TableStyle a0
                  -> IO a1
queryInterface265 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef265 :: TableStyle a0
          -> IO Word32
addRef265 =
  function1 "AddRef"
            []
            outWord32

release265 :: TableStyle a0
           -> IO Word32
release265 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount265 :: TableStyle a0
                    -> IO Word32
getTypeInfoCount265 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo265 :: (Variant a1)
               => Word32
               -> Word32
               -> TableStyle a0
               -> IO a1
getTypeInfo265 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames265 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> TableStyle a0
                 -> IO Int32
getIDsOfNames265 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke265 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> TableStyle a0
          -> IO (a1, a2, Word32)
invoke265 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication516 :: (Variant a1)
                  => TableStyle a0
                  -> IO a1
getApplication516 =
  propertyGet "Application"
              []
              outVariant

getCreator516 :: TableStyle a0
              -> IO XlCreator
getCreator516 =
  propertyGet "Creator"
              []
              outEnum

getParent531 :: TableStyle a0
             -> IO (IDispatch ())
getParent531 =
  propertyGet "Parent"
              []
              outIDispatch

getDefault212 :: TableStyle a0
              -> IO String
getDefault212 =
  propertyGet "_Default"
              []
              outString

getName153 :: TableStyle a0
           -> IO String
getName153 =
  propertyGet "Name"
              []
              outString

getNameLocal4 :: TableStyle a0
              -> IO String
getNameLocal4 =
  propertyGet "NameLocal"
              []
              outString

getBuiltIn8 :: TableStyle a0
            -> IO Bool
getBuiltIn8 =
  propertyGet "BuiltIn"
              []
              outBool

getTableStyleElements0 :: TableStyle a0
                       -> IO (TableStyleElements ())
getTableStyleElements0 =
  propertyGet "TableStyleElements"
              []
              outIDispatch

getShowAsAvailableTableStyle0 :: TableStyle a0
                              -> IO Bool
getShowAsAvailableTableStyle0 =
  propertyGet "ShowAsAvailableTableStyle"
              []
              outBool

setShowAsAvailableTableStyle0 :: Bool
                              -> TableStyle a0
                              -> IO ()
setShowAsAvailableTableStyle0 rhs =
  propertySet "ShowAsAvailableTableStyle"
              [inBool rhs]

getShowAsAvailablePivotTableStyle0 :: TableStyle a0
                                   -> IO Bool
getShowAsAvailablePivotTableStyle0 =
  propertyGet "ShowAsAvailablePivotTableStyle"
              []
              outBool

setShowAsAvailablePivotTableStyle0 :: Bool
                                   -> TableStyle a0
                                   -> IO ()
setShowAsAvailablePivotTableStyle0 rhs =
  propertySet "ShowAsAvailablePivotTableStyle"
              [inBool rhs]

delete247 :: TableStyle a0
          -> IO ()
delete247 =
  method0 "Delete"
          []

duplicate86 :: (Variant a1)
            => a1
            -> TableStyle a0
            -> IO (TableStyle ())
duplicate86 newTableStyleName =
  function1 "Duplicate"
            [inVariant newTableStyleName]
            outIDispatch

-- --------------------------------------------------
-- 
-- dispinterface TableStyles
-- 
-- --------------------------------------------------
data TableStyles_ a = TableStyles__ 
type TableStyles a = IDispatch (TableStyles_ a)
iidTableStyles :: IID (TableStyles ())
iidTableStyles = mkIID "{000244A8-0000-0000-C000-000000000046}"

queryInterface266 :: (Variant a1)
                  => GUID
                  -> TableStyles a0
                  -> IO a1
queryInterface266 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef266 :: TableStyles a0
          -> IO Word32
addRef266 =
  function1 "AddRef"
            []
            outWord32

release266 :: TableStyles a0
           -> IO Word32
release266 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount266 :: TableStyles a0
                    -> IO Word32
getTypeInfoCount266 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo266 :: (Variant a1)
               => Word32
               -> Word32
               -> TableStyles a0
               -> IO a1
getTypeInfo266 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames266 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> TableStyles a0
                 -> IO Int32
getIDsOfNames266 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke266 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> TableStyles a0
          -> IO (a1, a2, Word32)
invoke266 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication517 :: (Variant a1)
                  => TableStyles a0
                  -> IO a1
getApplication517 =
  propertyGet "Application"
              []
              outVariant

getCreator517 :: TableStyles a0
              -> IO XlCreator
getCreator517 =
  propertyGet "Creator"
              []
              outEnum

getParent532 :: TableStyles a0
             -> IO (IDispatch ())
getParent532 =
  propertyGet "Parent"
              []
              outIDispatch

getCount216 :: TableStyles a0
            -> IO Int32
getCount216 =
  propertyGet "Count"
              []
              outInt32

add142 :: String
       -> TableStyles a0
       -> IO (TableStyle ())
add142 tableStyleName =
  function1 "Add"
            [inString tableStyleName]
            outIDispatch

item106 :: a1
        -> TableStyles a0
        -> IO (TableStyle ())
item106 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault213 :: a1
              -> TableStyles a0
              -> IO (TableStyle ())
getDefault213 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum125 :: TableStyles a0
              -> IO (IUnknown ())
getNewEnum125 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface SortField
-- 
-- --------------------------------------------------
data SortField_ a = SortField__ 
type SortField a = IDispatch (SortField_ a)
iidSortField :: IID (SortField ())
iidSortField = mkIID "{000244A9-0000-0000-C000-000000000046}"

queryInterface267 :: (Variant a1)
                  => GUID
                  -> SortField a0
                  -> IO a1
queryInterface267 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef267 :: SortField a0
          -> IO Word32
addRef267 =
  function1 "AddRef"
            []
            outWord32

release267 :: SortField a0
           -> IO Word32
release267 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount267 :: SortField a0
                    -> IO Word32
getTypeInfoCount267 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo267 :: (Variant a1)
               => Word32
               -> Word32
               -> SortField a0
               -> IO a1
getTypeInfo267 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames267 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SortField a0
                 -> IO Int32
getIDsOfNames267 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke267 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SortField a0
          -> IO (a1, a2, Word32)
invoke267 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication518 :: (Variant a1)
                  => SortField a0
                  -> IO a1
getApplication518 =
  propertyGet "Application"
              []
              outVariant

getCreator518 :: SortField a0
              -> IO XlCreator
getCreator518 =
  propertyGet "Creator"
              []
              outEnum

getParent533 :: SortField a0
             -> IO (IDispatch ())
getParent533 =
  propertyGet "Parent"
              []
              outIDispatch

getSortOn0 :: SortField a0
           -> IO XlSortOn
getSortOn0 =
  propertyGet "SortOn"
              []
              outEnum

setSortOn0 :: XlSortOn
           -> SortField a0
           -> IO ()
setSortOn0 rhs =
  propertySet "SortOn"
              [inEnum rhs]

getSortOnValue0 :: SortField a0
                -> IO (IDispatch ())
getSortOnValue0 =
  propertyGet "SortOnValue"
              []
              outIDispatch

getKey0 :: SortField a0
        -> IO (Range ())
getKey0 =
  propertyGet "Key"
              []
              outIDispatch

getOrder6 :: SortField a0
          -> IO XlSortOrder
getOrder6 =
  propertyGet "Order"
              []
              outEnum

setOrder6 :: XlSortOrder
          -> SortField a0
          -> IO ()
setOrder6 rhs =
  propertySet "Order"
              [inEnum rhs]

getCustomOrder0 :: SortField a0
                -> IO a1
getCustomOrder0 =
  propertyGet "CustomOrder"
              []
              outVariant

setCustomOrder0 :: a1
                -> SortField a0
                -> IO ()
setCustomOrder0 rhs =
  propertySet "CustomOrder"
              [inVariant rhs]

getDataOption0 :: SortField a0
               -> IO XlSortDataOption
getDataOption0 =
  propertyGet "DataOption"
              []
              outEnum

setDataOption0 :: XlSortDataOption
               -> SortField a0
               -> IO ()
setDataOption0 rhs =
  propertySet "DataOption"
              [inEnum rhs]

getPriority14 :: SortField a0
              -> IO Int32
getPriority14 =
  propertyGet "Priority"
              []
              outInt32

setPriority14 :: Int32
              -> SortField a0
              -> IO ()
setPriority14 rhs =
  propertySet "Priority"
              [inInt32 rhs]

delete248 :: SortField a0
          -> IO ()
delete248 =
  method0 "Delete"
          []

modifyKey0 :: Range a1
           -> SortField a0
           -> IO ()
modifyKey0 key =
  method0 "ModifyKey"
          [inIDispatch key]

setIcon0 :: Icon a1
         -> SortField a0
         -> IO ()
setIcon0 icon =
  method0 "SetIcon"
          [inIDispatch icon]

-- --------------------------------------------------
-- 
-- dispinterface SortFields
-- 
-- --------------------------------------------------
data SortFields_ a = SortFields__ 
type SortFields a = IDispatch (SortFields_ a)
iidSortFields :: IID (SortFields ())
iidSortFields = mkIID "{000244AA-0000-0000-C000-000000000046}"

queryInterface268 :: (Variant a1)
                  => GUID
                  -> SortFields a0
                  -> IO a1
queryInterface268 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef268 :: SortFields a0
          -> IO Word32
addRef268 =
  function1 "AddRef"
            []
            outWord32

release268 :: SortFields a0
           -> IO Word32
release268 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount268 :: SortFields a0
                    -> IO Word32
getTypeInfoCount268 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo268 :: (Variant a1)
               => Word32
               -> Word32
               -> SortFields a0
               -> IO a1
getTypeInfo268 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames268 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> SortFields a0
                 -> IO Int32
getIDsOfNames268 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke268 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> SortFields a0
          -> IO (a1, a2, Word32)
invoke268 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication519 :: (Variant a1)
                  => SortFields a0
                  -> IO a1
getApplication519 =
  propertyGet "Application"
              []
              outVariant

getCreator519 :: SortFields a0
              -> IO XlCreator
getCreator519 =
  propertyGet "Creator"
              []
              outEnum

getParent534 :: SortFields a0
             -> IO (IDispatch ())
getParent534 =
  propertyGet "Parent"
              []
              outIDispatch

add143 :: (Variant a2, Variant a3, Variant a4, Variant a5)
       => Range a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> SortFields a0
       -> IO (SortField ())
add143 key sortOn order customOrder dataOption =
  function1 "Add"
            [ inIDispatch key
            , inVariant sortOn
            , inVariant order
            , inVariant customOrder
            , inVariant dataOption
            ]
            outIDispatch

getItem105 :: a1
           -> SortFields a0
           -> IO (SortField ())
getItem105 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

getCount217 :: SortFields a0
            -> IO Int32
getCount217 =
  propertyGet "Count"
              []
              outInt32

clear13 :: SortFields a0
        -> IO ()
clear13 =
  method0 "Clear"
          []

getDefault214 :: a1
              -> SortFields a0
              -> IO (SortField ())
getDefault214 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum126 :: SortFields a0
              -> IO (IUnknown ())
getNewEnum126 =
  propertyGet "_NewEnum"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface Sort
-- 
-- --------------------------------------------------
data Sort_ a = Sort__ 
type Sort a = IDispatch (Sort_ a)
iidSort :: IID (Sort ())
iidSort = mkIID "{000244AB-0000-0000-C000-000000000046}"

queryInterface269 :: (Variant a1)
                  => GUID
                  -> Sort a0
                  -> IO a1
queryInterface269 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef269 :: Sort a0
          -> IO Word32
addRef269 =
  function1 "AddRef"
            []
            outWord32

release269 :: Sort a0
           -> IO Word32
release269 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount269 :: Sort a0
                    -> IO Word32
getTypeInfoCount269 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo269 :: (Variant a1)
               => Word32
               -> Word32
               -> Sort a0
               -> IO a1
getTypeInfo269 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames269 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Sort a0
                 -> IO Int32
getIDsOfNames269 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke269 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Sort a0
          -> IO (a1, a2, Word32)
invoke269 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication520 :: (Variant a1)
                  => Sort a0
                  -> IO a1
getApplication520 =
  propertyGet "Application"
              []
              outVariant

getCreator520 :: Sort a0
              -> IO XlCreator
getCreator520 =
  propertyGet "Creator"
              []
              outEnum

getParent535 :: Sort a0
             -> IO (IDispatch ())
getParent535 =
  propertyGet "Parent"
              []
              outIDispatch

getRng0 :: Sort a0
        -> IO (Range ())
getRng0 =
  propertyGet "Rng"
              []
              outIDispatch

getHeader0 :: Sort a0
           -> IO XlYesNoGuess
getHeader0 =
  propertyGet "Header"
              []
              outEnum

setHeader0 :: XlYesNoGuess
           -> Sort a0
           -> IO ()
setHeader0 rhs =
  propertySet "Header"
              [inEnum rhs]

getMatchCase0 :: Sort a0
              -> IO Bool
getMatchCase0 =
  propertyGet "MatchCase"
              []
              outBool

setMatchCase0 :: Bool
              -> Sort a0
              -> IO ()
setMatchCase0 rhs =
  propertySet "MatchCase"
              [inBool rhs]

getOrientation56 :: Sort a0
                 -> IO XlSortOrientation
getOrientation56 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation56 :: XlSortOrientation
                 -> Sort a0
                 -> IO ()
setOrientation56 rhs =
  propertySet "Orientation"
              [inEnum rhs]

getSortMethod0 :: Sort a0
               -> IO XlSortMethod
getSortMethod0 =
  propertyGet "SortMethod"
              []
              outEnum

setSortMethod0 :: XlSortMethod
               -> Sort a0
               -> IO ()
setSortMethod0 rhs =
  propertySet "SortMethod"
              [inEnum rhs]

getSortFields0 :: Sort a0
               -> IO (SortFields ())
getSortFields0 =
  propertyGet "SortFields"
              []
              outIDispatch

setRange2 :: Range a1
          -> Sort a0
          -> IO ()
setRange2 rng =
  method0 "SetRange"
          [inIDispatch rng]

apply4 :: Sort a0
       -> IO ()
apply4 =
  method0 "Apply"
          []

-- --------------------------------------------------
-- 
-- dispinterface Research
-- 
-- --------------------------------------------------
data Research_ a = Research__ 
type Research a = IDispatch (Research_ a)
iidResearch :: IID (Research ())
iidResearch = mkIID "{000244AC-0000-0000-C000-000000000046}"

queryInterface270 :: (Variant a1)
                  => GUID
                  -> Research a0
                  -> IO a1
queryInterface270 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef270 :: Research a0
          -> IO Word32
addRef270 =
  function1 "AddRef"
            []
            outWord32

release270 :: Research a0
           -> IO Word32
release270 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount270 :: Research a0
                    -> IO Word32
getTypeInfoCount270 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo270 :: (Variant a1)
               => Word32
               -> Word32
               -> Research a0
               -> IO a1
getTypeInfo270 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames270 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> Research a0
                 -> IO Int32
getIDsOfNames270 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke270 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> Research a0
          -> IO (a1, a2, Word32)
invoke270 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication521 :: (Variant a1)
                  => Research a0
                  -> IO a1
getApplication521 =
  propertyGet "Application"
              []
              outVariant

getCreator521 :: Research a0
              -> IO XlCreator
getCreator521 =
  propertyGet "Creator"
              []
              outEnum

getParent536 :: Research a0
             -> IO (IDispatch ())
getParent536 =
  propertyGet "Parent"
              []
              outIDispatch

query0 :: (Variant a2, Variant a3, Variant a4, Variant a5)
       => String
       -> a2
       -> a3
       -> a4
       -> a5
       -> Research a0
       -> IO a1
query0 serviceID queryString queryLanguage useSelection launchQuery =
  function1 "Query"
            [ inString serviceID
            , inVariant queryString
            , inVariant queryLanguage
            , inVariant useSelection
            , inVariant launchQuery
            ]
            outVariant

isResearchService0 :: String
                   -> Research a0
                   -> IO Bool
isResearchService0 serviceID =
  function1 "IsResearchService"
            [inString serviceID]
            outBool

setLanguagePair0 :: Int32
                 -> Int32
                 -> Research a0
                 -> IO a1
setLanguagePair0 languageFrom languageTo =
  function1 "SetLanguagePair"
            [ inInt32 languageFrom
            , inInt32 languageTo
            ]
            outVariant

-- --------------------------------------------------
-- 
-- dispinterface ColorStop
-- 
-- --------------------------------------------------
data ColorStop_ a = ColorStop__ 
type ColorStop a = IDispatch (ColorStop_ a)
iidColorStop :: IID (ColorStop ())
iidColorStop = mkIID "{000244AD-0000-0000-C000-000000000046}"

queryInterface271 :: (Variant a1)
                  => GUID
                  -> ColorStop a0
                  -> IO a1
queryInterface271 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef271 :: ColorStop a0
          -> IO Word32
addRef271 =
  function1 "AddRef"
            []
            outWord32

release271 :: ColorStop a0
           -> IO Word32
release271 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount271 :: ColorStop a0
                    -> IO Word32
getTypeInfoCount271 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo271 :: (Variant a1)
               => Word32
               -> Word32
               -> ColorStop a0
               -> IO a1
getTypeInfo271 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames271 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ColorStop a0
                 -> IO Int32
getIDsOfNames271 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke271 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ColorStop a0
          -> IO (a1, a2, Word32)
invoke271 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication522 :: (Variant a1)
                  => ColorStop a0
                  -> IO a1
getApplication522 =
  propertyGet "Application"
              []
              outVariant

getCreator522 :: ColorStop a0
              -> IO XlCreator
getCreator522 =
  propertyGet "Creator"
              []
              outEnum

getParent537 :: ColorStop a0
             -> IO (IDispatch ())
getParent537 =
  propertyGet "Parent"
              []
              outIDispatch

delete249 :: ColorStop a0
          -> IO ()
delete249 =
  method0 "Delete"
          []

getColor12 :: ColorStop a0
           -> IO a1
getColor12 =
  propertyGet "Color"
              []
              outVariant

setColor12 :: a1
           -> ColorStop a0
           -> IO ()
setColor12 rhs =
  propertySet "Color"
              [inVariant rhs]

getThemeColor12 :: ColorStop a0
                -> IO Int32
getThemeColor12 =
  propertyGet "ThemeColor"
              []
              outInt32

setThemeColor12 :: Int32
                -> ColorStop a0
                -> IO ()
setThemeColor12 rhs =
  propertySet "ThemeColor"
              [inInt32 rhs]

getTintAndShade13 :: ColorStop a0
                  -> IO a1
getTintAndShade13 =
  propertyGet "TintAndShade"
              []
              outVariant

setTintAndShade13 :: a1
                  -> ColorStop a0
                  -> IO ()
setTintAndShade13 rhs =
  propertySet "TintAndShade"
              [inVariant rhs]

getPosition23 :: ColorStop a0
              -> IO Double
getPosition23 =
  propertyGet "Position"
              []
              outDouble

setPosition22 :: Double
              -> ColorStop a0
              -> IO ()
setPosition22 rhs =
  propertySet "Position"
              [inDouble rhs]

-- --------------------------------------------------
-- 
-- dispinterface ColorStops
-- 
-- --------------------------------------------------
data ColorStops_ a = ColorStops__ 
type ColorStops a = IDispatch (ColorStops_ a)
iidColorStops :: IID (ColorStops ())
iidColorStops = mkIID "{000244AE-0000-0000-C000-000000000046}"

queryInterface272 :: (Variant a1)
                  => GUID
                  -> ColorStops a0
                  -> IO a1
queryInterface272 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef272 :: ColorStops a0
          -> IO Word32
addRef272 =
  function1 "AddRef"
            []
            outWord32

release272 :: ColorStops a0
           -> IO Word32
release272 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount272 :: ColorStops a0
                    -> IO Word32
getTypeInfoCount272 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo272 :: (Variant a1)
               => Word32
               -> Word32
               -> ColorStops a0
               -> IO a1
getTypeInfo272 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames272 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ColorStops a0
                 -> IO Int32
getIDsOfNames272 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke272 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ColorStops a0
          -> IO (a1, a2, Word32)
invoke272 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication523 :: (Variant a1)
                  => ColorStops a0
                  -> IO a1
getApplication523 =
  propertyGet "Application"
              []
              outVariant

getCreator523 :: ColorStops a0
              -> IO XlCreator
getCreator523 =
  propertyGet "Creator"
              []
              outEnum

getParent538 :: ColorStops a0
             -> IO (IDispatch ())
getParent538 =
  propertyGet "Parent"
              []
              outIDispatch

getCount218 :: ColorStops a0
            -> IO Int32
getCount218 =
  propertyGet "Count"
              []
              outInt32

add144 :: Double
       -> ColorStops a0
       -> IO (ColorStop ())
add144 position =
  function1 "Add"
            [inDouble position]
            outIDispatch

item107 :: a1
        -> ColorStops a0
        -> IO (ColorStop ())
item107 index1 =
  function1 "Item"
            [inVariant index1]
            outIDispatch

getDefault215 :: a1
              -> ColorStops a0
              -> IO (ColorStop ())
getDefault215 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum127 :: ColorStops a0
              -> IO (IUnknown ())
getNewEnum127 =
  propertyGet "_NewEnum"
              []
              outIUnknown

clear14 :: ColorStops a0
        -> IO ()
clear14 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- dispinterface LinearGradient
-- 
-- --------------------------------------------------
data LinearGradient_ a = LinearGradient__ 
type LinearGradient a = IDispatch (LinearGradient_ a)
iidLinearGradient :: IID (LinearGradient ())
iidLinearGradient = mkIID "{000244AF-0000-0000-C000-000000000046}"

queryInterface273 :: (Variant a1)
                  => GUID
                  -> LinearGradient a0
                  -> IO a1
queryInterface273 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef273 :: LinearGradient a0
          -> IO Word32
addRef273 =
  function1 "AddRef"
            []
            outWord32

release273 :: LinearGradient a0
           -> IO Word32
release273 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount273 :: LinearGradient a0
                    -> IO Word32
getTypeInfoCount273 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo273 :: (Variant a1)
               => Word32
               -> Word32
               -> LinearGradient a0
               -> IO a1
getTypeInfo273 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames273 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> LinearGradient a0
                 -> IO Int32
getIDsOfNames273 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke273 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> LinearGradient a0
          -> IO (a1, a2, Word32)
invoke273 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication524 :: (Variant a1)
                  => LinearGradient a0
                  -> IO a1
getApplication524 =
  propertyGet "Application"
              []
              outVariant

getCreator524 :: LinearGradient a0
              -> IO XlCreator
getCreator524 =
  propertyGet "Creator"
              []
              outEnum

getParent539 :: LinearGradient a0
             -> IO (IDispatch ())
getParent539 =
  propertyGet "Parent"
              []
              outIDispatch

getColorStops1 :: LinearGradient a0
               -> IO (ColorStops ())
getColorStops1 =
  propertyGet "ColorStops"
              []
              outIDispatch

getDegree0 :: LinearGradient a0
           -> IO Double
getDegree0 =
  propertyGet "Degree"
              []
              outDouble

setDegree0 :: Double
           -> LinearGradient a0
           -> IO ()
setDegree0 rhs =
  propertySet "Degree"
              [inDouble rhs]

-- --------------------------------------------------
-- 
-- dispinterface RectangularGradient
-- 
-- --------------------------------------------------
data RectangularGradient_ a = RectangularGradient__ 
type RectangularGradient a = IDispatch (RectangularGradient_ a)
iidRectangularGradient :: IID (RectangularGradient ())
iidRectangularGradient =
  mkIID "{000244B0-0000-0000-C000-000000000046}"

queryInterface274 :: (Variant a1)
                  => GUID
                  -> RectangularGradient a0
                  -> IO a1
queryInterface274 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef274 :: RectangularGradient a0
          -> IO Word32
addRef274 =
  function1 "AddRef"
            []
            outWord32

release274 :: RectangularGradient a0
           -> IO Word32
release274 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount274 :: RectangularGradient a0
                    -> IO Word32
getTypeInfoCount274 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo274 :: (Variant a1)
               => Word32
               -> Word32
               -> RectangularGradient a0
               -> IO a1
getTypeInfo274 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames274 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> RectangularGradient a0
                 -> IO Int32
getIDsOfNames274 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke274 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> RectangularGradient a0
          -> IO (a1, a2, Word32)
invoke274 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication525 :: (Variant a1)
                  => RectangularGradient a0
                  -> IO a1
getApplication525 =
  propertyGet "Application"
              []
              outVariant

getCreator525 :: RectangularGradient a0
              -> IO XlCreator
getCreator525 =
  propertyGet "Creator"
              []
              outEnum

getParent540 :: RectangularGradient a0
             -> IO (IDispatch ())
getParent540 =
  propertyGet "Parent"
              []
              outIDispatch

getColorStops2 :: RectangularGradient a0
               -> IO (ColorStops ())
getColorStops2 =
  propertyGet "ColorStops"
              []
              outIDispatch

getRectangleTop0 :: RectangularGradient a0
                 -> IO Double
getRectangleTop0 =
  propertyGet "RectangleTop"
              []
              outDouble

setRectangleTop0 :: Double
                 -> RectangularGradient a0
                 -> IO ()
setRectangleTop0 rhs =
  propertySet "RectangleTop"
              [inDouble rhs]

getRectangleBottom0 :: RectangularGradient a0
                    -> IO Double
getRectangleBottom0 =
  propertyGet "RectangleBottom"
              []
              outDouble

setRectangleBottom0 :: Double
                    -> RectangularGradient a0
                    -> IO ()
setRectangleBottom0 rhs =
  propertySet "RectangleBottom"
              [inDouble rhs]

getRectangleLeft0 :: RectangularGradient a0
                  -> IO Double
getRectangleLeft0 =
  propertyGet "RectangleLeft"
              []
              outDouble

setRectangleLeft0 :: Double
                  -> RectangularGradient a0
                  -> IO ()
setRectangleLeft0 rhs =
  propertySet "RectangleLeft"
              [inDouble rhs]

getRectangleRight0 :: RectangularGradient a0
                   -> IO Double
getRectangleRight0 =
  propertyGet "RectangleRight"
              []
              outDouble

setRectangleRight0 :: Double
                   -> RectangularGradient a0
                   -> IO ()
setRectangleRight0 rhs =
  propertySet "RectangleRight"
              [inDouble rhs]

-- --------------------------------------------------
-- 
-- dispinterface MultiThreadedCalculation
-- 
-- --------------------------------------------------
data MultiThreadedCalculation_ a = MultiThreadedCalculation__ 
type MultiThreadedCalculation a = IDispatch (MultiThreadedCalculation_ a)
iidMultiThreadedCalculation :: IID (MultiThreadedCalculation ())
iidMultiThreadedCalculation =
  mkIID "{000244B1-0000-0000-C000-000000000046}"

queryInterface275 :: (Variant a1)
                  => GUID
                  -> MultiThreadedCalculation a0
                  -> IO a1
queryInterface275 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef275 :: MultiThreadedCalculation a0
          -> IO Word32
addRef275 =
  function1 "AddRef"
            []
            outWord32

release275 :: MultiThreadedCalculation a0
           -> IO Word32
release275 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount275 :: MultiThreadedCalculation a0
                    -> IO Word32
getTypeInfoCount275 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo275 :: (Variant a1)
               => Word32
               -> Word32
               -> MultiThreadedCalculation a0
               -> IO a1
getTypeInfo275 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames275 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> MultiThreadedCalculation a0
                 -> IO Int32
getIDsOfNames275 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke275 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> MultiThreadedCalculation a0
          -> IO (a1, a2, Word32)
invoke275 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication526 :: (Variant a1)
                  => MultiThreadedCalculation a0
                  -> IO a1
getApplication526 =
  propertyGet "Application"
              []
              outVariant

getCreator526 :: MultiThreadedCalculation a0
              -> IO XlCreator
getCreator526 =
  propertyGet "Creator"
              []
              outEnum

getParent541 :: MultiThreadedCalculation a0
             -> IO (IDispatch ())
getParent541 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled94 :: MultiThreadedCalculation a0
             -> IO Bool
getEnabled94 =
  propertyGet "Enabled"
              []
              outBool

setEnabled94 :: Bool
             -> MultiThreadedCalculation a0
             -> IO ()
setEnabled94 rhs =
  propertySet "Enabled"
              [inBool rhs]

getThreadMode0 :: MultiThreadedCalculation a0
               -> IO XlThreadMode
getThreadMode0 =
  propertyGet "ThreadMode"
              []
              outEnum

setThreadMode0 :: XlThreadMode
               -> MultiThreadedCalculation a0
               -> IO ()
setThreadMode0 rhs =
  propertySet "ThreadMode"
              [inEnum rhs]

getThreadCount0 :: MultiThreadedCalculation a0
                -> IO Int32
getThreadCount0 =
  propertyGet "ThreadCount"
              []
              outInt32

setThreadCount0 :: Int32
                -> MultiThreadedCalculation a0
                -> IO ()
setThreadCount0 rhs =
  propertySet "ThreadCount"
              [inInt32 rhs]

-- --------------------------------------------------
-- 
-- dispinterface ChartFormat
-- 
-- --------------------------------------------------
data ChartFormat_ a = ChartFormat__ 
type ChartFormat a = IDispatch (ChartFormat_ a)
iidChartFormat :: IID (ChartFormat ())
iidChartFormat = mkIID "{000244B2-0000-0000-C000-000000000046}"

queryInterface276 :: (Variant a1)
                  => GUID
                  -> ChartFormat a0
                  -> IO a1
queryInterface276 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef276 :: ChartFormat a0
          -> IO Word32
addRef276 =
  function1 "AddRef"
            []
            outWord32

release276 :: ChartFormat a0
           -> IO Word32
release276 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount276 :: ChartFormat a0
                    -> IO Word32
getTypeInfoCount276 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo276 :: (Variant a1)
               => Word32
               -> Word32
               -> ChartFormat a0
               -> IO a1
getTypeInfo276 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames276 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> ChartFormat a0
                 -> IO Int32
getIDsOfNames276 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke276 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> ChartFormat a0
          -> IO (a1, a2, Word32)
invoke276 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication527 :: (Variant a1)
                  => ChartFormat a0
                  -> IO a1
getApplication527 =
  propertyGet "Application"
              []
              outVariant

getCreator527 :: ChartFormat a0
              -> IO XlCreator
getCreator527 =
  propertyGet "Creator"
              []
              outEnum

getParent542 :: ChartFormat a0
             -> IO (IDispatch ())
getParent542 =
  propertyGet "Parent"
              []
              outIDispatch

getFill34 :: ChartFormat a0
          -> IO (FillFormat ())
getFill34 =
  propertyGet "Fill"
              []
              outIUnknown

getGlow4 :: (Variant a1)
         => ChartFormat a0
         -> IO a1
getGlow4 =
  propertyGet "Glow"
              []
              outVariant

getLine4 :: ChartFormat a0
         -> IO (LineFormat ())
getLine4 =
  propertyGet "Line"
              []
              outIUnknown

getPictureFormat4 :: ChartFormat a0
                  -> IO (PictureFormat ())
getPictureFormat4 =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow60 :: ChartFormat a0
            -> IO (ShadowFormat ())
getShadow60 =
  propertyGet "Shadow"
              []
              outIUnknown

getSoftEdge4 :: (Variant a1)
             => ChartFormat a0
             -> IO a1
getSoftEdge4 =
  propertyGet "SoftEdge"
              []
              outVariant

getTextFrame24 :: ChartFormat a0
               -> IO (TextFrame2 ())
getTextFrame24 =
  propertyGet "TextFrame2"
              []
              outIUnknown

getThreeD5 :: ChartFormat a0
           -> IO (ThreeDFormat ())
getThreeD5 =
  propertyGet "ThreeD"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- dispinterface FileExportConverter
-- 
-- --------------------------------------------------
data FileExportConverter_ a = FileExportConverter__ 
type FileExportConverter a = IDispatch (FileExportConverter_ a)
iidFileExportConverter :: IID (FileExportConverter ())
iidFileExportConverter =
  mkIID "{000244B3-0000-0000-C000-000000000046}"

queryInterface277 :: (Variant a1)
                  => GUID
                  -> FileExportConverter a0
                  -> IO a1
queryInterface277 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef277 :: FileExportConverter a0
          -> IO Word32
addRef277 =
  function1 "AddRef"
            []
            outWord32

release277 :: FileExportConverter a0
           -> IO Word32
release277 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount277 :: FileExportConverter a0
                    -> IO Word32
getTypeInfoCount277 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo277 :: (Variant a1)
               => Word32
               -> Word32
               -> FileExportConverter a0
               -> IO a1
getTypeInfo277 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames277 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> FileExportConverter a0
                 -> IO Int32
getIDsOfNames277 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke277 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> FileExportConverter a0
          -> IO (a1, a2, Word32)
invoke277 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication528 :: (Variant a1)
                  => FileExportConverter a0
                  -> IO a1
getApplication528 =
  propertyGet "Application"
              []
              outVariant

getCreator528 :: FileExportConverter a0
              -> IO XlCreator
getCreator528 =
  propertyGet "Creator"
              []
              outEnum

getParent543 :: FileExportConverter a0
             -> IO (IDispatch ())
getParent543 =
  propertyGet "Parent"
              []
              outIDispatch

getExtensions0 :: FileExportConverter a0
               -> IO String
getExtensions0 =
  propertyGet "Extensions"
              []
              outString

getDescription4 :: FileExportConverter a0
                -> IO String
getDescription4 =
  propertyGet "Description"
              []
              outString

getFileFormat1 :: FileExportConverter a0
               -> IO Int32
getFileFormat1 =
  propertyGet "FileFormat"
              []
              outInt32

-- --------------------------------------------------
-- 
-- dispinterface FileExportConverters
-- 
-- --------------------------------------------------
data FileExportConverters_ a = FileExportConverters__ 
type FileExportConverters a = IDispatch (FileExportConverters_ a)
iidFileExportConverters :: IID (FileExportConverters ())
iidFileExportConverters =
  mkIID "{000244B4-0000-0000-C000-000000000046}"

queryInterface278 :: (Variant a1)
                  => GUID
                  -> FileExportConverters a0
                  -> IO a1
queryInterface278 riid =
  method1 "QueryInterface"
          [inGUID riid]
          outVariant

addRef278 :: FileExportConverters a0
          -> IO Word32
addRef278 =
  function1 "AddRef"
            []
            outWord32

release278 :: FileExportConverters a0
           -> IO Word32
release278 =
  function1 "Release"
            []
            outWord32

getTypeInfoCount278 :: FileExportConverters a0
                    -> IO Word32
getTypeInfoCount278 =
  method1 "GetTypeInfoCount"
          []
          outWord32

getTypeInfo278 :: (Variant a1)
               => Word32
               -> Word32
               -> FileExportConverters a0
               -> IO a1
getTypeInfo278 itinfo lcid =
  method1 "GetTypeInfo"
          [ inWord32 itinfo
          , inWord32 lcid
          ]
          outVariant

getIDsOfNames278 :: GUID
                 -> Char
                 -> Word32
                 -> Word32
                 -> FileExportConverters a0
                 -> IO Int32
getIDsOfNames278 riid rgszNames cNames lcid =
  method1 "GetIDsOfNames"
          [ inGUID riid
          , inChar rgszNames
          , inWord32 cNames
          , inWord32 lcid
          ]
          outInt32

invoke278 :: (Variant a1, Variant a2, Variant a3)
          => Int32
          -> GUID
          -> Word32
          -> Word16
          -> a3
          -> FileExportConverters a0
          -> IO (a1, a2, Word32)
invoke278 dispidMember riid lcid wFlags pdispparams =
  method3 "Invoke"
          [ inInt32 dispidMember
          , inGUID riid
          , inWord32 lcid
          , inWord16 wFlags
          , inVariant pdispparams
          ]
          outVariant
          outVariant
          outWord32

getApplication529 :: (Variant a1)
                  => FileExportConverters a0
                  -> IO a1
getApplication529 =
  propertyGet "Application"
              []
              outVariant

getCreator529 :: FileExportConverters a0
              -> IO XlCreator
getCreator529 =
  propertyGet "Creator"
              []
              outEnum

getParent544 :: FileExportConverters a0
             -> IO (IDispatch ())
getParent544 =
  propertyGet "Parent"
              []
              outIDispatch

getCount219 :: FileExportConverters a0
            -> IO Int32
getCount219 =
  propertyGet "Count"
              []
              outInt32

getDefault216 :: a1
              -> FileExportConverters a0
              -> IO (FileExportConverter ())
getDefault216 index1 =
  propertyGet "_Default"
              [inVariant index1]
              outIDispatch

getNewEnum128 :: FileExportConverters a0
              -> IO (IUnknown ())
getNewEnum128 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getItem106 :: a1
           -> FileExportConverters a0
           -> IO (FileExportConverter ())
getItem106 index1 =
  propertyGet "Item"
              [inVariant index1]
              outIDispatch

-- --------------------------------------------------
-- 
-- interface IDummy
-- 
-- --------------------------------------------------
data IDummy_ a = IDummy__ 
type IDummy a = IDispatch (IDummy_ a)
iidIDummy :: IID (IDummy ())
iidIDummy = mkIID "{0002442E-0001-0000-C000-000000000046}"

activeSheetOrChart :: IDummy a0
                   -> IO ()
activeSheetOrChart =
  method0 "_ActiveSheetOrChart"
          []

rGB :: IDummy a0
    -> IO ()
rGB =
  method0 "RGB"
          []

chDir :: IDummy a0
      -> IO ()
chDir =
  method0 "ChDir"
          []

doScript :: IDummy a0
         -> IO ()
doScript =
  method0 "DoScript"
          []

directObject :: IDummy a0
             -> IO ()
directObject =
  method0 "DirectObject"
          []

refreshDocument :: IDummy a0
                -> IO ()
refreshDocument =
  method0 "RefreshDocument"
          []

addSignatureLine :: (Variant a1)
                 => a2
                 -> IDummy a0
                 -> IO a1
addSignatureLine sigProv =
  function1 "AddSignatureLine"
            [inVariant sigProv]
            outVariant

addNonVisibleSignature :: (Variant a1)
                       => a2
                       -> IDummy a0
                       -> IO a1
addNonVisibleSignature sigProv =
  function1 "AddNonVisibleSignature"
            [inVariant sigProv]
            outVariant

getShowSignaturesPane :: IDummy a0
                      -> IO Bool
getShowSignaturesPane =
  propertyGet "ShowSignaturesPane"
              []
              outBool

setShowSignaturesPane :: Bool
                      -> IDummy a0
                      -> IO ()
setShowSignaturesPane rHS =
  propertySet "ShowSignaturesPane"
              [inBool rHS]

themeFontScheme :: IDummy a0
                -> IO ()
themeFontScheme =
  method0 "ThemeFontScheme"
          []

themeColorScheme :: IDummy a0
                 -> IO ()
themeColorScheme =
  method0 "ThemeColorScheme"
          []

themeEffectScheme :: IDummy a0
                  -> IO ()
themeEffectScheme =
  method0 "ThemeEffectScheme"
          []

load :: IDummy a0
     -> IO ()
load =
  method0 "Load"
          []

-- --------------------------------------------------
-- 
-- interface ICanvasShapes
-- 
-- --------------------------------------------------
data ICanvasShapes_ a = ICanvasShapes__ 
type ICanvasShapes a = IDispatch (ICanvasShapes_ a)
iidICanvasShapes :: IID (ICanvasShapes ())
iidICanvasShapes = mkIID "{0002444F-0001-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass QueryTable
-- 
--   implements: _QueryTable , [source]RefreshEvents
-- --------------------------------------------------
clsidQueryTable :: CLSID
clsidQueryTable = mkCLSID "{59191DA1-EA47-11CE-A51F-00AA0061507F}"

-- --------------------------------------------------
-- 
-- coclass Application
-- 
--   implements: _Application , [source]AppEvents
-- --------------------------------------------------
clsidApplication :: CLSID
clsidApplication = mkCLSID "{00024500-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Chart
-- 
--   implements: _Chart , [source]ChartEvents
-- --------------------------------------------------
clsidChart :: CLSID
clsidChart = mkCLSID "{00020821-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Worksheet
-- 
--   implements: _Worksheet , [source]DocEvents
-- --------------------------------------------------
clsidWorksheet :: CLSID
clsidWorksheet = mkCLSID "{00020820-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Global
-- 
--   implements: _Global
-- --------------------------------------------------
clsidGlobal :: CLSID
clsidGlobal = mkCLSID "{00020812-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Workbook
-- 
--   implements: _Workbook , [source]WorkbookEvents
-- --------------------------------------------------
clsidWorkbook :: CLSID
clsidWorkbook = mkCLSID "{00020819-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass OLEObject
-- 
--   implements: _OLEObject , [source]OLEObjectEvents
-- --------------------------------------------------
clsidOLEObject :: CLSID
clsidOLEObject = mkCLSID "{00020818-0000-0000-C000-000000000046}"


