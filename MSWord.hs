-- Automatically generated by HaskellDirect (ihc.exe), version 0.21
-- Created: 12:42 Paris, Madrid (heure d’été), Thursday 09 August, 2012
-- Command line: -o MSWord.hs -d -dshow-passes --verbose -fgen-variant-instances -fno-qualified-names -fno-export-list MSWORD.IDL

module MSWord where

import Prelude
import System.Win32.Com.Automation
import Data.Bits ((.&.))
import System.Win32.Com (LIBID, mkLIBID, IID, mkIID, invokeAndCheck, 
            marshallBSTR, freeBSTR, IUnknown, readIUnknown, CLSID, mkCLSID, 
            marshallIUnknown, GUID)
import System.Win32.Com.Server (ComVTable)
import Foreign.ForeignPtr (withForeignPtr)
import Foreign.Ptr (Ptr)
import System.Win32.Com.HDirect.HDirect (Flags(..), pow2Series, orList, sizeofPtr, 
                allocBytes, readunique, free, doThenFree, marshallref, 
                marshallEnum32, sizeofForeignPtr, sizeofInt16, writeInt32, 
                sizeofInt32)
import Data.Int (Int32, Int16, Int64)
import Data.Maybe (mapMaybe)
import System.Win32.Com.Server.StdDispatch (createStdDispatchVTBL2, mkDispMethod, apply_0, 
                    apply_1, outArg, inArg, retVal, apply_3, inoutArg, inIUnknownArg)
import Data.Word (Word32, Word16)

libidWord :: LIBID
libidWord = mkLIBID "{00020905-0000-0000-C000-000000000046}"

data WdMailSystem
 = WdNoMailSystem
 | WdMAPI
 | WdPowerTalk
 | WdMAPIandPowerTalk
 deriving (Enum)
instance Variant (WdMailSystem) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTemplateType
 = WdTemplateTypeList__ [WdTemplateType]
 | WdNormalTemplate
 | WdGlobalTemplate
 | WdAttachedTemplate
 
instance Flags (WdTemplateType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdTemplateType) where
  fromEnum v =
    case v of
       (WdTemplateTypeList__ xs) -> orList (map fromEnum xs)
       WdNormalTemplate -> 0
       WdGlobalTemplate -> 1
       WdAttachedTemplate -> 2
  
  toEnum v =
    case v of
       0 -> WdNormalTemplate
       1 -> WdGlobalTemplate
       2 -> WdAttachedTemplate
       x -> WdTemplateTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdTemplateType: illegal enum value "
  
instance Variant (WdTemplateType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdContinue
 = WdContinueList__ [WdContinue]
 | WdContinueDisabled
 | WdResetList
 | WdContinueList
 
instance Flags (WdContinue) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdContinue) where
  fromEnum v =
    case v of
       (WdContinueList__ xs) -> orList (map fromEnum xs)
       WdContinueDisabled -> 0
       WdResetList -> 1
       WdContinueList -> 2
  
  toEnum v =
    case v of
       0 -> WdContinueDisabled
       1 -> WdResetList
       2 -> WdContinueList
       x -> WdContinueList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdContinue: illegal enum value "
  
instance Variant (WdContinue) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdIMEMode
 = WdIMEModeNoControl
 | WdIMEModeOn
 | WdIMEModeOff
 | WdIMEModeHiragana
 | WdIMEModeKatakana
 | WdIMEModeKatakanaHalf
 | WdIMEModeAlphaFull
 | WdIMEModeAlpha
 | WdIMEModeHangulFull
 | WdIMEModeHangul
 
instance Enum (WdIMEMode) where
  fromEnum v =
    case v of
       WdIMEModeNoControl -> 0
       WdIMEModeOn -> 1
       WdIMEModeOff -> 2
       WdIMEModeHiragana -> 4
       WdIMEModeKatakana -> 5
       WdIMEModeKatakanaHalf -> 6
       WdIMEModeAlphaFull -> 7
       WdIMEModeAlpha -> 8
       WdIMEModeHangulFull -> 9
       WdIMEModeHangul -> 10
  
  toEnum v =
    case v of
       0 -> WdIMEModeNoControl
       1 -> WdIMEModeOn
       2 -> WdIMEModeOff
       4 -> WdIMEModeHiragana
       5 -> WdIMEModeKatakana
       6 -> WdIMEModeKatakanaHalf
       7 -> WdIMEModeAlphaFull
       8 -> WdIMEModeAlpha
       9 -> WdIMEModeHangulFull
       10 -> WdIMEModeHangul
       _ -> error "unmarshallWdIMEMode: illegal enum value "
  
instance Variant (WdIMEMode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBaselineAlignment
 = WdBaselineAlignTop
 | WdBaselineAlignCenter
 | WdBaselineAlignBaseline
 | WdBaselineAlignFarEast50
 | WdBaselineAlignAuto
 deriving (Enum)
instance Variant (WdBaselineAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdIndexFilter
 = WdIndexFilterNone
 | WdIndexFilterAiueo
 | WdIndexFilterAkasatana
 | WdIndexFilterChosung
 | WdIndexFilterLow
 | WdIndexFilterMedium
 | WdIndexFilterFull
 deriving (Enum)
instance Variant (WdIndexFilter) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdIndexSortBy
 = WdIndexSortByList__ [WdIndexSortBy]
 | WdIndexSortByStroke
 | WdIndexSortBySyllable
 
instance Flags (WdIndexSortBy) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdIndexSortBy) where
  fromEnum v =
    case v of
       (WdIndexSortByList__ xs) -> orList (map fromEnum xs)
       WdIndexSortByStroke -> 0
       WdIndexSortBySyllable -> 1
  
  toEnum v =
    case v of
       0 -> WdIndexSortByStroke
       1 -> WdIndexSortBySyllable
       x -> WdIndexSortByList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdIndexSortBy: illegal enum value "
  
instance Variant (WdIndexSortBy) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdJustificationMode
 = WdJustificationModeList__ [WdJustificationMode]
 | WdJustificationModeExpand
 | WdJustificationModeCompress
 | WdJustificationModeCompressKana
 
instance Flags (WdJustificationMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdJustificationMode) where
  fromEnum v =
    case v of
       (WdJustificationModeList__ xs) -> orList (map fromEnum xs)
       WdJustificationModeExpand -> 0
       WdJustificationModeCompress -> 1
       WdJustificationModeCompressKana -> 2
  
  toEnum v =
    case v of
       0 -> WdJustificationModeExpand
       1 -> WdJustificationModeCompress
       2 -> WdJustificationModeCompressKana
       x -> WdJustificationModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdJustificationMode: illegal enum value "
  
instance Variant (WdJustificationMode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFarEastLineBreakLevel
 = WdFarEastLineBreakLevelList__ [WdFarEastLineBreakLevel]
 | WdFarEastLineBreakLevelNormal
 | WdFarEastLineBreakLevelStrict
 | WdFarEastLineBreakLevelCustom
 
instance Flags (WdFarEastLineBreakLevel) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFarEastLineBreakLevel) where
  fromEnum v =
    case v of
       (WdFarEastLineBreakLevelList__ xs) -> orList (map fromEnum xs)
       WdFarEastLineBreakLevelNormal -> 0
       WdFarEastLineBreakLevelStrict -> 1
       WdFarEastLineBreakLevelCustom -> 2
  
  toEnum v =
    case v of
       0 -> WdFarEastLineBreakLevelNormal
       1 -> WdFarEastLineBreakLevelStrict
       2 -> WdFarEastLineBreakLevelCustom
       x -> WdFarEastLineBreakLevelList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                then Just (toEnum (fromIntegral val))
                                                                else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdFarEastLineBreakLevel: illegal enum value "
  
instance Variant (WdFarEastLineBreakLevel) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMultipleWordConversionsMode
 = WdMultipleWordConversionsModeList__ [WdMultipleWordConversionsMode]
 | WdHangulToHanja
 | WdHanjaToHangul
 
instance Flags (WdMultipleWordConversionsMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdMultipleWordConversionsMode) where
  fromEnum v =
    case v of
       (WdMultipleWordConversionsModeList__ xs) -> orList (map fromEnum xs)
       WdHangulToHanja -> 0
       WdHanjaToHangul -> 1
  
  toEnum v =
    case v of
       0 -> WdHangulToHanja
       1 -> WdHanjaToHangul
       x -> WdMultipleWordConversionsModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                      then Just (toEnum (fromIntegral val))
                                                                      else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdMultipleWordConversionsMode: illegal enum value "
  
instance Variant (WdMultipleWordConversionsMode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdColorIndex
 = WdByAuthor
 | WdAuto
 | WdNoHighlight
 | WdBlack
 | WdBlue
 | WdTurquoise
 | WdBrightGreen
 | WdPink
 | WdRed
 | WdYellow
 | WdWhite
 | WdDarkBlue
 | WdTeal
 | WdGreen
 | WdViolet
 | WdDarkRed
 | WdDarkYellow
 | WdGray50
 | WdGray25
 
instance Enum (WdColorIndex) where
  fromEnum v =
    case v of
       WdByAuthor -> (-1)
       WdAuto -> 0
       WdNoHighlight -> 0
       WdBlack -> 1
       WdBlue -> 2
       WdTurquoise -> 3
       WdBrightGreen -> 4
       WdPink -> 5
       WdRed -> 6
       WdYellow -> 7
       WdWhite -> 8
       WdDarkBlue -> 9
       WdTeal -> 10
       WdGreen -> 11
       WdViolet -> 12
       WdDarkRed -> 13
       WdDarkYellow -> 14
       WdGray50 -> 15
       WdGray25 -> 16
  
  toEnum v =
    case v of
       (-1) -> WdByAuthor
       0 -> WdAuto
       0 -> WdNoHighlight
       1 -> WdBlack
       2 -> WdBlue
       3 -> WdTurquoise
       4 -> WdBrightGreen
       5 -> WdPink
       6 -> WdRed
       7 -> WdYellow
       8 -> WdWhite
       9 -> WdDarkBlue
       10 -> WdTeal
       11 -> WdGreen
       12 -> WdViolet
       13 -> WdDarkRed
       14 -> WdDarkYellow
       15 -> WdGray50
       16 -> WdGray25
       _ -> error "unmarshallWdColorIndex: illegal enum value "
  
instance Variant (WdColorIndex) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTextureIndex
 = WdTextureDiagonalCross
 | WdTextureCross
 | WdTextureDiagonalUp
 | WdTextureDiagonalDown
 | WdTextureVertical
 | WdTextureHorizontal
 | WdTextureDarkDiagonalCross
 | WdTextureDarkCross
 | WdTextureDarkDiagonalUp
 | WdTextureDarkDiagonalDown
 | WdTextureDarkVertical
 | WdTextureDarkHorizontal
 | WdTextureNone
 | WdTexture2Pt5Percent
 | WdTexture5Percent
 | WdTexture7Pt5Percent
 | WdTexture10Percent
 | WdTexture12Pt5Percent
 | WdTexture15Percent
 | WdTexture17Pt5Percent
 | WdTexture20Percent
 | WdTexture22Pt5Percent
 | WdTexture25Percent
 | WdTexture27Pt5Percent
 | WdTexture30Percent
 | WdTexture32Pt5Percent
 | WdTexture35Percent
 | WdTexture37Pt5Percent
 | WdTexture40Percent
 | WdTexture42Pt5Percent
 | WdTexture45Percent
 | WdTexture47Pt5Percent
 | WdTexture50Percent
 | WdTexture52Pt5Percent
 | WdTexture55Percent
 | WdTexture57Pt5Percent
 | WdTexture60Percent
 | WdTexture62Pt5Percent
 | WdTexture65Percent
 | WdTexture67Pt5Percent
 | WdTexture70Percent
 | WdTexture72Pt5Percent
 | WdTexture75Percent
 | WdTexture77Pt5Percent
 | WdTexture80Percent
 | WdTexture82Pt5Percent
 | WdTexture85Percent
 | WdTexture87Pt5Percent
 | WdTexture90Percent
 | WdTexture92Pt5Percent
 | WdTexture95Percent
 | WdTexture97Pt5Percent
 | WdTextureSolid
 
instance Enum (WdTextureIndex) where
  fromEnum v =
    case v of
       WdTextureDiagonalCross -> (-12)
       WdTextureCross -> (-11)
       WdTextureDiagonalUp -> (-10)
       WdTextureDiagonalDown -> (-9)
       WdTextureVertical -> (-8)
       WdTextureHorizontal -> (-7)
       WdTextureDarkDiagonalCross -> (-6)
       WdTextureDarkCross -> (-5)
       WdTextureDarkDiagonalUp -> (-4)
       WdTextureDarkDiagonalDown -> (-3)
       WdTextureDarkVertical -> (-2)
       WdTextureDarkHorizontal -> (-1)
       WdTextureNone -> 0
       WdTexture2Pt5Percent -> 25
       WdTexture5Percent -> 50
       WdTexture7Pt5Percent -> 75
       WdTexture10Percent -> 100
       WdTexture12Pt5Percent -> 125
       WdTexture15Percent -> 150
       WdTexture17Pt5Percent -> 175
       WdTexture20Percent -> 200
       WdTexture22Pt5Percent -> 225
       WdTexture25Percent -> 250
       WdTexture27Pt5Percent -> 275
       WdTexture30Percent -> 300
       WdTexture32Pt5Percent -> 325
       WdTexture35Percent -> 350
       WdTexture37Pt5Percent -> 375
       WdTexture40Percent -> 400
       WdTexture42Pt5Percent -> 425
       WdTexture45Percent -> 450
       WdTexture47Pt5Percent -> 475
       WdTexture50Percent -> 500
       WdTexture52Pt5Percent -> 525
       WdTexture55Percent -> 550
       WdTexture57Pt5Percent -> 575
       WdTexture60Percent -> 600
       WdTexture62Pt5Percent -> 625
       WdTexture65Percent -> 650
       WdTexture67Pt5Percent -> 675
       WdTexture70Percent -> 700
       WdTexture72Pt5Percent -> 725
       WdTexture75Percent -> 750
       WdTexture77Pt5Percent -> 775
       WdTexture80Percent -> 800
       WdTexture82Pt5Percent -> 825
       WdTexture85Percent -> 850
       WdTexture87Pt5Percent -> 875
       WdTexture90Percent -> 900
       WdTexture92Pt5Percent -> 925
       WdTexture95Percent -> 950
       WdTexture97Pt5Percent -> 975
       WdTextureSolid -> 1000
  
  toEnum v =
    case v of
       (-12) -> WdTextureDiagonalCross
       (-11) -> WdTextureCross
       (-10) -> WdTextureDiagonalUp
       (-9) -> WdTextureDiagonalDown
       (-8) -> WdTextureVertical
       (-7) -> WdTextureHorizontal
       (-6) -> WdTextureDarkDiagonalCross
       (-5) -> WdTextureDarkCross
       (-4) -> WdTextureDarkDiagonalUp
       (-3) -> WdTextureDarkDiagonalDown
       (-2) -> WdTextureDarkVertical
       (-1) -> WdTextureDarkHorizontal
       0 -> WdTextureNone
       25 -> WdTexture2Pt5Percent
       50 -> WdTexture5Percent
       75 -> WdTexture7Pt5Percent
       100 -> WdTexture10Percent
       125 -> WdTexture12Pt5Percent
       150 -> WdTexture15Percent
       175 -> WdTexture17Pt5Percent
       200 -> WdTexture20Percent
       225 -> WdTexture22Pt5Percent
       250 -> WdTexture25Percent
       275 -> WdTexture27Pt5Percent
       300 -> WdTexture30Percent
       325 -> WdTexture32Pt5Percent
       350 -> WdTexture35Percent
       375 -> WdTexture37Pt5Percent
       400 -> WdTexture40Percent
       425 -> WdTexture42Pt5Percent
       450 -> WdTexture45Percent
       475 -> WdTexture47Pt5Percent
       500 -> WdTexture50Percent
       525 -> WdTexture52Pt5Percent
       550 -> WdTexture55Percent
       575 -> WdTexture57Pt5Percent
       600 -> WdTexture60Percent
       625 -> WdTexture62Pt5Percent
       650 -> WdTexture65Percent
       675 -> WdTexture67Pt5Percent
       700 -> WdTexture70Percent
       725 -> WdTexture72Pt5Percent
       750 -> WdTexture75Percent
       775 -> WdTexture77Pt5Percent
       800 -> WdTexture80Percent
       825 -> WdTexture82Pt5Percent
       850 -> WdTexture85Percent
       875 -> WdTexture87Pt5Percent
       900 -> WdTexture90Percent
       925 -> WdTexture92Pt5Percent
       950 -> WdTexture95Percent
       975 -> WdTexture97Pt5Percent
       1000 -> WdTextureSolid
       _ -> error "unmarshallWdTextureIndex: illegal enum value "
  
instance Variant (WdTextureIndex) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdUnderline
 = WdUnderlineNone
 | WdUnderlineSingle
 | WdUnderlineWords
 | WdUnderlineDouble
 | WdUnderlineDotted
 | WdUnderlineThick
 | WdUnderlineDash
 | WdUnderlineDotDash
 | WdUnderlineDotDotDash
 | WdUnderlineWavy
 | WdUnderlineDottedHeavy
 | WdUnderlineDashHeavy
 | WdUnderlineDotDashHeavy
 | WdUnderlineDotDotDashHeavy
 | WdUnderlineWavyHeavy
 | WdUnderlineDashLong
 | WdUnderlineWavyDouble
 | WdUnderlineDashLongHeavy
 
instance Enum (WdUnderline) where
  fromEnum v =
    case v of
       WdUnderlineNone -> 0
       WdUnderlineSingle -> 1
       WdUnderlineWords -> 2
       WdUnderlineDouble -> 3
       WdUnderlineDotted -> 4
       WdUnderlineThick -> 6
       WdUnderlineDash -> 7
       WdUnderlineDotDash -> 9
       WdUnderlineDotDotDash -> 10
       WdUnderlineWavy -> 11
       WdUnderlineDottedHeavy -> 20
       WdUnderlineDashHeavy -> 23
       WdUnderlineDotDashHeavy -> 25
       WdUnderlineDotDotDashHeavy -> 26
       WdUnderlineWavyHeavy -> 27
       WdUnderlineDashLong -> 39
       WdUnderlineWavyDouble -> 43
       WdUnderlineDashLongHeavy -> 55
  
  toEnum v =
    case v of
       0 -> WdUnderlineNone
       1 -> WdUnderlineSingle
       2 -> WdUnderlineWords
       3 -> WdUnderlineDouble
       4 -> WdUnderlineDotted
       6 -> WdUnderlineThick
       7 -> WdUnderlineDash
       9 -> WdUnderlineDotDash
       10 -> WdUnderlineDotDotDash
       11 -> WdUnderlineWavy
       20 -> WdUnderlineDottedHeavy
       23 -> WdUnderlineDashHeavy
       25 -> WdUnderlineDotDashHeavy
       26 -> WdUnderlineDotDotDashHeavy
       27 -> WdUnderlineWavyHeavy
       39 -> WdUnderlineDashLong
       43 -> WdUnderlineWavyDouble
       55 -> WdUnderlineDashLongHeavy
       _ -> error "unmarshallWdUnderline: illegal enum value "
  
instance Variant (WdUnderline) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEmphasisMark
 = WdEmphasisMarkNone
 | WdEmphasisMarkOverSolidCircle
 | WdEmphasisMarkOverComma
 | WdEmphasisMarkOverWhiteCircle
 | WdEmphasisMarkUnderSolidCircle
 deriving (Enum)
instance Variant (WdEmphasisMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdInternationalIndex
 = WdListSeparator
 | WdDecimalSeparator
 | WdThousandsSeparator
 | WdCurrencyCode
 | Wd24HourClock
 | WdInternationalAM
 | WdInternationalPM
 | WdTimeSeparator
 | WdDateSeparator
 | WdProductLanguageID
 
instance Enum (WdInternationalIndex) where
  fromEnum v =
    case v of
       WdListSeparator -> 17
       WdDecimalSeparator -> 18
       WdThousandsSeparator -> 19
       WdCurrencyCode -> 20
       Wd24HourClock -> 21
       WdInternationalAM -> 22
       WdInternationalPM -> 23
       WdTimeSeparator -> 24
       WdDateSeparator -> 25
       WdProductLanguageID -> 26
  
  toEnum v =
    case v of
       17 -> WdListSeparator
       18 -> WdDecimalSeparator
       19 -> WdThousandsSeparator
       20 -> WdCurrencyCode
       21 -> Wd24HourClock
       22 -> WdInternationalAM
       23 -> WdInternationalPM
       24 -> WdTimeSeparator
       25 -> WdDateSeparator
       26 -> WdProductLanguageID
       _ -> error "unmarshallWdInternationalIndex: illegal enum value "
  
instance Variant (WdInternationalIndex) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAutoMacros
 = WdAutoExec
 | WdAutoNew
 | WdAutoOpen
 | WdAutoClose
 | WdAutoExit
 | WdAutoSync
 deriving (Enum)
instance Variant (WdAutoMacros) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCaptionPosition
 = WdCaptionPositionList__ [WdCaptionPosition]
 | WdCaptionPositionAbove
 | WdCaptionPositionBelow
 
instance Flags (WdCaptionPosition) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdCaptionPosition) where
  fromEnum v =
    case v of
       (WdCaptionPositionList__ xs) -> orList (map fromEnum xs)
       WdCaptionPositionAbove -> 0
       WdCaptionPositionBelow -> 1
  
  toEnum v =
    case v of
       0 -> WdCaptionPositionAbove
       1 -> WdCaptionPositionBelow
       x -> WdCaptionPositionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdCaptionPosition: illegal enum value "
  
instance Variant (WdCaptionPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCountry
 = WdUS
 | WdCanada
 | WdLatinAmerica
 | WdNetherlands
 | WdFrance
 | WdSpain
 | WdItaly
 | WdUK
 | WdDenmark
 | WdSweden
 | WdNorway
 | WdGermany
 | WdPeru
 | WdMexico
 | WdArgentina
 | WdBrazil
 | WdChile
 | WdVenezuela
 | WdJapan
 | WdKorea
 | WdChina
 | WdIceland
 | WdFinland
 | WdTaiwan
 
instance Enum (WdCountry) where
  fromEnum v =
    case v of
       WdUS -> 1
       WdCanada -> 2
       WdLatinAmerica -> 3
       WdNetherlands -> 31
       WdFrance -> 33
       WdSpain -> 34
       WdItaly -> 39
       WdUK -> 44
       WdDenmark -> 45
       WdSweden -> 46
       WdNorway -> 47
       WdGermany -> 49
       WdPeru -> 51
       WdMexico -> 52
       WdArgentina -> 54
       WdBrazil -> 55
       WdChile -> 56
       WdVenezuela -> 58
       WdJapan -> 81
       WdKorea -> 82
       WdChina -> 86
       WdIceland -> 354
       WdFinland -> 358
       WdTaiwan -> 886
  
  toEnum v =
    case v of
       1 -> WdUS
       2 -> WdCanada
       3 -> WdLatinAmerica
       31 -> WdNetherlands
       33 -> WdFrance
       34 -> WdSpain
       39 -> WdItaly
       44 -> WdUK
       45 -> WdDenmark
       46 -> WdSweden
       47 -> WdNorway
       49 -> WdGermany
       51 -> WdPeru
       52 -> WdMexico
       54 -> WdArgentina
       55 -> WdBrazil
       56 -> WdChile
       58 -> WdVenezuela
       81 -> WdJapan
       82 -> WdKorea
       86 -> WdChina
       354 -> WdIceland
       358 -> WdFinland
       886 -> WdTaiwan
       _ -> error "unmarshallWdCountry: illegal enum value "
  
instance Variant (WdCountry) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHeadingSeparator
 = WdHeadingSeparatorNone
 | WdHeadingSeparatorBlankLine
 | WdHeadingSeparatorLetter
 | WdHeadingSeparatorLetterLow
 | WdHeadingSeparatorLetterFull
 deriving (Enum)
instance Variant (WdHeadingSeparator) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSeparatorType
 = WdSeparatorHyphen
 | WdSeparatorPeriod
 | WdSeparatorColon
 | WdSeparatorEmDash
 | WdSeparatorEnDash
 deriving (Enum)
instance Variant (WdSeparatorType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPageNumberAlignment
 = WdAlignPageNumberLeft
 | WdAlignPageNumberCenter
 | WdAlignPageNumberRight
 | WdAlignPageNumberInside
 | WdAlignPageNumberOutside
 deriving (Enum)
instance Variant (WdPageNumberAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBorderType
 = WdBorderDiagonalUp
 | WdBorderDiagonalDown
 | WdBorderVertical
 | WdBorderHorizontal
 | WdBorderRight
 | WdBorderBottom
 | WdBorderLeft
 | WdBorderTop
 
instance Enum (WdBorderType) where
  fromEnum v =
    case v of
       WdBorderDiagonalUp -> (-8)
       WdBorderDiagonalDown -> (-7)
       WdBorderVertical -> (-6)
       WdBorderHorizontal -> (-5)
       WdBorderRight -> (-4)
       WdBorderBottom -> (-3)
       WdBorderLeft -> (-2)
       WdBorderTop -> (-1)
  
  toEnum v =
    case v of
       (-8) -> WdBorderDiagonalUp
       (-7) -> WdBorderDiagonalDown
       (-6) -> WdBorderVertical
       (-5) -> WdBorderHorizontal
       (-4) -> WdBorderRight
       (-3) -> WdBorderBottom
       (-2) -> WdBorderLeft
       (-1) -> WdBorderTop
       _ -> error "unmarshallWdBorderType: illegal enum value "
  
instance Variant (WdBorderType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBorderTypeHID = Emptyenum 
instance Enum (WdBorderTypeHID) where
  fromEnum v = case v of Emptyenum -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum
       _ -> error "unmarshallWdBorderTypeHID: illegal enum value "
  
instance Variant (WdBorderTypeHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFramePosition
 = WdFrameTop
 | WdFrameLeft
 | WdFrameBottom
 | WdFrameRight
 | WdFrameCenter
 | WdFrameInside
 | WdFrameOutside
 
instance Enum (WdFramePosition) where
  fromEnum v =
    case v of
       WdFrameTop -> (-999999)
       WdFrameLeft -> (-999998)
       WdFrameBottom -> (-999997)
       WdFrameRight -> (-999996)
       WdFrameCenter -> (-999995)
       WdFrameInside -> (-999994)
       WdFrameOutside -> (-999993)
  
  toEnum v =
    case v of
       (-999999) -> WdFrameTop
       (-999998) -> WdFrameLeft
       (-999997) -> WdFrameBottom
       (-999996) -> WdFrameRight
       (-999995) -> WdFrameCenter
       (-999994) -> WdFrameInside
       (-999993) -> WdFrameOutside
       _ -> error "unmarshallWdFramePosition: illegal enum value "
  
instance Variant (WdFramePosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAnimation
 = WdAnimationNone
 | WdAnimationLasVegasLights
 | WdAnimationBlinkingBackground
 | WdAnimationSparkleText
 | WdAnimationMarchingBlackAnts
 | WdAnimationMarchingRedAnts
 | WdAnimationShimmer
 deriving (Enum)
instance Variant (WdAnimation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCharacterCase
 = WdNextCase
 | WdLowerCase
 | WdUpperCase
 | WdTitleWord
 | WdTitleSentence
 | WdToggleCase
 | WdHalfWidth
 | WdFullWidth
 | WdKatakana
 | WdHiragana
 
instance Enum (WdCharacterCase) where
  fromEnum v =
    case v of
       WdNextCase -> (-1)
       WdLowerCase -> 0
       WdUpperCase -> 1
       WdTitleWord -> 2
       WdTitleSentence -> 4
       WdToggleCase -> 5
       WdHalfWidth -> 6
       WdFullWidth -> 7
       WdKatakana -> 8
       WdHiragana -> 9
  
  toEnum v =
    case v of
       (-1) -> WdNextCase
       0 -> WdLowerCase
       1 -> WdUpperCase
       2 -> WdTitleWord
       4 -> WdTitleSentence
       5 -> WdToggleCase
       6 -> WdHalfWidth
       7 -> WdFullWidth
       8 -> WdKatakana
       9 -> WdHiragana
       _ -> error "unmarshallWdCharacterCase: illegal enum value "
  
instance Variant (WdCharacterCase) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCharacterCaseHID = Emptyenum0 
instance Enum (WdCharacterCaseHID) where
  fromEnum v = case v of Emptyenum0 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum0
       _ -> error "unmarshallWdCharacterCaseHID: illegal enum value "
  
instance Variant (WdCharacterCaseHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSummaryMode
 = WdSummaryModeHighlight
 | WdSummaryModeHideAllButSummary
 | WdSummaryModeInsert
 | WdSummaryModeCreateNew
 deriving (Enum)
instance Variant (WdSummaryMode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSummaryLength
 = Wd75Percent
 | Wd50Percent
 | Wd25Percent
 | Wd10Percent
 | Wd500Words
 | Wd100Words
 | Wd20Sentences
 | Wd10Sentences
 
instance Enum (WdSummaryLength) where
  fromEnum v =
    case v of
       Wd75Percent -> (-9)
       Wd50Percent -> (-8)
       Wd25Percent -> (-7)
       Wd10Percent -> (-6)
       Wd500Words -> (-5)
       Wd100Words -> (-4)
       Wd20Sentences -> (-3)
       Wd10Sentences -> (-2)
  
  toEnum v =
    case v of
       (-9) -> Wd75Percent
       (-8) -> Wd50Percent
       (-7) -> Wd25Percent
       (-6) -> Wd10Percent
       (-5) -> Wd500Words
       (-4) -> Wd100Words
       (-3) -> Wd20Sentences
       (-2) -> Wd10Sentences
       _ -> error "unmarshallWdSummaryLength: illegal enum value "
  
instance Variant (WdSummaryLength) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdStyleType
 = WdStyleTypeParagraph
 | WdStyleTypeCharacter
 | WdStyleTypeTable
 | WdStyleTypeList
 | WdStyleTypeParagraphOnly
 | WdStyleTypeLinked
 
instance Enum (WdStyleType) where
  fromEnum v =
    case v of
       WdStyleTypeParagraph -> 1
       WdStyleTypeCharacter -> 2
       WdStyleTypeTable -> 3
       WdStyleTypeList -> 4
       WdStyleTypeParagraphOnly -> 5
       WdStyleTypeLinked -> 6
  
  toEnum v =
    case v of
       1 -> WdStyleTypeParagraph
       2 -> WdStyleTypeCharacter
       3 -> WdStyleTypeTable
       4 -> WdStyleTypeList
       5 -> WdStyleTypeParagraphOnly
       6 -> WdStyleTypeLinked
       _ -> error "unmarshallWdStyleType: illegal enum value "
  
instance Variant (WdStyleType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdUnits
 = WdCharacter
 | WdWord
 | WdSentence
 | WdParagraph
 | WdLine
 | WdStory
 | WdScreen
 | WdSection
 | WdColumn
 | WdRow
 | WdWindow
 | WdCell
 | WdCharacterFormatting
 | WdParagraphFormatting
 | WdTable
 | WdItem
 
instance Enum (WdUnits) where
  fromEnum v =
    case v of
       WdCharacter -> 1
       WdWord -> 2
       WdSentence -> 3
       WdParagraph -> 4
       WdLine -> 5
       WdStory -> 6
       WdScreen -> 7
       WdSection -> 8
       WdColumn -> 9
       WdRow -> 10
       WdWindow -> 11
       WdCell -> 12
       WdCharacterFormatting -> 13
       WdParagraphFormatting -> 14
       WdTable -> 15
       WdItem -> 16
  
  toEnum v =
    case v of
       1 -> WdCharacter
       2 -> WdWord
       3 -> WdSentence
       4 -> WdParagraph
       5 -> WdLine
       6 -> WdStory
       7 -> WdScreen
       8 -> WdSection
       9 -> WdColumn
       10 -> WdRow
       11 -> WdWindow
       12 -> WdCell
       13 -> WdCharacterFormatting
       14 -> WdParagraphFormatting
       15 -> WdTable
       16 -> WdItem
       _ -> error "unmarshallWdUnits: illegal enum value "
  
instance Variant (WdUnits) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdGoToItem
 = WdGoToBookmark
 | WdGoToSection
 | WdGoToPage
 | WdGoToTable
 | WdGoToLine
 | WdGoToFootnote
 | WdGoToEndnote
 | WdGoToComment
 | WdGoToField
 | WdGoToGraphic
 | WdGoToObject
 | WdGoToEquation
 | WdGoToHeading
 | WdGoToPercent
 | WdGoToSpellingError
 | WdGoToGrammaticalError
 | WdGoToProofreadingError
 
instance Enum (WdGoToItem) where
  fromEnum v =
    case v of
       WdGoToBookmark -> (-1)
       WdGoToSection -> 0
       WdGoToPage -> 1
       WdGoToTable -> 2
       WdGoToLine -> 3
       WdGoToFootnote -> 4
       WdGoToEndnote -> 5
       WdGoToComment -> 6
       WdGoToField -> 7
       WdGoToGraphic -> 8
       WdGoToObject -> 9
       WdGoToEquation -> 10
       WdGoToHeading -> 11
       WdGoToPercent -> 12
       WdGoToSpellingError -> 13
       WdGoToGrammaticalError -> 14
       WdGoToProofreadingError -> 15
  
  toEnum v =
    case v of
       (-1) -> WdGoToBookmark
       0 -> WdGoToSection
       1 -> WdGoToPage
       2 -> WdGoToTable
       3 -> WdGoToLine
       4 -> WdGoToFootnote
       5 -> WdGoToEndnote
       6 -> WdGoToComment
       7 -> WdGoToField
       8 -> WdGoToGraphic
       9 -> WdGoToObject
       10 -> WdGoToEquation
       11 -> WdGoToHeading
       12 -> WdGoToPercent
       13 -> WdGoToSpellingError
       14 -> WdGoToGrammaticalError
       15 -> WdGoToProofreadingError
       _ -> error "unmarshallWdGoToItem: illegal enum value "
  
instance Variant (WdGoToItem) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdGoToDirection
 = WdGoToLast
 | WdGoToFirst
 | WdGoToAbsolute
 | WdGoToNext
 | WdGoToRelative
 | WdGoToPrevious
 
instance Enum (WdGoToDirection) where
  fromEnum v =
    case v of
       WdGoToLast -> (-1)
       WdGoToFirst -> 1
       WdGoToAbsolute -> 1
       WdGoToNext -> 2
       WdGoToRelative -> 2
       WdGoToPrevious -> 3
  
  toEnum v =
    case v of
       (-1) -> WdGoToLast
       1 -> WdGoToFirst
       1 -> WdGoToAbsolute
       2 -> WdGoToNext
       2 -> WdGoToRelative
       3 -> WdGoToPrevious
       _ -> error "unmarshallWdGoToDirection: illegal enum value "
  
instance Variant (WdGoToDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCollapseDirection
 = WdCollapseDirectionList__ [WdCollapseDirection]
 | WdCollapseEnd
 | WdCollapseStart
 
instance Flags (WdCollapseDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdCollapseDirection) where
  fromEnum v =
    case v of
       (WdCollapseDirectionList__ xs) -> orList (map fromEnum xs)
       WdCollapseEnd -> 0
       WdCollapseStart -> 1
  
  toEnum v =
    case v of
       0 -> WdCollapseEnd
       1 -> WdCollapseStart
       x -> WdCollapseDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdCollapseDirection: illegal enum value "
  
instance Variant (WdCollapseDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRowHeightRule
 = WdRowHeightRuleList__ [WdRowHeightRule]
 | WdRowHeightAuto
 | WdRowHeightAtLeast
 | WdRowHeightExactly
 
instance Flags (WdRowHeightRule) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRowHeightRule) where
  fromEnum v =
    case v of
       (WdRowHeightRuleList__ xs) -> orList (map fromEnum xs)
       WdRowHeightAuto -> 0
       WdRowHeightAtLeast -> 1
       WdRowHeightExactly -> 2
  
  toEnum v =
    case v of
       0 -> WdRowHeightAuto
       1 -> WdRowHeightAtLeast
       2 -> WdRowHeightExactly
       x -> WdRowHeightRuleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdRowHeightRule: illegal enum value "
  
instance Variant (WdRowHeightRule) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFrameSizeRule
 = WdFrameSizeRuleList__ [WdFrameSizeRule]
 | WdFrameAuto
 | WdFrameAtLeast
 | WdFrameExact
 
instance Flags (WdFrameSizeRule) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFrameSizeRule) where
  fromEnum v =
    case v of
       (WdFrameSizeRuleList__ xs) -> orList (map fromEnum xs)
       WdFrameAuto -> 0
       WdFrameAtLeast -> 1
       WdFrameExact -> 2
  
  toEnum v =
    case v of
       0 -> WdFrameAuto
       1 -> WdFrameAtLeast
       2 -> WdFrameExact
       x -> WdFrameSizeRuleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdFrameSizeRule: illegal enum value "
  
instance Variant (WdFrameSizeRule) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdInsertCells
 = WdInsertCellsShiftRight
 | WdInsertCellsShiftDown
 | WdInsertCellsEntireRow
 | WdInsertCellsEntireColumn
 deriving (Enum)
instance Variant (WdInsertCells) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDeleteCells
 = WdDeleteCellsShiftLeft
 | WdDeleteCellsShiftUp
 | WdDeleteCellsEntireRow
 | WdDeleteCellsEntireColumn
 deriving (Enum)
instance Variant (WdDeleteCells) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdListApplyTo
 = WdListApplyToList__ [WdListApplyTo]
 | WdListApplyToWholeList
 | WdListApplyToThisPointForward
 | WdListApplyToSelection
 
instance Flags (WdListApplyTo) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdListApplyTo) where
  fromEnum v =
    case v of
       (WdListApplyToList__ xs) -> orList (map fromEnum xs)
       WdListApplyToWholeList -> 0
       WdListApplyToThisPointForward -> 1
       WdListApplyToSelection -> 2
  
  toEnum v =
    case v of
       0 -> WdListApplyToWholeList
       1 -> WdListApplyToThisPointForward
       2 -> WdListApplyToSelection
       x -> WdListApplyToList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdListApplyTo: illegal enum value "
  
instance Variant (WdListApplyTo) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAlertLevel
 = WdAlertsMessageBox
 | WdAlertsAll
 | WdAlertsNone
 
instance Enum (WdAlertLevel) where
  fromEnum v =
    case v of
       WdAlertsMessageBox -> (-2)
       WdAlertsAll -> (-1)
       WdAlertsNone -> 0
  
  toEnum v =
    case v of
       (-2) -> WdAlertsMessageBox
       (-1) -> WdAlertsAll
       0 -> WdAlertsNone
       _ -> error "unmarshallWdAlertLevel: illegal enum value "
  
instance Variant (WdAlertLevel) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCursorType
 = WdCursorWait
 | WdCursorIBeam
 | WdCursorNormal
 | WdCursorNorthwestArrow
 deriving (Enum)
instance Variant (WdCursorType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEnableCancelKey
 = WdEnableCancelKeyList__ [WdEnableCancelKey]
 | WdCancelDisabled
 | WdCancelInterrupt
 
instance Flags (WdEnableCancelKey) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdEnableCancelKey) where
  fromEnum v =
    case v of
       (WdEnableCancelKeyList__ xs) -> orList (map fromEnum xs)
       WdCancelDisabled -> 0
       WdCancelInterrupt -> 1
  
  toEnum v =
    case v of
       0 -> WdCancelDisabled
       1 -> WdCancelInterrupt
       x -> WdEnableCancelKeyList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdEnableCancelKey: illegal enum value "
  
instance Variant (WdEnableCancelKey) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRulerStyle
 = WdAdjustNone
 | WdAdjustProportional
 | WdAdjustFirstColumn
 | WdAdjustSameWidth
 deriving (Enum)
instance Variant (WdRulerStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdParagraphAlignment
 = WdAlignParagraphLeft
 | WdAlignParagraphCenter
 | WdAlignParagraphRight
 | WdAlignParagraphJustify
 | WdAlignParagraphDistribute
 | WdAlignParagraphJustifyMed
 | WdAlignParagraphJustifyHi
 | WdAlignParagraphJustifyLow
 | WdAlignParagraphThaiJustify
 
instance Enum (WdParagraphAlignment) where
  fromEnum v =
    case v of
       WdAlignParagraphLeft -> 0
       WdAlignParagraphCenter -> 1
       WdAlignParagraphRight -> 2
       WdAlignParagraphJustify -> 3
       WdAlignParagraphDistribute -> 4
       WdAlignParagraphJustifyMed -> 5
       WdAlignParagraphJustifyHi -> 7
       WdAlignParagraphJustifyLow -> 8
       WdAlignParagraphThaiJustify -> 9
  
  toEnum v =
    case v of
       0 -> WdAlignParagraphLeft
       1 -> WdAlignParagraphCenter
       2 -> WdAlignParagraphRight
       3 -> WdAlignParagraphJustify
       4 -> WdAlignParagraphDistribute
       5 -> WdAlignParagraphJustifyMed
       7 -> WdAlignParagraphJustifyHi
       8 -> WdAlignParagraphJustifyLow
       9 -> WdAlignParagraphThaiJustify
       _ -> error "unmarshallWdParagraphAlignment: illegal enum value "
  
instance Variant (WdParagraphAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdParagraphAlignmentHID = Emptyenum1 
instance Enum (WdParagraphAlignmentHID) where
  fromEnum v = case v of Emptyenum1 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum1
       _ -> error "unmarshallWdParagraphAlignmentHID: illegal enum value "
  
instance Variant (WdParagraphAlignmentHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdListLevelAlignment
 = WdListLevelAlignmentList__ [WdListLevelAlignment]
 | WdListLevelAlignLeft
 | WdListLevelAlignCenter
 | WdListLevelAlignRight
 
instance Flags (WdListLevelAlignment) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdListLevelAlignment) where
  fromEnum v =
    case v of
       (WdListLevelAlignmentList__ xs) -> orList (map fromEnum xs)
       WdListLevelAlignLeft -> 0
       WdListLevelAlignCenter -> 1
       WdListLevelAlignRight -> 2
  
  toEnum v =
    case v of
       0 -> WdListLevelAlignLeft
       1 -> WdListLevelAlignCenter
       2 -> WdListLevelAlignRight
       x -> WdListLevelAlignmentList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdListLevelAlignment: illegal enum value "
  
instance Variant (WdListLevelAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRowAlignment
 = WdRowAlignmentList__ [WdRowAlignment]
 | WdAlignRowLeft
 | WdAlignRowCenter
 | WdAlignRowRight
 
instance Flags (WdRowAlignment) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRowAlignment) where
  fromEnum v =
    case v of
       (WdRowAlignmentList__ xs) -> orList (map fromEnum xs)
       WdAlignRowLeft -> 0
       WdAlignRowCenter -> 1
       WdAlignRowRight -> 2
  
  toEnum v =
    case v of
       0 -> WdAlignRowLeft
       1 -> WdAlignRowCenter
       2 -> WdAlignRowRight
       x -> WdRowAlignmentList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdRowAlignment: illegal enum value "
  
instance Variant (WdRowAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTabAlignment
 = WdAlignTabLeft
 | WdAlignTabCenter
 | WdAlignTabRight
 | WdAlignTabDecimal
 | WdAlignTabBar
 | WdAlignTabList
 
instance Enum (WdTabAlignment) where
  fromEnum v =
    case v of
       WdAlignTabLeft -> 0
       WdAlignTabCenter -> 1
       WdAlignTabRight -> 2
       WdAlignTabDecimal -> 3
       WdAlignTabBar -> 4
       WdAlignTabList -> 6
  
  toEnum v =
    case v of
       0 -> WdAlignTabLeft
       1 -> WdAlignTabCenter
       2 -> WdAlignTabRight
       3 -> WdAlignTabDecimal
       4 -> WdAlignTabBar
       6 -> WdAlignTabList
       _ -> error "unmarshallWdTabAlignment: illegal enum value "
  
instance Variant (WdTabAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdVerticalAlignment
 = WdAlignVerticalTop
 | WdAlignVerticalCenter
 | WdAlignVerticalJustify
 | WdAlignVerticalBottom
 deriving (Enum)
instance Variant (WdVerticalAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCellVerticalAlignment
 = WdCellAlignVerticalTop
 | WdCellAlignVerticalCenter
 | WdCellAlignVerticalBottom
 
instance Enum (WdCellVerticalAlignment) where
  fromEnum v =
    case v of
       WdCellAlignVerticalTop -> 0
       WdCellAlignVerticalCenter -> 1
       WdCellAlignVerticalBottom -> 3
  
  toEnum v =
    case v of
       0 -> WdCellAlignVerticalTop
       1 -> WdCellAlignVerticalCenter
       3 -> WdCellAlignVerticalBottom
       _ -> error "unmarshallWdCellVerticalAlignment: illegal enum value "
  
instance Variant (WdCellVerticalAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTrailingCharacter
 = WdTrailingCharacterList__ [WdTrailingCharacter]
 | WdTrailingTab
 | WdTrailingSpace
 | WdTrailingNone
 
instance Flags (WdTrailingCharacter) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdTrailingCharacter) where
  fromEnum v =
    case v of
       (WdTrailingCharacterList__ xs) -> orList (map fromEnum xs)
       WdTrailingTab -> 0
       WdTrailingSpace -> 1
       WdTrailingNone -> 2
  
  toEnum v =
    case v of
       0 -> WdTrailingTab
       1 -> WdTrailingSpace
       2 -> WdTrailingNone
       x -> WdTrailingCharacterList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdTrailingCharacter: illegal enum value "
  
instance Variant (WdTrailingCharacter) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdListGalleryType
 = WdBulletGallery
 | WdNumberGallery
 | WdOutlineNumberGallery
 
instance Enum (WdListGalleryType) where
  fromEnum v =
    case v of
       WdBulletGallery -> 1
       WdNumberGallery -> 2
       WdOutlineNumberGallery -> 3
  
  toEnum v =
    case v of
       1 -> WdBulletGallery
       2 -> WdNumberGallery
       3 -> WdOutlineNumberGallery
       _ -> error "unmarshallWdListGalleryType: illegal enum value "
  
instance Variant (WdListGalleryType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdListNumberStyle
 = WdListNumberStyleArabic
 | WdListNumberStyleUppercaseRoman
 | WdListNumberStyleLowercaseRoman
 | WdListNumberStyleUppercaseLetter
 | WdListNumberStyleLowercaseLetter
 | WdListNumberStyleOrdinal
 | WdListNumberStyleCardinalText
 | WdListNumberStyleOrdinalText
 | WdListNumberStyleKanji
 | WdListNumberStyleKanjiDigit
 | WdListNumberStyleAiueoHalfWidth
 | WdListNumberStyleIrohaHalfWidth
 | WdListNumberStyleArabicFullWidth
 | WdListNumberStyleKanjiTraditional
 | WdListNumberStyleKanjiTraditional2
 | WdListNumberStyleNumberInCircle
 | WdListNumberStyleAiueo
 | WdListNumberStyleIroha
 | WdListNumberStyleArabicLZ
 | WdListNumberStyleBullet
 | WdListNumberStyleGanada
 | WdListNumberStyleChosung
 | WdListNumberStyleGBNum1
 | WdListNumberStyleGBNum2
 | WdListNumberStyleGBNum3
 | WdListNumberStyleGBNum4
 | WdListNumberStyleZodiac1
 | WdListNumberStyleZodiac2
 | WdListNumberStyleZodiac3
 | WdListNumberStyleTradChinNum1
 | WdListNumberStyleTradChinNum2
 | WdListNumberStyleTradChinNum3
 | WdListNumberStyleTradChinNum4
 | WdListNumberStyleSimpChinNum1
 | WdListNumberStyleSimpChinNum2
 | WdListNumberStyleSimpChinNum3
 | WdListNumberStyleSimpChinNum4
 | WdListNumberStyleHanjaRead
 | WdListNumberStyleHanjaReadDigit
 | WdListNumberStyleHangul
 | WdListNumberStyleHanja
 | WdListNumberStyleHebrew1
 | WdListNumberStyleArabic1
 | WdListNumberStyleHebrew2
 | WdListNumberStyleArabic2
 | WdListNumberStyleHindiLetter1
 | WdListNumberStyleHindiLetter2
 | WdListNumberStyleHindiArabic
 | WdListNumberStyleHindiCardinalText
 | WdListNumberStyleThaiLetter
 | WdListNumberStyleThaiArabic
 | WdListNumberStyleThaiCardinalText
 | WdListNumberStyleVietCardinalText
 | WdListNumberStyleLowercaseRussian
 | WdListNumberStyleUppercaseRussian
 | WdListNumberStylePictureBullet
 | WdListNumberStyleLegal
 | WdListNumberStyleLegalLZ
 | WdListNumberStyleNone
 
instance Enum (WdListNumberStyle) where
  fromEnum v =
    case v of
       WdListNumberStyleArabic -> 0
       WdListNumberStyleUppercaseRoman -> 1
       WdListNumberStyleLowercaseRoman -> 2
       WdListNumberStyleUppercaseLetter -> 3
       WdListNumberStyleLowercaseLetter -> 4
       WdListNumberStyleOrdinal -> 5
       WdListNumberStyleCardinalText -> 6
       WdListNumberStyleOrdinalText -> 7
       WdListNumberStyleKanji -> 10
       WdListNumberStyleKanjiDigit -> 11
       WdListNumberStyleAiueoHalfWidth -> 12
       WdListNumberStyleIrohaHalfWidth -> 13
       WdListNumberStyleArabicFullWidth -> 14
       WdListNumberStyleKanjiTraditional -> 16
       WdListNumberStyleKanjiTraditional2 -> 17
       WdListNumberStyleNumberInCircle -> 18
       WdListNumberStyleAiueo -> 20
       WdListNumberStyleIroha -> 21
       WdListNumberStyleArabicLZ -> 22
       WdListNumberStyleBullet -> 23
       WdListNumberStyleGanada -> 24
       WdListNumberStyleChosung -> 25
       WdListNumberStyleGBNum1 -> 26
       WdListNumberStyleGBNum2 -> 27
       WdListNumberStyleGBNum3 -> 28
       WdListNumberStyleGBNum4 -> 29
       WdListNumberStyleZodiac1 -> 30
       WdListNumberStyleZodiac2 -> 31
       WdListNumberStyleZodiac3 -> 32
       WdListNumberStyleTradChinNum1 -> 33
       WdListNumberStyleTradChinNum2 -> 34
       WdListNumberStyleTradChinNum3 -> 35
       WdListNumberStyleTradChinNum4 -> 36
       WdListNumberStyleSimpChinNum1 -> 37
       WdListNumberStyleSimpChinNum2 -> 38
       WdListNumberStyleSimpChinNum3 -> 39
       WdListNumberStyleSimpChinNum4 -> 40
       WdListNumberStyleHanjaRead -> 41
       WdListNumberStyleHanjaReadDigit -> 42
       WdListNumberStyleHangul -> 43
       WdListNumberStyleHanja -> 44
       WdListNumberStyleHebrew1 -> 45
       WdListNumberStyleArabic1 -> 46
       WdListNumberStyleHebrew2 -> 47
       WdListNumberStyleArabic2 -> 48
       WdListNumberStyleHindiLetter1 -> 49
       WdListNumberStyleHindiLetter2 -> 50
       WdListNumberStyleHindiArabic -> 51
       WdListNumberStyleHindiCardinalText -> 52
       WdListNumberStyleThaiLetter -> 53
       WdListNumberStyleThaiArabic -> 54
       WdListNumberStyleThaiCardinalText -> 55
       WdListNumberStyleVietCardinalText -> 56
       WdListNumberStyleLowercaseRussian -> 58
       WdListNumberStyleUppercaseRussian -> 59
       WdListNumberStylePictureBullet -> 249
       WdListNumberStyleLegal -> 253
       WdListNumberStyleLegalLZ -> 254
       WdListNumberStyleNone -> 255
  
  toEnum v =
    case v of
       0 -> WdListNumberStyleArabic
       1 -> WdListNumberStyleUppercaseRoman
       2 -> WdListNumberStyleLowercaseRoman
       3 -> WdListNumberStyleUppercaseLetter
       4 -> WdListNumberStyleLowercaseLetter
       5 -> WdListNumberStyleOrdinal
       6 -> WdListNumberStyleCardinalText
       7 -> WdListNumberStyleOrdinalText
       10 -> WdListNumberStyleKanji
       11 -> WdListNumberStyleKanjiDigit
       12 -> WdListNumberStyleAiueoHalfWidth
       13 -> WdListNumberStyleIrohaHalfWidth
       14 -> WdListNumberStyleArabicFullWidth
       16 -> WdListNumberStyleKanjiTraditional
       17 -> WdListNumberStyleKanjiTraditional2
       18 -> WdListNumberStyleNumberInCircle
       20 -> WdListNumberStyleAiueo
       21 -> WdListNumberStyleIroha
       22 -> WdListNumberStyleArabicLZ
       23 -> WdListNumberStyleBullet
       24 -> WdListNumberStyleGanada
       25 -> WdListNumberStyleChosung
       26 -> WdListNumberStyleGBNum1
       27 -> WdListNumberStyleGBNum2
       28 -> WdListNumberStyleGBNum3
       29 -> WdListNumberStyleGBNum4
       30 -> WdListNumberStyleZodiac1
       31 -> WdListNumberStyleZodiac2
       32 -> WdListNumberStyleZodiac3
       33 -> WdListNumberStyleTradChinNum1
       34 -> WdListNumberStyleTradChinNum2
       35 -> WdListNumberStyleTradChinNum3
       36 -> WdListNumberStyleTradChinNum4
       37 -> WdListNumberStyleSimpChinNum1
       38 -> WdListNumberStyleSimpChinNum2
       39 -> WdListNumberStyleSimpChinNum3
       40 -> WdListNumberStyleSimpChinNum4
       41 -> WdListNumberStyleHanjaRead
       42 -> WdListNumberStyleHanjaReadDigit
       43 -> WdListNumberStyleHangul
       44 -> WdListNumberStyleHanja
       45 -> WdListNumberStyleHebrew1
       46 -> WdListNumberStyleArabic1
       47 -> WdListNumberStyleHebrew2
       48 -> WdListNumberStyleArabic2
       49 -> WdListNumberStyleHindiLetter1
       50 -> WdListNumberStyleHindiLetter2
       51 -> WdListNumberStyleHindiArabic
       52 -> WdListNumberStyleHindiCardinalText
       53 -> WdListNumberStyleThaiLetter
       54 -> WdListNumberStyleThaiArabic
       55 -> WdListNumberStyleThaiCardinalText
       56 -> WdListNumberStyleVietCardinalText
       58 -> WdListNumberStyleLowercaseRussian
       59 -> WdListNumberStyleUppercaseRussian
       249 -> WdListNumberStylePictureBullet
       253 -> WdListNumberStyleLegal
       254 -> WdListNumberStyleLegalLZ
       255 -> WdListNumberStyleNone
       _ -> error "unmarshallWdListNumberStyle: illegal enum value "
  
instance Variant (WdListNumberStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdListNumberStyleHID = Emptyenum2 
instance Enum (WdListNumberStyleHID) where
  fromEnum v = case v of Emptyenum2 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum2
       _ -> error "unmarshallWdListNumberStyleHID: illegal enum value "
  
instance Variant (WdListNumberStyleHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdNoteNumberStyle
 = WdNoteNumberStyleArabic
 | WdNoteNumberStyleUppercaseRoman
 | WdNoteNumberStyleLowercaseRoman
 | WdNoteNumberStyleUppercaseLetter
 | WdNoteNumberStyleLowercaseLetter
 | WdNoteNumberStyleSymbol
 | WdNoteNumberStyleKanji
 | WdNoteNumberStyleKanjiDigit
 | WdNoteNumberStyleArabicFullWidth
 | WdNoteNumberStyleKanjiTraditional
 | WdNoteNumberStyleNumberInCircle
 | WdNoteNumberStyleTradChinNum1
 | WdNoteNumberStyleTradChinNum2
 | WdNoteNumberStyleSimpChinNum1
 | WdNoteNumberStyleSimpChinNum2
 | WdNoteNumberStyleHanjaRead
 | WdNoteNumberStyleHanjaReadDigit
 | WdNoteNumberStyleHebrewLetter1
 | WdNoteNumberStyleArabicLetter1
 | WdNoteNumberStyleHebrewLetter2
 | WdNoteNumberStyleArabicLetter2
 | WdNoteNumberStyleHindiLetter1
 | WdNoteNumberStyleHindiLetter2
 | WdNoteNumberStyleHindiArabic
 | WdNoteNumberStyleHindiCardinalText
 | WdNoteNumberStyleThaiLetter
 | WdNoteNumberStyleThaiArabic
 | WdNoteNumberStyleThaiCardinalText
 | WdNoteNumberStyleVietCardinalText
 
instance Enum (WdNoteNumberStyle) where
  fromEnum v =
    case v of
       WdNoteNumberStyleArabic -> 0
       WdNoteNumberStyleUppercaseRoman -> 1
       WdNoteNumberStyleLowercaseRoman -> 2
       WdNoteNumberStyleUppercaseLetter -> 3
       WdNoteNumberStyleLowercaseLetter -> 4
       WdNoteNumberStyleSymbol -> 9
       WdNoteNumberStyleKanji -> 10
       WdNoteNumberStyleKanjiDigit -> 11
       WdNoteNumberStyleArabicFullWidth -> 14
       WdNoteNumberStyleKanjiTraditional -> 16
       WdNoteNumberStyleNumberInCircle -> 18
       WdNoteNumberStyleTradChinNum1 -> 33
       WdNoteNumberStyleTradChinNum2 -> 34
       WdNoteNumberStyleSimpChinNum1 -> 37
       WdNoteNumberStyleSimpChinNum2 -> 38
       WdNoteNumberStyleHanjaRead -> 41
       WdNoteNumberStyleHanjaReadDigit -> 42
       WdNoteNumberStyleHebrewLetter1 -> 45
       WdNoteNumberStyleArabicLetter1 -> 46
       WdNoteNumberStyleHebrewLetter2 -> 47
       WdNoteNumberStyleArabicLetter2 -> 48
       WdNoteNumberStyleHindiLetter1 -> 49
       WdNoteNumberStyleHindiLetter2 -> 50
       WdNoteNumberStyleHindiArabic -> 51
       WdNoteNumberStyleHindiCardinalText -> 52
       WdNoteNumberStyleThaiLetter -> 53
       WdNoteNumberStyleThaiArabic -> 54
       WdNoteNumberStyleThaiCardinalText -> 55
       WdNoteNumberStyleVietCardinalText -> 56
  
  toEnum v =
    case v of
       0 -> WdNoteNumberStyleArabic
       1 -> WdNoteNumberStyleUppercaseRoman
       2 -> WdNoteNumberStyleLowercaseRoman
       3 -> WdNoteNumberStyleUppercaseLetter
       4 -> WdNoteNumberStyleLowercaseLetter
       9 -> WdNoteNumberStyleSymbol
       10 -> WdNoteNumberStyleKanji
       11 -> WdNoteNumberStyleKanjiDigit
       14 -> WdNoteNumberStyleArabicFullWidth
       16 -> WdNoteNumberStyleKanjiTraditional
       18 -> WdNoteNumberStyleNumberInCircle
       33 -> WdNoteNumberStyleTradChinNum1
       34 -> WdNoteNumberStyleTradChinNum2
       37 -> WdNoteNumberStyleSimpChinNum1
       38 -> WdNoteNumberStyleSimpChinNum2
       41 -> WdNoteNumberStyleHanjaRead
       42 -> WdNoteNumberStyleHanjaReadDigit
       45 -> WdNoteNumberStyleHebrewLetter1
       46 -> WdNoteNumberStyleArabicLetter1
       47 -> WdNoteNumberStyleHebrewLetter2
       48 -> WdNoteNumberStyleArabicLetter2
       49 -> WdNoteNumberStyleHindiLetter1
       50 -> WdNoteNumberStyleHindiLetter2
       51 -> WdNoteNumberStyleHindiArabic
       52 -> WdNoteNumberStyleHindiCardinalText
       53 -> WdNoteNumberStyleThaiLetter
       54 -> WdNoteNumberStyleThaiArabic
       55 -> WdNoteNumberStyleThaiCardinalText
       56 -> WdNoteNumberStyleVietCardinalText
       _ -> error "unmarshallWdNoteNumberStyle: illegal enum value "
  
instance Variant (WdNoteNumberStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdNoteNumberStyleHID = Emptyenum3 
instance Enum (WdNoteNumberStyleHID) where
  fromEnum v = case v of Emptyenum3 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum3
       _ -> error "unmarshallWdNoteNumberStyleHID: illegal enum value "
  
instance Variant (WdNoteNumberStyleHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCaptionNumberStyle
 = WdCaptionNumberStyleArabic
 | WdCaptionNumberStyleUppercaseRoman
 | WdCaptionNumberStyleLowercaseRoman
 | WdCaptionNumberStyleUppercaseLetter
 | WdCaptionNumberStyleLowercaseLetter
 | WdCaptionNumberStyleKanji
 | WdCaptionNumberStyleKanjiDigit
 | WdCaptionNumberStyleArabicFullWidth
 | WdCaptionNumberStyleKanjiTraditional
 | WdCaptionNumberStyleNumberInCircle
 | WdCaptionNumberStyleGanada
 | WdCaptionNumberStyleChosung
 | WdCaptionNumberStyleZodiac1
 | WdCaptionNumberStyleZodiac2
 | WdCaptionNumberStyleTradChinNum2
 | WdCaptionNumberStyleTradChinNum3
 | WdCaptionNumberStyleSimpChinNum2
 | WdCaptionNumberStyleSimpChinNum3
 | WdCaptionNumberStyleHanjaRead
 | WdCaptionNumberStyleHanjaReadDigit
 | WdCaptionNumberStyleHebrewLetter1
 | WdCaptionNumberStyleArabicLetter1
 | WdCaptionNumberStyleHebrewLetter2
 | WdCaptionNumberStyleArabicLetter2
 | WdCaptionNumberStyleHindiLetter1
 | WdCaptionNumberStyleHindiLetter2
 | WdCaptionNumberStyleHindiArabic
 | WdCaptionNumberStyleHindiCardinalText
 | WdCaptionNumberStyleThaiLetter
 | WdCaptionNumberStyleThaiArabic
 | WdCaptionNumberStyleThaiCardinalText
 | WdCaptionNumberStyleVietCardinalText
 
instance Enum (WdCaptionNumberStyle) where
  fromEnum v =
    case v of
       WdCaptionNumberStyleArabic -> 0
       WdCaptionNumberStyleUppercaseRoman -> 1
       WdCaptionNumberStyleLowercaseRoman -> 2
       WdCaptionNumberStyleUppercaseLetter -> 3
       WdCaptionNumberStyleLowercaseLetter -> 4
       WdCaptionNumberStyleKanji -> 10
       WdCaptionNumberStyleKanjiDigit -> 11
       WdCaptionNumberStyleArabicFullWidth -> 14
       WdCaptionNumberStyleKanjiTraditional -> 16
       WdCaptionNumberStyleNumberInCircle -> 18
       WdCaptionNumberStyleGanada -> 24
       WdCaptionNumberStyleChosung -> 25
       WdCaptionNumberStyleZodiac1 -> 30
       WdCaptionNumberStyleZodiac2 -> 31
       WdCaptionNumberStyleTradChinNum2 -> 34
       WdCaptionNumberStyleTradChinNum3 -> 35
       WdCaptionNumberStyleSimpChinNum2 -> 38
       WdCaptionNumberStyleSimpChinNum3 -> 39
       WdCaptionNumberStyleHanjaRead -> 41
       WdCaptionNumberStyleHanjaReadDigit -> 42
       WdCaptionNumberStyleHebrewLetter1 -> 45
       WdCaptionNumberStyleArabicLetter1 -> 46
       WdCaptionNumberStyleHebrewLetter2 -> 47
       WdCaptionNumberStyleArabicLetter2 -> 48
       WdCaptionNumberStyleHindiLetter1 -> 49
       WdCaptionNumberStyleHindiLetter2 -> 50
       WdCaptionNumberStyleHindiArabic -> 51
       WdCaptionNumberStyleHindiCardinalText -> 52
       WdCaptionNumberStyleThaiLetter -> 53
       WdCaptionNumberStyleThaiArabic -> 54
       WdCaptionNumberStyleThaiCardinalText -> 55
       WdCaptionNumberStyleVietCardinalText -> 56
  
  toEnum v =
    case v of
       0 -> WdCaptionNumberStyleArabic
       1 -> WdCaptionNumberStyleUppercaseRoman
       2 -> WdCaptionNumberStyleLowercaseRoman
       3 -> WdCaptionNumberStyleUppercaseLetter
       4 -> WdCaptionNumberStyleLowercaseLetter
       10 -> WdCaptionNumberStyleKanji
       11 -> WdCaptionNumberStyleKanjiDigit
       14 -> WdCaptionNumberStyleArabicFullWidth
       16 -> WdCaptionNumberStyleKanjiTraditional
       18 -> WdCaptionNumberStyleNumberInCircle
       24 -> WdCaptionNumberStyleGanada
       25 -> WdCaptionNumberStyleChosung
       30 -> WdCaptionNumberStyleZodiac1
       31 -> WdCaptionNumberStyleZodiac2
       34 -> WdCaptionNumberStyleTradChinNum2
       35 -> WdCaptionNumberStyleTradChinNum3
       38 -> WdCaptionNumberStyleSimpChinNum2
       39 -> WdCaptionNumberStyleSimpChinNum3
       41 -> WdCaptionNumberStyleHanjaRead
       42 -> WdCaptionNumberStyleHanjaReadDigit
       45 -> WdCaptionNumberStyleHebrewLetter1
       46 -> WdCaptionNumberStyleArabicLetter1
       47 -> WdCaptionNumberStyleHebrewLetter2
       48 -> WdCaptionNumberStyleArabicLetter2
       49 -> WdCaptionNumberStyleHindiLetter1
       50 -> WdCaptionNumberStyleHindiLetter2
       51 -> WdCaptionNumberStyleHindiArabic
       52 -> WdCaptionNumberStyleHindiCardinalText
       53 -> WdCaptionNumberStyleThaiLetter
       54 -> WdCaptionNumberStyleThaiArabic
       55 -> WdCaptionNumberStyleThaiCardinalText
       56 -> WdCaptionNumberStyleVietCardinalText
       _ -> error "unmarshallWdCaptionNumberStyle: illegal enum value "
  
instance Variant (WdCaptionNumberStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCaptionNumberStyleHID = Emptyenum4 
instance Enum (WdCaptionNumberStyleHID) where
  fromEnum v = case v of Emptyenum4 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum4
       _ -> error "unmarshallWdCaptionNumberStyleHID: illegal enum value "
  
instance Variant (WdCaptionNumberStyleHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPageNumberStyle
 = WdPageNumberStyleArabic
 | WdPageNumberStyleUppercaseRoman
 | WdPageNumberStyleLowercaseRoman
 | WdPageNumberStyleUppercaseLetter
 | WdPageNumberStyleLowercaseLetter
 | WdPageNumberStyleKanji
 | WdPageNumberStyleKanjiDigit
 | WdPageNumberStyleArabicFullWidth
 | WdPageNumberStyleKanjiTraditional
 | WdPageNumberStyleNumberInCircle
 | WdPageNumberStyleTradChinNum1
 | WdPageNumberStyleTradChinNum2
 | WdPageNumberStyleSimpChinNum1
 | WdPageNumberStyleSimpChinNum2
 | WdPageNumberStyleHanjaRead
 | WdPageNumberStyleHanjaReadDigit
 | WdPageNumberStyleHebrewLetter1
 | WdPageNumberStyleArabicLetter1
 | WdPageNumberStyleHebrewLetter2
 | WdPageNumberStyleArabicLetter2
 | WdPageNumberStyleHindiLetter1
 | WdPageNumberStyleHindiLetter2
 | WdPageNumberStyleHindiArabic
 | WdPageNumberStyleHindiCardinalText
 | WdPageNumberStyleThaiLetter
 | WdPageNumberStyleThaiArabic
 | WdPageNumberStyleThaiCardinalText
 | WdPageNumberStyleVietCardinalText
 | WdPageNumberStyleNumberInDash
 
instance Enum (WdPageNumberStyle) where
  fromEnum v =
    case v of
       WdPageNumberStyleArabic -> 0
       WdPageNumberStyleUppercaseRoman -> 1
       WdPageNumberStyleLowercaseRoman -> 2
       WdPageNumberStyleUppercaseLetter -> 3
       WdPageNumberStyleLowercaseLetter -> 4
       WdPageNumberStyleKanji -> 10
       WdPageNumberStyleKanjiDigit -> 11
       WdPageNumberStyleArabicFullWidth -> 14
       WdPageNumberStyleKanjiTraditional -> 16
       WdPageNumberStyleNumberInCircle -> 18
       WdPageNumberStyleTradChinNum1 -> 33
       WdPageNumberStyleTradChinNum2 -> 34
       WdPageNumberStyleSimpChinNum1 -> 37
       WdPageNumberStyleSimpChinNum2 -> 38
       WdPageNumberStyleHanjaRead -> 41
       WdPageNumberStyleHanjaReadDigit -> 42
       WdPageNumberStyleHebrewLetter1 -> 45
       WdPageNumberStyleArabicLetter1 -> 46
       WdPageNumberStyleHebrewLetter2 -> 47
       WdPageNumberStyleArabicLetter2 -> 48
       WdPageNumberStyleHindiLetter1 -> 49
       WdPageNumberStyleHindiLetter2 -> 50
       WdPageNumberStyleHindiArabic -> 51
       WdPageNumberStyleHindiCardinalText -> 52
       WdPageNumberStyleThaiLetter -> 53
       WdPageNumberStyleThaiArabic -> 54
       WdPageNumberStyleThaiCardinalText -> 55
       WdPageNumberStyleVietCardinalText -> 56
       WdPageNumberStyleNumberInDash -> 57
  
  toEnum v =
    case v of
       0 -> WdPageNumberStyleArabic
       1 -> WdPageNumberStyleUppercaseRoman
       2 -> WdPageNumberStyleLowercaseRoman
       3 -> WdPageNumberStyleUppercaseLetter
       4 -> WdPageNumberStyleLowercaseLetter
       10 -> WdPageNumberStyleKanji
       11 -> WdPageNumberStyleKanjiDigit
       14 -> WdPageNumberStyleArabicFullWidth
       16 -> WdPageNumberStyleKanjiTraditional
       18 -> WdPageNumberStyleNumberInCircle
       33 -> WdPageNumberStyleTradChinNum1
       34 -> WdPageNumberStyleTradChinNum2
       37 -> WdPageNumberStyleSimpChinNum1
       38 -> WdPageNumberStyleSimpChinNum2
       41 -> WdPageNumberStyleHanjaRead
       42 -> WdPageNumberStyleHanjaReadDigit
       45 -> WdPageNumberStyleHebrewLetter1
       46 -> WdPageNumberStyleArabicLetter1
       47 -> WdPageNumberStyleHebrewLetter2
       48 -> WdPageNumberStyleArabicLetter2
       49 -> WdPageNumberStyleHindiLetter1
       50 -> WdPageNumberStyleHindiLetter2
       51 -> WdPageNumberStyleHindiArabic
       52 -> WdPageNumberStyleHindiCardinalText
       53 -> WdPageNumberStyleThaiLetter
       54 -> WdPageNumberStyleThaiArabic
       55 -> WdPageNumberStyleThaiCardinalText
       56 -> WdPageNumberStyleVietCardinalText
       57 -> WdPageNumberStyleNumberInDash
       _ -> error "unmarshallWdPageNumberStyle: illegal enum value "
  
instance Variant (WdPageNumberStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPageNumberStyleHID = Emptyenum5 
instance Enum (WdPageNumberStyleHID) where
  fromEnum v = case v of Emptyenum5 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum5
       _ -> error "unmarshallWdPageNumberStyleHID: illegal enum value "
  
instance Variant (WdPageNumberStyleHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdStatistic
 = WdStatisticWords
 | WdStatisticLines
 | WdStatisticPages
 | WdStatisticCharacters
 | WdStatisticParagraphs
 | WdStatisticCharactersWithSpaces
 | WdStatisticFarEastCharacters
 deriving (Enum)
instance Variant (WdStatistic) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdStatisticHID = Emptyenum6 
instance Enum (WdStatisticHID) where
  fromEnum v = case v of Emptyenum6 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum6
       _ -> error "unmarshallWdStatisticHID: illegal enum value "
  
instance Variant (WdStatisticHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBuiltInProperty
 = WdPropertyTitle
 | WdPropertySubject
 | WdPropertyAuthor
 | WdPropertyKeywords
 | WdPropertyComments
 | WdPropertyTemplate
 | WdPropertyLastAuthor
 | WdPropertyRevision
 | WdPropertyAppName
 | WdPropertyTimeLastPrinted
 | WdPropertyTimeCreated
 | WdPropertyTimeLastSaved
 | WdPropertyVBATotalEdit
 | WdPropertyPages
 | WdPropertyWords
 | WdPropertyCharacters
 | WdPropertySecurity
 | WdPropertyCategory
 | WdPropertyFormat
 | WdPropertyManager
 | WdPropertyCompany
 | WdPropertyBytes
 | WdPropertyLines
 | WdPropertyParas
 | WdPropertySlides
 | WdPropertyNotes
 | WdPropertyHiddenSlides
 | WdPropertyMMClips
 | WdPropertyHyperlinkBase
 | WdPropertyCharsWSpaces
 
instance Enum (WdBuiltInProperty) where
  fromEnum v =
    case v of
       WdPropertyTitle -> 1
       WdPropertySubject -> 2
       WdPropertyAuthor -> 3
       WdPropertyKeywords -> 4
       WdPropertyComments -> 5
       WdPropertyTemplate -> 6
       WdPropertyLastAuthor -> 7
       WdPropertyRevision -> 8
       WdPropertyAppName -> 9
       WdPropertyTimeLastPrinted -> 10
       WdPropertyTimeCreated -> 11
       WdPropertyTimeLastSaved -> 12
       WdPropertyVBATotalEdit -> 13
       WdPropertyPages -> 14
       WdPropertyWords -> 15
       WdPropertyCharacters -> 16
       WdPropertySecurity -> 17
       WdPropertyCategory -> 18
       WdPropertyFormat -> 19
       WdPropertyManager -> 20
       WdPropertyCompany -> 21
       WdPropertyBytes -> 22
       WdPropertyLines -> 23
       WdPropertyParas -> 24
       WdPropertySlides -> 25
       WdPropertyNotes -> 26
       WdPropertyHiddenSlides -> 27
       WdPropertyMMClips -> 28
       WdPropertyHyperlinkBase -> 29
       WdPropertyCharsWSpaces -> 30
  
  toEnum v =
    case v of
       1 -> WdPropertyTitle
       2 -> WdPropertySubject
       3 -> WdPropertyAuthor
       4 -> WdPropertyKeywords
       5 -> WdPropertyComments
       6 -> WdPropertyTemplate
       7 -> WdPropertyLastAuthor
       8 -> WdPropertyRevision
       9 -> WdPropertyAppName
       10 -> WdPropertyTimeLastPrinted
       11 -> WdPropertyTimeCreated
       12 -> WdPropertyTimeLastSaved
       13 -> WdPropertyVBATotalEdit
       14 -> WdPropertyPages
       15 -> WdPropertyWords
       16 -> WdPropertyCharacters
       17 -> WdPropertySecurity
       18 -> WdPropertyCategory
       19 -> WdPropertyFormat
       20 -> WdPropertyManager
       21 -> WdPropertyCompany
       22 -> WdPropertyBytes
       23 -> WdPropertyLines
       24 -> WdPropertyParas
       25 -> WdPropertySlides
       26 -> WdPropertyNotes
       27 -> WdPropertyHiddenSlides
       28 -> WdPropertyMMClips
       29 -> WdPropertyHyperlinkBase
       30 -> WdPropertyCharsWSpaces
       _ -> error "unmarshallWdBuiltInProperty: illegal enum value "
  
instance Variant (WdBuiltInProperty) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLineSpacing
 = WdLineSpaceSingle
 | WdLineSpace1pt5
 | WdLineSpaceDouble
 | WdLineSpaceAtLeast
 | WdLineSpaceExactly
 | WdLineSpaceMultiple
 deriving (Enum)
instance Variant (WdLineSpacing) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdNumberType
 = WdNumberParagraph
 | WdNumberListNum
 | WdNumberAllNumbers
 
instance Enum (WdNumberType) where
  fromEnum v =
    case v of
       WdNumberParagraph -> 1
       WdNumberListNum -> 2
       WdNumberAllNumbers -> 3
  
  toEnum v =
    case v of
       1 -> WdNumberParagraph
       2 -> WdNumberListNum
       3 -> WdNumberAllNumbers
       _ -> error "unmarshallWdNumberType: illegal enum value "
  
instance Variant (WdNumberType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdListType
 = WdListNoNumbering
 | WdListListNumOnly
 | WdListBullet
 | WdListSimpleNumbering
 | WdListOutlineNumbering
 | WdListMixedNumbering
 | WdListPictureBullet
 deriving (Enum)
instance Variant (WdListType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdStoryType
 = WdMainTextStory
 | WdFootnotesStory
 | WdEndnotesStory
 | WdCommentsStory
 | WdTextFrameStory
 | WdEvenPagesHeaderStory
 | WdPrimaryHeaderStory
 | WdEvenPagesFooterStory
 | WdPrimaryFooterStory
 | WdFirstPageHeaderStory
 | WdFirstPageFooterStory
 | WdFootnoteSeparatorStory
 | WdFootnoteContinuationSeparatorStory
 | WdFootnoteContinuationNoticeStory
 | WdEndnoteSeparatorStory
 | WdEndnoteContinuationSeparatorStory
 | WdEndnoteContinuationNoticeStory
 
instance Enum (WdStoryType) where
  fromEnum v =
    case v of
       WdMainTextStory -> 1
       WdFootnotesStory -> 2
       WdEndnotesStory -> 3
       WdCommentsStory -> 4
       WdTextFrameStory -> 5
       WdEvenPagesHeaderStory -> 6
       WdPrimaryHeaderStory -> 7
       WdEvenPagesFooterStory -> 8
       WdPrimaryFooterStory -> 9
       WdFirstPageHeaderStory -> 10
       WdFirstPageFooterStory -> 11
       WdFootnoteSeparatorStory -> 12
       WdFootnoteContinuationSeparatorStory -> 13
       WdFootnoteContinuationNoticeStory -> 14
       WdEndnoteSeparatorStory -> 15
       WdEndnoteContinuationSeparatorStory -> 16
       WdEndnoteContinuationNoticeStory -> 17
  
  toEnum v =
    case v of
       1 -> WdMainTextStory
       2 -> WdFootnotesStory
       3 -> WdEndnotesStory
       4 -> WdCommentsStory
       5 -> WdTextFrameStory
       6 -> WdEvenPagesHeaderStory
       7 -> WdPrimaryHeaderStory
       8 -> WdEvenPagesFooterStory
       9 -> WdPrimaryFooterStory
       10 -> WdFirstPageHeaderStory
       11 -> WdFirstPageFooterStory
       12 -> WdFootnoteSeparatorStory
       13 -> WdFootnoteContinuationSeparatorStory
       14 -> WdFootnoteContinuationNoticeStory
       15 -> WdEndnoteSeparatorStory
       16 -> WdEndnoteContinuationSeparatorStory
       17 -> WdEndnoteContinuationNoticeStory
       _ -> error "unmarshallWdStoryType: illegal enum value "
  
instance Variant (WdStoryType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSaveFormat
 = WdFormatDocument
 | WdFormatDocument97
 | WdFormatTemplate
 | WdFormatTemplate97
 | WdFormatText
 | WdFormatTextLineBreaks
 | WdFormatDOSText
 | WdFormatDOSTextLineBreaks
 | WdFormatRTF
 | WdFormatUnicodeText
 | WdFormatEncodedText
 | WdFormatHTML
 | WdFormatWebArchive
 | WdFormatFilteredHTML
 | WdFormatXML
 | WdFormatXMLDocument
 | WdFormatXMLDocumentMacroEnabled
 | WdFormatXMLTemplate
 | WdFormatXMLTemplateMacroEnabled
 | WdFormatDocumentDefault
 | WdFormatPDF
 | WdFormatXPS
 | WdFormatFlatXML
 | WdFormatFlatXMLMacroEnabled
 | WdFormatFlatXMLTemplate
 | WdFormatFlatXMLTemplateMacroEnabled
 | WdFormatOpenDocumentText
 
instance Enum (WdSaveFormat) where
  fromEnum v =
    case v of
       WdFormatDocument -> 0
       WdFormatDocument97 -> 0
       WdFormatTemplate -> 1
       WdFormatTemplate97 -> 1
       WdFormatText -> 2
       WdFormatTextLineBreaks -> 3
       WdFormatDOSText -> 4
       WdFormatDOSTextLineBreaks -> 5
       WdFormatRTF -> 6
       WdFormatUnicodeText -> 7
       WdFormatEncodedText -> 7
       WdFormatHTML -> 8
       WdFormatWebArchive -> 9
       WdFormatFilteredHTML -> 10
       WdFormatXML -> 11
       WdFormatXMLDocument -> 12
       WdFormatXMLDocumentMacroEnabled -> 13
       WdFormatXMLTemplate -> 14
       WdFormatXMLTemplateMacroEnabled -> 15
       WdFormatDocumentDefault -> 16
       WdFormatPDF -> 17
       WdFormatXPS -> 18
       WdFormatFlatXML -> 19
       WdFormatFlatXMLMacroEnabled -> 20
       WdFormatFlatXMLTemplate -> 21
       WdFormatFlatXMLTemplateMacroEnabled -> 22
       WdFormatOpenDocumentText -> 23
  
  toEnum v =
    case v of
       0 -> WdFormatDocument
       0 -> WdFormatDocument97
       1 -> WdFormatTemplate
       1 -> WdFormatTemplate97
       2 -> WdFormatText
       3 -> WdFormatTextLineBreaks
       4 -> WdFormatDOSText
       5 -> WdFormatDOSTextLineBreaks
       6 -> WdFormatRTF
       7 -> WdFormatUnicodeText
       7 -> WdFormatEncodedText
       8 -> WdFormatHTML
       9 -> WdFormatWebArchive
       10 -> WdFormatFilteredHTML
       11 -> WdFormatXML
       12 -> WdFormatXMLDocument
       13 -> WdFormatXMLDocumentMacroEnabled
       14 -> WdFormatXMLTemplate
       15 -> WdFormatXMLTemplateMacroEnabled
       16 -> WdFormatDocumentDefault
       17 -> WdFormatPDF
       18 -> WdFormatXPS
       19 -> WdFormatFlatXML
       20 -> WdFormatFlatXMLMacroEnabled
       21 -> WdFormatFlatXMLTemplate
       22 -> WdFormatFlatXMLTemplateMacroEnabled
       23 -> WdFormatOpenDocumentText
       _ -> error "unmarshallWdSaveFormat: illegal enum value "
  
instance Variant (WdSaveFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOpenFormat
 = WdOpenFormatAuto
 | WdOpenFormatDocument
 | WdOpenFormatDocument97
 | WdOpenFormatTemplate
 | WdOpenFormatTemplate97
 | WdOpenFormatRTF
 | WdOpenFormatText
 | WdOpenFormatUnicodeText
 | WdOpenFormatEncodedText
 | WdOpenFormatAllWord
 | WdOpenFormatWebPages
 | WdOpenFormatXML
 | WdOpenFormatXMLDocument
 | WdOpenFormatXMLDocumentMacroEnabled
 | WdOpenFormatXMLTemplate
 | WdOpenFormatXMLTemplateMacroEnabled
 | WdOpenFormatAllWordTemplates
 | WdOpenFormatXMLDocumentSerialized
 | WdOpenFormatXMLDocumentMacroEnabledSerialized
 | WdOpenFormatXMLTemplateSerialized
 | WdOpenFormatXMLTemplateMacroEnabledSerialized
 | WdOpenFormatOpenDocumentText
 
instance Enum (WdOpenFormat) where
  fromEnum v =
    case v of
       WdOpenFormatAuto -> 0
       WdOpenFormatDocument -> 1
       WdOpenFormatDocument97 -> 1
       WdOpenFormatTemplate -> 2
       WdOpenFormatTemplate97 -> 2
       WdOpenFormatRTF -> 3
       WdOpenFormatText -> 4
       WdOpenFormatUnicodeText -> 5
       WdOpenFormatEncodedText -> 5
       WdOpenFormatAllWord -> 6
       WdOpenFormatWebPages -> 7
       WdOpenFormatXML -> 8
       WdOpenFormatXMLDocument -> 9
       WdOpenFormatXMLDocumentMacroEnabled -> 10
       WdOpenFormatXMLTemplate -> 11
       WdOpenFormatXMLTemplateMacroEnabled -> 12
       WdOpenFormatAllWordTemplates -> 13
       WdOpenFormatXMLDocumentSerialized -> 14
       WdOpenFormatXMLDocumentMacroEnabledSerialized -> 15
       WdOpenFormatXMLTemplateSerialized -> 16
       WdOpenFormatXMLTemplateMacroEnabledSerialized -> 17
       WdOpenFormatOpenDocumentText -> 18
  
  toEnum v =
    case v of
       0 -> WdOpenFormatAuto
       1 -> WdOpenFormatDocument
       1 -> WdOpenFormatDocument97
       2 -> WdOpenFormatTemplate
       2 -> WdOpenFormatTemplate97
       3 -> WdOpenFormatRTF
       4 -> WdOpenFormatText
       5 -> WdOpenFormatUnicodeText
       5 -> WdOpenFormatEncodedText
       6 -> WdOpenFormatAllWord
       7 -> WdOpenFormatWebPages
       8 -> WdOpenFormatXML
       9 -> WdOpenFormatXMLDocument
       10 -> WdOpenFormatXMLDocumentMacroEnabled
       11 -> WdOpenFormatXMLTemplate
       12 -> WdOpenFormatXMLTemplateMacroEnabled
       13 -> WdOpenFormatAllWordTemplates
       14 -> WdOpenFormatXMLDocumentSerialized
       15 -> WdOpenFormatXMLDocumentMacroEnabledSerialized
       16 -> WdOpenFormatXMLTemplateSerialized
       17 -> WdOpenFormatXMLTemplateMacroEnabledSerialized
       18 -> WdOpenFormatOpenDocumentText
       _ -> error "unmarshallWdOpenFormat: illegal enum value "
  
instance Variant (WdOpenFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHeaderFooterIndex
 = WdHeaderFooterPrimary
 | WdHeaderFooterFirstPage
 | WdHeaderFooterEvenPages
 
instance Enum (WdHeaderFooterIndex) where
  fromEnum v =
    case v of
       WdHeaderFooterPrimary -> 1
       WdHeaderFooterFirstPage -> 2
       WdHeaderFooterEvenPages -> 3
  
  toEnum v =
    case v of
       1 -> WdHeaderFooterPrimary
       2 -> WdHeaderFooterFirstPage
       3 -> WdHeaderFooterEvenPages
       _ -> error "unmarshallWdHeaderFooterIndex: illegal enum value "
  
instance Variant (WdHeaderFooterIndex) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTocFormat
 = WdTOCTemplate
 | WdTOCClassic
 | WdTOCDistinctive
 | WdTOCFancy
 | WdTOCModern
 | WdTOCFormal
 | WdTOCSimple
 deriving (Enum)
instance Variant (WdTocFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTofFormat
 = WdTOFTemplate
 | WdTOFClassic
 | WdTOFDistinctive
 | WdTOFCentered
 | WdTOFFormal
 | WdTOFSimple
 deriving (Enum)
instance Variant (WdTofFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdToaFormat
 = WdTOATemplate
 | WdTOAClassic
 | WdTOADistinctive
 | WdTOAFormal
 | WdTOASimple
 deriving (Enum)
instance Variant (WdToaFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLineStyle
 = WdLineStyleNone
 | WdLineStyleSingle
 | WdLineStyleDot
 | WdLineStyleDashSmallGap
 | WdLineStyleDashLargeGap
 | WdLineStyleDashDot
 | WdLineStyleDashDotDot
 | WdLineStyleDouble
 | WdLineStyleTriple
 | WdLineStyleThinThickSmallGap
 | WdLineStyleThickThinSmallGap
 | WdLineStyleThinThickThinSmallGap
 | WdLineStyleThinThickMedGap
 | WdLineStyleThickThinMedGap
 | WdLineStyleThinThickThinMedGap
 | WdLineStyleThinThickLargeGap
 | WdLineStyleThickThinLargeGap
 | WdLineStyleThinThickThinLargeGap
 | WdLineStyleSingleWavy
 | WdLineStyleDoubleWavy
 | WdLineStyleDashDotStroked
 | WdLineStyleEmboss3D
 | WdLineStyleEngrave3D
 | WdLineStyleOutset
 | WdLineStyleInset
 deriving (Enum)
instance Variant (WdLineStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLineWidth
 = WdLineWidth025pt
 | WdLineWidth050pt
 | WdLineWidth075pt
 | WdLineWidth100pt
 | WdLineWidth150pt
 | WdLineWidth225pt
 | WdLineWidth300pt
 | WdLineWidth450pt
 | WdLineWidth600pt
 
instance Enum (WdLineWidth) where
  fromEnum v =
    case v of
       WdLineWidth025pt -> 2
       WdLineWidth050pt -> 4
       WdLineWidth075pt -> 6
       WdLineWidth100pt -> 8
       WdLineWidth150pt -> 12
       WdLineWidth225pt -> 18
       WdLineWidth300pt -> 24
       WdLineWidth450pt -> 36
       WdLineWidth600pt -> 48
  
  toEnum v =
    case v of
       2 -> WdLineWidth025pt
       4 -> WdLineWidth050pt
       6 -> WdLineWidth075pt
       8 -> WdLineWidth100pt
       12 -> WdLineWidth150pt
       18 -> WdLineWidth225pt
       24 -> WdLineWidth300pt
       36 -> WdLineWidth450pt
       48 -> WdLineWidth600pt
       _ -> error "unmarshallWdLineWidth: illegal enum value "
  
instance Variant (WdLineWidth) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBreakType
 = WdSectionBreakNextPage
 | WdSectionBreakContinuous
 | WdSectionBreakEvenPage
 | WdSectionBreakOddPage
 | WdLineBreak
 | WdPageBreak
 | WdColumnBreak
 | WdLineBreakClearLeft
 | WdLineBreakClearRight
 | WdTextWrappingBreak
 
instance Enum (WdBreakType) where
  fromEnum v =
    case v of
       WdSectionBreakNextPage -> 2
       WdSectionBreakContinuous -> 3
       WdSectionBreakEvenPage -> 4
       WdSectionBreakOddPage -> 5
       WdLineBreak -> 6
       WdPageBreak -> 7
       WdColumnBreak -> 8
       WdLineBreakClearLeft -> 9
       WdLineBreakClearRight -> 10
       WdTextWrappingBreak -> 11
  
  toEnum v =
    case v of
       2 -> WdSectionBreakNextPage
       3 -> WdSectionBreakContinuous
       4 -> WdSectionBreakEvenPage
       5 -> WdSectionBreakOddPage
       6 -> WdLineBreak
       7 -> WdPageBreak
       8 -> WdColumnBreak
       9 -> WdLineBreakClearLeft
       10 -> WdLineBreakClearRight
       11 -> WdTextWrappingBreak
       _ -> error "unmarshallWdBreakType: illegal enum value "
  
instance Variant (WdBreakType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTabLeader
 = WdTabLeaderSpaces
 | WdTabLeaderDots
 | WdTabLeaderDashes
 | WdTabLeaderLines
 | WdTabLeaderHeavy
 | WdTabLeaderMiddleDot
 deriving (Enum)
instance Variant (WdTabLeader) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTabLeaderHID = Emptyenum7 
instance Enum (WdTabLeaderHID) where
  fromEnum v = case v of Emptyenum7 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum7
       _ -> error "unmarshallWdTabLeaderHID: illegal enum value "
  
instance Variant (WdTabLeaderHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMeasurementUnits
 = WdInches
 | WdCentimeters
 | WdMillimeters
 | WdPoints
 | WdPicas
 deriving (Enum)
instance Variant (WdMeasurementUnits) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMeasurementUnitsHID = Emptyenum8 
instance Enum (WdMeasurementUnitsHID) where
  fromEnum v = case v of Emptyenum8 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum8
       _ -> error "unmarshallWdMeasurementUnitsHID: illegal enum value "
  
instance Variant (WdMeasurementUnitsHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDropPosition
 = WdDropPositionList__ [WdDropPosition]
 | WdDropNone
 | WdDropNormal
 | WdDropMargin
 
instance Flags (WdDropPosition) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDropPosition) where
  fromEnum v =
    case v of
       (WdDropPositionList__ xs) -> orList (map fromEnum xs)
       WdDropNone -> 0
       WdDropNormal -> 1
       WdDropMargin -> 2
  
  toEnum v =
    case v of
       0 -> WdDropNone
       1 -> WdDropNormal
       2 -> WdDropMargin
       x -> WdDropPositionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDropPosition: illegal enum value "
  
instance Variant (WdDropPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdNumberingRule
 = WdNumberingRuleList__ [WdNumberingRule]
 | WdRestartContinuous
 | WdRestartSection
 | WdRestartPage
 
instance Flags (WdNumberingRule) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdNumberingRule) where
  fromEnum v =
    case v of
       (WdNumberingRuleList__ xs) -> orList (map fromEnum xs)
       WdRestartContinuous -> 0
       WdRestartSection -> 1
       WdRestartPage -> 2
  
  toEnum v =
    case v of
       0 -> WdRestartContinuous
       1 -> WdRestartSection
       2 -> WdRestartPage
       x -> WdNumberingRuleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdNumberingRule: illegal enum value "
  
instance Variant (WdNumberingRule) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFootnoteLocation
 = WdFootnoteLocationList__ [WdFootnoteLocation]
 | WdBottomOfPage
 | WdBeneathText
 
instance Flags (WdFootnoteLocation) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFootnoteLocation) where
  fromEnum v =
    case v of
       (WdFootnoteLocationList__ xs) -> orList (map fromEnum xs)
       WdBottomOfPage -> 0
       WdBeneathText -> 1
  
  toEnum v =
    case v of
       0 -> WdBottomOfPage
       1 -> WdBeneathText
       x -> WdFootnoteLocationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdFootnoteLocation: illegal enum value "
  
instance Variant (WdFootnoteLocation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEndnoteLocation
 = WdEndnoteLocationList__ [WdEndnoteLocation]
 | WdEndOfSection
 | WdEndOfDocument
 
instance Flags (WdEndnoteLocation) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdEndnoteLocation) where
  fromEnum v =
    case v of
       (WdEndnoteLocationList__ xs) -> orList (map fromEnum xs)
       WdEndOfSection -> 0
       WdEndOfDocument -> 1
  
  toEnum v =
    case v of
       0 -> WdEndOfSection
       1 -> WdEndOfDocument
       x -> WdEndnoteLocationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdEndnoteLocation: illegal enum value "
  
instance Variant (WdEndnoteLocation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSortSeparator
 = WdSortSeparatorList__ [WdSortSeparator]
 | WdSortSeparateByTabs
 | WdSortSeparateByCommas
 | WdSortSeparateByDefaultTableSeparator
 
instance Flags (WdSortSeparator) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSortSeparator) where
  fromEnum v =
    case v of
       (WdSortSeparatorList__ xs) -> orList (map fromEnum xs)
       WdSortSeparateByTabs -> 0
       WdSortSeparateByCommas -> 1
       WdSortSeparateByDefaultTableSeparator -> 2
  
  toEnum v =
    case v of
       0 -> WdSortSeparateByTabs
       1 -> WdSortSeparateByCommas
       2 -> WdSortSeparateByDefaultTableSeparator
       x -> WdSortSeparatorList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdSortSeparator: illegal enum value "
  
instance Variant (WdSortSeparator) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTableFieldSeparator
 = WdSeparateByParagraphs
 | WdSeparateByTabs
 | WdSeparateByCommas
 | WdSeparateByDefaultListSeparator
 deriving (Enum)
instance Variant (WdTableFieldSeparator) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSortFieldType
 = WdSortFieldAlphanumeric
 | WdSortFieldNumeric
 | WdSortFieldDate
 | WdSortFieldSyllable
 | WdSortFieldJapanJIS
 | WdSortFieldStroke
 | WdSortFieldKoreaKS
 deriving (Enum)
instance Variant (WdSortFieldType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSortFieldTypeHID = Emptyenum9 
instance Enum (WdSortFieldTypeHID) where
  fromEnum v = case v of Emptyenum9 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum9
       _ -> error "unmarshallWdSortFieldTypeHID: illegal enum value "
  
instance Variant (WdSortFieldTypeHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSortOrder
 = WdSortOrderList__ [WdSortOrder]
 | WdSortOrderAscending
 | WdSortOrderDescending
 
instance Flags (WdSortOrder) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSortOrder) where
  fromEnum v =
    case v of
       (WdSortOrderList__ xs) -> orList (map fromEnum xs)
       WdSortOrderAscending -> 0
       WdSortOrderDescending -> 1
  
  toEnum v =
    case v of
       0 -> WdSortOrderAscending
       1 -> WdSortOrderDescending
       x -> WdSortOrderList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdSortOrder: illegal enum value "
  
instance Variant (WdSortOrder) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTableFormat
 = WdTableFormatNone
 | WdTableFormatSimple1
 | WdTableFormatSimple2
 | WdTableFormatSimple3
 | WdTableFormatClassic1
 | WdTableFormatClassic2
 | WdTableFormatClassic3
 | WdTableFormatClassic4
 | WdTableFormatColorful1
 | WdTableFormatColorful2
 | WdTableFormatColorful3
 | WdTableFormatColumns1
 | WdTableFormatColumns2
 | WdTableFormatColumns3
 | WdTableFormatColumns4
 | WdTableFormatColumns5
 | WdTableFormatGrid1
 | WdTableFormatGrid2
 | WdTableFormatGrid3
 | WdTableFormatGrid4
 | WdTableFormatGrid5
 | WdTableFormatGrid6
 | WdTableFormatGrid7
 | WdTableFormatGrid8
 | WdTableFormatList1
 | WdTableFormatList2
 | WdTableFormatList3
 | WdTableFormatList4
 | WdTableFormatList5
 | WdTableFormatList6
 | WdTableFormatList7
 | WdTableFormatList8
 | WdTableFormat3DEffects1
 | WdTableFormat3DEffects2
 | WdTableFormat3DEffects3
 | WdTableFormatContemporary
 | WdTableFormatElegant
 | WdTableFormatProfessional
 | WdTableFormatSubtle1
 | WdTableFormatSubtle2
 | WdTableFormatWeb1
 | WdTableFormatWeb2
 | WdTableFormatWeb3
 deriving (Enum)
instance Variant (WdTableFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTableFormatApply
 = WdTableFormatApplyList__ [WdTableFormatApply]
 | WdTableFormatApplyBorders
 | WdTableFormatApplyShading
 | WdTableFormatApplyFont
 | WdTableFormatApplyColor
 | WdTableFormatApplyAutoFit
 | WdTableFormatApplyHeadingRows
 | WdTableFormatApplyLastRow
 | WdTableFormatApplyFirstColumn
 | WdTableFormatApplyLastColumn
 
instance Flags (WdTableFormatApply) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdTableFormatApply) where
  fromEnum v =
    case v of
       (WdTableFormatApplyList__ xs) -> orList (map fromEnum xs)
       WdTableFormatApplyBorders -> 1
       WdTableFormatApplyShading -> 2
       WdTableFormatApplyFont -> 4
       WdTableFormatApplyColor -> 8
       WdTableFormatApplyAutoFit -> 16
       WdTableFormatApplyHeadingRows -> 32
       WdTableFormatApplyLastRow -> 64
       WdTableFormatApplyFirstColumn -> 128
       WdTableFormatApplyLastColumn -> 256
  
  toEnum v =
    case v of
       1 -> WdTableFormatApplyBorders
       2 -> WdTableFormatApplyShading
       4 -> WdTableFormatApplyFont
       8 -> WdTableFormatApplyColor
       16 -> WdTableFormatApplyAutoFit
       32 -> WdTableFormatApplyHeadingRows
       64 -> WdTableFormatApplyLastRow
       128 -> WdTableFormatApplyFirstColumn
       256 -> WdTableFormatApplyLastColumn
       x -> WdTableFormatApplyList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 9 1))
       _ -> error "unmarshallWdTableFormatApply: illegal enum value "
  
instance Variant (WdTableFormatApply) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLanguageID
 = WdLanguageNone
 | WdNoProofing
 | WdArabic
 | WdBulgarian
 | WdCatalan
 | WdTraditionalChinese
 | WdCzech
 | WdDanish
 | WdGerman
 | WdGreek
 | WdEnglishUS
 | WdSpanish
 | WdFinnish
 | WdFrench
 | WdHebrew
 | WdHungarian
 | WdIcelandic
 | WdItalian
 | WdJapanese
 | WdKorean
 | WdDutch
 | WdNorwegianBokmol
 | WdPolish
 | WdPortugueseBrazil
 | WdRhaetoRomanic
 | WdRomanian
 | WdRussian
 | WdCroatian
 | WdSlovak
 | WdAlbanian
 | WdSwedish
 | WdThai
 | WdTurkish
 | WdUrdu
 | WdIndonesian
 | WdUkrainian
 | WdByelorussian
 | WdSlovenian
 | WdEstonian
 | WdLatvian
 | WdLithuanian
 | WdTajik
 | WdPersian
 | WdVietnamese
 | WdArmenian
 | WdAzeriLatin
 | WdBasque
 | WdSorbian
 | WdMacedonianFYROM
 | WdSesotho
 | WdSutu
 | WdTsonga
 | WdTswana
 | WdVenda
 | WdXhosa
 | WdZulu
 | WdAfrikaans
 | WdGeorgian
 | WdFaeroese
 | WdHindi
 | WdMaltese
 | WdSamiLappish
 | WdGaelicScotland
 | WdYiddish
 | WdMalaysian
 | WdKazakh
 | WdKirghiz
 | WdKyrgyz
 | WdSwahili
 | WdTurkmen
 | WdUzbekLatin
 | WdTatar
 | WdBengali
 | WdPunjabi
 | WdGujarati
 | WdOriya
 | WdTamil
 | WdTelugu
 | WdKannada
 | WdMalayalam
 | WdAssamese
 | WdMarathi
 | WdSanskrit
 | WdMongolian
 | WdTibetan
 | WdWelsh
 | WdKhmer
 | WdLao
 | WdBurmese
 | WdGalician
 | WdKonkani
 | WdManipuri
 | WdSindhi
 | WdSyriac
 | WdSinhalese
 | WdCherokee
 | WdInuktitut
 | WdAmharic
 | WdTamazight
 | WdKashmiri
 | WdNepali
 | WdFrisianNetherlands
 | WdPashto
 | WdFilipino
 | WdDivehi
 | WdEdo
 | WdFulfulde
 | WdHausa
 | WdIbibio
 | WdYoruba
 | WdIgbo
 | WdKanuri
 | WdOromo
 | WdTigrignaEthiopic
 | WdGuarani
 | WdHawaiian
 | WdLatin
 | WdSomali
 | WdYi
 | WdArabicIraq
 | WdSimplifiedChinese
 | WdSwissGerman
 | WdEnglishUK
 | WdMexicanSpanish
 | WdBelgianFrench
 | WdSwissItalian
 | WdBelgianDutch
 | WdNorwegianNynorsk
 | WdPortuguese
 | WdRomanianMoldova
 | WdRussianMoldova
 | WdSerbianLatin
 | WdSwedishFinland
 | WdAzeriCyrillic
 | WdGaelicIreland
 | WdMalayBruneiDarussalam
 | WdUzbekCyrillic
 | WdSindhiPakistan
 | WdTamazightLatin
 | WdTigrignaEritrea
 | WdArabicEgypt
 | WdChineseHongKongSAR
 | WdGermanAustria
 | WdEnglishAUS
 | WdSpanishModernSort
 | WdFrenchCanadian
 | WdSerbianCyrillic
 | WdArabicLibya
 | WdChineseSingapore
 | WdGermanLuxembourg
 | WdEnglishCanadian
 | WdSpanishGuatemala
 | WdSwissFrench
 | WdArabicAlgeria
 | WdChineseMacaoSAR
 | WdGermanLiechtenstein
 | WdEnglishNewZealand
 | WdSpanishCostaRica
 | WdFrenchLuxembourg
 | WdArabicMorocco
 | WdEnglishIreland
 | WdSpanishPanama
 | WdFrenchMonaco
 | WdArabicTunisia
 | WdEnglishSouthAfrica
 | WdSpanishDominicanRepublic
 | WdFrenchWestIndies
 | WdArabicOman
 | WdEnglishJamaica
 | WdSpanishVenezuela
 | WdFrenchReunion
 | WdArabicYemen
 | WdEnglishCaribbean
 | WdSpanishColombia
 | WdFrenchCongoDRC
 | WdArabicSyria
 | WdEnglishBelize
 | WdSpanishPeru
 | WdFrenchSenegal
 | WdArabicJordan
 | WdEnglishTrinidadTobago
 | WdSpanishArgentina
 | WdFrenchCameroon
 | WdArabicLebanon
 | WdEnglishZimbabwe
 | WdSpanishEcuador
 | WdFrenchCotedIvoire
 | WdArabicKuwait
 | WdEnglishPhilippines
 | WdSpanishChile
 | WdFrenchMali
 | WdArabicUAE
 | WdEnglishIndonesia
 | WdSpanishUruguay
 | WdFrenchMorocco
 | WdArabicBahrain
 | WdSpanishParaguay
 | WdFrenchHaiti
 | WdArabicQatar
 | WdSpanishBolivia
 | WdSpanishElSalvador
 | WdSpanishHonduras
 | WdSpanishNicaragua
 | WdSpanishPuertoRico
 
instance Enum (WdLanguageID) where
  fromEnum v =
    case v of
       WdLanguageNone -> 0
       WdNoProofing -> 1024
       WdArabic -> 1025
       WdBulgarian -> 1026
       WdCatalan -> 1027
       WdTraditionalChinese -> 1028
       WdCzech -> 1029
       WdDanish -> 1030
       WdGerman -> 1031
       WdGreek -> 1032
       WdEnglishUS -> 1033
       WdSpanish -> 1034
       WdFinnish -> 1035
       WdFrench -> 1036
       WdHebrew -> 1037
       WdHungarian -> 1038
       WdIcelandic -> 1039
       WdItalian -> 1040
       WdJapanese -> 1041
       WdKorean -> 1042
       WdDutch -> 1043
       WdNorwegianBokmol -> 1044
       WdPolish -> 1045
       WdPortugueseBrazil -> 1046
       WdRhaetoRomanic -> 1047
       WdRomanian -> 1048
       WdRussian -> 1049
       WdCroatian -> 1050
       WdSlovak -> 1051
       WdAlbanian -> 1052
       WdSwedish -> 1053
       WdThai -> 1054
       WdTurkish -> 1055
       WdUrdu -> 1056
       WdIndonesian -> 1057
       WdUkrainian -> 1058
       WdByelorussian -> 1059
       WdSlovenian -> 1060
       WdEstonian -> 1061
       WdLatvian -> 1062
       WdLithuanian -> 1063
       WdTajik -> 1064
       WdPersian -> 1065
       WdVietnamese -> 1066
       WdArmenian -> 1067
       WdAzeriLatin -> 1068
       WdBasque -> 1069
       WdSorbian -> 1070
       WdMacedonianFYROM -> 1071
       WdSesotho -> 1072
       WdSutu -> 1072
       WdTsonga -> 1073
       WdTswana -> 1074
       WdVenda -> 1075
       WdXhosa -> 1076
       WdZulu -> 1077
       WdAfrikaans -> 1078
       WdGeorgian -> 1079
       WdFaeroese -> 1080
       WdHindi -> 1081
       WdMaltese -> 1082
       WdSamiLappish -> 1083
       WdGaelicScotland -> 1084
       WdYiddish -> 1085
       WdMalaysian -> 1086
       WdKazakh -> 1087
       WdKirghiz -> 1088
       WdKyrgyz -> 1088
       WdSwahili -> 1089
       WdTurkmen -> 1090
       WdUzbekLatin -> 1091
       WdTatar -> 1092
       WdBengali -> 1093
       WdPunjabi -> 1094
       WdGujarati -> 1095
       WdOriya -> 1096
       WdTamil -> 1097
       WdTelugu -> 1098
       WdKannada -> 1099
       WdMalayalam -> 1100
       WdAssamese -> 1101
       WdMarathi -> 1102
       WdSanskrit -> 1103
       WdMongolian -> 1104
       WdTibetan -> 1105
       WdWelsh -> 1106
       WdKhmer -> 1107
       WdLao -> 1108
       WdBurmese -> 1109
       WdGalician -> 1110
       WdKonkani -> 1111
       WdManipuri -> 1112
       WdSindhi -> 1113
       WdSyriac -> 1114
       WdSinhalese -> 1115
       WdCherokee -> 1116
       WdInuktitut -> 1117
       WdAmharic -> 1118
       WdTamazight -> 1119
       WdKashmiri -> 1120
       WdNepali -> 1121
       WdFrisianNetherlands -> 1122
       WdPashto -> 1123
       WdFilipino -> 1124
       WdDivehi -> 1125
       WdEdo -> 1126
       WdFulfulde -> 1127
       WdHausa -> 1128
       WdIbibio -> 1129
       WdYoruba -> 1130
       WdIgbo -> 1136
       WdKanuri -> 1137
       WdOromo -> 1138
       WdTigrignaEthiopic -> 1139
       WdGuarani -> 1140
       WdHawaiian -> 1141
       WdLatin -> 1142
       WdSomali -> 1143
       WdYi -> 1144
       WdArabicIraq -> 2049
       WdSimplifiedChinese -> 2052
       WdSwissGerman -> 2055
       WdEnglishUK -> 2057
       WdMexicanSpanish -> 2058
       WdBelgianFrench -> 2060
       WdSwissItalian -> 2064
       WdBelgianDutch -> 2067
       WdNorwegianNynorsk -> 2068
       WdPortuguese -> 2070
       WdRomanianMoldova -> 2072
       WdRussianMoldova -> 2073
       WdSerbianLatin -> 2074
       WdSwedishFinland -> 2077
       WdAzeriCyrillic -> 2092
       WdGaelicIreland -> 2108
       WdMalayBruneiDarussalam -> 2110
       WdUzbekCyrillic -> 2115
       WdSindhiPakistan -> 2137
       WdTamazightLatin -> 2143
       WdTigrignaEritrea -> 2163
       WdArabicEgypt -> 3073
       WdChineseHongKongSAR -> 3076
       WdGermanAustria -> 3079
       WdEnglishAUS -> 3081
       WdSpanishModernSort -> 3082
       WdFrenchCanadian -> 3084
       WdSerbianCyrillic -> 3098
       WdArabicLibya -> 4097
       WdChineseSingapore -> 4100
       WdGermanLuxembourg -> 4103
       WdEnglishCanadian -> 4105
       WdSpanishGuatemala -> 4106
       WdSwissFrench -> 4108
       WdArabicAlgeria -> 5121
       WdChineseMacaoSAR -> 5124
       WdGermanLiechtenstein -> 5127
       WdEnglishNewZealand -> 5129
       WdSpanishCostaRica -> 5130
       WdFrenchLuxembourg -> 5132
       WdArabicMorocco -> 6145
       WdEnglishIreland -> 6153
       WdSpanishPanama -> 6154
       WdFrenchMonaco -> 6156
       WdArabicTunisia -> 7169
       WdEnglishSouthAfrica -> 7177
       WdSpanishDominicanRepublic -> 7178
       WdFrenchWestIndies -> 7180
       WdArabicOman -> 8193
       WdEnglishJamaica -> 8201
       WdSpanishVenezuela -> 8202
       WdFrenchReunion -> 8204
       WdArabicYemen -> 9217
       WdEnglishCaribbean -> 9225
       WdSpanishColombia -> 9226
       WdFrenchCongoDRC -> 9228
       WdArabicSyria -> 10241
       WdEnglishBelize -> 10249
       WdSpanishPeru -> 10250
       WdFrenchSenegal -> 10252
       WdArabicJordan -> 11265
       WdEnglishTrinidadTobago -> 11273
       WdSpanishArgentina -> 11274
       WdFrenchCameroon -> 11276
       WdArabicLebanon -> 12289
       WdEnglishZimbabwe -> 12297
       WdSpanishEcuador -> 12298
       WdFrenchCotedIvoire -> 12300
       WdArabicKuwait -> 13313
       WdEnglishPhilippines -> 13321
       WdSpanishChile -> 13322
       WdFrenchMali -> 13324
       WdArabicUAE -> 14337
       WdEnglishIndonesia -> 14345
       WdSpanishUruguay -> 14346
       WdFrenchMorocco -> 14348
       WdArabicBahrain -> 15361
       WdSpanishParaguay -> 15370
       WdFrenchHaiti -> 15372
       WdArabicQatar -> 16385
       WdSpanishBolivia -> 16394
       WdSpanishElSalvador -> 17418
       WdSpanishHonduras -> 18442
       WdSpanishNicaragua -> 19466
       WdSpanishPuertoRico -> 20490
  
  toEnum v =
    case v of
       0 -> WdLanguageNone
       1024 -> WdNoProofing
       1025 -> WdArabic
       1026 -> WdBulgarian
       1027 -> WdCatalan
       1028 -> WdTraditionalChinese
       1029 -> WdCzech
       1030 -> WdDanish
       1031 -> WdGerman
       1032 -> WdGreek
       1033 -> WdEnglishUS
       1034 -> WdSpanish
       1035 -> WdFinnish
       1036 -> WdFrench
       1037 -> WdHebrew
       1038 -> WdHungarian
       1039 -> WdIcelandic
       1040 -> WdItalian
       1041 -> WdJapanese
       1042 -> WdKorean
       1043 -> WdDutch
       1044 -> WdNorwegianBokmol
       1045 -> WdPolish
       1046 -> WdPortugueseBrazil
       1047 -> WdRhaetoRomanic
       1048 -> WdRomanian
       1049 -> WdRussian
       1050 -> WdCroatian
       1051 -> WdSlovak
       1052 -> WdAlbanian
       1053 -> WdSwedish
       1054 -> WdThai
       1055 -> WdTurkish
       1056 -> WdUrdu
       1057 -> WdIndonesian
       1058 -> WdUkrainian
       1059 -> WdByelorussian
       1060 -> WdSlovenian
       1061 -> WdEstonian
       1062 -> WdLatvian
       1063 -> WdLithuanian
       1064 -> WdTajik
       1065 -> WdPersian
       1066 -> WdVietnamese
       1067 -> WdArmenian
       1068 -> WdAzeriLatin
       1069 -> WdBasque
       1070 -> WdSorbian
       1071 -> WdMacedonianFYROM
       1072 -> WdSesotho
       1072 -> WdSutu
       1073 -> WdTsonga
       1074 -> WdTswana
       1075 -> WdVenda
       1076 -> WdXhosa
       1077 -> WdZulu
       1078 -> WdAfrikaans
       1079 -> WdGeorgian
       1080 -> WdFaeroese
       1081 -> WdHindi
       1082 -> WdMaltese
       1083 -> WdSamiLappish
       1084 -> WdGaelicScotland
       1085 -> WdYiddish
       1086 -> WdMalaysian
       1087 -> WdKazakh
       1088 -> WdKirghiz
       1088 -> WdKyrgyz
       1089 -> WdSwahili
       1090 -> WdTurkmen
       1091 -> WdUzbekLatin
       1092 -> WdTatar
       1093 -> WdBengali
       1094 -> WdPunjabi
       1095 -> WdGujarati
       1096 -> WdOriya
       1097 -> WdTamil
       1098 -> WdTelugu
       1099 -> WdKannada
       1100 -> WdMalayalam
       1101 -> WdAssamese
       1102 -> WdMarathi
       1103 -> WdSanskrit
       1104 -> WdMongolian
       1105 -> WdTibetan
       1106 -> WdWelsh
       1107 -> WdKhmer
       1108 -> WdLao
       1109 -> WdBurmese
       1110 -> WdGalician
       1111 -> WdKonkani
       1112 -> WdManipuri
       1113 -> WdSindhi
       1114 -> WdSyriac
       1115 -> WdSinhalese
       1116 -> WdCherokee
       1117 -> WdInuktitut
       1118 -> WdAmharic
       1119 -> WdTamazight
       1120 -> WdKashmiri
       1121 -> WdNepali
       1122 -> WdFrisianNetherlands
       1123 -> WdPashto
       1124 -> WdFilipino
       1125 -> WdDivehi
       1126 -> WdEdo
       1127 -> WdFulfulde
       1128 -> WdHausa
       1129 -> WdIbibio
       1130 -> WdYoruba
       1136 -> WdIgbo
       1137 -> WdKanuri
       1138 -> WdOromo
       1139 -> WdTigrignaEthiopic
       1140 -> WdGuarani
       1141 -> WdHawaiian
       1142 -> WdLatin
       1143 -> WdSomali
       1144 -> WdYi
       2049 -> WdArabicIraq
       2052 -> WdSimplifiedChinese
       2055 -> WdSwissGerman
       2057 -> WdEnglishUK
       2058 -> WdMexicanSpanish
       2060 -> WdBelgianFrench
       2064 -> WdSwissItalian
       2067 -> WdBelgianDutch
       2068 -> WdNorwegianNynorsk
       2070 -> WdPortuguese
       2072 -> WdRomanianMoldova
       2073 -> WdRussianMoldova
       2074 -> WdSerbianLatin
       2077 -> WdSwedishFinland
       2092 -> WdAzeriCyrillic
       2108 -> WdGaelicIreland
       2110 -> WdMalayBruneiDarussalam
       2115 -> WdUzbekCyrillic
       2137 -> WdSindhiPakistan
       2143 -> WdTamazightLatin
       2163 -> WdTigrignaEritrea
       3073 -> WdArabicEgypt
       3076 -> WdChineseHongKongSAR
       3079 -> WdGermanAustria
       3081 -> WdEnglishAUS
       3082 -> WdSpanishModernSort
       3084 -> WdFrenchCanadian
       3098 -> WdSerbianCyrillic
       4097 -> WdArabicLibya
       4100 -> WdChineseSingapore
       4103 -> WdGermanLuxembourg
       4105 -> WdEnglishCanadian
       4106 -> WdSpanishGuatemala
       4108 -> WdSwissFrench
       5121 -> WdArabicAlgeria
       5124 -> WdChineseMacaoSAR
       5127 -> WdGermanLiechtenstein
       5129 -> WdEnglishNewZealand
       5130 -> WdSpanishCostaRica
       5132 -> WdFrenchLuxembourg
       6145 -> WdArabicMorocco
       6153 -> WdEnglishIreland
       6154 -> WdSpanishPanama
       6156 -> WdFrenchMonaco
       7169 -> WdArabicTunisia
       7177 -> WdEnglishSouthAfrica
       7178 -> WdSpanishDominicanRepublic
       7180 -> WdFrenchWestIndies
       8193 -> WdArabicOman
       8201 -> WdEnglishJamaica
       8202 -> WdSpanishVenezuela
       8204 -> WdFrenchReunion
       9217 -> WdArabicYemen
       9225 -> WdEnglishCaribbean
       9226 -> WdSpanishColombia
       9228 -> WdFrenchCongoDRC
       10241 -> WdArabicSyria
       10249 -> WdEnglishBelize
       10250 -> WdSpanishPeru
       10252 -> WdFrenchSenegal
       11265 -> WdArabicJordan
       11273 -> WdEnglishTrinidadTobago
       11274 -> WdSpanishArgentina
       11276 -> WdFrenchCameroon
       12289 -> WdArabicLebanon
       12297 -> WdEnglishZimbabwe
       12298 -> WdSpanishEcuador
       12300 -> WdFrenchCotedIvoire
       13313 -> WdArabicKuwait
       13321 -> WdEnglishPhilippines
       13322 -> WdSpanishChile
       13324 -> WdFrenchMali
       14337 -> WdArabicUAE
       14345 -> WdEnglishIndonesia
       14346 -> WdSpanishUruguay
       14348 -> WdFrenchMorocco
       15361 -> WdArabicBahrain
       15370 -> WdSpanishParaguay
       15372 -> WdFrenchHaiti
       16385 -> WdArabicQatar
       16394 -> WdSpanishBolivia
       17418 -> WdSpanishElSalvador
       18442 -> WdSpanishHonduras
       19466 -> WdSpanishNicaragua
       20490 -> WdSpanishPuertoRico
       _ -> error "unmarshallWdLanguageID: illegal enum value "
  
instance Variant (WdLanguageID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFieldType
 = WdFieldEmpty
 | WdFieldRef
 | WdFieldIndexEntry
 | WdFieldFootnoteRef
 | WdFieldSet
 | WdFieldIf
 | WdFieldIndex
 | WdFieldTOCEntry
 | WdFieldStyleRef
 | WdFieldRefDoc
 | WdFieldSequence
 | WdFieldTOC
 | WdFieldInfo
 | WdFieldTitle
 | WdFieldSubject
 | WdFieldAuthor
 | WdFieldKeyWord
 | WdFieldComments
 | WdFieldLastSavedBy
 | WdFieldCreateDate
 | WdFieldSaveDate
 | WdFieldPrintDate
 | WdFieldRevisionNum
 | WdFieldEditTime
 | WdFieldNumPages
 | WdFieldNumWords
 | WdFieldNumChars
 | WdFieldFileName
 | WdFieldTemplate
 | WdFieldDate
 | WdFieldTime
 | WdFieldPage
 | WdFieldExpression
 | WdFieldQuote
 | WdFieldInclude
 | WdFieldPageRef
 | WdFieldAsk
 | WdFieldFillIn
 | WdFieldData
 | WdFieldNext
 | WdFieldNextIf
 | WdFieldSkipIf
 | WdFieldMergeRec
 | WdFieldDDE
 | WdFieldDDEAuto
 | WdFieldGlossary
 | WdFieldPrint
 | WdFieldFormula
 | WdFieldGoToButton
 | WdFieldMacroButton
 | WdFieldAutoNumOutline
 | WdFieldAutoNumLegal
 | WdFieldAutoNum
 | WdFieldImport
 | WdFieldLink
 | WdFieldSymbol
 | WdFieldEmbed
 | WdFieldMergeField
 | WdFieldUserName
 | WdFieldUserInitials
 | WdFieldUserAddress
 | WdFieldBarCode
 | WdFieldDocVariable
 | WdFieldSection
 | WdFieldSectionPages
 | WdFieldIncludePicture
 | WdFieldIncludeText
 | WdFieldFileSize
 | WdFieldFormTextInput
 | WdFieldFormCheckBox
 | WdFieldNoteRef
 | WdFieldTOA
 | WdFieldTOAEntry
 | WdFieldMergeSeq
 | WdFieldPrivate
 | WdFieldDatabase
 | WdFieldAutoText
 | WdFieldCompare
 | WdFieldAddin
 | WdFieldSubscriber
 | WdFieldFormDropDown
 | WdFieldAdvance
 | WdFieldDocProperty
 | WdFieldOCX
 | WdFieldHyperlink
 | WdFieldAutoTextList
 | WdFieldListNum
 | WdFieldHTMLActiveX
 | WdFieldBidiOutline
 | WdFieldAddressBlock
 | WdFieldGreetingLine
 | WdFieldShape
 | WdFieldCitation
 | WdFieldBibliography
 
instance Enum (WdFieldType) where
  fromEnum v =
    case v of
       WdFieldEmpty -> (-1)
       WdFieldRef -> 3
       WdFieldIndexEntry -> 4
       WdFieldFootnoteRef -> 5
       WdFieldSet -> 6
       WdFieldIf -> 7
       WdFieldIndex -> 8
       WdFieldTOCEntry -> 9
       WdFieldStyleRef -> 10
       WdFieldRefDoc -> 11
       WdFieldSequence -> 12
       WdFieldTOC -> 13
       WdFieldInfo -> 14
       WdFieldTitle -> 15
       WdFieldSubject -> 16
       WdFieldAuthor -> 17
       WdFieldKeyWord -> 18
       WdFieldComments -> 19
       WdFieldLastSavedBy -> 20
       WdFieldCreateDate -> 21
       WdFieldSaveDate -> 22
       WdFieldPrintDate -> 23
       WdFieldRevisionNum -> 24
       WdFieldEditTime -> 25
       WdFieldNumPages -> 26
       WdFieldNumWords -> 27
       WdFieldNumChars -> 28
       WdFieldFileName -> 29
       WdFieldTemplate -> 30
       WdFieldDate -> 31
       WdFieldTime -> 32
       WdFieldPage -> 33
       WdFieldExpression -> 34
       WdFieldQuote -> 35
       WdFieldInclude -> 36
       WdFieldPageRef -> 37
       WdFieldAsk -> 38
       WdFieldFillIn -> 39
       WdFieldData -> 40
       WdFieldNext -> 41
       WdFieldNextIf -> 42
       WdFieldSkipIf -> 43
       WdFieldMergeRec -> 44
       WdFieldDDE -> 45
       WdFieldDDEAuto -> 46
       WdFieldGlossary -> 47
       WdFieldPrint -> 48
       WdFieldFormula -> 49
       WdFieldGoToButton -> 50
       WdFieldMacroButton -> 51
       WdFieldAutoNumOutline -> 52
       WdFieldAutoNumLegal -> 53
       WdFieldAutoNum -> 54
       WdFieldImport -> 55
       WdFieldLink -> 56
       WdFieldSymbol -> 57
       WdFieldEmbed -> 58
       WdFieldMergeField -> 59
       WdFieldUserName -> 60
       WdFieldUserInitials -> 61
       WdFieldUserAddress -> 62
       WdFieldBarCode -> 63
       WdFieldDocVariable -> 64
       WdFieldSection -> 65
       WdFieldSectionPages -> 66
       WdFieldIncludePicture -> 67
       WdFieldIncludeText -> 68
       WdFieldFileSize -> 69
       WdFieldFormTextInput -> 70
       WdFieldFormCheckBox -> 71
       WdFieldNoteRef -> 72
       WdFieldTOA -> 73
       WdFieldTOAEntry -> 74
       WdFieldMergeSeq -> 75
       WdFieldPrivate -> 77
       WdFieldDatabase -> 78
       WdFieldAutoText -> 79
       WdFieldCompare -> 80
       WdFieldAddin -> 81
       WdFieldSubscriber -> 82
       WdFieldFormDropDown -> 83
       WdFieldAdvance -> 84
       WdFieldDocProperty -> 85
       WdFieldOCX -> 87
       WdFieldHyperlink -> 88
       WdFieldAutoTextList -> 89
       WdFieldListNum -> 90
       WdFieldHTMLActiveX -> 91
       WdFieldBidiOutline -> 92
       WdFieldAddressBlock -> 93
       WdFieldGreetingLine -> 94
       WdFieldShape -> 95
       WdFieldCitation -> 96
       WdFieldBibliography -> 97
  
  toEnum v =
    case v of
       (-1) -> WdFieldEmpty
       3 -> WdFieldRef
       4 -> WdFieldIndexEntry
       5 -> WdFieldFootnoteRef
       6 -> WdFieldSet
       7 -> WdFieldIf
       8 -> WdFieldIndex
       9 -> WdFieldTOCEntry
       10 -> WdFieldStyleRef
       11 -> WdFieldRefDoc
       12 -> WdFieldSequence
       13 -> WdFieldTOC
       14 -> WdFieldInfo
       15 -> WdFieldTitle
       16 -> WdFieldSubject
       17 -> WdFieldAuthor
       18 -> WdFieldKeyWord
       19 -> WdFieldComments
       20 -> WdFieldLastSavedBy
       21 -> WdFieldCreateDate
       22 -> WdFieldSaveDate
       23 -> WdFieldPrintDate
       24 -> WdFieldRevisionNum
       25 -> WdFieldEditTime
       26 -> WdFieldNumPages
       27 -> WdFieldNumWords
       28 -> WdFieldNumChars
       29 -> WdFieldFileName
       30 -> WdFieldTemplate
       31 -> WdFieldDate
       32 -> WdFieldTime
       33 -> WdFieldPage
       34 -> WdFieldExpression
       35 -> WdFieldQuote
       36 -> WdFieldInclude
       37 -> WdFieldPageRef
       38 -> WdFieldAsk
       39 -> WdFieldFillIn
       40 -> WdFieldData
       41 -> WdFieldNext
       42 -> WdFieldNextIf
       43 -> WdFieldSkipIf
       44 -> WdFieldMergeRec
       45 -> WdFieldDDE
       46 -> WdFieldDDEAuto
       47 -> WdFieldGlossary
       48 -> WdFieldPrint
       49 -> WdFieldFormula
       50 -> WdFieldGoToButton
       51 -> WdFieldMacroButton
       52 -> WdFieldAutoNumOutline
       53 -> WdFieldAutoNumLegal
       54 -> WdFieldAutoNum
       55 -> WdFieldImport
       56 -> WdFieldLink
       57 -> WdFieldSymbol
       58 -> WdFieldEmbed
       59 -> WdFieldMergeField
       60 -> WdFieldUserName
       61 -> WdFieldUserInitials
       62 -> WdFieldUserAddress
       63 -> WdFieldBarCode
       64 -> WdFieldDocVariable
       65 -> WdFieldSection
       66 -> WdFieldSectionPages
       67 -> WdFieldIncludePicture
       68 -> WdFieldIncludeText
       69 -> WdFieldFileSize
       70 -> WdFieldFormTextInput
       71 -> WdFieldFormCheckBox
       72 -> WdFieldNoteRef
       73 -> WdFieldTOA
       74 -> WdFieldTOAEntry
       75 -> WdFieldMergeSeq
       77 -> WdFieldPrivate
       78 -> WdFieldDatabase
       79 -> WdFieldAutoText
       80 -> WdFieldCompare
       81 -> WdFieldAddin
       82 -> WdFieldSubscriber
       83 -> WdFieldFormDropDown
       84 -> WdFieldAdvance
       85 -> WdFieldDocProperty
       87 -> WdFieldOCX
       88 -> WdFieldHyperlink
       89 -> WdFieldAutoTextList
       90 -> WdFieldListNum
       91 -> WdFieldHTMLActiveX
       92 -> WdFieldBidiOutline
       93 -> WdFieldAddressBlock
       94 -> WdFieldGreetingLine
       95 -> WdFieldShape
       96 -> WdFieldCitation
       97 -> WdFieldBibliography
       _ -> error "unmarshallWdFieldType: illegal enum value "
  
instance Variant (WdFieldType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBuiltinStyle
 = WdStyleTocHeading
 | WdStyleBibliography
 | WdStyleBookTitle
 | WdStyleIntenseReference
 | WdStyleSubtleReference
 | WdStyleIntenseEmphasis
 | WdStyleSubtleEmphasis
 | WdStyleIntenseQuote
 | WdStyleQuote
 | WdStyleListParagraph
 | WdStyleTableMediumList1Accent1
 | WdStyleTableMediumShading2Accent1
 | WdStyleTableMediumShading1Accent1
 | WdStyleTableLightGridAccent1
 | WdStyleTableLightListAccent1
 | WdStyleTableLightShadingAccent1
 | WdStyleTableColorfulGrid
 | WdStyleTableColorfulList
 | WdStyleTableColorfulShading
 | WdStyleTableDarkList
 | WdStyleTableMediumGrid3
 | WdStyleTableMediumGrid2
 | WdStyleTableMediumGrid1
 | WdStyleTableMediumList2
 | WdStyleTableMediumList1
 | WdStyleTableMediumShading2
 | WdStyleTableMediumShading1
 | WdStyleTableLightGrid
 | WdStyleTableLightList
 | WdStyleTableLightShading
 | WdStyleNormalObject
 | WdStyleNormalTable
 | WdStyleHtmlVar
 | WdStyleHtmlTt
 | WdStyleHtmlSamp
 | WdStyleHtmlPre
 | WdStyleHtmlKbd
 | WdStyleHtmlDfn
 | WdStyleHtmlCode
 | WdStyleHtmlCite
 | WdStyleHtmlAddress
 | WdStyleHtmlAcronym
 | WdStyleHtmlNormal
 | WdStylePlainText
 | WdStyleNavPane
 | WdStyleEmphasis
 | WdStyleStrong
 | WdStyleHyperlinkFollowed
 | WdStyleHyperlink
 | WdStyleBlockQuotation
 | WdStyleBodyTextIndent3
 | WdStyleBodyTextIndent2
 | WdStyleBodyText3
 | WdStyleBodyText2
 | WdStyleNoteHeading
 | WdStyleBodyTextFirstIndent2
 | WdStyleBodyTextFirstIndent
 | WdStyleDate
 | WdStyleSalutation
 | WdStyleSubtitle
 | WdStyleMessageHeader
 | WdStyleListContinue5
 | WdStyleListContinue4
 | WdStyleListContinue3
 | WdStyleListContinue2
 | WdStyleListContinue
 | WdStyleBodyTextIndent
 | WdStyleBodyText
 | WdStyleDefaultParagraphFont
 | WdStyleSignature
 | WdStyleClosing
 | WdStyleTitle
 | WdStyleListNumber5
 | WdStyleListNumber4
 | WdStyleListNumber3
 | WdStyleListNumber2
 | WdStyleListBullet5
 | WdStyleListBullet4
 | WdStyleListBullet3
 | WdStyleListBullet2
 | WdStyleList5
 | WdStyleList4
 | WdStyleList3
 | WdStyleList2
 | WdStyleListNumber
 | WdStyleListBullet
 | WdStyleList
 | WdStyleTOAHeading
 | WdStyleMacroText
 | WdStyleTableOfAuthorities
 | WdStyleEndnoteText
 | WdStyleEndnoteReference
 | WdStylePageNumber
 | WdStyleLineNumber
 | WdStyleCommentReference
 | WdStyleFootnoteReference
 | WdStyleEnvelopeReturn
 | WdStyleEnvelopeAddress
 | WdStyleTableOfFigures
 | WdStyleCaption
 | WdStyleIndexHeading
 | WdStyleFooter
 | WdStyleHeader
 | WdStyleCommentText
 | WdStyleFootnoteText
 | WdStyleNormalIndent
 | WdStyleTOC9
 | WdStyleTOC8
 | WdStyleTOC7
 | WdStyleTOC6
 | WdStyleTOC5
 | WdStyleTOC4
 | WdStyleTOC3
 | WdStyleTOC2
 | WdStyleTOC1
 | WdStyleIndex9
 | WdStyleIndex8
 | WdStyleIndex7
 | WdStyleIndex6
 | WdStyleIndex5
 | WdStyleIndex4
 | WdStyleIndex3
 | WdStyleIndex2
 | WdStyleIndex1
 | WdStyleHeading9
 | WdStyleHeading8
 | WdStyleHeading7
 | WdStyleHeading6
 | WdStyleHeading5
 | WdStyleHeading4
 | WdStyleHeading3
 | WdStyleHeading2
 | WdStyleHeading1
 | WdStyleNormal
 
instance Enum (WdBuiltinStyle) where
  fromEnum v =
    case v of
       WdStyleTocHeading -> (-267)
       WdStyleBibliography -> (-266)
       WdStyleBookTitle -> (-265)
       WdStyleIntenseReference -> (-264)
       WdStyleSubtleReference -> (-263)
       WdStyleIntenseEmphasis -> (-262)
       WdStyleSubtleEmphasis -> (-261)
       WdStyleIntenseQuote -> (-182)
       WdStyleQuote -> (-181)
       WdStyleListParagraph -> (-180)
       WdStyleTableMediumList1Accent1 -> (-178)
       WdStyleTableMediumShading2Accent1 -> (-177)
       WdStyleTableMediumShading1Accent1 -> (-176)
       WdStyleTableLightGridAccent1 -> (-175)
       WdStyleTableLightListAccent1 -> (-174)
       WdStyleTableLightShadingAccent1 -> (-173)
       WdStyleTableColorfulGrid -> (-172)
       WdStyleTableColorfulList -> (-171)
       WdStyleTableColorfulShading -> (-170)
       WdStyleTableDarkList -> (-169)
       WdStyleTableMediumGrid3 -> (-168)
       WdStyleTableMediumGrid2 -> (-167)
       WdStyleTableMediumGrid1 -> (-166)
       WdStyleTableMediumList2 -> (-165)
       WdStyleTableMediumList1 -> (-164)
       WdStyleTableMediumShading2 -> (-163)
       WdStyleTableMediumShading1 -> (-162)
       WdStyleTableLightGrid -> (-161)
       WdStyleTableLightList -> (-160)
       WdStyleTableLightShading -> (-159)
       WdStyleNormalObject -> (-158)
       WdStyleNormalTable -> (-106)
       WdStyleHtmlVar -> (-105)
       WdStyleHtmlTt -> (-104)
       WdStyleHtmlSamp -> (-103)
       WdStyleHtmlPre -> (-102)
       WdStyleHtmlKbd -> (-101)
       WdStyleHtmlDfn -> (-100)
       WdStyleHtmlCode -> (-99)
       WdStyleHtmlCite -> (-98)
       WdStyleHtmlAddress -> (-97)
       WdStyleHtmlAcronym -> (-96)
       WdStyleHtmlNormal -> (-95)
       WdStylePlainText -> (-91)
       WdStyleNavPane -> (-90)
       WdStyleEmphasis -> (-89)
       WdStyleStrong -> (-88)
       WdStyleHyperlinkFollowed -> (-87)
       WdStyleHyperlink -> (-86)
       WdStyleBlockQuotation -> (-85)
       WdStyleBodyTextIndent3 -> (-84)
       WdStyleBodyTextIndent2 -> (-83)
       WdStyleBodyText3 -> (-82)
       WdStyleBodyText2 -> (-81)
       WdStyleNoteHeading -> (-80)
       WdStyleBodyTextFirstIndent2 -> (-79)
       WdStyleBodyTextFirstIndent -> (-78)
       WdStyleDate -> (-77)
       WdStyleSalutation -> (-76)
       WdStyleSubtitle -> (-75)
       WdStyleMessageHeader -> (-74)
       WdStyleListContinue5 -> (-73)
       WdStyleListContinue4 -> (-72)
       WdStyleListContinue3 -> (-71)
       WdStyleListContinue2 -> (-70)
       WdStyleListContinue -> (-69)
       WdStyleBodyTextIndent -> (-68)
       WdStyleBodyText -> (-67)
       WdStyleDefaultParagraphFont -> (-66)
       WdStyleSignature -> (-65)
       WdStyleClosing -> (-64)
       WdStyleTitle -> (-63)
       WdStyleListNumber5 -> (-62)
       WdStyleListNumber4 -> (-61)
       WdStyleListNumber3 -> (-60)
       WdStyleListNumber2 -> (-59)
       WdStyleListBullet5 -> (-58)
       WdStyleListBullet4 -> (-57)
       WdStyleListBullet3 -> (-56)
       WdStyleListBullet2 -> (-55)
       WdStyleList5 -> (-54)
       WdStyleList4 -> (-53)
       WdStyleList3 -> (-52)
       WdStyleList2 -> (-51)
       WdStyleListNumber -> (-50)
       WdStyleListBullet -> (-49)
       WdStyleList -> (-48)
       WdStyleTOAHeading -> (-47)
       WdStyleMacroText -> (-46)
       WdStyleTableOfAuthorities -> (-45)
       WdStyleEndnoteText -> (-44)
       WdStyleEndnoteReference -> (-43)
       WdStylePageNumber -> (-42)
       WdStyleLineNumber -> (-41)
       WdStyleCommentReference -> (-40)
       WdStyleFootnoteReference -> (-39)
       WdStyleEnvelopeReturn -> (-38)
       WdStyleEnvelopeAddress -> (-37)
       WdStyleTableOfFigures -> (-36)
       WdStyleCaption -> (-35)
       WdStyleIndexHeading -> (-34)
       WdStyleFooter -> (-33)
       WdStyleHeader -> (-32)
       WdStyleCommentText -> (-31)
       WdStyleFootnoteText -> (-30)
       WdStyleNormalIndent -> (-29)
       WdStyleTOC9 -> (-28)
       WdStyleTOC8 -> (-27)
       WdStyleTOC7 -> (-26)
       WdStyleTOC6 -> (-25)
       WdStyleTOC5 -> (-24)
       WdStyleTOC4 -> (-23)
       WdStyleTOC3 -> (-22)
       WdStyleTOC2 -> (-21)
       WdStyleTOC1 -> (-20)
       WdStyleIndex9 -> (-19)
       WdStyleIndex8 -> (-18)
       WdStyleIndex7 -> (-17)
       WdStyleIndex6 -> (-16)
       WdStyleIndex5 -> (-15)
       WdStyleIndex4 -> (-14)
       WdStyleIndex3 -> (-13)
       WdStyleIndex2 -> (-12)
       WdStyleIndex1 -> (-11)
       WdStyleHeading9 -> (-10)
       WdStyleHeading8 -> (-9)
       WdStyleHeading7 -> (-8)
       WdStyleHeading6 -> (-7)
       WdStyleHeading5 -> (-6)
       WdStyleHeading4 -> (-5)
       WdStyleHeading3 -> (-4)
       WdStyleHeading2 -> (-3)
       WdStyleHeading1 -> (-2)
       WdStyleNormal -> (-1)
  
  toEnum v =
    case v of
       (-267) -> WdStyleTocHeading
       (-266) -> WdStyleBibliography
       (-265) -> WdStyleBookTitle
       (-264) -> WdStyleIntenseReference
       (-263) -> WdStyleSubtleReference
       (-262) -> WdStyleIntenseEmphasis
       (-261) -> WdStyleSubtleEmphasis
       (-182) -> WdStyleIntenseQuote
       (-181) -> WdStyleQuote
       (-180) -> WdStyleListParagraph
       (-178) -> WdStyleTableMediumList1Accent1
       (-177) -> WdStyleTableMediumShading2Accent1
       (-176) -> WdStyleTableMediumShading1Accent1
       (-175) -> WdStyleTableLightGridAccent1
       (-174) -> WdStyleTableLightListAccent1
       (-173) -> WdStyleTableLightShadingAccent1
       (-172) -> WdStyleTableColorfulGrid
       (-171) -> WdStyleTableColorfulList
       (-170) -> WdStyleTableColorfulShading
       (-169) -> WdStyleTableDarkList
       (-168) -> WdStyleTableMediumGrid3
       (-167) -> WdStyleTableMediumGrid2
       (-166) -> WdStyleTableMediumGrid1
       (-165) -> WdStyleTableMediumList2
       (-164) -> WdStyleTableMediumList1
       (-163) -> WdStyleTableMediumShading2
       (-162) -> WdStyleTableMediumShading1
       (-161) -> WdStyleTableLightGrid
       (-160) -> WdStyleTableLightList
       (-159) -> WdStyleTableLightShading
       (-158) -> WdStyleNormalObject
       (-106) -> WdStyleNormalTable
       (-105) -> WdStyleHtmlVar
       (-104) -> WdStyleHtmlTt
       (-103) -> WdStyleHtmlSamp
       (-102) -> WdStyleHtmlPre
       (-101) -> WdStyleHtmlKbd
       (-100) -> WdStyleHtmlDfn
       (-99) -> WdStyleHtmlCode
       (-98) -> WdStyleHtmlCite
       (-97) -> WdStyleHtmlAddress
       (-96) -> WdStyleHtmlAcronym
       (-95) -> WdStyleHtmlNormal
       (-91) -> WdStylePlainText
       (-90) -> WdStyleNavPane
       (-89) -> WdStyleEmphasis
       (-88) -> WdStyleStrong
       (-87) -> WdStyleHyperlinkFollowed
       (-86) -> WdStyleHyperlink
       (-85) -> WdStyleBlockQuotation
       (-84) -> WdStyleBodyTextIndent3
       (-83) -> WdStyleBodyTextIndent2
       (-82) -> WdStyleBodyText3
       (-81) -> WdStyleBodyText2
       (-80) -> WdStyleNoteHeading
       (-79) -> WdStyleBodyTextFirstIndent2
       (-78) -> WdStyleBodyTextFirstIndent
       (-77) -> WdStyleDate
       (-76) -> WdStyleSalutation
       (-75) -> WdStyleSubtitle
       (-74) -> WdStyleMessageHeader
       (-73) -> WdStyleListContinue5
       (-72) -> WdStyleListContinue4
       (-71) -> WdStyleListContinue3
       (-70) -> WdStyleListContinue2
       (-69) -> WdStyleListContinue
       (-68) -> WdStyleBodyTextIndent
       (-67) -> WdStyleBodyText
       (-66) -> WdStyleDefaultParagraphFont
       (-65) -> WdStyleSignature
       (-64) -> WdStyleClosing
       (-63) -> WdStyleTitle
       (-62) -> WdStyleListNumber5
       (-61) -> WdStyleListNumber4
       (-60) -> WdStyleListNumber3
       (-59) -> WdStyleListNumber2
       (-58) -> WdStyleListBullet5
       (-57) -> WdStyleListBullet4
       (-56) -> WdStyleListBullet3
       (-55) -> WdStyleListBullet2
       (-54) -> WdStyleList5
       (-53) -> WdStyleList4
       (-52) -> WdStyleList3
       (-51) -> WdStyleList2
       (-50) -> WdStyleListNumber
       (-49) -> WdStyleListBullet
       (-48) -> WdStyleList
       (-47) -> WdStyleTOAHeading
       (-46) -> WdStyleMacroText
       (-45) -> WdStyleTableOfAuthorities
       (-44) -> WdStyleEndnoteText
       (-43) -> WdStyleEndnoteReference
       (-42) -> WdStylePageNumber
       (-41) -> WdStyleLineNumber
       (-40) -> WdStyleCommentReference
       (-39) -> WdStyleFootnoteReference
       (-38) -> WdStyleEnvelopeReturn
       (-37) -> WdStyleEnvelopeAddress
       (-36) -> WdStyleTableOfFigures
       (-35) -> WdStyleCaption
       (-34) -> WdStyleIndexHeading
       (-33) -> WdStyleFooter
       (-32) -> WdStyleHeader
       (-31) -> WdStyleCommentText
       (-30) -> WdStyleFootnoteText
       (-29) -> WdStyleNormalIndent
       (-28) -> WdStyleTOC9
       (-27) -> WdStyleTOC8
       (-26) -> WdStyleTOC7
       (-25) -> WdStyleTOC6
       (-24) -> WdStyleTOC5
       (-23) -> WdStyleTOC4
       (-22) -> WdStyleTOC3
       (-21) -> WdStyleTOC2
       (-20) -> WdStyleTOC1
       (-19) -> WdStyleIndex9
       (-18) -> WdStyleIndex8
       (-17) -> WdStyleIndex7
       (-16) -> WdStyleIndex6
       (-15) -> WdStyleIndex5
       (-14) -> WdStyleIndex4
       (-13) -> WdStyleIndex3
       (-12) -> WdStyleIndex2
       (-11) -> WdStyleIndex1
       (-10) -> WdStyleHeading9
       (-9) -> WdStyleHeading8
       (-8) -> WdStyleHeading7
       (-7) -> WdStyleHeading6
       (-6) -> WdStyleHeading5
       (-5) -> WdStyleHeading4
       (-4) -> WdStyleHeading3
       (-3) -> WdStyleHeading2
       (-2) -> WdStyleHeading1
       (-1) -> WdStyleNormal
       _ -> error "unmarshallWdBuiltinStyle: illegal enum value "
  
instance Variant (WdBuiltinStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWordDialogTab
 = WdDialogToolsOptionsTabGeneral
 | WdDialogToolsOptionsTabView
 | WdDialogToolsOptionsTabPrint
 | WdDialogToolsOptionsTabSave
 | WdDialogToolsOptionsTabProofread
 | WdDialogToolsOptionsTabUserInfo
 | WdDialogToolsOptionsTabEdit
 | WdDialogToolsOptionsTabFileLocations
 | WdDialogToolsOptionsTabTrackChanges
 | WdDialogToolsOptionsTabCompatibility
 | WdDialogToolsOptionsTabTypography
 | WdDialogToolsOptionsTabHangulHanjaConversion
 | WdDialogToolsOptionsTabFuzzy
 | WdDialogToolsOptionsTabBidi
 | WdDialogToolsOptionsTabAcetate
 | WdDialogToolsOptionsTabSecurity
 | WdDialogFilePageSetupTabMargins
 | WdDialogFilePageSetupTabPaper
 | WdDialogFilePageSetupTabLayout
 | WdDialogFilePageSetupTabCharsLines
 | WdDialogInsertSymbolTabSymbols
 | WdDialogInsertSymbolTabSpecialCharacters
 | WdDialogNoteOptionsTabAllFootnotes
 | WdDialogNoteOptionsTabAllEndnotes
 | WdDialogInsertIndexAndTablesTabIndex
 | WdDialogInsertIndexAndTablesTabTableOfContents
 | WdDialogInsertIndexAndTablesTabTableOfFigures
 | WdDialogInsertIndexAndTablesTabTableOfAuthorities
 | WdDialogOrganizerTabStyles
 | WdDialogOrganizerTabAutoText
 | WdDialogOrganizerTabCommandBars
 | WdDialogOrganizerTabMacros
 | WdDialogFormatFontTabFont
 | WdDialogFormatFontTabCharacterSpacing
 | WdDialogFormatFontTabAnimation
 | WdDialogFormatBordersAndShadingTabBorders
 | WdDialogFormatBordersAndShadingTabPageBorder
 | WdDialogFormatBordersAndShadingTabShading
 | WdDialogToolsEnvelopesAndLabelsTabEnvelopes
 | WdDialogToolsEnvelopesAndLabelsTabLabels
 | WdDialogFormatParagraphTabIndentsAndSpacing
 | WdDialogFormatParagraphTabTextFlow
 | WdDialogFormatParagraphTabTeisai
 | WdDialogFormatDrawingObjectTabColorsAndLines
 | WdDialogFormatDrawingObjectTabSize
 | WdDialogFormatDrawingObjectTabPosition
 | WdDialogFormatDrawingObjectTabWrapping
 | WdDialogFormatDrawingObjectTabPicture
 | WdDialogFormatDrawingObjectTabTextbox
 | WdDialogFormatDrawingObjectTabWeb
 | WdDialogFormatDrawingObjectTabHR
 | WdDialogToolsAutoCorrectExceptionsTabFirstLetter
 | WdDialogToolsAutoCorrectExceptionsTabInitialCaps
 | WdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet
 | WdDialogToolsAutoCorrectExceptionsTabIac
 | WdDialogFormatBulletsAndNumberingTabBulleted
 | WdDialogFormatBulletsAndNumberingTabNumbered
 | WdDialogFormatBulletsAndNumberingTabOutlineNumbered
 | WdDialogLetterWizardTabLetterFormat
 | WdDialogLetterWizardTabRecipientInfo
 | WdDialogLetterWizardTabOtherElements
 | WdDialogLetterWizardTabSenderInfo
 | WdDialogToolsAutoManagerTabAutoCorrect
 | WdDialogToolsAutoManagerTabAutoFormatAsYouType
 | WdDialogToolsAutoManagerTabAutoText
 | WdDialogToolsAutoManagerTabAutoFormat
 | WdDialogToolsAutoManagerTabSmartTags
 | WdDialogTablePropertiesTabTable
 | WdDialogTablePropertiesTabRow
 | WdDialogTablePropertiesTabColumn
 | WdDialogTablePropertiesTabCell
 | WdDialogEmailOptionsTabSignature
 | WdDialogEmailOptionsTabStationary
 | WdDialogEmailOptionsTabQuoting
 | WdDialogWebOptionsBrowsers
 | WdDialogWebOptionsGeneral
 | WdDialogWebOptionsFiles
 | WdDialogWebOptionsPictures
 | WdDialogWebOptionsEncoding
 | WdDialogWebOptionsFonts
 | WdDialogTemplates
 | WdDialogTemplatesXMLSchema
 | WdDialogTemplatesXMLExpansionPacks
 | WdDialogTemplatesLinkedCSS
 | WdDialogStyleManagementTabEdit
 | WdDialogStyleManagementTabRecommend
 | WdDialogStyleManagementTabRestrict
 
instance Enum (WdWordDialogTab) where
  fromEnum v =
    case v of
       WdDialogToolsOptionsTabGeneral -> 203
       WdDialogToolsOptionsTabView -> 204
       WdDialogToolsOptionsTabPrint -> 208
       WdDialogToolsOptionsTabSave -> 209
       WdDialogToolsOptionsTabProofread -> 211
       WdDialogToolsOptionsTabUserInfo -> 213
       WdDialogToolsOptionsTabEdit -> 224
       WdDialogToolsOptionsTabFileLocations -> 225
       WdDialogToolsOptionsTabTrackChanges -> 386
       WdDialogToolsOptionsTabCompatibility -> 525
       WdDialogToolsOptionsTabTypography -> 739
       WdDialogToolsOptionsTabHangulHanjaConversion -> 786
       WdDialogToolsOptionsTabFuzzy -> 790
       WdDialogToolsOptionsTabBidi -> 1029
       WdDialogToolsOptionsTabAcetate -> 1266
       WdDialogToolsOptionsTabSecurity -> 1361
       WdDialogFilePageSetupTabMargins -> 150000
       WdDialogFilePageSetupTabPaper -> 150001
       WdDialogFilePageSetupTabLayout -> 150003
       WdDialogFilePageSetupTabCharsLines -> 150004
       WdDialogInsertSymbolTabSymbols -> 200000
       WdDialogInsertSymbolTabSpecialCharacters -> 200001
       WdDialogNoteOptionsTabAllFootnotes -> 300000
       WdDialogNoteOptionsTabAllEndnotes -> 300001
       WdDialogInsertIndexAndTablesTabIndex -> 400000
       WdDialogInsertIndexAndTablesTabTableOfContents -> 400001
       WdDialogInsertIndexAndTablesTabTableOfFigures -> 400002
       WdDialogInsertIndexAndTablesTabTableOfAuthorities -> 400003
       WdDialogOrganizerTabStyles -> 500000
       WdDialogOrganizerTabAutoText -> 500001
       WdDialogOrganizerTabCommandBars -> 500002
       WdDialogOrganizerTabMacros -> 500003
       WdDialogFormatFontTabFont -> 600000
       WdDialogFormatFontTabCharacterSpacing -> 600001
       WdDialogFormatFontTabAnimation -> 600002
       WdDialogFormatBordersAndShadingTabBorders -> 700000
       WdDialogFormatBordersAndShadingTabPageBorder -> 700001
       WdDialogFormatBordersAndShadingTabShading -> 700002
       WdDialogToolsEnvelopesAndLabelsTabEnvelopes -> 800000
       WdDialogToolsEnvelopesAndLabelsTabLabels -> 800001
       WdDialogFormatParagraphTabIndentsAndSpacing -> 1000000
       WdDialogFormatParagraphTabTextFlow -> 1000001
       WdDialogFormatParagraphTabTeisai -> 1000002
       WdDialogFormatDrawingObjectTabColorsAndLines -> 1200000
       WdDialogFormatDrawingObjectTabSize -> 1200001
       WdDialogFormatDrawingObjectTabPosition -> 1200002
       WdDialogFormatDrawingObjectTabWrapping -> 1200003
       WdDialogFormatDrawingObjectTabPicture -> 1200004
       WdDialogFormatDrawingObjectTabTextbox -> 1200005
       WdDialogFormatDrawingObjectTabWeb -> 1200006
       WdDialogFormatDrawingObjectTabHR -> 1200007
       WdDialogToolsAutoCorrectExceptionsTabFirstLetter -> 1400000
       WdDialogToolsAutoCorrectExceptionsTabInitialCaps -> 1400001
       WdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet -> 1400002
       WdDialogToolsAutoCorrectExceptionsTabIac -> 1400003
       WdDialogFormatBulletsAndNumberingTabBulleted -> 1500000
       WdDialogFormatBulletsAndNumberingTabNumbered -> 1500001
       WdDialogFormatBulletsAndNumberingTabOutlineNumbered -> 1500002
       WdDialogLetterWizardTabLetterFormat -> 1600000
       WdDialogLetterWizardTabRecipientInfo -> 1600001
       WdDialogLetterWizardTabOtherElements -> 1600002
       WdDialogLetterWizardTabSenderInfo -> 1600003
       WdDialogToolsAutoManagerTabAutoCorrect -> 1700000
       WdDialogToolsAutoManagerTabAutoFormatAsYouType -> 1700001
       WdDialogToolsAutoManagerTabAutoText -> 1700002
       WdDialogToolsAutoManagerTabAutoFormat -> 1700003
       WdDialogToolsAutoManagerTabSmartTags -> 1700004
       WdDialogTablePropertiesTabTable -> 1800000
       WdDialogTablePropertiesTabRow -> 1800001
       WdDialogTablePropertiesTabColumn -> 1800002
       WdDialogTablePropertiesTabCell -> 1800003
       WdDialogEmailOptionsTabSignature -> 1900000
       WdDialogEmailOptionsTabStationary -> 1900001
       WdDialogEmailOptionsTabQuoting -> 1900002
       WdDialogWebOptionsBrowsers -> 2000000
       WdDialogWebOptionsGeneral -> 2000000
       WdDialogWebOptionsFiles -> 2000001
       WdDialogWebOptionsPictures -> 2000002
       WdDialogWebOptionsEncoding -> 2000003
       WdDialogWebOptionsFonts -> 2000004
       WdDialogTemplates -> 2100000
       WdDialogTemplatesXMLSchema -> 2100001
       WdDialogTemplatesXMLExpansionPacks -> 2100002
       WdDialogTemplatesLinkedCSS -> 2100003
       WdDialogStyleManagementTabEdit -> 2200000
       WdDialogStyleManagementTabRecommend -> 2200001
       WdDialogStyleManagementTabRestrict -> 2200002
  
  toEnum v =
    case v of
       203 -> WdDialogToolsOptionsTabGeneral
       204 -> WdDialogToolsOptionsTabView
       208 -> WdDialogToolsOptionsTabPrint
       209 -> WdDialogToolsOptionsTabSave
       211 -> WdDialogToolsOptionsTabProofread
       213 -> WdDialogToolsOptionsTabUserInfo
       224 -> WdDialogToolsOptionsTabEdit
       225 -> WdDialogToolsOptionsTabFileLocations
       386 -> WdDialogToolsOptionsTabTrackChanges
       525 -> WdDialogToolsOptionsTabCompatibility
       739 -> WdDialogToolsOptionsTabTypography
       786 -> WdDialogToolsOptionsTabHangulHanjaConversion
       790 -> WdDialogToolsOptionsTabFuzzy
       1029 -> WdDialogToolsOptionsTabBidi
       1266 -> WdDialogToolsOptionsTabAcetate
       1361 -> WdDialogToolsOptionsTabSecurity
       150000 -> WdDialogFilePageSetupTabMargins
       150001 -> WdDialogFilePageSetupTabPaper
       150003 -> WdDialogFilePageSetupTabLayout
       150004 -> WdDialogFilePageSetupTabCharsLines
       200000 -> WdDialogInsertSymbolTabSymbols
       200001 -> WdDialogInsertSymbolTabSpecialCharacters
       300000 -> WdDialogNoteOptionsTabAllFootnotes
       300001 -> WdDialogNoteOptionsTabAllEndnotes
       400000 -> WdDialogInsertIndexAndTablesTabIndex
       400001 -> WdDialogInsertIndexAndTablesTabTableOfContents
       400002 -> WdDialogInsertIndexAndTablesTabTableOfFigures
       400003 -> WdDialogInsertIndexAndTablesTabTableOfAuthorities
       500000 -> WdDialogOrganizerTabStyles
       500001 -> WdDialogOrganizerTabAutoText
       500002 -> WdDialogOrganizerTabCommandBars
       500003 -> WdDialogOrganizerTabMacros
       600000 -> WdDialogFormatFontTabFont
       600001 -> WdDialogFormatFontTabCharacterSpacing
       600002 -> WdDialogFormatFontTabAnimation
       700000 -> WdDialogFormatBordersAndShadingTabBorders
       700001 -> WdDialogFormatBordersAndShadingTabPageBorder
       700002 -> WdDialogFormatBordersAndShadingTabShading
       800000 -> WdDialogToolsEnvelopesAndLabelsTabEnvelopes
       800001 -> WdDialogToolsEnvelopesAndLabelsTabLabels
       1000000 -> WdDialogFormatParagraphTabIndentsAndSpacing
       1000001 -> WdDialogFormatParagraphTabTextFlow
       1000002 -> WdDialogFormatParagraphTabTeisai
       1200000 -> WdDialogFormatDrawingObjectTabColorsAndLines
       1200001 -> WdDialogFormatDrawingObjectTabSize
       1200002 -> WdDialogFormatDrawingObjectTabPosition
       1200003 -> WdDialogFormatDrawingObjectTabWrapping
       1200004 -> WdDialogFormatDrawingObjectTabPicture
       1200005 -> WdDialogFormatDrawingObjectTabTextbox
       1200006 -> WdDialogFormatDrawingObjectTabWeb
       1200007 -> WdDialogFormatDrawingObjectTabHR
       1400000 -> WdDialogToolsAutoCorrectExceptionsTabFirstLetter
       1400001 -> WdDialogToolsAutoCorrectExceptionsTabInitialCaps
       1400002 -> WdDialogToolsAutoCorrectExceptionsTabHangulAndAlphabet
       1400003 -> WdDialogToolsAutoCorrectExceptionsTabIac
       1500000 -> WdDialogFormatBulletsAndNumberingTabBulleted
       1500001 -> WdDialogFormatBulletsAndNumberingTabNumbered
       1500002 -> WdDialogFormatBulletsAndNumberingTabOutlineNumbered
       1600000 -> WdDialogLetterWizardTabLetterFormat
       1600001 -> WdDialogLetterWizardTabRecipientInfo
       1600002 -> WdDialogLetterWizardTabOtherElements
       1600003 -> WdDialogLetterWizardTabSenderInfo
       1700000 -> WdDialogToolsAutoManagerTabAutoCorrect
       1700001 -> WdDialogToolsAutoManagerTabAutoFormatAsYouType
       1700002 -> WdDialogToolsAutoManagerTabAutoText
       1700003 -> WdDialogToolsAutoManagerTabAutoFormat
       1700004 -> WdDialogToolsAutoManagerTabSmartTags
       1800000 -> WdDialogTablePropertiesTabTable
       1800001 -> WdDialogTablePropertiesTabRow
       1800002 -> WdDialogTablePropertiesTabColumn
       1800003 -> WdDialogTablePropertiesTabCell
       1900000 -> WdDialogEmailOptionsTabSignature
       1900001 -> WdDialogEmailOptionsTabStationary
       1900002 -> WdDialogEmailOptionsTabQuoting
       2000000 -> WdDialogWebOptionsBrowsers
       2000000 -> WdDialogWebOptionsGeneral
       2000001 -> WdDialogWebOptionsFiles
       2000002 -> WdDialogWebOptionsPictures
       2000003 -> WdDialogWebOptionsEncoding
       2000004 -> WdDialogWebOptionsFonts
       2100000 -> WdDialogTemplates
       2100001 -> WdDialogTemplatesXMLSchema
       2100002 -> WdDialogTemplatesXMLExpansionPacks
       2100003 -> WdDialogTemplatesLinkedCSS
       2200000 -> WdDialogStyleManagementTabEdit
       2200001 -> WdDialogStyleManagementTabRecommend
       2200002 -> WdDialogStyleManagementTabRestrict
       _ -> error "unmarshallWdWordDialogTab: illegal enum value "
  
instance Variant (WdWordDialogTab) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWordDialogTabHID
 = WdDialogFilePageSetupTabPaperSize
 | WdDialogFilePageSetupTabPaperSource
 
instance Enum (WdWordDialogTabHID) where
  fromEnum v =
    case v of
       WdDialogFilePageSetupTabPaperSize -> 150001
       WdDialogFilePageSetupTabPaperSource -> 150002
  
  toEnum v =
    case v of
       150001 -> WdDialogFilePageSetupTabPaperSize
       150002 -> WdDialogFilePageSetupTabPaperSource
       _ -> error "unmarshallWdWordDialogTabHID: illegal enum value "
  
instance Variant (WdWordDialogTabHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWordDialog
 = WdDialogHelpAbout
 | WdDialogHelpWordPerfectHelp
 | WdDialogDocumentStatistics
 | WdDialogFileNew
 | WdDialogFileOpen
 | WdDialogMailMergeOpenDataSource
 | WdDialogMailMergeOpenHeaderSource
 | WdDialogFileSaveAs
 | WdDialogFileSummaryInfo
 | WdDialogToolsTemplates
 | WdDialogFilePrint
 | WdDialogFilePrintSetup
 | WdDialogFileFind
 | WdDialogFormatAddrFonts
 | WdDialogEditPasteSpecial
 | WdDialogEditFind
 | WdDialogEditReplace
 | WdDialogEditStyle
 | WdDialogEditLinks
 | WdDialogEditObject
 | WdDialogTextToTable
 | WdDialogTableToText
 | WdDialogTableInsertTable
 | WdDialogTableInsertCells
 | WdDialogTableInsertRow
 | WdDialogTableDeleteCells
 | WdDialogTableSplitCells
 | WdDialogTableRowHeight
 | WdDialogTableColumnWidth
 | WdDialogToolsCustomize
 | WdDialogInsertBreak
 | WdDialogInsertSymbol
 | WdDialogInsertPicture
 | WdDialogInsertFile
 | WdDialogInsertDateTime
 | WdDialogInsertField
 | WdDialogInsertMergeField
 | WdDialogInsertBookmark
 | WdDialogMarkIndexEntry
 | WdDialogInsertIndex
 | WdDialogInsertTableOfContents
 | WdDialogInsertObject
 | WdDialogToolsCreateEnvelope
 | WdDialogFormatFont
 | WdDialogFormatParagraph
 | WdDialogFormatSectionLayout
 | WdDialogFormatColumns
 | WdDialogFileDocumentLayout
 | WdDialogFilePageSetup
 | WdDialogFormatTabs
 | WdDialogFormatStyle
 | WdDialogFormatDefineStyleFont
 | WdDialogFormatDefineStylePara
 | WdDialogFormatDefineStyleTabs
 | WdDialogFormatDefineStyleFrame
 | WdDialogFormatDefineStyleBorders
 | WdDialogFormatDefineStyleLang
 | WdDialogFormatPicture
 | WdDialogToolsLanguage
 | WdDialogFormatBordersAndShading
 | WdDialogFormatFrame
 | WdDialogToolsThesaurus
 | WdDialogToolsHyphenation
 | WdDialogToolsBulletsNumbers
 | WdDialogToolsHighlightChanges
 | WdDialogToolsRevisions
 | WdDialogToolsCompareDocuments
 | WdDialogTableSort
 | WdDialogToolsOptionsGeneral
 | WdDialogToolsOptionsView
 | WdDialogToolsAdvancedSettings
 | WdDialogToolsOptionsPrint
 | WdDialogToolsOptionsSave
 | WdDialogToolsOptionsSpellingAndGrammar
 | WdDialogToolsOptionsUserInfo
 | WdDialogToolsMacroRecord
 | WdDialogToolsMacro
 | WdDialogWindowActivate
 | WdDialogFormatRetAddrFonts
 | WdDialogOrganizer
 | WdDialogToolsOptionsEdit
 | WdDialogToolsOptionsFileLocations
 | WdDialogToolsWordCount
 | WdDialogControlRun
 | WdDialogInsertPageNumbers
 | WdDialogFormatPageNumber
 | WdDialogCopyFile
 | WdDialogFormatChangeCase
 | WdDialogUpdateTOC
 | WdDialogInsertDatabase
 | WdDialogTableFormula
 | WdDialogFormFieldOptions
 | WdDialogInsertCaption
 | WdDialogInsertCaptionNumbering
 | WdDialogInsertAutoCaption
 | WdDialogFormFieldHelp
 | WdDialogInsertCrossReference
 | WdDialogInsertFootnote
 | WdDialogNoteOptions
 | WdDialogToolsAutoCorrect
 | WdDialogToolsOptionsTrackChanges
 | WdDialogConvertObject
 | WdDialogInsertAddCaption
 | WdDialogConnect
 | WdDialogToolsCustomizeKeyboard
 | WdDialogToolsCustomizeMenus
 | WdDialogToolsMergeDocuments
 | WdDialogMarkTableOfContentsEntry
 | WdDialogFileMacPageSetupGX
 | WdDialogFilePrintOneCopy
 | WdDialogEditFrame
 | WdDialogMarkCitation
 | WdDialogTableOfContentsOptions
 | WdDialogInsertTableOfAuthorities
 | WdDialogInsertTableOfFigures
 | WdDialogInsertIndexAndTables
 | WdDialogInsertFormField
 | WdDialogFormatDropCap
 | WdDialogToolsCreateLabels
 | WdDialogToolsProtectDocument
 | WdDialogFormatStyleGallery
 | WdDialogToolsAcceptRejectChanges
 | WdDialogHelpWordPerfectHelpOptions
 | WdDialogToolsUnprotectDocument
 | WdDialogToolsOptionsCompatibility
 | WdDialogTableOfCaptionsOptions
 | WdDialogTableAutoFormat
 | WdDialogMailMergeFindRecord
 | WdDialogReviewAfmtRevisions
 | WdDialogViewZoom
 | WdDialogToolsProtectSection
 | WdDialogFontSubstitution
 | WdDialogInsertSubdocument
 | WdDialogNewToolbar
 | WdDialogToolsEnvelopesAndLabels
 | WdDialogFormatCallout
 | WdDialogTableFormatCell
 | WdDialogToolsCustomizeMenuBar
 | WdDialogFileRoutingSlip
 | WdDialogEditTOACategory
 | WdDialogToolsManageFields
 | WdDialogDrawSnapToGrid
 | WdDialogDrawAlign
 | WdDialogMailMergeCreateDataSource
 | WdDialogMailMergeCreateHeaderSource
 | WdDialogMailMerge
 | WdDialogMailMergeCheck
 | WdDialogMailMergeHelper
 | WdDialogMailMergeQueryOptions
 | WdDialogFileMacPageSetup
 | WdDialogListCommands
 | WdDialogEditCreatePublisher
 | WdDialogEditSubscribeTo
 | WdDialogEditPublishOptions
 | WdDialogEditSubscribeOptions
 | WdDialogFileMacCustomPageSetupGX
 | WdDialogToolsOptionsTypography
 | WdDialogToolsAutoCorrectExceptions
 | WdDialogToolsOptionsAutoFormatAsYouType
 | WdDialogMailMergeUseAddressBook
 | WdDialogToolsHangulHanjaConversion
 | WdDialogToolsOptionsFuzzy
 | WdDialogEditGoToOld
 | WdDialogInsertNumber
 | WdDialogLetterWizard
 | WdDialogFormatBulletsAndNumbering
 | WdDialogToolsSpellingAndGrammar
 | WdDialogToolsCreateDirectory
 | WdDialogTableWrapping
 | WdDialogFormatTheme
 | WdDialogTableProperties
 | WdDialogEmailOptions
 | WdDialogCreateAutoText
 | WdDialogToolsAutoSummarize
 | WdDialogToolsGrammarSettings
 | WdDialogEditGoTo
 | WdDialogWebOptions
 | WdDialogToolsAutoManager
 | WdDialogInsertHyperlink
 | WdDialogFileVersions
 | WdDialogToolsOptionsAutoFormat
 | WdDialogFormatDrawingObject
 | WdDialogToolsOptions
 | WdDialogFitText
 | WdDialogEditAutoText
 | WdDialogPhoneticGuide
 | WdDialogToolsDictionary
 | WdDialogFileSaveVersion
 | WdDialogToolsOptionsBidi
 | WdDialogFrameSetProperties
 | WdDialogTableTableOptions
 | WdDialogTableCellOptions
 | WdDialogIMESetDefault
 | WdDialogConsistencyChecker
 | WdDialogTCSCTranslator
 | WdDialogHorizontalInVertical
 | WdDialogTwoLinesInOne
 | WdDialogFormatEncloseCharacters
 | WdDialogFormatStylesCustom
 | WdDialogCSSLinks
 | WdDialogMailMergeFieldMapping
 | WdDialogMailMergeInsertAddressBlock
 | WdDialogMailMergeInsertGreetingLine
 | WdDialogMailMergeInsertFields
 | WdDialogMailMergeRecipients
 | WdDialogInsertWebComponent
 | WdDialogMailMergeFindRecipient
 | WdDialogMailMergeSetDocumentType
 | WdDialogToolsOptionsEditCopyPaste
 | WdDialogToolsOptionsSecurity
 | WdDialogSearch
 | WdDialogLabelOptions
 | WdDialogShowRepairs
 | WdDialogToolsOptionsSmartTag
 | WdDialogSchemaLibrary
 | WdDialogXMLOptions
 | WdDialogFormattingRestrictions
 | WdDialogMyPermission
 | WdDialogXMLElementAttributes
 | WdDialogPermission
 | WdDialogDocumentInspector
 | WdDialogSourceManager
 | WdDialogCreateSource
 | WdDialogStyleManagement
 | WdDialogBuildingBlockOrganizer
 | WdDialogInsertSource
 | WdDialogOMathRecognizedFunctions
 | WdDialogInsertPlaceholder
 | WdDialogExportAsFixedFormat
 | WdDialogContentControlProperties
 | WdDialogCompatibilityChecker
 | WdDialogMailMergeInsertAsk
 | WdDialogMailMergeInsertFillIn
 | WdDialogMailMergeInsertIf
 | WdDialogMailMergeInsertNextIf
 | WdDialogMailMergeInsertSet
 | WdDialogMailMergeInsertSkipIf
 
instance Enum (WdWordDialog) where
  fromEnum v =
    case v of
       WdDialogHelpAbout -> 9
       WdDialogHelpWordPerfectHelp -> 10
       WdDialogDocumentStatistics -> 78
       WdDialogFileNew -> 79
       WdDialogFileOpen -> 80
       WdDialogMailMergeOpenDataSource -> 81
       WdDialogMailMergeOpenHeaderSource -> 82
       WdDialogFileSaveAs -> 84
       WdDialogFileSummaryInfo -> 86
       WdDialogToolsTemplates -> 87
       WdDialogFilePrint -> 88
       WdDialogFilePrintSetup -> 97
       WdDialogFileFind -> 99
       WdDialogFormatAddrFonts -> 103
       WdDialogEditPasteSpecial -> 111
       WdDialogEditFind -> 112
       WdDialogEditReplace -> 117
       WdDialogEditStyle -> 120
       WdDialogEditLinks -> 124
       WdDialogEditObject -> 125
       WdDialogTextToTable -> 127
       WdDialogTableToText -> 128
       WdDialogTableInsertTable -> 129
       WdDialogTableInsertCells -> 130
       WdDialogTableInsertRow -> 131
       WdDialogTableDeleteCells -> 133
       WdDialogTableSplitCells -> 137
       WdDialogTableRowHeight -> 142
       WdDialogTableColumnWidth -> 143
       WdDialogToolsCustomize -> 152
       WdDialogInsertBreak -> 159
       WdDialogInsertSymbol -> 162
       WdDialogInsertPicture -> 163
       WdDialogInsertFile -> 164
       WdDialogInsertDateTime -> 165
       WdDialogInsertField -> 166
       WdDialogInsertMergeField -> 167
       WdDialogInsertBookmark -> 168
       WdDialogMarkIndexEntry -> 169
       WdDialogInsertIndex -> 170
       WdDialogInsertTableOfContents -> 171
       WdDialogInsertObject -> 172
       WdDialogToolsCreateEnvelope -> 173
       WdDialogFormatFont -> 174
       WdDialogFormatParagraph -> 175
       WdDialogFormatSectionLayout -> 176
       WdDialogFormatColumns -> 177
       WdDialogFileDocumentLayout -> 178
       WdDialogFilePageSetup -> 178
       WdDialogFormatTabs -> 179
       WdDialogFormatStyle -> 180
       WdDialogFormatDefineStyleFont -> 181
       WdDialogFormatDefineStylePara -> 182
       WdDialogFormatDefineStyleTabs -> 183
       WdDialogFormatDefineStyleFrame -> 184
       WdDialogFormatDefineStyleBorders -> 185
       WdDialogFormatDefineStyleLang -> 186
       WdDialogFormatPicture -> 187
       WdDialogToolsLanguage -> 188
       WdDialogFormatBordersAndShading -> 189
       WdDialogFormatFrame -> 190
       WdDialogToolsThesaurus -> 194
       WdDialogToolsHyphenation -> 195
       WdDialogToolsBulletsNumbers -> 196
       WdDialogToolsHighlightChanges -> 197
       WdDialogToolsRevisions -> 197
       WdDialogToolsCompareDocuments -> 198
       WdDialogTableSort -> 199
       WdDialogToolsOptionsGeneral -> 203
       WdDialogToolsOptionsView -> 204
       WdDialogToolsAdvancedSettings -> 206
       WdDialogToolsOptionsPrint -> 208
       WdDialogToolsOptionsSave -> 209
       WdDialogToolsOptionsSpellingAndGrammar -> 211
       WdDialogToolsOptionsUserInfo -> 213
       WdDialogToolsMacroRecord -> 214
       WdDialogToolsMacro -> 215
       WdDialogWindowActivate -> 220
       WdDialogFormatRetAddrFonts -> 221
       WdDialogOrganizer -> 222
       WdDialogToolsOptionsEdit -> 224
       WdDialogToolsOptionsFileLocations -> 225
       WdDialogToolsWordCount -> 228
       WdDialogControlRun -> 235
       WdDialogInsertPageNumbers -> 294
       WdDialogFormatPageNumber -> 298
       WdDialogCopyFile -> 300
       WdDialogFormatChangeCase -> 322
       WdDialogUpdateTOC -> 331
       WdDialogInsertDatabase -> 341
       WdDialogTableFormula -> 348
       WdDialogFormFieldOptions -> 353
       WdDialogInsertCaption -> 357
       WdDialogInsertCaptionNumbering -> 358
       WdDialogInsertAutoCaption -> 359
       WdDialogFormFieldHelp -> 361
       WdDialogInsertCrossReference -> 367
       WdDialogInsertFootnote -> 370
       WdDialogNoteOptions -> 373
       WdDialogToolsAutoCorrect -> 378
       WdDialogToolsOptionsTrackChanges -> 386
       WdDialogConvertObject -> 392
       WdDialogInsertAddCaption -> 402
       WdDialogConnect -> 420
       WdDialogToolsCustomizeKeyboard -> 432
       WdDialogToolsCustomizeMenus -> 433
       WdDialogToolsMergeDocuments -> 435
       WdDialogMarkTableOfContentsEntry -> 442
       WdDialogFileMacPageSetupGX -> 444
       WdDialogFilePrintOneCopy -> 445
       WdDialogEditFrame -> 458
       WdDialogMarkCitation -> 463
       WdDialogTableOfContentsOptions -> 470
       WdDialogInsertTableOfAuthorities -> 471
       WdDialogInsertTableOfFigures -> 472
       WdDialogInsertIndexAndTables -> 473
       WdDialogInsertFormField -> 483
       WdDialogFormatDropCap -> 488
       WdDialogToolsCreateLabels -> 489
       WdDialogToolsProtectDocument -> 503
       WdDialogFormatStyleGallery -> 505
       WdDialogToolsAcceptRejectChanges -> 506
       WdDialogHelpWordPerfectHelpOptions -> 511
       WdDialogToolsUnprotectDocument -> 521
       WdDialogToolsOptionsCompatibility -> 525
       WdDialogTableOfCaptionsOptions -> 551
       WdDialogTableAutoFormat -> 563
       WdDialogMailMergeFindRecord -> 569
       WdDialogReviewAfmtRevisions -> 570
       WdDialogViewZoom -> 577
       WdDialogToolsProtectSection -> 578
       WdDialogFontSubstitution -> 581
       WdDialogInsertSubdocument -> 583
       WdDialogNewToolbar -> 586
       WdDialogToolsEnvelopesAndLabels -> 607
       WdDialogFormatCallout -> 610
       WdDialogTableFormatCell -> 612
       WdDialogToolsCustomizeMenuBar -> 615
       WdDialogFileRoutingSlip -> 624
       WdDialogEditTOACategory -> 625
       WdDialogToolsManageFields -> 631
       WdDialogDrawSnapToGrid -> 633
       WdDialogDrawAlign -> 634
       WdDialogMailMergeCreateDataSource -> 642
       WdDialogMailMergeCreateHeaderSource -> 643
       WdDialogMailMerge -> 676
       WdDialogMailMergeCheck -> 677
       WdDialogMailMergeHelper -> 680
       WdDialogMailMergeQueryOptions -> 681
       WdDialogFileMacPageSetup -> 685
       WdDialogListCommands -> 723
       WdDialogEditCreatePublisher -> 732
       WdDialogEditSubscribeTo -> 733
       WdDialogEditPublishOptions -> 735
       WdDialogEditSubscribeOptions -> 736
       WdDialogFileMacCustomPageSetupGX -> 737
       WdDialogToolsOptionsTypography -> 739
       WdDialogToolsAutoCorrectExceptions -> 762
       WdDialogToolsOptionsAutoFormatAsYouType -> 778
       WdDialogMailMergeUseAddressBook -> 779
       WdDialogToolsHangulHanjaConversion -> 784
       WdDialogToolsOptionsFuzzy -> 790
       WdDialogEditGoToOld -> 811
       WdDialogInsertNumber -> 812
       WdDialogLetterWizard -> 821
       WdDialogFormatBulletsAndNumbering -> 824
       WdDialogToolsSpellingAndGrammar -> 828
       WdDialogToolsCreateDirectory -> 833
       WdDialogTableWrapping -> 854
       WdDialogFormatTheme -> 855
       WdDialogTableProperties -> 861
       WdDialogEmailOptions -> 863
       WdDialogCreateAutoText -> 872
       WdDialogToolsAutoSummarize -> 874
       WdDialogToolsGrammarSettings -> 885
       WdDialogEditGoTo -> 896
       WdDialogWebOptions -> 898
       WdDialogToolsAutoManager -> 915
       WdDialogInsertHyperlink -> 925
       WdDialogFileVersions -> 945
       WdDialogToolsOptionsAutoFormat -> 959
       WdDialogFormatDrawingObject -> 960
       WdDialogToolsOptions -> 974
       WdDialogFitText -> 983
       WdDialogEditAutoText -> 985
       WdDialogPhoneticGuide -> 986
       WdDialogToolsDictionary -> 989
       WdDialogFileSaveVersion -> 1007
       WdDialogToolsOptionsBidi -> 1029
       WdDialogFrameSetProperties -> 1074
       WdDialogTableTableOptions -> 1080
       WdDialogTableCellOptions -> 1081
       WdDialogIMESetDefault -> 1094
       WdDialogConsistencyChecker -> 1121
       WdDialogTCSCTranslator -> 1156
       WdDialogHorizontalInVertical -> 1160
       WdDialogTwoLinesInOne -> 1161
       WdDialogFormatEncloseCharacters -> 1162
       WdDialogFormatStylesCustom -> 1248
       WdDialogCSSLinks -> 1261
       WdDialogMailMergeFieldMapping -> 1304
       WdDialogMailMergeInsertAddressBlock -> 1305
       WdDialogMailMergeInsertGreetingLine -> 1306
       WdDialogMailMergeInsertFields -> 1307
       WdDialogMailMergeRecipients -> 1308
       WdDialogInsertWebComponent -> 1324
       WdDialogMailMergeFindRecipient -> 1326
       WdDialogMailMergeSetDocumentType -> 1339
       WdDialogToolsOptionsEditCopyPaste -> 1356
       WdDialogToolsOptionsSecurity -> 1361
       WdDialogSearch -> 1363
       WdDialogLabelOptions -> 1367
       WdDialogShowRepairs -> 1381
       WdDialogToolsOptionsSmartTag -> 1395
       WdDialogSchemaLibrary -> 1417
       WdDialogXMLOptions -> 1425
       WdDialogFormattingRestrictions -> 1427
       WdDialogMyPermission -> 1437
       WdDialogXMLElementAttributes -> 1460
       WdDialogPermission -> 1469
       WdDialogDocumentInspector -> 1482
       WdDialogSourceManager -> 1920
       WdDialogCreateSource -> 1922
       WdDialogStyleManagement -> 1948
       WdDialogBuildingBlockOrganizer -> 2067
       WdDialogInsertSource -> 2120
       WdDialogOMathRecognizedFunctions -> 2165
       WdDialogInsertPlaceholder -> 2348
       WdDialogExportAsFixedFormat -> 2349
       WdDialogContentControlProperties -> 2394
       WdDialogCompatibilityChecker -> 2439
       WdDialogMailMergeInsertAsk -> 4047
       WdDialogMailMergeInsertFillIn -> 4048
       WdDialogMailMergeInsertIf -> 4049
       WdDialogMailMergeInsertNextIf -> 4053
       WdDialogMailMergeInsertSet -> 4054
       WdDialogMailMergeInsertSkipIf -> 4055
  
  toEnum v =
    case v of
       9 -> WdDialogHelpAbout
       10 -> WdDialogHelpWordPerfectHelp
       78 -> WdDialogDocumentStatistics
       79 -> WdDialogFileNew
       80 -> WdDialogFileOpen
       81 -> WdDialogMailMergeOpenDataSource
       82 -> WdDialogMailMergeOpenHeaderSource
       84 -> WdDialogFileSaveAs
       86 -> WdDialogFileSummaryInfo
       87 -> WdDialogToolsTemplates
       88 -> WdDialogFilePrint
       97 -> WdDialogFilePrintSetup
       99 -> WdDialogFileFind
       103 -> WdDialogFormatAddrFonts
       111 -> WdDialogEditPasteSpecial
       112 -> WdDialogEditFind
       117 -> WdDialogEditReplace
       120 -> WdDialogEditStyle
       124 -> WdDialogEditLinks
       125 -> WdDialogEditObject
       127 -> WdDialogTextToTable
       128 -> WdDialogTableToText
       129 -> WdDialogTableInsertTable
       130 -> WdDialogTableInsertCells
       131 -> WdDialogTableInsertRow
       133 -> WdDialogTableDeleteCells
       137 -> WdDialogTableSplitCells
       142 -> WdDialogTableRowHeight
       143 -> WdDialogTableColumnWidth
       152 -> WdDialogToolsCustomize
       159 -> WdDialogInsertBreak
       162 -> WdDialogInsertSymbol
       163 -> WdDialogInsertPicture
       164 -> WdDialogInsertFile
       165 -> WdDialogInsertDateTime
       166 -> WdDialogInsertField
       167 -> WdDialogInsertMergeField
       168 -> WdDialogInsertBookmark
       169 -> WdDialogMarkIndexEntry
       170 -> WdDialogInsertIndex
       171 -> WdDialogInsertTableOfContents
       172 -> WdDialogInsertObject
       173 -> WdDialogToolsCreateEnvelope
       174 -> WdDialogFormatFont
       175 -> WdDialogFormatParagraph
       176 -> WdDialogFormatSectionLayout
       177 -> WdDialogFormatColumns
       178 -> WdDialogFileDocumentLayout
       178 -> WdDialogFilePageSetup
       179 -> WdDialogFormatTabs
       180 -> WdDialogFormatStyle
       181 -> WdDialogFormatDefineStyleFont
       182 -> WdDialogFormatDefineStylePara
       183 -> WdDialogFormatDefineStyleTabs
       184 -> WdDialogFormatDefineStyleFrame
       185 -> WdDialogFormatDefineStyleBorders
       186 -> WdDialogFormatDefineStyleLang
       187 -> WdDialogFormatPicture
       188 -> WdDialogToolsLanguage
       189 -> WdDialogFormatBordersAndShading
       190 -> WdDialogFormatFrame
       194 -> WdDialogToolsThesaurus
       195 -> WdDialogToolsHyphenation
       196 -> WdDialogToolsBulletsNumbers
       197 -> WdDialogToolsHighlightChanges
       197 -> WdDialogToolsRevisions
       198 -> WdDialogToolsCompareDocuments
       199 -> WdDialogTableSort
       203 -> WdDialogToolsOptionsGeneral
       204 -> WdDialogToolsOptionsView
       206 -> WdDialogToolsAdvancedSettings
       208 -> WdDialogToolsOptionsPrint
       209 -> WdDialogToolsOptionsSave
       211 -> WdDialogToolsOptionsSpellingAndGrammar
       213 -> WdDialogToolsOptionsUserInfo
       214 -> WdDialogToolsMacroRecord
       215 -> WdDialogToolsMacro
       220 -> WdDialogWindowActivate
       221 -> WdDialogFormatRetAddrFonts
       222 -> WdDialogOrganizer
       224 -> WdDialogToolsOptionsEdit
       225 -> WdDialogToolsOptionsFileLocations
       228 -> WdDialogToolsWordCount
       235 -> WdDialogControlRun
       294 -> WdDialogInsertPageNumbers
       298 -> WdDialogFormatPageNumber
       300 -> WdDialogCopyFile
       322 -> WdDialogFormatChangeCase
       331 -> WdDialogUpdateTOC
       341 -> WdDialogInsertDatabase
       348 -> WdDialogTableFormula
       353 -> WdDialogFormFieldOptions
       357 -> WdDialogInsertCaption
       358 -> WdDialogInsertCaptionNumbering
       359 -> WdDialogInsertAutoCaption
       361 -> WdDialogFormFieldHelp
       367 -> WdDialogInsertCrossReference
       370 -> WdDialogInsertFootnote
       373 -> WdDialogNoteOptions
       378 -> WdDialogToolsAutoCorrect
       386 -> WdDialogToolsOptionsTrackChanges
       392 -> WdDialogConvertObject
       402 -> WdDialogInsertAddCaption
       420 -> WdDialogConnect
       432 -> WdDialogToolsCustomizeKeyboard
       433 -> WdDialogToolsCustomizeMenus
       435 -> WdDialogToolsMergeDocuments
       442 -> WdDialogMarkTableOfContentsEntry
       444 -> WdDialogFileMacPageSetupGX
       445 -> WdDialogFilePrintOneCopy
       458 -> WdDialogEditFrame
       463 -> WdDialogMarkCitation
       470 -> WdDialogTableOfContentsOptions
       471 -> WdDialogInsertTableOfAuthorities
       472 -> WdDialogInsertTableOfFigures
       473 -> WdDialogInsertIndexAndTables
       483 -> WdDialogInsertFormField
       488 -> WdDialogFormatDropCap
       489 -> WdDialogToolsCreateLabels
       503 -> WdDialogToolsProtectDocument
       505 -> WdDialogFormatStyleGallery
       506 -> WdDialogToolsAcceptRejectChanges
       511 -> WdDialogHelpWordPerfectHelpOptions
       521 -> WdDialogToolsUnprotectDocument
       525 -> WdDialogToolsOptionsCompatibility
       551 -> WdDialogTableOfCaptionsOptions
       563 -> WdDialogTableAutoFormat
       569 -> WdDialogMailMergeFindRecord
       570 -> WdDialogReviewAfmtRevisions
       577 -> WdDialogViewZoom
       578 -> WdDialogToolsProtectSection
       581 -> WdDialogFontSubstitution
       583 -> WdDialogInsertSubdocument
       586 -> WdDialogNewToolbar
       607 -> WdDialogToolsEnvelopesAndLabels
       610 -> WdDialogFormatCallout
       612 -> WdDialogTableFormatCell
       615 -> WdDialogToolsCustomizeMenuBar
       624 -> WdDialogFileRoutingSlip
       625 -> WdDialogEditTOACategory
       631 -> WdDialogToolsManageFields
       633 -> WdDialogDrawSnapToGrid
       634 -> WdDialogDrawAlign
       642 -> WdDialogMailMergeCreateDataSource
       643 -> WdDialogMailMergeCreateHeaderSource
       676 -> WdDialogMailMerge
       677 -> WdDialogMailMergeCheck
       680 -> WdDialogMailMergeHelper
       681 -> WdDialogMailMergeQueryOptions
       685 -> WdDialogFileMacPageSetup
       723 -> WdDialogListCommands
       732 -> WdDialogEditCreatePublisher
       733 -> WdDialogEditSubscribeTo
       735 -> WdDialogEditPublishOptions
       736 -> WdDialogEditSubscribeOptions
       737 -> WdDialogFileMacCustomPageSetupGX
       739 -> WdDialogToolsOptionsTypography
       762 -> WdDialogToolsAutoCorrectExceptions
       778 -> WdDialogToolsOptionsAutoFormatAsYouType
       779 -> WdDialogMailMergeUseAddressBook
       784 -> WdDialogToolsHangulHanjaConversion
       790 -> WdDialogToolsOptionsFuzzy
       811 -> WdDialogEditGoToOld
       812 -> WdDialogInsertNumber
       821 -> WdDialogLetterWizard
       824 -> WdDialogFormatBulletsAndNumbering
       828 -> WdDialogToolsSpellingAndGrammar
       833 -> WdDialogToolsCreateDirectory
       854 -> WdDialogTableWrapping
       855 -> WdDialogFormatTheme
       861 -> WdDialogTableProperties
       863 -> WdDialogEmailOptions
       872 -> WdDialogCreateAutoText
       874 -> WdDialogToolsAutoSummarize
       885 -> WdDialogToolsGrammarSettings
       896 -> WdDialogEditGoTo
       898 -> WdDialogWebOptions
       915 -> WdDialogToolsAutoManager
       925 -> WdDialogInsertHyperlink
       945 -> WdDialogFileVersions
       959 -> WdDialogToolsOptionsAutoFormat
       960 -> WdDialogFormatDrawingObject
       974 -> WdDialogToolsOptions
       983 -> WdDialogFitText
       985 -> WdDialogEditAutoText
       986 -> WdDialogPhoneticGuide
       989 -> WdDialogToolsDictionary
       1007 -> WdDialogFileSaveVersion
       1029 -> WdDialogToolsOptionsBidi
       1074 -> WdDialogFrameSetProperties
       1080 -> WdDialogTableTableOptions
       1081 -> WdDialogTableCellOptions
       1094 -> WdDialogIMESetDefault
       1121 -> WdDialogConsistencyChecker
       1156 -> WdDialogTCSCTranslator
       1160 -> WdDialogHorizontalInVertical
       1161 -> WdDialogTwoLinesInOne
       1162 -> WdDialogFormatEncloseCharacters
       1248 -> WdDialogFormatStylesCustom
       1261 -> WdDialogCSSLinks
       1304 -> WdDialogMailMergeFieldMapping
       1305 -> WdDialogMailMergeInsertAddressBlock
       1306 -> WdDialogMailMergeInsertGreetingLine
       1307 -> WdDialogMailMergeInsertFields
       1308 -> WdDialogMailMergeRecipients
       1324 -> WdDialogInsertWebComponent
       1326 -> WdDialogMailMergeFindRecipient
       1339 -> WdDialogMailMergeSetDocumentType
       1356 -> WdDialogToolsOptionsEditCopyPaste
       1361 -> WdDialogToolsOptionsSecurity
       1363 -> WdDialogSearch
       1367 -> WdDialogLabelOptions
       1381 -> WdDialogShowRepairs
       1395 -> WdDialogToolsOptionsSmartTag
       1417 -> WdDialogSchemaLibrary
       1425 -> WdDialogXMLOptions
       1427 -> WdDialogFormattingRestrictions
       1437 -> WdDialogMyPermission
       1460 -> WdDialogXMLElementAttributes
       1469 -> WdDialogPermission
       1482 -> WdDialogDocumentInspector
       1920 -> WdDialogSourceManager
       1922 -> WdDialogCreateSource
       1948 -> WdDialogStyleManagement
       2067 -> WdDialogBuildingBlockOrganizer
       2120 -> WdDialogInsertSource
       2165 -> WdDialogOMathRecognizedFunctions
       2348 -> WdDialogInsertPlaceholder
       2349 -> WdDialogExportAsFixedFormat
       2394 -> WdDialogContentControlProperties
       2439 -> WdDialogCompatibilityChecker
       4047 -> WdDialogMailMergeInsertAsk
       4048 -> WdDialogMailMergeInsertFillIn
       4049 -> WdDialogMailMergeInsertIf
       4053 -> WdDialogMailMergeInsertNextIf
       4054 -> WdDialogMailMergeInsertSet
       4055 -> WdDialogMailMergeInsertSkipIf
       _ -> error "unmarshallWdWordDialog: illegal enum value "
  
instance Variant (WdWordDialog) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWordDialogHID = Emptyenum10 
instance Enum (WdWordDialogHID) where
  fromEnum v = case v of Emptyenum10 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum10
       _ -> error "unmarshallWdWordDialogHID: illegal enum value "
  
instance Variant (WdWordDialogHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFieldKind
 = WdFieldKindNone
 | WdFieldKindHot
 | WdFieldKindWarm
 | WdFieldKindCold
 deriving (Enum)
instance Variant (WdFieldKind) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTextFormFieldType
 = WdRegularText
 | WdNumberText
 | WdDateText
 | WdCurrentDateText
 | WdCurrentTimeText
 | WdCalculationText
 deriving (Enum)
instance Variant (WdTextFormFieldType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdChevronConvertRule
 = WdNeverConvert
 | WdAlwaysConvert
 | WdAskToNotConvert
 | WdAskToConvert
 deriving (Enum)
instance Variant (WdChevronConvertRule) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeMainDocType
 = WdNotAMergeDocument
 | WdFormLetters
 | WdMailingLabels
 | WdEnvelopes
 | WdCatalog
 | WdDirectory
 | WdEMail
 | WdFax
 
instance Enum (WdMailMergeMainDocType) where
  fromEnum v =
    case v of
       WdNotAMergeDocument -> (-1)
       WdFormLetters -> 0
       WdMailingLabels -> 1
       WdEnvelopes -> 2
       WdCatalog -> 3
       WdDirectory -> 3
       WdEMail -> 4
       WdFax -> 5
  
  toEnum v =
    case v of
       (-1) -> WdNotAMergeDocument
       0 -> WdFormLetters
       1 -> WdMailingLabels
       2 -> WdEnvelopes
       3 -> WdCatalog
       3 -> WdDirectory
       4 -> WdEMail
       5 -> WdFax
       _ -> error "unmarshallWdMailMergeMainDocType: illegal enum value "
  
instance Variant (WdMailMergeMainDocType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeState
 = WdNormalDocument
 | WdMainDocumentOnly
 | WdMainAndDataSource
 | WdMainAndHeader
 | WdMainAndSourceAndHeader
 | WdDataSource
 deriving (Enum)
instance Variant (WdMailMergeState) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeDestination
 = WdSendToNewDocument
 | WdSendToPrinter
 | WdSendToEmail
 | WdSendToFax
 deriving (Enum)
instance Variant (WdMailMergeDestination) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeActiveRecord
 = WdPreviousDataSourceRecord
 | WdNextDataSourceRecord
 | WdLastDataSourceRecord
 | WdFirstDataSourceRecord
 | WdLastRecord
 | WdFirstRecord
 | WdPreviousRecord
 | WdNextRecord
 | WdNoActiveRecord
 
instance Enum (WdMailMergeActiveRecord) where
  fromEnum v =
    case v of
       WdPreviousDataSourceRecord -> (-9)
       WdNextDataSourceRecord -> (-8)
       WdLastDataSourceRecord -> (-7)
       WdFirstDataSourceRecord -> (-6)
       WdLastRecord -> (-5)
       WdFirstRecord -> (-4)
       WdPreviousRecord -> (-3)
       WdNextRecord -> (-2)
       WdNoActiveRecord -> (-1)
  
  toEnum v =
    case v of
       (-9) -> WdPreviousDataSourceRecord
       (-8) -> WdNextDataSourceRecord
       (-7) -> WdLastDataSourceRecord
       (-6) -> WdFirstDataSourceRecord
       (-5) -> WdLastRecord
       (-4) -> WdFirstRecord
       (-3) -> WdPreviousRecord
       (-2) -> WdNextRecord
       (-1) -> WdNoActiveRecord
       _ -> error "unmarshallWdMailMergeActiveRecord: illegal enum value "
  
instance Variant (WdMailMergeActiveRecord) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeDefaultRecord
 = WdDefaultLastRecord
 | WdDefaultFirstRecord
 
instance Enum (WdMailMergeDefaultRecord) where
  fromEnum v =
    case v of
       WdDefaultLastRecord -> (-16)
       WdDefaultFirstRecord -> 1
  
  toEnum v =
    case v of
       (-16) -> WdDefaultLastRecord
       1 -> WdDefaultFirstRecord
       _ -> error "unmarshallWdMailMergeDefaultRecord: illegal enum value "
  
instance Variant (WdMailMergeDefaultRecord) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeDataSource
 = WdNoMergeInfo
 | WdMergeInfoFromWord
 | WdMergeInfoFromAccessDDE
 | WdMergeInfoFromExcelDDE
 | WdMergeInfoFromMSQueryDDE
 | WdMergeInfoFromODBC
 | WdMergeInfoFromODSO
 
instance Enum (WdMailMergeDataSource) where
  fromEnum v =
    case v of
       WdNoMergeInfo -> (-1)
       WdMergeInfoFromWord -> 0
       WdMergeInfoFromAccessDDE -> 1
       WdMergeInfoFromExcelDDE -> 2
       WdMergeInfoFromMSQueryDDE -> 3
       WdMergeInfoFromODBC -> 4
       WdMergeInfoFromODSO -> 5
  
  toEnum v =
    case v of
       (-1) -> WdNoMergeInfo
       0 -> WdMergeInfoFromWord
       1 -> WdMergeInfoFromAccessDDE
       2 -> WdMergeInfoFromExcelDDE
       3 -> WdMergeInfoFromMSQueryDDE
       4 -> WdMergeInfoFromODBC
       5 -> WdMergeInfoFromODSO
       _ -> error "unmarshallWdMailMergeDataSource: illegal enum value "
  
instance Variant (WdMailMergeDataSource) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeComparison
 = WdMergeIfEqual
 | WdMergeIfNotEqual
 | WdMergeIfLessThan
 | WdMergeIfGreaterThan
 | WdMergeIfLessThanOrEqual
 | WdMergeIfGreaterThanOrEqual
 | WdMergeIfIsBlank
 | WdMergeIfIsNotBlank
 deriving (Enum)
instance Variant (WdMailMergeComparison) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBookmarkSortBy
 = WdBookmarkSortByList__ [WdBookmarkSortBy]
 | WdSortByName
 | WdSortByLocation
 
instance Flags (WdBookmarkSortBy) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdBookmarkSortBy) where
  fromEnum v =
    case v of
       (WdBookmarkSortByList__ xs) -> orList (map fromEnum xs)
       WdSortByName -> 0
       WdSortByLocation -> 1
  
  toEnum v =
    case v of
       0 -> WdSortByName
       1 -> WdSortByLocation
       x -> WdBookmarkSortByList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdBookmarkSortBy: illegal enum value "
  
instance Variant (WdBookmarkSortBy) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWindowState
 = WdWindowStateList__ [WdWindowState]
 | WdWindowStateNormal
 | WdWindowStateMaximize
 | WdWindowStateMinimize
 
instance Flags (WdWindowState) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdWindowState) where
  fromEnum v =
    case v of
       (WdWindowStateList__ xs) -> orList (map fromEnum xs)
       WdWindowStateNormal -> 0
       WdWindowStateMaximize -> 1
       WdWindowStateMinimize -> 2
  
  toEnum v =
    case v of
       0 -> WdWindowStateNormal
       1 -> WdWindowStateMaximize
       2 -> WdWindowStateMinimize
       x -> WdWindowStateList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdWindowState: illegal enum value "
  
instance Variant (WdWindowState) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPictureLinkType
 = WdPictureLinkTypeList__ [WdPictureLinkType]
 | WdLinkNone
 | WdLinkDataInDoc
 | WdLinkDataOnDisk
 
instance Flags (WdPictureLinkType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdPictureLinkType) where
  fromEnum v =
    case v of
       (WdPictureLinkTypeList__ xs) -> orList (map fromEnum xs)
       WdLinkNone -> 0
       WdLinkDataInDoc -> 1
       WdLinkDataOnDisk -> 2
  
  toEnum v =
    case v of
       0 -> WdLinkNone
       1 -> WdLinkDataInDoc
       2 -> WdLinkDataOnDisk
       x -> WdPictureLinkTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdPictureLinkType: illegal enum value "
  
instance Variant (WdPictureLinkType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLinkType
 = WdLinkTypeOLE
 | WdLinkTypePicture
 | WdLinkTypeText
 | WdLinkTypeReference
 | WdLinkTypeInclude
 | WdLinkTypeImport
 | WdLinkTypeDDE
 | WdLinkTypeDDEAuto
 | WdLinkTypeChart
 deriving (Enum)
instance Variant (WdLinkType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWindowType
 = WdWindowTypeList__ [WdWindowType]
 | WdWindowDocument
 | WdWindowTemplate
 
instance Flags (WdWindowType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdWindowType) where
  fromEnum v =
    case v of
       (WdWindowTypeList__ xs) -> orList (map fromEnum xs)
       WdWindowDocument -> 0
       WdWindowTemplate -> 1
  
  toEnum v =
    case v of
       0 -> WdWindowDocument
       1 -> WdWindowTemplate
       x -> WdWindowTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdWindowType: illegal enum value "
  
instance Variant (WdWindowType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdViewType
 = WdNormalView
 | WdOutlineView
 | WdPrintView
 | WdPrintPreview
 | WdMasterView
 | WdWebView
 | WdReadingView
 
instance Enum (WdViewType) where
  fromEnum v =
    case v of
       WdNormalView -> 1
       WdOutlineView -> 2
       WdPrintView -> 3
       WdPrintPreview -> 4
       WdMasterView -> 5
       WdWebView -> 6
       WdReadingView -> 7
  
  toEnum v =
    case v of
       1 -> WdNormalView
       2 -> WdOutlineView
       3 -> WdPrintView
       4 -> WdPrintPreview
       5 -> WdMasterView
       6 -> WdWebView
       7 -> WdReadingView
       _ -> error "unmarshallWdViewType: illegal enum value "
  
instance Variant (WdViewType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSeekView
 = WdSeekMainDocument
 | WdSeekPrimaryHeader
 | WdSeekFirstPageHeader
 | WdSeekEvenPagesHeader
 | WdSeekPrimaryFooter
 | WdSeekFirstPageFooter
 | WdSeekEvenPagesFooter
 | WdSeekFootnotes
 | WdSeekEndnotes
 | WdSeekCurrentPageHeader
 | WdSeekCurrentPageFooter
 deriving (Enum)
instance Variant (WdSeekView) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSpecialPane
 = WdPaneNone
 | WdPanePrimaryHeader
 | WdPaneFirstPageHeader
 | WdPaneEvenPagesHeader
 | WdPanePrimaryFooter
 | WdPaneFirstPageFooter
 | WdPaneEvenPagesFooter
 | WdPaneFootnotes
 | WdPaneEndnotes
 | WdPaneFootnoteContinuationNotice
 | WdPaneFootnoteContinuationSeparator
 | WdPaneFootnoteSeparator
 | WdPaneEndnoteContinuationNotice
 | WdPaneEndnoteContinuationSeparator
 | WdPaneEndnoteSeparator
 | WdPaneComments
 | WdPaneCurrentPageHeader
 | WdPaneCurrentPageFooter
 | WdPaneRevisions
 | WdPaneRevisionsHoriz
 | WdPaneRevisionsVert
 deriving (Enum)
instance Variant (WdSpecialPane) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPageFit
 = WdPageFitNone
 | WdPageFitFullPage
 | WdPageFitBestFit
 | WdPageFitTextFit
 deriving (Enum)
instance Variant (WdPageFit) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBrowseTarget
 = WdBrowsePage
 | WdBrowseSection
 | WdBrowseComment
 | WdBrowseFootnote
 | WdBrowseEndnote
 | WdBrowseField
 | WdBrowseTable
 | WdBrowseGraphic
 | WdBrowseHeading
 | WdBrowseEdit
 | WdBrowseFind
 | WdBrowseGoTo
 
instance Enum (WdBrowseTarget) where
  fromEnum v =
    case v of
       WdBrowsePage -> 1
       WdBrowseSection -> 2
       WdBrowseComment -> 3
       WdBrowseFootnote -> 4
       WdBrowseEndnote -> 5
       WdBrowseField -> 6
       WdBrowseTable -> 7
       WdBrowseGraphic -> 8
       WdBrowseHeading -> 9
       WdBrowseEdit -> 10
       WdBrowseFind -> 11
       WdBrowseGoTo -> 12
  
  toEnum v =
    case v of
       1 -> WdBrowsePage
       2 -> WdBrowseSection
       3 -> WdBrowseComment
       4 -> WdBrowseFootnote
       5 -> WdBrowseEndnote
       6 -> WdBrowseField
       7 -> WdBrowseTable
       8 -> WdBrowseGraphic
       9 -> WdBrowseHeading
       10 -> WdBrowseEdit
       11 -> WdBrowseFind
       12 -> WdBrowseGoTo
       _ -> error "unmarshallWdBrowseTarget: illegal enum value "
  
instance Variant (WdBrowseTarget) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPaperTray
 = WdPrinterDefaultBin
 | WdPrinterUpperBin
 | WdPrinterOnlyBin
 | WdPrinterLowerBin
 | WdPrinterMiddleBin
 | WdPrinterManualFeed
 | WdPrinterEnvelopeFeed
 | WdPrinterManualEnvelopeFeed
 | WdPrinterAutomaticSheetFeed
 | WdPrinterTractorFeed
 | WdPrinterSmallFormatBin
 | WdPrinterLargeFormatBin
 | WdPrinterLargeCapacityBin
 | WdPrinterPaperCassette
 | WdPrinterFormSource
 
instance Enum (WdPaperTray) where
  fromEnum v =
    case v of
       WdPrinterDefaultBin -> 0
       WdPrinterUpperBin -> 1
       WdPrinterOnlyBin -> 1
       WdPrinterLowerBin -> 2
       WdPrinterMiddleBin -> 3
       WdPrinterManualFeed -> 4
       WdPrinterEnvelopeFeed -> 5
       WdPrinterManualEnvelopeFeed -> 6
       WdPrinterAutomaticSheetFeed -> 7
       WdPrinterTractorFeed -> 8
       WdPrinterSmallFormatBin -> 9
       WdPrinterLargeFormatBin -> 10
       WdPrinterLargeCapacityBin -> 11
       WdPrinterPaperCassette -> 14
       WdPrinterFormSource -> 15
  
  toEnum v =
    case v of
       0 -> WdPrinterDefaultBin
       1 -> WdPrinterUpperBin
       1 -> WdPrinterOnlyBin
       2 -> WdPrinterLowerBin
       3 -> WdPrinterMiddleBin
       4 -> WdPrinterManualFeed
       5 -> WdPrinterEnvelopeFeed
       6 -> WdPrinterManualEnvelopeFeed
       7 -> WdPrinterAutomaticSheetFeed
       8 -> WdPrinterTractorFeed
       9 -> WdPrinterSmallFormatBin
       10 -> WdPrinterLargeFormatBin
       11 -> WdPrinterLargeCapacityBin
       14 -> WdPrinterPaperCassette
       15 -> WdPrinterFormSource
       _ -> error "unmarshallWdPaperTray: illegal enum value "
  
instance Variant (WdPaperTray) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOrientation
 = WdOrientationList__ [WdOrientation]
 | WdOrientPortrait
 | WdOrientLandscape
 
instance Flags (WdOrientation) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOrientation) where
  fromEnum v =
    case v of
       (WdOrientationList__ xs) -> orList (map fromEnum xs)
       WdOrientPortrait -> 0
       WdOrientLandscape -> 1
  
  toEnum v =
    case v of
       0 -> WdOrientPortrait
       1 -> WdOrientLandscape
       x -> WdOrientationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdOrientation: illegal enum value "
  
instance Variant (WdOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSelectionType
 = WdNoSelection
 | WdSelectionIP
 | WdSelectionNormal
 | WdSelectionFrame
 | WdSelectionColumn
 | WdSelectionRow
 | WdSelectionBlock
 | WdSelectionInlineShape
 | WdSelectionShape
 deriving (Enum)
instance Variant (WdSelectionType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCaptionLabelID
 = WdCaptionEquation
 | WdCaptionTable
 | WdCaptionFigure
 
instance Enum (WdCaptionLabelID) where
  fromEnum v =
    case v of
       WdCaptionEquation -> (-3)
       WdCaptionTable -> (-2)
       WdCaptionFigure -> (-1)
  
  toEnum v =
    case v of
       (-3) -> WdCaptionEquation
       (-2) -> WdCaptionTable
       (-1) -> WdCaptionFigure
       _ -> error "unmarshallWdCaptionLabelID: illegal enum value "
  
instance Variant (WdCaptionLabelID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdReferenceType
 = WdRefTypeNumberedItem
 | WdRefTypeHeading
 | WdRefTypeBookmark
 | WdRefTypeFootnote
 | WdRefTypeEndnote
 deriving (Enum)
instance Variant (WdReferenceType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdReferenceKind
 = WdNumberFullContext
 | WdNumberNoContext
 | WdNumberRelativeContext
 | WdContentText
 | WdEntireCaption
 | WdOnlyLabelAndNumber
 | WdOnlyCaptionText
 | WdFootnoteNumber
 | WdEndnoteNumber
 | WdPageNumber
 | WdPosition
 | WdFootnoteNumberFormatted
 | WdEndnoteNumberFormatted
 
instance Enum (WdReferenceKind) where
  fromEnum v =
    case v of
       WdNumberFullContext -> (-4)
       WdNumberNoContext -> (-3)
       WdNumberRelativeContext -> (-2)
       WdContentText -> (-1)
       WdEntireCaption -> 2
       WdOnlyLabelAndNumber -> 3
       WdOnlyCaptionText -> 4
       WdFootnoteNumber -> 5
       WdEndnoteNumber -> 6
       WdPageNumber -> 7
       WdPosition -> 15
       WdFootnoteNumberFormatted -> 16
       WdEndnoteNumberFormatted -> 17
  
  toEnum v =
    case v of
       (-4) -> WdNumberFullContext
       (-3) -> WdNumberNoContext
       (-2) -> WdNumberRelativeContext
       (-1) -> WdContentText
       2 -> WdEntireCaption
       3 -> WdOnlyLabelAndNumber
       4 -> WdOnlyCaptionText
       5 -> WdFootnoteNumber
       6 -> WdEndnoteNumber
       7 -> WdPageNumber
       15 -> WdPosition
       16 -> WdFootnoteNumberFormatted
       17 -> WdEndnoteNumberFormatted
       _ -> error "unmarshallWdReferenceKind: illegal enum value "
  
instance Variant (WdReferenceKind) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdIndexFormat
 = WdIndexTemplate
 | WdIndexClassic
 | WdIndexFancy
 | WdIndexModern
 | WdIndexBulleted
 | WdIndexFormal
 | WdIndexSimple
 deriving (Enum)
instance Variant (WdIndexFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdIndexType
 = WdIndexTypeList__ [WdIndexType]
 | WdIndexIndent
 | WdIndexRunin
 
instance Flags (WdIndexType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdIndexType) where
  fromEnum v =
    case v of
       (WdIndexTypeList__ xs) -> orList (map fromEnum xs)
       WdIndexIndent -> 0
       WdIndexRunin -> 1
  
  toEnum v =
    case v of
       0 -> WdIndexIndent
       1 -> WdIndexRunin
       x -> WdIndexTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdIndexType: illegal enum value "
  
instance Variant (WdIndexType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionsWrap
 = WdRevisionsWrapList__ [WdRevisionsWrap]
 | WdWrapNever
 | WdWrapAlways
 | WdWrapAsk
 
instance Flags (WdRevisionsWrap) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRevisionsWrap) where
  fromEnum v =
    case v of
       (WdRevisionsWrapList__ xs) -> orList (map fromEnum xs)
       WdWrapNever -> 0
       WdWrapAlways -> 1
       WdWrapAsk -> 2
  
  toEnum v =
    case v of
       0 -> WdWrapNever
       1 -> WdWrapAlways
       2 -> WdWrapAsk
       x -> WdRevisionsWrapList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdRevisionsWrap: illegal enum value "
  
instance Variant (WdRevisionsWrap) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionType
 = WdNoRevision
 | WdRevisionInsert
 | WdRevisionDelete
 | WdRevisionProperty
 | WdRevisionParagraphNumber
 | WdRevisionDisplayField
 | WdRevisionReconcile
 | WdRevisionConflict
 | WdRevisionStyle
 | WdRevisionReplace
 | WdRevisionParagraphProperty
 | WdRevisionTableProperty
 | WdRevisionSectionProperty
 | WdRevisionStyleDefinition
 | WdRevisionMovedFrom
 | WdRevisionMovedTo
 | WdRevisionCellInsertion
 | WdRevisionCellDeletion
 | WdRevisionCellMerge
 deriving (Enum)
instance Variant (WdRevisionType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRoutingSlipDelivery
 = WdRoutingSlipDeliveryList__ [WdRoutingSlipDelivery]
 | WdOneAfterAnother
 | WdAllAtOnce
 
instance Flags (WdRoutingSlipDelivery) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRoutingSlipDelivery) where
  fromEnum v =
    case v of
       (WdRoutingSlipDeliveryList__ xs) -> orList (map fromEnum xs)
       WdOneAfterAnother -> 0
       WdAllAtOnce -> 1
  
  toEnum v =
    case v of
       0 -> WdOneAfterAnother
       1 -> WdAllAtOnce
       x -> WdRoutingSlipDeliveryList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdRoutingSlipDelivery: illegal enum value "
  
instance Variant (WdRoutingSlipDelivery) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRoutingSlipStatus
 = WdRoutingSlipStatusList__ [WdRoutingSlipStatus]
 | WdNotYetRouted
 | WdRouteInProgress
 | WdRouteComplete
 
instance Flags (WdRoutingSlipStatus) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRoutingSlipStatus) where
  fromEnum v =
    case v of
       (WdRoutingSlipStatusList__ xs) -> orList (map fromEnum xs)
       WdNotYetRouted -> 0
       WdRouteInProgress -> 1
       WdRouteComplete -> 2
  
  toEnum v =
    case v of
       0 -> WdNotYetRouted
       1 -> WdRouteInProgress
       2 -> WdRouteComplete
       x -> WdRoutingSlipStatusList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdRoutingSlipStatus: illegal enum value "
  
instance Variant (WdRoutingSlipStatus) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSectionStart
 = WdSectionContinuous
 | WdSectionNewColumn
 | WdSectionNewPage
 | WdSectionEvenPage
 | WdSectionOddPage
 deriving (Enum)
instance Variant (WdSectionStart) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSaveOptions
 = WdPromptToSaveChanges
 | WdSaveChanges
 | WdDoNotSaveChanges
 
instance Enum (WdSaveOptions) where
  fromEnum v =
    case v of
       WdPromptToSaveChanges -> (-2)
       WdSaveChanges -> (-1)
       WdDoNotSaveChanges -> 0
  
  toEnum v =
    case v of
       (-2) -> WdPromptToSaveChanges
       (-1) -> WdSaveChanges
       0 -> WdDoNotSaveChanges
       _ -> error "unmarshallWdSaveOptions: illegal enum value "
  
instance Variant (WdSaveOptions) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDocumentKind
 = WdDocumentKindList__ [WdDocumentKind]
 | WdDocumentNotSpecified
 | WdDocumentLetter
 | WdDocumentEmail
 
instance Flags (WdDocumentKind) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDocumentKind) where
  fromEnum v =
    case v of
       (WdDocumentKindList__ xs) -> orList (map fromEnum xs)
       WdDocumentNotSpecified -> 0
       WdDocumentLetter -> 1
       WdDocumentEmail -> 2
  
  toEnum v =
    case v of
       0 -> WdDocumentNotSpecified
       1 -> WdDocumentLetter
       2 -> WdDocumentEmail
       x -> WdDocumentKindList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDocumentKind: illegal enum value "
  
instance Variant (WdDocumentKind) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDocumentType
 = WdDocumentTypeList__ [WdDocumentType]
 | WdTypeDocument
 | WdTypeTemplate
 | WdTypeFrameset
 
instance Flags (WdDocumentType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDocumentType) where
  fromEnum v =
    case v of
       (WdDocumentTypeList__ xs) -> orList (map fromEnum xs)
       WdTypeDocument -> 0
       WdTypeTemplate -> 1
       WdTypeFrameset -> 2
  
  toEnum v =
    case v of
       0 -> WdTypeDocument
       1 -> WdTypeTemplate
       2 -> WdTypeFrameset
       x -> WdDocumentTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDocumentType: illegal enum value "
  
instance Variant (WdDocumentType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOriginalFormat
 = WdOriginalFormatList__ [WdOriginalFormat]
 | WdWordDocument
 | WdOriginalDocumentFormat
 | WdPromptUser
 
instance Flags (WdOriginalFormat) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOriginalFormat) where
  fromEnum v =
    case v of
       (WdOriginalFormatList__ xs) -> orList (map fromEnum xs)
       WdWordDocument -> 0
       WdOriginalDocumentFormat -> 1
       WdPromptUser -> 2
  
  toEnum v =
    case v of
       0 -> WdWordDocument
       1 -> WdOriginalDocumentFormat
       2 -> WdPromptUser
       x -> WdOriginalFormatList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdOriginalFormat: illegal enum value "
  
instance Variant (WdOriginalFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRelocate
 = WdRelocateList__ [WdRelocate]
 | WdRelocateUp
 | WdRelocateDown
 
instance Flags (WdRelocate) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRelocate) where
  fromEnum v =
    case v of
       (WdRelocateList__ xs) -> orList (map fromEnum xs)
       WdRelocateUp -> 0
       WdRelocateDown -> 1
  
  toEnum v =
    case v of
       0 -> WdRelocateUp
       1 -> WdRelocateDown
       x -> WdRelocateList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdRelocate: illegal enum value "
  
instance Variant (WdRelocate) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdInsertedTextMark
 = WdInsertedTextMarkNone
 | WdInsertedTextMarkBold
 | WdInsertedTextMarkItalic
 | WdInsertedTextMarkUnderline
 | WdInsertedTextMarkDoubleUnderline
 | WdInsertedTextMarkColorOnly
 | WdInsertedTextMarkStrikeThrough
 | WdInsertedTextMarkDoubleStrikeThrough
 deriving (Enum)
instance Variant (WdInsertedTextMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisedLinesMark
 = WdRevisedLinesMarkNone
 | WdRevisedLinesMarkLeftBorder
 | WdRevisedLinesMarkRightBorder
 | WdRevisedLinesMarkOutsideBorder
 deriving (Enum)
instance Variant (WdRevisedLinesMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDeletedTextMark
 = WdDeletedTextMarkHidden
 | WdDeletedTextMarkStrikeThrough
 | WdDeletedTextMarkCaret
 | WdDeletedTextMarkPound
 | WdDeletedTextMarkNone
 | WdDeletedTextMarkBold
 | WdDeletedTextMarkItalic
 | WdDeletedTextMarkUnderline
 | WdDeletedTextMarkDoubleUnderline
 | WdDeletedTextMarkColorOnly
 | WdDeletedTextMarkDoubleStrikeThrough
 deriving (Enum)
instance Variant (WdDeletedTextMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisedPropertiesMark
 = WdRevisedPropertiesMarkNone
 | WdRevisedPropertiesMarkBold
 | WdRevisedPropertiesMarkItalic
 | WdRevisedPropertiesMarkUnderline
 | WdRevisedPropertiesMarkDoubleUnderline
 | WdRevisedPropertiesMarkColorOnly
 | WdRevisedPropertiesMarkStrikeThrough
 | WdRevisedPropertiesMarkDoubleStrikeThrough
 deriving (Enum)
instance Variant (WdRevisedPropertiesMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFieldShading
 = WdFieldShadingList__ [WdFieldShading]
 | WdFieldShadingNever
 | WdFieldShadingAlways
 | WdFieldShadingWhenSelected
 
instance Flags (WdFieldShading) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFieldShading) where
  fromEnum v =
    case v of
       (WdFieldShadingList__ xs) -> orList (map fromEnum xs)
       WdFieldShadingNever -> 0
       WdFieldShadingAlways -> 1
       WdFieldShadingWhenSelected -> 2
  
  toEnum v =
    case v of
       0 -> WdFieldShadingNever
       1 -> WdFieldShadingAlways
       2 -> WdFieldShadingWhenSelected
       x -> WdFieldShadingList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdFieldShading: illegal enum value "
  
instance Variant (WdFieldShading) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDefaultFilePath
 = WdDocumentsPath
 | WdPicturesPath
 | WdUserTemplatesPath
 | WdWorkgroupTemplatesPath
 | WdUserOptionsPath
 | WdAutoRecoverPath
 | WdToolsPath
 | WdTutorialPath
 | WdStartupPath
 | WdProgramPath
 | WdGraphicsFiltersPath
 | WdTextConvertersPath
 | WdProofingToolsPath
 | WdTempFilePath
 | WdCurrentFolderPath
 | WdStyleGalleryPath
 | WdBorderArtPath
 
instance Enum (WdDefaultFilePath) where
  fromEnum v =
    case v of
       WdDocumentsPath -> 0
       WdPicturesPath -> 1
       WdUserTemplatesPath -> 2
       WdWorkgroupTemplatesPath -> 3
       WdUserOptionsPath -> 4
       WdAutoRecoverPath -> 5
       WdToolsPath -> 6
       WdTutorialPath -> 7
       WdStartupPath -> 8
       WdProgramPath -> 9
       WdGraphicsFiltersPath -> 10
       WdTextConvertersPath -> 11
       WdProofingToolsPath -> 12
       WdTempFilePath -> 13
       WdCurrentFolderPath -> 14
       WdStyleGalleryPath -> 15
       WdBorderArtPath -> 19
  
  toEnum v =
    case v of
       0 -> WdDocumentsPath
       1 -> WdPicturesPath
       2 -> WdUserTemplatesPath
       3 -> WdWorkgroupTemplatesPath
       4 -> WdUserOptionsPath
       5 -> WdAutoRecoverPath
       6 -> WdToolsPath
       7 -> WdTutorialPath
       8 -> WdStartupPath
       9 -> WdProgramPath
       10 -> WdGraphicsFiltersPath
       11 -> WdTextConvertersPath
       12 -> WdProofingToolsPath
       13 -> WdTempFilePath
       14 -> WdCurrentFolderPath
       15 -> WdStyleGalleryPath
       19 -> WdBorderArtPath
       _ -> error "unmarshallWdDefaultFilePath: illegal enum value "
  
instance Variant (WdDefaultFilePath) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCompatibility
 = WdNoTabHangIndent
 | WdNoSpaceRaiseLower
 | WdPrintColBlack
 | WdWrapTrailSpaces
 | WdNoColumnBalance
 | WdConvMailMergeEsc
 | WdSuppressSpBfAfterPgBrk
 | WdSuppressTopSpacing
 | WdOrigWordTableRules
 | WdTransparentMetafiles
 | WdShowBreaksInFrames
 | WdSwapBordersFacingPages
 | WdLeaveBackslashAlone
 | WdExpandShiftReturn
 | WdDontULTrailSpace
 | WdDontBalanceSingleByteDoubleByteWidth
 | WdSuppressTopSpacingMac5
 | WdSpacingInWholePoints
 | WdPrintBodyTextBeforeHeader
 | WdNoLeading
 | WdNoSpaceForUL
 | WdMWSmallCaps
 | WdNoExtraLineSpacing
 | WdTruncateFontHeight
 | WdSubFontBySize
 | WdUsePrinterMetrics
 | WdWW6BorderRules
 | WdExactOnTop
 | WdSuppressBottomSpacing
 | WdWPSpaceWidth
 | WdWPJustification
 | WdLineWrapLikeWord6
 | WdShapeLayoutLikeWW8
 | WdFootnoteLayoutLikeWW8
 | WdDontUseHTMLParagraphAutoSpacing
 | WdDontAdjustLineHeightInTable
 | WdForgetLastTabAlignment
 | WdAutospaceLikeWW7
 | WdAlignTablesRowByRow
 | WdLayoutRawTableWidth
 | WdLayoutTableRowsApart
 | WdUseWord97LineBreakingRules
 | WdDontBreakWrappedTables
 | WdDontSnapTextToGridInTableWithObjects
 | WdSelectFieldWithFirstOrLastCharacter
 | WdApplyBreakingRules
 | WdDontWrapTextWithPunctuation
 | WdDontUseAsianBreakRulesInGrid
 | WdUseWord2002TableStyleRules
 | WdGrowAutofit
 | WdUseNormalStyleForList
 | WdDontUseIndentAsNumberingTabStop
 | WdFELineBreak11
 | WdAllowSpaceOfSameStyleInTable
 | WdWW11IndentRules
 | WdDontAutofitConstrainedTables
 | WdAutofitLikeWW11
 | WdUnderlineTabInNumList
 | WdHangulWidthLikeWW11
 | WdSplitPgBreakAndParaMark
 | WdDontVertAlignCellWithShape
 | WdDontBreakConstrainedForcedTables
 | WdDontVertAlignInTextbox
 | WdWord11KerningPairs
 | WdCachedColBalance
 
instance Enum (WdCompatibility) where
  fromEnum v =
    case v of
       WdNoTabHangIndent -> 1
       WdNoSpaceRaiseLower -> 2
       WdPrintColBlack -> 3
       WdWrapTrailSpaces -> 4
       WdNoColumnBalance -> 5
       WdConvMailMergeEsc -> 6
       WdSuppressSpBfAfterPgBrk -> 7
       WdSuppressTopSpacing -> 8
       WdOrigWordTableRules -> 9
       WdTransparentMetafiles -> 10
       WdShowBreaksInFrames -> 11
       WdSwapBordersFacingPages -> 12
       WdLeaveBackslashAlone -> 13
       WdExpandShiftReturn -> 14
       WdDontULTrailSpace -> 15
       WdDontBalanceSingleByteDoubleByteWidth -> 16
       WdSuppressTopSpacingMac5 -> 17
       WdSpacingInWholePoints -> 18
       WdPrintBodyTextBeforeHeader -> 19
       WdNoLeading -> 20
       WdNoSpaceForUL -> 21
       WdMWSmallCaps -> 22
       WdNoExtraLineSpacing -> 23
       WdTruncateFontHeight -> 24
       WdSubFontBySize -> 25
       WdUsePrinterMetrics -> 26
       WdWW6BorderRules -> 27
       WdExactOnTop -> 28
       WdSuppressBottomSpacing -> 29
       WdWPSpaceWidth -> 30
       WdWPJustification -> 31
       WdLineWrapLikeWord6 -> 32
       WdShapeLayoutLikeWW8 -> 33
       WdFootnoteLayoutLikeWW8 -> 34
       WdDontUseHTMLParagraphAutoSpacing -> 35
       WdDontAdjustLineHeightInTable -> 36
       WdForgetLastTabAlignment -> 37
       WdAutospaceLikeWW7 -> 38
       WdAlignTablesRowByRow -> 39
       WdLayoutRawTableWidth -> 40
       WdLayoutTableRowsApart -> 41
       WdUseWord97LineBreakingRules -> 42
       WdDontBreakWrappedTables -> 43
       WdDontSnapTextToGridInTableWithObjects -> 44
       WdSelectFieldWithFirstOrLastCharacter -> 45
       WdApplyBreakingRules -> 46
       WdDontWrapTextWithPunctuation -> 47
       WdDontUseAsianBreakRulesInGrid -> 48
       WdUseWord2002TableStyleRules -> 49
       WdGrowAutofit -> 50
       WdUseNormalStyleForList -> 51
       WdDontUseIndentAsNumberingTabStop -> 52
       WdFELineBreak11 -> 53
       WdAllowSpaceOfSameStyleInTable -> 54
       WdWW11IndentRules -> 55
       WdDontAutofitConstrainedTables -> 56
       WdAutofitLikeWW11 -> 57
       WdUnderlineTabInNumList -> 58
       WdHangulWidthLikeWW11 -> 59
       WdSplitPgBreakAndParaMark -> 60
       WdDontVertAlignCellWithShape -> 61
       WdDontBreakConstrainedForcedTables -> 62
       WdDontVertAlignInTextbox -> 63
       WdWord11KerningPairs -> 64
       WdCachedColBalance -> 65
  
  toEnum v =
    case v of
       1 -> WdNoTabHangIndent
       2 -> WdNoSpaceRaiseLower
       3 -> WdPrintColBlack
       4 -> WdWrapTrailSpaces
       5 -> WdNoColumnBalance
       6 -> WdConvMailMergeEsc
       7 -> WdSuppressSpBfAfterPgBrk
       8 -> WdSuppressTopSpacing
       9 -> WdOrigWordTableRules
       10 -> WdTransparentMetafiles
       11 -> WdShowBreaksInFrames
       12 -> WdSwapBordersFacingPages
       13 -> WdLeaveBackslashAlone
       14 -> WdExpandShiftReturn
       15 -> WdDontULTrailSpace
       16 -> WdDontBalanceSingleByteDoubleByteWidth
       17 -> WdSuppressTopSpacingMac5
       18 -> WdSpacingInWholePoints
       19 -> WdPrintBodyTextBeforeHeader
       20 -> WdNoLeading
       21 -> WdNoSpaceForUL
       22 -> WdMWSmallCaps
       23 -> WdNoExtraLineSpacing
       24 -> WdTruncateFontHeight
       25 -> WdSubFontBySize
       26 -> WdUsePrinterMetrics
       27 -> WdWW6BorderRules
       28 -> WdExactOnTop
       29 -> WdSuppressBottomSpacing
       30 -> WdWPSpaceWidth
       31 -> WdWPJustification
       32 -> WdLineWrapLikeWord6
       33 -> WdShapeLayoutLikeWW8
       34 -> WdFootnoteLayoutLikeWW8
       35 -> WdDontUseHTMLParagraphAutoSpacing
       36 -> WdDontAdjustLineHeightInTable
       37 -> WdForgetLastTabAlignment
       38 -> WdAutospaceLikeWW7
       39 -> WdAlignTablesRowByRow
       40 -> WdLayoutRawTableWidth
       41 -> WdLayoutTableRowsApart
       42 -> WdUseWord97LineBreakingRules
       43 -> WdDontBreakWrappedTables
       44 -> WdDontSnapTextToGridInTableWithObjects
       45 -> WdSelectFieldWithFirstOrLastCharacter
       46 -> WdApplyBreakingRules
       47 -> WdDontWrapTextWithPunctuation
       48 -> WdDontUseAsianBreakRulesInGrid
       49 -> WdUseWord2002TableStyleRules
       50 -> WdGrowAutofit
       51 -> WdUseNormalStyleForList
       52 -> WdDontUseIndentAsNumberingTabStop
       53 -> WdFELineBreak11
       54 -> WdAllowSpaceOfSameStyleInTable
       55 -> WdWW11IndentRules
       56 -> WdDontAutofitConstrainedTables
       57 -> WdAutofitLikeWW11
       58 -> WdUnderlineTabInNumList
       59 -> WdHangulWidthLikeWW11
       60 -> WdSplitPgBreakAndParaMark
       61 -> WdDontVertAlignCellWithShape
       62 -> WdDontBreakConstrainedForcedTables
       63 -> WdDontVertAlignInTextbox
       64 -> WdWord11KerningPairs
       65 -> WdCachedColBalance
       _ -> error "unmarshallWdCompatibility: illegal enum value "
  
instance Variant (WdCompatibility) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPaperSize
 = WdPaper10x14
 | WdPaper11x17
 | WdPaperLetter
 | WdPaperLetterSmall
 | WdPaperLegal
 | WdPaperExecutive
 | WdPaperA3
 | WdPaperA4
 | WdPaperA4Small
 | WdPaperA5
 | WdPaperB4
 | WdPaperB5
 | WdPaperCSheet
 | WdPaperDSheet
 | WdPaperESheet
 | WdPaperFanfoldLegalGerman
 | WdPaperFanfoldStdGerman
 | WdPaperFanfoldUS
 | WdPaperFolio
 | WdPaperLedger
 | WdPaperNote
 | WdPaperQuarto
 | WdPaperStatement
 | WdPaperTabloid
 | WdPaperEnvelope9
 | WdPaperEnvelope10
 | WdPaperEnvelope11
 | WdPaperEnvelope12
 | WdPaperEnvelope14
 | WdPaperEnvelopeB4
 | WdPaperEnvelopeB5
 | WdPaperEnvelopeB6
 | WdPaperEnvelopeC3
 | WdPaperEnvelopeC4
 | WdPaperEnvelopeC5
 | WdPaperEnvelopeC6
 | WdPaperEnvelopeC65
 | WdPaperEnvelopeDL
 | WdPaperEnvelopeItaly
 | WdPaperEnvelopeMonarch
 | WdPaperEnvelopePersonal
 | WdPaperCustom
 deriving (Enum)
instance Variant (WdPaperSize) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCustomLabelPageSize
 = WdCustomLabelLetter
 | WdCustomLabelLetterLS
 | WdCustomLabelA4
 | WdCustomLabelA4LS
 | WdCustomLabelA5
 | WdCustomLabelA5LS
 | WdCustomLabelB5
 | WdCustomLabelMini
 | WdCustomLabelFanfold
 | WdCustomLabelVertHalfSheet
 | WdCustomLabelVertHalfSheetLS
 | WdCustomLabelHigaki
 | WdCustomLabelHigakiLS
 | WdCustomLabelB4JIS
 deriving (Enum)
instance Variant (WdCustomLabelPageSize) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdProtectionType
 = WdNoProtection
 | WdAllowOnlyRevisions
 | WdAllowOnlyComments
 | WdAllowOnlyFormFields
 | WdAllowOnlyReading
 
instance Enum (WdProtectionType) where
  fromEnum v =
    case v of
       WdNoProtection -> (-1)
       WdAllowOnlyRevisions -> 0
       WdAllowOnlyComments -> 1
       WdAllowOnlyFormFields -> 2
       WdAllowOnlyReading -> 3
  
  toEnum v =
    case v of
       (-1) -> WdNoProtection
       0 -> WdAllowOnlyRevisions
       1 -> WdAllowOnlyComments
       2 -> WdAllowOnlyFormFields
       3 -> WdAllowOnlyReading
       _ -> error "unmarshallWdProtectionType: illegal enum value "
  
instance Variant (WdProtectionType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPartOfSpeech
 = WdAdjective
 | WdNoun
 | WdAdverb
 | WdVerb
 | WdPronoun
 | WdConjunction
 | WdPreposition
 | WdInterjection
 | WdIdiom
 | WdOther
 deriving (Enum)
instance Variant (WdPartOfSpeech) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSubscriberFormats
 = WdSubscriberFormatsList__ [WdSubscriberFormats]
 | WdSubscriberBestFormat
 | WdSubscriberRTF
 | WdSubscriberText
 | WdSubscriberPict
 
instance Flags (WdSubscriberFormats) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSubscriberFormats) where
  fromEnum v =
    case v of
       (WdSubscriberFormatsList__ xs) -> orList (map fromEnum xs)
       WdSubscriberBestFormat -> 0
       WdSubscriberRTF -> 1
       WdSubscriberText -> 2
       WdSubscriberPict -> 4
  
  toEnum v =
    case v of
       0 -> WdSubscriberBestFormat
       1 -> WdSubscriberRTF
       2 -> WdSubscriberText
       4 -> WdSubscriberPict
       x -> WdSubscriberFormatsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 4 0))
       _ -> error "unmarshallWdSubscriberFormats: illegal enum value "
  
instance Variant (WdSubscriberFormats) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEditionType
 = WdEditionTypeList__ [WdEditionType]
 | WdPublisher
 | WdSubscriber
 
instance Flags (WdEditionType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdEditionType) where
  fromEnum v =
    case v of
       (WdEditionTypeList__ xs) -> orList (map fromEnum xs)
       WdPublisher -> 0
       WdSubscriber -> 1
  
  toEnum v =
    case v of
       0 -> WdPublisher
       1 -> WdSubscriber
       x -> WdEditionTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdEditionType: illegal enum value "
  
instance Variant (WdEditionType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEditionOption
 = WdCancelPublisher
 | WdSendPublisher
 | WdSelectPublisher
 | WdAutomaticUpdate
 | WdManualUpdate
 | WdChangeAttributes
 | WdUpdateSubscriber
 | WdOpenSource
 deriving (Enum)
instance Variant (WdEditionOption) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRelativeHorizontalPosition
 = WdRelativeHorizontalPositionMargin
 | WdRelativeHorizontalPositionPage
 | WdRelativeHorizontalPositionColumn
 | WdRelativeHorizontalPositionCharacter
 | WdRelativeHorizontalPositionLeftMarginArea
 | WdRelativeHorizontalPositionRightMarginArea
 | WdRelativeHorizontalPositionInnerMarginArea
 | WdRelativeHorizontalPositionOuterMarginArea
 deriving (Enum)
instance Variant (WdRelativeHorizontalPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRelativeVerticalPosition
 = WdRelativeVerticalPositionMargin
 | WdRelativeVerticalPositionPage
 | WdRelativeVerticalPositionParagraph
 | WdRelativeVerticalPositionLine
 | WdRelativeVerticalPositionTopMarginArea
 | WdRelativeVerticalPositionBottomMarginArea
 | WdRelativeVerticalPositionInnerMarginArea
 | WdRelativeVerticalPositionOuterMarginArea
 deriving (Enum)
instance Variant (WdRelativeVerticalPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHelpType
 = WdHelp
 | WdHelpAbout
 | WdHelpActiveWindow
 | WdHelpContents
 | WdHelpExamplesAndDemos
 | WdHelpIndex
 | WdHelpKeyboard
 | WdHelpPSSHelp
 | WdHelpQuickPreview
 | WdHelpSearch
 | WdHelpUsingHelp
 | WdHelpIchitaro
 | WdHelpPE2
 | WdHelpHWP
 deriving (Enum)
instance Variant (WdHelpType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHelpTypeHID = Emptyenum11 
instance Enum (WdHelpTypeHID) where
  fromEnum v = case v of Emptyenum11 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum11
       _ -> error "unmarshallWdHelpTypeHID: illegal enum value "
  
instance Variant (WdHelpTypeHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdKeyCategory
 = WdKeyCategoryNil
 | WdKeyCategoryDisable
 | WdKeyCategoryCommand
 | WdKeyCategoryMacro
 | WdKeyCategoryFont
 | WdKeyCategoryAutoText
 | WdKeyCategoryStyle
 | WdKeyCategorySymbol
 | WdKeyCategoryPrefix
 
instance Enum (WdKeyCategory) where
  fromEnum v =
    case v of
       WdKeyCategoryNil -> (-1)
       WdKeyCategoryDisable -> 0
       WdKeyCategoryCommand -> 1
       WdKeyCategoryMacro -> 2
       WdKeyCategoryFont -> 3
       WdKeyCategoryAutoText -> 4
       WdKeyCategoryStyle -> 5
       WdKeyCategorySymbol -> 6
       WdKeyCategoryPrefix -> 7
  
  toEnum v =
    case v of
       (-1) -> WdKeyCategoryNil
       0 -> WdKeyCategoryDisable
       1 -> WdKeyCategoryCommand
       2 -> WdKeyCategoryMacro
       3 -> WdKeyCategoryFont
       4 -> WdKeyCategoryAutoText
       5 -> WdKeyCategoryStyle
       6 -> WdKeyCategorySymbol
       7 -> WdKeyCategoryPrefix
       _ -> error "unmarshallWdKeyCategory: illegal enum value "
  
instance Variant (WdKeyCategory) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdKey
 = WdKeyBackspace
 | WdKeyTab
 | WdKeyNumeric5Special
 | WdKeyReturn
 | WdKeyPause
 | WdKeyEsc
 | WdKeySpacebar
 | WdKeyPageUp
 | WdKeyPageDown
 | WdKeyEnd
 | WdKeyHome
 | WdKeyInsert
 | WdKeyDelete
 | WdKey0
 | WdKey1
 | WdKey2
 | WdKey3
 | WdKey4
 | WdKey5
 | WdKey6
 | WdKey7
 | WdKey8
 | WdKey9
 | WdKeyA
 | WdKeyB
 | WdKeyC
 | WdKeyD
 | WdKeyE
 | WdKeyF
 | WdKeyG
 | WdKeyH
 | WdKeyI
 | WdKeyJ
 | WdKeyK
 | WdKeyL
 | WdKeyM
 | WdKeyN
 | WdKeyO
 | WdKeyP
 | WdKeyQ
 | WdKeyR
 | WdKeyS
 | WdKeyT
 | WdKeyU
 | WdKeyV
 | WdKeyW
 | WdKeyX
 | WdKeyY
 | WdKeyZ
 | WdKeyNumeric0
 | WdKeyNumeric1
 | WdKeyNumeric2
 | WdKeyNumeric3
 | WdKeyNumeric4
 | WdKeyNumeric5
 | WdKeyNumeric6
 | WdKeyNumeric7
 | WdKeyNumeric8
 | WdKeyNumeric9
 | WdKeyNumericMultiply
 | WdKeyNumericAdd
 | WdKeyNumericSubtract
 | WdKeyNumericDecimal
 | WdKeyNumericDivide
 | WdKeyF1
 | WdKeyF2
 | WdKeyF3
 | WdKeyF4
 | WdKeyF5
 | WdKeyF6
 | WdKeyF7
 | WdKeyF8
 | WdKeyF9
 | WdKeyF10
 | WdKeyF11
 | WdKeyF12
 | WdKeyF13
 | WdKeyF14
 | WdKeyF15
 | WdKeyF16
 | WdKeyScrollLock
 | WdKeySemiColon
 | WdKeyEquals
 | WdKeyComma
 | WdKeyHyphen
 | WdKeyPeriod
 | WdKeySlash
 | WdKeyBackSingleQuote
 | WdKeyOpenSquareBrace
 | WdKeyBackSlash
 | WdKeyCloseSquareBrace
 | WdKeySingleQuote
 | WdNoKey
 | WdKeyShift
 | WdKeyControl
 | WdKeyCommand
 | WdKeyAlt
 | WdKeyOption
 
instance Enum (WdKey) where
  fromEnum v =
    case v of
       WdKeyBackspace -> 8
       WdKeyTab -> 9
       WdKeyNumeric5Special -> 12
       WdKeyReturn -> 13
       WdKeyPause -> 19
       WdKeyEsc -> 27
       WdKeySpacebar -> 32
       WdKeyPageUp -> 33
       WdKeyPageDown -> 34
       WdKeyEnd -> 35
       WdKeyHome -> 36
       WdKeyInsert -> 45
       WdKeyDelete -> 46
       WdKey0 -> 48
       WdKey1 -> 49
       WdKey2 -> 50
       WdKey3 -> 51
       WdKey4 -> 52
       WdKey5 -> 53
       WdKey6 -> 54
       WdKey7 -> 55
       WdKey8 -> 56
       WdKey9 -> 57
       WdKeyA -> 65
       WdKeyB -> 66
       WdKeyC -> 67
       WdKeyD -> 68
       WdKeyE -> 69
       WdKeyF -> 70
       WdKeyG -> 71
       WdKeyH -> 72
       WdKeyI -> 73
       WdKeyJ -> 74
       WdKeyK -> 75
       WdKeyL -> 76
       WdKeyM -> 77
       WdKeyN -> 78
       WdKeyO -> 79
       WdKeyP -> 80
       WdKeyQ -> 81
       WdKeyR -> 82
       WdKeyS -> 83
       WdKeyT -> 84
       WdKeyU -> 85
       WdKeyV -> 86
       WdKeyW -> 87
       WdKeyX -> 88
       WdKeyY -> 89
       WdKeyZ -> 90
       WdKeyNumeric0 -> 96
       WdKeyNumeric1 -> 97
       WdKeyNumeric2 -> 98
       WdKeyNumeric3 -> 99
       WdKeyNumeric4 -> 100
       WdKeyNumeric5 -> 101
       WdKeyNumeric6 -> 102
       WdKeyNumeric7 -> 103
       WdKeyNumeric8 -> 104
       WdKeyNumeric9 -> 105
       WdKeyNumericMultiply -> 106
       WdKeyNumericAdd -> 107
       WdKeyNumericSubtract -> 109
       WdKeyNumericDecimal -> 110
       WdKeyNumericDivide -> 111
       WdKeyF1 -> 112
       WdKeyF2 -> 113
       WdKeyF3 -> 114
       WdKeyF4 -> 115
       WdKeyF5 -> 116
       WdKeyF6 -> 117
       WdKeyF7 -> 118
       WdKeyF8 -> 119
       WdKeyF9 -> 120
       WdKeyF10 -> 121
       WdKeyF11 -> 122
       WdKeyF12 -> 123
       WdKeyF13 -> 124
       WdKeyF14 -> 125
       WdKeyF15 -> 126
       WdKeyF16 -> 127
       WdKeyScrollLock -> 145
       WdKeySemiColon -> 186
       WdKeyEquals -> 187
       WdKeyComma -> 188
       WdKeyHyphen -> 189
       WdKeyPeriod -> 190
       WdKeySlash -> 191
       WdKeyBackSingleQuote -> 192
       WdKeyOpenSquareBrace -> 219
       WdKeyBackSlash -> 220
       WdKeyCloseSquareBrace -> 221
       WdKeySingleQuote -> 222
       WdNoKey -> 255
       WdKeyShift -> 256
       WdKeyControl -> 512
       WdKeyCommand -> 512
       WdKeyAlt -> 1024
       WdKeyOption -> 1024
  
  toEnum v =
    case v of
       8 -> WdKeyBackspace
       9 -> WdKeyTab
       12 -> WdKeyNumeric5Special
       13 -> WdKeyReturn
       19 -> WdKeyPause
       27 -> WdKeyEsc
       32 -> WdKeySpacebar
       33 -> WdKeyPageUp
       34 -> WdKeyPageDown
       35 -> WdKeyEnd
       36 -> WdKeyHome
       45 -> WdKeyInsert
       46 -> WdKeyDelete
       48 -> WdKey0
       49 -> WdKey1
       50 -> WdKey2
       51 -> WdKey3
       52 -> WdKey4
       53 -> WdKey5
       54 -> WdKey6
       55 -> WdKey7
       56 -> WdKey8
       57 -> WdKey9
       65 -> WdKeyA
       66 -> WdKeyB
       67 -> WdKeyC
       68 -> WdKeyD
       69 -> WdKeyE
       70 -> WdKeyF
       71 -> WdKeyG
       72 -> WdKeyH
       73 -> WdKeyI
       74 -> WdKeyJ
       75 -> WdKeyK
       76 -> WdKeyL
       77 -> WdKeyM
       78 -> WdKeyN
       79 -> WdKeyO
       80 -> WdKeyP
       81 -> WdKeyQ
       82 -> WdKeyR
       83 -> WdKeyS
       84 -> WdKeyT
       85 -> WdKeyU
       86 -> WdKeyV
       87 -> WdKeyW
       88 -> WdKeyX
       89 -> WdKeyY
       90 -> WdKeyZ
       96 -> WdKeyNumeric0
       97 -> WdKeyNumeric1
       98 -> WdKeyNumeric2
       99 -> WdKeyNumeric3
       100 -> WdKeyNumeric4
       101 -> WdKeyNumeric5
       102 -> WdKeyNumeric6
       103 -> WdKeyNumeric7
       104 -> WdKeyNumeric8
       105 -> WdKeyNumeric9
       106 -> WdKeyNumericMultiply
       107 -> WdKeyNumericAdd
       109 -> WdKeyNumericSubtract
       110 -> WdKeyNumericDecimal
       111 -> WdKeyNumericDivide
       112 -> WdKeyF1
       113 -> WdKeyF2
       114 -> WdKeyF3
       115 -> WdKeyF4
       116 -> WdKeyF5
       117 -> WdKeyF6
       118 -> WdKeyF7
       119 -> WdKeyF8
       120 -> WdKeyF9
       121 -> WdKeyF10
       122 -> WdKeyF11
       123 -> WdKeyF12
       124 -> WdKeyF13
       125 -> WdKeyF14
       126 -> WdKeyF15
       127 -> WdKeyF16
       145 -> WdKeyScrollLock
       186 -> WdKeySemiColon
       187 -> WdKeyEquals
       188 -> WdKeyComma
       189 -> WdKeyHyphen
       190 -> WdKeyPeriod
       191 -> WdKeySlash
       192 -> WdKeyBackSingleQuote
       219 -> WdKeyOpenSquareBrace
       220 -> WdKeyBackSlash
       221 -> WdKeyCloseSquareBrace
       222 -> WdKeySingleQuote
       255 -> WdNoKey
       256 -> WdKeyShift
       512 -> WdKeyControl
       512 -> WdKeyCommand
       1024 -> WdKeyAlt
       1024 -> WdKeyOption
       _ -> error "unmarshallWdKey: illegal enum value "
  
instance Variant (WdKey) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOLEType
 = WdOLETypeList__ [WdOLEType]
 | WdOLELink
 | WdOLEEmbed
 | WdOLEControl
 
instance Flags (WdOLEType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOLEType) where
  fromEnum v =
    case v of
       (WdOLETypeList__ xs) -> orList (map fromEnum xs)
       WdOLELink -> 0
       WdOLEEmbed -> 1
       WdOLEControl -> 2
  
  toEnum v =
    case v of
       0 -> WdOLELink
       1 -> WdOLEEmbed
       2 -> WdOLEControl
       x -> WdOLETypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                  then Just (toEnum (fromIntegral val))
                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdOLEType: illegal enum value "
  
instance Variant (WdOLEType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOLEVerb
 = WdOLEVerbDiscardUndoState
 | WdOLEVerbInPlaceActivate
 | WdOLEVerbUIActivate
 | WdOLEVerbHide
 | WdOLEVerbOpen
 | WdOLEVerbShow
 | WdOLEVerbPrimary
 
instance Enum (WdOLEVerb) where
  fromEnum v =
    case v of
       WdOLEVerbDiscardUndoState -> (-6)
       WdOLEVerbInPlaceActivate -> (-5)
       WdOLEVerbUIActivate -> (-4)
       WdOLEVerbHide -> (-3)
       WdOLEVerbOpen -> (-2)
       WdOLEVerbShow -> (-1)
       WdOLEVerbPrimary -> 0
  
  toEnum v =
    case v of
       (-6) -> WdOLEVerbDiscardUndoState
       (-5) -> WdOLEVerbInPlaceActivate
       (-4) -> WdOLEVerbUIActivate
       (-3) -> WdOLEVerbHide
       (-2) -> WdOLEVerbOpen
       (-1) -> WdOLEVerbShow
       0 -> WdOLEVerbPrimary
       _ -> error "unmarshallWdOLEVerb: illegal enum value "
  
instance Variant (WdOLEVerb) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOLEPlacement
 = WdOLEPlacementList__ [WdOLEPlacement]
 | WdInLine
 | WdFloatOverText
 
instance Flags (WdOLEPlacement) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOLEPlacement) where
  fromEnum v =
    case v of
       (WdOLEPlacementList__ xs) -> orList (map fromEnum xs)
       WdInLine -> 0
       WdFloatOverText -> 1
  
  toEnum v =
    case v of
       0 -> WdInLine
       1 -> WdFloatOverText
       x -> WdOLEPlacementList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdOLEPlacement: illegal enum value "
  
instance Variant (WdOLEPlacement) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEnvelopeOrientation
 = WdLeftPortrait
 | WdCenterPortrait
 | WdRightPortrait
 | WdLeftLandscape
 | WdCenterLandscape
 | WdRightLandscape
 | WdLeftClockwise
 | WdCenterClockwise
 | WdRightClockwise
 deriving (Enum)
instance Variant (WdEnvelopeOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLetterStyle
 = WdLetterStyleList__ [WdLetterStyle]
 | WdFullBlock
 | WdModifiedBlock
 | WdSemiBlock
 
instance Flags (WdLetterStyle) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdLetterStyle) where
  fromEnum v =
    case v of
       (WdLetterStyleList__ xs) -> orList (map fromEnum xs)
       WdFullBlock -> 0
       WdModifiedBlock -> 1
       WdSemiBlock -> 2
  
  toEnum v =
    case v of
       0 -> WdFullBlock
       1 -> WdModifiedBlock
       2 -> WdSemiBlock
       x -> WdLetterStyleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdLetterStyle: illegal enum value "
  
instance Variant (WdLetterStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLetterheadLocation
 = WdLetterTop
 | WdLetterBottom
 | WdLetterLeft
 | WdLetterRight
 deriving (Enum)
instance Variant (WdLetterheadLocation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSalutationType
 = WdSalutationInformal
 | WdSalutationFormal
 | WdSalutationBusiness
 | WdSalutationOther
 deriving (Enum)
instance Variant (WdSalutationType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSalutationGender
 = WdGenderFemale
 | WdGenderMale
 | WdGenderNeutral
 | WdGenderUnknown
 deriving (Enum)
instance Variant (WdSalutationGender) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMovementType
 = WdMovementTypeList__ [WdMovementType]
 | WdMove
 | WdExtend
 
instance Flags (WdMovementType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdMovementType) where
  fromEnum v =
    case v of
       (WdMovementTypeList__ xs) -> orList (map fromEnum xs)
       WdMove -> 0
       WdExtend -> 1
  
  toEnum v =
    case v of
       0 -> WdMove
       1 -> WdExtend
       x -> WdMovementTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdMovementType: illegal enum value "
  
instance Variant (WdMovementType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdConstants
 = WdBackward
 | WdAutoPosition
 | WdFirst
 | WdToggle
 | WdUndefined
 | WdForward
 | WdCreatorCode
 
instance Enum (WdConstants) where
  fromEnum v =
    case v of
       WdBackward -> (-1073741823)
       WdAutoPosition -> 0
       WdFirst -> 1
       WdToggle -> 9999998
       WdUndefined -> 9999999
       WdForward -> 1073741823
       WdCreatorCode -> 1297307460
  
  toEnum v =
    case v of
       (-1073741823) -> WdBackward
       0 -> WdAutoPosition
       1 -> WdFirst
       9999998 -> WdToggle
       9999999 -> WdUndefined
       1073741823 -> WdForward
       1297307460 -> WdCreatorCode
       _ -> error "unmarshallWdConstants: illegal enum value "
  
instance Variant (WdConstants) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPasteDataType
 = WdPasteOLEObject
 | WdPasteRTF
 | WdPasteText
 | WdPasteMetafilePicture
 | WdPasteBitmap
 | WdPasteDeviceIndependentBitmap
 | WdPasteHyperlink
 | WdPasteShape
 | WdPasteEnhancedMetafile
 | WdPasteHTML
 
instance Enum (WdPasteDataType) where
  fromEnum v =
    case v of
       WdPasteOLEObject -> 0
       WdPasteRTF -> 1
       WdPasteText -> 2
       WdPasteMetafilePicture -> 3
       WdPasteBitmap -> 4
       WdPasteDeviceIndependentBitmap -> 5
       WdPasteHyperlink -> 7
       WdPasteShape -> 8
       WdPasteEnhancedMetafile -> 9
       WdPasteHTML -> 10
  
  toEnum v =
    case v of
       0 -> WdPasteOLEObject
       1 -> WdPasteRTF
       2 -> WdPasteText
       3 -> WdPasteMetafilePicture
       4 -> WdPasteBitmap
       5 -> WdPasteDeviceIndependentBitmap
       7 -> WdPasteHyperlink
       8 -> WdPasteShape
       9 -> WdPasteEnhancedMetafile
       10 -> WdPasteHTML
       _ -> error "unmarshallWdPasteDataType: illegal enum value "
  
instance Variant (WdPasteDataType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPrintOutItem
 = WdPrintDocumentContent
 | WdPrintProperties
 | WdPrintComments
 | WdPrintMarkup
 | WdPrintStyles
 | WdPrintAutoTextEntries
 | WdPrintKeyAssignments
 | WdPrintEnvelope
 | WdPrintDocumentWithMarkup
 
instance Enum (WdPrintOutItem) where
  fromEnum v =
    case v of
       WdPrintDocumentContent -> 0
       WdPrintProperties -> 1
       WdPrintComments -> 2
       WdPrintMarkup -> 2
       WdPrintStyles -> 3
       WdPrintAutoTextEntries -> 4
       WdPrintKeyAssignments -> 5
       WdPrintEnvelope -> 6
       WdPrintDocumentWithMarkup -> 7
  
  toEnum v =
    case v of
       0 -> WdPrintDocumentContent
       1 -> WdPrintProperties
       2 -> WdPrintComments
       2 -> WdPrintMarkup
       3 -> WdPrintStyles
       4 -> WdPrintAutoTextEntries
       5 -> WdPrintKeyAssignments
       6 -> WdPrintEnvelope
       7 -> WdPrintDocumentWithMarkup
       _ -> error "unmarshallWdPrintOutItem: illegal enum value "
  
instance Variant (WdPrintOutItem) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPrintOutPages
 = WdPrintOutPagesList__ [WdPrintOutPages]
 | WdPrintAllPages
 | WdPrintOddPagesOnly
 | WdPrintEvenPagesOnly
 
instance Flags (WdPrintOutPages) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdPrintOutPages) where
  fromEnum v =
    case v of
       (WdPrintOutPagesList__ xs) -> orList (map fromEnum xs)
       WdPrintAllPages -> 0
       WdPrintOddPagesOnly -> 1
       WdPrintEvenPagesOnly -> 2
  
  toEnum v =
    case v of
       0 -> WdPrintAllPages
       1 -> WdPrintOddPagesOnly
       2 -> WdPrintEvenPagesOnly
       x -> WdPrintOutPagesList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdPrintOutPages: illegal enum value "
  
instance Variant (WdPrintOutPages) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPrintOutRange
 = WdPrintAllDocument
 | WdPrintSelection
 | WdPrintCurrentPage
 | WdPrintFromTo
 | WdPrintRangeOfPages
 deriving (Enum)
instance Variant (WdPrintOutRange) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDictionaryType
 = WdSpelling
 | WdGrammar
 | WdThesaurus
 | WdHyphenation
 | WdSpellingComplete
 | WdSpellingCustom
 | WdSpellingLegal
 | WdSpellingMedical
 | WdHangulHanjaConversion
 | WdHangulHanjaConversionCustom
 deriving (Enum)
instance Variant (WdDictionaryType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDictionaryTypeHID = Emptyenum12 
instance Enum (WdDictionaryTypeHID) where
  fromEnum v = case v of Emptyenum12 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum12
       _ -> error "unmarshallWdDictionaryTypeHID: illegal enum value "
  
instance Variant (WdDictionaryTypeHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSpellingWordType
 = WdSpellingWordTypeList__ [WdSpellingWordType]
 | WdSpellword
 | WdWildcard
 | WdAnagram
 
instance Flags (WdSpellingWordType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSpellingWordType) where
  fromEnum v =
    case v of
       (WdSpellingWordTypeList__ xs) -> orList (map fromEnum xs)
       WdSpellword -> 0
       WdWildcard -> 1
       WdAnagram -> 2
  
  toEnum v =
    case v of
       0 -> WdSpellword
       1 -> WdWildcard
       2 -> WdAnagram
       x -> WdSpellingWordTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdSpellingWordType: illegal enum value "
  
instance Variant (WdSpellingWordType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSpellingErrorType
 = WdSpellingErrorTypeList__ [WdSpellingErrorType]
 | WdSpellingCorrect
 | WdSpellingNotInDictionary
 | WdSpellingCapitalization
 
instance Flags (WdSpellingErrorType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSpellingErrorType) where
  fromEnum v =
    case v of
       (WdSpellingErrorTypeList__ xs) -> orList (map fromEnum xs)
       WdSpellingCorrect -> 0
       WdSpellingNotInDictionary -> 1
       WdSpellingCapitalization -> 2
  
  toEnum v =
    case v of
       0 -> WdSpellingCorrect
       1 -> WdSpellingNotInDictionary
       2 -> WdSpellingCapitalization
       x -> WdSpellingErrorTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdSpellingErrorType: illegal enum value "
  
instance Variant (WdSpellingErrorType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdProofreadingErrorType
 = WdProofreadingErrorTypeList__ [WdProofreadingErrorType]
 | WdSpellingError
 | WdGrammaticalError
 
instance Flags (WdProofreadingErrorType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdProofreadingErrorType) where
  fromEnum v =
    case v of
       (WdProofreadingErrorTypeList__ xs) -> orList (map fromEnum xs)
       WdSpellingError -> 0
       WdGrammaticalError -> 1
  
  toEnum v =
    case v of
       0 -> WdSpellingError
       1 -> WdGrammaticalError
       x -> WdProofreadingErrorTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                then Just (toEnum (fromIntegral val))
                                                                else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdProofreadingErrorType: illegal enum value "
  
instance Variant (WdProofreadingErrorType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdInlineShapeType
 = WdInlineShapeEmbeddedOLEObject
 | WdInlineShapeLinkedOLEObject
 | WdInlineShapePicture
 | WdInlineShapeLinkedPicture
 | WdInlineShapeOLEControlObject
 | WdInlineShapeHorizontalLine
 | WdInlineShapePictureHorizontalLine
 | WdInlineShapeLinkedPictureHorizontalLine
 | WdInlineShapePictureBullet
 | WdInlineShapeScriptAnchor
 | WdInlineShapeOWSAnchor
 | WdInlineShapeChart
 | WdInlineShapeDiagram
 | WdInlineShapeLockedCanvas
 | WdInlineShapeSmartArt
 
instance Enum (WdInlineShapeType) where
  fromEnum v =
    case v of
       WdInlineShapeEmbeddedOLEObject -> 1
       WdInlineShapeLinkedOLEObject -> 2
       WdInlineShapePicture -> 3
       WdInlineShapeLinkedPicture -> 4
       WdInlineShapeOLEControlObject -> 5
       WdInlineShapeHorizontalLine -> 6
       WdInlineShapePictureHorizontalLine -> 7
       WdInlineShapeLinkedPictureHorizontalLine -> 8
       WdInlineShapePictureBullet -> 9
       WdInlineShapeScriptAnchor -> 10
       WdInlineShapeOWSAnchor -> 11
       WdInlineShapeChart -> 12
       WdInlineShapeDiagram -> 13
       WdInlineShapeLockedCanvas -> 14
       WdInlineShapeSmartArt -> 15
  
  toEnum v =
    case v of
       1 -> WdInlineShapeEmbeddedOLEObject
       2 -> WdInlineShapeLinkedOLEObject
       3 -> WdInlineShapePicture
       4 -> WdInlineShapeLinkedPicture
       5 -> WdInlineShapeOLEControlObject
       6 -> WdInlineShapeHorizontalLine
       7 -> WdInlineShapePictureHorizontalLine
       8 -> WdInlineShapeLinkedPictureHorizontalLine
       9 -> WdInlineShapePictureBullet
       10 -> WdInlineShapeScriptAnchor
       11 -> WdInlineShapeOWSAnchor
       12 -> WdInlineShapeChart
       13 -> WdInlineShapeDiagram
       14 -> WdInlineShapeLockedCanvas
       15 -> WdInlineShapeSmartArt
       _ -> error "unmarshallWdInlineShapeType: illegal enum value "
  
instance Variant (WdInlineShapeType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdArrangeStyle
 = WdArrangeStyleList__ [WdArrangeStyle]
 | WdTiled
 | WdIcons
 
instance Flags (WdArrangeStyle) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdArrangeStyle) where
  fromEnum v =
    case v of
       (WdArrangeStyleList__ xs) -> orList (map fromEnum xs)
       WdTiled -> 0
       WdIcons -> 1
  
  toEnum v =
    case v of
       0 -> WdTiled
       1 -> WdIcons
       x -> WdArrangeStyleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdArrangeStyle: illegal enum value "
  
instance Variant (WdArrangeStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSelectionFlags
 = WdSelectionFlagsList__ [WdSelectionFlags]
 | WdSelStartActive
 | WdSelAtEOL
 | WdSelOvertype
 | WdSelActive
 | WdSelReplace
 
instance Flags (WdSelectionFlags) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSelectionFlags) where
  fromEnum v =
    case v of
       (WdSelectionFlagsList__ xs) -> orList (map fromEnum xs)
       WdSelStartActive -> 1
       WdSelAtEOL -> 2
       WdSelOvertype -> 4
       WdSelActive -> 8
       WdSelReplace -> 16
  
  toEnum v =
    case v of
       1 -> WdSelStartActive
       2 -> WdSelAtEOL
       4 -> WdSelOvertype
       8 -> WdSelActive
       16 -> WdSelReplace
       x -> WdSelectionFlagsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 5 1))
       _ -> error "unmarshallWdSelectionFlags: illegal enum value "
  
instance Variant (WdSelectionFlags) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAutoVersions
 = WdAutoVersionsList__ [WdAutoVersions]
 | WdAutoVersionOff
 | WdAutoVersionOnClose
 
instance Flags (WdAutoVersions) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdAutoVersions) where
  fromEnum v =
    case v of
       (WdAutoVersionsList__ xs) -> orList (map fromEnum xs)
       WdAutoVersionOff -> 0
       WdAutoVersionOnClose -> 1
  
  toEnum v =
    case v of
       0 -> WdAutoVersionOff
       1 -> WdAutoVersionOnClose
       x -> WdAutoVersionsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdAutoVersions: illegal enum value "
  
instance Variant (WdAutoVersions) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOrganizerObject
 = WdOrganizerObjectStyles
 | WdOrganizerObjectAutoText
 | WdOrganizerObjectCommandBars
 | WdOrganizerObjectProjectItems
 deriving (Enum)
instance Variant (WdOrganizerObject) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFindMatch
 = WdMatchGraphic
 | WdMatchCommentMark
 | WdMatchTabCharacter
 | WdMatchCaretCharacter
 | WdMatchColumnBreak
 | WdMatchField
 | WdMatchNonbreakingHyphen
 | WdMatchOptionalHyphen
 | WdMatchNonbreakingSpace
 | WdMatchEnDash
 | WdMatchEmDash
 | WdMatchParagraphMark
 | WdMatchManualLineBreak
 | WdMatchFootnoteMark
 | WdMatchEndnoteMark
 | WdMatchManualPageBreak
 | WdMatchAnyDigit
 | WdMatchSectionBreak
 | WdMatchAnyLetter
 | WdMatchAnyCharacter
 | WdMatchWhiteSpace
 
instance Enum (WdFindMatch) where
  fromEnum v =
    case v of
       WdMatchGraphic -> 1
       WdMatchCommentMark -> 5
       WdMatchTabCharacter -> 9
       WdMatchCaretCharacter -> 11
       WdMatchColumnBreak -> 14
       WdMatchField -> 19
       WdMatchNonbreakingHyphen -> 30
       WdMatchOptionalHyphen -> 31
       WdMatchNonbreakingSpace -> 160
       WdMatchEnDash -> 8211
       WdMatchEmDash -> 8212
       WdMatchParagraphMark -> 65551
       WdMatchManualLineBreak -> 65551
       WdMatchFootnoteMark -> 65554
       WdMatchEndnoteMark -> 65555
       WdMatchManualPageBreak -> 65564
       WdMatchAnyDigit -> 65567
       WdMatchSectionBreak -> 65580
       WdMatchAnyLetter -> 65583
       WdMatchAnyCharacter -> 65599
       WdMatchWhiteSpace -> 65655
  
  toEnum v =
    case v of
       1 -> WdMatchGraphic
       5 -> WdMatchCommentMark
       9 -> WdMatchTabCharacter
       11 -> WdMatchCaretCharacter
       14 -> WdMatchColumnBreak
       19 -> WdMatchField
       30 -> WdMatchNonbreakingHyphen
       31 -> WdMatchOptionalHyphen
       160 -> WdMatchNonbreakingSpace
       8211 -> WdMatchEnDash
       8212 -> WdMatchEmDash
       65551 -> WdMatchParagraphMark
       65551 -> WdMatchManualLineBreak
       65554 -> WdMatchFootnoteMark
       65555 -> WdMatchEndnoteMark
       65564 -> WdMatchManualPageBreak
       65567 -> WdMatchAnyDigit
       65580 -> WdMatchSectionBreak
       65583 -> WdMatchAnyLetter
       65599 -> WdMatchAnyCharacter
       65655 -> WdMatchWhiteSpace
       _ -> error "unmarshallWdFindMatch: illegal enum value "
  
instance Variant (WdFindMatch) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFindWrap
 = WdFindWrapList__ [WdFindWrap]
 | WdFindStop
 | WdFindContinue
 | WdFindAsk
 
instance Flags (WdFindWrap) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFindWrap) where
  fromEnum v =
    case v of
       (WdFindWrapList__ xs) -> orList (map fromEnum xs)
       WdFindStop -> 0
       WdFindContinue -> 1
       WdFindAsk -> 2
  
  toEnum v =
    case v of
       0 -> WdFindStop
       1 -> WdFindContinue
       2 -> WdFindAsk
       x -> WdFindWrapList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdFindWrap: illegal enum value "
  
instance Variant (WdFindWrap) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdInformation
 = WdActiveEndAdjustedPageNumber
 | WdActiveEndSectionNumber
 | WdActiveEndPageNumber
 | WdNumberOfPagesInDocument
 | WdHorizontalPositionRelativeToPage
 | WdVerticalPositionRelativeToPage
 | WdHorizontalPositionRelativeToTextBoundary
 | WdVerticalPositionRelativeToTextBoundary
 | WdFirstCharacterColumnNumber
 | WdFirstCharacterLineNumber
 | WdFrameIsSelected
 | WdWithInTable
 | WdStartOfRangeRowNumber
 | WdEndOfRangeRowNumber
 | WdMaximumNumberOfRows
 | WdStartOfRangeColumnNumber
 | WdEndOfRangeColumnNumber
 | WdMaximumNumberOfColumns
 | WdZoomPercentage
 | WdSelectionMode
 | WdCapsLock
 | WdNumLock
 | WdOverType
 | WdRevisionMarking
 | WdInFootnoteEndnotePane
 | WdInCommentPane
 | WdInHeaderFooter
 | WdAtEndOfRowMarker
 | WdReferenceOfType
 | WdHeaderFooterType
 | WdInMasterDocument
 | WdInFootnote
 | WdInEndnote
 | WdInWordMail
 | WdInClipboard
 
instance Enum (WdInformation) where
  fromEnum v =
    case v of
       WdActiveEndAdjustedPageNumber -> 1
       WdActiveEndSectionNumber -> 2
       WdActiveEndPageNumber -> 3
       WdNumberOfPagesInDocument -> 4
       WdHorizontalPositionRelativeToPage -> 5
       WdVerticalPositionRelativeToPage -> 6
       WdHorizontalPositionRelativeToTextBoundary -> 7
       WdVerticalPositionRelativeToTextBoundary -> 8
       WdFirstCharacterColumnNumber -> 9
       WdFirstCharacterLineNumber -> 10
       WdFrameIsSelected -> 11
       WdWithInTable -> 12
       WdStartOfRangeRowNumber -> 13
       WdEndOfRangeRowNumber -> 14
       WdMaximumNumberOfRows -> 15
       WdStartOfRangeColumnNumber -> 16
       WdEndOfRangeColumnNumber -> 17
       WdMaximumNumberOfColumns -> 18
       WdZoomPercentage -> 19
       WdSelectionMode -> 20
       WdCapsLock -> 21
       WdNumLock -> 22
       WdOverType -> 23
       WdRevisionMarking -> 24
       WdInFootnoteEndnotePane -> 25
       WdInCommentPane -> 26
       WdInHeaderFooter -> 28
       WdAtEndOfRowMarker -> 31
       WdReferenceOfType -> 32
       WdHeaderFooterType -> 33
       WdInMasterDocument -> 34
       WdInFootnote -> 35
       WdInEndnote -> 36
       WdInWordMail -> 37
       WdInClipboard -> 38
  
  toEnum v =
    case v of
       1 -> WdActiveEndAdjustedPageNumber
       2 -> WdActiveEndSectionNumber
       3 -> WdActiveEndPageNumber
       4 -> WdNumberOfPagesInDocument
       5 -> WdHorizontalPositionRelativeToPage
       6 -> WdVerticalPositionRelativeToPage
       7 -> WdHorizontalPositionRelativeToTextBoundary
       8 -> WdVerticalPositionRelativeToTextBoundary
       9 -> WdFirstCharacterColumnNumber
       10 -> WdFirstCharacterLineNumber
       11 -> WdFrameIsSelected
       12 -> WdWithInTable
       13 -> WdStartOfRangeRowNumber
       14 -> WdEndOfRangeRowNumber
       15 -> WdMaximumNumberOfRows
       16 -> WdStartOfRangeColumnNumber
       17 -> WdEndOfRangeColumnNumber
       18 -> WdMaximumNumberOfColumns
       19 -> WdZoomPercentage
       20 -> WdSelectionMode
       21 -> WdCapsLock
       22 -> WdNumLock
       23 -> WdOverType
       24 -> WdRevisionMarking
       25 -> WdInFootnoteEndnotePane
       26 -> WdInCommentPane
       28 -> WdInHeaderFooter
       31 -> WdAtEndOfRowMarker
       32 -> WdReferenceOfType
       33 -> WdHeaderFooterType
       34 -> WdInMasterDocument
       35 -> WdInFootnote
       36 -> WdInEndnote
       37 -> WdInWordMail
       38 -> WdInClipboard
       _ -> error "unmarshallWdInformation: illegal enum value "
  
instance Variant (WdInformation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWrapType
 = WdWrapSquare
 | WdWrapTight
 | WdWrapThrough
 | WdWrapNone
 | WdWrapFront
 | WdWrapTopBottom
 | WdWrapBehind
 | WdWrapInline
 
instance Enum (WdWrapType) where
  fromEnum v =
    case v of
       WdWrapSquare -> 0
       WdWrapTight -> 1
       WdWrapThrough -> 2
       WdWrapNone -> 3
       WdWrapFront -> 3
       WdWrapTopBottom -> 4
       WdWrapBehind -> 5
       WdWrapInline -> 7
  
  toEnum v =
    case v of
       0 -> WdWrapSquare
       1 -> WdWrapTight
       2 -> WdWrapThrough
       3 -> WdWrapNone
       3 -> WdWrapFront
       4 -> WdWrapTopBottom
       5 -> WdWrapBehind
       7 -> WdWrapInline
       _ -> error "unmarshallWdWrapType: illegal enum value "
  
instance Variant (WdWrapType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWrapSideType
 = WdWrapBoth
 | WdWrapLeft
 | WdWrapRight
 | WdWrapLargest
 deriving (Enum)
instance Variant (WdWrapSideType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOutlineLevel
 = WdOutlineLevel1
 | WdOutlineLevel2
 | WdOutlineLevel3
 | WdOutlineLevel4
 | WdOutlineLevel5
 | WdOutlineLevel6
 | WdOutlineLevel7
 | WdOutlineLevel8
 | WdOutlineLevel9
 | WdOutlineLevelBodyText
 
instance Enum (WdOutlineLevel) where
  fromEnum v =
    case v of
       WdOutlineLevel1 -> 1
       WdOutlineLevel2 -> 2
       WdOutlineLevel3 -> 3
       WdOutlineLevel4 -> 4
       WdOutlineLevel5 -> 5
       WdOutlineLevel6 -> 6
       WdOutlineLevel7 -> 7
       WdOutlineLevel8 -> 8
       WdOutlineLevel9 -> 9
       WdOutlineLevelBodyText -> 10
  
  toEnum v =
    case v of
       1 -> WdOutlineLevel1
       2 -> WdOutlineLevel2
       3 -> WdOutlineLevel3
       4 -> WdOutlineLevel4
       5 -> WdOutlineLevel5
       6 -> WdOutlineLevel6
       7 -> WdOutlineLevel7
       8 -> WdOutlineLevel8
       9 -> WdOutlineLevel9
       10 -> WdOutlineLevelBodyText
       _ -> error "unmarshallWdOutlineLevel: illegal enum value "
  
instance Variant (WdOutlineLevel) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTextOrientation
 = WdTextOrientationHorizontal
 | WdTextOrientationVerticalFarEast
 | WdTextOrientationUpward
 | WdTextOrientationDownward
 | WdTextOrientationHorizontalRotatedFarEast
 | WdTextOrientationVertical
 deriving (Enum)
instance Variant (WdTextOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTextOrientationHID = Emptyenum13 
instance Enum (WdTextOrientationHID) where
  fromEnum v = case v of Emptyenum13 -> 0
  
  toEnum v =
    case v of
       0 -> Emptyenum13
       _ -> error "unmarshallWdTextOrientationHID: illegal enum value "
  
instance Variant (WdTextOrientationHID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPageBorderArt
 = WdArtApples
 | WdArtMapleMuffins
 | WdArtCakeSlice
 | WdArtCandyCorn
 | WdArtIceCreamCones
 | WdArtChampagneBottle
 | WdArtPartyGlass
 | WdArtChristmasTree
 | WdArtTrees
 | WdArtPalmsColor
 | WdArtBalloons3Colors
 | WdArtBalloonsHotAir
 | WdArtPartyFavor
 | WdArtConfettiStreamers
 | WdArtHearts
 | WdArtHeartBalloon
 | WdArtStars3D
 | WdArtStarsShadowed
 | WdArtStars
 | WdArtSun
 | WdArtEarth2
 | WdArtEarth1
 | WdArtPeopleHats
 | WdArtSombrero
 | WdArtPencils
 | WdArtPackages
 | WdArtClocks
 | WdArtFirecrackers
 | WdArtRings
 | WdArtMapPins
 | WdArtConfetti
 | WdArtCreaturesButterfly
 | WdArtCreaturesLadyBug
 | WdArtCreaturesFish
 | WdArtBirdsFlight
 | WdArtScaredCat
 | WdArtBats
 | WdArtFlowersRoses
 | WdArtFlowersRedRose
 | WdArtPoinsettias
 | WdArtHolly
 | WdArtFlowersTiny
 | WdArtFlowersPansy
 | WdArtFlowersModern2
 | WdArtFlowersModern1
 | WdArtWhiteFlowers
 | WdArtVine
 | WdArtFlowersDaisies
 | WdArtFlowersBlockPrint
 | WdArtDecoArchColor
 | WdArtFans
 | WdArtFilm
 | WdArtLightning1
 | WdArtCompass
 | WdArtDoubleD
 | WdArtClassicalWave
 | WdArtShadowedSquares
 | WdArtTwistedLines1
 | WdArtWaveline
 | WdArtQuadrants
 | WdArtCheckedBarColor
 | WdArtSwirligig
 | WdArtPushPinNote1
 | WdArtPushPinNote2
 | WdArtPumpkin1
 | WdArtEggsBlack
 | WdArtCup
 | WdArtHeartGray
 | WdArtGingerbreadMan
 | WdArtBabyPacifier
 | WdArtBabyRattle
 | WdArtCabins
 | WdArtHouseFunky
 | WdArtStarsBlack
 | WdArtSnowflakes
 | WdArtSnowflakeFancy
 | WdArtSkyrocket
 | WdArtSeattle
 | WdArtMusicNotes
 | WdArtPalmsBlack
 | WdArtMapleLeaf
 | WdArtPaperClips
 | WdArtShorebirdTracks
 | WdArtPeople
 | WdArtPeopleWaving
 | WdArtEclipsingSquares2
 | WdArtHypnotic
 | WdArtDiamondsGray
 | WdArtDecoArch
 | WdArtDecoBlocks
 | WdArtCirclesLines
 | WdArtPapyrus
 | WdArtWoodwork
 | WdArtWeavingBraid
 | WdArtWeavingRibbon
 | WdArtWeavingAngles
 | WdArtArchedScallops
 | WdArtSafari
 | WdArtCelticKnotwork
 | WdArtCrazyMaze
 | WdArtEclipsingSquares1
 | WdArtBirds
 | WdArtFlowersTeacup
 | WdArtNorthwest
 | WdArtSouthwest
 | WdArtTribal6
 | WdArtTribal4
 | WdArtTribal3
 | WdArtTribal2
 | WdArtTribal5
 | WdArtXIllusions
 | WdArtZanyTriangles
 | WdArtPyramids
 | WdArtPyramidsAbove
 | WdArtConfettiGrays
 | WdArtConfettiOutline
 | WdArtConfettiWhite
 | WdArtMosaic
 | WdArtLightning2
 | WdArtHeebieJeebies
 | WdArtLightBulb
 | WdArtGradient
 | WdArtTriangleParty
 | WdArtTwistedLines2
 | WdArtMoons
 | WdArtOvals
 | WdArtDoubleDiamonds
 | WdArtChainLink
 | WdArtTriangles
 | WdArtTribal1
 | WdArtMarqueeToothed
 | WdArtSharksTeeth
 | WdArtSawtooth
 | WdArtSawtoothGray
 | WdArtPostageStamp
 | WdArtWeavingStrips
 | WdArtZigZag
 | WdArtCrossStitch
 | WdArtGems
 | WdArtCirclesRectangles
 | WdArtCornerTriangles
 | WdArtCreaturesInsects
 | WdArtZigZagStitch
 | WdArtCheckered
 | WdArtCheckedBarBlack
 | WdArtMarquee
 | WdArtBasicWhiteDots
 | WdArtBasicWideMidline
 | WdArtBasicWideOutline
 | WdArtBasicWideInline
 | WdArtBasicThinLines
 | WdArtBasicWhiteDashes
 | WdArtBasicWhiteSquares
 | WdArtBasicBlackSquares
 | WdArtBasicBlackDashes
 | WdArtBasicBlackDots
 | WdArtStarsTop
 | WdArtCertificateBanner
 | WdArtHandmade1
 | WdArtHandmade2
 | WdArtTornPaper
 | WdArtTornPaperBlack
 | WdArtCouponCutoutDashes
 | WdArtCouponCutoutDots
 
instance Enum (WdPageBorderArt) where
  fromEnum v =
    case v of
       WdArtApples -> 1
       WdArtMapleMuffins -> 2
       WdArtCakeSlice -> 3
       WdArtCandyCorn -> 4
       WdArtIceCreamCones -> 5
       WdArtChampagneBottle -> 6
       WdArtPartyGlass -> 7
       WdArtChristmasTree -> 8
       WdArtTrees -> 9
       WdArtPalmsColor -> 10
       WdArtBalloons3Colors -> 11
       WdArtBalloonsHotAir -> 12
       WdArtPartyFavor -> 13
       WdArtConfettiStreamers -> 14
       WdArtHearts -> 15
       WdArtHeartBalloon -> 16
       WdArtStars3D -> 17
       WdArtStarsShadowed -> 18
       WdArtStars -> 19
       WdArtSun -> 20
       WdArtEarth2 -> 21
       WdArtEarth1 -> 22
       WdArtPeopleHats -> 23
       WdArtSombrero -> 24
       WdArtPencils -> 25
       WdArtPackages -> 26
       WdArtClocks -> 27
       WdArtFirecrackers -> 28
       WdArtRings -> 29
       WdArtMapPins -> 30
       WdArtConfetti -> 31
       WdArtCreaturesButterfly -> 32
       WdArtCreaturesLadyBug -> 33
       WdArtCreaturesFish -> 34
       WdArtBirdsFlight -> 35
       WdArtScaredCat -> 36
       WdArtBats -> 37
       WdArtFlowersRoses -> 38
       WdArtFlowersRedRose -> 39
       WdArtPoinsettias -> 40
       WdArtHolly -> 41
       WdArtFlowersTiny -> 42
       WdArtFlowersPansy -> 43
       WdArtFlowersModern2 -> 44
       WdArtFlowersModern1 -> 45
       WdArtWhiteFlowers -> 46
       WdArtVine -> 47
       WdArtFlowersDaisies -> 48
       WdArtFlowersBlockPrint -> 49
       WdArtDecoArchColor -> 50
       WdArtFans -> 51
       WdArtFilm -> 52
       WdArtLightning1 -> 53
       WdArtCompass -> 54
       WdArtDoubleD -> 55
       WdArtClassicalWave -> 56
       WdArtShadowedSquares -> 57
       WdArtTwistedLines1 -> 58
       WdArtWaveline -> 59
       WdArtQuadrants -> 60
       WdArtCheckedBarColor -> 61
       WdArtSwirligig -> 62
       WdArtPushPinNote1 -> 63
       WdArtPushPinNote2 -> 64
       WdArtPumpkin1 -> 65
       WdArtEggsBlack -> 66
       WdArtCup -> 67
       WdArtHeartGray -> 68
       WdArtGingerbreadMan -> 69
       WdArtBabyPacifier -> 70
       WdArtBabyRattle -> 71
       WdArtCabins -> 72
       WdArtHouseFunky -> 73
       WdArtStarsBlack -> 74
       WdArtSnowflakes -> 75
       WdArtSnowflakeFancy -> 76
       WdArtSkyrocket -> 77
       WdArtSeattle -> 78
       WdArtMusicNotes -> 79
       WdArtPalmsBlack -> 80
       WdArtMapleLeaf -> 81
       WdArtPaperClips -> 82
       WdArtShorebirdTracks -> 83
       WdArtPeople -> 84
       WdArtPeopleWaving -> 85
       WdArtEclipsingSquares2 -> 86
       WdArtHypnotic -> 87
       WdArtDiamondsGray -> 88
       WdArtDecoArch -> 89
       WdArtDecoBlocks -> 90
       WdArtCirclesLines -> 91
       WdArtPapyrus -> 92
       WdArtWoodwork -> 93
       WdArtWeavingBraid -> 94
       WdArtWeavingRibbon -> 95
       WdArtWeavingAngles -> 96
       WdArtArchedScallops -> 97
       WdArtSafari -> 98
       WdArtCelticKnotwork -> 99
       WdArtCrazyMaze -> 100
       WdArtEclipsingSquares1 -> 101
       WdArtBirds -> 102
       WdArtFlowersTeacup -> 103
       WdArtNorthwest -> 104
       WdArtSouthwest -> 105
       WdArtTribal6 -> 106
       WdArtTribal4 -> 107
       WdArtTribal3 -> 108
       WdArtTribal2 -> 109
       WdArtTribal5 -> 110
       WdArtXIllusions -> 111
       WdArtZanyTriangles -> 112
       WdArtPyramids -> 113
       WdArtPyramidsAbove -> 114
       WdArtConfettiGrays -> 115
       WdArtConfettiOutline -> 116
       WdArtConfettiWhite -> 117
       WdArtMosaic -> 118
       WdArtLightning2 -> 119
       WdArtHeebieJeebies -> 120
       WdArtLightBulb -> 121
       WdArtGradient -> 122
       WdArtTriangleParty -> 123
       WdArtTwistedLines2 -> 124
       WdArtMoons -> 125
       WdArtOvals -> 126
       WdArtDoubleDiamonds -> 127
       WdArtChainLink -> 128
       WdArtTriangles -> 129
       WdArtTribal1 -> 130
       WdArtMarqueeToothed -> 131
       WdArtSharksTeeth -> 132
       WdArtSawtooth -> 133
       WdArtSawtoothGray -> 134
       WdArtPostageStamp -> 135
       WdArtWeavingStrips -> 136
       WdArtZigZag -> 137
       WdArtCrossStitch -> 138
       WdArtGems -> 139
       WdArtCirclesRectangles -> 140
       WdArtCornerTriangles -> 141
       WdArtCreaturesInsects -> 142
       WdArtZigZagStitch -> 143
       WdArtCheckered -> 144
       WdArtCheckedBarBlack -> 145
       WdArtMarquee -> 146
       WdArtBasicWhiteDots -> 147
       WdArtBasicWideMidline -> 148
       WdArtBasicWideOutline -> 149
       WdArtBasicWideInline -> 150
       WdArtBasicThinLines -> 151
       WdArtBasicWhiteDashes -> 152
       WdArtBasicWhiteSquares -> 153
       WdArtBasicBlackSquares -> 154
       WdArtBasicBlackDashes -> 155
       WdArtBasicBlackDots -> 156
       WdArtStarsTop -> 157
       WdArtCertificateBanner -> 158
       WdArtHandmade1 -> 159
       WdArtHandmade2 -> 160
       WdArtTornPaper -> 161
       WdArtTornPaperBlack -> 162
       WdArtCouponCutoutDashes -> 163
       WdArtCouponCutoutDots -> 164
  
  toEnum v =
    case v of
       1 -> WdArtApples
       2 -> WdArtMapleMuffins
       3 -> WdArtCakeSlice
       4 -> WdArtCandyCorn
       5 -> WdArtIceCreamCones
       6 -> WdArtChampagneBottle
       7 -> WdArtPartyGlass
       8 -> WdArtChristmasTree
       9 -> WdArtTrees
       10 -> WdArtPalmsColor
       11 -> WdArtBalloons3Colors
       12 -> WdArtBalloonsHotAir
       13 -> WdArtPartyFavor
       14 -> WdArtConfettiStreamers
       15 -> WdArtHearts
       16 -> WdArtHeartBalloon
       17 -> WdArtStars3D
       18 -> WdArtStarsShadowed
       19 -> WdArtStars
       20 -> WdArtSun
       21 -> WdArtEarth2
       22 -> WdArtEarth1
       23 -> WdArtPeopleHats
       24 -> WdArtSombrero
       25 -> WdArtPencils
       26 -> WdArtPackages
       27 -> WdArtClocks
       28 -> WdArtFirecrackers
       29 -> WdArtRings
       30 -> WdArtMapPins
       31 -> WdArtConfetti
       32 -> WdArtCreaturesButterfly
       33 -> WdArtCreaturesLadyBug
       34 -> WdArtCreaturesFish
       35 -> WdArtBirdsFlight
       36 -> WdArtScaredCat
       37 -> WdArtBats
       38 -> WdArtFlowersRoses
       39 -> WdArtFlowersRedRose
       40 -> WdArtPoinsettias
       41 -> WdArtHolly
       42 -> WdArtFlowersTiny
       43 -> WdArtFlowersPansy
       44 -> WdArtFlowersModern2
       45 -> WdArtFlowersModern1
       46 -> WdArtWhiteFlowers
       47 -> WdArtVine
       48 -> WdArtFlowersDaisies
       49 -> WdArtFlowersBlockPrint
       50 -> WdArtDecoArchColor
       51 -> WdArtFans
       52 -> WdArtFilm
       53 -> WdArtLightning1
       54 -> WdArtCompass
       55 -> WdArtDoubleD
       56 -> WdArtClassicalWave
       57 -> WdArtShadowedSquares
       58 -> WdArtTwistedLines1
       59 -> WdArtWaveline
       60 -> WdArtQuadrants
       61 -> WdArtCheckedBarColor
       62 -> WdArtSwirligig
       63 -> WdArtPushPinNote1
       64 -> WdArtPushPinNote2
       65 -> WdArtPumpkin1
       66 -> WdArtEggsBlack
       67 -> WdArtCup
       68 -> WdArtHeartGray
       69 -> WdArtGingerbreadMan
       70 -> WdArtBabyPacifier
       71 -> WdArtBabyRattle
       72 -> WdArtCabins
       73 -> WdArtHouseFunky
       74 -> WdArtStarsBlack
       75 -> WdArtSnowflakes
       76 -> WdArtSnowflakeFancy
       77 -> WdArtSkyrocket
       78 -> WdArtSeattle
       79 -> WdArtMusicNotes
       80 -> WdArtPalmsBlack
       81 -> WdArtMapleLeaf
       82 -> WdArtPaperClips
       83 -> WdArtShorebirdTracks
       84 -> WdArtPeople
       85 -> WdArtPeopleWaving
       86 -> WdArtEclipsingSquares2
       87 -> WdArtHypnotic
       88 -> WdArtDiamondsGray
       89 -> WdArtDecoArch
       90 -> WdArtDecoBlocks
       91 -> WdArtCirclesLines
       92 -> WdArtPapyrus
       93 -> WdArtWoodwork
       94 -> WdArtWeavingBraid
       95 -> WdArtWeavingRibbon
       96 -> WdArtWeavingAngles
       97 -> WdArtArchedScallops
       98 -> WdArtSafari
       99 -> WdArtCelticKnotwork
       100 -> WdArtCrazyMaze
       101 -> WdArtEclipsingSquares1
       102 -> WdArtBirds
       103 -> WdArtFlowersTeacup
       104 -> WdArtNorthwest
       105 -> WdArtSouthwest
       106 -> WdArtTribal6
       107 -> WdArtTribal4
       108 -> WdArtTribal3
       109 -> WdArtTribal2
       110 -> WdArtTribal5
       111 -> WdArtXIllusions
       112 -> WdArtZanyTriangles
       113 -> WdArtPyramids
       114 -> WdArtPyramidsAbove
       115 -> WdArtConfettiGrays
       116 -> WdArtConfettiOutline
       117 -> WdArtConfettiWhite
       118 -> WdArtMosaic
       119 -> WdArtLightning2
       120 -> WdArtHeebieJeebies
       121 -> WdArtLightBulb
       122 -> WdArtGradient
       123 -> WdArtTriangleParty
       124 -> WdArtTwistedLines2
       125 -> WdArtMoons
       126 -> WdArtOvals
       127 -> WdArtDoubleDiamonds
       128 -> WdArtChainLink
       129 -> WdArtTriangles
       130 -> WdArtTribal1
       131 -> WdArtMarqueeToothed
       132 -> WdArtSharksTeeth
       133 -> WdArtSawtooth
       134 -> WdArtSawtoothGray
       135 -> WdArtPostageStamp
       136 -> WdArtWeavingStrips
       137 -> WdArtZigZag
       138 -> WdArtCrossStitch
       139 -> WdArtGems
       140 -> WdArtCirclesRectangles
       141 -> WdArtCornerTriangles
       142 -> WdArtCreaturesInsects
       143 -> WdArtZigZagStitch
       144 -> WdArtCheckered
       145 -> WdArtCheckedBarBlack
       146 -> WdArtMarquee
       147 -> WdArtBasicWhiteDots
       148 -> WdArtBasicWideMidline
       149 -> WdArtBasicWideOutline
       150 -> WdArtBasicWideInline
       151 -> WdArtBasicThinLines
       152 -> WdArtBasicWhiteDashes
       153 -> WdArtBasicWhiteSquares
       154 -> WdArtBasicBlackSquares
       155 -> WdArtBasicBlackDashes
       156 -> WdArtBasicBlackDots
       157 -> WdArtStarsTop
       158 -> WdArtCertificateBanner
       159 -> WdArtHandmade1
       160 -> WdArtHandmade2
       161 -> WdArtTornPaper
       162 -> WdArtTornPaperBlack
       163 -> WdArtCouponCutoutDashes
       164 -> WdArtCouponCutoutDots
       _ -> error "unmarshallWdPageBorderArt: illegal enum value "
  
instance Variant (WdPageBorderArt) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBorderDistanceFrom
 = WdBorderDistanceFromList__ [WdBorderDistanceFrom]
 | WdBorderDistanceFromText
 | WdBorderDistanceFromPageEdge
 
instance Flags (WdBorderDistanceFrom) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdBorderDistanceFrom) where
  fromEnum v =
    case v of
       (WdBorderDistanceFromList__ xs) -> orList (map fromEnum xs)
       WdBorderDistanceFromText -> 0
       WdBorderDistanceFromPageEdge -> 1
  
  toEnum v =
    case v of
       0 -> WdBorderDistanceFromText
       1 -> WdBorderDistanceFromPageEdge
       x -> WdBorderDistanceFromList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdBorderDistanceFrom: illegal enum value "
  
instance Variant (WdBorderDistanceFrom) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdReplace
 = WdReplaceList__ [WdReplace]
 | WdReplaceNone
 | WdReplaceOne
 | WdReplaceAll
 
instance Flags (WdReplace) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdReplace) where
  fromEnum v =
    case v of
       (WdReplaceList__ xs) -> orList (map fromEnum xs)
       WdReplaceNone -> 0
       WdReplaceOne -> 1
       WdReplaceAll -> 2
  
  toEnum v =
    case v of
       0 -> WdReplaceNone
       1 -> WdReplaceOne
       2 -> WdReplaceAll
       x -> WdReplaceList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                  then Just (toEnum (fromIntegral val))
                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdReplace: illegal enum value "
  
instance Variant (WdReplace) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFontBias
 = WdFontBiasDefault
 | WdFontBiasFareast
 | WdFontBiasDontCare
 
instance Enum (WdFontBias) where
  fromEnum v =
    case v of
       WdFontBiasDefault -> 0
       WdFontBiasFareast -> 1
       WdFontBiasDontCare -> 255
  
  toEnum v =
    case v of
       0 -> WdFontBiasDefault
       1 -> WdFontBiasFareast
       255 -> WdFontBiasDontCare
       _ -> error "unmarshallWdFontBias: illegal enum value "
  
instance Variant (WdFontBias) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
-- --------------------------------------------------
-- 
-- interface _Application
-- 
-- --------------------------------------------------
data Application_ a = Application__ 
type Application a = IDispatch (Application_ a)
iidApplication :: IID (Application ())
iidApplication = mkIID "{00020970-0000-0000-C000-000000000046}"

getApplication :: Application a0
               -> IO (Maybe Application)
getApplication iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

foreign import stdcall "dynamic" prim_Word_getApplication :: Ptr () -> Ptr () -> Ptr (Ptr Application) -> IO Int32
getCreator :: Application a0
           -> IO Int32
getCreator =
  propertyGet "Creator"
              []
              outInt32

getParent :: Application a0
          -> IO (IDispatch ())
getParent =
  propertyGet "Parent"
              []
              outIDispatch

getName :: Application a0
        -> IO String
getName =
  propertyGet "Name"
              []
              outString

getDocuments :: Application a0
             -> IO (Documents ())
getDocuments =
  propertyGet "Documents"
              []
              outIUnknown

getWindows :: Application a0
           -> IO (Windows ())
getWindows =
  propertyGet "Windows"
              []
              outIUnknown

getActiveDocument :: Application a0
                  -> IO (Maybe Document)
getActiveDocument iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 13 iptr
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_getActiveDocument :: Ptr () -> Ptr () -> Ptr (Ptr Document) -> IO Int32
getActiveWindow :: Application a0
                -> IO (Window ())
getActiveWindow =
  propertyGet "ActiveWindow"
              []
              outIUnknown

getSelection :: Application a0
             -> IO (Selection ())
getSelection =
  propertyGet "Selection"
              []
              outIUnknown

getWordBasic :: Application a0
             -> IO (IDispatch ())
getWordBasic =
  propertyGet "WordBasic"
              []
              outIDispatch

getRecentFiles :: Application a0
               -> IO (RecentFiles ())
getRecentFiles =
  propertyGet "RecentFiles"
              []
              outIUnknown

getNormalTemplate :: Application a0
                  -> IO (Template ())
getNormalTemplate =
  propertyGet "NormalTemplate"
              []
              outIUnknown

getSystem :: Application a0
          -> IO (System ())
getSystem =
  propertyGet "System"
              []
              outIUnknown

getAutoCorrect :: Application a0
               -> IO (AutoCorrect ())
getAutoCorrect =
  propertyGet "AutoCorrect"
              []
              outIUnknown

getFontNames :: Application a0
             -> IO (FontNames ())
getFontNames =
  propertyGet "FontNames"
              []
              outIUnknown

getLandscapeFontNames :: Application a0
                      -> IO (FontNames ())
getLandscapeFontNames =
  propertyGet "LandscapeFontNames"
              []
              outIUnknown

getPortraitFontNames :: Application a0
                     -> IO (FontNames ())
getPortraitFontNames =
  propertyGet "PortraitFontNames"
              []
              outIUnknown

getLanguages :: Application a0
             -> IO (Languages ())
getLanguages =
  propertyGet "Languages"
              []
              outIUnknown

getAssistant :: Application a0
             -> IO (Maybe Assistant)
getAssistant iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAssistant methPtr iptr prop) 25 iptr
    doThenFree free (readunique readAssistant) prop

foreign import stdcall "dynamic" prim_Word_getAssistant :: Ptr () -> Ptr () -> Ptr (Ptr Assistant) -> IO Int32
getBrowser :: Application a0
           -> IO (Browser ())
getBrowser =
  propertyGet "Browser"
              []
              outIUnknown

getFileConverters :: Application a0
                  -> IO (FileConverters ())
getFileConverters =
  propertyGet "FileConverters"
              []
              outIUnknown

getMailingLabel :: Application a0
                -> IO (MailingLabel ())
getMailingLabel =
  propertyGet "MailingLabel"
              []
              outIUnknown

getDialogs :: Application a0
           -> IO (Dialogs ())
getDialogs =
  propertyGet "Dialogs"
              []
              outIUnknown

getCaptionLabels :: Application a0
                 -> IO (CaptionLabels ())
getCaptionLabels =
  propertyGet "CaptionLabels"
              []
              outIUnknown

getAutoCaptions :: Application a0
                -> IO (AutoCaptions ())
getAutoCaptions =
  propertyGet "AutoCaptions"
              []
              outIUnknown

getAddIns :: Application a0
          -> IO (AddIns ())
getAddIns =
  propertyGet "AddIns"
              []
              outIUnknown

getVisible :: Application a0
           -> IO Bool
getVisible =
  propertyGet "Visible"
              []
              outBool

setVisible :: Bool
           -> Application a0
           -> IO ()
setVisible prop =
  propertySet "Visible"
              [inBool prop]

getVersion :: Application a0
           -> IO String
getVersion =
  propertyGet "Version"
              []
              outString

getScreenUpdating :: Application a0
                  -> IO Bool
getScreenUpdating =
  propertyGet "ScreenUpdating"
              []
              outBool

setScreenUpdating :: Bool
                  -> Application a0
                  -> IO ()
setScreenUpdating prop =
  propertySet "ScreenUpdating"
              [inBool prop]

getPrintPreview :: Application a0
                -> IO Bool
getPrintPreview =
  propertyGet "PrintPreview"
              []
              outBool

setPrintPreview :: Bool
                -> Application a0
                -> IO ()
setPrintPreview prop =
  propertySet "PrintPreview"
              [inBool prop]

getTasks :: Application a0
         -> IO (Tasks ())
getTasks =
  propertyGet "Tasks"
              []
              outIUnknown

getDisplayStatusBar :: Application a0
                    -> IO Bool
getDisplayStatusBar =
  propertyGet "DisplayStatusBar"
              []
              outBool

setDisplayStatusBar :: Bool
                    -> Application a0
                    -> IO ()
setDisplayStatusBar prop =
  propertySet "DisplayStatusBar"
              [inBool prop]

getSpecialMode :: Application a0
               -> IO Bool
getSpecialMode =
  propertyGet "SpecialMode"
              []
              outBool

getUsableWidth :: Application a0
               -> IO Int32
getUsableWidth =
  propertyGet "UsableWidth"
              []
              outInt32

getUsableHeight :: Application a0
                -> IO Int32
getUsableHeight =
  propertyGet "UsableHeight"
              []
              outInt32

getMathCoprocessorAvailable :: Application a0
                            -> IO Bool
getMathCoprocessorAvailable =
  propertyGet "MathCoprocessorAvailable"
              []
              outBool

getMouseAvailable :: Application a0
                  -> IO Bool
getMouseAvailable =
  propertyGet "MouseAvailable"
              []
              outBool

getInternational :: (Variant a1)
                 => WdInternationalIndex
                 -> Application a0
                 -> IO a1
getInternational index =
  propertyGet "International"
              [inEnum index]
              outVariant

getBuild :: Application a0
         -> IO String
getBuild =
  propertyGet "Build"
              []
              outString

getCapsLock :: Application a0
            -> IO Bool
getCapsLock =
  propertyGet "CapsLock"
              []
              outBool

getNumLock :: Application a0
           -> IO Bool
getNumLock =
  propertyGet "NumLock"
              []
              outBool

getUserName :: Application a0
            -> IO String
getUserName =
  propertyGet "UserName"
              []
              outString

setUserName :: String
            -> Application a0
            -> IO ()
setUserName prop =
  propertySet "UserName"
              [inString prop]

getUserInitials :: Application a0
                -> IO String
getUserInitials =
  propertyGet "UserInitials"
              []
              outString

setUserInitials :: String
                -> Application a0
                -> IO ()
setUserInitials prop =
  propertySet "UserInitials"
              [inString prop]

getUserAddress :: Application a0
               -> IO String
getUserAddress =
  propertyGet "UserAddress"
              []
              outString

setUserAddress :: String
               -> Application a0
               -> IO ()
setUserAddress prop =
  propertySet "UserAddress"
              [inString prop]

getMacroContainer :: Application a0
                  -> IO (IDispatch ())
getMacroContainer =
  propertyGet "MacroContainer"
              []
              outIDispatch

getDisplayRecentFiles :: Application a0
                      -> IO Bool
getDisplayRecentFiles =
  propertyGet "DisplayRecentFiles"
              []
              outBool

setDisplayRecentFiles :: Bool
                      -> Application a0
                      -> IO ()
setDisplayRecentFiles prop =
  propertySet "DisplayRecentFiles"
              [inBool prop]

getCommandBars :: Application a0
               -> IO (Maybe CommandBars)
getCommandBars iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCommandBars methPtr iptr prop) 61 iptr
    doThenFree free (readunique readCommandBars) prop

foreign import stdcall "dynamic" prim_Word_getCommandBars :: Ptr () -> Ptr () -> Ptr (Ptr CommandBars) -> IO Int32
getSynonymInfo :: (Variant a1)
               => String
               -> a1
               -> Application a0
               -> IO (SynonymInfo ())
getSynonymInfo word languageID =
  propertyGet "SynonymInfo"
              [ inString word
              , inVariant languageID
              ]
              outIUnknown

getVBE :: Application a0
       -> IO (Maybe VBE)
getVBE iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getVBE methPtr iptr prop) 63 iptr
    doThenFree free (readunique readVBE) prop

foreign import stdcall "dynamic" prim_Word_getVBE :: Ptr () -> Ptr () -> Ptr (Ptr VBE) -> IO Int32
getDefaultSaveFormat :: Application a0
                     -> IO String
getDefaultSaveFormat =
  propertyGet "DefaultSaveFormat"
              []
              outString

setDefaultSaveFormat :: String
                     -> Application a0
                     -> IO ()
setDefaultSaveFormat prop =
  propertySet "DefaultSaveFormat"
              [inString prop]

getListGalleries :: Application a0
                 -> IO (ListGalleries ())
getListGalleries =
  propertyGet "ListGalleries"
              []
              outIUnknown

getActivePrinter :: Application a0
                 -> IO String
getActivePrinter =
  propertyGet "ActivePrinter"
              []
              outString

setActivePrinter :: String
                 -> Application a0
                 -> IO ()
setActivePrinter prop =
  propertySet "ActivePrinter"
              [inString prop]

getTemplates :: Application a0
             -> IO (Templates ())
getTemplates =
  propertyGet "Templates"
              []
              outIUnknown

getCustomizationContext :: Application a0
                        -> IO (IDispatch ())
getCustomizationContext =
  propertyGet "CustomizationContext"
              []
              outIDispatch

setCustomizationContext :: IDispatch a1
                        -> Application a0
                        -> IO ()
setCustomizationContext prop =
  propertySet "CustomizationContext"
              [inIDispatch prop]

getKeyBindings :: Application a0
               -> IO (KeyBindings ())
getKeyBindings =
  propertyGet "KeyBindings"
              []
              outIUnknown

getKeysBoundTo :: (Variant a1)
               => WdKeyCategory
               -> String
               -> a1
               -> Application a0
               -> IO (KeysBoundTo ())
getKeysBoundTo keyCategory command commandParameter =
  propertyGet "KeysBoundTo"
              [ inEnum keyCategory
              , inString command
              , inVariant commandParameter
              ]
              outIUnknown

getFindKey :: (Variant a1)
           => Int32
           -> a1
           -> Application a0
           -> IO (KeyBinding ())
getFindKey keyCode keyCode2 =
  propertyGet "FindKey"
              [ inInt32 keyCode
              , inVariant keyCode2
              ]
              outIUnknown

getCaption :: Application a0
           -> IO String
getCaption =
  propertyGet "Caption"
              []
              outString

setCaption :: String
           -> Application a0
           -> IO ()
setCaption prop =
  propertySet "Caption"
              [inString prop]

getPath :: Application a0
        -> IO String
getPath =
  propertyGet "Path"
              []
              outString

getDisplayScrollBars :: Application a0
                     -> IO Bool
getDisplayScrollBars =
  propertyGet "DisplayScrollBars"
              []
              outBool

setDisplayScrollBars :: Bool
                     -> Application a0
                     -> IO ()
setDisplayScrollBars prop =
  propertySet "DisplayScrollBars"
              [inBool prop]

getStartupPath :: Application a0
               -> IO String
getStartupPath =
  propertyGet "StartupPath"
              []
              outString

setStartupPath :: String
               -> Application a0
               -> IO ()
setStartupPath prop =
  propertySet "StartupPath"
              [inString prop]

getBackgroundSavingStatus :: Application a0
                          -> IO Int32
getBackgroundSavingStatus =
  propertyGet "BackgroundSavingStatus"
              []
              outInt32

getBackgroundPrintingStatus :: Application a0
                            -> IO Int32
getBackgroundPrintingStatus =
  propertyGet "BackgroundPrintingStatus"
              []
              outInt32

getLeft :: Application a0
        -> IO Int32
getLeft =
  propertyGet "Left"
              []
              outInt32

setLeft :: Int32
        -> Application a0
        -> IO ()
setLeft prop =
  propertySet "Left"
              [inInt32 prop]

getTop :: Application a0
       -> IO Int32
getTop =
  propertyGet "Top"
              []
              outInt32

setTop :: Int32
       -> Application a0
       -> IO ()
setTop prop =
  propertySet "Top"
              [inInt32 prop]

getWidth :: Application a0
         -> IO Int32
getWidth =
  propertyGet "Width"
              []
              outInt32

setWidth :: Int32
         -> Application a0
         -> IO ()
setWidth prop =
  propertySet "Width"
              [inInt32 prop]

getHeight :: Application a0
          -> IO Int32
getHeight =
  propertyGet "Height"
              []
              outInt32

setHeight :: Int32
          -> Application a0
          -> IO ()
setHeight prop =
  propertySet "Height"
              [inInt32 prop]

getWindowState :: Application a0
               -> IO WdWindowState
getWindowState =
  propertyGet "WindowState"
              []
              outEnum

setWindowState :: WdWindowState
               -> Application a0
               -> IO ()
setWindowState prop =
  propertySet "WindowState"
              [inEnum prop]

getDisplayAutoCompleteTips :: Application a0
                           -> IO Bool
getDisplayAutoCompleteTips =
  propertyGet "DisplayAutoCompleteTips"
              []
              outBool

setDisplayAutoCompleteTips :: Bool
                           -> Application a0
                           -> IO ()
setDisplayAutoCompleteTips prop =
  propertySet "DisplayAutoCompleteTips"
              [inBool prop]

getOptions :: Application a0
           -> IO (Options ())
getOptions =
  propertyGet "Options"
              []
              outIUnknown

getDisplayAlerts :: Application a0
                 -> IO WdAlertLevel
getDisplayAlerts =
  propertyGet "DisplayAlerts"
              []
              outEnum

setDisplayAlerts :: WdAlertLevel
                 -> Application a0
                 -> IO ()
setDisplayAlerts prop =
  propertySet "DisplayAlerts"
              [inEnum prop]

getCustomDictionaries :: Application a0
                      -> IO (Dictionaries ())
getCustomDictionaries =
  propertyGet "CustomDictionaries"
              []
              outIUnknown

getPathSeparator :: Application a0
                 -> IO String
getPathSeparator =
  propertyGet "PathSeparator"
              []
              outString

setStatusBar :: String
             -> Application a0
             -> IO ()
setStatusBar rhs =
  propertySet "StatusBar"
              [inString rhs]

getMAPIAvailable :: Application a0
                 -> IO Bool
getMAPIAvailable =
  propertyGet "MAPIAvailable"
              []
              outBool

getDisplayScreenTips :: Application a0
                     -> IO Bool
getDisplayScreenTips =
  propertyGet "DisplayScreenTips"
              []
              outBool

setDisplayScreenTips :: Bool
                     -> Application a0
                     -> IO ()
setDisplayScreenTips prop =
  propertySet "DisplayScreenTips"
              [inBool prop]

getEnableCancelKey :: Application a0
                   -> IO WdEnableCancelKey
getEnableCancelKey =
  propertyGet "EnableCancelKey"
              []
              outEnum

setEnableCancelKey :: WdEnableCancelKey
                   -> Application a0
                   -> IO ()
setEnableCancelKey prop =
  propertySet "EnableCancelKey"
              [inEnum prop]

getUserControl :: Application a0
               -> IO Bool
getUserControl =
  propertyGet "UserControl"
              []
              outBool

getFileSearch :: Application a0
              -> IO (Maybe FileSearch)
getFileSearch iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFileSearch methPtr iptr prop) 108 iptr
    doThenFree free (readunique readFileSearch) prop

foreign import stdcall "dynamic" prim_Word_getFileSearch :: Ptr () -> Ptr () -> Ptr (Ptr FileSearch) -> IO Int32
getMailSystem :: Application a0
              -> IO WdMailSystem
getMailSystem =
  propertyGet "MailSystem"
              []
              outEnum

getDefaultTableSeparator :: Application a0
                         -> IO String
getDefaultTableSeparator =
  propertyGet "DefaultTableSeparator"
              []
              outString

setDefaultTableSeparator :: String
                         -> Application a0
                         -> IO ()
setDefaultTableSeparator prop =
  propertySet "DefaultTableSeparator"
              [inString prop]

getShowVisualBasicEditor :: Application a0
                         -> IO Bool
getShowVisualBasicEditor =
  propertyGet "ShowVisualBasicEditor"
              []
              outBool

setShowVisualBasicEditor :: Bool
                         -> Application a0
                         -> IO ()
setShowVisualBasicEditor prop =
  propertySet "ShowVisualBasicEditor"
              [inBool prop]

getBrowseExtraFileTypes :: Application a0
                        -> IO String
getBrowseExtraFileTypes =
  propertyGet "BrowseExtraFileTypes"
              []
              outString

setBrowseExtraFileTypes :: String
                        -> Application a0
                        -> IO ()
setBrowseExtraFileTypes prop =
  propertySet "BrowseExtraFileTypes"
              [inString prop]

getIsObjectValid :: IDispatch a1
                 -> Application a0
                 -> IO Bool
getIsObjectValid object =
  propertyGet "IsObjectValid"
              [inIDispatch object]
              outBool

getHangulHanjaDictionaries :: Application a0
                           -> IO (HangulHanjaConversionDictionaries ())
getHangulHanjaDictionaries =
  propertyGet "HangulHanjaDictionaries"
              []
              outIUnknown

getMailMessage :: Application a0
               -> IO (MailMessage ())
getMailMessage =
  propertyGet "MailMessage"
              []
              outIUnknown

getFocusInMailHeader :: Application a0
                     -> IO Bool
getFocusInMailHeader =
  propertyGet "FocusInMailHeader"
              []
              outBool

quit :: (Variant a1, Variant a2, Variant a3)
     => a1
     -> a2
     -> a3
     -> Application a0
     -> IO ()
quit saveChanges originalFormat routeDocument =
  method0 "Quit"
          [ inVariant saveChanges
          , inVariant originalFormat
          , inVariant routeDocument
          ]

screenRefresh :: Application a0
              -> IO ()
screenRefresh =
  method0 "ScreenRefresh"
          []

printOutOld :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> Application a0
            -> IO ()
printOutOld background append range outputFileName from to item copies pages pageType printToFile collate fileName activePrinterMacGX manualDuplexPrint =
  method0 "PrintOutOld"
          [ inVariant background
          , inVariant append
          , inVariant range
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant fileName
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          ]

lookupNameProperties :: String
                     -> Application a0
                     -> IO ()
lookupNameProperties name =
  method0 "LookupNameProperties"
          [inString name]

substituteFont :: String
               -> String
               -> Application a0
               -> IO ()
substituteFont unavailableFont substituteFont0 =
  method0 "SubstituteFont"
          [ inString unavailableFont
          , inString substituteFont0
          ]

repeat :: (Variant a1)
       => a1
       -> Application a0
       -> IO Bool
repeat times =
  function1 "Repeat"
            [inVariant times]
            outBool

dDEExecute :: Int32
           -> String
           -> Application a0
           -> IO ()
dDEExecute channel command =
  method0 "DDEExecute"
          [ inInt32 channel
          , inString command
          ]

dDEInitiate :: String
            -> String
            -> Application a0
            -> IO Int32
dDEInitiate app topic =
  function1 "DDEInitiate"
            [ inString app
            , inString topic
            ]
            outInt32

dDEPoke :: Int32
        -> String
        -> String
        -> Application a0
        -> IO ()
dDEPoke channel item data0 =
  method0 "DDEPoke"
          [ inInt32 channel
          , inString item
          , inString data0
          ]

dDERequest :: Int32
           -> String
           -> Application a0
           -> IO String
dDERequest channel item =
  function1 "DDERequest"
            [ inInt32 channel
            , inString item
            ]
            outString

dDETerminate :: Int32
             -> Application a0
             -> IO ()
dDETerminate channel =
  method0 "DDETerminate"
          [inInt32 channel]

dDETerminateAll :: Application a0
                -> IO ()
dDETerminateAll =
  method0 "DDETerminateAll"
          []

buildKeyCode :: (Variant a1, Variant a2, Variant a3)
             => WdKey
             -> a1
             -> a2
             -> a3
             -> Application a0
             -> IO Int32
buildKeyCode arg1 arg2 arg3 arg4 =
  function1 "BuildKeyCode"
            [ inEnum arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outInt32

keyString :: (Variant a1)
          => Int32
          -> a1
          -> Application a0
          -> IO String
keyString keyCode keyCode2 =
  function1 "KeyString"
            [ inInt32 keyCode
            , inVariant keyCode2
            ]
            outString

organizerCopy :: String
              -> String
              -> String
              -> WdOrganizerObject
              -> Application a0
              -> IO ()
organizerCopy source destination name object =
  method0 "OrganizerCopy"
          [ inString source
          , inString destination
          , inString name
          , inEnum object
          ]

organizerDelete :: String
                -> String
                -> WdOrganizerObject
                -> Application a0
                -> IO ()
organizerDelete source name object =
  method0 "OrganizerDelete"
          [ inString source
          , inString name
          , inEnum object
          ]

organizerRename :: String
                -> String
                -> String
                -> WdOrganizerObject
                -> Application a0
                -> IO ()
organizerRename source name newName object =
  method0 "OrganizerRename"
          [ inString source
          , inString name
          , inString newName
          , inEnum object
          ]

addAddress :: SafeArray String
           -> SafeArray String
           -> Application a0
           -> IO ()
addAddress tagID value =
  method0 "AddAddress"
          [ inSafeArray tagID
          , inSafeArray value
          ]

getAddress :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> Application a0
           -> IO String
getAddress name addressProperties useAutoText displaySelectDialog selectDialog checkNamesDialog recentAddressesChoice updateRecentAddresses =
  function1 "GetAddress"
            [ inVariant name
            , inVariant addressProperties
            , inVariant useAutoText
            , inVariant displaySelectDialog
            , inVariant selectDialog
            , inVariant checkNamesDialog
            , inVariant recentAddressesChoice
            , inVariant updateRecentAddresses
            ]
            outString

checkGrammar :: String
             -> Application a0
             -> IO Bool
checkGrammar string =
  function1 "CheckGrammar"
            [inString string]
            outBool

checkSpelling :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
              => String
              -> a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> a12
              -> Application a0
              -> IO Bool
checkSpelling word customDictionary ignoreUppercase mainDictionary customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  function1 "CheckSpelling"
            [ inString word
            , inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant mainDictionary
            , inVariant customDictionary2
            , inVariant customDictionary3
            , inVariant customDictionary4
            , inVariant customDictionary5
            , inVariant customDictionary6
            , inVariant customDictionary7
            , inVariant customDictionary8
            , inVariant customDictionary9
            , inVariant customDictionary10
            ]
            outBool

resetIgnoreAll :: Application a0
               -> IO ()
resetIgnoreAll =
  method0 "ResetIgnoreAll"
          []

getSpellingSuggestions :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
                       => String
                       -> a1
                       -> a2
                       -> a3
                       -> a4
                       -> a5
                       -> a6
                       -> a7
                       -> a8
                       -> a9
                       -> a10
                       -> a11
                       -> a12
                       -> a13
                       -> Application a0
                       -> IO (SpellingSuggestions ())
getSpellingSuggestions word customDictionary ignoreUppercase mainDictionary suggestionMode customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  function1 "GetSpellingSuggestions"
            [ inString word
            , inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant mainDictionary
            , inVariant suggestionMode
            , inVariant customDictionary2
            , inVariant customDictionary3
            , inVariant customDictionary4
            , inVariant customDictionary5
            , inVariant customDictionary6
            , inVariant customDictionary7
            , inVariant customDictionary8
            , inVariant customDictionary9
            , inVariant customDictionary10
            ]
            outIUnknown

goBack :: Application a0
       -> IO ()
goBack =
  method0 "GoBack"
          []

help :: (Variant a1)
     => a1
     -> Application a0
     -> IO ()
help helpType =
  method0 "Help"
          [inVariant helpType]

automaticChange :: Application a0
                -> IO ()
automaticChange =
  method0 "AutomaticChange"
          []

showMe :: Application a0
       -> IO ()
showMe =
  method0 "ShowMe"
          []

helpTool :: Application a0
         -> IO ()
helpTool =
  method0 "HelpTool"
          []

newWindow :: Application a0
          -> IO (Window ())
newWindow =
  function1 "NewWindow"
            []
            outIUnknown

listCommands :: Bool
             -> Application a0
             -> IO ()
listCommands listAllCommands =
  method0 "ListCommands"
          [inBool listAllCommands]

showClipboard :: Application a0
              -> IO ()
showClipboard =
  method0 "ShowClipboard"
          []

onTime :: (Variant a1, Variant a2)
       => a1
       -> String
       -> a2
       -> Application a0
       -> IO ()
onTime when name tolerance =
  method0 "OnTime"
          [ inVariant when
          , inString name
          , inVariant tolerance
          ]

nextLetter :: Application a0
           -> IO ()
nextLetter =
  method0 "NextLetter"
          []

mountVolume :: (Variant a1, Variant a2, Variant a3)
            => String
            -> String
            -> String
            -> a1
            -> a2
            -> a3
            -> Application a0
            -> IO Int16
mountVolume zone server volume user userPassword volumePassword =
  function1 "MountVolume"
            [ inString zone
            , inString server
            , inString volume
            , inVariant user
            , inVariant userPassword
            , inVariant volumePassword
            ]
            outInt16

cleanString :: String
            -> Application a0
            -> IO String
cleanString string =
  function1 "CleanString"
            [inString string]
            outString

sendFax :: Application a0
        -> IO ()
sendFax =
  method0 "SendFax"
          []

changeFileOpenDirectory :: String
                        -> Application a0
                        -> IO ()
changeFileOpenDirectory path =
  method0 "ChangeFileOpenDirectory"
          [inString path]

runOld :: String
       -> Application a0
       -> IO ()
runOld macroName =
  method0 "RunOld"
          [inString macroName]

goForward :: Application a0
          -> IO ()
goForward =
  method0 "GoForward"
          []

move :: Int32
     -> Int32
     -> Application a0
     -> IO ()
move left top =
  method0 "Move"
          [ inInt32 left
          , inInt32 top
          ]

resize :: Int32
       -> Int32
       -> Application a0
       -> IO ()
resize width height =
  method0 "Resize"
          [ inInt32 width
          , inInt32 height
          ]

inchesToPoints :: Float
               -> Application a0
               -> IO Float
inchesToPoints inches =
  function1 "InchesToPoints"
            [inFloat inches]
            outFloat

centimetersToPoints :: Float
                    -> Application a0
                    -> IO Float
centimetersToPoints centimeters =
  function1 "CentimetersToPoints"
            [inFloat centimeters]
            outFloat

millimetersToPoints :: Float
                    -> Application a0
                    -> IO Float
millimetersToPoints millimeters =
  function1 "MillimetersToPoints"
            [inFloat millimeters]
            outFloat

picasToPoints :: Float
              -> Application a0
              -> IO Float
picasToPoints picas =
  function1 "PicasToPoints"
            [inFloat picas]
            outFloat

linesToPoints :: Float
              -> Application a0
              -> IO Float
linesToPoints lines =
  function1 "LinesToPoints"
            [inFloat lines]
            outFloat

pointsToInches :: Float
               -> Application a0
               -> IO Float
pointsToInches points =
  function1 "PointsToInches"
            [inFloat points]
            outFloat

pointsToCentimeters :: Float
                    -> Application a0
                    -> IO Float
pointsToCentimeters points =
  function1 "PointsToCentimeters"
            [inFloat points]
            outFloat

pointsToMillimeters :: Float
                    -> Application a0
                    -> IO Float
pointsToMillimeters points =
  function1 "PointsToMillimeters"
            [inFloat points]
            outFloat

pointsToPicas :: Float
              -> Application a0
              -> IO Float
pointsToPicas points =
  function1 "PointsToPicas"
            [inFloat points]
            outFloat

pointsToLines :: Float
              -> Application a0
              -> IO Float
pointsToLines points =
  function1 "PointsToLines"
            [inFloat points]
            outFloat

activate :: Application a0
         -> IO ()
activate =
  method0 "Activate"
          []

pointsToPixels :: (Variant a1)
               => Float
               -> a1
               -> Application a0
               -> IO Float
pointsToPixels points fVertical =
  function1 "PointsToPixels"
            [ inFloat points
            , inVariant fVertical
            ]
            outFloat

pixelsToPoints :: (Variant a1)
               => Float
               -> a1
               -> Application a0
               -> IO Float
pixelsToPoints pixels fVertical =
  function1 "PixelsToPoints"
            [ inFloat pixels
            , inVariant fVertical
            ]
            outFloat

keyboardLatin :: Application a0
              -> IO ()
keyboardLatin =
  method0 "KeyboardLatin"
          []

keyboardBidi :: Application a0
             -> IO ()
keyboardBidi =
  method0 "KeyboardBidi"
          []

toggleKeyboard :: Application a0
               -> IO ()
toggleKeyboard =
  method0 "ToggleKeyboard"
          []

keyboard :: (Variant a1)
         => a1
         -> Application a0
         -> IO Int32
keyboard langId =
  function1 "Keyboard"
            [inDefaultValue (inInt32 0) inVariant langId]
            outInt32

productCode :: Application a0
            -> IO String
productCode =
  function1 "ProductCode"
            []
            outString

defaultWebOptions :: Application a0
                  -> IO (DefaultWebOptions ())
defaultWebOptions =
  function1 "DefaultWebOptions"
            []
            outIUnknown

discussionSupport :: (Variant a1, Variant a2, Variant a3)
                  => a1
                  -> a2
                  -> a3
                  -> Application a0
                  -> IO ()
discussionSupport range cid piCSE =
  method0 "DiscussionSupport"
          [ inVariant range
          , inVariant cid
          , inVariant piCSE
          ]

setDefaultTheme :: String
                -> WdDocumentMedium
                -> Application a0
                -> IO ()
setDefaultTheme name documentType =
  method0 "SetDefaultTheme"
          [ inString name
          , inEnum documentType
          ]

getDefaultTheme :: WdDocumentMedium
                -> Application a0
                -> IO String
getDefaultTheme documentType =
  function1 "GetDefaultTheme"
            [inEnum documentType]
            outString

getEmailOptions :: Application a0
                -> IO (EmailOptions ())
getEmailOptions =
  propertyGet "EmailOptions"
              []
              outIUnknown

getLanguage :: Application a0
            -> IO MsoLanguageID
getLanguage iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoLanguageID)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getLanguage methPtr iptr prop) 184 iptr
    doThenFree free readMsoLanguageID prop

foreign import stdcall "dynamic" prim_Word_getLanguage :: Ptr () -> Ptr () -> Ptr MsoLanguageID -> IO Int32
getCOMAddIns :: Application a0
             -> IO (Maybe COMAddIns)
getCOMAddIns iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCOMAddIns methPtr iptr prop) 185 iptr
    doThenFree free (readunique readCOMAddIns) prop

foreign import stdcall "dynamic" prim_Word_getCOMAddIns :: Ptr () -> Ptr () -> Ptr (Ptr COMAddIns) -> IO Int32
getCheckLanguage :: Application a0
                 -> IO Bool
getCheckLanguage =
  propertyGet "CheckLanguage"
              []
              outBool

setCheckLanguage :: Bool
                 -> Application a0
                 -> IO ()
setCheckLanguage prop =
  propertySet "CheckLanguage"
              [inBool prop]

getLanguageSettings :: Application a0
                    -> IO (Maybe LanguageSettings)
getLanguageSettings iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getLanguageSettings methPtr iptr prop) 188 iptr
    doThenFree free (readunique readLanguageSettings) prop

foreign import stdcall "dynamic" prim_Word_getLanguageSettings :: Ptr () -> Ptr () -> Ptr (Ptr LanguageSettings) -> IO Int32
getDummy1 :: Application a0
          -> IO Bool
getDummy1 =
  propertyGet "Dummy1"
              []
              outBool

getAnswerWizard :: Application a0
                -> IO (Maybe AnswerWizard)
getAnswerWizard iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAnswerWizard methPtr iptr prop) 190 iptr
    doThenFree free (readunique readAnswerWizard) prop

foreign import stdcall "dynamic" prim_Word_getAnswerWizard :: Ptr () -> Ptr () -> Ptr (Ptr AnswerWizard) -> IO Int32
getFeatureInstall :: Application a0
                  -> IO MsoFeatureInstall
getFeatureInstall iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoFeatureInstall)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFeatureInstall methPtr iptr prop) 191 iptr
    doThenFree free readMsoFeatureInstall prop

foreign import stdcall "dynamic" prim_Word_getFeatureInstall :: Ptr () -> Ptr () -> Ptr MsoFeatureInstall -> IO Int32
setFeatureInstall :: MsoFeatureInstall
                  -> Application a0
                  -> IO ()
setFeatureInstall prop iptr =
  do
    prop <- marshallMsoFeatureInstall prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFeatureInstall methPtr iptr prop) 192 iptr

foreign import stdcall "prim_Word_setFeatureInstall" prim_Word_setFeatureInstall :: Ptr () -> Ptr () -> Ptr () -> IO Int32
printOut2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> a15
             -> a16
             -> a17
             -> a18
             -> a19
             -> Application a0
             -> IO ()
printOut2000 background append range outputFileName from to item copies pages pageType printToFile collate fileName activePrinterMacGX manualDuplexPrint printZoomColumn printZoomRow printZoomPaperWidth printZoomPaperHeight =
  method0 "PrintOut2000"
          [ inVariant background
          , inVariant append
          , inVariant range
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant fileName
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          , inVariant printZoomColumn
          , inVariant printZoomRow
          , inVariant printZoomPaperWidth
          , inVariant printZoomPaperHeight
          ]

run :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28, Variant a29, Variant a30, Variant a31)
    => String
    -> a2
    -> a3
    -> a4
    -> a5
    -> a6
    -> a7
    -> a8
    -> a9
    -> a10
    -> a11
    -> a12
    -> a13
    -> a14
    -> a15
    -> a16
    -> a17
    -> a18
    -> a19
    -> a20
    -> a21
    -> a22
    -> a23
    -> a24
    -> a25
    -> a26
    -> a27
    -> a28
    -> a29
    -> a30
    -> a31
    -> Application a0
    -> IO a1
run macroName varg1 varg2 varg3 varg4 varg5 varg6 varg7 varg8 varg9 varg10 varg11 varg12 varg13 varg14 varg15 varg16 varg17 varg18 varg19 varg20 varg21 varg22 varg23 varg24 varg25 varg26 varg27 varg28 varg29 varg30 =
  function1 "Run"
            [ inString macroName
            , inVariant varg1
            , inVariant varg2
            , inVariant varg3
            , inVariant varg4
            , inVariant varg5
            , inVariant varg6
            , inVariant varg7
            , inVariant varg8
            , inVariant varg9
            , inVariant varg10
            , inVariant varg11
            , inVariant varg12
            , inVariant varg13
            , inVariant varg14
            , inVariant varg15
            , inVariant varg16
            , inVariant varg17
            , inVariant varg18
            , inVariant varg19
            , inVariant varg20
            , inVariant varg21
            , inVariant varg22
            , inVariant varg23
            , inVariant varg24
            , inVariant varg25
            , inVariant varg26
            , inVariant varg27
            , inVariant varg28
            , inVariant varg29
            , inVariant varg30
            ]
            outVariant

printOut :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> Application a0
         -> IO ()
printOut background append range outputFileName from to item copies pages pageType printToFile collate fileName activePrinterMacGX manualDuplexPrint printZoomColumn printZoomRow printZoomPaperWidth printZoomPaperHeight =
  method0 "PrintOut"
          [ inVariant background
          , inVariant append
          , inVariant range
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant fileName
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          , inVariant printZoomColumn
          , inVariant printZoomRow
          , inVariant printZoomPaperWidth
          , inVariant printZoomPaperHeight
          ]

getAutomationSecurity :: Application a0
                      -> IO MsoAutomationSecurity
getAutomationSecurity iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoAutomationSecurity)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAutomationSecurity methPtr iptr prop) 196 iptr
    doThenFree free readMsoAutomationSecurity prop

foreign import stdcall "dynamic" prim_Word_getAutomationSecurity :: Ptr () -> Ptr () -> Ptr MsoAutomationSecurity -> IO Int32
setAutomationSecurity :: MsoAutomationSecurity
                      -> Application a0
                      -> IO ()
setAutomationSecurity prop iptr =
  do
    prop <- marshallMsoAutomationSecurity prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAutomationSecurity methPtr iptr prop) 197 iptr

foreign import stdcall "prim_Word_setAutomationSecurity" prim_Word_setAutomationSecurity :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFileDialog :: MsoFileDialogType
              -> Application a0
              -> IO (Maybe FileDialog)
getFileDialog fileDialogType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    fileDialogType <- marshallMsoFileDialogType fileDialogType
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFileDialog methPtr iptr fileDialogType prop) 198 iptr
    doThenFree free (readunique readFileDialog) prop

foreign import stdcall "prim_Word_getFileDialog" prim_Word_getFileDialog :: Ptr () -> Ptr () -> Ptr () -> Ptr (Ptr FileDialog) -> IO Int32
getEmailTemplate :: Application a0
                 -> IO String
getEmailTemplate =
  propertyGet "EmailTemplate"
              []
              outString

setEmailTemplate :: String
                 -> Application a0
                 -> IO ()
setEmailTemplate prop =
  propertySet "EmailTemplate"
              [inString prop]

getShowWindowsInTaskbar :: Application a0
                        -> IO Bool
getShowWindowsInTaskbar =
  propertyGet "ShowWindowsInTaskbar"
              []
              outBool

setShowWindowsInTaskbar :: Bool
                        -> Application a0
                        -> IO ()
setShowWindowsInTaskbar prop =
  propertySet "ShowWindowsInTaskbar"
              [inBool prop]

getNewDocument :: Application a0
               -> IO (Maybe NewFile)
getNewDocument iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getNewDocument methPtr iptr prop) 203 iptr
    doThenFree free (readunique readNewFile) prop

foreign import stdcall "dynamic" prim_Word_getNewDocument :: Ptr () -> Ptr () -> Ptr (Ptr NewFile) -> IO Int32
getShowStartupDialog :: Application a0
                     -> IO Bool
getShowStartupDialog =
  propertyGet "ShowStartupDialog"
              []
              outBool

setShowStartupDialog :: Bool
                     -> Application a0
                     -> IO ()
setShowStartupDialog prop =
  propertySet "ShowStartupDialog"
              [inBool prop]

getAutoCorrectEmail :: Application a0
                    -> IO (AutoCorrect ())
getAutoCorrectEmail =
  propertyGet "AutoCorrectEmail"
              []
              outIUnknown

getTaskPanes :: Application a0
             -> IO (TaskPanes ())
getTaskPanes =
  propertyGet "TaskPanes"
              []
              outIUnknown

getDefaultLegalBlackline :: Application a0
                         -> IO Bool
getDefaultLegalBlackline =
  propertyGet "DefaultLegalBlackline"
              []
              outBool

setDefaultLegalBlackline :: Bool
                         -> Application a0
                         -> IO ()
setDefaultLegalBlackline prop =
  propertySet "DefaultLegalBlackline"
              [inBool prop]

dummy2 :: Application a0
       -> IO Bool
dummy2 =
  function1 "Dummy2"
            []
            outBool

getSmartTagRecognizers :: Application a0
                       -> IO (SmartTagRecognizers ())
getSmartTagRecognizers =
  propertyGet "SmartTagRecognizers"
              []
              outIUnknown

getSmartTagTypes :: Application a0
                 -> IO (SmartTagTypes ())
getSmartTagTypes =
  propertyGet "SmartTagTypes"
              []
              outIUnknown

getXMLNamespaces :: Application a0
                 -> IO (XMLNamespaces ())
getXMLNamespaces =
  propertyGet "XMLNamespaces"
              []
              outIUnknown

putFocusInMailHeader :: Application a0
                     -> IO ()
putFocusInMailHeader =
  method0 "PutFocusInMailHeader"
          []

getArbitraryXMLSupportAvailable :: Application a0
                                -> IO Bool
getArbitraryXMLSupportAvailable =
  propertyGet "ArbitraryXMLSupportAvailable"
              []
              outBool

getBuildFull :: Application a0
             -> IO String
getBuildFull =
  propertyGet "BuildFull"
              []
              outString

getBuildFeatureCrew :: Application a0
                    -> IO String
getBuildFeatureCrew =
  propertyGet "BuildFeatureCrew"
              []
              outString

loadMasterList :: String
               -> Application a0
               -> IO ()
loadMasterList fileName =
  method0 "LoadMasterList"
          [inString fileName]

compareDocuments :: Document
                 -> Document
                 -> WdCompareDestination
                 -> WdGranularity
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> Bool
                 -> String
                 -> Bool
                 -> Application a0
                 -> IO (Maybe Document)
compareDocuments originalDocument revisedDocument destination granularity compareFormatting compareCaseChanges compareWhitespace compareTables compareHeaders compareFootnotes compareTextboxes compareFields compareComments compareMoves revisedAuthor ignoreAllComparisonWarnings iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    originalDocument <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument originalDocument
    revisedDocument <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument revisedDocument
    destination <- marshallEnum32 destination
    granularity <- marshallEnum32 granularity
    compareFormatting <- marshallVARIANT_BOOL compareFormatting
    compareCaseChanges <- marshallVARIANT_BOOL compareCaseChanges
    compareWhitespace <- marshallVARIANT_BOOL compareWhitespace
    compareTables <- marshallVARIANT_BOOL compareTables
    compareHeaders <- marshallVARIANT_BOOL compareHeaders
    compareFootnotes <- marshallVARIANT_BOOL compareFootnotes
    compareTextboxes <- marshallVARIANT_BOOL compareTextboxes
    compareFields <- marshallVARIANT_BOOL compareFields
    compareComments <- marshallVARIANT_BOOL compareComments
    compareMoves <- marshallVARIANT_BOOL compareMoves
    revisedAuthor <- marshallBSTR revisedAuthor
    ignoreAllComparisonWarnings <- marshallVARIANT_BOOL ignoreAllComparisonWarnings
    invokeAndCheck (\ methPtr iptr -> prim_Word_compareDocuments methPtr iptr originalDocument revisedDocument destination granularity compareFormatting compareCaseChanges compareWhitespace compareTables compareHeaders compareFootnotes compareTextboxes compareFields compareComments compareMoves revisedAuthor ignoreAllComparisonWarnings prop) 219 iptr
    free originalDocument
    free revisedDocument
    freeBSTR revisedAuthor
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_compareDocuments :: Ptr () -> Ptr () -> Ptr Document -> Ptr Document -> Int32 -> Int32 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Ptr String -> Int16 -> Ptr (Ptr Document) -> IO Int32
mergeDocuments :: Document
               -> Document
               -> WdCompareDestination
               -> WdGranularity
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> Bool
               -> String
               -> String
               -> WdMergeFormatFrom
               -> Application a0
               -> IO (Maybe Document)
mergeDocuments originalDocument revisedDocument destination granularity compareFormatting compareCaseChanges compareWhitespace compareTables compareHeaders compareFootnotes compareTextboxes compareFields compareComments compareMoves originalAuthor revisedAuthor formatFrom iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    originalDocument <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument originalDocument
    revisedDocument <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument revisedDocument
    destination <- marshallEnum32 destination
    granularity <- marshallEnum32 granularity
    compareFormatting <- marshallVARIANT_BOOL compareFormatting
    compareCaseChanges <- marshallVARIANT_BOOL compareCaseChanges
    compareWhitespace <- marshallVARIANT_BOOL compareWhitespace
    compareTables <- marshallVARIANT_BOOL compareTables
    compareHeaders <- marshallVARIANT_BOOL compareHeaders
    compareFootnotes <- marshallVARIANT_BOOL compareFootnotes
    compareTextboxes <- marshallVARIANT_BOOL compareTextboxes
    compareFields <- marshallVARIANT_BOOL compareFields
    compareComments <- marshallVARIANT_BOOL compareComments
    compareMoves <- marshallVARIANT_BOOL compareMoves
    originalAuthor <- marshallBSTR originalAuthor
    revisedAuthor <- marshallBSTR revisedAuthor
    formatFrom <- marshallEnum32 formatFrom
    invokeAndCheck (\ methPtr iptr -> prim_Word_mergeDocuments methPtr iptr originalDocument revisedDocument destination granularity compareFormatting compareCaseChanges compareWhitespace compareTables compareHeaders compareFootnotes compareTextboxes compareFields compareComments compareMoves originalAuthor revisedAuthor formatFrom prop) 220 iptr
    free originalDocument
    free revisedDocument
    freeBSTR originalAuthor
    freeBSTR revisedAuthor
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_mergeDocuments :: Ptr () -> Ptr () -> Ptr Document -> Ptr Document -> Int32 -> Int32 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Int16 -> Ptr String -> Ptr String -> Int32 -> Ptr (Ptr Document) -> IO Int32
getBibliography :: Application a0
                -> IO (Bibliography ())
getBibliography =
  propertyGet "Bibliography"
              []
              outIUnknown

getShowStylePreviews :: Application a0
                     -> IO Bool
getShowStylePreviews =
  propertyGet "ShowStylePreviews"
              []
              outBool

setShowStylePreviews :: Bool
                     -> Application a0
                     -> IO ()
setShowStylePreviews prop =
  propertySet "ShowStylePreviews"
              [inBool prop]

getRestrictLinkedStyles :: Application a0
                        -> IO Bool
getRestrictLinkedStyles =
  propertyGet "RestrictLinkedStyles"
              []
              outBool

setRestrictLinkedStyles :: Bool
                        -> Application a0
                        -> IO ()
setRestrictLinkedStyles prop =
  propertySet "RestrictLinkedStyles"
              [inBool prop]

getOMathAutoCorrect :: Application a0
                    -> IO (OMathAutoCorrect ())
getOMathAutoCorrect =
  propertyGet "OMathAutoCorrect"
              []
              outIUnknown

getDisplayDocumentInformationPanel :: Application a0
                                   -> IO Bool
getDisplayDocumentInformationPanel =
  propertyGet "DisplayDocumentInformationPanel"
              []
              outBool

setDisplayDocumentInformationPanel :: Bool
                                   -> Application a0
                                   -> IO ()
setDisplayDocumentInformationPanel prop =
  propertySet "DisplayDocumentInformationPanel"
              [inBool prop]

getAssistance :: Application a0
              -> IO (Maybe IAssistance)
getAssistance iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAssistance methPtr iptr prop) 229 iptr
    doThenFree free (readunique readIAssistance) prop

foreign import stdcall "dynamic" prim_Word_getAssistance :: Ptr () -> Ptr () -> Ptr (Ptr IAssistance) -> IO Int32
getOpenAttachmentsInFullScreen :: Application a0
                               -> IO Bool
getOpenAttachmentsInFullScreen =
  propertyGet "OpenAttachmentsInFullScreen"
              []
              outBool

setOpenAttachmentsInFullScreen :: Bool
                               -> Application a0
                               -> IO ()
setOpenAttachmentsInFullScreen prop =
  propertySet "OpenAttachmentsInFullScreen"
              [inBool prop]

getActiveEncryptionSession :: Application a0
                           -> IO Int32
getActiveEncryptionSession =
  propertyGet "ActiveEncryptionSession"
              []
              outInt32

getDontResetInsertionPointProperties :: Application a0
                                     -> IO Bool
getDontResetInsertionPointProperties =
  propertyGet "DontResetInsertionPointProperties"
              []
              outBool

setDontResetInsertionPointProperties :: Bool
                                     -> Application a0
                                     -> IO ()
setDontResetInsertionPointProperties prop =
  propertySet "DontResetInsertionPointProperties"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface _Global
-- 
-- --------------------------------------------------
data Global_ a = Global__ 
type Global a = IDispatch (Global_ a)
iidGlobal :: IID (Global ())
iidGlobal = mkIID "{000209B9-0000-0000-C000-000000000046}"

getApplication0 :: Global a0
                -> IO (Maybe Application)
getApplication0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator0 :: Global a0
            -> IO Int32
getCreator0 =
  propertyGet "Creator"
              []
              outInt32

getParent0 :: Global a0
           -> IO (IDispatch ())
getParent0 =
  propertyGet "Parent"
              []
              outIDispatch

getName0 :: Global a0
         -> IO String
getName0 =
  propertyGet "Name"
              []
              outString

getDocuments0 :: Global a0
              -> IO (Documents ())
getDocuments0 =
  propertyGet "Documents"
              []
              outIUnknown

getWindows0 :: Global a0
            -> IO (Windows ())
getWindows0 =
  propertyGet "Windows"
              []
              outIUnknown

getActiveDocument0 :: Global a0
                   -> IO (Maybe Document)
getActiveDocument0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 13 iptr
    doThenFree free (readunique readDocument) prop

getActiveWindow0 :: Global a0
                 -> IO (Window ())
getActiveWindow0 =
  propertyGet "ActiveWindow"
              []
              outIUnknown

getSelection0 :: Global a0
              -> IO (Selection ())
getSelection0 =
  propertyGet "Selection"
              []
              outIUnknown

getWordBasic0 :: Global a0
              -> IO (IDispatch ())
getWordBasic0 =
  propertyGet "WordBasic"
              []
              outIDispatch

getPrintPreview0 :: Global a0
                 -> IO Bool
getPrintPreview0 =
  propertyGet "PrintPreview"
              []
              outBool

setPrintPreview0 :: Bool
                 -> Global a0
                 -> IO ()
setPrintPreview0 prop =
  propertySet "PrintPreview"
              [inBool prop]

getRecentFiles0 :: Global a0
                -> IO (RecentFiles ())
getRecentFiles0 =
  propertyGet "RecentFiles"
              []
              outIUnknown

getNormalTemplate0 :: Global a0
                   -> IO (Template ())
getNormalTemplate0 =
  propertyGet "NormalTemplate"
              []
              outIUnknown

getSystem0 :: Global a0
           -> IO (System ())
getSystem0 =
  propertyGet "System"
              []
              outIUnknown

getAutoCorrect0 :: Global a0
                -> IO (AutoCorrect ())
getAutoCorrect0 =
  propertyGet "AutoCorrect"
              []
              outIUnknown

getFontNames0 :: Global a0
              -> IO (FontNames ())
getFontNames0 =
  propertyGet "FontNames"
              []
              outIUnknown

getLandscapeFontNames0 :: Global a0
                       -> IO (FontNames ())
getLandscapeFontNames0 =
  propertyGet "LandscapeFontNames"
              []
              outIUnknown

getPortraitFontNames0 :: Global a0
                      -> IO (FontNames ())
getPortraitFontNames0 =
  propertyGet "PortraitFontNames"
              []
              outIUnknown

getLanguages0 :: Global a0
              -> IO (Languages ())
getLanguages0 =
  propertyGet "Languages"
              []
              outIUnknown

getAssistant0 :: Global a0
              -> IO (Maybe Assistant)
getAssistant0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAssistant methPtr iptr prop) 27 iptr
    doThenFree free (readunique readAssistant) prop

getFileConverters0 :: Global a0
                   -> IO (FileConverters ())
getFileConverters0 =
  propertyGet "FileConverters"
              []
              outIUnknown

getDialogs0 :: Global a0
            -> IO (Dialogs ())
getDialogs0 =
  propertyGet "Dialogs"
              []
              outIUnknown

getCaptionLabels0 :: Global a0
                  -> IO (CaptionLabels ())
getCaptionLabels0 =
  propertyGet "CaptionLabels"
              []
              outIUnknown

getAutoCaptions0 :: Global a0
                 -> IO (AutoCaptions ())
getAutoCaptions0 =
  propertyGet "AutoCaptions"
              []
              outIUnknown

getAddIns0 :: Global a0
           -> IO (AddIns ())
getAddIns0 =
  propertyGet "AddIns"
              []
              outIUnknown

getTasks0 :: Global a0
          -> IO (Tasks ())
getTasks0 =
  propertyGet "Tasks"
              []
              outIUnknown

getMacroContainer0 :: Global a0
                   -> IO (IDispatch ())
getMacroContainer0 =
  propertyGet "MacroContainer"
              []
              outIDispatch

getCommandBars0 :: Global a0
                -> IO (Maybe CommandBars)
getCommandBars0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCommandBars methPtr iptr prop) 35 iptr
    doThenFree free (readunique readCommandBars) prop

getSynonymInfo0 :: (Variant a1)
                => String
                -> a1
                -> Global a0
                -> IO (SynonymInfo ())
getSynonymInfo0 word languageID =
  propertyGet "SynonymInfo"
              [ inString word
              , inVariant languageID
              ]
              outIUnknown

getVBE0 :: Global a0
        -> IO (Maybe VBE)
getVBE0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getVBE methPtr iptr prop) 37 iptr
    doThenFree free (readunique readVBE) prop

getListGalleries0 :: Global a0
                  -> IO (ListGalleries ())
getListGalleries0 =
  propertyGet "ListGalleries"
              []
              outIUnknown

getActivePrinter0 :: Global a0
                  -> IO String
getActivePrinter0 =
  propertyGet "ActivePrinter"
              []
              outString

setActivePrinter0 :: String
                  -> Global a0
                  -> IO ()
setActivePrinter0 prop =
  propertySet "ActivePrinter"
              [inString prop]

getTemplates0 :: Global a0
              -> IO (Templates ())
getTemplates0 =
  propertyGet "Templates"
              []
              outIUnknown

getCustomizationContext0 :: Global a0
                         -> IO (IDispatch ())
getCustomizationContext0 =
  propertyGet "CustomizationContext"
              []
              outIDispatch

setCustomizationContext0 :: IDispatch a1
                         -> Global a0
                         -> IO ()
setCustomizationContext0 prop =
  propertySet "CustomizationContext"
              [inIDispatch prop]

getKeyBindings0 :: Global a0
                -> IO (KeyBindings ())
getKeyBindings0 =
  propertyGet "KeyBindings"
              []
              outIUnknown

getKeysBoundTo0 :: (Variant a1)
                => WdKeyCategory
                -> String
                -> a1
                -> Global a0
                -> IO (KeysBoundTo ())
getKeysBoundTo0 keyCategory command commandParameter =
  propertyGet "KeysBoundTo"
              [ inEnum keyCategory
              , inString command
              , inVariant commandParameter
              ]
              outIUnknown

getFindKey0 :: (Variant a1)
            => Int32
            -> a1
            -> Global a0
            -> IO (KeyBinding ())
getFindKey0 keyCode keyCode2 =
  propertyGet "FindKey"
              [ inInt32 keyCode
              , inVariant keyCode2
              ]
              outIUnknown

getOptions0 :: Global a0
            -> IO (Options ())
getOptions0 =
  propertyGet "Options"
              []
              outIUnknown

getCustomDictionaries0 :: Global a0
                       -> IO (Dictionaries ())
getCustomDictionaries0 =
  propertyGet "CustomDictionaries"
              []
              outIUnknown

setStatusBar0 :: String
              -> Global a0
              -> IO ()
setStatusBar0 rhs =
  propertySet "StatusBar"
              [inString rhs]

getShowVisualBasicEditor0 :: Global a0
                          -> IO Bool
getShowVisualBasicEditor0 =
  propertyGet "ShowVisualBasicEditor"
              []
              outBool

setShowVisualBasicEditor0 :: Bool
                          -> Global a0
                          -> IO ()
setShowVisualBasicEditor0 prop =
  propertySet "ShowVisualBasicEditor"
              [inBool prop]

getIsObjectValid0 :: IDispatch a1
                  -> Global a0
                  -> IO Bool
getIsObjectValid0 object =
  propertyGet "IsObjectValid"
              [inIDispatch object]
              outBool

getHangulHanjaDictionaries0 :: Global a0
                            -> IO (HangulHanjaConversionDictionaries ())
getHangulHanjaDictionaries0 =
  propertyGet "HangulHanjaDictionaries"
              []
              outIUnknown

repeat0 :: (Variant a1)
        => a1
        -> Global a0
        -> IO Bool
repeat0 times =
  function1 "Repeat"
            [inVariant times]
            outBool

dDEExecute0 :: Int32
            -> String
            -> Global a0
            -> IO ()
dDEExecute0 channel command =
  method0 "DDEExecute"
          [ inInt32 channel
          , inString command
          ]

dDEInitiate0 :: String
             -> String
             -> Global a0
             -> IO Int32
dDEInitiate0 app topic =
  function1 "DDEInitiate"
            [ inString app
            , inString topic
            ]
            outInt32

dDEPoke0 :: Int32
         -> String
         -> String
         -> Global a0
         -> IO ()
dDEPoke0 channel item data0 =
  method0 "DDEPoke"
          [ inInt32 channel
          , inString item
          , inString data0
          ]

dDERequest0 :: Int32
            -> String
            -> Global a0
            -> IO String
dDERequest0 channel item =
  function1 "DDERequest"
            [ inInt32 channel
            , inString item
            ]
            outString

dDETerminate0 :: Int32
              -> Global a0
              -> IO ()
dDETerminate0 channel =
  method0 "DDETerminate"
          [inInt32 channel]

dDETerminateAll0 :: Global a0
                 -> IO ()
dDETerminateAll0 =
  method0 "DDETerminateAll"
          []

buildKeyCode0 :: (Variant a1, Variant a2, Variant a3)
              => WdKey
              -> a1
              -> a2
              -> a3
              -> Global a0
              -> IO Int32
buildKeyCode0 arg1 arg2 arg3 arg4 =
  function1 "BuildKeyCode"
            [ inEnum arg1
            , inVariant arg2
            , inVariant arg3
            , inVariant arg4
            ]
            outInt32

keyString0 :: (Variant a1)
           => Int32
           -> a1
           -> Global a0
           -> IO String
keyString0 keyCode keyCode2 =
  function1 "KeyString"
            [ inInt32 keyCode
            , inVariant keyCode2
            ]
            outString

checkSpelling0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
               => String
               -> a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> Global a0
               -> IO Bool
checkSpelling0 word customDictionary ignoreUppercase mainDictionary customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  function1 "CheckSpelling"
            [ inString word
            , inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant mainDictionary
            , inVariant customDictionary2
            , inVariant customDictionary3
            , inVariant customDictionary4
            , inVariant customDictionary5
            , inVariant customDictionary6
            , inVariant customDictionary7
            , inVariant customDictionary8
            , inVariant customDictionary9
            , inVariant customDictionary10
            ]
            outBool

getSpellingSuggestions0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
                        => String
                        -> a1
                        -> a2
                        -> a3
                        -> a4
                        -> a5
                        -> a6
                        -> a7
                        -> a8
                        -> a9
                        -> a10
                        -> a11
                        -> a12
                        -> a13
                        -> Global a0
                        -> IO (SpellingSuggestions ())
getSpellingSuggestions0 word customDictionary ignoreUppercase mainDictionary suggestionMode customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  function1 "GetSpellingSuggestions"
            [ inString word
            , inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant mainDictionary
            , inVariant suggestionMode
            , inVariant customDictionary2
            , inVariant customDictionary3
            , inVariant customDictionary4
            , inVariant customDictionary5
            , inVariant customDictionary6
            , inVariant customDictionary7
            , inVariant customDictionary8
            , inVariant customDictionary9
            , inVariant customDictionary10
            ]
            outIUnknown

help0 :: (Variant a1)
      => a1
      -> Global a0
      -> IO ()
help0 helpType =
  method0 "Help"
          [inVariant helpType]

newWindow0 :: Global a0
           -> IO (Window ())
newWindow0 =
  function1 "NewWindow"
            []
            outIUnknown

cleanString0 :: String
             -> Global a0
             -> IO String
cleanString0 string =
  function1 "CleanString"
            [inString string]
            outString

changeFileOpenDirectory0 :: String
                         -> Global a0
                         -> IO ()
changeFileOpenDirectory0 path =
  method0 "ChangeFileOpenDirectory"
          [inString path]

inchesToPoints0 :: Float
                -> Global a0
                -> IO Float
inchesToPoints0 inches =
  function1 "InchesToPoints"
            [inFloat inches]
            outFloat

centimetersToPoints0 :: Float
                     -> Global a0
                     -> IO Float
centimetersToPoints0 centimeters =
  function1 "CentimetersToPoints"
            [inFloat centimeters]
            outFloat

millimetersToPoints0 :: Float
                     -> Global a0
                     -> IO Float
millimetersToPoints0 millimeters =
  function1 "MillimetersToPoints"
            [inFloat millimeters]
            outFloat

picasToPoints0 :: Float
               -> Global a0
               -> IO Float
picasToPoints0 picas =
  function1 "PicasToPoints"
            [inFloat picas]
            outFloat

linesToPoints0 :: Float
               -> Global a0
               -> IO Float
linesToPoints0 lines =
  function1 "LinesToPoints"
            [inFloat lines]
            outFloat

pointsToInches0 :: Float
                -> Global a0
                -> IO Float
pointsToInches0 points =
  function1 "PointsToInches"
            [inFloat points]
            outFloat

pointsToCentimeters0 :: Float
                     -> Global a0
                     -> IO Float
pointsToCentimeters0 points =
  function1 "PointsToCentimeters"
            [inFloat points]
            outFloat

pointsToMillimeters0 :: Float
                     -> Global a0
                     -> IO Float
pointsToMillimeters0 points =
  function1 "PointsToMillimeters"
            [inFloat points]
            outFloat

pointsToPicas0 :: Float
               -> Global a0
               -> IO Float
pointsToPicas0 points =
  function1 "PointsToPicas"
            [inFloat points]
            outFloat

pointsToLines0 :: Float
               -> Global a0
               -> IO Float
pointsToLines0 points =
  function1 "PointsToLines"
            [inFloat points]
            outFloat

pointsToPixels0 :: (Variant a1)
                => Float
                -> a1
                -> Global a0
                -> IO Float
pointsToPixels0 points fVertical =
  function1 "PointsToPixels"
            [ inFloat points
            , inVariant fVertical
            ]
            outFloat

pixelsToPoints0 :: (Variant a1)
                => Float
                -> a1
                -> Global a0
                -> IO Float
pixelsToPoints0 pixels fVertical =
  function1 "PixelsToPoints"
            [ inFloat pixels
            , inVariant fVertical
            ]
            outFloat

getLanguageSettings0 :: Global a0
                     -> IO (Maybe LanguageSettings)
getLanguageSettings0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getLanguageSettings methPtr iptr prop) 81 iptr
    doThenFree free (readunique readLanguageSettings) prop

getAnswerWizard0 :: Global a0
                 -> IO (Maybe AnswerWizard)
getAnswerWizard0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAnswerWizard methPtr iptr prop) 82 iptr
    doThenFree free (readunique readAnswerWizard) prop

getAutoCorrectEmail0 :: Global a0
                     -> IO (AutoCorrect ())
getAutoCorrectEmail0 =
  propertyGet "AutoCorrectEmail"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface FontNames
-- 
-- --------------------------------------------------
data FontNames_ a = FontNames__ 
type FontNames a = IDispatch (FontNames_ a)
iidFontNames :: IID (FontNames ())
iidFontNames = mkIID "{0002096F-0000-0000-C000-000000000046}"

getNewEnum :: FontNames a0
           -> IO (IUnknown ())
getNewEnum =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount :: FontNames a0
         -> IO Int32
getCount =
  propertyGet "Count"
              []
              outInt32

getApplication1 :: FontNames a0
                -> IO (Maybe Application)
getApplication1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator1 :: FontNames a0
            -> IO Int32
getCreator1 =
  propertyGet "Creator"
              []
              outInt32

getParent1 :: FontNames a0
           -> IO (IDispatch ())
getParent1 =
  propertyGet "Parent"
              []
              outIDispatch

item :: Int32
     -> FontNames a0
     -> IO String
item index =
  function1 "Item"
            [inInt32 index]
            outString

-- --------------------------------------------------
-- 
-- interface Languages
-- 
-- --------------------------------------------------
data Languages_ a = Languages__ 
type Languages a = IDispatch (Languages_ a)
iidLanguages :: IID (Languages ())
iidLanguages = mkIID "{0002096E-0000-0000-C000-000000000046}"

getNewEnum0 :: Languages a0
            -> IO (IUnknown ())
getNewEnum0 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount0 :: Languages a0
          -> IO Int32
getCount0 =
  propertyGet "Count"
              []
              outInt32

getApplication2 :: Languages a0
                -> IO (Maybe Application)
getApplication2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator2 :: Languages a0
            -> IO Int32
getCreator2 =
  propertyGet "Creator"
              []
              outInt32

getParent2 :: Languages a0
           -> IO (IDispatch ())
getParent2 =
  propertyGet "Parent"
              []
              outIDispatch

item0 :: (Variant a1)
      => a1
      -> Languages a0
      -> IO (Language ())
item0 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Language
-- 
-- --------------------------------------------------
data Language_ a = Language__ 
type Language a = IDispatch (Language_ a)
iidLanguage :: IID (Language ())
iidLanguage = mkIID "{0002096D-0000-0000-C000-000000000046}"

getApplication3 :: Language a0
                -> IO (Maybe Application)
getApplication3 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator3 :: Language a0
            -> IO Int32
getCreator3 =
  propertyGet "Creator"
              []
              outInt32

getParent3 :: Language a0
           -> IO (IDispatch ())
getParent3 =
  propertyGet "Parent"
              []
              outIDispatch

getID :: Language a0
      -> IO WdLanguageID
getID =
  propertyGet "ID"
              []
              outEnum

getNameLocal :: Language a0
             -> IO String
getNameLocal =
  propertyGet "NameLocal"
              []
              outString

getName1 :: Language a0
         -> IO String
getName1 =
  propertyGet "Name"
              []
              outString

getActiveGrammarDictionary :: Language a0
                           -> IO (Dictionary ())
getActiveGrammarDictionary =
  propertyGet "ActiveGrammarDictionary"
              []
              outIUnknown

getActiveHyphenationDictionary :: Language a0
                               -> IO (Dictionary ())
getActiveHyphenationDictionary =
  propertyGet "ActiveHyphenationDictionary"
              []
              outIUnknown

getActiveSpellingDictionary :: Language a0
                            -> IO (Dictionary ())
getActiveSpellingDictionary =
  propertyGet "ActiveSpellingDictionary"
              []
              outIUnknown

getActiveThesaurusDictionary :: Language a0
                             -> IO (Dictionary ())
getActiveThesaurusDictionary =
  propertyGet "ActiveThesaurusDictionary"
              []
              outIUnknown

getDefaultWritingStyle :: Language a0
                       -> IO String
getDefaultWritingStyle =
  propertyGet "DefaultWritingStyle"
              []
              outString

setDefaultWritingStyle :: String
                       -> Language a0
                       -> IO ()
setDefaultWritingStyle prop =
  propertySet "DefaultWritingStyle"
              [inString prop]

getWritingStyleList :: (Variant a1)
                    => Language a0
                    -> IO a1
getWritingStyleList =
  propertyGet "WritingStyleList"
              []
              outVariant

getSpellingDictionaryType :: Language a0
                          -> IO WdDictionaryType
getSpellingDictionaryType =
  propertyGet "SpellingDictionaryType"
              []
              outEnum

setSpellingDictionaryType :: WdDictionaryType
                          -> Language a0
                          -> IO ()
setSpellingDictionaryType prop =
  propertySet "SpellingDictionaryType"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Documents
-- 
-- --------------------------------------------------
data Documents_ a = Documents__ 
type Documents a = IDispatch (Documents_ a)
iidDocuments :: IID (Documents ())
iidDocuments = mkIID "{0002096C-0000-0000-C000-000000000046}"

getNewEnum1 :: Documents a0
            -> IO (IUnknown ())
getNewEnum1 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount1 :: Documents a0
          -> IO Int32
getCount1 =
  propertyGet "Count"
              []
              outInt32

getApplication4 :: Documents a0
                -> IO (Maybe Application)
getApplication4 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator4 :: Documents a0
            -> IO Int32
getCreator4 =
  propertyGet "Creator"
              []
              outInt32

getParent4 :: Documents a0
           -> IO (IDispatch ())
getParent4 =
  propertyGet "Parent"
              []
              outIDispatch

item1 :: (Variant a1)
      => a1
      -> Documents a0
      -> IO (Maybe Document)
item1 index iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    index <- marshallVariant index
    invokeAndCheck (\ methPtr iptr -> prim_Word_item1 methPtr iptr index prop) 12 iptr
    free index
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_item1 :: Ptr () -> Ptr () -> VARIANT -> Ptr (Ptr Document) -> IO Int32
close :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> Documents a0
      -> IO ()
close saveChanges originalFormat routeDocument =
  method0 "Close"
          [ inVariant saveChanges
          , inVariant originalFormat
          , inVariant routeDocument
          ]

addOld :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Documents a0
       -> IO (Maybe Document)
addOld template newTemplate iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    template <- marshallVariant template
    newTemplate <- marshallVariant newTemplate
    invokeAndCheck (\ methPtr iptr -> prim_Word_addOld methPtr iptr template newTemplate prop) 14 iptr
    free template
    free newTemplate
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_addOld :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
openOld :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> Documents a0
        -> IO (Maybe Document)
openOld fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    fileName <- marshallVariant fileName
    confirmConversions <- marshallVariant confirmConversions
    readOnly <- marshallVariant readOnly
    addToRecentFiles <- marshallVariant addToRecentFiles
    passwordDocument <- marshallVariant passwordDocument
    passwordTemplate <- marshallVariant passwordTemplate
    revert <- marshallVariant revert
    writePasswordDocument <- marshallVariant writePasswordDocument
    writePasswordTemplate <- marshallVariant writePasswordTemplate
    format <- marshallVariant format
    invokeAndCheck (\ methPtr iptr -> prim_Word_openOld methPtr iptr fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format prop) 15 iptr
    free fileName
    free confirmConversions
    free readOnly
    free addToRecentFiles
    free passwordDocument
    free passwordTemplate
    free revert
    free writePasswordDocument
    free writePasswordTemplate
    free format
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_openOld :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
save :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Documents a0
     -> IO ()
save noPrompt originalFormat =
  method0 "Save"
          [ inVariant noPrompt
          , inVariant originalFormat
          ]

add :: (Variant a1, Variant a2, Variant a3, Variant a4)
    => a1
    -> a2
    -> a3
    -> a4
    -> Documents a0
    -> IO (Maybe Document)
add template newTemplate documentType visible iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    template <- marshallVariant template
    newTemplate <- marshallVariant newTemplate
    documentType <- marshallVariant documentType
    visible <- marshallVariant visible
    invokeAndCheck (\ methPtr iptr -> prim_Word_add methPtr iptr template newTemplate documentType visible prop) 17 iptr
    free template
    free newTemplate
    free documentType
    free visible
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_add :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
open2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> Documents a0
         -> IO (Maybe Document)
open2000 fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    fileName <- marshallVariant fileName
    confirmConversions <- marshallVariant confirmConversions
    readOnly <- marshallVariant readOnly
    addToRecentFiles <- marshallVariant addToRecentFiles
    passwordDocument <- marshallVariant passwordDocument
    passwordTemplate <- marshallVariant passwordTemplate
    revert <- marshallVariant revert
    writePasswordDocument <- marshallVariant writePasswordDocument
    writePasswordTemplate <- marshallVariant writePasswordTemplate
    format <- marshallVariant format
    encoding <- marshallVariant encoding
    visible <- marshallVariant visible
    invokeAndCheck (\ methPtr iptr -> prim_Word_open2000 methPtr iptr fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible prop) 18 iptr
    free fileName
    free confirmConversions
    free readOnly
    free addToRecentFiles
    free passwordDocument
    free passwordTemplate
    free revert
    free writePasswordDocument
    free writePasswordTemplate
    free format
    free encoding
    free visible
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_open2000 :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
checkOut :: String
         -> Documents a0
         -> IO ()
checkOut fileName =
  method0 "CheckOut"
          [inString fileName]

canCheckOut :: String
            -> Documents a0
            -> IO Bool
canCheckOut fileName =
  function1 "CanCheckOut"
            [inString fileName]
            outBool

open2002 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> Documents a0
         -> IO (Maybe Document)
open2002 fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible openAndRepair documentDirection noEncodingDialog iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    fileName <- marshallVariant fileName
    confirmConversions <- marshallVariant confirmConversions
    readOnly <- marshallVariant readOnly
    addToRecentFiles <- marshallVariant addToRecentFiles
    passwordDocument <- marshallVariant passwordDocument
    passwordTemplate <- marshallVariant passwordTemplate
    revert <- marshallVariant revert
    writePasswordDocument <- marshallVariant writePasswordDocument
    writePasswordTemplate <- marshallVariant writePasswordTemplate
    format <- marshallVariant format
    encoding <- marshallVariant encoding
    visible <- marshallVariant visible
    openAndRepair <- marshallVariant openAndRepair
    documentDirection <- marshallVariant documentDirection
    noEncodingDialog <- marshallVariant noEncodingDialog
    invokeAndCheck (\ methPtr iptr -> prim_Word_open2002 methPtr iptr fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible openAndRepair documentDirection noEncodingDialog prop) 21 iptr
    free fileName
    free confirmConversions
    free readOnly
    free addToRecentFiles
    free passwordDocument
    free passwordTemplate
    free revert
    free writePasswordDocument
    free writePasswordTemplate
    free format
    free encoding
    free visible
    free openAndRepair
    free documentDirection
    free noEncodingDialog
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_open2002 :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
open :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> Documents a0
     -> IO (Maybe Document)
open fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible openAndRepair documentDirection noEncodingDialog xMLTransform iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    fileName <- marshallVariant fileName
    confirmConversions <- marshallVariant confirmConversions
    readOnly <- marshallVariant readOnly
    addToRecentFiles <- marshallVariant addToRecentFiles
    passwordDocument <- marshallVariant passwordDocument
    passwordTemplate <- marshallVariant passwordTemplate
    revert <- marshallVariant revert
    writePasswordDocument <- marshallVariant writePasswordDocument
    writePasswordTemplate <- marshallVariant writePasswordTemplate
    format <- marshallVariant format
    encoding <- marshallVariant encoding
    visible <- marshallVariant visible
    openAndRepair <- marshallVariant openAndRepair
    documentDirection <- marshallVariant documentDirection
    noEncodingDialog <- marshallVariant noEncodingDialog
    xMLTransform <- marshallVariant xMLTransform
    invokeAndCheck (\ methPtr iptr -> prim_Word_open methPtr iptr fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible openAndRepair documentDirection noEncodingDialog xMLTransform prop) 22 iptr
    free fileName
    free confirmConversions
    free readOnly
    free addToRecentFiles
    free passwordDocument
    free passwordTemplate
    free revert
    free writePasswordDocument
    free writePasswordTemplate
    free format
    free encoding
    free visible
    free openAndRepair
    free documentDirection
    free noEncodingDialog
    free xMLTransform
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_open :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
openNoRepairDialog :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
                   => a1
                   -> a2
                   -> a3
                   -> a4
                   -> a5
                   -> a6
                   -> a7
                   -> a8
                   -> a9
                   -> a10
                   -> a11
                   -> a12
                   -> a13
                   -> a14
                   -> a15
                   -> a16
                   -> Documents a0
                   -> IO (Maybe Document)
openNoRepairDialog fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible openAndRepair documentDirection noEncodingDialog xMLTransform iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    fileName <- marshallVariant fileName
    confirmConversions <- marshallVariant confirmConversions
    readOnly <- marshallVariant readOnly
    addToRecentFiles <- marshallVariant addToRecentFiles
    passwordDocument <- marshallVariant passwordDocument
    passwordTemplate <- marshallVariant passwordTemplate
    revert <- marshallVariant revert
    writePasswordDocument <- marshallVariant writePasswordDocument
    writePasswordTemplate <- marshallVariant writePasswordTemplate
    format <- marshallVariant format
    encoding <- marshallVariant encoding
    visible <- marshallVariant visible
    openAndRepair <- marshallVariant openAndRepair
    documentDirection <- marshallVariant documentDirection
    noEncodingDialog <- marshallVariant noEncodingDialog
    xMLTransform <- marshallVariant xMLTransform
    invokeAndCheck (\ methPtr iptr -> prim_Word_open methPtr iptr fileName confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate format encoding visible openAndRepair documentDirection noEncodingDialog xMLTransform prop) 23 iptr
    free fileName
    free confirmConversions
    free readOnly
    free addToRecentFiles
    free passwordDocument
    free passwordTemplate
    free revert
    free writePasswordDocument
    free writePasswordTemplate
    free format
    free encoding
    free visible
    free openAndRepair
    free documentDirection
    free noEncodingDialog
    free xMLTransform
    doThenFree free (readunique readDocument) prop

addBlogDocument :: String
                -> String
                -> String
                -> String
                -> Documents a0
                -> IO (Maybe Document)
addBlogDocument providerID postURL blogName postID iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    providerID <- marshallBSTR providerID
    postURL <- marshallBSTR postURL
    blogName <- marshallBSTR blogName
    postID <- marshallBSTR postID
    invokeAndCheck (\ methPtr iptr -> prim_Word_addBlogDocument methPtr iptr providerID postURL blogName postID prop) 24 iptr
    freeBSTR providerID
    freeBSTR postURL
    freeBSTR blogName
    freeBSTR postID
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_addBlogDocument :: Ptr () -> Ptr () -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr (Ptr Document) -> IO Int32
-- --------------------------------------------------
-- 
-- interface _Document
-- 
-- --------------------------------------------------
data Document_ a = Document__ 
type Document a = IDispatch (Document_ a)
iidDocument :: IID (Document ())
iidDocument = mkIID "{0002096B-0000-0000-C000-000000000046}"

getName2 :: Document a0
         -> IO String
getName2 =
  propertyGet "Name"
              []
              outString

getApplication5 :: Document a0
                -> IO (Maybe Application)
getApplication5 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator5 :: Document a0
            -> IO Int32
getCreator5 =
  propertyGet "Creator"
              []
              outInt32

getParent5 :: Document a0
           -> IO (IDispatch ())
getParent5 =
  propertyGet "Parent"
              []
              outIDispatch

getBuiltInDocumentProperties :: Document a0
                             -> IO (IDispatch ())
getBuiltInDocumentProperties =
  propertyGet "BuiltInDocumentProperties"
              []
              outIDispatch

getCustomDocumentProperties :: Document a0
                            -> IO (IDispatch ())
getCustomDocumentProperties =
  propertyGet "CustomDocumentProperties"
              []
              outIDispatch

getPath0 :: Document a0
         -> IO String
getPath0 =
  propertyGet "Path"
              []
              outString

getBookmarks :: Document a0
             -> IO (Bookmarks ())
getBookmarks =
  propertyGet "Bookmarks"
              []
              outIUnknown

getTables :: Document a0
          -> IO (Tables ())
getTables =
  propertyGet "Tables"
              []
              outIUnknown

getFootnotes :: Document a0
             -> IO (Footnotes ())
getFootnotes =
  propertyGet "Footnotes"
              []
              outIUnknown

getEndnotes :: Document a0
            -> IO (Endnotes ())
getEndnotes =
  propertyGet "Endnotes"
              []
              outIUnknown

getComments :: Document a0
            -> IO (Comments ())
getComments =
  propertyGet "Comments"
              []
              outIUnknown

getType :: Document a0
        -> IO WdDocumentType
getType =
  propertyGet "Type"
              []
              outEnum

getAutoHyphenation :: Document a0
                   -> IO Bool
getAutoHyphenation =
  propertyGet "AutoHyphenation"
              []
              outBool

setAutoHyphenation :: Bool
                   -> Document a0
                   -> IO ()
setAutoHyphenation prop =
  propertySet "AutoHyphenation"
              [inBool prop]

getHyphenateCaps :: Document a0
                 -> IO Bool
getHyphenateCaps =
  propertyGet "HyphenateCaps"
              []
              outBool

setHyphenateCaps :: Bool
                 -> Document a0
                 -> IO ()
setHyphenateCaps prop =
  propertySet "HyphenateCaps"
              [inBool prop]

getHyphenationZone :: Document a0
                   -> IO Int32
getHyphenationZone =
  propertyGet "HyphenationZone"
              []
              outInt32

setHyphenationZone :: Int32
                   -> Document a0
                   -> IO ()
setHyphenationZone prop =
  propertySet "HyphenationZone"
              [inInt32 prop]

getConsecutiveHyphensLimit :: Document a0
                           -> IO Int32
getConsecutiveHyphensLimit =
  propertyGet "ConsecutiveHyphensLimit"
              []
              outInt32

setConsecutiveHyphensLimit :: Int32
                           -> Document a0
                           -> IO ()
setConsecutiveHyphensLimit prop =
  propertySet "ConsecutiveHyphensLimit"
              [inInt32 prop]

getSections :: Document a0
            -> IO (Sections ())
getSections =
  propertyGet "Sections"
              []
              outIUnknown

getParagraphs :: Document a0
              -> IO (Paragraphs ())
getParagraphs =
  propertyGet "Paragraphs"
              []
              outIUnknown

getWords :: Document a0
         -> IO (Words ())
getWords =
  propertyGet "Words"
              []
              outIUnknown

getSentences :: Document a0
             -> IO (Sentences ())
getSentences =
  propertyGet "Sentences"
              []
              outIUnknown

getCharacters :: Document a0
              -> IO (Characters ())
getCharacters =
  propertyGet "Characters"
              []
              outIUnknown

getFields :: Document a0
          -> IO (Fields ())
getFields =
  propertyGet "Fields"
              []
              outIUnknown

getFormFields :: Document a0
              -> IO (FormFields ())
getFormFields =
  propertyGet "FormFields"
              []
              outIUnknown

getStyles :: Document a0
          -> IO (Styles ())
getStyles =
  propertyGet "Styles"
              []
              outIUnknown

getFrames :: Document a0
          -> IO (Frames ())
getFrames =
  propertyGet "Frames"
              []
              outIUnknown

getTablesOfFigures :: Document a0
                   -> IO (TablesOfFigures ())
getTablesOfFigures =
  propertyGet "TablesOfFigures"
              []
              outIUnknown

getVariables :: Document a0
             -> IO (Variables ())
getVariables =
  propertyGet "Variables"
              []
              outIUnknown

getMailMerge :: Document a0
             -> IO (MailMerge ())
getMailMerge =
  propertyGet "MailMerge"
              []
              outIUnknown

getEnvelope :: Document a0
            -> IO (Envelope ())
getEnvelope =
  propertyGet "Envelope"
              []
              outIUnknown

getFullName :: Document a0
            -> IO String
getFullName =
  propertyGet "FullName"
              []
              outString

getRevisions :: Document a0
             -> IO (Revisions ())
getRevisions =
  propertyGet "Revisions"
              []
              outIUnknown

getTablesOfContents :: Document a0
                    -> IO (TablesOfContents ())
getTablesOfContents =
  propertyGet "TablesOfContents"
              []
              outIUnknown

getTablesOfAuthorities :: Document a0
                       -> IO (TablesOfAuthorities ())
getTablesOfAuthorities =
  propertyGet "TablesOfAuthorities"
              []
              outIUnknown

getPageSetup :: Document a0
             -> IO (PageSetup ())
getPageSetup =
  propertyGet "PageSetup"
              []
              outIUnknown

setPageSetup :: PageSetup a1
             -> Document a0
             -> IO ()
setPageSetup prop =
  propertySet "PageSetup"
              [inIUnknown prop]

getWindows1 :: Document a0
            -> IO (Windows ())
getWindows1 =
  propertyGet "Windows"
              []
              outIUnknown

getHasRoutingSlip :: Document a0
                  -> IO Bool
getHasRoutingSlip =
  propertyGet "HasRoutingSlip"
              []
              outBool

setHasRoutingSlip :: Bool
                  -> Document a0
                  -> IO ()
setHasRoutingSlip prop =
  propertySet "HasRoutingSlip"
              [inBool prop]

getRoutingSlip :: Document a0
               -> IO (RoutingSlip ())
getRoutingSlip =
  propertyGet "RoutingSlip"
              []
              outIUnknown

getRouted :: Document a0
          -> IO Bool
getRouted =
  propertyGet "Routed"
              []
              outBool

getTablesOfAuthoritiesCategories :: Document a0
                                 -> IO (TablesOfAuthoritiesCategories ())
getTablesOfAuthoritiesCategories =
  propertyGet "TablesOfAuthoritiesCategories"
              []
              outIUnknown

getIndexes :: Document a0
           -> IO (Indexes ())
getIndexes =
  propertyGet "Indexes"
              []
              outIUnknown

getSaved :: Document a0
         -> IO Bool
getSaved =
  propertyGet "Saved"
              []
              outBool

setSaved :: Bool
         -> Document a0
         -> IO ()
setSaved prop =
  propertySet "Saved"
              [inBool prop]

getContent :: Document a0
           -> IO (Range ())
getContent =
  propertyGet "Content"
              []
              outIUnknown

getActiveWindow1 :: Document a0
                 -> IO (Window ())
getActiveWindow1 =
  propertyGet "ActiveWindow"
              []
              outIUnknown

getKind :: Document a0
        -> IO WdDocumentKind
getKind =
  propertyGet "Kind"
              []
              outEnum

setKind :: WdDocumentKind
        -> Document a0
        -> IO ()
setKind prop =
  propertySet "Kind"
              [inEnum prop]

getReadOnly :: Document a0
            -> IO Bool
getReadOnly =
  propertyGet "ReadOnly"
              []
              outBool

getSubdocuments :: Document a0
                -> IO (Subdocuments ())
getSubdocuments =
  propertyGet "Subdocuments"
              []
              outIUnknown

getIsMasterDocument :: Document a0
                    -> IO Bool
getIsMasterDocument =
  propertyGet "IsMasterDocument"
              []
              outBool

getDefaultTabStop :: Document a0
                  -> IO Float
getDefaultTabStop =
  propertyGet "DefaultTabStop"
              []
              outFloat

setDefaultTabStop :: Float
                  -> Document a0
                  -> IO ()
setDefaultTabStop prop =
  propertySet "DefaultTabStop"
              [inFloat prop]

getEmbedTrueTypeFonts :: Document a0
                      -> IO Bool
getEmbedTrueTypeFonts =
  propertyGet "EmbedTrueTypeFonts"
              []
              outBool

setEmbedTrueTypeFonts :: Bool
                      -> Document a0
                      -> IO ()
setEmbedTrueTypeFonts prop =
  propertySet "EmbedTrueTypeFonts"
              [inBool prop]

getSaveFormsData :: Document a0
                 -> IO Bool
getSaveFormsData =
  propertyGet "SaveFormsData"
              []
              outBool

setSaveFormsData :: Bool
                 -> Document a0
                 -> IO ()
setSaveFormsData prop =
  propertySet "SaveFormsData"
              [inBool prop]

getReadOnlyRecommended :: Document a0
                       -> IO Bool
getReadOnlyRecommended =
  propertyGet "ReadOnlyRecommended"
              []
              outBool

setReadOnlyRecommended :: Bool
                       -> Document a0
                       -> IO ()
setReadOnlyRecommended prop =
  propertySet "ReadOnlyRecommended"
              [inBool prop]

getSaveSubsetFonts :: Document a0
                   -> IO Bool
getSaveSubsetFonts =
  propertyGet "SaveSubsetFonts"
              []
              outBool

setSaveSubsetFonts :: Bool
                   -> Document a0
                   -> IO ()
setSaveSubsetFonts prop =
  propertySet "SaveSubsetFonts"
              [inBool prop]

getCompatibility :: WdCompatibility
                 -> Document a0
                 -> IO Bool
getCompatibility type0 =
  propertyGet "Compatibility"
              [inEnum type0]
              outBool

setCompatibility :: WdCompatibility
                 -> Bool
                 -> Document a0
                 -> IO ()
setCompatibility type0 prop =
  propertySet "Compatibility"
              [ inEnum type0
              , inBool prop
              ]

getStoryRanges :: Document a0
               -> IO (StoryRanges ())
getStoryRanges =
  propertyGet "StoryRanges"
              []
              outIUnknown

getCommandBars1 :: Document a0
                -> IO (Maybe CommandBars)
getCommandBars1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCommandBars methPtr iptr prop) 76 iptr
    doThenFree free (readunique readCommandBars) prop

getIsSubdocument :: Document a0
                 -> IO Bool
getIsSubdocument =
  propertyGet "IsSubdocument"
              []
              outBool

getSaveFormat :: Document a0
              -> IO Int32
getSaveFormat =
  propertyGet "SaveFormat"
              []
              outInt32

getProtectionType :: Document a0
                  -> IO WdProtectionType
getProtectionType =
  propertyGet "ProtectionType"
              []
              outEnum

getHyperlinks :: Document a0
              -> IO (Hyperlinks ())
getHyperlinks =
  propertyGet "Hyperlinks"
              []
              outIUnknown

getShapes :: Document a0
          -> IO (Shapes ())
getShapes =
  propertyGet "Shapes"
              []
              outIUnknown

getListTemplates :: Document a0
                 -> IO (ListTemplates ())
getListTemplates =
  propertyGet "ListTemplates"
              []
              outIUnknown

getLists :: Document a0
         -> IO (Lists ())
getLists =
  propertyGet "Lists"
              []
              outIUnknown

getUpdateStylesOnOpen :: Document a0
                      -> IO Bool
getUpdateStylesOnOpen =
  propertyGet "UpdateStylesOnOpen"
              []
              outBool

setUpdateStylesOnOpen :: Bool
                      -> Document a0
                      -> IO ()
setUpdateStylesOnOpen prop =
  propertySet "UpdateStylesOnOpen"
              [inBool prop]

getAttachedTemplate :: (Variant a1)
                    => Document a0
                    -> IO a1
getAttachedTemplate =
  propertyGet "AttachedTemplate"
              []
              outVariant

setAttachedTemplate :: (Variant a1)
                    => a1
                    -> Document a0
                    -> IO ()
setAttachedTemplate prop =
  propertySet "AttachedTemplate"
              [inVariant prop]

getInlineShapes :: Document a0
                -> IO (InlineShapes ())
getInlineShapes =
  propertyGet "InlineShapes"
              []
              outIUnknown

getBackground :: Document a0
              -> IO (Shape ())
getBackground =
  propertyGet "Background"
              []
              outIUnknown

setBackground :: Shape a1
              -> Document a0
              -> IO ()
setBackground prop =
  propertySet "Background"
              [inIUnknown prop]

getGrammarChecked :: Document a0
                  -> IO Bool
getGrammarChecked =
  propertyGet "GrammarChecked"
              []
              outBool

setGrammarChecked :: Bool
                  -> Document a0
                  -> IO ()
setGrammarChecked prop =
  propertySet "GrammarChecked"
              [inBool prop]

getSpellingChecked :: Document a0
                   -> IO Bool
getSpellingChecked =
  propertyGet "SpellingChecked"
              []
              outBool

setSpellingChecked :: Bool
                   -> Document a0
                   -> IO ()
setSpellingChecked prop =
  propertySet "SpellingChecked"
              [inBool prop]

getShowGrammaticalErrors :: Document a0
                         -> IO Bool
getShowGrammaticalErrors =
  propertyGet "ShowGrammaticalErrors"
              []
              outBool

setShowGrammaticalErrors :: Bool
                         -> Document a0
                         -> IO ()
setShowGrammaticalErrors prop =
  propertySet "ShowGrammaticalErrors"
              [inBool prop]

getShowSpellingErrors :: Document a0
                      -> IO Bool
getShowSpellingErrors =
  propertyGet "ShowSpellingErrors"
              []
              outBool

setShowSpellingErrors :: Bool
                      -> Document a0
                      -> IO ()
setShowSpellingErrors prop =
  propertySet "ShowSpellingErrors"
              [inBool prop]

getVersions :: Document a0
            -> IO (Versions ())
getVersions =
  propertyGet "Versions"
              []
              outIUnknown

getShowSummary :: Document a0
               -> IO Bool
getShowSummary =
  propertyGet "ShowSummary"
              []
              outBool

setShowSummary :: Bool
               -> Document a0
               -> IO ()
setShowSummary prop =
  propertySet "ShowSummary"
              [inBool prop]

getSummaryViewMode :: Document a0
                   -> IO WdSummaryMode
getSummaryViewMode =
  propertyGet "SummaryViewMode"
              []
              outEnum

setSummaryViewMode :: WdSummaryMode
                   -> Document a0
                   -> IO ()
setSummaryViewMode prop =
  propertySet "SummaryViewMode"
              [inEnum prop]

getSummaryLength :: Document a0
                 -> IO Int32
getSummaryLength =
  propertyGet "SummaryLength"
              []
              outInt32

setSummaryLength :: Int32
                 -> Document a0
                 -> IO ()
setSummaryLength prop =
  propertySet "SummaryLength"
              [inInt32 prop]

getPrintFractionalWidths :: Document a0
                         -> IO Bool
getPrintFractionalWidths =
  propertyGet "PrintFractionalWidths"
              []
              outBool

setPrintFractionalWidths :: Bool
                         -> Document a0
                         -> IO ()
setPrintFractionalWidths prop =
  propertySet "PrintFractionalWidths"
              [inBool prop]

getPrintPostScriptOverText :: Document a0
                           -> IO Bool
getPrintPostScriptOverText =
  propertyGet "PrintPostScriptOverText"
              []
              outBool

setPrintPostScriptOverText :: Bool
                           -> Document a0
                           -> IO ()
setPrintPostScriptOverText prop =
  propertySet "PrintPostScriptOverText"
              [inBool prop]

getContainer :: Document a0
             -> IO (IDispatch ())
getContainer =
  propertyGet "Container"
              []
              outIDispatch

getPrintFormsData :: Document a0
                  -> IO Bool
getPrintFormsData =
  propertyGet "PrintFormsData"
              []
              outBool

setPrintFormsData :: Bool
                  -> Document a0
                  -> IO ()
setPrintFormsData prop =
  propertySet "PrintFormsData"
              [inBool prop]

getListParagraphs :: Document a0
                  -> IO (ListParagraphs ())
getListParagraphs =
  propertyGet "ListParagraphs"
              []
              outIUnknown

setPassword :: String
            -> Document a0
            -> IO ()
setPassword rhs =
  propertySet "Password"
              [inString rhs]

setWritePassword :: String
                 -> Document a0
                 -> IO ()
setWritePassword rhs =
  propertySet "WritePassword"
              [inString rhs]

getHasPassword :: Document a0
               -> IO Bool
getHasPassword =
  propertyGet "HasPassword"
              []
              outBool

getWriteReserved :: Document a0
                 -> IO Bool
getWriteReserved =
  propertyGet "WriteReserved"
              []
              outBool

getActiveWritingStyle :: (Variant a1)
                      => a1
                      -> Document a0
                      -> IO String
getActiveWritingStyle languageID =
  propertyGet "ActiveWritingStyle"
              [inVariant languageID]
              outString

setActiveWritingStyle :: (Variant a1)
                      => a1
                      -> String
                      -> Document a0
                      -> IO ()
setActiveWritingStyle languageID prop =
  propertySet "ActiveWritingStyle"
              [ inVariant languageID
              , inString prop
              ]

getUserControl0 :: Document a0
                -> IO Bool
getUserControl0 =
  propertyGet "UserControl"
              []
              outBool

setUserControl :: Bool
               -> Document a0
               -> IO ()
setUserControl prop =
  propertySet "UserControl"
              [inBool prop]

getHasMailer :: Document a0
             -> IO Bool
getHasMailer =
  propertyGet "HasMailer"
              []
              outBool

setHasMailer :: Bool
             -> Document a0
             -> IO ()
setHasMailer prop =
  propertySet "HasMailer"
              [inBool prop]

getMailer :: Document a0
          -> IO (Mailer ())
getMailer =
  propertyGet "Mailer"
              []
              outIUnknown

getReadabilityStatistics :: Document a0
                         -> IO (ReadabilityStatistics ())
getReadabilityStatistics =
  propertyGet "ReadabilityStatistics"
              []
              outIUnknown

getGrammaticalErrors :: Document a0
                     -> IO (ProofreadingErrors ())
getGrammaticalErrors =
  propertyGet "GrammaticalErrors"
              []
              outIUnknown

getSpellingErrors :: Document a0
                  -> IO (ProofreadingErrors ())
getSpellingErrors =
  propertyGet "SpellingErrors"
              []
              outIUnknown

getVBProject :: Document a0
             -> IO (Maybe VBProject)
getVBProject iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getVBProject methPtr iptr prop) 128 iptr
    doThenFree free (readunique readVBProject) prop

foreign import stdcall "dynamic" prim_Word_getVBProject :: Ptr () -> Ptr () -> Ptr (Ptr VBProject) -> IO Int32
getFormsDesign :: Document a0
               -> IO Bool
getFormsDesign =
  propertyGet "FormsDesign"
              []
              outBool

getCodeName :: Document a0
            -> IO String
getCodeName =
  propertyGet "_CodeName"
              []
              outString

setCodeName :: String
            -> Document a0
            -> IO ()
setCodeName prop =
  propertySet "_CodeName"
              [inString prop]

getCodeName0 :: Document a0
             -> IO String
getCodeName0 =
  propertyGet "CodeName"
              []
              outString

getSnapToGrid :: Document a0
              -> IO Bool
getSnapToGrid =
  propertyGet "SnapToGrid"
              []
              outBool

setSnapToGrid :: Bool
              -> Document a0
              -> IO ()
setSnapToGrid prop =
  propertySet "SnapToGrid"
              [inBool prop]

getSnapToShapes :: Document a0
                -> IO Bool
getSnapToShapes =
  propertyGet "SnapToShapes"
              []
              outBool

setSnapToShapes :: Bool
                -> Document a0
                -> IO ()
setSnapToShapes prop =
  propertySet "SnapToShapes"
              [inBool prop]

getGridDistanceHorizontal :: Document a0
                          -> IO Float
getGridDistanceHorizontal =
  propertyGet "GridDistanceHorizontal"
              []
              outFloat

setGridDistanceHorizontal :: Float
                          -> Document a0
                          -> IO ()
setGridDistanceHorizontal prop =
  propertySet "GridDistanceHorizontal"
              [inFloat prop]

getGridDistanceVertical :: Document a0
                        -> IO Float
getGridDistanceVertical =
  propertyGet "GridDistanceVertical"
              []
              outFloat

setGridDistanceVertical :: Float
                        -> Document a0
                        -> IO ()
setGridDistanceVertical prop =
  propertySet "GridDistanceVertical"
              [inFloat prop]

getGridOriginHorizontal :: Document a0
                        -> IO Float
getGridOriginHorizontal =
  propertyGet "GridOriginHorizontal"
              []
              outFloat

setGridOriginHorizontal :: Float
                        -> Document a0
                        -> IO ()
setGridOriginHorizontal prop =
  propertySet "GridOriginHorizontal"
              [inFloat prop]

getGridOriginVertical :: Document a0
                      -> IO Float
getGridOriginVertical =
  propertyGet "GridOriginVertical"
              []
              outFloat

setGridOriginVertical :: Float
                      -> Document a0
                      -> IO ()
setGridOriginVertical prop =
  propertySet "GridOriginVertical"
              [inFloat prop]

getGridSpaceBetweenHorizontalLines :: Document a0
                                   -> IO Int32
getGridSpaceBetweenHorizontalLines =
  propertyGet "GridSpaceBetweenHorizontalLines"
              []
              outInt32

setGridSpaceBetweenHorizontalLines :: Int32
                                   -> Document a0
                                   -> IO ()
setGridSpaceBetweenHorizontalLines prop =
  propertySet "GridSpaceBetweenHorizontalLines"
              [inInt32 prop]

getGridSpaceBetweenVerticalLines :: Document a0
                                 -> IO Int32
getGridSpaceBetweenVerticalLines =
  propertyGet "GridSpaceBetweenVerticalLines"
              []
              outInt32

setGridSpaceBetweenVerticalLines :: Int32
                                 -> Document a0
                                 -> IO ()
setGridSpaceBetweenVerticalLines prop =
  propertySet "GridSpaceBetweenVerticalLines"
              [inInt32 prop]

getGridOriginFromMargin :: Document a0
                        -> IO Bool
getGridOriginFromMargin =
  propertyGet "GridOriginFromMargin"
              []
              outBool

setGridOriginFromMargin :: Bool
                        -> Document a0
                        -> IO ()
setGridOriginFromMargin prop =
  propertySet "GridOriginFromMargin"
              [inBool prop]

getKerningByAlgorithm :: Document a0
                      -> IO Bool
getKerningByAlgorithm =
  propertyGet "KerningByAlgorithm"
              []
              outBool

setKerningByAlgorithm :: Bool
                      -> Document a0
                      -> IO ()
setKerningByAlgorithm prop =
  propertySet "KerningByAlgorithm"
              [inBool prop]

getJustificationMode :: Document a0
                     -> IO WdJustificationMode
getJustificationMode =
  propertyGet "JustificationMode"
              []
              outEnum

setJustificationMode :: WdJustificationMode
                     -> Document a0
                     -> IO ()
setJustificationMode prop =
  propertySet "JustificationMode"
              [inEnum prop]

getFarEastLineBreakLevel :: Document a0
                         -> IO WdFarEastLineBreakLevel
getFarEastLineBreakLevel =
  propertyGet "FarEastLineBreakLevel"
              []
              outEnum

setFarEastLineBreakLevel :: WdFarEastLineBreakLevel
                         -> Document a0
                         -> IO ()
setFarEastLineBreakLevel prop =
  propertySet "FarEastLineBreakLevel"
              [inEnum prop]

getNoLineBreakBefore :: Document a0
                     -> IO String
getNoLineBreakBefore =
  propertyGet "NoLineBreakBefore"
              []
              outString

setNoLineBreakBefore :: String
                     -> Document a0
                     -> IO ()
setNoLineBreakBefore prop =
  propertySet "NoLineBreakBefore"
              [inString prop]

getNoLineBreakAfter :: Document a0
                    -> IO String
getNoLineBreakAfter =
  propertyGet "NoLineBreakAfter"
              []
              outString

setNoLineBreakAfter :: String
                    -> Document a0
                    -> IO ()
setNoLineBreakAfter prop =
  propertySet "NoLineBreakAfter"
              [inString prop]

getTrackRevisions :: Document a0
                  -> IO Bool
getTrackRevisions =
  propertyGet "TrackRevisions"
              []
              outBool

setTrackRevisions :: Bool
                  -> Document a0
                  -> IO ()
setTrackRevisions prop =
  propertySet "TrackRevisions"
              [inBool prop]

getPrintRevisions :: Document a0
                  -> IO Bool
getPrintRevisions =
  propertyGet "PrintRevisions"
              []
              outBool

setPrintRevisions :: Bool
                  -> Document a0
                  -> IO ()
setPrintRevisions prop =
  propertySet "PrintRevisions"
              [inBool prop]

getShowRevisions :: Document a0
                 -> IO Bool
getShowRevisions =
  propertyGet "ShowRevisions"
              []
              outBool

setShowRevisions :: Bool
                 -> Document a0
                 -> IO ()
setShowRevisions prop =
  propertySet "ShowRevisions"
              [inBool prop]

close0 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Document a0
       -> IO ()
close0 saveChanges originalFormat routeDocument =
  method0 "Close"
          [ inVariant saveChanges
          , inVariant originalFormat
          , inVariant routeDocument
          ]

saveAs2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> Document a0
           -> IO ()
saveAs2000 fileName fileFormat lockComments password addToRecentFiles writePassword readOnlyRecommended embedTrueTypeFonts saveNativePictureFormat saveFormsData saveAsAOCELetter =
  method0 "SaveAs2000"
          [ inVariant fileName
          , inVariant fileFormat
          , inVariant lockComments
          , inVariant password
          , inVariant addToRecentFiles
          , inVariant writePassword
          , inVariant readOnlyRecommended
          , inVariant embedTrueTypeFonts
          , inVariant saveNativePictureFormat
          , inVariant saveFormsData
          , inVariant saveAsAOCELetter
          ]

repaginate :: Document a0
           -> IO ()
repaginate =
  method0 "Repaginate"
          []

fitToPages :: Document a0
           -> IO ()
fitToPages =
  method0 "FitToPages"
          []

manualHyphenation :: Document a0
                  -> IO ()
manualHyphenation =
  method0 "ManualHyphenation"
          []

select :: Document a0
       -> IO ()
select =
  method0 "Select"
          []

dataForm :: Document a0
         -> IO ()
dataForm =
  method0 "DataForm"
          []

route :: Document a0
      -> IO ()
route =
  method0 "Route"
          []

save0 :: Document a0
      -> IO ()
save0 =
  method0 "Save"
          []

printOutOld0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> Document a0
             -> IO ()
printOutOld0 background append range outputFileName from to item2 copies pages pageType printToFile collate activePrinterMacGX manualDuplexPrint =
  method0 "PrintOutOld"
          [ inVariant background
          , inVariant append
          , inVariant range
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item2
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          ]

sendMail :: Document a0
         -> IO ()
sendMail =
  method0 "SendMail"
          []

range :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Document a0
      -> IO (Range ())
range start end =
  function1 "Range"
            [ inVariant start
            , inVariant end
            ]
            outIUnknown

runAutoMacro :: WdAutoMacros
             -> Document a0
             -> IO ()
runAutoMacro which =
  method0 "RunAutoMacro"
          [inEnum which]

activate0 :: Document a0
          -> IO ()
activate0 =
  method0 "Activate"
          []

printPreview :: Document a0
             -> IO ()
printPreview =
  method0 "PrintPreview"
          []

goTo :: (Variant a1, Variant a2, Variant a3, Variant a4)
     => a1
     -> a2
     -> a3
     -> a4
     -> Document a0
     -> IO (Range ())
goTo what which count name =
  function1 "GoTo"
            [ inVariant what
            , inVariant which
            , inVariant count
            , inVariant name
            ]
            outIUnknown

undo :: (Variant a1)
     => a1
     -> Document a0
     -> IO Bool
undo times =
  function1 "Undo"
            [inVariant times]
            outBool

redo :: (Variant a1)
     => a1
     -> Document a0
     -> IO Bool
redo times =
  function1 "Redo"
            [inVariant times]
            outBool

computeStatistics :: (Variant a1)
                  => WdStatistic
                  -> a1
                  -> Document a0
                  -> IO Int32
computeStatistics statistic includeFootnotesAndEndnotes =
  function1 "ComputeStatistics"
            [ inEnum statistic
            , inVariant includeFootnotesAndEndnotes
            ]
            outInt32

makeCompatibilityDefault :: Document a0
                         -> IO ()
makeCompatibilityDefault =
  method0 "MakeCompatibilityDefault"
          []

protect2002 :: (Variant a1, Variant a2)
            => WdProtectionType
            -> a1
            -> a2
            -> Document a0
            -> IO ()
protect2002 type0 noReset password =
  method0 "Protect2002"
          [ inEnum type0
          , inVariant noReset
          , inVariant password
          ]

unprotect :: (Variant a1)
          => a1
          -> Document a0
          -> IO ()
unprotect password =
  method0 "Unprotect"
          [inVariant password]

editionOptions :: (Variant a1)
               => WdEditionType
               -> WdEditionOption
               -> String
               -> a1
               -> Document a0
               -> IO ()
editionOptions type0 option name format =
  method0 "EditionOptions"
          [ inEnum type0
          , inEnum option
          , inString name
          , inVariant format
          ]

runLetterWizard :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Document a0
                -> IO ()
runLetterWizard letterContent wizardMode =
  method0 "RunLetterWizard"
          [ inVariant letterContent
          , inVariant wizardMode
          ]

getLetterContent :: Document a0
                 -> IO (Maybe LetterContent)
getLetterContent iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getLetterContent methPtr iptr prop) 191 iptr
    doThenFree free (readunique readLetterContent) prop

foreign import stdcall "dynamic" prim_Word_getLetterContent :: Ptr () -> Ptr () -> Ptr (Ptr LetterContent) -> IO Int32
setLetterContent :: (Variant a1)
                 => a1
                 -> Document a0
                 -> IO ()
setLetterContent letterContent =
  method0 "SetLetterContent"
          [inVariant letterContent]

copyStylesFromTemplate :: String
                       -> Document a0
                       -> IO ()
copyStylesFromTemplate template =
  method0 "CopyStylesFromTemplate"
          [inString template]

updateStyles :: Document a0
             -> IO ()
updateStyles =
  method0 "UpdateStyles"
          []

checkGrammar0 :: Document a0
              -> IO ()
checkGrammar0 =
  method0 "CheckGrammar"
          []

checkSpelling1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> Document a0
               -> IO ()
checkSpelling1 customDictionary ignoreUppercase alwaysSuggest customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  method0 "CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant customDictionary2
          , inVariant customDictionary3
          , inVariant customDictionary4
          , inVariant customDictionary5
          , inVariant customDictionary6
          , inVariant customDictionary7
          , inVariant customDictionary8
          , inVariant customDictionary9
          , inVariant customDictionary10
          ]

followHyperlink :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> a7
                -> Document a0
                -> IO ()
followHyperlink address subAddress newWindow1 addHistory extraInfo method headerInfo =
  method0 "FollowHyperlink"
          [ inVariant address
          , inVariant subAddress
          , inVariant newWindow1
          , inVariant addHistory
          , inVariant extraInfo
          , inVariant method
          , inVariant headerInfo
          ]

addToFavorites :: Document a0
               -> IO ()
addToFavorites =
  method0 "AddToFavorites"
          []

reload :: Document a0
       -> IO ()
reload =
  method0 "Reload"
          []

autoSummarize :: (Variant a1, Variant a2, Variant a3)
              => a1
              -> a2
              -> a3
              -> Document a0
              -> IO (Range ())
autoSummarize length mode updateProperties =
  function1 "AutoSummarize"
            [ inVariant length
            , inVariant mode
            , inVariant updateProperties
            ]
            outIUnknown

removeNumbers :: (Variant a1)
              => a1
              -> Document a0
              -> IO ()
removeNumbers numberType =
  method0 "RemoveNumbers"
          [inVariant numberType]

convertNumbersToText :: (Variant a1)
                     => a1
                     -> Document a0
                     -> IO ()
convertNumbersToText numberType =
  method0 "ConvertNumbersToText"
          [inVariant numberType]

countNumberedItems :: (Variant a1, Variant a2)
                   => a1
                   -> a2
                   -> Document a0
                   -> IO Int32
countNumberedItems numberType level =
  function1 "CountNumberedItems"
            [ inVariant numberType
            , inVariant level
            ]
            outInt32

post :: Document a0
     -> IO ()
post =
  method0 "Post"
          []

toggleFormsDesign :: Document a0
                  -> IO ()
toggleFormsDesign =
  method0 "ToggleFormsDesign"
          []

compare2000 :: String
            -> Document a0
            -> IO ()
compare2000 name =
  method0 "Compare2000"
          [inString name]

updateSummaryProperties :: Document a0
                        -> IO ()
updateSummaryProperties =
  method0 "UpdateSummaryProperties"
          []

getCrossReferenceItems :: (Variant a1, Variant a2)
                       => a2
                       -> Document a0
                       -> IO a1
getCrossReferenceItems referenceType =
  function1 "GetCrossReferenceItems"
            [inVariant referenceType]
            outVariant

autoFormat :: Document a0
           -> IO ()
autoFormat =
  method0 "AutoFormat"
          []

viewCode :: Document a0
         -> IO ()
viewCode =
  method0 "ViewCode"
          []

viewPropertyBrowser :: Document a0
                    -> IO ()
viewPropertyBrowser =
  method0 "ViewPropertyBrowser"
          []

forwardMailer :: Document a0
              -> IO ()
forwardMailer =
  method0 "ForwardMailer"
          []

reply :: Document a0
      -> IO ()
reply =
  method0 "Reply"
          []

replyAll :: Document a0
         -> IO ()
replyAll =
  method0 "ReplyAll"
          []

sendMailer :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Document a0
           -> IO ()
sendMailer fileFormat priority =
  method0 "SendMailer"
          [ inVariant fileFormat
          , inVariant priority
          ]

undoClear :: Document a0
          -> IO ()
undoClear =
  method0 "UndoClear"
          []

presentIt :: Document a0
          -> IO ()
presentIt =
  method0 "PresentIt"
          []

sendFax0 :: (Variant a1)
         => String
         -> a1
         -> Document a0
         -> IO ()
sendFax0 address subject =
  method0 "SendFax"
          [ inString address
          , inVariant subject
          ]

merge2000 :: String
          -> Document a0
          -> IO ()
merge2000 fileName =
  method0 "Merge2000"
          [inString fileName]

closePrintPreview :: Document a0
                  -> IO ()
closePrintPreview =
  method0 "ClosePrintPreview"
          []

checkConsistency :: Document a0
                 -> IO ()
checkConsistency =
  method0 "CheckConsistency"
          []

createLetterContent :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
                    => String
                    -> Bool
                    -> String
                    -> WdLetterStyle
                    -> Bool
                    -> WdLetterheadLocation
                    -> Float
                    -> String
                    -> String
                    -> String
                    -> WdSalutationType
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> String
                    -> Int32
                    -> a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> Document a0
                    -> IO (Maybe LetterContent)
createLetterContent dateFormat includeHeaderFooter pageDesign letterStyle letterhead letterheadLocation letterheadSize recipientName recipientAddress salutation salutationType recipientReference mailingInstructions attentionLine subject cCList returnAddress senderName closing senderCompany senderJobTitle senderInitials enclosureNumber infoBlock recipientCode recipientGender returnAddressShortForm senderCity senderCode senderGender senderReference iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    dateFormat <- marshallBSTR dateFormat
    includeHeaderFooter <- marshallVARIANT_BOOL includeHeaderFooter
    pageDesign <- marshallBSTR pageDesign
    letterStyle <- marshallEnum32 letterStyle
    letterhead <- marshallVARIANT_BOOL letterhead
    letterheadLocation <- marshallEnum32 letterheadLocation
    recipientName <- marshallBSTR recipientName
    recipientAddress <- marshallBSTR recipientAddress
    salutation <- marshallBSTR salutation
    salutationType <- marshallEnum32 salutationType
    recipientReference <- marshallBSTR recipientReference
    mailingInstructions <- marshallBSTR mailingInstructions
    attentionLine <- marshallBSTR attentionLine
    subject <- marshallBSTR subject
    cCList <- marshallBSTR cCList
    returnAddress <- marshallBSTR returnAddress
    senderName <- marshallBSTR senderName
    closing <- marshallBSTR closing
    senderCompany <- marshallBSTR senderCompany
    senderJobTitle <- marshallBSTR senderJobTitle
    senderInitials <- marshallBSTR senderInitials
    infoBlock <- marshallVariant infoBlock
    recipientCode <- marshallVariant recipientCode
    recipientGender <- marshallVariant recipientGender
    returnAddressShortForm <- marshallVariant returnAddressShortForm
    senderCity <- marshallVariant senderCity
    senderCode <- marshallVariant senderCode
    senderGender <- marshallVariant senderGender
    senderReference <- marshallVariant senderReference
    invokeAndCheck (\ methPtr iptr -> prim_Word_createLetterContent methPtr iptr dateFormat includeHeaderFooter pageDesign letterStyle letterhead letterheadLocation letterheadSize recipientName recipientAddress salutation salutationType recipientReference mailingInstructions attentionLine subject cCList returnAddress senderName closing senderCompany senderJobTitle senderInitials enclosureNumber infoBlock recipientCode recipientGender returnAddressShortForm senderCity senderCode senderGender senderReference prop) 222 iptr
    freeBSTR dateFormat
    freeBSTR pageDesign
    freeBSTR recipientName
    freeBSTR recipientAddress
    freeBSTR salutation
    freeBSTR recipientReference
    freeBSTR mailingInstructions
    freeBSTR attentionLine
    freeBSTR subject
    freeBSTR cCList
    freeBSTR returnAddress
    freeBSTR senderName
    freeBSTR closing
    freeBSTR senderCompany
    freeBSTR senderJobTitle
    freeBSTR senderInitials
    free infoBlock
    free recipientCode
    free recipientGender
    free returnAddressShortForm
    free senderCity
    free senderCode
    free senderGender
    free senderReference
    doThenFree free (readunique readLetterContent) prop

foreign import stdcall "dynamic" prim_Word_createLetterContent :: Ptr () -> Ptr () -> Ptr String -> Int16 -> Ptr String -> Int32 -> Int16 -> Int32 -> Float -> Ptr String -> Ptr String -> Ptr String -> Int32 -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Ptr String -> Int32 -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr LetterContent) -> IO Int32
acceptAllRevisions :: Document a0
                   -> IO ()
acceptAllRevisions =
  method0 "AcceptAllRevisions"
          []

rejectAllRevisions :: Document a0
                   -> IO ()
rejectAllRevisions =
  method0 "RejectAllRevisions"
          []

detectLanguage :: Document a0
               -> IO ()
detectLanguage =
  method0 "DetectLanguage"
          []

applyTheme :: String
           -> Document a0
           -> IO ()
applyTheme name =
  method0 "ApplyTheme"
          [inString name]

removeTheme :: Document a0
            -> IO ()
removeTheme =
  method0 "RemoveTheme"
          []

webPagePreview :: Document a0
               -> IO ()
webPagePreview =
  method0 "WebPagePreview"
          []

reloadAs :: MsoEncoding
         -> Document a0
         -> IO ()
reloadAs encoding iptr =
  do
    encoding <- marshallMsoEncoding encoding
    invokeAndCheck (\ methPtr iptr -> prim_Word_reloadAs methPtr iptr encoding) 229 iptr

foreign import stdcall "prim_Word_reloadAs" prim_Word_reloadAs :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getActiveTheme :: Document a0
               -> IO String
getActiveTheme =
  propertyGet "ActiveTheme"
              []
              outString

getActiveThemeDisplayName :: Document a0
                          -> IO String
getActiveThemeDisplayName =
  propertyGet "ActiveThemeDisplayName"
              []
              outString

getEmail :: Document a0
         -> IO (Email ())
getEmail =
  propertyGet "Email"
              []
              outIUnknown

getScripts :: Document a0
           -> IO (Maybe Scripts)
getScripts iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getScripts methPtr iptr prop) 233 iptr
    doThenFree free (readunique readScripts) prop

foreign import stdcall "dynamic" prim_Word_getScripts :: Ptr () -> Ptr () -> Ptr (Ptr Scripts) -> IO Int32
getLanguageDetected :: Document a0
                    -> IO Bool
getLanguageDetected =
  propertyGet "LanguageDetected"
              []
              outBool

setLanguageDetected :: Bool
                    -> Document a0
                    -> IO ()
setLanguageDetected prop =
  propertySet "LanguageDetected"
              [inBool prop]

getFarEastLineBreakLanguage :: Document a0
                            -> IO WdFarEastLineBreakLanguageID
getFarEastLineBreakLanguage =
  propertyGet "FarEastLineBreakLanguage"
              []
              outEnum

setFarEastLineBreakLanguage :: WdFarEastLineBreakLanguageID
                            -> Document a0
                            -> IO ()
setFarEastLineBreakLanguage prop =
  propertySet "FarEastLineBreakLanguage"
              [inEnum prop]

getFrameset :: Document a0
            -> IO (Frameset ())
getFrameset =
  propertyGet "Frameset"
              []
              outIUnknown

getClickAndTypeParagraphStyle :: (Variant a1)
                              => Document a0
                              -> IO a1
getClickAndTypeParagraphStyle =
  propertyGet "ClickAndTypeParagraphStyle"
              []
              outVariant

setClickAndTypeParagraphStyle :: (Variant a1)
                              => a1
                              -> Document a0
                              -> IO ()
setClickAndTypeParagraphStyle prop =
  propertySet "ClickAndTypeParagraphStyle"
              [inVariant prop]

getHTMLProject :: Document a0
               -> IO (Maybe HTMLProject)
getHTMLProject iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getHTMLProject methPtr iptr prop) 241 iptr
    doThenFree free (readunique readHTMLProject) prop

foreign import stdcall "dynamic" prim_Word_getHTMLProject :: Ptr () -> Ptr () -> Ptr (Ptr HTMLProject) -> IO Int32
getWebOptions :: Document a0
              -> IO (WebOptions ())
getWebOptions =
  propertyGet "WebOptions"
              []
              outIUnknown

getOpenEncoding :: Document a0
                -> IO MsoEncoding
getOpenEncoding iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOpenEncoding methPtr iptr prop) 243 iptr
    doThenFree free readMsoEncoding prop

foreign import stdcall "dynamic" prim_Word_getOpenEncoding :: Ptr () -> Ptr () -> Ptr MsoEncoding -> IO Int32
getSaveEncoding :: Document a0
                -> IO MsoEncoding
getSaveEncoding iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOpenEncoding methPtr iptr prop) 244 iptr
    doThenFree free readMsoEncoding prop

setSaveEncoding :: MsoEncoding
                -> Document a0
                -> IO ()
setSaveEncoding prop iptr =
  do
    prop <- marshallMsoEncoding prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setSaveEncoding methPtr iptr prop) 245 iptr

foreign import stdcall "prim_Word_setSaveEncoding" prim_Word_setSaveEncoding :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getOptimizeForWord97 :: Document a0
                     -> IO Bool
getOptimizeForWord97 =
  propertyGet "OptimizeForWord97"
              []
              outBool

setOptimizeForWord97 :: Bool
                     -> Document a0
                     -> IO ()
setOptimizeForWord97 prop =
  propertySet "OptimizeForWord97"
              [inBool prop]

getVBASigned :: Document a0
             -> IO Bool
getVBASigned =
  propertyGet "VBASigned"
              []
              outBool

printOut20000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> a12
              -> a13
              -> a14
              -> a15
              -> a16
              -> a17
              -> a18
              -> Document a0
              -> IO ()
printOut20000 background append range0 outputFileName from to item2 copies pages pageType printToFile collate activePrinterMacGX manualDuplexPrint printZoomColumn printZoomRow printZoomPaperWidth printZoomPaperHeight =
  method0 "PrintOut2000"
          [ inVariant background
          , inVariant append
          , inVariant range0
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item2
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          , inVariant printZoomColumn
          , inVariant printZoomRow
          , inVariant printZoomPaperWidth
          , inVariant printZoomPaperHeight
          ]

sblt :: String
     -> Document a0
     -> IO ()
sblt s =
  method0 "sblt"
          [inString s]

convertVietDoc :: Int32
               -> Document a0
               -> IO ()
convertVietDoc codePageOrigin =
  method0 "ConvertVietDoc"
          [inInt32 codePageOrigin]

printOut0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> Document a0
          -> IO ()
printOut0 background append range0 outputFileName from to item2 copies pages pageType printToFile collate activePrinterMacGX manualDuplexPrint printZoomColumn printZoomRow printZoomPaperWidth printZoomPaperHeight =
  method0 "PrintOut"
          [ inVariant background
          , inVariant append
          , inVariant range0
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item2
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          , inVariant printZoomColumn
          , inVariant printZoomRow
          , inVariant printZoomPaperWidth
          , inVariant printZoomPaperHeight
          ]

getMailEnvelope :: Document a0
                -> IO (Maybe MsoEnvelope)
getMailEnvelope iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getMailEnvelope methPtr iptr prop) 253 iptr
    doThenFree free (readunique readMsoEnvelope) prop

foreign import stdcall "dynamic" prim_Word_getMailEnvelope :: Ptr () -> Ptr () -> Ptr (Ptr MsoEnvelope) -> IO Int32
getDisableFeatures :: Document a0
                   -> IO Bool
getDisableFeatures =
  propertyGet "DisableFeatures"
              []
              outBool

setDisableFeatures :: Bool
                   -> Document a0
                   -> IO ()
setDisableFeatures prop =
  propertySet "DisableFeatures"
              [inBool prop]

getDoNotEmbedSystemFonts :: Document a0
                         -> IO Bool
getDoNotEmbedSystemFonts =
  propertyGet "DoNotEmbedSystemFonts"
              []
              outBool

setDoNotEmbedSystemFonts :: Bool
                         -> Document a0
                         -> IO ()
setDoNotEmbedSystemFonts prop =
  propertySet "DoNotEmbedSystemFonts"
              [inBool prop]

getSignatures :: Document a0
              -> IO (Maybe SignatureSet)
getSignatures iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getSignatures methPtr iptr prop) 258 iptr
    doThenFree free (readunique readSignatureSet) prop

foreign import stdcall "dynamic" prim_Word_getSignatures :: Ptr () -> Ptr () -> Ptr (Ptr SignatureSet) -> IO Int32
getDefaultTargetFrame :: Document a0
                      -> IO String
getDefaultTargetFrame =
  propertyGet "DefaultTargetFrame"
              []
              outString

setDefaultTargetFrame :: String
                      -> Document a0
                      -> IO ()
setDefaultTargetFrame prop =
  propertySet "DefaultTargetFrame"
              [inString prop]

getHTMLDivisions :: Document a0
                 -> IO (HTMLDivisions ())
getHTMLDivisions =
  propertyGet "HTMLDivisions"
              []
              outIUnknown

getDisableFeaturesIntroducedAfter :: Document a0
                                  -> IO WdDisableFeaturesIntroducedAfter
getDisableFeaturesIntroducedAfter =
  propertyGet "DisableFeaturesIntroducedAfter"
              []
              outEnum

setDisableFeaturesIntroducedAfter :: WdDisableFeaturesIntroducedAfter
                                  -> Document a0
                                  -> IO ()
setDisableFeaturesIntroducedAfter prop =
  propertySet "DisableFeaturesIntroducedAfter"
              [inEnum prop]

getRemovePersonalInformation :: Document a0
                             -> IO Bool
getRemovePersonalInformation =
  propertyGet "RemovePersonalInformation"
              []
              outBool

setRemovePersonalInformation :: Bool
                             -> Document a0
                             -> IO ()
setRemovePersonalInformation prop =
  propertySet "RemovePersonalInformation"
              [inBool prop]

getSmartTags :: Document a0
             -> IO (SmartTags ())
getSmartTags =
  propertyGet "SmartTags"
              []
              outIUnknown

compare2002 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
            => String
            -> a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> Document a0
            -> IO ()
compare2002 name authorName compareTarget detectFormatChanges ignoreAllComparisonWarnings addToRecentFiles =
  method0 "Compare2002"
          [ inString name
          , inVariant authorName
          , inVariant compareTarget
          , inVariant detectFormatChanges
          , inVariant ignoreAllComparisonWarnings
          , inVariant addToRecentFiles
          ]

checkIn :: (Variant a1, Variant a2, Variant a3)
        => a1
        -> a2
        -> a3
        -> Document a0
        -> IO ()
checkIn saveChanges comments makePublic =
  method0 "CheckIn"
          [ inDefaultValue (inInt32 (-1)) inVariant saveChanges
          , inVariant comments
          , inDefaultValue (inInt32 0) inVariant makePublic
          ]

canCheckin :: Document a0
           -> IO Bool
canCheckin =
  function1 "CanCheckin"
            []
            outBool

merge :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => String
      -> a1
      -> a2
      -> a3
      -> a4
      -> Document a0
      -> IO ()
merge fileName mergeTarget detectFormatChanges useFormattingFrom addToRecentFiles =
  method0 "Merge"
          [ inString fileName
          , inVariant mergeTarget
          , inVariant detectFormatChanges
          , inVariant useFormattingFrom
          , inVariant addToRecentFiles
          ]

getEmbedSmartTags :: Document a0
                  -> IO Bool
getEmbedSmartTags =
  propertyGet "EmbedSmartTags"
              []
              outBool

setEmbedSmartTags :: Bool
                  -> Document a0
                  -> IO ()
setEmbedSmartTags prop =
  propertySet "EmbedSmartTags"
              [inBool prop]

getSmartTagsAsXMLProps :: Document a0
                       -> IO Bool
getSmartTagsAsXMLProps =
  propertyGet "SmartTagsAsXMLProps"
              []
              outBool

setSmartTagsAsXMLProps :: Bool
                       -> Document a0
                       -> IO ()
setSmartTagsAsXMLProps prop =
  propertySet "SmartTagsAsXMLProps"
              [inBool prop]

getTextEncoding :: Document a0
                -> IO MsoEncoding
getTextEncoding iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOpenEncoding methPtr iptr prop) 275 iptr
    doThenFree free readMsoEncoding prop

setTextEncoding :: MsoEncoding
                -> Document a0
                -> IO ()
setTextEncoding prop iptr =
  do
    prop <- marshallMsoEncoding prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setTextEncoding methPtr iptr prop) 276 iptr

foreign import stdcall "prim_Word_setTextEncoding" prim_Word_setTextEncoding :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTextLineEnding :: Document a0
                  -> IO WdLineEndingType
getTextLineEnding =
  propertyGet "TextLineEnding"
              []
              outEnum

setTextLineEnding :: WdLineEndingType
                  -> Document a0
                  -> IO ()
setTextLineEnding prop =
  propertySet "TextLineEnding"
              [inEnum prop]

sendForReview :: (Variant a1, Variant a2, Variant a3, Variant a4)
              => a1
              -> a2
              -> a3
              -> a4
              -> Document a0
              -> IO ()
sendForReview recipients subject showMessage includeAttachment =
  method0 "SendForReview"
          [ inVariant recipients
          , inVariant subject
          , inVariant showMessage
          , inVariant includeAttachment
          ]

replyWithChanges :: (Variant a1)
                 => a1
                 -> Document a0
                 -> IO ()
replyWithChanges showMessage =
  method0 "ReplyWithChanges"
          [inVariant showMessage]

endReview :: Document a0
          -> IO ()
endReview =
  method0 "EndReview"
          []

getStyleSheets :: Document a0
               -> IO (StyleSheets ())
getStyleSheets =
  propertyGet "StyleSheets"
              []
              outIUnknown

getDefaultTableStyle :: (Variant a1)
                     => Document a0
                     -> IO a1
getDefaultTableStyle =
  propertyGet "DefaultTableStyle"
              []
              outVariant

getPasswordEncryptionProvider :: Document a0
                              -> IO String
getPasswordEncryptionProvider =
  propertyGet "PasswordEncryptionProvider"
              []
              outString

getPasswordEncryptionAlgorithm :: Document a0
                               -> IO String
getPasswordEncryptionAlgorithm =
  propertyGet "PasswordEncryptionAlgorithm"
              []
              outString

getPasswordEncryptionKeyLength :: Document a0
                               -> IO Int32
getPasswordEncryptionKeyLength =
  propertyGet "PasswordEncryptionKeyLength"
              []
              outInt32

getPasswordEncryptionFileProperties :: Document a0
                                    -> IO Bool
getPasswordEncryptionFileProperties =
  propertyGet "PasswordEncryptionFileProperties"
              []
              outBool

setPasswordEncryptionOptions :: (Variant a1)
                             => String
                             -> String
                             -> Int32
                             -> a1
                             -> Document a0
                             -> IO ()
setPasswordEncryptionOptions passwordEncryptionProvider passwordEncryptionAlgorithm passwordEncryptionKeyLength passwordEncryptionFileProperties =
  method0 "SetPasswordEncryptionOptions"
          [ inString passwordEncryptionProvider
          , inString passwordEncryptionAlgorithm
          , inInt32 passwordEncryptionKeyLength
          , inVariant passwordEncryptionFileProperties
          ]

recheckSmartTags :: Document a0
                 -> IO ()
recheckSmartTags =
  method0 "RecheckSmartTags"
          []

removeSmartTags :: Document a0
                -> IO ()
removeSmartTags =
  method0 "RemoveSmartTags"
          []

setDefaultTableStyle :: (Variant a1)
                     => a1
                     -> Bool
                     -> Document a0
                     -> IO ()
setDefaultTableStyle style setInTemplate =
  method0 "SetDefaultTableStyle"
          [ inVariant style
          , inBool setInTemplate
          ]

deleteAllComments :: Document a0
                  -> IO ()
deleteAllComments =
  method0 "DeleteAllComments"
          []

acceptAllRevisionsShown :: Document a0
                        -> IO ()
acceptAllRevisionsShown =
  method0 "AcceptAllRevisionsShown"
          []

rejectAllRevisionsShown :: Document a0
                        -> IO ()
rejectAllRevisionsShown =
  method0 "RejectAllRevisionsShown"
          []

deleteAllCommentsShown :: Document a0
                       -> IO ()
deleteAllCommentsShown =
  method0 "DeleteAllCommentsShown"
          []

resetFormFields :: Document a0
                -> IO ()
resetFormFields =
  method0 "ResetFormFields"
          []

saveAs :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> a6
       -> a7
       -> a8
       -> a9
       -> a10
       -> a11
       -> a12
       -> a13
       -> a14
       -> a15
       -> a16
       -> Document a0
       -> IO ()
saveAs fileName fileFormat lockComments password addToRecentFiles writePassword readOnlyRecommended embedTrueTypeFonts saveNativePictureFormat saveFormsData saveAsAOCELetter encoding insertLineBreaks allowSubstitutions lineEnding addBiDiMarks =
  method0 "SaveAs"
          [ inVariant fileName
          , inVariant fileFormat
          , inVariant lockComments
          , inVariant password
          , inVariant addToRecentFiles
          , inVariant writePassword
          , inVariant readOnlyRecommended
          , inVariant embedTrueTypeFonts
          , inVariant saveNativePictureFormat
          , inVariant saveFormsData
          , inVariant saveAsAOCELetter
          , inVariant encoding
          , inVariant insertLineBreaks
          , inVariant allowSubstitutions
          , inVariant lineEnding
          , inVariant addBiDiMarks
          ]

getEmbedLinguisticData :: Document a0
                       -> IO Bool
getEmbedLinguisticData =
  propertyGet "EmbedLinguisticData"
              []
              outBool

setEmbedLinguisticData :: Bool
                       -> Document a0
                       -> IO ()
setEmbedLinguisticData prop =
  propertySet "EmbedLinguisticData"
              [inBool prop]

getFormattingShowFont :: Document a0
                      -> IO Bool
getFormattingShowFont =
  propertyGet "FormattingShowFont"
              []
              outBool

setFormattingShowFont :: Bool
                      -> Document a0
                      -> IO ()
setFormattingShowFont prop =
  propertySet "FormattingShowFont"
              [inBool prop]

getFormattingShowClear :: Document a0
                       -> IO Bool
getFormattingShowClear =
  propertyGet "FormattingShowClear"
              []
              outBool

setFormattingShowClear :: Bool
                       -> Document a0
                       -> IO ()
setFormattingShowClear prop =
  propertySet "FormattingShowClear"
              [inBool prop]

getFormattingShowParagraph :: Document a0
                           -> IO Bool
getFormattingShowParagraph =
  propertyGet "FormattingShowParagraph"
              []
              outBool

setFormattingShowParagraph :: Bool
                           -> Document a0
                           -> IO ()
setFormattingShowParagraph prop =
  propertySet "FormattingShowParagraph"
              [inBool prop]

getFormattingShowNumbering :: Document a0
                           -> IO Bool
getFormattingShowNumbering =
  propertyGet "FormattingShowNumbering"
              []
              outBool

setFormattingShowNumbering :: Bool
                           -> Document a0
                           -> IO ()
setFormattingShowNumbering prop =
  propertySet "FormattingShowNumbering"
              [inBool prop]

getFormattingShowFilter :: Document a0
                        -> IO WdShowFilter
getFormattingShowFilter =
  propertyGet "FormattingShowFilter"
              []
              outEnum

setFormattingShowFilter :: WdShowFilter
                        -> Document a0
                        -> IO ()
setFormattingShowFilter prop =
  propertySet "FormattingShowFilter"
              [inEnum prop]

checkNewSmartTags :: Document a0
                  -> IO ()
checkNewSmartTags =
  method0 "CheckNewSmartTags"
          []

getPermission :: Document a0
              -> IO (Maybe Permission)
getPermission iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPermission methPtr iptr prop) 311 iptr
    doThenFree free (readunique readPermission) prop

foreign import stdcall "dynamic" prim_Word_getPermission :: Ptr () -> Ptr () -> Ptr (Ptr Permission) -> IO Int32
getXMLNodes :: Document a0
            -> IO (XMLNodes ())
getXMLNodes =
  propertyGet "XMLNodes"
              []
              outIUnknown

getXMLSchemaReferences :: Document a0
                       -> IO (XMLSchemaReferences ())
getXMLSchemaReferences =
  propertyGet "XMLSchemaReferences"
              []
              outIUnknown

getSmartDocument :: Document a0
                 -> IO (Maybe SmartDocument)
getSmartDocument iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getSmartDocument methPtr iptr prop) 314 iptr
    doThenFree free (readunique readSmartDocument) prop

foreign import stdcall "dynamic" prim_Word_getSmartDocument :: Ptr () -> Ptr () -> Ptr (Ptr SmartDocument) -> IO Int32
getSharedWorkspace :: Document a0
                   -> IO (Maybe SharedWorkspace)
getSharedWorkspace iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getSharedWorkspace methPtr iptr prop) 315 iptr
    doThenFree free (readunique readSharedWorkspace) prop

foreign import stdcall "dynamic" prim_Word_getSharedWorkspace :: Ptr () -> Ptr () -> Ptr (Ptr SharedWorkspace) -> IO Int32
getSync :: Document a0
        -> IO (Maybe Sync)
getSync iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getSync methPtr iptr prop) 316 iptr
    doThenFree free (readunique readSync) prop

foreign import stdcall "dynamic" prim_Word_getSync :: Ptr () -> Ptr () -> Ptr (Ptr Sync) -> IO Int32
getEnforceStyle :: Document a0
                -> IO Bool
getEnforceStyle =
  propertyGet "EnforceStyle"
              []
              outBool

setEnforceStyle :: Bool
                -> Document a0
                -> IO ()
setEnforceStyle prop =
  propertySet "EnforceStyle"
              [inBool prop]

getAutoFormatOverride :: Document a0
                      -> IO Bool
getAutoFormatOverride =
  propertyGet "AutoFormatOverride"
              []
              outBool

setAutoFormatOverride :: Bool
                      -> Document a0
                      -> IO ()
setAutoFormatOverride prop =
  propertySet "AutoFormatOverride"
              [inBool prop]

getXMLSaveDataOnly :: Document a0
                   -> IO Bool
getXMLSaveDataOnly =
  propertyGet "XMLSaveDataOnly"
              []
              outBool

setXMLSaveDataOnly :: Bool
                   -> Document a0
                   -> IO ()
setXMLSaveDataOnly prop =
  propertySet "XMLSaveDataOnly"
              [inBool prop]

getXMLHideNamespaces :: Document a0
                     -> IO Bool
getXMLHideNamespaces =
  propertyGet "XMLHideNamespaces"
              []
              outBool

setXMLHideNamespaces :: Bool
                     -> Document a0
                     -> IO ()
setXMLHideNamespaces prop =
  propertySet "XMLHideNamespaces"
              [inBool prop]

getXMLShowAdvancedErrors :: Document a0
                         -> IO Bool
getXMLShowAdvancedErrors =
  propertyGet "XMLShowAdvancedErrors"
              []
              outBool

setXMLShowAdvancedErrors :: Bool
                         -> Document a0
                         -> IO ()
setXMLShowAdvancedErrors prop =
  propertySet "XMLShowAdvancedErrors"
              [inBool prop]

getXMLUseXSLTWhenSaving :: Document a0
                        -> IO Bool
getXMLUseXSLTWhenSaving =
  propertyGet "XMLUseXSLTWhenSaving"
              []
              outBool

setXMLUseXSLTWhenSaving :: Bool
                        -> Document a0
                        -> IO ()
setXMLUseXSLTWhenSaving prop =
  propertySet "XMLUseXSLTWhenSaving"
              [inBool prop]

getXMLSaveThroughXSLT :: Document a0
                      -> IO String
getXMLSaveThroughXSLT =
  propertyGet "XMLSaveThroughXSLT"
              []
              outString

setXMLSaveThroughXSLT :: String
                      -> Document a0
                      -> IO ()
setXMLSaveThroughXSLT prop =
  propertySet "XMLSaveThroughXSLT"
              [inString prop]

getDocumentLibraryVersions :: Document a0
                           -> IO (Maybe DocumentLibraryVersions)
getDocumentLibraryVersions iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDocumentLibraryVersions methPtr iptr prop) 331 iptr
    doThenFree free (readunique readDocumentLibraryVersions) prop

foreign import stdcall "dynamic" prim_Word_getDocumentLibraryVersions :: Ptr () -> Ptr () -> Ptr (Ptr DocumentLibraryVersions) -> IO Int32
getReadingModeLayoutFrozen :: Document a0
                           -> IO Bool
getReadingModeLayoutFrozen =
  propertyGet "ReadingModeLayoutFrozen"
              []
              outBool

setReadingModeLayoutFrozen :: Bool
                           -> Document a0
                           -> IO ()
setReadingModeLayoutFrozen prop =
  propertySet "ReadingModeLayoutFrozen"
              [inBool prop]

getRemoveDateAndTime :: Document a0
                     -> IO Bool
getRemoveDateAndTime =
  propertyGet "RemoveDateAndTime"
              []
              outBool

setRemoveDateAndTime :: Bool
                     -> Document a0
                     -> IO ()
setRemoveDateAndTime prop =
  propertySet "RemoveDateAndTime"
              [inBool prop]

sendFaxOverInternet :: (Variant a1, Variant a2, Variant a3)
                    => a1
                    -> a2
                    -> a3
                    -> Document a0
                    -> IO ()
sendFaxOverInternet recipients subject showMessage =
  method0 "SendFaxOverInternet"
          [ inVariant recipients
          , inVariant subject
          , inVariant showMessage
          ]

transformDocument :: (Variant a1)
                  => String
                  -> a1
                  -> Document a0
                  -> IO ()
transformDocument path dataOnly =
  method0 "TransformDocument"
          [ inString path
          , inDefaultValue (inInt32 (-1)) inVariant dataOnly
          ]

protect :: (Variant a1, Variant a2, Variant a3, Variant a4)
        => WdProtectionType
        -> a1
        -> a2
        -> a3
        -> a4
        -> Document a0
        -> IO ()
protect type0 noReset password useIRM enforceStyleLock =
  method0 "Protect"
          [ inEnum type0
          , inVariant noReset
          , inVariant password
          , inVariant useIRM
          , inVariant enforceStyleLock
          ]

selectAllEditableRanges :: (Variant a1)
                        => a1
                        -> Document a0
                        -> IO ()
selectAllEditableRanges editorID =
  method0 "SelectAllEditableRanges"
          [inVariant editorID]

deleteAllEditableRanges :: (Variant a1)
                        => a1
                        -> Document a0
                        -> IO ()
deleteAllEditableRanges editorID =
  method0 "DeleteAllEditableRanges"
          [inVariant editorID]

deleteAllInkAnnotations :: Document a0
                        -> IO ()
deleteAllInkAnnotations =
  method0 "DeleteAllInkAnnotations"
          []

addDocumentWorkspaceHeader :: Bool
                           -> String
                           -> String
                           -> String
                           -> String
                           -> Document a0
                           -> IO ()
addDocumentWorkspaceHeader richFormat url title description iD =
  method0 "AddDocumentWorkspaceHeader"
          [ inBool richFormat
          , inString url
          , inString title
          , inString description
          , inString iD
          ]

removeDocumentWorkspaceHeader :: String
                              -> Document a0
                              -> IO ()
removeDocumentWorkspaceHeader iD =
  method0 "RemoveDocumentWorkspaceHeader"
          [inString iD]

compare :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
        => String
        -> a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> Document a0
        -> IO ()
compare name authorName compareTarget detectFormatChanges ignoreAllComparisonWarnings addToRecentFiles removePersonalInformation removeDateAndTime =
  method0 "Compare"
          [ inString name
          , inVariant authorName
          , inVariant compareTarget
          , inVariant detectFormatChanges
          , inVariant ignoreAllComparisonWarnings
          , inVariant addToRecentFiles
          , inVariant removePersonalInformation
          , inVariant removeDateAndTime
          ]

removeLockedStyles :: Document a0
                   -> IO ()
removeLockedStyles =
  method0 "RemoveLockedStyles"
          []

getChildNodeSuggestions :: Document a0
                        -> IO (XMLChildNodeSuggestions ())
getChildNodeSuggestions =
  propertyGet "ChildNodeSuggestions"
              []
              outIUnknown

selectSingleNode :: (Variant a1, Variant a2)
                 => String
                 -> a1
                 -> a2
                 -> Document a0
                 -> IO (XMLNode ())
selectSingleNode xPath prefixMapping fastSearchSkippingTextNodes =
  function1 "SelectSingleNode"
            [ inString xPath
            , inDefaultValue (inVariant "") inVariant prefixMapping
            , inDefaultValue (inInt32 (-1)) inVariant fastSearchSkippingTextNodes
            ]
            outIUnknown

selectNodes :: (Variant a1, Variant a2)
            => String
            -> a1
            -> a2
            -> Document a0
            -> IO (XMLNodes ())
selectNodes xPath prefixMapping fastSearchSkippingTextNodes =
  function1 "SelectNodes"
            [ inString xPath
            , inDefaultValue (inVariant "") inVariant prefixMapping
            , inDefaultValue (inInt32 (-1)) inVariant fastSearchSkippingTextNodes
            ]
            outIUnknown

getXMLSchemaViolations :: Document a0
                       -> IO (XMLNodes ())
getXMLSchemaViolations =
  propertyGet "XMLSchemaViolations"
              []
              outIUnknown

getReadingLayoutSizeX :: Document a0
                      -> IO Int32
getReadingLayoutSizeX =
  propertyGet "ReadingLayoutSizeX"
              []
              outInt32

setReadingLayoutSizeX :: Int32
                      -> Document a0
                      -> IO ()
setReadingLayoutSizeX prop =
  propertySet "ReadingLayoutSizeX"
              [inInt32 prop]

getReadingLayoutSizeY :: Document a0
                      -> IO Int32
getReadingLayoutSizeY =
  propertyGet "ReadingLayoutSizeY"
              []
              outInt32

setReadingLayoutSizeY :: Int32
                      -> Document a0
                      -> IO ()
setReadingLayoutSizeY prop =
  propertySet "ReadingLayoutSizeY"
              [inInt32 prop]

getStyleSortMethod :: Document a0
                   -> IO WdStyleSort
getStyleSortMethod =
  propertyGet "StyleSortMethod"
              []
              outEnum

setStyleSortMethod :: WdStyleSort
                   -> Document a0
                   -> IO ()
setStyleSortMethod prop =
  propertySet "StyleSortMethod"
              [inEnum prop]

getContentTypeProperties :: Document a0
                         -> IO (Maybe MetaProperties)
getContentTypeProperties iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getContentTypeProperties methPtr iptr prop) 356 iptr
    doThenFree free (readunique readMetaProperties) prop

foreign import stdcall "dynamic" prim_Word_getContentTypeProperties :: Ptr () -> Ptr () -> Ptr (Ptr MetaProperties) -> IO Int32
getTrackMoves :: Document a0
              -> IO Bool
getTrackMoves =
  propertyGet "TrackMoves"
              []
              outBool

setTrackMoves :: Bool
              -> Document a0
              -> IO ()
setTrackMoves prop =
  propertySet "TrackMoves"
              [inBool prop]

getTrackFormatting :: Document a0
                   -> IO Bool
getTrackFormatting =
  propertyGet "TrackFormatting"
              []
              outBool

setTrackFormatting :: Bool
                   -> Document a0
                   -> IO ()
setTrackFormatting prop =
  propertySet "TrackFormatting"
              [inBool prop]

getDummy10 :: Document a0
           -> IO ()
getDummy10 =
  propertyGet "Dummy1"
              []

getOMaths :: Document a0
          -> IO (OMaths ())
getOMaths =
  propertyGet "OMaths"
              []
              outIUnknown

removeDocumentInformation :: WdRemoveDocInfoType
                          -> Document a0
                          -> IO ()
removeDocumentInformation removeDocInfoType =
  method0 "RemoveDocumentInformation"
          [inEnum removeDocInfoType]

checkInWithVersion :: (Variant a1, Variant a2, Variant a3, Variant a4)
                   => a1
                   -> a2
                   -> a3
                   -> a4
                   -> Document a0
                   -> IO ()
checkInWithVersion saveChanges comments makePublic versionType =
  method0 "CheckInWithVersion"
          [ inDefaultValue (inInt32 (-1)) inVariant saveChanges
          , inVariant comments
          , inDefaultValue (inInt32 0) inVariant makePublic
          , inVariant versionType
          ]

dummy20 :: Document a0
        -> IO ()
dummy20 =
  method0 "Dummy2"
          []

getDummy3 :: Document a0
          -> IO ()
getDummy3 =
  propertyGet "Dummy3"
              []

getServerPolicy :: Document a0
                -> IO (Maybe ServerPolicy)
getServerPolicy iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getServerPolicy methPtr iptr prop) 367 iptr
    doThenFree free (readunique readServerPolicy) prop

foreign import stdcall "dynamic" prim_Word_getServerPolicy :: Ptr () -> Ptr () -> Ptr (Ptr ServerPolicy) -> IO Int32
getContentControls :: Document a0
                   -> IO (ContentControls ())
getContentControls =
  propertyGet "ContentControls"
              []
              outIUnknown

getDocumentInspectors :: Document a0
                      -> IO (Maybe DocumentInspectors)
getDocumentInspectors iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDocumentInspectors methPtr iptr prop) 369 iptr
    doThenFree free (readunique readDocumentInspectors) prop

foreign import stdcall "dynamic" prim_Word_getDocumentInspectors :: Ptr () -> Ptr () -> Ptr (Ptr DocumentInspectors) -> IO Int32
lockServerFile :: Document a0
               -> IO ()
lockServerFile =
  method0 "LockServerFile"
          []

getWorkflowTasks :: Document a0
                 -> IO (Maybe WorkflowTasks)
getWorkflowTasks iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getWorkflowTasks methPtr iptr prop) 371 iptr
    doThenFree free (readunique readWorkflowTasks) prop

foreign import stdcall "dynamic" prim_Word_getWorkflowTasks :: Ptr () -> Ptr () -> Ptr (Ptr WorkflowTasks) -> IO Int32
getWorkflowTemplates :: Document a0
                     -> IO (Maybe WorkflowTemplates)
getWorkflowTemplates iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getWorkflowTemplates methPtr iptr prop) 372 iptr
    doThenFree free (readunique readWorkflowTemplates) prop

foreign import stdcall "dynamic" prim_Word_getWorkflowTemplates :: Ptr () -> Ptr () -> Ptr (Ptr WorkflowTemplates) -> IO Int32
dummy4 :: Document a0
       -> IO ()
dummy4 =
  method0 "Dummy4"
          []

addMeetingWorkspaceHeader :: Bool
                          -> String
                          -> String
                          -> String
                          -> String
                          -> Document a0
                          -> IO ()
addMeetingWorkspaceHeader skipIfAbsent url title description iD =
  method0 "AddMeetingWorkspaceHeader"
          [ inBool skipIfAbsent
          , inString url
          , inString title
          , inString description
          , inString iD
          ]

getBibliography0 :: Document a0
                 -> IO (Bibliography ())
getBibliography0 =
  propertyGet "Bibliography"
              []
              outIUnknown

getLockTheme :: Document a0
             -> IO Bool
getLockTheme =
  propertyGet "LockTheme"
              []
              outBool

setLockTheme :: Bool
             -> Document a0
             -> IO ()
setLockTheme prop =
  propertySet "LockTheme"
              [inBool prop]

getLockQuickStyleSet :: Document a0
                     -> IO Bool
getLockQuickStyleSet =
  propertyGet "LockQuickStyleSet"
              []
              outBool

setLockQuickStyleSet :: Bool
                     -> Document a0
                     -> IO ()
setLockQuickStyleSet prop =
  propertySet "LockQuickStyleSet"
              [inBool prop]

getOriginalDocumentTitle :: Document a0
                         -> IO String
getOriginalDocumentTitle =
  propertyGet "OriginalDocumentTitle"
              []
              outString

getRevisedDocumentTitle :: Document a0
                        -> IO String
getRevisedDocumentTitle =
  propertyGet "RevisedDocumentTitle"
              []
              outString

getCustomXMLParts :: Document a0
                  -> IO (Maybe CustomXMLParts)
getCustomXMLParts iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCustomXMLParts methPtr iptr prop) 382 iptr
    doThenFree free (readunique readCustomXMLParts) prop

foreign import stdcall "dynamic" prim_Word_getCustomXMLParts :: Ptr () -> Ptr () -> Ptr (Ptr CustomXMLParts) -> IO Int32
getFormattingShowNextLevel :: Document a0
                           -> IO Bool
getFormattingShowNextLevel =
  propertyGet "FormattingShowNextLevel"
              []
              outBool

setFormattingShowNextLevel :: Bool
                           -> Document a0
                           -> IO ()
setFormattingShowNextLevel prop =
  propertySet "FormattingShowNextLevel"
              [inBool prop]

getFormattingShowUserStyleName :: Document a0
                               -> IO Bool
getFormattingShowUserStyleName =
  propertyGet "FormattingShowUserStyleName"
              []
              outBool

setFormattingShowUserStyleName :: Bool
                               -> Document a0
                               -> IO ()
setFormattingShowUserStyleName prop =
  propertySet "FormattingShowUserStyleName"
              [inBool prop]

saveAsQuickStyleSet :: String
                    -> Document a0
                    -> IO ()
saveAsQuickStyleSet fileName =
  method0 "SaveAsQuickStyleSet"
          [inString fileName]

applyQuickStyleSet :: String
                   -> Document a0
                   -> IO ()
applyQuickStyleSet name =
  method0 "ApplyQuickStyleSet"
          [inString name]

getResearch :: Document a0
            -> IO (Research ())
getResearch =
  propertyGet "Research"
              []
              outIUnknown

getFinal :: Document a0
         -> IO Bool
getFinal =
  propertyGet "Final"
              []
              outBool

setFinal :: Bool
         -> Document a0
         -> IO ()
setFinal prop =
  propertySet "Final"
              [inBool prop]

getOMathBreakBin :: Document a0
                 -> IO WdOMathBreakBin
getOMathBreakBin =
  propertyGet "OMathBreakBin"
              []
              outEnum

setOMathBreakBin :: WdOMathBreakBin
                 -> Document a0
                 -> IO ()
setOMathBreakBin prop =
  propertySet "OMathBreakBin"
              [inEnum prop]

getOMathBreakSub :: Document a0
                 -> IO WdOMathBreakSub
getOMathBreakSub =
  propertyGet "OMathBreakSub"
              []
              outEnum

setOMathBreakSub :: WdOMathBreakSub
                 -> Document a0
                 -> IO ()
setOMathBreakSub prop =
  propertySet "OMathBreakSub"
              [inEnum prop]

getOMathJc :: Document a0
           -> IO WdOMathJc
getOMathJc =
  propertyGet "OMathJc"
              []
              outEnum

setOMathJc :: WdOMathJc
           -> Document a0
           -> IO ()
setOMathJc prop =
  propertySet "OMathJc"
              [inEnum prop]

getOMathLeftMargin :: Document a0
                   -> IO Float
getOMathLeftMargin =
  propertyGet "OMathLeftMargin"
              []
              outFloat

setOMathLeftMargin :: Float
                   -> Document a0
                   -> IO ()
setOMathLeftMargin prop =
  propertySet "OMathLeftMargin"
              [inFloat prop]

getOMathRightMargin :: Document a0
                    -> IO Float
getOMathRightMargin =
  propertyGet "OMathRightMargin"
              []
              outFloat

setOMathRightMargin :: Float
                    -> Document a0
                    -> IO ()
setOMathRightMargin prop =
  propertySet "OMathRightMargin"
              [inFloat prop]

getOMathWrap :: Document a0
             -> IO Float
getOMathWrap =
  propertyGet "OMathWrap"
              []
              outFloat

setOMathWrap :: Float
             -> Document a0
             -> IO ()
setOMathWrap prop =
  propertySet "OMathWrap"
              [inFloat prop]

getOMathIntSubSupLim :: Document a0
                     -> IO Bool
getOMathIntSubSupLim =
  propertyGet "OMathIntSubSupLim"
              []
              outBool

setOMathIntSubSupLim :: Bool
                     -> Document a0
                     -> IO ()
setOMathIntSubSupLim prop =
  propertySet "OMathIntSubSupLim"
              [inBool prop]

getOMathNarySupSubLim :: Document a0
                      -> IO Bool
getOMathNarySupSubLim =
  propertyGet "OMathNarySupSubLim"
              []
              outBool

setOMathNarySupSubLim :: Bool
                      -> Document a0
                      -> IO ()
setOMathNarySupSubLim prop =
  propertySet "OMathNarySupSubLim"
              [inBool prop]

getOMathSmallFrac :: Document a0
                  -> IO Bool
getOMathSmallFrac =
  propertyGet "OMathSmallFrac"
              []
              outBool

setOMathSmallFrac :: Bool
                  -> Document a0
                  -> IO ()
setOMathSmallFrac prop =
  propertySet "OMathSmallFrac"
              [inBool prop]

getWordOpenXML :: Document a0
               -> IO String
getWordOpenXML =
  propertyGet "WordOpenXML"
              []
              outString

getDocumentTheme :: Document a0
                 -> IO (Maybe OfficeTheme)
getDocumentTheme iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDocumentTheme methPtr iptr prop) 411 iptr
    doThenFree free (readunique readOfficeTheme) prop

foreign import stdcall "dynamic" prim_Word_getDocumentTheme :: Ptr () -> Ptr () -> Ptr (Ptr OfficeTheme) -> IO Int32
applyDocumentTheme :: String
                   -> Document a0
                   -> IO ()
applyDocumentTheme fileName =
  method0 "ApplyDocumentTheme"
          [inString fileName]

getHasVBProject :: Document a0
                -> IO Bool
getHasVBProject =
  propertyGet "HasVBProject"
              []
              outBool

selectLinkedControls :: CustomXMLNode
                     -> Document a0
                     -> IO (ContentControls ())
selectLinkedControls node iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    node <- marshallref (allocBytes (fromIntegral sizeofCustomXMLNode)) writeCustomXMLNode node
    invokeAndCheck (\ methPtr iptr -> prim_Word_selectLinkedControls methPtr iptr node prop) 414 iptr
    free node
    doThenFree free (readIUnknown False) prop

foreign import stdcall "dynamic" prim_Word_selectLinkedControls :: Ptr () -> Ptr () -> Ptr CustomXMLNode -> Ptr (Ptr (ContentControls a)) -> IO Int32
selectUnlinkedControls :: CustomXMLPart
                       -> Document a0
                       -> IO (ContentControls ())
selectUnlinkedControls stream iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    stream <- marshallref (allocBytes (fromIntegral sizeofCustomXMLPart)) writeCustomXMLPart stream
    invokeAndCheck (\ methPtr iptr -> prim_Word_selectUnlinkedControls methPtr iptr stream prop) 415 iptr
    free stream
    doThenFree free (readIUnknown False) prop

foreign import stdcall "dynamic" prim_Word_selectUnlinkedControls :: Ptr () -> Ptr () -> Ptr CustomXMLPart -> Ptr (Ptr (ContentControls a)) -> IO Int32
selectContentControlsByTitle :: String
                             -> Document a0
                             -> IO (ContentControls ())
selectContentControlsByTitle title =
  function1 "SelectContentControlsByTitle"
            [inString title]
            outIUnknown

exportAsFixedFormat :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
                    => String
                    -> WdExportFormat
                    -> a1
                    -> a2
                    -> a3
                    -> a4
                    -> a5
                    -> a6
                    -> a7
                    -> a8
                    -> a9
                    -> a10
                    -> a11
                    -> a12
                    -> a13
                    -> Document a0
                    -> IO ()
exportAsFixedFormat outputFileName exportFormat openAfterExport optimizeFor range0 from to item2 includeDocProps keepIRM createBookmarks docStructureTags bitmapMissingFonts useISO19005_1 fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inString outputFileName
          , inEnum exportFormat
          , inDefaultValue (inInt32 0) inVariant openAfterExport
          , inDefaultValue (inInt32 0) inVariant optimizeFor
          , inDefaultValue (inInt32 0) inVariant range0
          , inDefaultValue (inInt32 1) inVariant from
          , inDefaultValue (inInt32 1) inVariant to
          , inDefaultValue (inInt32 0) inVariant item2
          , inDefaultValue (inInt32 0) inVariant includeDocProps
          , inDefaultValue (inInt32 (-1)) inVariant keepIRM
          , inDefaultValue (inInt32 0) inVariant createBookmarks
          , inDefaultValue (inInt32 (-1)) inVariant docStructureTags
          , inDefaultValue (inInt32 (-1)) inVariant bitmapMissingFonts
          , inDefaultValue (inInt32 0) inVariant useISO19005_1
          , inVariant fixedFormatExtClassPtr
          ]

freezeLayout :: Document a0
             -> IO ()
freezeLayout =
  method0 "FreezeLayout"
          []

unfreezeLayout :: Document a0
               -> IO ()
unfreezeLayout =
  method0 "UnfreezeLayout"
          []

getOMathFontName :: Document a0
                 -> IO String
getOMathFontName =
  propertyGet "OMathFontName"
              []
              outString

setOMathFontName :: String
                 -> Document a0
                 -> IO ()
setOMathFontName prop =
  propertySet "OMathFontName"
              [inString prop]

downgradeDocument :: Document a0
                  -> IO ()
downgradeDocument =
  method0 "DowngradeDocument"
          []

getEncryptionProvider :: Document a0
                      -> IO String
getEncryptionProvider =
  propertyGet "EncryptionProvider"
              []
              outString

setEncryptionProvider :: String
                      -> Document a0
                      -> IO ()
setEncryptionProvider prop =
  propertySet "EncryptionProvider"
              [inString prop]

getUseMathDefaults :: Document a0
                   -> IO Bool
getUseMathDefaults =
  propertyGet "UseMathDefaults"
              []
              outBool

setUseMathDefaults :: Bool
                   -> Document a0
                   -> IO ()
setUseMathDefaults prop =
  propertySet "UseMathDefaults"
              [inBool prop]

getCurrentRsid :: Document a0
               -> IO Int32
getCurrentRsid =
  propertyGet "CurrentRsid"
              []
              outInt32

convert :: Document a0
        -> IO ()
convert =
  method0 "Convert"
          []

selectContentControlsByTag :: String
                           -> Document a0
                           -> IO (ContentControls ())
selectContentControlsByTag tag =
  function1 "SelectContentControlsByTag"
            [inString tag]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Template
-- 
-- --------------------------------------------------
data Template_ a = Template__ 
type Template a = IDispatch (Template_ a)
iidTemplate :: IID (Template ())
iidTemplate = mkIID "{0002096A-0000-0000-C000-000000000046}"

getName3 :: Template a0
         -> IO String
getName3 =
  propertyGet "Name"
              []
              outString

getApplication6 :: Template a0
                -> IO (Maybe Application)
getApplication6 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator6 :: Template a0
            -> IO Int32
getCreator6 =
  propertyGet "Creator"
              []
              outInt32

getParent6 :: Template a0
           -> IO (IDispatch ())
getParent6 =
  propertyGet "Parent"
              []
              outIDispatch

getPath1 :: Template a0
         -> IO String
getPath1 =
  propertyGet "Path"
              []
              outString

getAutoTextEntries :: Template a0
                   -> IO (AutoTextEntries ())
getAutoTextEntries =
  propertyGet "AutoTextEntries"
              []
              outIUnknown

getLanguageID :: Template a0
              -> IO WdLanguageID
getLanguageID =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID :: WdLanguageID
              -> Template a0
              -> IO ()
setLanguageID prop =
  propertySet "LanguageID"
              [inEnum prop]

getSaved0 :: Template a0
          -> IO Bool
getSaved0 =
  propertyGet "Saved"
              []
              outBool

setSaved0 :: Bool
          -> Template a0
          -> IO ()
setSaved0 prop =
  propertySet "Saved"
              [inBool prop]

getType0 :: Template a0
         -> IO WdTemplateType
getType0 =
  propertyGet "Type"
              []
              outEnum

getFullName0 :: Template a0
             -> IO String
getFullName0 =
  propertyGet "FullName"
              []
              outString

getBuiltInDocumentProperties0 :: Template a0
                              -> IO (IDispatch ())
getBuiltInDocumentProperties0 =
  propertyGet "BuiltInDocumentProperties"
              []
              outIDispatch

getCustomDocumentProperties0 :: Template a0
                             -> IO (IDispatch ())
getCustomDocumentProperties0 =
  propertyGet "CustomDocumentProperties"
              []
              outIDispatch

getListTemplates0 :: Template a0
                  -> IO (ListTemplates ())
getListTemplates0 =
  propertyGet "ListTemplates"
              []
              outIUnknown

getLanguageIDFarEast :: Template a0
                     -> IO WdLanguageID
getLanguageIDFarEast =
  propertyGet "LanguageIDFarEast"
              []
              outEnum

setLanguageIDFarEast :: WdLanguageID
                     -> Template a0
                     -> IO ()
setLanguageIDFarEast prop =
  propertySet "LanguageIDFarEast"
              [inEnum prop]

getVBProject0 :: Template a0
              -> IO (Maybe VBProject)
getVBProject0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getVBProject methPtr iptr prop) 24 iptr
    doThenFree free (readunique readVBProject) prop

getKerningByAlgorithm0 :: Template a0
                       -> IO Bool
getKerningByAlgorithm0 =
  propertyGet "KerningByAlgorithm"
              []
              outBool

setKerningByAlgorithm0 :: Bool
                       -> Template a0
                       -> IO ()
setKerningByAlgorithm0 prop =
  propertySet "KerningByAlgorithm"
              [inBool prop]

getJustificationMode0 :: Template a0
                      -> IO WdJustificationMode
getJustificationMode0 =
  propertyGet "JustificationMode"
              []
              outEnum

setJustificationMode0 :: WdJustificationMode
                      -> Template a0
                      -> IO ()
setJustificationMode0 prop =
  propertySet "JustificationMode"
              [inEnum prop]

getFarEastLineBreakLevel0 :: Template a0
                          -> IO WdFarEastLineBreakLevel
getFarEastLineBreakLevel0 =
  propertyGet "FarEastLineBreakLevel"
              []
              outEnum

setFarEastLineBreakLevel0 :: WdFarEastLineBreakLevel
                          -> Template a0
                          -> IO ()
setFarEastLineBreakLevel0 prop =
  propertySet "FarEastLineBreakLevel"
              [inEnum prop]

getNoLineBreakBefore0 :: Template a0
                      -> IO String
getNoLineBreakBefore0 =
  propertyGet "NoLineBreakBefore"
              []
              outString

setNoLineBreakBefore0 :: String
                      -> Template a0
                      -> IO ()
setNoLineBreakBefore0 prop =
  propertySet "NoLineBreakBefore"
              [inString prop]

getNoLineBreakAfter0 :: Template a0
                     -> IO String
getNoLineBreakAfter0 =
  propertyGet "NoLineBreakAfter"
              []
              outString

setNoLineBreakAfter0 :: String
                     -> Template a0
                     -> IO ()
setNoLineBreakAfter0 prop =
  propertySet "NoLineBreakAfter"
              [inString prop]

openAsDocument :: Template a0
               -> IO (Maybe Document)
openAsDocument iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 35 iptr
    doThenFree free (readunique readDocument) prop

save1 :: Template a0
      -> IO ()
save1 =
  method0 "Save"
          []

getNoProofing :: Template a0
              -> IO Int32
getNoProofing =
  propertyGet "NoProofing"
              []
              outInt32

setNoProofing :: Int32
              -> Template a0
              -> IO ()
setNoProofing prop =
  propertySet "NoProofing"
              [inInt32 prop]

getFarEastLineBreakLanguage0 :: Template a0
                             -> IO WdFarEastLineBreakLanguageID
getFarEastLineBreakLanguage0 =
  propertyGet "FarEastLineBreakLanguage"
              []
              outEnum

setFarEastLineBreakLanguage0 :: WdFarEastLineBreakLanguageID
                             -> Template a0
                             -> IO ()
setFarEastLineBreakLanguage0 prop =
  propertySet "FarEastLineBreakLanguage"
              [inEnum prop]

getBuildingBlockEntries :: Template a0
                        -> IO (BuildingBlockEntries ())
getBuildingBlockEntries =
  propertyGet "BuildingBlockEntries"
              []
              outIUnknown

getBuildingBlockTypes :: Template a0
                      -> IO (BuildingBlockTypes ())
getBuildingBlockTypes =
  propertyGet "BuildingBlockTypes"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface Templates
-- 
-- --------------------------------------------------
data Templates_ a = Templates__ 
type Templates a = IDispatch (Templates_ a)
iidTemplates :: IID (Templates ())
iidTemplates = mkIID "{000209A2-0000-0000-C000-000000000046}"

getApplication7 :: Templates a0
                -> IO (Maybe Application)
getApplication7 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator7 :: Templates a0
            -> IO Int32
getCreator7 =
  propertyGet "Creator"
              []
              outInt32

getParent7 :: Templates a0
           -> IO (IDispatch ())
getParent7 =
  propertyGet "Parent"
              []
              outIDispatch

getCount2 :: Templates a0
          -> IO Int32
getCount2 =
  propertyGet "Count"
              []
              outInt32

getNewEnum2 :: Templates a0
            -> IO (IUnknown ())
getNewEnum2 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item2 :: (Variant a1)
      => a1
      -> Templates a0
      -> IO (Template ())
item2 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

loadBuildingBlocks :: Templates a0
                   -> IO ()
loadBuildingBlocks =
  method0 "LoadBuildingBlocks"
          []

-- --------------------------------------------------
-- 
-- interface RoutingSlip
-- 
-- --------------------------------------------------
data RoutingSlip_ a = RoutingSlip__ 
type RoutingSlip a = IDispatch (RoutingSlip_ a)
iidRoutingSlip :: IID (RoutingSlip ())
iidRoutingSlip = mkIID "{00020969-0000-0000-C000-000000000046}"

getApplication8 :: RoutingSlip a0
                -> IO (Maybe Application)
getApplication8 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator8 :: RoutingSlip a0
            -> IO Int32
getCreator8 =
  propertyGet "Creator"
              []
              outInt32

getParent8 :: RoutingSlip a0
           -> IO (IDispatch ())
getParent8 =
  propertyGet "Parent"
              []
              outIDispatch

getSubject :: RoutingSlip a0
           -> IO String
getSubject =
  propertyGet "Subject"
              []
              outString

setSubject :: String
           -> RoutingSlip a0
           -> IO ()
setSubject prop =
  propertySet "Subject"
              [inString prop]

getMessage :: RoutingSlip a0
           -> IO String
getMessage =
  propertyGet "Message"
              []
              outString

setMessage :: String
           -> RoutingSlip a0
           -> IO ()
setMessage prop =
  propertySet "Message"
              [inString prop]

getDelivery :: RoutingSlip a0
            -> IO WdRoutingSlipDelivery
getDelivery =
  propertyGet "Delivery"
              []
              outEnum

setDelivery :: WdRoutingSlipDelivery
            -> RoutingSlip a0
            -> IO ()
setDelivery prop =
  propertySet "Delivery"
              [inEnum prop]

getTrackStatus :: RoutingSlip a0
               -> IO Bool
getTrackStatus =
  propertyGet "TrackStatus"
              []
              outBool

setTrackStatus :: Bool
               -> RoutingSlip a0
               -> IO ()
setTrackStatus prop =
  propertySet "TrackStatus"
              [inBool prop]

getProtect :: RoutingSlip a0
           -> IO WdProtectionType
getProtect =
  propertyGet "Protect"
              []
              outEnum

setProtect :: WdProtectionType
           -> RoutingSlip a0
           -> IO ()
setProtect prop =
  propertySet "Protect"
              [inEnum prop]

getReturnWhenDone :: RoutingSlip a0
                  -> IO Bool
getReturnWhenDone =
  propertyGet "ReturnWhenDone"
              []
              outBool

setReturnWhenDone :: Bool
                  -> RoutingSlip a0
                  -> IO ()
setReturnWhenDone prop =
  propertySet "ReturnWhenDone"
              [inBool prop]

getStatus :: RoutingSlip a0
          -> IO WdRoutingSlipStatus
getStatus =
  propertyGet "Status"
              []
              outEnum

getRecipients :: (Variant a1, Variant a2)
              => a2
              -> RoutingSlip a0
              -> IO a1
getRecipients index =
  propertyGet "Recipients"
              [inVariant index]
              outVariant

reset :: RoutingSlip a0
      -> IO ()
reset =
  method0 "Reset"
          []

addRecipient :: String
             -> RoutingSlip a0
             -> IO ()
addRecipient recipient =
  method0 "AddRecipient"
          [inString recipient]

-- --------------------------------------------------
-- 
-- interface Bookmark
-- 
-- --------------------------------------------------
data Bookmark_ a = Bookmark__ 
type Bookmark a = IDispatch (Bookmark_ a)
iidBookmark :: IID (Bookmark ())
iidBookmark = mkIID "{00020968-0000-0000-C000-000000000046}"

getName4 :: Bookmark a0
         -> IO String
getName4 =
  propertyGet "Name"
              []
              outString

getRange :: Bookmark a0
         -> IO (Range ())
getRange =
  propertyGet "Range"
              []
              outIUnknown

getEmpty :: Bookmark a0
         -> IO Bool
getEmpty =
  propertyGet "Empty"
              []
              outBool

getStart :: Bookmark a0
         -> IO Int32
getStart =
  propertyGet "Start"
              []
              outInt32

setStart :: Int32
         -> Bookmark a0
         -> IO ()
setStart prop =
  propertySet "Start"
              [inInt32 prop]

getEnd :: Bookmark a0
       -> IO Int32
getEnd =
  propertyGet "End"
              []
              outInt32

setEnd :: Int32
       -> Bookmark a0
       -> IO ()
setEnd prop =
  propertySet "End"
              [inInt32 prop]

getColumn :: Bookmark a0
          -> IO Bool
getColumn =
  propertyGet "Column"
              []
              outBool

getStoryType :: Bookmark a0
             -> IO WdStoryType
getStoryType =
  propertyGet "StoryType"
              []
              outEnum

getApplication9 :: Bookmark a0
                -> IO (Maybe Application)
getApplication9 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 16 iptr
    doThenFree free (readunique readApplication) prop

getCreator9 :: Bookmark a0
            -> IO Int32
getCreator9 =
  propertyGet "Creator"
              []
              outInt32

getParent9 :: Bookmark a0
           -> IO (IDispatch ())
getParent9 =
  propertyGet "Parent"
              []
              outIDispatch

select0 :: Bookmark a0
        -> IO ()
select0 =
  method0 "Select"
          []

delete :: Bookmark a0
       -> IO ()
delete =
  method0 "Delete"
          []

copy :: String
     -> Bookmark a0
     -> IO (Bookmark ())
copy name =
  function1 "Copy"
            [inString name]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Bookmarks
-- 
-- --------------------------------------------------
data Bookmarks_ a = Bookmarks__ 
type Bookmarks a = IDispatch (Bookmarks_ a)
iidBookmarks :: IID (Bookmarks ())
iidBookmarks = mkIID "{00020967-0000-0000-C000-000000000046}"

getNewEnum3 :: Bookmarks a0
            -> IO (IUnknown ())
getNewEnum3 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount3 :: Bookmarks a0
          -> IO Int32
getCount3 =
  propertyGet "Count"
              []
              outInt32

getDefaultSorting :: Bookmarks a0
                  -> IO WdBookmarkSortBy
getDefaultSorting =
  propertyGet "DefaultSorting"
              []
              outEnum

setDefaultSorting :: WdBookmarkSortBy
                  -> Bookmarks a0
                  -> IO ()
setDefaultSorting prop =
  propertySet "DefaultSorting"
              [inEnum prop]

getShowHidden :: Bookmarks a0
              -> IO Bool
getShowHidden =
  propertyGet "ShowHidden"
              []
              outBool

setShowHidden :: Bool
              -> Bookmarks a0
              -> IO ()
setShowHidden prop =
  propertySet "ShowHidden"
              [inBool prop]

getApplication10 :: Bookmarks a0
                 -> IO (Maybe Application)
getApplication10 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 13 iptr
    doThenFree free (readunique readApplication) prop

getCreator10 :: Bookmarks a0
             -> IO Int32
getCreator10 =
  propertyGet "Creator"
              []
              outInt32

getParent10 :: Bookmarks a0
            -> IO (IDispatch ())
getParent10 =
  propertyGet "Parent"
              []
              outIDispatch

item3 :: (Variant a1)
      => a1
      -> Bookmarks a0
      -> IO (Bookmark ())
item3 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add0 :: (Variant a1)
     => String
     -> a1
     -> Bookmarks a0
     -> IO (Bookmark ())
add0 name range0 =
  function1 "Add"
            [ inString name
            , inVariant range0
            ]
            outIDispatch

exists :: String
       -> Bookmarks a0
       -> IO Bool
exists name =
  function1 "Exists"
            [inString name]
            outBool

-- --------------------------------------------------
-- 
-- interface Variable
-- 
-- --------------------------------------------------
data Variable_ a = Variable__ 
type Variable a = IDispatch (Variable_ a)
iidVariable :: IID (Variable ())
iidVariable = mkIID "{00020966-0000-0000-C000-000000000046}"

getApplication11 :: Variable a0
                 -> IO (Maybe Application)
getApplication11 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator11 :: Variable a0
             -> IO Int32
getCreator11 =
  propertyGet "Creator"
              []
              outInt32

getParent11 :: Variable a0
            -> IO (IDispatch ())
getParent11 =
  propertyGet "Parent"
              []
              outIDispatch

getName5 :: Variable a0
         -> IO String
getName5 =
  propertyGet "Name"
              []
              outString

getValue :: Variable a0
         -> IO String
getValue =
  propertyGet "Value"
              []
              outString

setValue :: String
         -> Variable a0
         -> IO ()
setValue prop =
  propertySet "Value"
              [inString prop]

getIndex :: Variable a0
         -> IO Int32
getIndex =
  propertyGet "Index"
              []
              outInt32

delete0 :: Variable a0
        -> IO ()
delete0 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Variables
-- 
-- --------------------------------------------------
data Variables_ a = Variables__ 
type Variables a = IDispatch (Variables_ a)
iidVariables :: IID (Variables ())
iidVariables = mkIID "{00020965-0000-0000-C000-000000000046}"

getNewEnum4 :: Variables a0
            -> IO (IUnknown ())
getNewEnum4 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount4 :: Variables a0
          -> IO Int32
getCount4 =
  propertyGet "Count"
              []
              outInt32

getApplication12 :: Variables a0
                 -> IO (Maybe Application)
getApplication12 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator12 :: Variables a0
             -> IO Int32
getCreator12 =
  propertyGet "Creator"
              []
              outInt32

getParent12 :: Variables a0
            -> IO (IDispatch ())
getParent12 =
  propertyGet "Parent"
              []
              outIDispatch

item4 :: (Variant a1)
      => a1
      -> Variables a0
      -> IO (Variable ())
item4 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add1 :: (Variant a1)
     => String
     -> a1
     -> Variables a0
     -> IO (Variable ())
add1 name value =
  function1 "Add"
            [ inString name
            , inVariant value
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface RecentFile
-- 
-- --------------------------------------------------
data RecentFile_ a = RecentFile__ 
type RecentFile a = IDispatch (RecentFile_ a)
iidRecentFile :: IID (RecentFile ())
iidRecentFile = mkIID "{00020964-0000-0000-C000-000000000046}"

getApplication13 :: RecentFile a0
                 -> IO (Maybe Application)
getApplication13 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator13 :: RecentFile a0
             -> IO Int32
getCreator13 =
  propertyGet "Creator"
              []
              outInt32

getParent13 :: RecentFile a0
            -> IO (IDispatch ())
getParent13 =
  propertyGet "Parent"
              []
              outIDispatch

getName6 :: RecentFile a0
         -> IO String
getName6 =
  propertyGet "Name"
              []
              outString

getIndex0 :: RecentFile a0
          -> IO Int32
getIndex0 =
  propertyGet "Index"
              []
              outInt32

getReadOnly0 :: RecentFile a0
             -> IO Bool
getReadOnly0 =
  propertyGet "ReadOnly"
              []
              outBool

setReadOnly :: Bool
            -> RecentFile a0
            -> IO ()
setReadOnly prop =
  propertySet "ReadOnly"
              [inBool prop]

getPath2 :: RecentFile a0
         -> IO String
getPath2 =
  propertyGet "Path"
              []
              outString

open0 :: RecentFile a0
      -> IO (Maybe Document)
open0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 15 iptr
    doThenFree free (readunique readDocument) prop

delete1 :: RecentFile a0
        -> IO ()
delete1 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface RecentFiles
-- 
-- --------------------------------------------------
data RecentFiles_ a = RecentFiles__ 
type RecentFiles a = IDispatch (RecentFiles_ a)
iidRecentFiles :: IID (RecentFiles ())
iidRecentFiles = mkIID "{00020963-0000-0000-C000-000000000046}"

getApplication14 :: RecentFiles a0
                 -> IO (Maybe Application)
getApplication14 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator14 :: RecentFiles a0
             -> IO Int32
getCreator14 =
  propertyGet "Creator"
              []
              outInt32

getParent14 :: RecentFiles a0
            -> IO (IDispatch ())
getParent14 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum5 :: RecentFiles a0
            -> IO (IUnknown ())
getNewEnum5 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount5 :: RecentFiles a0
          -> IO Int32
getCount5 =
  propertyGet "Count"
              []
              outInt32

getMaximum :: RecentFiles a0
           -> IO Int32
getMaximum =
  propertyGet "Maximum"
              []
              outInt32

setMaximum :: Int32
           -> RecentFiles a0
           -> IO ()
setMaximum prop =
  propertySet "Maximum"
              [inInt32 prop]

item5 :: Int32
      -> RecentFiles a0
      -> IO (RecentFile ())
item5 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add2 :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> RecentFiles a0
     -> IO (RecentFile ())
add2 document readOnly =
  function1 "Add"
            [ inVariant document
            , inVariant readOnly
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Window
-- 
-- --------------------------------------------------
data Window_ a = Window__ 
type Window a = IDispatch (Window_ a)
iidWindow :: IID (Window ())
iidWindow = mkIID "{00020962-0000-0000-C000-000000000046}"

getApplication15 :: Window a0
                 -> IO (Maybe Application)
getApplication15 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator15 :: Window a0
             -> IO Int32
getCreator15 =
  propertyGet "Creator"
              []
              outInt32

getParent15 :: Window a0
            -> IO (IDispatch ())
getParent15 =
  propertyGet "Parent"
              []
              outIDispatch

getActivePane :: Window a0
              -> IO (Pane ())
getActivePane =
  propertyGet "ActivePane"
              []
              outIUnknown

getDocument :: Window a0
            -> IO (Maybe Document)
getDocument iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 11 iptr
    doThenFree free (readunique readDocument) prop

getPanes :: Window a0
         -> IO (Panes ())
getPanes =
  propertyGet "Panes"
              []
              outIUnknown

getSelection1 :: Window a0
              -> IO (Selection ())
getSelection1 =
  propertyGet "Selection"
              []
              outIUnknown

getLeft0 :: Window a0
         -> IO Int32
getLeft0 =
  propertyGet "Left"
              []
              outInt32

setLeft0 :: Int32
         -> Window a0
         -> IO ()
setLeft0 prop =
  propertySet "Left"
              [inInt32 prop]

getTop0 :: Window a0
        -> IO Int32
getTop0 =
  propertyGet "Top"
              []
              outInt32

setTop0 :: Int32
        -> Window a0
        -> IO ()
setTop0 prop =
  propertySet "Top"
              [inInt32 prop]

getWidth0 :: Window a0
          -> IO Int32
getWidth0 =
  propertyGet "Width"
              []
              outInt32

setWidth0 :: Int32
          -> Window a0
          -> IO ()
setWidth0 prop =
  propertySet "Width"
              [inInt32 prop]

getHeight0 :: Window a0
           -> IO Int32
getHeight0 =
  propertyGet "Height"
              []
              outInt32

setHeight0 :: Int32
           -> Window a0
           -> IO ()
setHeight0 prop =
  propertySet "Height"
              [inInt32 prop]

getSplit :: Window a0
         -> IO Bool
getSplit =
  propertyGet "Split"
              []
              outBool

setSplit :: Bool
         -> Window a0
         -> IO ()
setSplit prop =
  propertySet "Split"
              [inBool prop]

getSplitVertical :: Window a0
                 -> IO Int32
getSplitVertical =
  propertyGet "SplitVertical"
              []
              outInt32

setSplitVertical :: Int32
                 -> Window a0
                 -> IO ()
setSplitVertical prop =
  propertySet "SplitVertical"
              [inInt32 prop]

getCaption0 :: Window a0
            -> IO String
getCaption0 =
  propertyGet "Caption"
              []
              outString

setCaption0 :: String
            -> Window a0
            -> IO ()
setCaption0 prop =
  propertySet "Caption"
              [inString prop]

getWindowState0 :: Window a0
                -> IO WdWindowState
getWindowState0 =
  propertyGet "WindowState"
              []
              outEnum

setWindowState0 :: WdWindowState
                -> Window a0
                -> IO ()
setWindowState0 prop =
  propertySet "WindowState"
              [inEnum prop]

getDisplayRulers :: Window a0
                 -> IO Bool
getDisplayRulers =
  propertyGet "DisplayRulers"
              []
              outBool

setDisplayRulers :: Bool
                 -> Window a0
                 -> IO ()
setDisplayRulers prop =
  propertySet "DisplayRulers"
              [inBool prop]

getDisplayVerticalRuler :: Window a0
                        -> IO Bool
getDisplayVerticalRuler =
  propertyGet "DisplayVerticalRuler"
              []
              outBool

setDisplayVerticalRuler :: Bool
                        -> Window a0
                        -> IO ()
setDisplayVerticalRuler prop =
  propertySet "DisplayVerticalRuler"
              [inBool prop]

getView :: Window a0
        -> IO (View ())
getView =
  propertyGet "View"
              []
              outIUnknown

getType1 :: Window a0
         -> IO WdWindowType
getType1 =
  propertyGet "Type"
              []
              outEnum

getNext :: Window a0
        -> IO (Window ())
getNext =
  propertyGet "Next"
              []
              outIDispatch

getPrevious :: Window a0
            -> IO (Window ())
getPrevious =
  propertyGet "Previous"
              []
              outIDispatch

getWindowNumber :: Window a0
                -> IO Int32
getWindowNumber =
  propertyGet "WindowNumber"
              []
              outInt32

getDisplayVerticalScrollBar :: Window a0
                            -> IO Bool
getDisplayVerticalScrollBar =
  propertyGet "DisplayVerticalScrollBar"
              []
              outBool

setDisplayVerticalScrollBar :: Bool
                            -> Window a0
                            -> IO ()
setDisplayVerticalScrollBar prop =
  propertySet "DisplayVerticalScrollBar"
              [inBool prop]

getDisplayHorizontalScrollBar :: Window a0
                              -> IO Bool
getDisplayHorizontalScrollBar =
  propertyGet "DisplayHorizontalScrollBar"
              []
              outBool

setDisplayHorizontalScrollBar :: Bool
                              -> Window a0
                              -> IO ()
setDisplayHorizontalScrollBar prop =
  propertySet "DisplayHorizontalScrollBar"
              [inBool prop]

getStyleAreaWidth :: Window a0
                  -> IO Float
getStyleAreaWidth =
  propertyGet "StyleAreaWidth"
              []
              outFloat

setStyleAreaWidth :: Float
                  -> Window a0
                  -> IO ()
setStyleAreaWidth prop =
  propertySet "StyleAreaWidth"
              [inFloat prop]

getDisplayScreenTips0 :: Window a0
                      -> IO Bool
getDisplayScreenTips0 =
  propertyGet "DisplayScreenTips"
              []
              outBool

setDisplayScreenTips0 :: Bool
                      -> Window a0
                      -> IO ()
setDisplayScreenTips0 prop =
  propertySet "DisplayScreenTips"
              [inBool prop]

getHorizontalPercentScrolled :: Window a0
                             -> IO Int32
getHorizontalPercentScrolled =
  propertyGet "HorizontalPercentScrolled"
              []
              outInt32

setHorizontalPercentScrolled :: Int32
                             -> Window a0
                             -> IO ()
setHorizontalPercentScrolled prop =
  propertySet "HorizontalPercentScrolled"
              [inInt32 prop]

getVerticalPercentScrolled :: Window a0
                           -> IO Int32
getVerticalPercentScrolled =
  propertyGet "VerticalPercentScrolled"
              []
              outInt32

setVerticalPercentScrolled :: Int32
                           -> Window a0
                           -> IO ()
setVerticalPercentScrolled prop =
  propertySet "VerticalPercentScrolled"
              [inInt32 prop]

getDocumentMap :: Window a0
               -> IO Bool
getDocumentMap =
  propertyGet "DocumentMap"
              []
              outBool

setDocumentMap :: Bool
               -> Window a0
               -> IO ()
setDocumentMap prop =
  propertySet "DocumentMap"
              [inBool prop]

getActive :: Window a0
          -> IO Bool
getActive =
  propertyGet "Active"
              []
              outBool

getDocumentMapPercentWidth :: Window a0
                           -> IO Int32
getDocumentMapPercentWidth =
  propertyGet "DocumentMapPercentWidth"
              []
              outInt32

setDocumentMapPercentWidth :: Int32
                           -> Window a0
                           -> IO ()
setDocumentMapPercentWidth prop =
  propertySet "DocumentMapPercentWidth"
              [inInt32 prop]

getIndex1 :: Window a0
          -> IO Int32
getIndex1 =
  propertyGet "Index"
              []
              outInt32

getIMEMode :: Window a0
           -> IO WdIMEMode
getIMEMode =
  propertyGet "IMEMode"
              []
              outEnum

setIMEMode :: WdIMEMode
           -> Window a0
           -> IO ()
setIMEMode prop =
  propertySet "IMEMode"
              [inEnum prop]

activate1 :: Window a0
          -> IO ()
activate1 =
  method0 "Activate"
          []

close1 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Window a0
       -> IO ()
close1 saveChanges routeDocument =
  method0 "Close"
          [ inVariant saveChanges
          , inVariant routeDocument
          ]

largeScroll :: (Variant a1, Variant a2, Variant a3, Variant a4)
            => a1
            -> a2
            -> a3
            -> a4
            -> Window a0
            -> IO ()
largeScroll down up toRight toLeft =
  method0 "LargeScroll"
          [ inVariant down
          , inVariant up
          , inVariant toRight
          , inVariant toLeft
          ]

smallScroll :: (Variant a1, Variant a2, Variant a3, Variant a4)
            => a1
            -> a2
            -> a3
            -> a4
            -> Window a0
            -> IO ()
smallScroll down up toRight toLeft =
  method0 "SmallScroll"
          [ inVariant down
          , inVariant up
          , inVariant toRight
          , inVariant toLeft
          ]

newWindow1 :: Window a0
           -> IO (Window ())
newWindow1 =
  function1 "NewWindow"
            []
            outIDispatch

printOutOld1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> Window a0
             -> IO ()
printOutOld1 background append range0 outputFileName from to item6 copies pages pageType printToFile collate activePrinterMacGX manualDuplexPrint =
  method0 "PrintOutOld"
          [ inVariant background
          , inVariant append
          , inVariant range0
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item6
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          ]

pageScroll :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Window a0
           -> IO ()
pageScroll down up =
  method0 "PageScroll"
          [ inVariant down
          , inVariant up
          ]

setFocus :: Window a0
         -> IO ()
setFocus =
  method0 "SetFocus"
          []

rangeFromPoint :: Int32
               -> Int32
               -> Window a0
               -> IO (IDispatch ())
rangeFromPoint x y =
  function1 "RangeFromPoint"
            [ inInt32 x
            , inInt32 y
            ]
            outIDispatch

scrollIntoView :: (Variant a2)
               => IDispatch a1
               -> a2
               -> Window a0
               -> IO ()
scrollIntoView obj start =
  method0 "ScrollIntoView"
          [ inIDispatch obj
          , inVariant start
          ]

getPoint :: IDispatch a1
         -> Window a0
         -> IO (Int32, Int32, Int32, Int32)
getPoint obj =
  method4 "GetPoint"
          [inIDispatch obj]
          outInt32
          outInt32
          outInt32
          outInt32

printOut20001 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> a12
              -> a13
              -> a14
              -> a15
              -> a16
              -> a17
              -> a18
              -> Window a0
              -> IO ()
printOut20001 background append range0 outputFileName from to item6 copies pages pageType printToFile collate activePrinterMacGX manualDuplexPrint printZoomColumn printZoomRow printZoomPaperWidth printZoomPaperHeight =
  method0 "PrintOut2000"
          [ inVariant background
          , inVariant append
          , inVariant range0
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item6
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          , inVariant printZoomColumn
          , inVariant printZoomRow
          , inVariant printZoomPaperWidth
          , inVariant printZoomPaperHeight
          ]

getUsableWidth0 :: Window a0
                -> IO Int32
getUsableWidth0 =
  propertyGet "UsableWidth"
              []
              outInt32

getUsableHeight0 :: Window a0
                 -> IO Int32
getUsableHeight0 =
  propertyGet "UsableHeight"
              []
              outInt32

getEnvelopeVisible :: Window a0
                   -> IO Bool
getEnvelopeVisible =
  propertyGet "EnvelopeVisible"
              []
              outBool

setEnvelopeVisible :: Bool
                   -> Window a0
                   -> IO ()
setEnvelopeVisible prop =
  propertySet "EnvelopeVisible"
              [inBool prop]

getDisplayRightRuler :: Window a0
                     -> IO Bool
getDisplayRightRuler =
  propertyGet "DisplayRightRuler"
              []
              outBool

setDisplayRightRuler :: Bool
                     -> Window a0
                     -> IO ()
setDisplayRightRuler prop =
  propertySet "DisplayRightRuler"
              [inBool prop]

getDisplayLeftScrollBar :: Window a0
                        -> IO Bool
getDisplayLeftScrollBar =
  propertyGet "DisplayLeftScrollBar"
              []
              outBool

setDisplayLeftScrollBar :: Bool
                        -> Window a0
                        -> IO ()
setDisplayLeftScrollBar prop =
  propertySet "DisplayLeftScrollBar"
              [inBool prop]

getVisible0 :: Window a0
            -> IO Bool
getVisible0 =
  propertyGet "Visible"
              []
              outBool

setVisible0 :: Bool
            -> Window a0
            -> IO ()
setVisible0 prop =
  propertySet "Visible"
              [inBool prop]

printOut1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> Window a0
          -> IO ()
printOut1 background append range0 outputFileName from to item6 copies pages pageType printToFile collate activePrinterMacGX manualDuplexPrint printZoomColumn printZoomRow printZoomPaperWidth printZoomPaperHeight =
  method0 "PrintOut"
          [ inVariant background
          , inVariant append
          , inVariant range0
          , inVariant outputFileName
          , inVariant from
          , inVariant to
          , inVariant item6
          , inVariant copies
          , inVariant pages
          , inVariant pageType
          , inVariant printToFile
          , inVariant collate
          , inVariant activePrinterMacGX
          , inVariant manualDuplexPrint
          , inVariant printZoomColumn
          , inVariant printZoomRow
          , inVariant printZoomPaperWidth
          , inVariant printZoomPaperHeight
          ]

toggleShowAllReviewers :: Window a0
                       -> IO ()
toggleShowAllReviewers =
  method0 "ToggleShowAllReviewers"
          []

getThumbnails :: Window a0
              -> IO Bool
getThumbnails =
  propertyGet "Thumbnails"
              []
              outBool

setThumbnails :: Bool
              -> Window a0
              -> IO ()
setThumbnails prop =
  propertySet "Thumbnails"
              [inBool prop]

getShowSourceDocuments :: Window a0
                       -> IO WdShowSourceDocuments
getShowSourceDocuments =
  propertyGet "ShowSourceDocuments"
              []
              outEnum

setShowSourceDocuments :: WdShowSourceDocuments
                       -> Window a0
                       -> IO ()
setShowSourceDocuments prop =
  propertySet "ShowSourceDocuments"
              [inEnum prop]

toggleRibbon :: Window a0
             -> IO ()
toggleRibbon =
  method0 "ToggleRibbon"
          []

-- --------------------------------------------------
-- 
-- interface Windows
-- 
-- --------------------------------------------------
data Windows_ a = Windows__ 
type Windows a = IDispatch (Windows_ a)
iidWindows :: IID (Windows ())
iidWindows = mkIID "{00020961-0000-0000-C000-000000000046}"

getNewEnum6 :: Windows a0
            -> IO (IUnknown ())
getNewEnum6 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount6 :: Windows a0
          -> IO Int32
getCount6 =
  propertyGet "Count"
              []
              outInt32

getApplication16 :: Windows a0
                 -> IO (Maybe Application)
getApplication16 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator16 :: Windows a0
             -> IO Int32
getCreator16 =
  propertyGet "Creator"
              []
              outInt32

getParent16 :: Windows a0
            -> IO (IDispatch ())
getParent16 =
  propertyGet "Parent"
              []
              outIDispatch

item6 :: (Variant a1)
      => a1
      -> Windows a0
      -> IO (Window ())
item6 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add3 :: (Variant a1)
     => a1
     -> Windows a0
     -> IO (Window ())
add3 window =
  function1 "Add"
            [inVariant window]
            outIDispatch

arrange :: (Variant a1)
        => a1
        -> Windows a0
        -> IO ()
arrange arrangeStyle =
  method0 "Arrange"
          [inVariant arrangeStyle]

compareSideBySideWith :: (Variant a1)
                      => a1
                      -> Windows a0
                      -> IO Bool
compareSideBySideWith document =
  function1 "CompareSideBySideWith"
            [inVariant document]
            outBool

breakSideBySide :: Windows a0
                -> IO Bool
breakSideBySide =
  function1 "BreakSideBySide"
            []
            outBool

resetPositionsSideBySide :: Windows a0
                         -> IO ()
resetPositionsSideBySide =
  method0 "ResetPositionsSideBySide"
          []

getSyncScrollingSideBySide :: Windows a0
                           -> IO Bool
getSyncScrollingSideBySide =
  propertyGet "SyncScrollingSideBySide"
              []
              outBool

setSyncScrollingSideBySide :: Bool
                           -> Windows a0
                           -> IO ()
setSyncScrollingSideBySide prop =
  propertySet "SyncScrollingSideBySide"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface Pane
-- 
-- --------------------------------------------------
data Pane_ a = Pane__ 
type Pane a = IDispatch (Pane_ a)
iidPane :: IID (Pane ())
iidPane = mkIID "{00020960-0000-0000-C000-000000000046}"

getApplication17 :: Pane a0
                 -> IO (Maybe Application)
getApplication17 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator17 :: Pane a0
             -> IO Int32
getCreator17 =
  propertyGet "Creator"
              []
              outInt32

getParent17 :: Pane a0
            -> IO (IDispatch ())
getParent17 =
  propertyGet "Parent"
              []
              outIDispatch

getDocument0 :: Pane a0
             -> IO (Maybe Document)
getDocument0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 10 iptr
    doThenFree free (readunique readDocument) prop

getSelection2 :: Pane a0
              -> IO (Selection ())
getSelection2 =
  propertyGet "Selection"
              []
              outIUnknown

getDisplayRulers0 :: Pane a0
                  -> IO Bool
getDisplayRulers0 =
  propertyGet "DisplayRulers"
              []
              outBool

setDisplayRulers0 :: Bool
                  -> Pane a0
                  -> IO ()
setDisplayRulers0 prop =
  propertySet "DisplayRulers"
              [inBool prop]

getDisplayVerticalRuler0 :: Pane a0
                         -> IO Bool
getDisplayVerticalRuler0 =
  propertyGet "DisplayVerticalRuler"
              []
              outBool

setDisplayVerticalRuler0 :: Bool
                         -> Pane a0
                         -> IO ()
setDisplayVerticalRuler0 prop =
  propertySet "DisplayVerticalRuler"
              [inBool prop]

getZooms :: Pane a0
         -> IO (Zooms ())
getZooms =
  propertyGet "Zooms"
              []
              outIUnknown

getIndex2 :: Pane a0
          -> IO Int32
getIndex2 =
  propertyGet "Index"
              []
              outInt32

getView0 :: Pane a0
         -> IO (View ())
getView0 =
  propertyGet "View"
              []
              outIUnknown

getNext0 :: Pane a0
         -> IO (Pane ())
getNext0 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious0 :: Pane a0
             -> IO (Pane ())
getPrevious0 =
  propertyGet "Previous"
              []
              outIDispatch

getHorizontalPercentScrolled0 :: Pane a0
                              -> IO Int32
getHorizontalPercentScrolled0 =
  propertyGet "HorizontalPercentScrolled"
              []
              outInt32

setHorizontalPercentScrolled0 :: Int32
                              -> Pane a0
                              -> IO ()
setHorizontalPercentScrolled0 prop =
  propertySet "HorizontalPercentScrolled"
              [inInt32 prop]

getVerticalPercentScrolled0 :: Pane a0
                            -> IO Int32
getVerticalPercentScrolled0 =
  propertyGet "VerticalPercentScrolled"
              []
              outInt32

setVerticalPercentScrolled0 :: Int32
                            -> Pane a0
                            -> IO ()
setVerticalPercentScrolled0 prop =
  propertySet "VerticalPercentScrolled"
              [inInt32 prop]

getMinimumFontSize :: Pane a0
                   -> IO Int32
getMinimumFontSize =
  propertyGet "MinimumFontSize"
              []
              outInt32

setMinimumFontSize :: Int32
                   -> Pane a0
                   -> IO ()
setMinimumFontSize prop =
  propertySet "MinimumFontSize"
              [inInt32 prop]

getBrowseToWindow :: Pane a0
                  -> IO Bool
getBrowseToWindow =
  propertyGet "BrowseToWindow"
              []
              outBool

setBrowseToWindow :: Bool
                  -> Pane a0
                  -> IO ()
setBrowseToWindow prop =
  propertySet "BrowseToWindow"
              [inBool prop]

getBrowseWidth :: Pane a0
               -> IO Int32
getBrowseWidth =
  propertyGet "BrowseWidth"
              []
              outInt32

activate2 :: Pane a0
          -> IO ()
activate2 =
  method0 "Activate"
          []

close2 :: Pane a0
       -> IO ()
close2 =
  method0 "Close"
          []

largeScroll0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
             => a1
             -> a2
             -> a3
             -> a4
             -> Pane a0
             -> IO ()
largeScroll0 down up toRight toLeft =
  method0 "LargeScroll"
          [ inVariant down
          , inVariant up
          , inVariant toRight
          , inVariant toLeft
          ]

smallScroll0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
             => a1
             -> a2
             -> a3
             -> a4
             -> Pane a0
             -> IO ()
smallScroll0 down up toRight toLeft =
  method0 "SmallScroll"
          [ inVariant down
          , inVariant up
          , inVariant toRight
          , inVariant toLeft
          ]

autoScroll :: Int32
           -> Pane a0
           -> IO ()
autoScroll velocity =
  method0 "AutoScroll"
          [inInt32 velocity]

pageScroll0 :: (Variant a1, Variant a2)
            => a1
            -> a2
            -> Pane a0
            -> IO ()
pageScroll0 down up =
  method0 "PageScroll"
          [ inVariant down
          , inVariant up
          ]

newFrameset :: Pane a0
            -> IO ()
newFrameset =
  method0 "NewFrameset"
          []

tOCInFrameset :: Pane a0
              -> IO ()
tOCInFrameset =
  method0 "TOCInFrameset"
          []

getFrameset0 :: Pane a0
             -> IO (Frameset ())
getFrameset0 =
  propertyGet "Frameset"
              []
              outIUnknown

getPages :: Pane a0
         -> IO (Pages ())
getPages =
  propertyGet "Pages"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface Panes
-- 
-- --------------------------------------------------
data Panes_ a = Panes__ 
type Panes a = IDispatch (Panes_ a)
iidPanes :: IID (Panes ())
iidPanes = mkIID "{0002095F-0000-0000-C000-000000000046}"

getNewEnum7 :: Panes a0
            -> IO (IUnknown ())
getNewEnum7 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount7 :: Panes a0
          -> IO Int32
getCount7 =
  propertyGet "Count"
              []
              outInt32

getApplication18 :: Panes a0
                 -> IO (Maybe Application)
getApplication18 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator18 :: Panes a0
             -> IO Int32
getCreator18 =
  propertyGet "Creator"
              []
              outInt32

getParent18 :: Panes a0
            -> IO (IDispatch ())
getParent18 =
  propertyGet "Parent"
              []
              outIDispatch

item7 :: Int32
      -> Panes a0
      -> IO (Pane ())
item7 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add4 :: (Variant a1)
     => a1
     -> Panes a0
     -> IO (Pane ())
add4 splitVertical =
  function1 "Add"
            [inVariant splitVertical]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Range
-- 
-- --------------------------------------------------
data Range_ a = Range__ 
type Range a = IDispatch (Range_ a)
iidRange :: IID (Range ())
iidRange = mkIID "{0002095E-0000-0000-C000-000000000046}"

getText :: Range a0
        -> IO String
getText =
  propertyGet "Text"
              []
              outString

setText :: String
        -> Range a0
        -> IO ()
setText prop =
  propertySet "Text"
              [inString prop]

getFormattedText :: Range a0
                 -> IO (Range ())
getFormattedText =
  propertyGet "FormattedText"
              []
              outIDispatch

setFormattedText :: Range a1
                 -> Range a0
                 -> IO ()
setFormattedText prop =
  propertySet "FormattedText"
              [inIDispatch prop]

getStart0 :: Range a0
          -> IO Int32
getStart0 =
  propertyGet "Start"
              []
              outInt32

setStart0 :: Int32
          -> Range a0
          -> IO ()
setStart0 prop =
  propertySet "Start"
              [inInt32 prop]

getEnd0 :: Range a0
        -> IO Int32
getEnd0 =
  propertyGet "End"
              []
              outInt32

setEnd0 :: Int32
        -> Range a0
        -> IO ()
setEnd0 prop =
  propertySet "End"
              [inInt32 prop]

getFont :: Range a0
        -> IO (Maybe Font)
getFont iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 15 iptr
    doThenFree free (readunique readFont) prop

foreign import stdcall "dynamic" prim_Word_getFont :: Ptr () -> Ptr () -> Ptr (Ptr Font) -> IO Int32
setFont :: Font
        -> Range a0
        -> IO ()
setFont prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 16 iptr
    free prop

foreign import stdcall "dynamic" prim_Word_setFont :: Ptr () -> Ptr () -> Ptr Font -> IO Int32
getDuplicate :: Range a0
             -> IO (Range ())
getDuplicate =
  propertyGet "Duplicate"
              []
              outIDispatch

getStoryType0 :: Range a0
              -> IO WdStoryType
getStoryType0 =
  propertyGet "StoryType"
              []
              outEnum

getTables0 :: Range a0
           -> IO (Tables ())
getTables0 =
  propertyGet "Tables"
              []
              outIUnknown

getWords0 :: Range a0
          -> IO (Words ())
getWords0 =
  propertyGet "Words"
              []
              outIUnknown

getSentences0 :: Range a0
              -> IO (Sentences ())
getSentences0 =
  propertyGet "Sentences"
              []
              outIUnknown

getCharacters0 :: Range a0
               -> IO (Characters ())
getCharacters0 =
  propertyGet "Characters"
              []
              outIUnknown

getFootnotes0 :: Range a0
              -> IO (Footnotes ())
getFootnotes0 =
  propertyGet "Footnotes"
              []
              outIUnknown

getEndnotes0 :: Range a0
             -> IO (Endnotes ())
getEndnotes0 =
  propertyGet "Endnotes"
              []
              outIUnknown

getComments0 :: Range a0
             -> IO (Comments ())
getComments0 =
  propertyGet "Comments"
              []
              outIUnknown

getCells :: Range a0
         -> IO (Cells ())
getCells =
  propertyGet "Cells"
              []
              outIUnknown

getSections0 :: Range a0
             -> IO (Sections ())
getSections0 =
  propertyGet "Sections"
              []
              outIUnknown

getParagraphs0 :: Range a0
               -> IO (Paragraphs ())
getParagraphs0 =
  propertyGet "Paragraphs"
              []
              outIUnknown

getBorders :: Range a0
           -> IO (Borders ())
getBorders =
  propertyGet "Borders"
              []
              outIUnknown

setBorders :: Borders a1
           -> Range a0
           -> IO ()
setBorders prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading :: Range a0
           -> IO (Shading ())
getShading =
  propertyGet "Shading"
              []
              outIUnknown

getTextRetrievalMode :: Range a0
                     -> IO (TextRetrievalMode ())
getTextRetrievalMode =
  propertyGet "TextRetrievalMode"
              []
              outIUnknown

setTextRetrievalMode :: TextRetrievalMode a1
                     -> Range a0
                     -> IO ()
setTextRetrievalMode prop =
  propertySet "TextRetrievalMode"
              [inIUnknown prop]

getFields0 :: Range a0
           -> IO (Fields ())
getFields0 =
  propertyGet "Fields"
              []
              outIUnknown

getFormFields0 :: Range a0
               -> IO (FormFields ())
getFormFields0 =
  propertyGet "FormFields"
              []
              outIUnknown

getFrames0 :: Range a0
           -> IO (Frames ())
getFrames0 =
  propertyGet "Frames"
              []
              outIUnknown

getParagraphFormat :: Range a0
                   -> IO (Maybe ParagraphFormat)
getParagraphFormat iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 37 iptr
    doThenFree free (readunique readParagraphFormat) prop

foreign import stdcall "dynamic" prim_Word_getParagraphFormat :: Ptr () -> Ptr () -> Ptr (Ptr ParagraphFormat) -> IO Int32
setParagraphFormat :: ParagraphFormat
                   -> Range a0
                   -> IO ()
setParagraphFormat prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 38 iptr
    free prop

foreign import stdcall "dynamic" prim_Word_setParagraphFormat :: Ptr () -> Ptr () -> Ptr ParagraphFormat -> IO Int32
getListFormat :: Range a0
              -> IO (ListFormat ())
getListFormat =
  propertyGet "ListFormat"
              []
              outIUnknown

getBookmarks0 :: Range a0
              -> IO (Bookmarks ())
getBookmarks0 =
  propertyGet "Bookmarks"
              []
              outIDispatch

getApplication19 :: Range a0
                 -> IO (Maybe Application)
getApplication19 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 41 iptr
    doThenFree free (readunique readApplication) prop

getCreator19 :: Range a0
             -> IO Int32
getCreator19 =
  propertyGet "Creator"
              []
              outInt32

getParent19 :: Range a0
            -> IO (IDispatch ())
getParent19 =
  propertyGet "Parent"
              []
              outIDispatch

getBold :: Range a0
        -> IO Int32
getBold =
  propertyGet "Bold"
              []
              outInt32

setBold :: Int32
        -> Range a0
        -> IO ()
setBold prop =
  propertySet "Bold"
              [inInt32 prop]

getItalic :: Range a0
          -> IO Int32
getItalic =
  propertyGet "Italic"
              []
              outInt32

setItalic :: Int32
          -> Range a0
          -> IO ()
setItalic prop =
  propertySet "Italic"
              [inInt32 prop]

getUnderline :: Range a0
             -> IO WdUnderline
getUnderline =
  propertyGet "Underline"
              []
              outEnum

setUnderline :: WdUnderline
             -> Range a0
             -> IO ()
setUnderline prop =
  propertySet "Underline"
              [inEnum prop]

getEmphasisMark :: Range a0
                -> IO WdEmphasisMark
getEmphasisMark =
  propertyGet "EmphasisMark"
              []
              outEnum

setEmphasisMark :: WdEmphasisMark
                -> Range a0
                -> IO ()
setEmphasisMark prop =
  propertySet "EmphasisMark"
              [inEnum prop]

getDisableCharacterSpaceGrid :: Range a0
                             -> IO Bool
getDisableCharacterSpaceGrid =
  propertyGet "DisableCharacterSpaceGrid"
              []
              outBool

setDisableCharacterSpaceGrid :: Bool
                             -> Range a0
                             -> IO ()
setDisableCharacterSpaceGrid prop =
  propertySet "DisableCharacterSpaceGrid"
              [inBool prop]

getRevisions0 :: Range a0
              -> IO (Revisions ())
getRevisions0 =
  propertyGet "Revisions"
              []
              outIUnknown

getStyle :: (Variant a1)
         => Range a0
         -> IO a1
getStyle =
  propertyGet "Style"
              []
              outVariant

setStyle :: (Variant a1)
         => a1
         -> Range a0
         -> IO ()
setStyle prop =
  propertySet "Style"
              [inVariant prop]

getStoryLength :: Range a0
               -> IO Int32
getStoryLength =
  propertyGet "StoryLength"
              []
              outInt32

getLanguageID0 :: Range a0
               -> IO WdLanguageID
getLanguageID0 =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID0 :: WdLanguageID
               -> Range a0
               -> IO ()
setLanguageID0 prop =
  propertySet "LanguageID"
              [inEnum prop]

getSynonymInfo1 :: Range a0
                -> IO (SynonymInfo ())
getSynonymInfo1 =
  propertyGet "SynonymInfo"
              []
              outIUnknown

getHyperlinks0 :: Range a0
               -> IO (Hyperlinks ())
getHyperlinks0 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

getListParagraphs0 :: Range a0
                   -> IO (ListParagraphs ())
getListParagraphs0 =
  propertyGet "ListParagraphs"
              []
              outIUnknown

getSubdocuments0 :: Range a0
                 -> IO (Subdocuments ())
getSubdocuments0 =
  propertyGet "Subdocuments"
              []
              outIUnknown

getGrammarChecked0 :: Range a0
                   -> IO Bool
getGrammarChecked0 =
  propertyGet "GrammarChecked"
              []
              outBool

setGrammarChecked0 :: Bool
                   -> Range a0
                   -> IO ()
setGrammarChecked0 prop =
  propertySet "GrammarChecked"
              [inBool prop]

getSpellingChecked0 :: Range a0
                    -> IO Bool
getSpellingChecked0 =
  propertyGet "SpellingChecked"
              []
              outBool

setSpellingChecked0 :: Bool
                    -> Range a0
                    -> IO ()
setSpellingChecked0 prop =
  propertySet "SpellingChecked"
              [inBool prop]

getHighlightColorIndex :: Range a0
                       -> IO WdColorIndex
getHighlightColorIndex =
  propertyGet "HighlightColorIndex"
              []
              outEnum

setHighlightColorIndex :: WdColorIndex
                       -> Range a0
                       -> IO ()
setHighlightColorIndex prop =
  propertySet "HighlightColorIndex"
              [inEnum prop]

getColumns :: Range a0
           -> IO (Columns ())
getColumns =
  propertyGet "Columns"
              []
              outIUnknown

getRows :: Range a0
        -> IO (Rows ())
getRows =
  propertyGet "Rows"
              []
              outIUnknown

getCanEdit :: Range a0
           -> IO Int32
getCanEdit =
  propertyGet "CanEdit"
              []
              outInt32

getCanPaste :: Range a0
            -> IO Int32
getCanPaste =
  propertyGet "CanPaste"
              []
              outInt32

getIsEndOfRowMark :: Range a0
                  -> IO Bool
getIsEndOfRowMark =
  propertyGet "IsEndOfRowMark"
              []
              outBool

getBookmarkID :: Range a0
              -> IO Int32
getBookmarkID =
  propertyGet "BookmarkID"
              []
              outInt32

getPreviousBookmarkID :: Range a0
                      -> IO Int32
getPreviousBookmarkID =
  propertyGet "PreviousBookmarkID"
              []
              outInt32

getFind :: Range a0
        -> IO (Find ())
getFind =
  propertyGet "Find"
              []
              outIUnknown

getPageSetup0 :: Range a0
              -> IO (PageSetup ())
getPageSetup0 =
  propertyGet "PageSetup"
              []
              outIUnknown

setPageSetup0 :: PageSetup a1
              -> Range a0
              -> IO ()
setPageSetup0 prop =
  propertySet "PageSetup"
              [inIUnknown prop]

getShapeRange :: Range a0
              -> IO (ShapeRange ())
getShapeRange =
  propertyGet "ShapeRange"
              []
              outIUnknown

getCase :: Range a0
        -> IO WdCharacterCase
getCase =
  propertyGet "Case"
              []
              outEnum

setCase :: WdCharacterCase
        -> Range a0
        -> IO ()
setCase prop =
  propertySet "Case"
              [inEnum prop]

getInformation :: (Variant a1)
               => WdInformation
               -> Range a0
               -> IO a1
getInformation type0 =
  propertyGet "Information"
              [inEnum type0]
              outVariant

getReadabilityStatistics0 :: Range a0
                          -> IO (ReadabilityStatistics ())
getReadabilityStatistics0 =
  propertyGet "ReadabilityStatistics"
              []
              outIUnknown

getGrammaticalErrors0 :: Range a0
                      -> IO (ProofreadingErrors ())
getGrammaticalErrors0 =
  propertyGet "GrammaticalErrors"
              []
              outIUnknown

getSpellingErrors0 :: Range a0
                   -> IO (ProofreadingErrors ())
getSpellingErrors0 =
  propertyGet "SpellingErrors"
              []
              outIUnknown

getOrientation :: Range a0
               -> IO WdTextOrientation
getOrientation =
  propertyGet "Orientation"
              []
              outEnum

setOrientation :: WdTextOrientation
               -> Range a0
               -> IO ()
setOrientation prop =
  propertySet "Orientation"
              [inEnum prop]

getInlineShapes0 :: Range a0
                 -> IO (InlineShapes ())
getInlineShapes0 =
  propertyGet "InlineShapes"
              []
              outIUnknown

getNextStoryRange :: Range a0
                  -> IO (Range ())
getNextStoryRange =
  propertyGet "NextStoryRange"
              []
              outIDispatch

getLanguageIDFarEast0 :: Range a0
                      -> IO WdLanguageID
getLanguageIDFarEast0 =
  propertyGet "LanguageIDFarEast"
              []
              outEnum

setLanguageIDFarEast0 :: WdLanguageID
                      -> Range a0
                      -> IO ()
setLanguageIDFarEast0 prop =
  propertySet "LanguageIDFarEast"
              [inEnum prop]

getLanguageIDOther :: Range a0
                   -> IO WdLanguageID
getLanguageIDOther =
  propertyGet "LanguageIDOther"
              []
              outEnum

setLanguageIDOther :: WdLanguageID
                   -> Range a0
                   -> IO ()
setLanguageIDOther prop =
  propertySet "LanguageIDOther"
              [inEnum prop]

select1 :: Range a0
        -> IO ()
select1 =
  method0 "Select"
          []

setRange :: Int32
         -> Int32
         -> Range a0
         -> IO ()
setRange start end =
  method0 "SetRange"
          [ inInt32 start
          , inInt32 end
          ]

collapse :: (Variant a1)
         => a1
         -> Range a0
         -> IO ()
collapse direction =
  method0 "Collapse"
          [inVariant direction]

insertBefore :: String
             -> Range a0
             -> IO ()
insertBefore text =
  method0 "InsertBefore"
          [inString text]

insertAfter :: String
            -> Range a0
            -> IO ()
insertAfter text =
  method0 "InsertAfter"
          [inString text]

next :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Range a0
     -> IO (Range ())
next unit count =
  function1 "Next"
            [ inVariant unit
            , inVariant count
            ]
            outIDispatch

previous :: (Variant a1, Variant a2)
         => a1
         -> a2
         -> Range a0
         -> IO (Range ())
previous unit count =
  function1 "Previous"
            [ inVariant unit
            , inVariant count
            ]
            outIDispatch

startOf :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Range a0
        -> IO Int32
startOf unit extend =
  function1 "StartOf"
            [ inVariant unit
            , inVariant extend
            ]
            outInt32

endOf :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Range a0
      -> IO Int32
endOf unit extend =
  function1 "EndOf"
            [ inVariant unit
            , inVariant extend
            ]
            outInt32

move0 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Range a0
      -> IO Int32
move0 unit count =
  function1 "Move"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

moveStart :: (Variant a1, Variant a2)
          => a1
          -> a2
          -> Range a0
          -> IO Int32
moveStart unit count =
  function1 "MoveStart"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

moveEnd :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Range a0
        -> IO Int32
moveEnd unit count =
  function1 "MoveEnd"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

moveWhile :: (Variant a1, Variant a2)
          => a1
          -> a2
          -> Range a0
          -> IO Int32
moveWhile cset count =
  function1 "MoveWhile"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveStartWhile :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> Range a0
               -> IO Int32
moveStartWhile cset count =
  function1 "MoveStartWhile"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveEndWhile :: (Variant a1, Variant a2)
             => a1
             -> a2
             -> Range a0
             -> IO Int32
moveEndWhile cset count =
  function1 "MoveEndWhile"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveUntil :: (Variant a1, Variant a2)
          => a1
          -> a2
          -> Range a0
          -> IO Int32
moveUntil cset count =
  function1 "MoveUntil"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveStartUntil :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> Range a0
               -> IO Int32
moveStartUntil cset count =
  function1 "MoveStartUntil"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveEndUntil :: (Variant a1, Variant a2)
             => a1
             -> a2
             -> Range a0
             -> IO Int32
moveEndUntil cset count =
  function1 "MoveEndUntil"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

cut :: Range a0
    -> IO ()
cut =
  method0 "Cut"
          []

copy0 :: Range a0
      -> IO ()
copy0 =
  method0 "Copy"
          []

paste :: Range a0
      -> IO ()
paste =
  method0 "Paste"
          []

insertBreak :: (Variant a1)
            => a1
            -> Range a0
            -> IO ()
insertBreak type0 =
  method0 "InsertBreak"
          [inVariant type0]

insertFile :: (Variant a1, Variant a2, Variant a3, Variant a4)
           => String
           -> a1
           -> a2
           -> a3
           -> a4
           -> Range a0
           -> IO ()
insertFile fileName range0 confirmConversions link attachment =
  method0 "InsertFile"
          [ inString fileName
          , inVariant range0
          , inVariant confirmConversions
          , inVariant link
          , inVariant attachment
          ]

inStory :: Range a1
        -> Range a0
        -> IO Bool
inStory range0 =
  function1 "InStory"
            [inIDispatch range0]
            outBool

inRange :: Range a1
        -> Range a0
        -> IO Bool
inRange range0 =
  function1 "InRange"
            [inIDispatch range0]
            outBool

delete2 :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Range a0
        -> IO Int32
delete2 unit count =
  function1 "Delete"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

wholeStory :: Range a0
           -> IO ()
wholeStory =
  method0 "WholeStory"
          []

expand :: (Variant a1)
       => a1
       -> Range a0
       -> IO Int32
expand unit =
  function1 "Expand"
            [inVariant unit]
            outInt32

insertParagraph :: Range a0
                -> IO ()
insertParagraph =
  method0 "InsertParagraph"
          []

insertParagraphAfter :: Range a0
                     -> IO ()
insertParagraphAfter =
  method0 "InsertParagraphAfter"
          []

convertToTableOld :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
                  => a1
                  -> a2
                  -> a3
                  -> a4
                  -> a5
                  -> a6
                  -> a7
                  -> a8
                  -> a9
                  -> a10
                  -> a11
                  -> a12
                  -> a13
                  -> a14
                  -> Range a0
                  -> IO (Table ())
convertToTableOld separator numRows numColumns initialColumnWidth format applyBorders applyShading applyFont applyColor applyHeadingRows applyLastRow applyFirstColumn applyLastColumn autoFit =
  function1 "ConvertToTableOld"
            [ inVariant separator
            , inVariant numRows
            , inVariant numColumns
            , inVariant initialColumnWidth
            , inVariant format
            , inVariant applyBorders
            , inVariant applyShading
            , inVariant applyFont
            , inVariant applyColor
            , inVariant applyHeadingRows
            , inVariant applyLastRow
            , inVariant applyFirstColumn
            , inVariant applyLastColumn
            , inVariant autoFit
            ]
            outIUnknown

insertDateTimeOld :: (Variant a1, Variant a2, Variant a3)
                  => a1
                  -> a2
                  -> a3
                  -> Range a0
                  -> IO ()
insertDateTimeOld dateTimeFormat insertAsField insertAsFullWidth =
  method0 "InsertDateTimeOld"
          [ inVariant dateTimeFormat
          , inVariant insertAsField
          , inVariant insertAsFullWidth
          ]

insertSymbol :: (Variant a1, Variant a2, Variant a3)
             => Int32
             -> a1
             -> a2
             -> a3
             -> Range a0
             -> IO ()
insertSymbol characterNumber font unicode bias =
  method0 "InsertSymbol"
          [ inInt32 characterNumber
          , inVariant font
          , inVariant unicode
          , inVariant bias
          ]

insertCrossReference_2002 :: (Variant a1, Variant a2, Variant a3, Variant a4)
                          => a1
                          -> WdReferenceKind
                          -> a2
                          -> a3
                          -> a4
                          -> Range a0
                          -> IO ()
insertCrossReference_2002 referenceType referenceKind referenceItem insertAsHyperlink includePosition =
  method0 "InsertCrossReference_2002"
          [ inVariant referenceType
          , inEnum referenceKind
          , inVariant referenceItem
          , inVariant insertAsHyperlink
          , inVariant includePosition
          ]

insertCaptionXP :: (Variant a1, Variant a2, Variant a3, Variant a4)
                => a1
                -> a2
                -> a3
                -> a4
                -> Range a0
                -> IO ()
insertCaptionXP label title titleAutoText position =
  method0 "InsertCaptionXP"
          [ inVariant label
          , inVariant title
          , inVariant titleAutoText
          , inVariant position
          ]

copyAsPicture :: Range a0
              -> IO ()
copyAsPicture =
  method0 "CopyAsPicture"
          []

sortOld :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> Range a0
        -> IO ()
sortOld excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 sortColumn separator caseSensitive languageID =
  method0 "SortOld"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant sortColumn
          , inVariant separator
          , inVariant caseSensitive
          , inVariant languageID
          ]

sortAscending :: Range a0
              -> IO ()
sortAscending =
  method0 "SortAscending"
          []

sortDescending :: Range a0
               -> IO ()
sortDescending =
  method0 "SortDescending"
          []

isEqual :: Range a1
        -> Range a0
        -> IO Bool
isEqual range0 =
  function1 "IsEqual"
            [inIDispatch range0]
            outBool

calculate :: Range a0
          -> IO Float
calculate =
  function1 "Calculate"
            []
            outFloat

goTo0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => a1
      -> a2
      -> a3
      -> a4
      -> Range a0
      -> IO (Range ())
goTo0 what which count name =
  function1 "GoTo"
            [ inVariant what
            , inVariant which
            , inVariant count
            , inVariant name
            ]
            outIDispatch

goToNext :: WdGoToItem
         -> Range a0
         -> IO (Range ())
goToNext what =
  function1 "GoToNext"
            [inEnum what]
            outIDispatch

goToPrevious :: WdGoToItem
             -> Range a0
             -> IO (Range ())
goToPrevious what =
  function1 "GoToPrevious"
            [inEnum what]
            outIDispatch

pasteSpecial :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> Range a0
             -> IO ()
pasteSpecial iconIndex link placement displayAsIcon dataType iconFileName iconLabel =
  method0 "PasteSpecial"
          [ inVariant iconIndex
          , inVariant link
          , inVariant placement
          , inVariant displayAsIcon
          , inVariant dataType
          , inVariant iconFileName
          , inVariant iconLabel
          ]

lookupNameProperties0 :: Range a0
                      -> IO ()
lookupNameProperties0 =
  method0 "LookupNameProperties"
          []

computeStatistics0 :: WdStatistic
                   -> Range a0
                   -> IO Int32
computeStatistics0 statistic =
  function1 "ComputeStatistics"
            [inEnum statistic]
            outInt32

relocate :: Int32
         -> Range a0
         -> IO ()
relocate direction =
  method0 "Relocate"
          [inInt32 direction]

checkSynonyms :: Range a0
              -> IO ()
checkSynonyms =
  method0 "CheckSynonyms"
          []

subscribeTo :: (Variant a1)
            => String
            -> a1
            -> Range a0
            -> IO ()
subscribeTo edition format =
  method0 "SubscribeTo"
          [ inString edition
          , inVariant format
          ]

createPublisher :: (Variant a1, Variant a2, Variant a3, Variant a4)
                => a1
                -> a2
                -> a3
                -> a4
                -> Range a0
                -> IO ()
createPublisher edition containsPICT containsRTF containsText =
  method0 "CreatePublisher"
          [ inVariant edition
          , inVariant containsPICT
          , inVariant containsRTF
          , inVariant containsText
          ]

insertAutoText :: Range a0
               -> IO ()
insertAutoText =
  method0 "InsertAutoText"
          []

insertDatabase :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> a13
               -> a14
               -> Range a0
               -> IO ()
insertDatabase format style linkToSource connection sQLStatement sQLStatement1 passwordDocument passwordTemplate writePasswordDocument writePasswordTemplate dataSource from to includeFields =
  method0 "InsertDatabase"
          [ inVariant format
          , inVariant style
          , inVariant linkToSource
          , inVariant connection
          , inVariant sQLStatement
          , inVariant sQLStatement1
          , inVariant passwordDocument
          , inVariant passwordTemplate
          , inVariant writePasswordDocument
          , inVariant writePasswordTemplate
          , inVariant dataSource
          , inVariant from
          , inVariant to
          , inVariant includeFields
          ]

autoFormat0 :: Range a0
            -> IO ()
autoFormat0 =
  method0 "AutoFormat"
          []

checkGrammar1 :: Range a0
              -> IO ()
checkGrammar1 =
  method0 "CheckGrammar"
          []

checkSpelling2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> Range a0
               -> IO ()
checkSpelling2 customDictionary ignoreUppercase alwaysSuggest customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  method0 "CheckSpelling"
          [ inVariant customDictionary
          , inVariant ignoreUppercase
          , inVariant alwaysSuggest
          , inVariant customDictionary2
          , inVariant customDictionary3
          , inVariant customDictionary4
          , inVariant customDictionary5
          , inVariant customDictionary6
          , inVariant customDictionary7
          , inVariant customDictionary8
          , inVariant customDictionary9
          , inVariant customDictionary10
          ]

getSpellingSuggestions1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
                        => a1
                        -> a2
                        -> a3
                        -> a4
                        -> a5
                        -> a6
                        -> a7
                        -> a8
                        -> a9
                        -> a10
                        -> a11
                        -> a12
                        -> a13
                        -> Range a0
                        -> IO (SpellingSuggestions ())
getSpellingSuggestions1 customDictionary ignoreUppercase mainDictionary suggestionMode customDictionary2 customDictionary3 customDictionary4 customDictionary5 customDictionary6 customDictionary7 customDictionary8 customDictionary9 customDictionary10 =
  function1 "GetSpellingSuggestions"
            [ inVariant customDictionary
            , inVariant ignoreUppercase
            , inVariant mainDictionary
            , inVariant suggestionMode
            , inVariant customDictionary2
            , inVariant customDictionary3
            , inVariant customDictionary4
            , inVariant customDictionary5
            , inVariant customDictionary6
            , inVariant customDictionary7
            , inVariant customDictionary8
            , inVariant customDictionary9
            , inVariant customDictionary10
            ]
            outIUnknown

insertParagraphBefore :: Range a0
                      -> IO ()
insertParagraphBefore =
  method0 "InsertParagraphBefore"
          []

nextSubdocument :: Range a0
                -> IO ()
nextSubdocument =
  method0 "NextSubdocument"
          []

previousSubdocument :: Range a0
                    -> IO ()
previousSubdocument =
  method0 "PreviousSubdocument"
          []

convertHangulAndHanja :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                      => a1
                      -> a2
                      -> a3
                      -> a4
                      -> a5
                      -> Range a0
                      -> IO ()
convertHangulAndHanja conversionsMode fastConversion checkHangulEnding enableRecentOrdering customDictionary =
  method0 "ConvertHangulAndHanja"
          [ inVariant conversionsMode
          , inVariant fastConversion
          , inVariant checkHangulEnding
          , inVariant enableRecentOrdering
          , inVariant customDictionary
          ]

pasteAsNestedTable :: Range a0
                   -> IO ()
pasteAsNestedTable =
  method0 "PasteAsNestedTable"
          []

modifyEnclosure :: (Variant a1, Variant a2, Variant a3)
                => a1
                -> a2
                -> a3
                -> Range a0
                -> IO ()
modifyEnclosure style symbol enclosedText =
  method0 "ModifyEnclosure"
          [ inVariant style
          , inVariant symbol
          , inVariant enclosedText
          ]

phoneticGuide :: (Variant a1, Variant a2, Variant a3, Variant a4)
              => String
              -> a1
              -> a2
              -> a3
              -> a4
              -> Range a0
              -> IO ()
phoneticGuide text alignment raise fontSize fontName =
  method0 "PhoneticGuide"
          [ inString text
          , inDefaultValue (inInt32 (-1)) inVariant alignment
          , inDefaultValue (inInt32 0) inVariant raise
          , inDefaultValue (inInt32 0) inVariant fontSize
          , inDefaultValue (inVariant "") inVariant fontName
          ]

insertDateTime :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> Range a0
               -> IO ()
insertDateTime dateTimeFormat insertAsField insertAsFullWidth dateLanguage calendarType =
  method0 "InsertDateTime"
          [ inVariant dateTimeFormat
          , inVariant insertAsField
          , inVariant insertAsFullWidth
          , inVariant dateLanguage
          , inVariant calendarType
          ]

sort :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19)
     => a1
     -> a2
     -> a3
     -> a4
     -> a5
     -> a6
     -> a7
     -> a8
     -> a9
     -> a10
     -> a11
     -> a12
     -> a13
     -> a14
     -> a15
     -> a16
     -> a17
     -> a18
     -> a19
     -> Range a0
     -> IO ()
sort excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 sortColumn separator caseSensitive bidiSort ignoreThe ignoreKashida ignoreDiacritics ignoreHe languageID =
  method0 "Sort"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant sortColumn
          , inVariant separator
          , inVariant caseSensitive
          , inVariant bidiSort
          , inVariant ignoreThe
          , inVariant ignoreKashida
          , inVariant ignoreDiacritics
          , inVariant ignoreHe
          , inVariant languageID
          ]

detectLanguage0 :: Range a0
                -> IO ()
detectLanguage0 =
  method0 "DetectLanguage"
          []

convertToTable :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> a13
               -> a14
               -> a15
               -> a16
               -> Range a0
               -> IO (Table ())
convertToTable separator numRows numColumns initialColumnWidth format applyBorders applyShading applyFont applyColor applyHeadingRows applyLastRow applyFirstColumn applyLastColumn autoFit autoFitBehavior defaultTableBehavior =
  function1 "ConvertToTable"
            [ inVariant separator
            , inVariant numRows
            , inVariant numColumns
            , inVariant initialColumnWidth
            , inVariant format
            , inVariant applyBorders
            , inVariant applyShading
            , inVariant applyFont
            , inVariant applyColor
            , inVariant applyHeadingRows
            , inVariant applyLastRow
            , inVariant applyFirstColumn
            , inVariant applyLastColumn
            , inVariant autoFit
            , inVariant autoFitBehavior
            , inVariant defaultTableBehavior
            ]
            outIUnknown

tCSCConverter :: (Variant a1, Variant a2, Variant a3)
              => a1
              -> a2
              -> a3
              -> Range a0
              -> IO ()
tCSCConverter wdTCSCConverterDirection commonTerms useVariants =
  method0 "TCSCConverter"
          [ inDefaultValue (inInt32 2) inVariant wdTCSCConverterDirection
          , inDefaultValue (inInt32 0) inVariant commonTerms
          , inDefaultValue (inInt32 0) inVariant useVariants
          ]

getLanguageDetected0 :: Range a0
                     -> IO Bool
getLanguageDetected0 =
  propertyGet "LanguageDetected"
              []
              outBool

setLanguageDetected0 :: Bool
                     -> Range a0
                     -> IO ()
setLanguageDetected0 prop =
  propertySet "LanguageDetected"
              [inBool prop]

getFitTextWidth :: Range a0
                -> IO Float
getFitTextWidth =
  propertyGet "FitTextWidth"
              []
              outFloat

setFitTextWidth :: Float
                -> Range a0
                -> IO ()
setFitTextWidth prop =
  propertySet "FitTextWidth"
              [inFloat prop]

getHorizontalInVertical :: Range a0
                        -> IO WdHorizontalInVerticalType
getHorizontalInVertical =
  propertyGet "HorizontalInVertical"
              []
              outEnum

setHorizontalInVertical :: WdHorizontalInVerticalType
                        -> Range a0
                        -> IO ()
setHorizontalInVertical prop =
  propertySet "HorizontalInVertical"
              [inEnum prop]

getTwoLinesInOne :: Range a0
                 -> IO WdTwoLinesInOneType
getTwoLinesInOne =
  propertyGet "TwoLinesInOne"
              []
              outEnum

setTwoLinesInOne :: WdTwoLinesInOneType
                 -> Range a0
                 -> IO ()
setTwoLinesInOne prop =
  propertySet "TwoLinesInOne"
              [inEnum prop]

getCombineCharacters :: Range a0
                     -> IO Bool
getCombineCharacters =
  propertyGet "CombineCharacters"
              []
              outBool

setCombineCharacters :: Bool
                     -> Range a0
                     -> IO ()
setCombineCharacters prop =
  propertySet "CombineCharacters"
              [inBool prop]

getNoProofing0 :: Range a0
               -> IO Int32
getNoProofing0 =
  propertyGet "NoProofing"
              []
              outInt32

setNoProofing0 :: Int32
               -> Range a0
               -> IO ()
setNoProofing0 prop =
  propertySet "NoProofing"
              [inInt32 prop]

getTopLevelTables :: Range a0
                  -> IO (Tables ())
getTopLevelTables =
  propertyGet "TopLevelTables"
              []
              outIUnknown

getScripts0 :: Range a0
            -> IO (Maybe Scripts)
getScripts0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getScripts methPtr iptr prop) 177 iptr
    doThenFree free (readunique readScripts) prop

getCharacterWidth :: Range a0
                  -> IO WdCharacterWidth
getCharacterWidth =
  propertyGet "CharacterWidth"
              []
              outEnum

setCharacterWidth :: WdCharacterWidth
                  -> Range a0
                  -> IO ()
setCharacterWidth prop =
  propertySet "CharacterWidth"
              [inEnum prop]

getKana :: Range a0
        -> IO WdKana
getKana =
  propertyGet "Kana"
              []
              outEnum

setKana :: WdKana
        -> Range a0
        -> IO ()
setKana prop =
  propertySet "Kana"
              [inEnum prop]

getBoldBi :: Range a0
          -> IO Int32
getBoldBi =
  propertyGet "BoldBi"
              []
              outInt32

setBoldBi :: Int32
          -> Range a0
          -> IO ()
setBoldBi prop =
  propertySet "BoldBi"
              [inInt32 prop]

getItalicBi :: Range a0
            -> IO Int32
getItalicBi =
  propertyGet "ItalicBi"
              []
              outInt32

setItalicBi :: Int32
            -> Range a0
            -> IO ()
setItalicBi prop =
  propertySet "ItalicBi"
              [inInt32 prop]

getID0 :: Range a0
       -> IO String
getID0 =
  propertyGet "ID"
              []
              outString

setID :: String
      -> Range a0
      -> IO ()
setID prop =
  propertySet "ID"
              [inString prop]

getHTMLDivisions0 :: Range a0
                  -> IO (HTMLDivisions ())
getHTMLDivisions0 =
  propertyGet "HTMLDivisions"
              []
              outIUnknown

getSmartTags0 :: Range a0
              -> IO (SmartTags ())
getSmartTags0 =
  propertyGet "SmartTags"
              []
              outIUnknown

getShowAll :: Range a0
           -> IO Bool
getShowAll =
  propertyGet "ShowAll"
              []
              outBool

setShowAll :: Bool
           -> Range a0
           -> IO ()
setShowAll prop =
  propertySet "ShowAll"
              [inBool prop]

getDocument1 :: Range a0
             -> IO (Maybe Document)
getDocument1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 192 iptr
    doThenFree free (readunique readDocument) prop

getFootnoteOptions :: Range a0
                   -> IO (FootnoteOptions ())
getFootnoteOptions =
  propertyGet "FootnoteOptions"
              []
              outIUnknown

getEndnoteOptions :: Range a0
                  -> IO (EndnoteOptions ())
getEndnoteOptions =
  propertyGet "EndnoteOptions"
              []
              outIUnknown

pasteAndFormat :: WdRecoveryType
               -> Range a0
               -> IO ()
pasteAndFormat type0 =
  method0 "PasteAndFormat"
          [inEnum type0]

pasteExcelTable :: Bool
                -> Bool
                -> Bool
                -> Range a0
                -> IO ()
pasteExcelTable linkedToExcel wordFormatting rTF =
  method0 "PasteExcelTable"
          [ inBool linkedToExcel
          , inBool wordFormatting
          , inBool rTF
          ]

pasteAppendTable :: Range a0
                 -> IO ()
pasteAppendTable =
  method0 "PasteAppendTable"
          []

getXMLNodes0 :: Range a0
             -> IO (XMLNodes ())
getXMLNodes0 =
  propertyGet "XMLNodes"
              []
              outIUnknown

getXMLParentNode :: Range a0
                 -> IO (XMLNode ())
getXMLParentNode =
  propertyGet "XMLParentNode"
              []
              outIUnknown

getEditors :: Range a0
           -> IO (Editors ())
getEditors =
  propertyGet "Editors"
              []
              outIUnknown

getXML :: (Variant a1)
       => a1
       -> Range a0
       -> IO String
getXML dataOnly =
  propertyGet "XML"
              [inDefaultValue (inInt32 0) inVariant dataOnly]
              outString

getEnhMetaFileBits :: (Variant a1)
                   => Range a0
                   -> IO a1
getEnhMetaFileBits =
  propertyGet "EnhMetaFileBits"
              []
              outVariant

goToEditableRange :: (Variant a1)
                  => a1
                  -> Range a0
                  -> IO (Range ())
goToEditableRange editorID =
  function1 "GoToEditableRange"
            [inVariant editorID]
            outIDispatch

insertXML :: (Variant a1)
          => String
          -> a1
          -> Range a0
          -> IO ()
insertXML xML transform =
  method0 "InsertXML"
          [ inString xML
          , inVariant transform
          ]

insertCaption :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> Range a0
              -> IO ()
insertCaption label title titleAutoText position excludeLabel =
  method0 "InsertCaption"
          [ inVariant label
          , inVariant title
          , inVariant titleAutoText
          , inVariant position
          , inVariant excludeLabel
          ]

insertCrossReference :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                     => a1
                     -> WdReferenceKind
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> Range a0
                     -> IO ()
insertCrossReference referenceType referenceKind referenceItem insertAsHyperlink includePosition separateNumbers separatorString =
  method0 "InsertCrossReference"
          [ inVariant referenceType
          , inEnum referenceKind
          , inVariant referenceItem
          , inVariant insertAsHyperlink
          , inVariant includePosition
          , inVariant separateNumbers
          , inVariant separatorString
          ]

getOMaths0 :: Range a0
           -> IO (OMaths ())
getOMaths0 =
  propertyGet "OMaths"
              []
              outIUnknown

getCharacterStyle :: (Variant a1)
                  => Range a0
                  -> IO a1
getCharacterStyle =
  propertyGet "CharacterStyle"
              []
              outVariant

getParagraphStyle :: (Variant a1)
                  => Range a0
                  -> IO a1
getParagraphStyle =
  propertyGet "ParagraphStyle"
              []
              outVariant

getListStyle :: (Variant a1)
             => Range a0
             -> IO a1
getListStyle =
  propertyGet "ListStyle"
              []
              outVariant

getTableStyle :: (Variant a1)
              => Range a0
              -> IO a1
getTableStyle =
  propertyGet "TableStyle"
              []
              outVariant

getContentControls0 :: Range a0
                    -> IO (ContentControls ())
getContentControls0 =
  propertyGet "ContentControls"
              []
              outIUnknown

exportFragment :: String
               -> WdSaveFormat
               -> Range a0
               -> IO ()
exportFragment fileName format =
  method0 "ExportFragment"
          [ inString fileName
          , inEnum format
          ]

getWordOpenXML0 :: Range a0
                -> IO String
getWordOpenXML0 =
  propertyGet "WordOpenXML"
              []
              outString

setListLevel :: Int16
             -> Range a0
             -> IO ()
setListLevel level =
  method0 "SetListLevel"
          [inInt16 level]

insertAlignmentTab :: (Variant a1)
                   => Int32
                   -> a1
                   -> Range a0
                   -> IO ()
insertAlignmentTab alignment relativeTo =
  method0 "InsertAlignmentTab"
          [ inInt32 alignment
          , inDefaultValue (inInt32 0) inVariant relativeTo
          ]

getParentContentControl :: Range a0
                        -> IO (ContentControl ())
getParentContentControl =
  propertyGet "ParentContentControl"
              []
              outIUnknown

importFragment :: (Variant a1)
               => String
               -> a1
               -> Range a0
               -> IO ()
importFragment fileName matchDestination =
  method0 "ImportFragment"
          [ inString fileName
          , inDefaultValue (inInt32 0) inVariant matchDestination
          ]

exportAsFixedFormat0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                     => String
                     -> WdExportFormat
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> a10
                     -> a11
                     -> Range a0
                     -> IO ()
exportAsFixedFormat0 outputFileName exportFormat openAfterExport optimizeFor exportCurrentPage item8 includeDocProps keepIRM createBookmarks docStructureTags bitmapMissingFonts useISO19005_1 fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inString outputFileName
          , inEnum exportFormat
          , inDefaultValue (inInt32 0) inVariant openAfterExport
          , inDefaultValue (inInt32 0) inVariant optimizeFor
          , inDefaultValue (inInt32 0) inVariant exportCurrentPage
          , inDefaultValue (inInt32 0) inVariant item8
          , inDefaultValue (inInt32 0) inVariant includeDocProps
          , inDefaultValue (inInt32 (-1)) inVariant keepIRM
          , inDefaultValue (inInt32 0) inVariant createBookmarks
          , inDefaultValue (inInt32 (-1)) inVariant docStructureTags
          , inDefaultValue (inInt32 (-1)) inVariant bitmapMissingFonts
          , inDefaultValue (inInt32 0) inVariant useISO19005_1
          , inVariant fixedFormatExtClassPtr
          ]

-- --------------------------------------------------
-- 
-- interface ListFormat
-- 
-- --------------------------------------------------
data ListFormat_ a = ListFormat__ 
type ListFormat a = IDispatch (ListFormat_ a)
iidListFormat :: IID (ListFormat ())
iidListFormat = mkIID "{000209C0-0000-0000-C000-000000000046}"

getListLevelNumber :: ListFormat a0
                   -> IO Int32
getListLevelNumber =
  propertyGet "ListLevelNumber"
              []
              outInt32

setListLevelNumber :: Int32
                   -> ListFormat a0
                   -> IO ()
setListLevelNumber prop =
  propertySet "ListLevelNumber"
              [inInt32 prop]

getList :: ListFormat a0
        -> IO (List ())
getList =
  propertyGet "List"
              []
              outIUnknown

getListTemplate :: ListFormat a0
                -> IO (ListTemplate ())
getListTemplate =
  propertyGet "ListTemplate"
              []
              outIUnknown

getListValue :: ListFormat a0
             -> IO Int32
getListValue =
  propertyGet "ListValue"
              []
              outInt32

getSingleList :: ListFormat a0
              -> IO Bool
getSingleList =
  propertyGet "SingleList"
              []
              outBool

getSingleListTemplate :: ListFormat a0
                      -> IO Bool
getSingleListTemplate =
  propertyGet "SingleListTemplate"
              []
              outBool

getListType :: ListFormat a0
            -> IO WdListType
getListType =
  propertyGet "ListType"
              []
              outEnum

getListString :: ListFormat a0
              -> IO String
getListString =
  propertyGet "ListString"
              []
              outString

getApplication20 :: ListFormat a0
                 -> IO (Maybe Application)
getApplication20 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 16 iptr
    doThenFree free (readunique readApplication) prop

getCreator20 :: ListFormat a0
             -> IO Int32
getCreator20 =
  propertyGet "Creator"
              []
              outInt32

getParent20 :: ListFormat a0
            -> IO (IDispatch ())
getParent20 =
  propertyGet "Parent"
              []
              outIDispatch

canContinuePreviousList :: ListTemplate a1
                        -> ListFormat a0
                        -> IO WdContinue
canContinuePreviousList listTemplate =
  function1 "CanContinuePreviousList"
            [inIUnknown listTemplate]
            outEnum

removeNumbers0 :: (Variant a1)
               => a1
               -> ListFormat a0
               -> IO ()
removeNumbers0 numberType =
  method0 "RemoveNumbers"
          [inVariant numberType]

convertNumbersToText0 :: (Variant a1)
                      => a1
                      -> ListFormat a0
                      -> IO ()
convertNumbersToText0 numberType =
  method0 "ConvertNumbersToText"
          [inVariant numberType]

countNumberedItems0 :: (Variant a1, Variant a2)
                    => a1
                    -> a2
                    -> ListFormat a0
                    -> IO Int32
countNumberedItems0 numberType level =
  function1 "CountNumberedItems"
            [ inVariant numberType
            , inVariant level
            ]
            outInt32

applyBulletDefaultOld :: ListFormat a0
                      -> IO ()
applyBulletDefaultOld =
  method0 "ApplyBulletDefaultOld"
          []

applyNumberDefaultOld :: ListFormat a0
                      -> IO ()
applyNumberDefaultOld =
  method0 "ApplyNumberDefaultOld"
          []

applyOutlineNumberDefaultOld :: ListFormat a0
                             -> IO ()
applyOutlineNumberDefaultOld =
  method0 "ApplyOutlineNumberDefaultOld"
          []

applyListTemplateOld :: (Variant a2, Variant a3)
                     => ListTemplate a1
                     -> a2
                     -> a3
                     -> ListFormat a0
                     -> IO ()
applyListTemplateOld listTemplate continuePreviousList applyTo =
  method0 "ApplyListTemplateOld"
          [ inIUnknown listTemplate
          , inVariant continuePreviousList
          , inVariant applyTo
          ]

listOutdent :: ListFormat a0
            -> IO ()
listOutdent =
  method0 "ListOutdent"
          []

listIndent :: ListFormat a0
           -> IO ()
listIndent =
  method0 "ListIndent"
          []

applyBulletDefault :: (Variant a1)
                   => a1
                   -> ListFormat a0
                   -> IO ()
applyBulletDefault defaultListBehavior =
  method0 "ApplyBulletDefault"
          [inVariant defaultListBehavior]

applyNumberDefault :: (Variant a1)
                   => a1
                   -> ListFormat a0
                   -> IO ()
applyNumberDefault defaultListBehavior =
  method0 "ApplyNumberDefault"
          [inVariant defaultListBehavior]

applyOutlineNumberDefault :: (Variant a1)
                          => a1
                          -> ListFormat a0
                          -> IO ()
applyOutlineNumberDefault defaultListBehavior =
  method0 "ApplyOutlineNumberDefault"
          [inVariant defaultListBehavior]

applyListTemplate :: (Variant a2, Variant a3, Variant a4)
                  => ListTemplate a1
                  -> a2
                  -> a3
                  -> a4
                  -> ListFormat a0
                  -> IO ()
applyListTemplate listTemplate continuePreviousList applyTo defaultListBehavior =
  method0 "ApplyListTemplate"
          [ inIUnknown listTemplate
          , inVariant continuePreviousList
          , inVariant applyTo
          , inVariant defaultListBehavior
          ]

getListPictureBullet :: ListFormat a0
                     -> IO (InlineShape ())
getListPictureBullet =
  propertyGet "ListPictureBullet"
              []
              outIUnknown

applyListTemplateWithLevel :: (Variant a2, Variant a3, Variant a4, Variant a5)
                           => ListTemplate a1
                           -> a2
                           -> a3
                           -> a4
                           -> a5
                           -> ListFormat a0
                           -> IO ()
applyListTemplateWithLevel listTemplate continuePreviousList applyTo defaultListBehavior applyLevel =
  method0 "ApplyListTemplateWithLevel"
          [ inIUnknown listTemplate
          , inVariant continuePreviousList
          , inVariant applyTo
          , inVariant defaultListBehavior
          , inVariant applyLevel
          ]

-- --------------------------------------------------
-- 
-- interface Find
-- 
-- --------------------------------------------------
data Find_ a = Find__ 
type Find a = IDispatch (Find_ a)
iidFind :: IID (Find ())
iidFind = mkIID "{000209B0-0000-0000-C000-000000000046}"

getApplication21 :: Find a0
                 -> IO (Maybe Application)
getApplication21 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator21 :: Find a0
             -> IO Int32
getCreator21 =
  propertyGet "Creator"
              []
              outInt32

getParent21 :: Find a0
            -> IO (IDispatch ())
getParent21 =
  propertyGet "Parent"
              []
              outIDispatch

getForward :: Find a0
           -> IO Bool
getForward =
  propertyGet "Forward"
              []
              outBool

setForward :: Bool
           -> Find a0
           -> IO ()
setForward prop =
  propertySet "Forward"
              [inBool prop]

getFont0 :: Find a0
         -> IO (Maybe Font)
getFont0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 12 iptr
    doThenFree free (readunique readFont) prop

setFont0 :: Font
         -> Find a0
         -> IO ()
setFont0 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 13 iptr
    free prop

getFound :: Find a0
         -> IO Bool
getFound =
  propertyGet "Found"
              []
              outBool

getMatchAllWordForms :: Find a0
                     -> IO Bool
getMatchAllWordForms =
  propertyGet "MatchAllWordForms"
              []
              outBool

setMatchAllWordForms :: Bool
                     -> Find a0
                     -> IO ()
setMatchAllWordForms prop =
  propertySet "MatchAllWordForms"
              [inBool prop]

getMatchCase :: Find a0
             -> IO Bool
getMatchCase =
  propertyGet "MatchCase"
              []
              outBool

setMatchCase :: Bool
             -> Find a0
             -> IO ()
setMatchCase prop =
  propertySet "MatchCase"
              [inBool prop]

getMatchWildcards :: Find a0
                  -> IO Bool
getMatchWildcards =
  propertyGet "MatchWildcards"
              []
              outBool

setMatchWildcards :: Bool
                  -> Find a0
                  -> IO ()
setMatchWildcards prop =
  propertySet "MatchWildcards"
              [inBool prop]

getMatchSoundsLike :: Find a0
                   -> IO Bool
getMatchSoundsLike =
  propertyGet "MatchSoundsLike"
              []
              outBool

setMatchSoundsLike :: Bool
                   -> Find a0
                   -> IO ()
setMatchSoundsLike prop =
  propertySet "MatchSoundsLike"
              [inBool prop]

getMatchWholeWord :: Find a0
                  -> IO Bool
getMatchWholeWord =
  propertyGet "MatchWholeWord"
              []
              outBool

setMatchWholeWord :: Bool
                  -> Find a0
                  -> IO ()
setMatchWholeWord prop =
  propertySet "MatchWholeWord"
              [inBool prop]

getMatchFuzzy :: Find a0
              -> IO Bool
getMatchFuzzy =
  propertyGet "MatchFuzzy"
              []
              outBool

setMatchFuzzy :: Bool
              -> Find a0
              -> IO ()
setMatchFuzzy prop =
  propertySet "MatchFuzzy"
              [inBool prop]

getMatchByte :: Find a0
             -> IO Bool
getMatchByte =
  propertyGet "MatchByte"
              []
              outBool

setMatchByte :: Bool
             -> Find a0
             -> IO ()
setMatchByte prop =
  propertySet "MatchByte"
              [inBool prop]

getParagraphFormat0 :: Find a0
                    -> IO (Maybe ParagraphFormat)
getParagraphFormat0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 29 iptr
    doThenFree free (readunique readParagraphFormat) prop

setParagraphFormat0 :: ParagraphFormat
                    -> Find a0
                    -> IO ()
setParagraphFormat0 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 30 iptr
    free prop

getStyle0 :: (Variant a1)
          => Find a0
          -> IO a1
getStyle0 =
  propertyGet "Style"
              []
              outVariant

setStyle0 :: (Variant a1)
          => a1
          -> Find a0
          -> IO ()
setStyle0 prop =
  propertySet "Style"
              [inVariant prop]

getText0 :: Find a0
         -> IO String
getText0 =
  propertyGet "Text"
              []
              outString

setText0 :: String
         -> Find a0
         -> IO ()
setText0 prop =
  propertySet "Text"
              [inString prop]

getLanguageID1 :: Find a0
               -> IO WdLanguageID
getLanguageID1 =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID1 :: WdLanguageID
               -> Find a0
               -> IO ()
setLanguageID1 prop =
  propertySet "LanguageID"
              [inEnum prop]

getHighlight :: Find a0
             -> IO Int32
getHighlight =
  propertyGet "Highlight"
              []
              outInt32

setHighlight :: Int32
             -> Find a0
             -> IO ()
setHighlight prop =
  propertySet "Highlight"
              [inInt32 prop]

getReplacement :: Find a0
               -> IO (Replacement ())
getReplacement =
  propertyGet "Replacement"
              []
              outIUnknown

getFrame :: Find a0
         -> IO (Frame ())
getFrame =
  propertyGet "Frame"
              []
              outIUnknown

getWrap :: Find a0
        -> IO WdFindWrap
getWrap =
  propertyGet "Wrap"
              []
              outEnum

setWrap :: WdFindWrap
        -> Find a0
        -> IO ()
setWrap prop =
  propertySet "Wrap"
              [inEnum prop]

getFormat :: Find a0
          -> IO Bool
getFormat =
  propertyGet "Format"
              []
              outBool

setFormat :: Bool
          -> Find a0
          -> IO ()
setFormat prop =
  propertySet "Format"
              [inBool prop]

getLanguageIDFarEast1 :: Find a0
                      -> IO WdLanguageID
getLanguageIDFarEast1 =
  propertyGet "LanguageIDFarEast"
              []
              outEnum

setLanguageIDFarEast1 :: WdLanguageID
                      -> Find a0
                      -> IO ()
setLanguageIDFarEast1 prop =
  propertySet "LanguageIDFarEast"
              [inEnum prop]

getLanguageIDOther0 :: Find a0
                    -> IO WdLanguageID
getLanguageIDOther0 =
  propertyGet "LanguageIDOther"
              []
              outEnum

setLanguageIDOther0 :: WdLanguageID
                    -> Find a0
                    -> IO ()
setLanguageIDOther0 prop =
  propertySet "LanguageIDOther"
              [inEnum prop]

getCorrectHangulEndings :: Find a0
                        -> IO Bool
getCorrectHangulEndings =
  propertyGet "CorrectHangulEndings"
              []
              outBool

setCorrectHangulEndings :: Bool
                        -> Find a0
                        -> IO ()
setCorrectHangulEndings prop =
  propertySet "CorrectHangulEndings"
              [inBool prop]

executeOld :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> Find a0
           -> IO Bool
executeOld findText matchCase matchWholeWord matchWildcards matchSoundsLike matchAllWordForms forward wrap format replaceWith replace =
  function1 "ExecuteOld"
            [ inVariant findText
            , inVariant matchCase
            , inVariant matchWholeWord
            , inVariant matchWildcards
            , inVariant matchSoundsLike
            , inVariant matchAllWordForms
            , inVariant forward
            , inVariant wrap
            , inVariant format
            , inVariant replaceWith
            , inVariant replace
            ]
            outBool

clearFormatting :: Find a0
                -> IO ()
clearFormatting =
  method0 "ClearFormatting"
          []

setAllFuzzyOptions :: Find a0
                   -> IO ()
setAllFuzzyOptions =
  method0 "SetAllFuzzyOptions"
          []

clearAllFuzzyOptions :: Find a0
                     -> IO ()
clearAllFuzzyOptions =
  method0 "ClearAllFuzzyOptions"
          []

execute :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> Find a0
        -> IO Bool
execute findText matchCase matchWholeWord matchWildcards matchSoundsLike matchAllWordForms forward wrap format replaceWith replace matchKashida matchDiacritics matchAlefHamza matchControl =
  function1 "Execute"
            [ inVariant findText
            , inVariant matchCase
            , inVariant matchWholeWord
            , inVariant matchWildcards
            , inVariant matchSoundsLike
            , inVariant matchAllWordForms
            , inVariant forward
            , inVariant wrap
            , inVariant format
            , inVariant replaceWith
            , inVariant replace
            , inVariant matchKashida
            , inVariant matchDiacritics
            , inVariant matchAlefHamza
            , inVariant matchControl
            ]
            outBool

getNoProofing1 :: Find a0
               -> IO Int32
getNoProofing1 =
  propertyGet "NoProofing"
              []
              outInt32

setNoProofing1 :: Int32
               -> Find a0
               -> IO ()
setNoProofing1 prop =
  propertySet "NoProofing"
              [inInt32 prop]

getMatchKashida :: Find a0
                -> IO Bool
getMatchKashida =
  propertyGet "MatchKashida"
              []
              outBool

setMatchKashida :: Bool
                -> Find a0
                -> IO ()
setMatchKashida prop =
  propertySet "MatchKashida"
              [inBool prop]

getMatchDiacritics :: Find a0
                   -> IO Bool
getMatchDiacritics =
  propertyGet "MatchDiacritics"
              []
              outBool

setMatchDiacritics :: Bool
                   -> Find a0
                   -> IO ()
setMatchDiacritics prop =
  propertySet "MatchDiacritics"
              [inBool prop]

getMatchAlefHamza :: Find a0
                  -> IO Bool
getMatchAlefHamza =
  propertyGet "MatchAlefHamza"
              []
              outBool

setMatchAlefHamza :: Bool
                  -> Find a0
                  -> IO ()
setMatchAlefHamza prop =
  propertySet "MatchAlefHamza"
              [inBool prop]

getMatchControl :: Find a0
                -> IO Bool
getMatchControl =
  propertyGet "MatchControl"
              []
              outBool

setMatchControl :: Bool
                -> Find a0
                -> IO ()
setMatchControl prop =
  propertySet "MatchControl"
              [inBool prop]

getMatchPhrase :: Find a0
               -> IO Bool
getMatchPhrase =
  propertyGet "MatchPhrase"
              []
              outBool

setMatchPhrase :: Bool
               -> Find a0
               -> IO ()
setMatchPhrase prop =
  propertySet "MatchPhrase"
              [inBool prop]

getMatchPrefix :: Find a0
               -> IO Bool
getMatchPrefix =
  propertyGet "MatchPrefix"
              []
              outBool

setMatchPrefix :: Bool
               -> Find a0
               -> IO ()
setMatchPrefix prop =
  propertySet "MatchPrefix"
              [inBool prop]

getMatchSuffix :: Find a0
               -> IO Bool
getMatchSuffix =
  propertyGet "MatchSuffix"
              []
              outBool

setMatchSuffix :: Bool
               -> Find a0
               -> IO ()
setMatchSuffix prop =
  propertySet "MatchSuffix"
              [inBool prop]

getIgnoreSpace :: Find a0
               -> IO Bool
getIgnoreSpace =
  propertyGet "IgnoreSpace"
              []
              outBool

setIgnoreSpace :: Bool
               -> Find a0
               -> IO ()
setIgnoreSpace prop =
  propertySet "IgnoreSpace"
              [inBool prop]

getIgnorePunct :: Find a0
               -> IO Bool
getIgnorePunct =
  propertyGet "IgnorePunct"
              []
              outBool

setIgnorePunct :: Bool
               -> Find a0
               -> IO ()
setIgnorePunct prop =
  propertySet "IgnorePunct"
              [inBool prop]

hitHighlight :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> a13
             -> a14
             -> a15
             -> a16
             -> a17
             -> a18
             -> a19
             -> a20
             -> Find a0
             -> IO Bool
hitHighlight findText highlightColor textColor matchCase matchWholeWord matchPrefix matchSuffix matchPhrase matchWildcards matchSoundsLike matchAllWordForms matchByte matchFuzzy matchKashida matchDiacritics matchAlefHamza matchControl ignoreSpace ignorePunct hanjaPhoneticHangul =
  function1 "HitHighlight"
            [ inVariant findText
            , inVariant highlightColor
            , inVariant textColor
            , inVariant matchCase
            , inVariant matchWholeWord
            , inVariant matchPrefix
            , inVariant matchSuffix
            , inVariant matchPhrase
            , inVariant matchWildcards
            , inVariant matchSoundsLike
            , inVariant matchAllWordForms
            , inVariant matchByte
            , inVariant matchFuzzy
            , inVariant matchKashida
            , inVariant matchDiacritics
            , inVariant matchAlefHamza
            , inVariant matchControl
            , inVariant ignoreSpace
            , inVariant ignorePunct
            , inVariant hanjaPhoneticHangul
            ]
            outBool

clearHitHighlight :: Find a0
                  -> IO Bool
clearHitHighlight =
  function1 "ClearHitHighlight"
            []
            outBool

execute2007 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> a12
            -> a13
            -> a14
            -> a15
            -> a16
            -> a17
            -> a18
            -> a19
            -> a20
            -> Find a0
            -> IO Bool
execute2007 findText matchCase matchWholeWord matchWildcards matchSoundsLike matchAllWordForms forward wrap format replaceWith replace matchKashida matchDiacritics matchAlefHamza matchControl matchPrefix matchSuffix matchPhrase ignoreSpace ignorePunct =
  function1 "Execute2007"
            [ inVariant findText
            , inVariant matchCase
            , inVariant matchWholeWord
            , inVariant matchWildcards
            , inVariant matchSoundsLike
            , inVariant matchAllWordForms
            , inVariant forward
            , inVariant wrap
            , inVariant format
            , inVariant replaceWith
            , inVariant replace
            , inVariant matchKashida
            , inVariant matchDiacritics
            , inVariant matchAlefHamza
            , inVariant matchControl
            , inVariant matchPrefix
            , inVariant matchSuffix
            , inVariant matchPhrase
            , inVariant ignoreSpace
            , inVariant ignorePunct
            ]
            outBool

getHanjaPhoneticHangul :: Find a0
                       -> IO Bool
getHanjaPhoneticHangul =
  propertyGet "HanjaPhoneticHangul"
              []
              outBool

setHanjaPhoneticHangul :: Bool
                       -> Find a0
                       -> IO ()
setHanjaPhoneticHangul prop =
  propertySet "HanjaPhoneticHangul"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface Replacement
-- 
-- --------------------------------------------------
data Replacement_ a = Replacement__ 
type Replacement a = IDispatch (Replacement_ a)
iidReplacement :: IID (Replacement ())
iidReplacement = mkIID "{000209B1-0000-0000-C000-000000000046}"

getApplication22 :: Replacement a0
                 -> IO (Maybe Application)
getApplication22 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator22 :: Replacement a0
             -> IO Int32
getCreator22 =
  propertyGet "Creator"
              []
              outInt32

getParent22 :: Replacement a0
            -> IO (IDispatch ())
getParent22 =
  propertyGet "Parent"
              []
              outIDispatch

getFont1 :: Replacement a0
         -> IO (Maybe Font)
getFont1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 10 iptr
    doThenFree free (readunique readFont) prop

setFont1 :: Font
         -> Replacement a0
         -> IO ()
setFont1 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 11 iptr
    free prop

getParagraphFormat1 :: Replacement a0
                    -> IO (Maybe ParagraphFormat)
getParagraphFormat1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 12 iptr
    doThenFree free (readunique readParagraphFormat) prop

setParagraphFormat1 :: ParagraphFormat
                    -> Replacement a0
                    -> IO ()
setParagraphFormat1 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 13 iptr
    free prop

getStyle1 :: (Variant a1)
          => Replacement a0
          -> IO a1
getStyle1 =
  propertyGet "Style"
              []
              outVariant

setStyle1 :: (Variant a1)
          => a1
          -> Replacement a0
          -> IO ()
setStyle1 prop =
  propertySet "Style"
              [inVariant prop]

getText1 :: Replacement a0
         -> IO String
getText1 =
  propertyGet "Text"
              []
              outString

setText1 :: String
         -> Replacement a0
         -> IO ()
setText1 prop =
  propertySet "Text"
              [inString prop]

getLanguageID2 :: Replacement a0
               -> IO WdLanguageID
getLanguageID2 =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID2 :: WdLanguageID
               -> Replacement a0
               -> IO ()
setLanguageID2 prop =
  propertySet "LanguageID"
              [inEnum prop]

getHighlight0 :: Replacement a0
              -> IO Int32
getHighlight0 =
  propertyGet "Highlight"
              []
              outInt32

setHighlight0 :: Int32
              -> Replacement a0
              -> IO ()
setHighlight0 prop =
  propertySet "Highlight"
              [inInt32 prop]

getFrame0 :: Replacement a0
          -> IO (Frame ())
getFrame0 =
  propertyGet "Frame"
              []
              outIUnknown

getLanguageIDFarEast2 :: Replacement a0
                      -> IO WdLanguageID
getLanguageIDFarEast2 =
  propertyGet "LanguageIDFarEast"
              []
              outEnum

setLanguageIDFarEast2 :: WdLanguageID
                      -> Replacement a0
                      -> IO ()
setLanguageIDFarEast2 prop =
  propertySet "LanguageIDFarEast"
              [inEnum prop]

clearFormatting0 :: Replacement a0
                 -> IO ()
clearFormatting0 =
  method0 "ClearFormatting"
          []

getNoProofing2 :: Replacement a0
               -> IO Int32
getNoProofing2 =
  propertyGet "NoProofing"
              []
              outInt32

setNoProofing2 :: Int32
               -> Replacement a0
               -> IO ()
setNoProofing2 prop =
  propertySet "NoProofing"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface Characters
-- 
-- --------------------------------------------------
data Characters_ a = Characters__ 
type Characters a = IDispatch (Characters_ a)
iidCharacters :: IID (Characters ())
iidCharacters = mkIID "{0002095D-0000-0000-C000-000000000046}"

getNewEnum8 :: Characters a0
            -> IO (IUnknown ())
getNewEnum8 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount8 :: Characters a0
          -> IO Int32
getCount8 =
  propertyGet "Count"
              []
              outInt32

getFirst :: Characters a0
         -> IO (Range ())
getFirst =
  propertyGet "First"
              []
              outIDispatch

getLast :: Characters a0
        -> IO (Range ())
getLast =
  propertyGet "Last"
              []
              outIDispatch

getApplication23 :: Characters a0
                 -> IO (Maybe Application)
getApplication23 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 11 iptr
    doThenFree free (readunique readApplication) prop

getCreator23 :: Characters a0
             -> IO Int32
getCreator23 =
  propertyGet "Creator"
              []
              outInt32

getParent23 :: Characters a0
            -> IO (IDispatch ())
getParent23 =
  propertyGet "Parent"
              []
              outIDispatch

item8 :: Int32
      -> Characters a0
      -> IO (Range ())
item8 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Words
-- 
-- --------------------------------------------------
data Words_ a = Words__ 
type Words a = IDispatch (Words_ a)
iidWords :: IID (Words ())
iidWords = mkIID "{0002095C-0000-0000-C000-000000000046}"

getNewEnum9 :: Words a0
            -> IO (IUnknown ())
getNewEnum9 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount9 :: Words a0
          -> IO Int32
getCount9 =
  propertyGet "Count"
              []
              outInt32

getFirst0 :: Words a0
          -> IO (Range ())
getFirst0 =
  propertyGet "First"
              []
              outIDispatch

getLast0 :: Words a0
         -> IO (Range ())
getLast0 =
  propertyGet "Last"
              []
              outIDispatch

getApplication24 :: Words a0
                 -> IO (Maybe Application)
getApplication24 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 11 iptr
    doThenFree free (readunique readApplication) prop

getCreator24 :: Words a0
             -> IO Int32
getCreator24 =
  propertyGet "Creator"
              []
              outInt32

getParent24 :: Words a0
            -> IO (IDispatch ())
getParent24 =
  propertyGet "Parent"
              []
              outIDispatch

item9 :: Int32
      -> Words a0
      -> IO (Range ())
item9 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Sentences
-- 
-- --------------------------------------------------
data Sentences_ a = Sentences__ 
type Sentences a = IDispatch (Sentences_ a)
iidSentences :: IID (Sentences ())
iidSentences = mkIID "{0002095B-0000-0000-C000-000000000046}"

getNewEnum10 :: Sentences a0
             -> IO (IUnknown ())
getNewEnum10 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount10 :: Sentences a0
           -> IO Int32
getCount10 =
  propertyGet "Count"
              []
              outInt32

getFirst1 :: Sentences a0
          -> IO (Range ())
getFirst1 =
  propertyGet "First"
              []
              outIDispatch

getLast1 :: Sentences a0
         -> IO (Range ())
getLast1 =
  propertyGet "Last"
              []
              outIDispatch

getApplication25 :: Sentences a0
                 -> IO (Maybe Application)
getApplication25 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 11 iptr
    doThenFree free (readunique readApplication) prop

getCreator25 :: Sentences a0
             -> IO Int32
getCreator25 =
  propertyGet "Creator"
              []
              outInt32

getParent25 :: Sentences a0
            -> IO (IDispatch ())
getParent25 =
  propertyGet "Parent"
              []
              outIDispatch

item10 :: Int32
       -> Sentences a0
       -> IO (Range ())
item10 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Sections
-- 
-- --------------------------------------------------
data Sections_ a = Sections__ 
type Sections a = IDispatch (Sections_ a)
iidSections :: IID (Sections ())
iidSections = mkIID "{0002095A-0000-0000-C000-000000000046}"

getNewEnum11 :: Sections a0
             -> IO (IUnknown ())
getNewEnum11 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount11 :: Sections a0
           -> IO Int32
getCount11 =
  propertyGet "Count"
              []
              outInt32

getFirst2 :: Sections a0
          -> IO (Section ())
getFirst2 =
  propertyGet "First"
              []
              outIUnknown

getLast2 :: Sections a0
         -> IO (Section ())
getLast2 =
  propertyGet "Last"
              []
              outIUnknown

getApplication26 :: Sections a0
                 -> IO (Maybe Application)
getApplication26 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 11 iptr
    doThenFree free (readunique readApplication) prop

getCreator26 :: Sections a0
             -> IO Int32
getCreator26 =
  propertyGet "Creator"
              []
              outInt32

getParent26 :: Sections a0
            -> IO (IDispatch ())
getParent26 =
  propertyGet "Parent"
              []
              outIDispatch

getPageSetup1 :: Sections a0
              -> IO (PageSetup ())
getPageSetup1 =
  propertyGet "PageSetup"
              []
              outIUnknown

setPageSetup1 :: PageSetup a1
              -> Sections a0
              -> IO ()
setPageSetup1 prop =
  propertySet "PageSetup"
              [inIUnknown prop]

item11 :: Int32
       -> Sections a0
       -> IO (Section ())
item11 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add5 :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Sections a0
     -> IO (Section ())
add5 range0 start =
  function1 "Add"
            [ inVariant range0
            , inVariant start
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Section
-- 
-- --------------------------------------------------
data Section_ a = Section__ 
type Section a = IDispatch (Section_ a)
iidSection :: IID (Section ())
iidSection = mkIID "{00020959-0000-0000-C000-000000000046}"

getRange0 :: Section a0
          -> IO (Range ())
getRange0 =
  propertyGet "Range"
              []
              outIDispatch

getApplication27 :: Section a0
                 -> IO (Maybe Application)
getApplication27 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator27 :: Section a0
             -> IO Int32
getCreator27 =
  propertyGet "Creator"
              []
              outInt32

getParent27 :: Section a0
            -> IO (IDispatch ())
getParent27 =
  propertyGet "Parent"
              []
              outIDispatch

getPageSetup2 :: Section a0
              -> IO (PageSetup ())
getPageSetup2 =
  propertyGet "PageSetup"
              []
              outIUnknown

setPageSetup2 :: PageSetup a1
              -> Section a0
              -> IO ()
setPageSetup2 prop =
  propertySet "PageSetup"
              [inIUnknown prop]

getHeaders :: Section a0
           -> IO (HeadersFooters ())
getHeaders =
  propertyGet "Headers"
              []
              outIUnknown

getFooters :: Section a0
           -> IO (HeadersFooters ())
getFooters =
  propertyGet "Footers"
              []
              outIUnknown

getProtectedForForms :: Section a0
                     -> IO Bool
getProtectedForForms =
  propertyGet "ProtectedForForms"
              []
              outBool

setProtectedForForms :: Bool
                     -> Section a0
                     -> IO ()
setProtectedForForms prop =
  propertySet "ProtectedForForms"
              [inBool prop]

getIndex3 :: Section a0
          -> IO Int32
getIndex3 =
  propertyGet "Index"
              []
              outInt32

getBorders0 :: Section a0
            -> IO (Borders ())
getBorders0 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders0 :: Borders a1
            -> Section a0
            -> IO ()
setBorders0 prop =
  propertySet "Borders"
              [inIUnknown prop]

-- --------------------------------------------------
-- 
-- interface Paragraphs
-- 
-- --------------------------------------------------
data Paragraphs_ a = Paragraphs__ 
type Paragraphs a = IDispatch (Paragraphs_ a)
iidParagraphs :: IID (Paragraphs ())
iidParagraphs = mkIID "{00020958-0000-0000-C000-000000000046}"

getNewEnum12 :: Paragraphs a0
             -> IO (IUnknown ())
getNewEnum12 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount12 :: Paragraphs a0
           -> IO Int32
getCount12 =
  propertyGet "Count"
              []
              outInt32

getFirst3 :: Paragraphs a0
          -> IO (Paragraph ())
getFirst3 =
  propertyGet "First"
              []
              outIUnknown

getLast3 :: Paragraphs a0
         -> IO (Paragraph ())
getLast3 =
  propertyGet "Last"
              []
              outIUnknown

getApplication28 :: Paragraphs a0
                 -> IO (Maybe Application)
getApplication28 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 11 iptr
    doThenFree free (readunique readApplication) prop

getCreator28 :: Paragraphs a0
             -> IO Int32
getCreator28 =
  propertyGet "Creator"
              []
              outInt32

getParent28 :: Paragraphs a0
            -> IO (IDispatch ())
getParent28 =
  propertyGet "Parent"
              []
              outIDispatch

getFormat0 :: Paragraphs a0
           -> IO (Maybe ParagraphFormat)
getFormat0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 14 iptr
    doThenFree free (readunique readParagraphFormat) prop

setFormat0 :: ParagraphFormat
           -> Paragraphs a0
           -> IO ()
setFormat0 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 15 iptr
    free prop

getTabStops :: Paragraphs a0
            -> IO (TabStops ())
getTabStops =
  propertyGet "TabStops"
              []
              outIUnknown

setTabStops :: TabStops a1
            -> Paragraphs a0
            -> IO ()
setTabStops prop =
  propertySet "TabStops"
              [inIUnknown prop]

getBorders1 :: Paragraphs a0
            -> IO (Borders ())
getBorders1 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders1 :: Borders a1
            -> Paragraphs a0
            -> IO ()
setBorders1 prop =
  propertySet "Borders"
              [inIUnknown prop]

getStyle2 :: (Variant a1)
          => Paragraphs a0
          -> IO a1
getStyle2 =
  propertyGet "Style"
              []
              outVariant

setStyle2 :: (Variant a1)
          => a1
          -> Paragraphs a0
          -> IO ()
setStyle2 prop =
  propertySet "Style"
              [inVariant prop]

getAlignment :: Paragraphs a0
             -> IO WdParagraphAlignment
getAlignment =
  propertyGet "Alignment"
              []
              outEnum

setAlignment :: WdParagraphAlignment
             -> Paragraphs a0
             -> IO ()
setAlignment prop =
  propertySet "Alignment"
              [inEnum prop]

getKeepTogether :: Paragraphs a0
                -> IO Int32
getKeepTogether =
  propertyGet "KeepTogether"
              []
              outInt32

setKeepTogether :: Int32
                -> Paragraphs a0
                -> IO ()
setKeepTogether prop =
  propertySet "KeepTogether"
              [inInt32 prop]

getKeepWithNext :: Paragraphs a0
                -> IO Int32
getKeepWithNext =
  propertyGet "KeepWithNext"
              []
              outInt32

setKeepWithNext :: Int32
                -> Paragraphs a0
                -> IO ()
setKeepWithNext prop =
  propertySet "KeepWithNext"
              [inInt32 prop]

getPageBreakBefore :: Paragraphs a0
                   -> IO Int32
getPageBreakBefore =
  propertyGet "PageBreakBefore"
              []
              outInt32

setPageBreakBefore :: Int32
                   -> Paragraphs a0
                   -> IO ()
setPageBreakBefore prop =
  propertySet "PageBreakBefore"
              [inInt32 prop]

getNoLineNumber :: Paragraphs a0
                -> IO Int32
getNoLineNumber =
  propertyGet "NoLineNumber"
              []
              outInt32

setNoLineNumber :: Int32
                -> Paragraphs a0
                -> IO ()
setNoLineNumber prop =
  propertySet "NoLineNumber"
              [inInt32 prop]

getRightIndent :: Paragraphs a0
               -> IO Float
getRightIndent =
  propertyGet "RightIndent"
              []
              outFloat

setRightIndent :: Float
               -> Paragraphs a0
               -> IO ()
setRightIndent prop =
  propertySet "RightIndent"
              [inFloat prop]

getLeftIndent :: Paragraphs a0
              -> IO Float
getLeftIndent =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent :: Float
              -> Paragraphs a0
              -> IO ()
setLeftIndent prop =
  propertySet "LeftIndent"
              [inFloat prop]

getFirstLineIndent :: Paragraphs a0
                   -> IO Float
getFirstLineIndent =
  propertyGet "FirstLineIndent"
              []
              outFloat

setFirstLineIndent :: Float
                   -> Paragraphs a0
                   -> IO ()
setFirstLineIndent prop =
  propertySet "FirstLineIndent"
              [inFloat prop]

getLineSpacing :: Paragraphs a0
               -> IO Float
getLineSpacing =
  propertyGet "LineSpacing"
              []
              outFloat

setLineSpacing :: Float
               -> Paragraphs a0
               -> IO ()
setLineSpacing prop =
  propertySet "LineSpacing"
              [inFloat prop]

getLineSpacingRule :: Paragraphs a0
                   -> IO WdLineSpacing
getLineSpacingRule =
  propertyGet "LineSpacingRule"
              []
              outEnum

setLineSpacingRule :: WdLineSpacing
                   -> Paragraphs a0
                   -> IO ()
setLineSpacingRule prop =
  propertySet "LineSpacingRule"
              [inEnum prop]

getSpaceBefore :: Paragraphs a0
               -> IO Float
getSpaceBefore =
  propertyGet "SpaceBefore"
              []
              outFloat

setSpaceBefore :: Float
               -> Paragraphs a0
               -> IO ()
setSpaceBefore prop =
  propertySet "SpaceBefore"
              [inFloat prop]

getSpaceAfter :: Paragraphs a0
              -> IO Float
getSpaceAfter =
  propertyGet "SpaceAfter"
              []
              outFloat

setSpaceAfter :: Float
              -> Paragraphs a0
              -> IO ()
setSpaceAfter prop =
  propertySet "SpaceAfter"
              [inFloat prop]

getHyphenation :: Paragraphs a0
               -> IO Int32
getHyphenation =
  propertyGet "Hyphenation"
              []
              outInt32

setHyphenation :: Int32
               -> Paragraphs a0
               -> IO ()
setHyphenation prop =
  propertySet "Hyphenation"
              [inInt32 prop]

getWidowControl :: Paragraphs a0
                -> IO Int32
getWidowControl =
  propertyGet "WidowControl"
              []
              outInt32

setWidowControl :: Int32
                -> Paragraphs a0
                -> IO ()
setWidowControl prop =
  propertySet "WidowControl"
              [inInt32 prop]

getShading0 :: Paragraphs a0
            -> IO (Shading ())
getShading0 =
  propertyGet "Shading"
              []
              outIUnknown

getFarEastLineBreakControl :: Paragraphs a0
                           -> IO Int32
getFarEastLineBreakControl =
  propertyGet "FarEastLineBreakControl"
              []
              outInt32

setFarEastLineBreakControl :: Int32
                           -> Paragraphs a0
                           -> IO ()
setFarEastLineBreakControl prop =
  propertySet "FarEastLineBreakControl"
              [inInt32 prop]

getWordWrap :: Paragraphs a0
            -> IO Int32
getWordWrap =
  propertyGet "WordWrap"
              []
              outInt32

setWordWrap :: Int32
            -> Paragraphs a0
            -> IO ()
setWordWrap prop =
  propertySet "WordWrap"
              [inInt32 prop]

getHangingPunctuation :: Paragraphs a0
                      -> IO Int32
getHangingPunctuation =
  propertyGet "HangingPunctuation"
              []
              outInt32

setHangingPunctuation :: Int32
                      -> Paragraphs a0
                      -> IO ()
setHangingPunctuation prop =
  propertySet "HangingPunctuation"
              [inInt32 prop]

getHalfWidthPunctuationOnTopOfLine :: Paragraphs a0
                                   -> IO Int32
getHalfWidthPunctuationOnTopOfLine =
  propertyGet "HalfWidthPunctuationOnTopOfLine"
              []
              outInt32

setHalfWidthPunctuationOnTopOfLine :: Int32
                                   -> Paragraphs a0
                                   -> IO ()
setHalfWidthPunctuationOnTopOfLine prop =
  propertySet "HalfWidthPunctuationOnTopOfLine"
              [inInt32 prop]

getAddSpaceBetweenFarEastAndAlpha :: Paragraphs a0
                                  -> IO Int32
getAddSpaceBetweenFarEastAndAlpha =
  propertyGet "AddSpaceBetweenFarEastAndAlpha"
              []
              outInt32

setAddSpaceBetweenFarEastAndAlpha :: Int32
                                  -> Paragraphs a0
                                  -> IO ()
setAddSpaceBetweenFarEastAndAlpha prop =
  propertySet "AddSpaceBetweenFarEastAndAlpha"
              [inInt32 prop]

getAddSpaceBetweenFarEastAndDigit :: Paragraphs a0
                                  -> IO Int32
getAddSpaceBetweenFarEastAndDigit =
  propertyGet "AddSpaceBetweenFarEastAndDigit"
              []
              outInt32

setAddSpaceBetweenFarEastAndDigit :: Int32
                                  -> Paragraphs a0
                                  -> IO ()
setAddSpaceBetweenFarEastAndDigit prop =
  propertySet "AddSpaceBetweenFarEastAndDigit"
              [inInt32 prop]

getBaseLineAlignment :: Paragraphs a0
                     -> IO WdBaselineAlignment
getBaseLineAlignment =
  propertyGet "BaseLineAlignment"
              []
              outEnum

setBaseLineAlignment :: WdBaselineAlignment
                     -> Paragraphs a0
                     -> IO ()
setBaseLineAlignment prop =
  propertySet "BaseLineAlignment"
              [inEnum prop]

getAutoAdjustRightIndent :: Paragraphs a0
                         -> IO Int32
getAutoAdjustRightIndent =
  propertyGet "AutoAdjustRightIndent"
              []
              outInt32

setAutoAdjustRightIndent :: Int32
                         -> Paragraphs a0
                         -> IO ()
setAutoAdjustRightIndent prop =
  propertySet "AutoAdjustRightIndent"
              [inInt32 prop]

getDisableLineHeightGrid :: Paragraphs a0
                         -> IO Int32
getDisableLineHeightGrid =
  propertyGet "DisableLineHeightGrid"
              []
              outInt32

setDisableLineHeightGrid :: Int32
                         -> Paragraphs a0
                         -> IO ()
setDisableLineHeightGrid prop =
  propertySet "DisableLineHeightGrid"
              [inInt32 prop]

getOutlineLevel :: Paragraphs a0
                -> IO WdOutlineLevel
getOutlineLevel =
  propertyGet "OutlineLevel"
              []
              outEnum

setOutlineLevel :: WdOutlineLevel
                -> Paragraphs a0
                -> IO ()
setOutlineLevel prop =
  propertySet "OutlineLevel"
              [inEnum prop]

item12 :: Int32
       -> Paragraphs a0
       -> IO (Paragraph ())
item12 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add6 :: (Variant a1)
     => a1
     -> Paragraphs a0
     -> IO (Paragraph ())
add6 range0 =
  function1 "Add"
            [inVariant range0]
            outIUnknown

closeUp :: Paragraphs a0
        -> IO ()
closeUp =
  method0 "CloseUp"
          []

openUp :: Paragraphs a0
       -> IO ()
openUp =
  method0 "OpenUp"
          []

openOrCloseUp :: Paragraphs a0
              -> IO ()
openOrCloseUp =
  method0 "OpenOrCloseUp"
          []

tabHangingIndent :: Int16
                 -> Paragraphs a0
                 -> IO ()
tabHangingIndent count =
  method0 "TabHangingIndent"
          [inInt16 count]

tabIndent :: Int16
          -> Paragraphs a0
          -> IO ()
tabIndent count =
  method0 "TabIndent"
          [inInt16 count]

reset0 :: Paragraphs a0
       -> IO ()
reset0 =
  method0 "Reset"
          []

space1 :: Paragraphs a0
       -> IO ()
space1 =
  method0 "Space1"
          []

space15 :: Paragraphs a0
        -> IO ()
space15 =
  method0 "Space15"
          []

space2 :: Paragraphs a0
       -> IO ()
space2 =
  method0 "Space2"
          []

indentCharWidth :: Int16
                -> Paragraphs a0
                -> IO ()
indentCharWidth count =
  method0 "IndentCharWidth"
          [inInt16 count]

indentFirstLineCharWidth :: Int16
                         -> Paragraphs a0
                         -> IO ()
indentFirstLineCharWidth count =
  method0 "IndentFirstLineCharWidth"
          [inInt16 count]

outlinePromote :: Paragraphs a0
               -> IO ()
outlinePromote =
  method0 "OutlinePromote"
          []

outlineDemote :: Paragraphs a0
              -> IO ()
outlineDemote =
  method0 "OutlineDemote"
          []

outlineDemoteToBody :: Paragraphs a0
                    -> IO ()
outlineDemoteToBody =
  method0 "OutlineDemoteToBody"
          []

indent :: Paragraphs a0
       -> IO ()
indent =
  method0 "Indent"
          []

outdent :: Paragraphs a0
        -> IO ()
outdent =
  method0 "Outdent"
          []

getCharacterUnitRightIndent :: Paragraphs a0
                            -> IO Float
getCharacterUnitRightIndent =
  propertyGet "CharacterUnitRightIndent"
              []
              outFloat

setCharacterUnitRightIndent :: Float
                            -> Paragraphs a0
                            -> IO ()
setCharacterUnitRightIndent prop =
  propertySet "CharacterUnitRightIndent"
              [inFloat prop]

getCharacterUnitLeftIndent :: Paragraphs a0
                           -> IO Float
getCharacterUnitLeftIndent =
  propertyGet "CharacterUnitLeftIndent"
              []
              outFloat

setCharacterUnitLeftIndent :: Float
                           -> Paragraphs a0
                           -> IO ()
setCharacterUnitLeftIndent prop =
  propertySet "CharacterUnitLeftIndent"
              [inFloat prop]

getCharacterUnitFirstLineIndent :: Paragraphs a0
                                -> IO Float
getCharacterUnitFirstLineIndent =
  propertyGet "CharacterUnitFirstLineIndent"
              []
              outFloat

setCharacterUnitFirstLineIndent :: Float
                                -> Paragraphs a0
                                -> IO ()
setCharacterUnitFirstLineIndent prop =
  propertySet "CharacterUnitFirstLineIndent"
              [inFloat prop]

getLineUnitBefore :: Paragraphs a0
                  -> IO Float
getLineUnitBefore =
  propertyGet "LineUnitBefore"
              []
              outFloat

setLineUnitBefore :: Float
                  -> Paragraphs a0
                  -> IO ()
setLineUnitBefore prop =
  propertySet "LineUnitBefore"
              [inFloat prop]

getLineUnitAfter :: Paragraphs a0
                 -> IO Float
getLineUnitAfter =
  propertyGet "LineUnitAfter"
              []
              outFloat

setLineUnitAfter :: Float
                 -> Paragraphs a0
                 -> IO ()
setLineUnitAfter prop =
  propertySet "LineUnitAfter"
              [inFloat prop]

getReadingOrder :: Paragraphs a0
                -> IO WdReadingOrder
getReadingOrder =
  propertyGet "ReadingOrder"
              []
              outEnum

setReadingOrder :: WdReadingOrder
                -> Paragraphs a0
                -> IO ()
setReadingOrder prop =
  propertySet "ReadingOrder"
              [inEnum prop]

getSpaceBeforeAuto :: Paragraphs a0
                   -> IO Int32
getSpaceBeforeAuto =
  propertyGet "SpaceBeforeAuto"
              []
              outInt32

setSpaceBeforeAuto :: Int32
                   -> Paragraphs a0
                   -> IO ()
setSpaceBeforeAuto prop =
  propertySet "SpaceBeforeAuto"
              [inInt32 prop]

getSpaceAfterAuto :: Paragraphs a0
                  -> IO Int32
getSpaceAfterAuto =
  propertyGet "SpaceAfterAuto"
              []
              outInt32

setSpaceAfterAuto :: Int32
                  -> Paragraphs a0
                  -> IO ()
setSpaceAfterAuto prop =
  propertySet "SpaceAfterAuto"
              [inInt32 prop]

increaseSpacing :: Paragraphs a0
                -> IO ()
increaseSpacing =
  method0 "IncreaseSpacing"
          []

decreaseSpacing :: Paragraphs a0
                -> IO ()
decreaseSpacing =
  method0 "DecreaseSpacing"
          []

-- --------------------------------------------------
-- 
-- interface Paragraph
-- 
-- --------------------------------------------------
data Paragraph_ a = Paragraph__ 
type Paragraph a = IDispatch (Paragraph_ a)
iidParagraph :: IID (Paragraph ())
iidParagraph = mkIID "{00020957-0000-0000-C000-000000000046}"

getRange1 :: Paragraph a0
          -> IO (Range ())
getRange1 =
  propertyGet "Range"
              []
              outIDispatch

getApplication29 :: Paragraph a0
                 -> IO (Maybe Application)
getApplication29 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator29 :: Paragraph a0
             -> IO Int32
getCreator29 =
  propertyGet "Creator"
              []
              outInt32

getParent29 :: Paragraph a0
            -> IO (IDispatch ())
getParent29 =
  propertyGet "Parent"
              []
              outIDispatch

getFormat1 :: Paragraph a0
           -> IO (Maybe ParagraphFormat)
getFormat1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 11 iptr
    doThenFree free (readunique readParagraphFormat) prop

setFormat1 :: ParagraphFormat
           -> Paragraph a0
           -> IO ()
setFormat1 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 12 iptr
    free prop

getTabStops0 :: Paragraph a0
             -> IO (TabStops ())
getTabStops0 =
  propertyGet "TabStops"
              []
              outIUnknown

setTabStops0 :: TabStops a1
             -> Paragraph a0
             -> IO ()
setTabStops0 prop =
  propertySet "TabStops"
              [inIUnknown prop]

getBorders2 :: Paragraph a0
            -> IO (Borders ())
getBorders2 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders2 :: Borders a1
            -> Paragraph a0
            -> IO ()
setBorders2 prop =
  propertySet "Borders"
              [inIUnknown prop]

getDropCap :: Paragraph a0
           -> IO (DropCap ())
getDropCap =
  propertyGet "DropCap"
              []
              outIUnknown

getStyle3 :: (Variant a1)
          => Paragraph a0
          -> IO a1
getStyle3 =
  propertyGet "Style"
              []
              outVariant

setStyle3 :: (Variant a1)
          => a1
          -> Paragraph a0
          -> IO ()
setStyle3 prop =
  propertySet "Style"
              [inVariant prop]

getAlignment0 :: Paragraph a0
              -> IO WdParagraphAlignment
getAlignment0 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment0 :: WdParagraphAlignment
              -> Paragraph a0
              -> IO ()
setAlignment0 prop =
  propertySet "Alignment"
              [inEnum prop]

getKeepTogether0 :: Paragraph a0
                 -> IO Int32
getKeepTogether0 =
  propertyGet "KeepTogether"
              []
              outInt32

setKeepTogether0 :: Int32
                 -> Paragraph a0
                 -> IO ()
setKeepTogether0 prop =
  propertySet "KeepTogether"
              [inInt32 prop]

getKeepWithNext0 :: Paragraph a0
                 -> IO Int32
getKeepWithNext0 =
  propertyGet "KeepWithNext"
              []
              outInt32

setKeepWithNext0 :: Int32
                 -> Paragraph a0
                 -> IO ()
setKeepWithNext0 prop =
  propertySet "KeepWithNext"
              [inInt32 prop]

getPageBreakBefore0 :: Paragraph a0
                    -> IO Int32
getPageBreakBefore0 =
  propertyGet "PageBreakBefore"
              []
              outInt32

setPageBreakBefore0 :: Int32
                    -> Paragraph a0
                    -> IO ()
setPageBreakBefore0 prop =
  propertySet "PageBreakBefore"
              [inInt32 prop]

getNoLineNumber0 :: Paragraph a0
                 -> IO Int32
getNoLineNumber0 =
  propertyGet "NoLineNumber"
              []
              outInt32

setNoLineNumber0 :: Int32
                 -> Paragraph a0
                 -> IO ()
setNoLineNumber0 prop =
  propertySet "NoLineNumber"
              [inInt32 prop]

getRightIndent0 :: Paragraph a0
                -> IO Float
getRightIndent0 =
  propertyGet "RightIndent"
              []
              outFloat

setRightIndent0 :: Float
                -> Paragraph a0
                -> IO ()
setRightIndent0 prop =
  propertySet "RightIndent"
              [inFloat prop]

getLeftIndent0 :: Paragraph a0
               -> IO Float
getLeftIndent0 =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent0 :: Float
               -> Paragraph a0
               -> IO ()
setLeftIndent0 prop =
  propertySet "LeftIndent"
              [inFloat prop]

getFirstLineIndent0 :: Paragraph a0
                    -> IO Float
getFirstLineIndent0 =
  propertyGet "FirstLineIndent"
              []
              outFloat

setFirstLineIndent0 :: Float
                    -> Paragraph a0
                    -> IO ()
setFirstLineIndent0 prop =
  propertySet "FirstLineIndent"
              [inFloat prop]

getLineSpacing0 :: Paragraph a0
                -> IO Float
getLineSpacing0 =
  propertyGet "LineSpacing"
              []
              outFloat

setLineSpacing0 :: Float
                -> Paragraph a0
                -> IO ()
setLineSpacing0 prop =
  propertySet "LineSpacing"
              [inFloat prop]

getLineSpacingRule0 :: Paragraph a0
                    -> IO WdLineSpacing
getLineSpacingRule0 =
  propertyGet "LineSpacingRule"
              []
              outEnum

setLineSpacingRule0 :: WdLineSpacing
                    -> Paragraph a0
                    -> IO ()
setLineSpacingRule0 prop =
  propertySet "LineSpacingRule"
              [inEnum prop]

getSpaceBefore0 :: Paragraph a0
                -> IO Float
getSpaceBefore0 =
  propertyGet "SpaceBefore"
              []
              outFloat

setSpaceBefore0 :: Float
                -> Paragraph a0
                -> IO ()
setSpaceBefore0 prop =
  propertySet "SpaceBefore"
              [inFloat prop]

getSpaceAfter0 :: Paragraph a0
               -> IO Float
getSpaceAfter0 =
  propertyGet "SpaceAfter"
              []
              outFloat

setSpaceAfter0 :: Float
               -> Paragraph a0
               -> IO ()
setSpaceAfter0 prop =
  propertySet "SpaceAfter"
              [inFloat prop]

getHyphenation0 :: Paragraph a0
                -> IO Int32
getHyphenation0 =
  propertyGet "Hyphenation"
              []
              outInt32

setHyphenation0 :: Int32
                -> Paragraph a0
                -> IO ()
setHyphenation0 prop =
  propertySet "Hyphenation"
              [inInt32 prop]

getWidowControl0 :: Paragraph a0
                 -> IO Int32
getWidowControl0 =
  propertyGet "WidowControl"
              []
              outInt32

setWidowControl0 :: Int32
                 -> Paragraph a0
                 -> IO ()
setWidowControl0 prop =
  propertySet "WidowControl"
              [inInt32 prop]

getShading1 :: Paragraph a0
            -> IO (Shading ())
getShading1 =
  propertyGet "Shading"
              []
              outIUnknown

getFarEastLineBreakControl0 :: Paragraph a0
                            -> IO Int32
getFarEastLineBreakControl0 =
  propertyGet "FarEastLineBreakControl"
              []
              outInt32

setFarEastLineBreakControl0 :: Int32
                            -> Paragraph a0
                            -> IO ()
setFarEastLineBreakControl0 prop =
  propertySet "FarEastLineBreakControl"
              [inInt32 prop]

getWordWrap0 :: Paragraph a0
             -> IO Int32
getWordWrap0 =
  propertyGet "WordWrap"
              []
              outInt32

setWordWrap0 :: Int32
             -> Paragraph a0
             -> IO ()
setWordWrap0 prop =
  propertySet "WordWrap"
              [inInt32 prop]

getHangingPunctuation0 :: Paragraph a0
                       -> IO Int32
getHangingPunctuation0 =
  propertyGet "HangingPunctuation"
              []
              outInt32

setHangingPunctuation0 :: Int32
                       -> Paragraph a0
                       -> IO ()
setHangingPunctuation0 prop =
  propertySet "HangingPunctuation"
              [inInt32 prop]

getHalfWidthPunctuationOnTopOfLine0 :: Paragraph a0
                                    -> IO Int32
getHalfWidthPunctuationOnTopOfLine0 =
  propertyGet "HalfWidthPunctuationOnTopOfLine"
              []
              outInt32

setHalfWidthPunctuationOnTopOfLine0 :: Int32
                                    -> Paragraph a0
                                    -> IO ()
setHalfWidthPunctuationOnTopOfLine0 prop =
  propertySet "HalfWidthPunctuationOnTopOfLine"
              [inInt32 prop]

getAddSpaceBetweenFarEastAndAlpha0 :: Paragraph a0
                                   -> IO Int32
getAddSpaceBetweenFarEastAndAlpha0 =
  propertyGet "AddSpaceBetweenFarEastAndAlpha"
              []
              outInt32

setAddSpaceBetweenFarEastAndAlpha0 :: Int32
                                   -> Paragraph a0
                                   -> IO ()
setAddSpaceBetweenFarEastAndAlpha0 prop =
  propertySet "AddSpaceBetweenFarEastAndAlpha"
              [inInt32 prop]

getAddSpaceBetweenFarEastAndDigit0 :: Paragraph a0
                                   -> IO Int32
getAddSpaceBetweenFarEastAndDigit0 =
  propertyGet "AddSpaceBetweenFarEastAndDigit"
              []
              outInt32

setAddSpaceBetweenFarEastAndDigit0 :: Int32
                                   -> Paragraph a0
                                   -> IO ()
setAddSpaceBetweenFarEastAndDigit0 prop =
  propertySet "AddSpaceBetweenFarEastAndDigit"
              [inInt32 prop]

getBaseLineAlignment0 :: Paragraph a0
                      -> IO WdBaselineAlignment
getBaseLineAlignment0 =
  propertyGet "BaseLineAlignment"
              []
              outEnum

setBaseLineAlignment0 :: WdBaselineAlignment
                      -> Paragraph a0
                      -> IO ()
setBaseLineAlignment0 prop =
  propertySet "BaseLineAlignment"
              [inEnum prop]

getAutoAdjustRightIndent0 :: Paragraph a0
                          -> IO Int32
getAutoAdjustRightIndent0 =
  propertyGet "AutoAdjustRightIndent"
              []
              outInt32

setAutoAdjustRightIndent0 :: Int32
                          -> Paragraph a0
                          -> IO ()
setAutoAdjustRightIndent0 prop =
  propertySet "AutoAdjustRightIndent"
              [inInt32 prop]

getDisableLineHeightGrid0 :: Paragraph a0
                          -> IO Int32
getDisableLineHeightGrid0 =
  propertyGet "DisableLineHeightGrid"
              []
              outInt32

setDisableLineHeightGrid0 :: Int32
                          -> Paragraph a0
                          -> IO ()
setDisableLineHeightGrid0 prop =
  propertySet "DisableLineHeightGrid"
              [inInt32 prop]

getOutlineLevel0 :: Paragraph a0
                 -> IO WdOutlineLevel
getOutlineLevel0 =
  propertyGet "OutlineLevel"
              []
              outEnum

setOutlineLevel0 :: WdOutlineLevel
                 -> Paragraph a0
                 -> IO ()
setOutlineLevel0 prop =
  propertySet "OutlineLevel"
              [inEnum prop]

closeUp0 :: Paragraph a0
         -> IO ()
closeUp0 =
  method0 "CloseUp"
          []

openUp0 :: Paragraph a0
        -> IO ()
openUp0 =
  method0 "OpenUp"
          []

openOrCloseUp0 :: Paragraph a0
               -> IO ()
openOrCloseUp0 =
  method0 "OpenOrCloseUp"
          []

tabHangingIndent0 :: Int16
                  -> Paragraph a0
                  -> IO ()
tabHangingIndent0 count =
  method0 "TabHangingIndent"
          [inInt16 count]

tabIndent0 :: Int16
           -> Paragraph a0
           -> IO ()
tabIndent0 count =
  method0 "TabIndent"
          [inInt16 count]

reset1 :: Paragraph a0
       -> IO ()
reset1 =
  method0 "Reset"
          []

space10 :: Paragraph a0
        -> IO ()
space10 =
  method0 "Space1"
          []

space150 :: Paragraph a0
         -> IO ()
space150 =
  method0 "Space15"
          []

space20 :: Paragraph a0
        -> IO ()
space20 =
  method0 "Space2"
          []

indentCharWidth0 :: Int16
                 -> Paragraph a0
                 -> IO ()
indentCharWidth0 count =
  method0 "IndentCharWidth"
          [inInt16 count]

indentFirstLineCharWidth0 :: Int16
                          -> Paragraph a0
                          -> IO ()
indentFirstLineCharWidth0 count =
  method0 "IndentFirstLineCharWidth"
          [inInt16 count]

next0 :: (Variant a1)
      => a1
      -> Paragraph a0
      -> IO (Paragraph ())
next0 count =
  function1 "Next"
            [inVariant count]
            outIDispatch

previous0 :: (Variant a1)
          => a1
          -> Paragraph a0
          -> IO (Paragraph ())
previous0 count =
  function1 "Previous"
            [inVariant count]
            outIDispatch

outlinePromote0 :: Paragraph a0
                -> IO ()
outlinePromote0 =
  method0 "OutlinePromote"
          []

outlineDemote0 :: Paragraph a0
               -> IO ()
outlineDemote0 =
  method0 "OutlineDemote"
          []

outlineDemoteToBody0 :: Paragraph a0
                     -> IO ()
outlineDemoteToBody0 =
  method0 "OutlineDemoteToBody"
          []

indent0 :: Paragraph a0
        -> IO ()
indent0 =
  method0 "Indent"
          []

outdent0 :: Paragraph a0
         -> IO ()
outdent0 =
  method0 "Outdent"
          []

getCharacterUnitRightIndent0 :: Paragraph a0
                             -> IO Float
getCharacterUnitRightIndent0 =
  propertyGet "CharacterUnitRightIndent"
              []
              outFloat

setCharacterUnitRightIndent0 :: Float
                             -> Paragraph a0
                             -> IO ()
setCharacterUnitRightIndent0 prop =
  propertySet "CharacterUnitRightIndent"
              [inFloat prop]

getCharacterUnitLeftIndent0 :: Paragraph a0
                            -> IO Float
getCharacterUnitLeftIndent0 =
  propertyGet "CharacterUnitLeftIndent"
              []
              outFloat

setCharacterUnitLeftIndent0 :: Float
                            -> Paragraph a0
                            -> IO ()
setCharacterUnitLeftIndent0 prop =
  propertySet "CharacterUnitLeftIndent"
              [inFloat prop]

getCharacterUnitFirstLineIndent0 :: Paragraph a0
                                 -> IO Float
getCharacterUnitFirstLineIndent0 =
  propertyGet "CharacterUnitFirstLineIndent"
              []
              outFloat

setCharacterUnitFirstLineIndent0 :: Float
                                 -> Paragraph a0
                                 -> IO ()
setCharacterUnitFirstLineIndent0 prop =
  propertySet "CharacterUnitFirstLineIndent"
              [inFloat prop]

getLineUnitBefore0 :: Paragraph a0
                   -> IO Float
getLineUnitBefore0 =
  propertyGet "LineUnitBefore"
              []
              outFloat

setLineUnitBefore0 :: Float
                   -> Paragraph a0
                   -> IO ()
setLineUnitBefore0 prop =
  propertySet "LineUnitBefore"
              [inFloat prop]

getLineUnitAfter0 :: Paragraph a0
                  -> IO Float
getLineUnitAfter0 =
  propertyGet "LineUnitAfter"
              []
              outFloat

setLineUnitAfter0 :: Float
                  -> Paragraph a0
                  -> IO ()
setLineUnitAfter0 prop =
  propertySet "LineUnitAfter"
              [inFloat prop]

getReadingOrder0 :: Paragraph a0
                 -> IO WdReadingOrder
getReadingOrder0 =
  propertyGet "ReadingOrder"
              []
              outEnum

setReadingOrder0 :: WdReadingOrder
                 -> Paragraph a0
                 -> IO ()
setReadingOrder0 prop =
  propertySet "ReadingOrder"
              [inEnum prop]

getID1 :: Paragraph a0
       -> IO String
getID1 =
  propertyGet "ID"
              []
              outString

setID0 :: String
       -> Paragraph a0
       -> IO ()
setID0 prop =
  propertySet "ID"
              [inString prop]

getSpaceBeforeAuto0 :: Paragraph a0
                    -> IO Int32
getSpaceBeforeAuto0 =
  propertyGet "SpaceBeforeAuto"
              []
              outInt32

setSpaceBeforeAuto0 :: Int32
                    -> Paragraph a0
                    -> IO ()
setSpaceBeforeAuto0 prop =
  propertySet "SpaceBeforeAuto"
              [inInt32 prop]

getSpaceAfterAuto0 :: Paragraph a0
                   -> IO Int32
getSpaceAfterAuto0 =
  propertyGet "SpaceAfterAuto"
              []
              outInt32

setSpaceAfterAuto0 :: Int32
                   -> Paragraph a0
                   -> IO ()
setSpaceAfterAuto0 prop =
  propertySet "SpaceAfterAuto"
              [inInt32 prop]

getIsStyleSeparator :: Paragraph a0
                    -> IO Bool
getIsStyleSeparator =
  propertyGet "IsStyleSeparator"
              []
              outBool

selectNumber :: Paragraph a0
             -> IO ()
selectNumber =
  method0 "SelectNumber"
          []

listAdvanceTo :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> Paragraph a0
              -> IO ()
listAdvanceTo level1 level2 level3 level4 level5 level6 level7 level8 level9 =
  method0 "ListAdvanceTo"
          [ inDefaultValue (inInt32 0) inVariant level1
          , inDefaultValue (inInt32 0) inVariant level2
          , inDefaultValue (inInt32 0) inVariant level3
          , inDefaultValue (inInt32 0) inVariant level4
          , inDefaultValue (inInt32 0) inVariant level5
          , inDefaultValue (inInt32 0) inVariant level6
          , inDefaultValue (inInt32 0) inVariant level7
          , inDefaultValue (inInt32 0) inVariant level8
          , inDefaultValue (inInt32 0) inVariant level9
          ]

resetAdvanceTo :: Paragraph a0
               -> IO ()
resetAdvanceTo =
  method0 "ResetAdvanceTo"
          []

separateList :: Paragraph a0
             -> IO ()
separateList =
  method0 "SeparateList"
          []

joinList :: Paragraph a0
         -> IO ()
joinList =
  method0 "JoinList"
          []

getMirrorIndents :: Paragraph a0
                 -> IO Int32
getMirrorIndents =
  propertyGet "MirrorIndents"
              []
              outInt32

setMirrorIndents :: Int32
                 -> Paragraph a0
                 -> IO ()
setMirrorIndents prop =
  propertySet "MirrorIndents"
              [inInt32 prop]

getTextboxTightWrap :: Paragraph a0
                    -> IO WdTextboxTightWrap
getTextboxTightWrap =
  propertyGet "TextboxTightWrap"
              []
              outEnum

setTextboxTightWrap :: WdTextboxTightWrap
                    -> Paragraph a0
                    -> IO ()
setTextboxTightWrap prop =
  propertySet "TextboxTightWrap"
              [inEnum prop]

getListNumberOriginal :: Int16
                      -> Paragraph a0
                      -> IO Int16
getListNumberOriginal level =
  propertyGet "ListNumberOriginal"
              [inInt16 level]
              outInt16

-- --------------------------------------------------
-- 
-- interface DropCap
-- 
-- --------------------------------------------------
data DropCap_ a = DropCap__ 
type DropCap a = IDispatch (DropCap_ a)
iidDropCap :: IID (DropCap ())
iidDropCap = mkIID "{00020956-0000-0000-C000-000000000046}"

getApplication30 :: DropCap a0
                 -> IO (Maybe Application)
getApplication30 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator30 :: DropCap a0
             -> IO Int32
getCreator30 =
  propertyGet "Creator"
              []
              outInt32

getParent30 :: DropCap a0
            -> IO (IDispatch ())
getParent30 =
  propertyGet "Parent"
              []
              outIDispatch

getPosition :: DropCap a0
            -> IO WdDropPosition
getPosition =
  propertyGet "Position"
              []
              outEnum

setPosition :: WdDropPosition
            -> DropCap a0
            -> IO ()
setPosition prop =
  propertySet "Position"
              [inEnum prop]

getFontName :: DropCap a0
            -> IO String
getFontName =
  propertyGet "FontName"
              []
              outString

setFontName :: String
            -> DropCap a0
            -> IO ()
setFontName prop =
  propertySet "FontName"
              [inString prop]

getLinesToDrop :: DropCap a0
               -> IO Int32
getLinesToDrop =
  propertyGet "LinesToDrop"
              []
              outInt32

setLinesToDrop :: Int32
               -> DropCap a0
               -> IO ()
setLinesToDrop prop =
  propertySet "LinesToDrop"
              [inInt32 prop]

getDistanceFromText :: DropCap a0
                    -> IO Float
getDistanceFromText =
  propertyGet "DistanceFromText"
              []
              outFloat

setDistanceFromText :: Float
                    -> DropCap a0
                    -> IO ()
setDistanceFromText prop =
  propertySet "DistanceFromText"
              [inFloat prop]

clear :: DropCap a0
      -> IO ()
clear =
  method0 "Clear"
          []

enable :: DropCap a0
       -> IO ()
enable =
  method0 "Enable"
          []

-- --------------------------------------------------
-- 
-- interface TabStops
-- 
-- --------------------------------------------------
data TabStops_ a = TabStops__ 
type TabStops a = IDispatch (TabStops_ a)
iidTabStops :: IID (TabStops ())
iidTabStops = mkIID "{00020955-0000-0000-C000-000000000046}"

getNewEnum13 :: TabStops a0
             -> IO (IUnknown ())
getNewEnum13 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount13 :: TabStops a0
           -> IO Int32
getCount13 =
  propertyGet "Count"
              []
              outInt32

getApplication31 :: TabStops a0
                 -> IO (Maybe Application)
getApplication31 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator31 :: TabStops a0
             -> IO Int32
getCreator31 =
  propertyGet "Creator"
              []
              outInt32

getParent31 :: TabStops a0
            -> IO (IDispatch ())
getParent31 =
  propertyGet "Parent"
              []
              outIDispatch

item13 :: (Variant a1)
       => a1
       -> TabStops a0
       -> IO (TabStop ())
item13 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add7 :: (Variant a1, Variant a2)
     => Float
     -> a1
     -> a2
     -> TabStops a0
     -> IO (TabStop ())
add7 position alignment leader =
  function1 "Add"
            [ inFloat position
            , inVariant alignment
            , inVariant leader
            ]
            outIUnknown

clearAll :: TabStops a0
         -> IO ()
clearAll =
  method0 "ClearAll"
          []

before :: Float
       -> TabStops a0
       -> IO (TabStop ())
before position =
  function1 "Before"
            [inFloat position]
            outIUnknown

after :: Float
      -> TabStops a0
      -> IO (TabStop ())
after position =
  function1 "After"
            [inFloat position]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface TabStop
-- 
-- --------------------------------------------------
data TabStop_ a = TabStop__ 
type TabStop a = IDispatch (TabStop_ a)
iidTabStop :: IID (TabStop ())
iidTabStop = mkIID "{00020954-0000-0000-C000-000000000046}"

getApplication32 :: TabStop a0
                 -> IO (Maybe Application)
getApplication32 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator32 :: TabStop a0
             -> IO Int32
getCreator32 =
  propertyGet "Creator"
              []
              outInt32

getParent32 :: TabStop a0
            -> IO (IDispatch ())
getParent32 =
  propertyGet "Parent"
              []
              outIDispatch

getAlignment1 :: TabStop a0
              -> IO WdTabAlignment
getAlignment1 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment1 :: WdTabAlignment
              -> TabStop a0
              -> IO ()
setAlignment1 prop =
  propertySet "Alignment"
              [inEnum prop]

getLeader :: TabStop a0
          -> IO WdTabLeader
getLeader =
  propertyGet "Leader"
              []
              outEnum

setLeader :: WdTabLeader
          -> TabStop a0
          -> IO ()
setLeader prop =
  propertySet "Leader"
              [inEnum prop]

getPosition0 :: TabStop a0
             -> IO Float
getPosition0 =
  propertyGet "Position"
              []
              outFloat

setPosition0 :: Float
             -> TabStop a0
             -> IO ()
setPosition0 prop =
  propertySet "Position"
              [inFloat prop]

getCustomTab :: TabStop a0
             -> IO Bool
getCustomTab =
  propertyGet "CustomTab"
              []
              outBool

getNext1 :: TabStop a0
         -> IO (TabStop ())
getNext1 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious1 :: TabStop a0
             -> IO (TabStop ())
getPrevious1 =
  propertyGet "Previous"
              []
              outIDispatch

clear0 :: TabStop a0
       -> IO ()
clear0 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- interface _ParagraphFormat
-- 
-- --------------------------------------------------
data ParagraphFormat_ a = ParagraphFormat__ 
type ParagraphFormat a = IDispatch (ParagraphFormat_ a)
iidParagraphFormat :: IID (ParagraphFormat ())
iidParagraphFormat = mkIID "{00020953-0000-0000-C000-000000000046}"

getApplication33 :: ParagraphFormat a0
                 -> IO (Maybe Application)
getApplication33 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator33 :: ParagraphFormat a0
             -> IO Int32
getCreator33 =
  propertyGet "Creator"
              []
              outInt32

getParent33 :: ParagraphFormat a0
            -> IO (IDispatch ())
getParent33 =
  propertyGet "Parent"
              []
              outIDispatch

getDuplicate0 :: ParagraphFormat a0
              -> IO (Maybe ParagraphFormat)
getDuplicate0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 10 iptr
    doThenFree free (readunique readParagraphFormat) prop

getStyle4 :: (Variant a1)
          => ParagraphFormat a0
          -> IO a1
getStyle4 =
  propertyGet "Style"
              []
              outVariant

setStyle4 :: (Variant a1)
          => a1
          -> ParagraphFormat a0
          -> IO ()
setStyle4 prop =
  propertySet "Style"
              [inVariant prop]

getAlignment2 :: ParagraphFormat a0
              -> IO WdParagraphAlignment
getAlignment2 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment2 :: WdParagraphAlignment
              -> ParagraphFormat a0
              -> IO ()
setAlignment2 prop =
  propertySet "Alignment"
              [inEnum prop]

getKeepTogether1 :: ParagraphFormat a0
                 -> IO Int32
getKeepTogether1 =
  propertyGet "KeepTogether"
              []
              outInt32

setKeepTogether1 :: Int32
                 -> ParagraphFormat a0
                 -> IO ()
setKeepTogether1 prop =
  propertySet "KeepTogether"
              [inInt32 prop]

getKeepWithNext1 :: ParagraphFormat a0
                 -> IO Int32
getKeepWithNext1 =
  propertyGet "KeepWithNext"
              []
              outInt32

setKeepWithNext1 :: Int32
                 -> ParagraphFormat a0
                 -> IO ()
setKeepWithNext1 prop =
  propertySet "KeepWithNext"
              [inInt32 prop]

getPageBreakBefore1 :: ParagraphFormat a0
                    -> IO Int32
getPageBreakBefore1 =
  propertyGet "PageBreakBefore"
              []
              outInt32

setPageBreakBefore1 :: Int32
                    -> ParagraphFormat a0
                    -> IO ()
setPageBreakBefore1 prop =
  propertySet "PageBreakBefore"
              [inInt32 prop]

getNoLineNumber1 :: ParagraphFormat a0
                 -> IO Int32
getNoLineNumber1 =
  propertyGet "NoLineNumber"
              []
              outInt32

setNoLineNumber1 :: Int32
                 -> ParagraphFormat a0
                 -> IO ()
setNoLineNumber1 prop =
  propertySet "NoLineNumber"
              [inInt32 prop]

getRightIndent1 :: ParagraphFormat a0
                -> IO Float
getRightIndent1 =
  propertyGet "RightIndent"
              []
              outFloat

setRightIndent1 :: Float
                -> ParagraphFormat a0
                -> IO ()
setRightIndent1 prop =
  propertySet "RightIndent"
              [inFloat prop]

getLeftIndent1 :: ParagraphFormat a0
               -> IO Float
getLeftIndent1 =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent1 :: Float
               -> ParagraphFormat a0
               -> IO ()
setLeftIndent1 prop =
  propertySet "LeftIndent"
              [inFloat prop]

getFirstLineIndent1 :: ParagraphFormat a0
                    -> IO Float
getFirstLineIndent1 =
  propertyGet "FirstLineIndent"
              []
              outFloat

setFirstLineIndent1 :: Float
                    -> ParagraphFormat a0
                    -> IO ()
setFirstLineIndent1 prop =
  propertySet "FirstLineIndent"
              [inFloat prop]

getLineSpacing1 :: ParagraphFormat a0
                -> IO Float
getLineSpacing1 =
  propertyGet "LineSpacing"
              []
              outFloat

setLineSpacing1 :: Float
                -> ParagraphFormat a0
                -> IO ()
setLineSpacing1 prop =
  propertySet "LineSpacing"
              [inFloat prop]

getLineSpacingRule1 :: ParagraphFormat a0
                    -> IO WdLineSpacing
getLineSpacingRule1 =
  propertyGet "LineSpacingRule"
              []
              outEnum

setLineSpacingRule1 :: WdLineSpacing
                    -> ParagraphFormat a0
                    -> IO ()
setLineSpacingRule1 prop =
  propertySet "LineSpacingRule"
              [inEnum prop]

getSpaceBefore1 :: ParagraphFormat a0
                -> IO Float
getSpaceBefore1 =
  propertyGet "SpaceBefore"
              []
              outFloat

setSpaceBefore1 :: Float
                -> ParagraphFormat a0
                -> IO ()
setSpaceBefore1 prop =
  propertySet "SpaceBefore"
              [inFloat prop]

getSpaceAfter1 :: ParagraphFormat a0
               -> IO Float
getSpaceAfter1 =
  propertyGet "SpaceAfter"
              []
              outFloat

setSpaceAfter1 :: Float
               -> ParagraphFormat a0
               -> IO ()
setSpaceAfter1 prop =
  propertySet "SpaceAfter"
              [inFloat prop]

getHyphenation1 :: ParagraphFormat a0
                -> IO Int32
getHyphenation1 =
  propertyGet "Hyphenation"
              []
              outInt32

setHyphenation1 :: Int32
                -> ParagraphFormat a0
                -> IO ()
setHyphenation1 prop =
  propertySet "Hyphenation"
              [inInt32 prop]

getWidowControl1 :: ParagraphFormat a0
                 -> IO Int32
getWidowControl1 =
  propertyGet "WidowControl"
              []
              outInt32

setWidowControl1 :: Int32
                 -> ParagraphFormat a0
                 -> IO ()
setWidowControl1 prop =
  propertySet "WidowControl"
              [inInt32 prop]

getFarEastLineBreakControl1 :: ParagraphFormat a0
                            -> IO Int32
getFarEastLineBreakControl1 =
  propertyGet "FarEastLineBreakControl"
              []
              outInt32

setFarEastLineBreakControl1 :: Int32
                            -> ParagraphFormat a0
                            -> IO ()
setFarEastLineBreakControl1 prop =
  propertySet "FarEastLineBreakControl"
              [inInt32 prop]

getWordWrap1 :: ParagraphFormat a0
             -> IO Int32
getWordWrap1 =
  propertyGet "WordWrap"
              []
              outInt32

setWordWrap1 :: Int32
             -> ParagraphFormat a0
             -> IO ()
setWordWrap1 prop =
  propertySet "WordWrap"
              [inInt32 prop]

getHangingPunctuation1 :: ParagraphFormat a0
                       -> IO Int32
getHangingPunctuation1 =
  propertyGet "HangingPunctuation"
              []
              outInt32

setHangingPunctuation1 :: Int32
                       -> ParagraphFormat a0
                       -> IO ()
setHangingPunctuation1 prop =
  propertySet "HangingPunctuation"
              [inInt32 prop]

getHalfWidthPunctuationOnTopOfLine1 :: ParagraphFormat a0
                                    -> IO Int32
getHalfWidthPunctuationOnTopOfLine1 =
  propertyGet "HalfWidthPunctuationOnTopOfLine"
              []
              outInt32

setHalfWidthPunctuationOnTopOfLine1 :: Int32
                                    -> ParagraphFormat a0
                                    -> IO ()
setHalfWidthPunctuationOnTopOfLine1 prop =
  propertySet "HalfWidthPunctuationOnTopOfLine"
              [inInt32 prop]

getAddSpaceBetweenFarEastAndAlpha1 :: ParagraphFormat a0
                                   -> IO Int32
getAddSpaceBetweenFarEastAndAlpha1 =
  propertyGet "AddSpaceBetweenFarEastAndAlpha"
              []
              outInt32

setAddSpaceBetweenFarEastAndAlpha1 :: Int32
                                   -> ParagraphFormat a0
                                   -> IO ()
setAddSpaceBetweenFarEastAndAlpha1 prop =
  propertySet "AddSpaceBetweenFarEastAndAlpha"
              [inInt32 prop]

getAddSpaceBetweenFarEastAndDigit1 :: ParagraphFormat a0
                                   -> IO Int32
getAddSpaceBetweenFarEastAndDigit1 =
  propertyGet "AddSpaceBetweenFarEastAndDigit"
              []
              outInt32

setAddSpaceBetweenFarEastAndDigit1 :: Int32
                                   -> ParagraphFormat a0
                                   -> IO ()
setAddSpaceBetweenFarEastAndDigit1 prop =
  propertySet "AddSpaceBetweenFarEastAndDigit"
              [inInt32 prop]

getBaseLineAlignment1 :: ParagraphFormat a0
                      -> IO WdBaselineAlignment
getBaseLineAlignment1 =
  propertyGet "BaseLineAlignment"
              []
              outEnum

setBaseLineAlignment1 :: WdBaselineAlignment
                      -> ParagraphFormat a0
                      -> IO ()
setBaseLineAlignment1 prop =
  propertySet "BaseLineAlignment"
              [inEnum prop]

getAutoAdjustRightIndent1 :: ParagraphFormat a0
                          -> IO Int32
getAutoAdjustRightIndent1 =
  propertyGet "AutoAdjustRightIndent"
              []
              outInt32

setAutoAdjustRightIndent1 :: Int32
                          -> ParagraphFormat a0
                          -> IO ()
setAutoAdjustRightIndent1 prop =
  propertySet "AutoAdjustRightIndent"
              [inInt32 prop]

getDisableLineHeightGrid1 :: ParagraphFormat a0
                          -> IO Int32
getDisableLineHeightGrid1 =
  propertyGet "DisableLineHeightGrid"
              []
              outInt32

setDisableLineHeightGrid1 :: Int32
                          -> ParagraphFormat a0
                          -> IO ()
setDisableLineHeightGrid1 prop =
  propertySet "DisableLineHeightGrid"
              [inInt32 prop]

getTabStops1 :: ParagraphFormat a0
             -> IO (TabStops ())
getTabStops1 =
  propertyGet "TabStops"
              []
              outIDispatch

setTabStops1 :: TabStops a1
             -> ParagraphFormat a0
             -> IO ()
setTabStops1 prop =
  propertySet "TabStops"
              [inIDispatch prop]

getBorders3 :: ParagraphFormat a0
            -> IO (Borders ())
getBorders3 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders3 :: Borders a1
            -> ParagraphFormat a0
            -> IO ()
setBorders3 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading2 :: ParagraphFormat a0
            -> IO (Shading ())
getShading2 =
  propertyGet "Shading"
              []
              outIUnknown

getOutlineLevel1 :: ParagraphFormat a0
                 -> IO WdOutlineLevel
getOutlineLevel1 =
  propertyGet "OutlineLevel"
              []
              outEnum

setOutlineLevel1 :: WdOutlineLevel
                 -> ParagraphFormat a0
                 -> IO ()
setOutlineLevel1 prop =
  propertySet "OutlineLevel"
              [inEnum prop]

closeUp1 :: ParagraphFormat a0
         -> IO ()
closeUp1 =
  method0 "CloseUp"
          []

openUp1 :: ParagraphFormat a0
        -> IO ()
openUp1 =
  method0 "OpenUp"
          []

openOrCloseUp1 :: ParagraphFormat a0
               -> IO ()
openOrCloseUp1 =
  method0 "OpenOrCloseUp"
          []

tabHangingIndent1 :: Int16
                  -> ParagraphFormat a0
                  -> IO ()
tabHangingIndent1 count =
  method0 "TabHangingIndent"
          [inInt16 count]

tabIndent1 :: Int16
           -> ParagraphFormat a0
           -> IO ()
tabIndent1 count =
  method0 "TabIndent"
          [inInt16 count]

reset2 :: ParagraphFormat a0
       -> IO ()
reset2 =
  method0 "Reset"
          []

space11 :: ParagraphFormat a0
        -> IO ()
space11 =
  method0 "Space1"
          []

space151 :: ParagraphFormat a0
         -> IO ()
space151 =
  method0 "Space15"
          []

space21 :: ParagraphFormat a0
        -> IO ()
space21 =
  method0 "Space2"
          []

indentCharWidth1 :: Int16
                 -> ParagraphFormat a0
                 -> IO ()
indentCharWidth1 count =
  method0 "IndentCharWidth"
          [inInt16 count]

indentFirstLineCharWidth1 :: Int16
                          -> ParagraphFormat a0
                          -> IO ()
indentFirstLineCharWidth1 count =
  method0 "IndentFirstLineCharWidth"
          [inInt16 count]

getCharacterUnitRightIndent1 :: ParagraphFormat a0
                             -> IO Float
getCharacterUnitRightIndent1 =
  propertyGet "CharacterUnitRightIndent"
              []
              outFloat

setCharacterUnitRightIndent1 :: Float
                             -> ParagraphFormat a0
                             -> IO ()
setCharacterUnitRightIndent1 prop =
  propertySet "CharacterUnitRightIndent"
              [inFloat prop]

getCharacterUnitLeftIndent1 :: ParagraphFormat a0
                            -> IO Float
getCharacterUnitLeftIndent1 =
  propertyGet "CharacterUnitLeftIndent"
              []
              outFloat

setCharacterUnitLeftIndent1 :: Float
                            -> ParagraphFormat a0
                            -> IO ()
setCharacterUnitLeftIndent1 prop =
  propertySet "CharacterUnitLeftIndent"
              [inFloat prop]

getCharacterUnitFirstLineIndent1 :: ParagraphFormat a0
                                 -> IO Float
getCharacterUnitFirstLineIndent1 =
  propertyGet "CharacterUnitFirstLineIndent"
              []
              outFloat

setCharacterUnitFirstLineIndent1 :: Float
                                 -> ParagraphFormat a0
                                 -> IO ()
setCharacterUnitFirstLineIndent1 prop =
  propertySet "CharacterUnitFirstLineIndent"
              [inFloat prop]

getLineUnitBefore1 :: ParagraphFormat a0
                   -> IO Float
getLineUnitBefore1 =
  propertyGet "LineUnitBefore"
              []
              outFloat

setLineUnitBefore1 :: Float
                   -> ParagraphFormat a0
                   -> IO ()
setLineUnitBefore1 prop =
  propertySet "LineUnitBefore"
              [inFloat prop]

getLineUnitAfter1 :: ParagraphFormat a0
                  -> IO Float
getLineUnitAfter1 =
  propertyGet "LineUnitAfter"
              []
              outFloat

setLineUnitAfter1 :: Float
                  -> ParagraphFormat a0
                  -> IO ()
setLineUnitAfter1 prop =
  propertySet "LineUnitAfter"
              [inFloat prop]

getReadingOrder1 :: ParagraphFormat a0
                 -> IO WdReadingOrder
getReadingOrder1 =
  propertyGet "ReadingOrder"
              []
              outEnum

setReadingOrder1 :: WdReadingOrder
                 -> ParagraphFormat a0
                 -> IO ()
setReadingOrder1 prop =
  propertySet "ReadingOrder"
              [inEnum prop]

getSpaceBeforeAuto1 :: ParagraphFormat a0
                    -> IO Int32
getSpaceBeforeAuto1 =
  propertyGet "SpaceBeforeAuto"
              []
              outInt32

setSpaceBeforeAuto1 :: Int32
                    -> ParagraphFormat a0
                    -> IO ()
setSpaceBeforeAuto1 prop =
  propertySet "SpaceBeforeAuto"
              [inInt32 prop]

getSpaceAfterAuto1 :: ParagraphFormat a0
                   -> IO Int32
getSpaceAfterAuto1 =
  propertyGet "SpaceAfterAuto"
              []
              outInt32

setSpaceAfterAuto1 :: Int32
                   -> ParagraphFormat a0
                   -> IO ()
setSpaceAfterAuto1 prop =
  propertySet "SpaceAfterAuto"
              [inInt32 prop]

getMirrorIndents0 :: ParagraphFormat a0
                  -> IO Int32
getMirrorIndents0 =
  propertyGet "MirrorIndents"
              []
              outInt32

setMirrorIndents0 :: Int32
                  -> ParagraphFormat a0
                  -> IO ()
setMirrorIndents0 prop =
  propertySet "MirrorIndents"
              [inInt32 prop]

getTextboxTightWrap0 :: ParagraphFormat a0
                     -> IO WdTextboxTightWrap
getTextboxTightWrap0 =
  propertyGet "TextboxTightWrap"
              []
              outEnum

setTextboxTightWrap0 :: WdTextboxTightWrap
                     -> ParagraphFormat a0
                     -> IO ()
setTextboxTightWrap0 prop =
  propertySet "TextboxTightWrap"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface _Font
-- 
-- --------------------------------------------------
data Font_ a = Font__ 
type Font a = IDispatch (Font_ a)
iidFont :: IID (Font ())
iidFont = mkIID "{00020952-0000-0000-C000-000000000046}"

getApplication34 :: Font a0
                 -> IO (Maybe Application)
getApplication34 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator34 :: Font a0
             -> IO Int32
getCreator34 =
  propertyGet "Creator"
              []
              outInt32

getParent34 :: Font a0
            -> IO (IDispatch ())
getParent34 =
  propertyGet "Parent"
              []
              outIDispatch

getDuplicate1 :: Font a0
              -> IO (Maybe Font)
getDuplicate1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 10 iptr
    doThenFree free (readunique readFont) prop

getBold0 :: Font a0
         -> IO Int32
getBold0 =
  propertyGet "Bold"
              []
              outInt32

setBold0 :: Int32
         -> Font a0
         -> IO ()
setBold0 prop =
  propertySet "Bold"
              [inInt32 prop]

getItalic0 :: Font a0
           -> IO Int32
getItalic0 =
  propertyGet "Italic"
              []
              outInt32

setItalic0 :: Int32
           -> Font a0
           -> IO ()
setItalic0 prop =
  propertySet "Italic"
              [inInt32 prop]

getHidden :: Font a0
          -> IO Int32
getHidden =
  propertyGet "Hidden"
              []
              outInt32

setHidden :: Int32
          -> Font a0
          -> IO ()
setHidden prop =
  propertySet "Hidden"
              [inInt32 prop]

getSmallCaps :: Font a0
             -> IO Int32
getSmallCaps =
  propertyGet "SmallCaps"
              []
              outInt32

setSmallCaps :: Int32
             -> Font a0
             -> IO ()
setSmallCaps prop =
  propertySet "SmallCaps"
              [inInt32 prop]

getAllCaps :: Font a0
           -> IO Int32
getAllCaps =
  propertyGet "AllCaps"
              []
              outInt32

setAllCaps :: Int32
           -> Font a0
           -> IO ()
setAllCaps prop =
  propertySet "AllCaps"
              [inInt32 prop]

getStrikeThrough :: Font a0
                 -> IO Int32
getStrikeThrough =
  propertyGet "StrikeThrough"
              []
              outInt32

setStrikeThrough :: Int32
                 -> Font a0
                 -> IO ()
setStrikeThrough prop =
  propertySet "StrikeThrough"
              [inInt32 prop]

getDoubleStrikeThrough :: Font a0
                       -> IO Int32
getDoubleStrikeThrough =
  propertyGet "DoubleStrikeThrough"
              []
              outInt32

setDoubleStrikeThrough :: Int32
                       -> Font a0
                       -> IO ()
setDoubleStrikeThrough prop =
  propertySet "DoubleStrikeThrough"
              [inInt32 prop]

getColorIndex :: Font a0
              -> IO WdColorIndex
getColorIndex =
  propertyGet "ColorIndex"
              []
              outEnum

setColorIndex :: WdColorIndex
              -> Font a0
              -> IO ()
setColorIndex prop =
  propertySet "ColorIndex"
              [inEnum prop]

getSubscript :: Font a0
             -> IO Int32
getSubscript =
  propertyGet "Subscript"
              []
              outInt32

setSubscript :: Int32
             -> Font a0
             -> IO ()
setSubscript prop =
  propertySet "Subscript"
              [inInt32 prop]

getSuperscript :: Font a0
               -> IO Int32
getSuperscript =
  propertyGet "Superscript"
              []
              outInt32

setSuperscript :: Int32
               -> Font a0
               -> IO ()
setSuperscript prop =
  propertySet "Superscript"
              [inInt32 prop]

getUnderline0 :: Font a0
              -> IO WdUnderline
getUnderline0 =
  propertyGet "Underline"
              []
              outEnum

setUnderline0 :: WdUnderline
              -> Font a0
              -> IO ()
setUnderline0 prop =
  propertySet "Underline"
              [inEnum prop]

getSize :: Font a0
        -> IO Float
getSize =
  propertyGet "Size"
              []
              outFloat

setSize :: Float
        -> Font a0
        -> IO ()
setSize prop =
  propertySet "Size"
              [inFloat prop]

getName7 :: Font a0
         -> IO String
getName7 =
  propertyGet "Name"
              []
              outString

setName :: String
        -> Font a0
        -> IO ()
setName prop =
  propertySet "Name"
              [inString prop]

getPosition1 :: Font a0
             -> IO Int32
getPosition1 =
  propertyGet "Position"
              []
              outInt32

setPosition1 :: Int32
             -> Font a0
             -> IO ()
setPosition1 prop =
  propertySet "Position"
              [inInt32 prop]

getSpacing :: Font a0
           -> IO Float
getSpacing =
  propertyGet "Spacing"
              []
              outFloat

setSpacing :: Float
           -> Font a0
           -> IO ()
setSpacing prop =
  propertySet "Spacing"
              [inFloat prop]

getScaling :: Font a0
           -> IO Int32
getScaling =
  propertyGet "Scaling"
              []
              outInt32

setScaling :: Int32
           -> Font a0
           -> IO ()
setScaling prop =
  propertySet "Scaling"
              [inInt32 prop]

getShadow :: Font a0
          -> IO Int32
getShadow =
  propertyGet "Shadow"
              []
              outInt32

setShadow :: Int32
          -> Font a0
          -> IO ()
setShadow prop =
  propertySet "Shadow"
              [inInt32 prop]

getOutline :: Font a0
           -> IO Int32
getOutline =
  propertyGet "Outline"
              []
              outInt32

setOutline :: Int32
           -> Font a0
           -> IO ()
setOutline prop =
  propertySet "Outline"
              [inInt32 prop]

getEmboss :: Font a0
          -> IO Int32
getEmboss =
  propertyGet "Emboss"
              []
              outInt32

setEmboss :: Int32
          -> Font a0
          -> IO ()
setEmboss prop =
  propertySet "Emboss"
              [inInt32 prop]

getKerning :: Font a0
           -> IO Float
getKerning =
  propertyGet "Kerning"
              []
              outFloat

setKerning :: Float
           -> Font a0
           -> IO ()
setKerning prop =
  propertySet "Kerning"
              [inFloat prop]

getEngrave :: Font a0
           -> IO Int32
getEngrave =
  propertyGet "Engrave"
              []
              outInt32

setEngrave :: Int32
           -> Font a0
           -> IO ()
setEngrave prop =
  propertySet "Engrave"
              [inInt32 prop]

getAnimation :: Font a0
             -> IO WdAnimation
getAnimation =
  propertyGet "Animation"
              []
              outEnum

setAnimation :: WdAnimation
             -> Font a0
             -> IO ()
setAnimation prop =
  propertySet "Animation"
              [inEnum prop]

getBorders4 :: Font a0
            -> IO (Borders ())
getBorders4 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders4 :: Borders a1
            -> Font a0
            -> IO ()
setBorders4 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading3 :: Font a0
            -> IO (Shading ())
getShading3 =
  propertyGet "Shading"
              []
              outIUnknown

getEmphasisMark0 :: Font a0
                 -> IO WdEmphasisMark
getEmphasisMark0 =
  propertyGet "EmphasisMark"
              []
              outEnum

setEmphasisMark0 :: WdEmphasisMark
                 -> Font a0
                 -> IO ()
setEmphasisMark0 prop =
  propertySet "EmphasisMark"
              [inEnum prop]

getDisableCharacterSpaceGrid0 :: Font a0
                              -> IO Bool
getDisableCharacterSpaceGrid0 =
  propertyGet "DisableCharacterSpaceGrid"
              []
              outBool

setDisableCharacterSpaceGrid0 :: Bool
                              -> Font a0
                              -> IO ()
setDisableCharacterSpaceGrid0 prop =
  propertySet "DisableCharacterSpaceGrid"
              [inBool prop]

getNameFarEast :: Font a0
               -> IO String
getNameFarEast =
  propertyGet "NameFarEast"
              []
              outString

setNameFarEast :: String
               -> Font a0
               -> IO ()
setNameFarEast prop =
  propertySet "NameFarEast"
              [inString prop]

getNameAscii :: Font a0
             -> IO String
getNameAscii =
  propertyGet "NameAscii"
              []
              outString

setNameAscii :: String
             -> Font a0
             -> IO ()
setNameAscii prop =
  propertySet "NameAscii"
              [inString prop]

getNameOther :: Font a0
             -> IO String
getNameOther =
  propertyGet "NameOther"
              []
              outString

setNameOther :: String
             -> Font a0
             -> IO ()
setNameOther prop =
  propertySet "NameOther"
              [inString prop]

grow :: Font a0
     -> IO ()
grow =
  method0 "Grow"
          []

shrink :: Font a0
       -> IO ()
shrink =
  method0 "Shrink"
          []

reset3 :: Font a0
       -> IO ()
reset3 =
  method0 "Reset"
          []

setAsTemplateDefault :: Font a0
                     -> IO ()
setAsTemplateDefault =
  method0 "SetAsTemplateDefault"
          []

getColor :: Font a0
         -> IO WdColor
getColor =
  propertyGet "Color"
              []
              outEnum

setColor :: WdColor
         -> Font a0
         -> IO ()
setColor prop =
  propertySet "Color"
              [inEnum prop]

getBoldBi0 :: Font a0
           -> IO Int32
getBoldBi0 =
  propertyGet "BoldBi"
              []
              outInt32

setBoldBi0 :: Int32
           -> Font a0
           -> IO ()
setBoldBi0 prop =
  propertySet "BoldBi"
              [inInt32 prop]

getItalicBi0 :: Font a0
             -> IO Int32
getItalicBi0 =
  propertyGet "ItalicBi"
              []
              outInt32

setItalicBi0 :: Int32
             -> Font a0
             -> IO ()
setItalicBi0 prop =
  propertySet "ItalicBi"
              [inInt32 prop]

getSizeBi :: Font a0
          -> IO Float
getSizeBi =
  propertyGet "SizeBi"
              []
              outFloat

setSizeBi :: Float
          -> Font a0
          -> IO ()
setSizeBi prop =
  propertySet "SizeBi"
              [inFloat prop]

getNameBi :: Font a0
          -> IO String
getNameBi =
  propertyGet "NameBi"
              []
              outString

setNameBi :: String
          -> Font a0
          -> IO ()
setNameBi prop =
  propertySet "NameBi"
              [inString prop]

getColorIndexBi :: Font a0
                -> IO WdColorIndex
getColorIndexBi =
  propertyGet "ColorIndexBi"
              []
              outEnum

setColorIndexBi :: WdColorIndex
                -> Font a0
                -> IO ()
setColorIndexBi prop =
  propertySet "ColorIndexBi"
              [inEnum prop]

getDiacriticColor :: Font a0
                  -> IO WdColor
getDiacriticColor =
  propertyGet "DiacriticColor"
              []
              outEnum

setDiacriticColor :: WdColor
                  -> Font a0
                  -> IO ()
setDiacriticColor prop =
  propertySet "DiacriticColor"
              [inEnum prop]

getUnderlineColor :: Font a0
                  -> IO WdColor
getUnderlineColor =
  propertyGet "UnderlineColor"
              []
              outEnum

setUnderlineColor :: WdColor
                  -> Font a0
                  -> IO ()
setUnderlineColor prop =
  propertySet "UnderlineColor"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Table
-- 
-- --------------------------------------------------
data Table_ a = Table__ 
type Table a = IDispatch (Table_ a)
iidTable :: IID (Table ())
iidTable = mkIID "{00020951-0000-0000-C000-000000000046}"

getRange2 :: Table a0
          -> IO (Range ())
getRange2 =
  propertyGet "Range"
              []
              outIDispatch

getApplication35 :: Table a0
                 -> IO (Maybe Application)
getApplication35 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator35 :: Table a0
             -> IO Int32
getCreator35 =
  propertyGet "Creator"
              []
              outInt32

getParent35 :: Table a0
            -> IO (IDispatch ())
getParent35 =
  propertyGet "Parent"
              []
              outIDispatch

getColumns0 :: Table a0
            -> IO (Columns ())
getColumns0 =
  propertyGet "Columns"
              []
              outIUnknown

getRows0 :: Table a0
         -> IO (Rows ())
getRows0 =
  propertyGet "Rows"
              []
              outIUnknown

getBorders5 :: Table a0
            -> IO (Borders ())
getBorders5 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders5 :: Borders a1
            -> Table a0
            -> IO ()
setBorders5 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading4 :: Table a0
            -> IO (Shading ())
getShading4 =
  propertyGet "Shading"
              []
              outIUnknown

getUniform :: Table a0
           -> IO Bool
getUniform =
  propertyGet "Uniform"
              []
              outBool

getAutoFormatType :: Table a0
                  -> IO Int32
getAutoFormatType =
  propertyGet "AutoFormatType"
              []
              outInt32

select2 :: Table a0
        -> IO ()
select2 =
  method0 "Select"
          []

delete3 :: Table a0
        -> IO ()
delete3 =
  method0 "Delete"
          []

sortOld0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> Table a0
         -> IO ()
sortOld0 excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 caseSensitive languageID =
  method0 "SortOld"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant caseSensitive
          , inVariant languageID
          ]

sortAscending0 :: Table a0
               -> IO ()
sortAscending0 =
  method0 "SortAscending"
          []

sortDescending0 :: Table a0
                -> IO ()
sortDescending0 =
  method0 "SortDescending"
          []

autoFormat1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> Table a0
            -> IO ()
autoFormat1 format applyBorders applyShading applyFont applyColor applyHeadingRows applyLastRow applyFirstColumn applyLastColumn autoFit =
  method0 "AutoFormat"
          [ inVariant format
          , inVariant applyBorders
          , inVariant applyShading
          , inVariant applyFont
          , inVariant applyColor
          , inVariant applyHeadingRows
          , inVariant applyLastRow
          , inVariant applyFirstColumn
          , inVariant applyLastColumn
          , inVariant autoFit
          ]

updateAutoFormat :: Table a0
                 -> IO ()
updateAutoFormat =
  method0 "UpdateAutoFormat"
          []

convertToTextOld :: (Variant a1)
                 => a1
                 -> Table a0
                 -> IO (Range ())
convertToTextOld separator =
  function1 "ConvertToTextOld"
            [inVariant separator]
            outIDispatch

cell :: Int32
     -> Int32
     -> Table a0
     -> IO (Cell ())
cell row column =
  function1 "Cell"
            [ inInt32 row
            , inInt32 column
            ]
            outIUnknown

split :: (Variant a1)
      => a1
      -> Table a0
      -> IO (Table ())
split beforeRow =
  function1 "Split"
            [inVariant beforeRow]
            outIDispatch

convertToText :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> Table a0
              -> IO (Range ())
convertToText separator nestedTables =
  function1 "ConvertToText"
            [ inVariant separator
            , inVariant nestedTables
            ]
            outIDispatch

autoFitBehavior :: WdAutoFitBehavior
                -> Table a0
                -> IO ()
autoFitBehavior behavior =
  method0 "AutoFitBehavior"
          [inEnum behavior]

sort0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> Table a0
      -> IO ()
sort0 excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 caseSensitive bidiSort ignoreThe ignoreKashida ignoreDiacritics ignoreHe languageID =
  method0 "Sort"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant caseSensitive
          , inVariant bidiSort
          , inVariant ignoreThe
          , inVariant ignoreKashida
          , inVariant ignoreDiacritics
          , inVariant ignoreHe
          , inVariant languageID
          ]

getTables1 :: Table a0
           -> IO (Tables ())
getTables1 =
  propertyGet "Tables"
              []
              outIUnknown

getNestingLevel :: Table a0
                -> IO Int32
getNestingLevel =
  propertyGet "NestingLevel"
              []
              outInt32

getAllowPageBreaks :: Table a0
                   -> IO Bool
getAllowPageBreaks =
  propertyGet "AllowPageBreaks"
              []
              outBool

setAllowPageBreaks :: Bool
                   -> Table a0
                   -> IO ()
setAllowPageBreaks prop =
  propertySet "AllowPageBreaks"
              [inBool prop]

getAllowAutoFit :: Table a0
                -> IO Bool
getAllowAutoFit =
  propertyGet "AllowAutoFit"
              []
              outBool

setAllowAutoFit :: Bool
                -> Table a0
                -> IO ()
setAllowAutoFit prop =
  propertySet "AllowAutoFit"
              [inBool prop]

getPreferredWidth :: Table a0
                  -> IO Float
getPreferredWidth =
  propertyGet "PreferredWidth"
              []
              outFloat

setPreferredWidth :: Float
                  -> Table a0
                  -> IO ()
setPreferredWidth prop =
  propertySet "PreferredWidth"
              [inFloat prop]

getPreferredWidthType :: Table a0
                      -> IO WdPreferredWidthType
getPreferredWidthType =
  propertyGet "PreferredWidthType"
              []
              outEnum

setPreferredWidthType :: WdPreferredWidthType
                      -> Table a0
                      -> IO ()
setPreferredWidthType prop =
  propertySet "PreferredWidthType"
              [inEnum prop]

getTopPadding :: Table a0
              -> IO Float
getTopPadding =
  propertyGet "TopPadding"
              []
              outFloat

setTopPadding :: Float
              -> Table a0
              -> IO ()
setTopPadding prop =
  propertySet "TopPadding"
              [inFloat prop]

getBottomPadding :: Table a0
                 -> IO Float
getBottomPadding =
  propertyGet "BottomPadding"
              []
              outFloat

setBottomPadding :: Float
                 -> Table a0
                 -> IO ()
setBottomPadding prop =
  propertySet "BottomPadding"
              [inFloat prop]

getLeftPadding :: Table a0
               -> IO Float
getLeftPadding =
  propertyGet "LeftPadding"
              []
              outFloat

setLeftPadding :: Float
               -> Table a0
               -> IO ()
setLeftPadding prop =
  propertySet "LeftPadding"
              [inFloat prop]

getRightPadding :: Table a0
                -> IO Float
getRightPadding =
  propertyGet "RightPadding"
              []
              outFloat

setRightPadding :: Float
                -> Table a0
                -> IO ()
setRightPadding prop =
  propertySet "RightPadding"
              [inFloat prop]

getSpacing0 :: Table a0
            -> IO Float
getSpacing0 =
  propertyGet "Spacing"
              []
              outFloat

setSpacing0 :: Float
            -> Table a0
            -> IO ()
setSpacing0 prop =
  propertySet "Spacing"
              [inFloat prop]

getTableDirection :: Table a0
                  -> IO WdTableDirection
getTableDirection =
  propertyGet "TableDirection"
              []
              outEnum

setTableDirection :: WdTableDirection
                  -> Table a0
                  -> IO ()
setTableDirection prop =
  propertySet "TableDirection"
              [inEnum prop]

getID2 :: Table a0
       -> IO String
getID2 =
  propertyGet "ID"
              []
              outString

setID1 :: String
       -> Table a0
       -> IO ()
setID1 prop =
  propertySet "ID"
              [inString prop]

getStyle5 :: (Variant a1)
          => Table a0
          -> IO a1
getStyle5 =
  propertyGet "Style"
              []
              outVariant

setStyle5 :: (Variant a1)
          => a1
          -> Table a0
          -> IO ()
setStyle5 prop =
  propertySet "Style"
              [inVariant prop]

getApplyStyleHeadingRows :: Table a0
                         -> IO Bool
getApplyStyleHeadingRows =
  propertyGet "ApplyStyleHeadingRows"
              []
              outBool

setApplyStyleHeadingRows :: Bool
                         -> Table a0
                         -> IO ()
setApplyStyleHeadingRows prop =
  propertySet "ApplyStyleHeadingRows"
              [inBool prop]

getApplyStyleLastRow :: Table a0
                     -> IO Bool
getApplyStyleLastRow =
  propertyGet "ApplyStyleLastRow"
              []
              outBool

setApplyStyleLastRow :: Bool
                     -> Table a0
                     -> IO ()
setApplyStyleLastRow prop =
  propertySet "ApplyStyleLastRow"
              [inBool prop]

getApplyStyleFirstColumn :: Table a0
                         -> IO Bool
getApplyStyleFirstColumn =
  propertyGet "ApplyStyleFirstColumn"
              []
              outBool

setApplyStyleFirstColumn :: Bool
                         -> Table a0
                         -> IO ()
setApplyStyleFirstColumn prop =
  propertySet "ApplyStyleFirstColumn"
              [inBool prop]

getApplyStyleLastColumn :: Table a0
                        -> IO Bool
getApplyStyleLastColumn =
  propertyGet "ApplyStyleLastColumn"
              []
              outBool

setApplyStyleLastColumn :: Bool
                        -> Table a0
                        -> IO ()
setApplyStyleLastColumn prop =
  propertySet "ApplyStyleLastColumn"
              [inBool prop]

getApplyStyleRowBands :: Table a0
                      -> IO Bool
getApplyStyleRowBands =
  propertyGet "ApplyStyleRowBands"
              []
              outBool

setApplyStyleRowBands :: Bool
                      -> Table a0
                      -> IO ()
setApplyStyleRowBands prop =
  propertySet "ApplyStyleRowBands"
              [inBool prop]

getApplyStyleColumnBands :: Table a0
                         -> IO Bool
getApplyStyleColumnBands =
  propertyGet "ApplyStyleColumnBands"
              []
              outBool

setApplyStyleColumnBands :: Bool
                         -> Table a0
                         -> IO ()
setApplyStyleColumnBands prop =
  propertySet "ApplyStyleColumnBands"
              [inBool prop]

applyStyleDirectFormatting :: String
                           -> Table a0
                           -> IO ()
applyStyleDirectFormatting styleName =
  method0 "ApplyStyleDirectFormatting"
          [inString styleName]

-- --------------------------------------------------
-- 
-- interface Row
-- 
-- --------------------------------------------------
data Row_ a = Row__ 
type Row a = IDispatch (Row_ a)
iidRow :: IID (Row ())
iidRow = mkIID "{00020950-0000-0000-C000-000000000046}"

getRange3 :: Row a0
          -> IO (Range ())
getRange3 =
  propertyGet "Range"
              []
              outIDispatch

getApplication36 :: Row a0
                 -> IO (Maybe Application)
getApplication36 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator36 :: Row a0
             -> IO Int32
getCreator36 =
  propertyGet "Creator"
              []
              outInt32

getParent36 :: Row a0
            -> IO (IDispatch ())
getParent36 =
  propertyGet "Parent"
              []
              outIDispatch

getAllowBreakAcrossPages :: Row a0
                         -> IO Int32
getAllowBreakAcrossPages =
  propertyGet "AllowBreakAcrossPages"
              []
              outInt32

setAllowBreakAcrossPages :: Int32
                         -> Row a0
                         -> IO ()
setAllowBreakAcrossPages prop =
  propertySet "AllowBreakAcrossPages"
              [inInt32 prop]

getAlignment3 :: Row a0
              -> IO WdRowAlignment
getAlignment3 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment3 :: WdRowAlignment
              -> Row a0
              -> IO ()
setAlignment3 prop =
  propertySet "Alignment"
              [inEnum prop]

getHeadingFormat :: Row a0
                 -> IO Int32
getHeadingFormat =
  propertyGet "HeadingFormat"
              []
              outInt32

setHeadingFormat :: Int32
                 -> Row a0
                 -> IO ()
setHeadingFormat prop =
  propertySet "HeadingFormat"
              [inInt32 prop]

getSpaceBetweenColumns :: Row a0
                       -> IO Float
getSpaceBetweenColumns =
  propertyGet "SpaceBetweenColumns"
              []
              outFloat

setSpaceBetweenColumns :: Float
                       -> Row a0
                       -> IO ()
setSpaceBetweenColumns prop =
  propertySet "SpaceBetweenColumns"
              [inFloat prop]

getHeight1 :: Row a0
           -> IO Float
getHeight1 =
  propertyGet "Height"
              []
              outFloat

setHeight1 :: Float
           -> Row a0
           -> IO ()
setHeight1 prop =
  propertySet "Height"
              [inFloat prop]

getHeightRule :: Row a0
              -> IO WdRowHeightRule
getHeightRule =
  propertyGet "HeightRule"
              []
              outEnum

setHeightRule :: WdRowHeightRule
              -> Row a0
              -> IO ()
setHeightRule prop =
  propertySet "HeightRule"
              [inEnum prop]

getLeftIndent2 :: Row a0
               -> IO Float
getLeftIndent2 =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent2 :: Float
               -> Row a0
               -> IO ()
setLeftIndent2 prop =
  propertySet "LeftIndent"
              [inFloat prop]

getIsLast :: Row a0
          -> IO Bool
getIsLast =
  propertyGet "IsLast"
              []
              outBool

getIsFirst :: Row a0
           -> IO Bool
getIsFirst =
  propertyGet "IsFirst"
              []
              outBool

getIndex4 :: Row a0
          -> IO Int32
getIndex4 =
  propertyGet "Index"
              []
              outInt32

getCells0 :: Row a0
          -> IO (Cells ())
getCells0 =
  propertyGet "Cells"
              []
              outIUnknown

getBorders6 :: Row a0
            -> IO (Borders ())
getBorders6 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders6 :: Borders a1
            -> Row a0
            -> IO ()
setBorders6 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading5 :: Row a0
            -> IO (Shading ())
getShading5 =
  propertyGet "Shading"
              []
              outIUnknown

getNext2 :: Row a0
         -> IO (Row ())
getNext2 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious2 :: Row a0
             -> IO (Row ())
getPrevious2 =
  propertyGet "Previous"
              []
              outIDispatch

select3 :: Row a0
        -> IO ()
select3 =
  method0 "Select"
          []

delete4 :: Row a0
        -> IO ()
delete4 =
  method0 "Delete"
          []

setLeftIndent3 :: Float
               -> WdRulerStyle
               -> Row a0
               -> IO ()
setLeftIndent3 leftIndent rulerStyle =
  method0 "SetLeftIndent"
          [ inFloat leftIndent
          , inEnum rulerStyle
          ]

setHeight2 :: Float
           -> WdRowHeightRule
           -> Row a0
           -> IO ()
setHeight2 rowHeight heightRule =
  method0 "SetHeight"
          [ inFloat rowHeight
          , inEnum heightRule
          ]

convertToTextOld0 :: (Variant a1)
                  => a1
                  -> Row a0
                  -> IO (Range ())
convertToTextOld0 separator =
  function1 "ConvertToTextOld"
            [inVariant separator]
            outIDispatch

convertToText0 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> Row a0
               -> IO (Range ())
convertToText0 separator nestedTables =
  function1 "ConvertToText"
            [ inVariant separator
            , inVariant nestedTables
            ]
            outIDispatch

getNestingLevel0 :: Row a0
                 -> IO Int32
getNestingLevel0 =
  propertyGet "NestingLevel"
              []
              outInt32

getID3 :: Row a0
       -> IO String
getID3 =
  propertyGet "ID"
              []
              outString

setID2 :: String
       -> Row a0
       -> IO ()
setID2 prop =
  propertySet "ID"
              [inString prop]

-- --------------------------------------------------
-- 
-- interface Column
-- 
-- --------------------------------------------------
data Column_ a = Column__ 
type Column a = IDispatch (Column_ a)
iidColumn :: IID (Column ())
iidColumn = mkIID "{0002094F-0000-0000-C000-000000000046}"

getApplication37 :: Column a0
                 -> IO (Maybe Application)
getApplication37 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator37 :: Column a0
             -> IO Int32
getCreator37 =
  propertyGet "Creator"
              []
              outInt32

getParent37 :: Column a0
            -> IO (IDispatch ())
getParent37 =
  propertyGet "Parent"
              []
              outIDispatch

getWidth1 :: Column a0
          -> IO Float
getWidth1 =
  propertyGet "Width"
              []
              outFloat

setWidth1 :: Float
          -> Column a0
          -> IO ()
setWidth1 prop =
  propertySet "Width"
              [inFloat prop]

getIsFirst0 :: Column a0
            -> IO Bool
getIsFirst0 =
  propertyGet "IsFirst"
              []
              outBool

getIsLast0 :: Column a0
           -> IO Bool
getIsLast0 =
  propertyGet "IsLast"
              []
              outBool

getIndex5 :: Column a0
          -> IO Int32
getIndex5 =
  propertyGet "Index"
              []
              outInt32

getCells1 :: Column a0
          -> IO (Cells ())
getCells1 =
  propertyGet "Cells"
              []
              outIUnknown

getBorders7 :: Column a0
            -> IO (Borders ())
getBorders7 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders7 :: Borders a1
            -> Column a0
            -> IO ()
setBorders7 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading6 :: Column a0
            -> IO (Shading ())
getShading6 =
  propertyGet "Shading"
              []
              outIUnknown

getNext3 :: Column a0
         -> IO (Column ())
getNext3 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious3 :: Column a0
             -> IO (Column ())
getPrevious3 =
  propertyGet "Previous"
              []
              outIDispatch

select4 :: Column a0
        -> IO ()
select4 =
  method0 "Select"
          []

delete5 :: Column a0
        -> IO ()
delete5 =
  method0 "Delete"
          []

setWidth2 :: Float
          -> WdRulerStyle
          -> Column a0
          -> IO ()
setWidth2 columnWidth rulerStyle =
  method0 "SetWidth"
          [ inFloat columnWidth
          , inEnum rulerStyle
          ]

autoFit :: Column a0
        -> IO ()
autoFit =
  method0 "AutoFit"
          []

sortOld1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Column a0
         -> IO ()
sortOld1 excludeHeader sortFieldType sortOrder caseSensitive languageID =
  method0 "SortOld"
          [ inVariant excludeHeader
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant caseSensitive
          , inVariant languageID
          ]

sort1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> Column a0
      -> IO ()
sort1 excludeHeader sortFieldType sortOrder caseSensitive bidiSort ignoreThe ignoreKashida ignoreDiacritics ignoreHe languageID =
  method0 "Sort"
          [ inVariant excludeHeader
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant caseSensitive
          , inVariant bidiSort
          , inVariant ignoreThe
          , inVariant ignoreKashida
          , inVariant ignoreDiacritics
          , inVariant ignoreHe
          , inVariant languageID
          ]

getNestingLevel1 :: Column a0
                 -> IO Int32
getNestingLevel1 =
  propertyGet "NestingLevel"
              []
              outInt32

getPreferredWidth0 :: Column a0
                   -> IO Float
getPreferredWidth0 =
  propertyGet "PreferredWidth"
              []
              outFloat

setPreferredWidth0 :: Float
                   -> Column a0
                   -> IO ()
setPreferredWidth0 prop =
  propertySet "PreferredWidth"
              [inFloat prop]

getPreferredWidthType0 :: Column a0
                       -> IO WdPreferredWidthType
getPreferredWidthType0 =
  propertyGet "PreferredWidthType"
              []
              outEnum

setPreferredWidthType0 :: WdPreferredWidthType
                       -> Column a0
                       -> IO ()
setPreferredWidthType0 prop =
  propertySet "PreferredWidthType"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Cell
-- 
-- --------------------------------------------------
data Cell_ a = Cell__ 
type Cell a = IDispatch (Cell_ a)
iidCell :: IID (Cell ())
iidCell = mkIID "{0002094E-0000-0000-C000-000000000046}"

getRange4 :: Cell a0
          -> IO (Range ())
getRange4 =
  propertyGet "Range"
              []
              outIDispatch

getApplication38 :: Cell a0
                 -> IO (Maybe Application)
getApplication38 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator38 :: Cell a0
             -> IO Int32
getCreator38 =
  propertyGet "Creator"
              []
              outInt32

getParent38 :: Cell a0
            -> IO (IDispatch ())
getParent38 =
  propertyGet "Parent"
              []
              outIDispatch

getRowIndex :: Cell a0
            -> IO Int32
getRowIndex =
  propertyGet "RowIndex"
              []
              outInt32

getColumnIndex :: Cell a0
               -> IO Int32
getColumnIndex =
  propertyGet "ColumnIndex"
              []
              outInt32

getWidth2 :: Cell a0
          -> IO Float
getWidth2 =
  propertyGet "Width"
              []
              outFloat

setWidth3 :: Float
          -> Cell a0
          -> IO ()
setWidth3 prop =
  propertySet "Width"
              [inFloat prop]

getHeight2 :: Cell a0
           -> IO Float
getHeight2 =
  propertyGet "Height"
              []
              outFloat

setHeight3 :: Float
           -> Cell a0
           -> IO ()
setHeight3 prop =
  propertySet "Height"
              [inFloat prop]

getHeightRule0 :: Cell a0
               -> IO WdRowHeightRule
getHeightRule0 =
  propertyGet "HeightRule"
              []
              outEnum

setHeightRule0 :: WdRowHeightRule
               -> Cell a0
               -> IO ()
setHeightRule0 prop =
  propertySet "HeightRule"
              [inEnum prop]

getVerticalAlignment :: Cell a0
                     -> IO WdCellVerticalAlignment
getVerticalAlignment =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment :: WdCellVerticalAlignment
                     -> Cell a0
                     -> IO ()
setVerticalAlignment prop =
  propertySet "VerticalAlignment"
              [inEnum prop]

getColumn0 :: Cell a0
           -> IO (Column ())
getColumn0 =
  propertyGet "Column"
              []
              outIDispatch

getRow :: Cell a0
       -> IO (Row ())
getRow =
  propertyGet "Row"
              []
              outIDispatch

getNext4 :: Cell a0
         -> IO (Cell ())
getNext4 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious4 :: Cell a0
             -> IO (Cell ())
getPrevious4 =
  propertyGet "Previous"
              []
              outIDispatch

getShading7 :: Cell a0
            -> IO (Shading ())
getShading7 =
  propertyGet "Shading"
              []
              outIUnknown

getBorders8 :: Cell a0
            -> IO (Borders ())
getBorders8 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders8 :: Borders a1
            -> Cell a0
            -> IO ()
setBorders8 prop =
  propertySet "Borders"
              [inIUnknown prop]

select5 :: Cell a0
        -> IO ()
select5 =
  method0 "Select"
          []

delete6 :: (Variant a1)
        => a1
        -> Cell a0
        -> IO ()
delete6 shiftCells =
  method0 "Delete"
          [inVariant shiftCells]

formula :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Cell a0
        -> IO ()
formula formula0 numFormat =
  method0 "Formula"
          [ inVariant formula0
          , inVariant numFormat
          ]

setWidth4 :: Float
          -> WdRulerStyle
          -> Cell a0
          -> IO ()
setWidth4 columnWidth rulerStyle =
  method0 "SetWidth"
          [ inFloat columnWidth
          , inEnum rulerStyle
          ]

setHeight4 :: (Variant a1)
           => a1
           -> WdRowHeightRule
           -> Cell a0
           -> IO ()
setHeight4 rowHeight heightRule =
  method0 "SetHeight"
          [ inVariant rowHeight
          , inEnum heightRule
          ]

merge0 :: Cell a1
       -> Cell a0
       -> IO ()
merge0 mergeTo =
  method0 "Merge"
          [inIDispatch mergeTo]

split0 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Cell a0
       -> IO ()
split0 numRows numColumns =
  method0 "Split"
          [ inVariant numRows
          , inVariant numColumns
          ]

autoSum :: Cell a0
        -> IO ()
autoSum =
  method0 "AutoSum"
          []

getTables2 :: Cell a0
           -> IO (Tables ())
getTables2 =
  propertyGet "Tables"
              []
              outIUnknown

getNestingLevel2 :: Cell a0
                 -> IO Int32
getNestingLevel2 =
  propertyGet "NestingLevel"
              []
              outInt32

getWordWrap2 :: Cell a0
             -> IO Bool
getWordWrap2 =
  propertyGet "WordWrap"
              []
              outBool

setWordWrap2 :: Bool
             -> Cell a0
             -> IO ()
setWordWrap2 prop =
  propertySet "WordWrap"
              [inBool prop]

getPreferredWidth1 :: Cell a0
                   -> IO Float
getPreferredWidth1 =
  propertyGet "PreferredWidth"
              []
              outFloat

setPreferredWidth1 :: Float
                   -> Cell a0
                   -> IO ()
setPreferredWidth1 prop =
  propertySet "PreferredWidth"
              [inFloat prop]

getFitText :: Cell a0
           -> IO Bool
getFitText =
  propertyGet "FitText"
              []
              outBool

setFitText :: Bool
           -> Cell a0
           -> IO ()
setFitText prop =
  propertySet "FitText"
              [inBool prop]

getTopPadding0 :: Cell a0
               -> IO Float
getTopPadding0 =
  propertyGet "TopPadding"
              []
              outFloat

setTopPadding0 :: Float
               -> Cell a0
               -> IO ()
setTopPadding0 prop =
  propertySet "TopPadding"
              [inFloat prop]

getBottomPadding0 :: Cell a0
                  -> IO Float
getBottomPadding0 =
  propertyGet "BottomPadding"
              []
              outFloat

setBottomPadding0 :: Float
                  -> Cell a0
                  -> IO ()
setBottomPadding0 prop =
  propertySet "BottomPadding"
              [inFloat prop]

getLeftPadding0 :: Cell a0
                -> IO Float
getLeftPadding0 =
  propertyGet "LeftPadding"
              []
              outFloat

setLeftPadding0 :: Float
                -> Cell a0
                -> IO ()
setLeftPadding0 prop =
  propertySet "LeftPadding"
              [inFloat prop]

getRightPadding0 :: Cell a0
                 -> IO Float
getRightPadding0 =
  propertyGet "RightPadding"
              []
              outFloat

setRightPadding0 :: Float
                 -> Cell a0
                 -> IO ()
setRightPadding0 prop =
  propertySet "RightPadding"
              [inFloat prop]

getID4 :: Cell a0
       -> IO String
getID4 =
  propertyGet "ID"
              []
              outString

setID3 :: String
       -> Cell a0
       -> IO ()
setID3 prop =
  propertySet "ID"
              [inString prop]

getPreferredWidthType1 :: Cell a0
                       -> IO WdPreferredWidthType
getPreferredWidthType1 =
  propertyGet "PreferredWidthType"
              []
              outEnum

setPreferredWidthType1 :: WdPreferredWidthType
                       -> Cell a0
                       -> IO ()
setPreferredWidthType1 prop =
  propertySet "PreferredWidthType"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Tables
-- 
-- --------------------------------------------------
data Tables_ a = Tables__ 
type Tables a = IDispatch (Tables_ a)
iidTables :: IID (Tables ())
iidTables = mkIID "{0002094D-0000-0000-C000-000000000046}"

getNewEnum14 :: Tables a0
             -> IO (IUnknown ())
getNewEnum14 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount14 :: Tables a0
           -> IO Int32
getCount14 =
  propertyGet "Count"
              []
              outInt32

getApplication39 :: Tables a0
                 -> IO (Maybe Application)
getApplication39 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator39 :: Tables a0
             -> IO Int32
getCreator39 =
  propertyGet "Creator"
              []
              outInt32

getParent39 :: Tables a0
            -> IO (IDispatch ())
getParent39 =
  propertyGet "Parent"
              []
              outIDispatch

item14 :: Int32
       -> Tables a0
       -> IO (Table ())
item14 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

addOld0 :: Range a1
        -> Int32
        -> Int32
        -> Tables a0
        -> IO (Table ())
addOld0 range0 numRows numColumns =
  function1 "AddOld"
            [ inIDispatch range0
            , inInt32 numRows
            , inInt32 numColumns
            ]
            outIDispatch

add8 :: (Variant a2, Variant a3)
     => Range a1
     -> Int32
     -> Int32
     -> a2
     -> a3
     -> Tables a0
     -> IO (Table ())
add8 range0 numRows numColumns defaultTableBehavior autoFitBehavior0 =
  function1 "Add"
            [ inIDispatch range0
            , inInt32 numRows
            , inInt32 numColumns
            , inVariant defaultTableBehavior
            , inVariant autoFitBehavior0
            ]
            outIDispatch

getNestingLevel3 :: Tables a0
                 -> IO Int32
getNestingLevel3 =
  propertyGet "NestingLevel"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Rows
-- 
-- --------------------------------------------------
data Rows_ a = Rows__ 
type Rows a = IDispatch (Rows_ a)
iidRows :: IID (Rows ())
iidRows = mkIID "{0002094C-0000-0000-C000-000000000046}"

getNewEnum15 :: Rows a0
             -> IO (IUnknown ())
getNewEnum15 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount15 :: Rows a0
           -> IO Int32
getCount15 =
  propertyGet "Count"
              []
              outInt32

getAllowBreakAcrossPages0 :: Rows a0
                          -> IO Int32
getAllowBreakAcrossPages0 =
  propertyGet "AllowBreakAcrossPages"
              []
              outInt32

setAllowBreakAcrossPages0 :: Int32
                          -> Rows a0
                          -> IO ()
setAllowBreakAcrossPages0 prop =
  propertySet "AllowBreakAcrossPages"
              [inInt32 prop]

getAlignment4 :: Rows a0
              -> IO WdRowAlignment
getAlignment4 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment4 :: WdRowAlignment
              -> Rows a0
              -> IO ()
setAlignment4 prop =
  propertySet "Alignment"
              [inEnum prop]

getHeadingFormat0 :: Rows a0
                  -> IO Int32
getHeadingFormat0 =
  propertyGet "HeadingFormat"
              []
              outInt32

setHeadingFormat0 :: Int32
                  -> Rows a0
                  -> IO ()
setHeadingFormat0 prop =
  propertySet "HeadingFormat"
              [inInt32 prop]

getSpaceBetweenColumns0 :: Rows a0
                        -> IO Float
getSpaceBetweenColumns0 =
  propertyGet "SpaceBetweenColumns"
              []
              outFloat

setSpaceBetweenColumns0 :: Float
                        -> Rows a0
                        -> IO ()
setSpaceBetweenColumns0 prop =
  propertySet "SpaceBetweenColumns"
              [inFloat prop]

getHeight3 :: Rows a0
           -> IO Float
getHeight3 =
  propertyGet "Height"
              []
              outFloat

setHeight5 :: Float
           -> Rows a0
           -> IO ()
setHeight5 prop =
  propertySet "Height"
              [inFloat prop]

getHeightRule1 :: Rows a0
               -> IO WdRowHeightRule
getHeightRule1 =
  propertyGet "HeightRule"
              []
              outEnum

setHeightRule1 :: WdRowHeightRule
               -> Rows a0
               -> IO ()
setHeightRule1 prop =
  propertySet "HeightRule"
              [inEnum prop]

getLeftIndent3 :: Rows a0
               -> IO Float
getLeftIndent3 =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent4 :: Float
               -> Rows a0
               -> IO ()
setLeftIndent4 prop =
  propertySet "LeftIndent"
              [inFloat prop]

getFirst4 :: Rows a0
          -> IO (Row ())
getFirst4 =
  propertyGet "First"
              []
              outIDispatch

getLast4 :: Rows a0
         -> IO (Row ())
getLast4 =
  propertyGet "Last"
              []
              outIDispatch

getApplication40 :: Rows a0
                 -> IO (Maybe Application)
getApplication40 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 25 iptr
    doThenFree free (readunique readApplication) prop

getCreator40 :: Rows a0
             -> IO Int32
getCreator40 =
  propertyGet "Creator"
              []
              outInt32

getParent40 :: Rows a0
            -> IO (IDispatch ())
getParent40 =
  propertyGet "Parent"
              []
              outIDispatch

getBorders9 :: Rows a0
            -> IO (Borders ())
getBorders9 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders9 :: Borders a1
            -> Rows a0
            -> IO ()
setBorders9 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading8 :: Rows a0
            -> IO (Shading ())
getShading8 =
  propertyGet "Shading"
              []
              outIUnknown

item15 :: Int32
       -> Rows a0
       -> IO (Row ())
item15 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add9 :: (Variant a1)
     => a1
     -> Rows a0
     -> IO (Row ())
add9 beforeRow =
  function1 "Add"
            [inVariant beforeRow]
            outIDispatch

select6 :: Rows a0
        -> IO ()
select6 =
  method0 "Select"
          []

delete7 :: Rows a0
        -> IO ()
delete7 =
  method0 "Delete"
          []

setLeftIndent5 :: Float
               -> WdRulerStyle
               -> Rows a0
               -> IO ()
setLeftIndent5 leftIndent rulerStyle =
  method0 "SetLeftIndent"
          [ inFloat leftIndent
          , inEnum rulerStyle
          ]

setHeight6 :: Float
           -> WdRowHeightRule
           -> Rows a0
           -> IO ()
setHeight6 rowHeight heightRule =
  method0 "SetHeight"
          [ inFloat rowHeight
          , inEnum heightRule
          ]

convertToTextOld1 :: (Variant a1)
                  => a1
                  -> Rows a0
                  -> IO (Range ())
convertToTextOld1 separator =
  function1 "ConvertToTextOld"
            [inVariant separator]
            outIDispatch

distributeHeight :: Rows a0
                 -> IO ()
distributeHeight =
  method0 "DistributeHeight"
          []

convertToText1 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> Rows a0
               -> IO (Range ())
convertToText1 separator nestedTables =
  function1 "ConvertToText"
            [ inVariant separator
            , inVariant nestedTables
            ]
            outIDispatch

getWrapAroundText :: Rows a0
                  -> IO Int32
getWrapAroundText =
  propertyGet "WrapAroundText"
              []
              outInt32

setWrapAroundText :: Int32
                  -> Rows a0
                  -> IO ()
setWrapAroundText prop =
  propertySet "WrapAroundText"
              [inInt32 prop]

getDistanceTop :: Rows a0
               -> IO Float
getDistanceTop =
  propertyGet "DistanceTop"
              []
              outFloat

setDistanceTop :: Float
               -> Rows a0
               -> IO ()
setDistanceTop prop =
  propertySet "DistanceTop"
              [inFloat prop]

getDistanceBottom :: Rows a0
                  -> IO Float
getDistanceBottom =
  propertyGet "DistanceBottom"
              []
              outFloat

setDistanceBottom :: Float
                  -> Rows a0
                  -> IO ()
setDistanceBottom prop =
  propertySet "DistanceBottom"
              [inFloat prop]

getDistanceLeft :: Rows a0
                -> IO Float
getDistanceLeft =
  propertyGet "DistanceLeft"
              []
              outFloat

setDistanceLeft :: Float
                -> Rows a0
                -> IO ()
setDistanceLeft prop =
  propertySet "DistanceLeft"
              [inFloat prop]

getDistanceRight :: Rows a0
                 -> IO Float
getDistanceRight =
  propertyGet "DistanceRight"
              []
              outFloat

setDistanceRight :: Float
                 -> Rows a0
                 -> IO ()
setDistanceRight prop =
  propertySet "DistanceRight"
              [inFloat prop]

getHorizontalPosition :: Rows a0
                      -> IO Float
getHorizontalPosition =
  propertyGet "HorizontalPosition"
              []
              outFloat

setHorizontalPosition :: Float
                      -> Rows a0
                      -> IO ()
setHorizontalPosition prop =
  propertySet "HorizontalPosition"
              [inFloat prop]

getVerticalPosition :: Rows a0
                    -> IO Float
getVerticalPosition =
  propertyGet "VerticalPosition"
              []
              outFloat

setVerticalPosition :: Float
                    -> Rows a0
                    -> IO ()
setVerticalPosition prop =
  propertySet "VerticalPosition"
              [inFloat prop]

getRelativeHorizontalPosition :: Rows a0
                              -> IO WdRelativeHorizontalPosition
getRelativeHorizontalPosition =
  propertyGet "RelativeHorizontalPosition"
              []
              outEnum

setRelativeHorizontalPosition :: WdRelativeHorizontalPosition
                              -> Rows a0
                              -> IO ()
setRelativeHorizontalPosition prop =
  propertySet "RelativeHorizontalPosition"
              [inEnum prop]

getRelativeVerticalPosition :: Rows a0
                            -> IO WdRelativeVerticalPosition
getRelativeVerticalPosition =
  propertyGet "RelativeVerticalPosition"
              []
              outEnum

setRelativeVerticalPosition :: WdRelativeVerticalPosition
                            -> Rows a0
                            -> IO ()
setRelativeVerticalPosition prop =
  propertySet "RelativeVerticalPosition"
              [inEnum prop]

getAllowOverlap :: Rows a0
                -> IO Int32
getAllowOverlap =
  propertyGet "AllowOverlap"
              []
              outInt32

setAllowOverlap :: Int32
                -> Rows a0
                -> IO ()
setAllowOverlap prop =
  propertySet "AllowOverlap"
              [inInt32 prop]

getNestingLevel4 :: Rows a0
                 -> IO Int32
getNestingLevel4 =
  propertyGet "NestingLevel"
              []
              outInt32

getTableDirection0 :: Rows a0
                   -> IO WdTableDirection
getTableDirection0 =
  propertyGet "TableDirection"
              []
              outEnum

setTableDirection0 :: WdTableDirection
                   -> Rows a0
                   -> IO ()
setTableDirection0 prop =
  propertySet "TableDirection"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Columns
-- 
-- --------------------------------------------------
data Columns_ a = Columns__ 
type Columns a = IDispatch (Columns_ a)
iidColumns :: IID (Columns ())
iidColumns = mkIID "{0002094B-0000-0000-C000-000000000046}"

getNewEnum16 :: Columns a0
             -> IO (IUnknown ())
getNewEnum16 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount16 :: Columns a0
           -> IO Int32
getCount16 =
  propertyGet "Count"
              []
              outInt32

getApplication41 :: Columns a0
                 -> IO (Maybe Application)
getApplication41 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator41 :: Columns a0
             -> IO Int32
getCreator41 =
  propertyGet "Creator"
              []
              outInt32

getParent41 :: Columns a0
            -> IO (IDispatch ())
getParent41 =
  propertyGet "Parent"
              []
              outIDispatch

getFirst5 :: Columns a0
          -> IO (Column ())
getFirst5 =
  propertyGet "First"
              []
              outIDispatch

getLast5 :: Columns a0
         -> IO (Column ())
getLast5 =
  propertyGet "Last"
              []
              outIDispatch

getWidth3 :: Columns a0
          -> IO Float
getWidth3 =
  propertyGet "Width"
              []
              outFloat

setWidth5 :: Float
          -> Columns a0
          -> IO ()
setWidth5 prop =
  propertySet "Width"
              [inFloat prop]

getBorders10 :: Columns a0
             -> IO (Borders ())
getBorders10 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders10 :: Borders a1
             -> Columns a0
             -> IO ()
setBorders10 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading9 :: Columns a0
            -> IO (Shading ())
getShading9 =
  propertyGet "Shading"
              []
              outIUnknown

item16 :: Int32
       -> Columns a0
       -> IO (Column ())
item16 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add10 :: (Variant a1)
      => a1
      -> Columns a0
      -> IO (Column ())
add10 beforeColumn =
  function1 "Add"
            [inVariant beforeColumn]
            outIDispatch

select7 :: Columns a0
        -> IO ()
select7 =
  method0 "Select"
          []

delete8 :: Columns a0
        -> IO ()
delete8 =
  method0 "Delete"
          []

setWidth6 :: Float
          -> WdRulerStyle
          -> Columns a0
          -> IO ()
setWidth6 columnWidth rulerStyle =
  method0 "SetWidth"
          [ inFloat columnWidth
          , inEnum rulerStyle
          ]

autoFit0 :: Columns a0
         -> IO ()
autoFit0 =
  method0 "AutoFit"
          []

distributeWidth :: Columns a0
                -> IO ()
distributeWidth =
  method0 "DistributeWidth"
          []

getNestingLevel5 :: Columns a0
                 -> IO Int32
getNestingLevel5 =
  propertyGet "NestingLevel"
              []
              outInt32

getPreferredWidth2 :: Columns a0
                   -> IO Float
getPreferredWidth2 =
  propertyGet "PreferredWidth"
              []
              outFloat

setPreferredWidth2 :: Float
                   -> Columns a0
                   -> IO ()
setPreferredWidth2 prop =
  propertySet "PreferredWidth"
              [inFloat prop]

getPreferredWidthType2 :: Columns a0
                       -> IO WdPreferredWidthType
getPreferredWidthType2 =
  propertyGet "PreferredWidthType"
              []
              outEnum

setPreferredWidthType2 :: WdPreferredWidthType
                       -> Columns a0
                       -> IO ()
setPreferredWidthType2 prop =
  propertySet "PreferredWidthType"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Cells
-- 
-- --------------------------------------------------
data Cells_ a = Cells__ 
type Cells a = IDispatch (Cells_ a)
iidCells :: IID (Cells ())
iidCells = mkIID "{0002094A-0000-0000-C000-000000000046}"

getNewEnum17 :: Cells a0
             -> IO (IUnknown ())
getNewEnum17 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount17 :: Cells a0
           -> IO Int32
getCount17 =
  propertyGet "Count"
              []
              outInt32

getApplication42 :: Cells a0
                 -> IO (Maybe Application)
getApplication42 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator42 :: Cells a0
             -> IO Int32
getCreator42 =
  propertyGet "Creator"
              []
              outInt32

getParent42 :: Cells a0
            -> IO (IDispatch ())
getParent42 =
  propertyGet "Parent"
              []
              outIDispatch

getWidth4 :: Cells a0
          -> IO Float
getWidth4 =
  propertyGet "Width"
              []
              outFloat

setWidth7 :: Float
          -> Cells a0
          -> IO ()
setWidth7 prop =
  propertySet "Width"
              [inFloat prop]

getHeight4 :: Cells a0
           -> IO Float
getHeight4 =
  propertyGet "Height"
              []
              outFloat

setHeight7 :: Float
           -> Cells a0
           -> IO ()
setHeight7 prop =
  propertySet "Height"
              [inFloat prop]

getHeightRule2 :: Cells a0
               -> IO WdRowHeightRule
getHeightRule2 =
  propertyGet "HeightRule"
              []
              outEnum

setHeightRule2 :: WdRowHeightRule
               -> Cells a0
               -> IO ()
setHeightRule2 prop =
  propertySet "HeightRule"
              [inEnum prop]

getVerticalAlignment0 :: Cells a0
                      -> IO WdCellVerticalAlignment
getVerticalAlignment0 =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment0 :: WdCellVerticalAlignment
                      -> Cells a0
                      -> IO ()
setVerticalAlignment0 prop =
  propertySet "VerticalAlignment"
              [inEnum prop]

getBorders11 :: Cells a0
             -> IO (Borders ())
getBorders11 =
  propertyGet "Borders"
              []
              outIUnknown

setBorders11 :: Borders a1
             -> Cells a0
             -> IO ()
setBorders11 prop =
  propertySet "Borders"
              [inIUnknown prop]

getShading10 :: Cells a0
             -> IO (Shading ())
getShading10 =
  propertyGet "Shading"
              []
              outIUnknown

item17 :: Int32
       -> Cells a0
       -> IO (Cell ())
item17 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add11 :: (Variant a1)
      => a1
      -> Cells a0
      -> IO (Cell ())
add11 beforeCell =
  function1 "Add"
            [inVariant beforeCell]
            outIDispatch

delete9 :: (Variant a1)
        => a1
        -> Cells a0
        -> IO ()
delete9 shiftCells =
  method0 "Delete"
          [inVariant shiftCells]

setWidth8 :: Float
          -> WdRulerStyle
          -> Cells a0
          -> IO ()
setWidth8 columnWidth rulerStyle =
  method0 "SetWidth"
          [ inFloat columnWidth
          , inEnum rulerStyle
          ]

setHeight8 :: (Variant a1)
           => a1
           -> WdRowHeightRule
           -> Cells a0
           -> IO ()
setHeight8 rowHeight heightRule =
  method0 "SetHeight"
          [ inVariant rowHeight
          , inEnum heightRule
          ]

merge1 :: Cells a0
       -> IO ()
merge1 =
  method0 "Merge"
          []

split1 :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Cells a0
       -> IO ()
split1 numRows numColumns mergeBeforeSplit =
  method0 "Split"
          [ inVariant numRows
          , inVariant numColumns
          , inVariant mergeBeforeSplit
          ]

distributeHeight0 :: Cells a0
                  -> IO ()
distributeHeight0 =
  method0 "DistributeHeight"
          []

distributeWidth0 :: Cells a0
                 -> IO ()
distributeWidth0 =
  method0 "DistributeWidth"
          []

autoFit1 :: Cells a0
         -> IO ()
autoFit1 =
  method0 "AutoFit"
          []

getNestingLevel6 :: Cells a0
                 -> IO Int32
getNestingLevel6 =
  propertyGet "NestingLevel"
              []
              outInt32

getPreferredWidth3 :: Cells a0
                   -> IO Float
getPreferredWidth3 =
  propertyGet "PreferredWidth"
              []
              outFloat

setPreferredWidth3 :: Float
                   -> Cells a0
                   -> IO ()
setPreferredWidth3 prop =
  propertySet "PreferredWidth"
              [inFloat prop]

getPreferredWidthType3 :: Cells a0
                       -> IO WdPreferredWidthType
getPreferredWidthType3 =
  propertyGet "PreferredWidthType"
              []
              outEnum

setPreferredWidthType3 :: WdPreferredWidthType
                       -> Cells a0
                       -> IO ()
setPreferredWidthType3 prop =
  propertySet "PreferredWidthType"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface AutoCorrect
-- 
-- --------------------------------------------------
data AutoCorrect_ a = AutoCorrect__ 
type AutoCorrect a = IDispatch (AutoCorrect_ a)
iidAutoCorrect :: IID (AutoCorrect ())
iidAutoCorrect = mkIID "{00020949-0000-0000-C000-000000000046}"

getApplication43 :: AutoCorrect a0
                 -> IO (Maybe Application)
getApplication43 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator43 :: AutoCorrect a0
             -> IO Int32
getCreator43 =
  propertyGet "Creator"
              []
              outInt32

getParent43 :: AutoCorrect a0
            -> IO (IDispatch ())
getParent43 =
  propertyGet "Parent"
              []
              outIDispatch

getCorrectDays :: AutoCorrect a0
               -> IO Bool
getCorrectDays =
  propertyGet "CorrectDays"
              []
              outBool

setCorrectDays :: Bool
               -> AutoCorrect a0
               -> IO ()
setCorrectDays prop =
  propertySet "CorrectDays"
              [inBool prop]

getCorrectInitialCaps :: AutoCorrect a0
                      -> IO Bool
getCorrectInitialCaps =
  propertyGet "CorrectInitialCaps"
              []
              outBool

setCorrectInitialCaps :: Bool
                      -> AutoCorrect a0
                      -> IO ()
setCorrectInitialCaps prop =
  propertySet "CorrectInitialCaps"
              [inBool prop]

getCorrectSentenceCaps :: AutoCorrect a0
                       -> IO Bool
getCorrectSentenceCaps =
  propertyGet "CorrectSentenceCaps"
              []
              outBool

setCorrectSentenceCaps :: Bool
                       -> AutoCorrect a0
                       -> IO ()
setCorrectSentenceCaps prop =
  propertySet "CorrectSentenceCaps"
              [inBool prop]

getReplaceText :: AutoCorrect a0
               -> IO Bool
getReplaceText =
  propertyGet "ReplaceText"
              []
              outBool

setReplaceText :: Bool
               -> AutoCorrect a0
               -> IO ()
setReplaceText prop =
  propertySet "ReplaceText"
              [inBool prop]

getEntries :: AutoCorrect a0
           -> IO (AutoCorrectEntries ())
getEntries =
  propertyGet "Entries"
              []
              outIUnknown

getFirstLetterExceptions :: AutoCorrect a0
                         -> IO (FirstLetterExceptions ())
getFirstLetterExceptions =
  propertyGet "FirstLetterExceptions"
              []
              outIUnknown

getFirstLetterAutoAdd :: AutoCorrect a0
                      -> IO Bool
getFirstLetterAutoAdd =
  propertyGet "FirstLetterAutoAdd"
              []
              outBool

setFirstLetterAutoAdd :: Bool
                      -> AutoCorrect a0
                      -> IO ()
setFirstLetterAutoAdd prop =
  propertySet "FirstLetterAutoAdd"
              [inBool prop]

getTwoInitialCapsExceptions :: AutoCorrect a0
                            -> IO (TwoInitialCapsExceptions ())
getTwoInitialCapsExceptions =
  propertyGet "TwoInitialCapsExceptions"
              []
              outIUnknown

getTwoInitialCapsAutoAdd :: AutoCorrect a0
                         -> IO Bool
getTwoInitialCapsAutoAdd =
  propertyGet "TwoInitialCapsAutoAdd"
              []
              outBool

setTwoInitialCapsAutoAdd :: Bool
                         -> AutoCorrect a0
                         -> IO ()
setTwoInitialCapsAutoAdd prop =
  propertySet "TwoInitialCapsAutoAdd"
              [inBool prop]

getCorrectCapsLock :: AutoCorrect a0
                   -> IO Bool
getCorrectCapsLock =
  propertyGet "CorrectCapsLock"
              []
              outBool

setCorrectCapsLock :: Bool
                   -> AutoCorrect a0
                   -> IO ()
setCorrectCapsLock prop =
  propertySet "CorrectCapsLock"
              [inBool prop]

getCorrectHangulAndAlphabet :: AutoCorrect a0
                            -> IO Bool
getCorrectHangulAndAlphabet =
  propertyGet "CorrectHangulAndAlphabet"
              []
              outBool

setCorrectHangulAndAlphabet :: Bool
                            -> AutoCorrect a0
                            -> IO ()
setCorrectHangulAndAlphabet prop =
  propertySet "CorrectHangulAndAlphabet"
              [inBool prop]

getHangulAndAlphabetExceptions :: AutoCorrect a0
                               -> IO (HangulAndAlphabetExceptions ())
getHangulAndAlphabetExceptions =
  propertyGet "HangulAndAlphabetExceptions"
              []
              outIUnknown

getHangulAndAlphabetAutoAdd :: AutoCorrect a0
                            -> IO Bool
getHangulAndAlphabetAutoAdd =
  propertyGet "HangulAndAlphabetAutoAdd"
              []
              outBool

setHangulAndAlphabetAutoAdd :: Bool
                            -> AutoCorrect a0
                            -> IO ()
setHangulAndAlphabetAutoAdd prop =
  propertySet "HangulAndAlphabetAutoAdd"
              [inBool prop]

getReplaceTextFromSpellingChecker :: AutoCorrect a0
                                  -> IO Bool
getReplaceTextFromSpellingChecker =
  propertyGet "ReplaceTextFromSpellingChecker"
              []
              outBool

setReplaceTextFromSpellingChecker :: Bool
                                  -> AutoCorrect a0
                                  -> IO ()
setReplaceTextFromSpellingChecker prop =
  propertySet "ReplaceTextFromSpellingChecker"
              [inBool prop]

getOtherCorrectionsAutoAdd :: AutoCorrect a0
                           -> IO Bool
getOtherCorrectionsAutoAdd =
  propertyGet "OtherCorrectionsAutoAdd"
              []
              outBool

setOtherCorrectionsAutoAdd :: Bool
                           -> AutoCorrect a0
                           -> IO ()
setOtherCorrectionsAutoAdd prop =
  propertySet "OtherCorrectionsAutoAdd"
              [inBool prop]

getOtherCorrectionsExceptions :: AutoCorrect a0
                              -> IO (OtherCorrectionsExceptions ())
getOtherCorrectionsExceptions =
  propertyGet "OtherCorrectionsExceptions"
              []
              outIUnknown

getCorrectKeyboardSetting :: AutoCorrect a0
                          -> IO Bool
getCorrectKeyboardSetting =
  propertyGet "CorrectKeyboardSetting"
              []
              outBool

setCorrectKeyboardSetting :: Bool
                          -> AutoCorrect a0
                          -> IO ()
setCorrectKeyboardSetting prop =
  propertySet "CorrectKeyboardSetting"
              [inBool prop]

getCorrectTableCells :: AutoCorrect a0
                     -> IO Bool
getCorrectTableCells =
  propertyGet "CorrectTableCells"
              []
              outBool

setCorrectTableCells :: Bool
                     -> AutoCorrect a0
                     -> IO ()
setCorrectTableCells prop =
  propertySet "CorrectTableCells"
              [inBool prop]

getDisplayAutoCorrectOptions :: AutoCorrect a0
                             -> IO Bool
getDisplayAutoCorrectOptions =
  propertyGet "DisplayAutoCorrectOptions"
              []
              outBool

setDisplayAutoCorrectOptions :: Bool
                             -> AutoCorrect a0
                             -> IO ()
setDisplayAutoCorrectOptions prop =
  propertySet "DisplayAutoCorrectOptions"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface AutoCorrectEntries
-- 
-- --------------------------------------------------
data AutoCorrectEntries_ a = AutoCorrectEntries__ 
type AutoCorrectEntries a = IDispatch (AutoCorrectEntries_ a)
iidAutoCorrectEntries :: IID (AutoCorrectEntries ())
iidAutoCorrectEntries =
  mkIID "{00020948-0000-0000-C000-000000000046}"

getApplication44 :: AutoCorrectEntries a0
                 -> IO (Maybe Application)
getApplication44 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator44 :: AutoCorrectEntries a0
             -> IO Int32
getCreator44 =
  propertyGet "Creator"
              []
              outInt32

getParent44 :: AutoCorrectEntries a0
            -> IO (IDispatch ())
getParent44 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum18 :: AutoCorrectEntries a0
             -> IO (IUnknown ())
getNewEnum18 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount18 :: AutoCorrectEntries a0
           -> IO Int32
getCount18 =
  propertyGet "Count"
              []
              outInt32

item18 :: (Variant a1)
       => a1
       -> AutoCorrectEntries a0
       -> IO (AutoCorrectEntry ())
item18 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add12 :: String
      -> String
      -> AutoCorrectEntries a0
      -> IO (AutoCorrectEntry ())
add12 name value =
  function1 "Add"
            [ inString name
            , inString value
            ]
            outIUnknown

addRichText :: String
            -> Range a1
            -> AutoCorrectEntries a0
            -> IO (AutoCorrectEntry ())
addRichText name range0 =
  function1 "AddRichText"
            [ inString name
            , inIDispatch range0
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface AutoCorrectEntry
-- 
-- --------------------------------------------------
data AutoCorrectEntry_ a = AutoCorrectEntry__ 
type AutoCorrectEntry a = IDispatch (AutoCorrectEntry_ a)
iidAutoCorrectEntry :: IID (AutoCorrectEntry ())
iidAutoCorrectEntry =
  mkIID "{00020947-0000-0000-C000-000000000046}"

getApplication45 :: AutoCorrectEntry a0
                 -> IO (Maybe Application)
getApplication45 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator45 :: AutoCorrectEntry a0
             -> IO Int32
getCreator45 =
  propertyGet "Creator"
              []
              outInt32

getParent45 :: AutoCorrectEntry a0
            -> IO (IDispatch ())
getParent45 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex6 :: AutoCorrectEntry a0
          -> IO Int32
getIndex6 =
  propertyGet "Index"
              []
              outInt32

getName8 :: AutoCorrectEntry a0
         -> IO String
getName8 =
  propertyGet "Name"
              []
              outString

setName0 :: String
         -> AutoCorrectEntry a0
         -> IO ()
setName0 prop =
  propertySet "Name"
              [inString prop]

getValue0 :: AutoCorrectEntry a0
          -> IO String
getValue0 =
  propertyGet "Value"
              []
              outString

setValue0 :: String
          -> AutoCorrectEntry a0
          -> IO ()
setValue0 prop =
  propertySet "Value"
              [inString prop]

getRichText :: AutoCorrectEntry a0
            -> IO Bool
getRichText =
  propertyGet "RichText"
              []
              outBool

delete10 :: AutoCorrectEntry a0
         -> IO ()
delete10 =
  method0 "Delete"
          []

apply :: Range a1
      -> AutoCorrectEntry a0
      -> IO ()
apply range0 =
  method0 "Apply"
          [inIDispatch range0]

-- --------------------------------------------------
-- 
-- interface FirstLetterExceptions
-- 
-- --------------------------------------------------
data FirstLetterExceptions_ a = FirstLetterExceptions__ 
type FirstLetterExceptions a = IDispatch (FirstLetterExceptions_ a)
iidFirstLetterExceptions :: IID (FirstLetterExceptions ())
iidFirstLetterExceptions =
  mkIID "{00020946-0000-0000-C000-000000000046}"

getApplication46 :: FirstLetterExceptions a0
                 -> IO (Maybe Application)
getApplication46 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator46 :: FirstLetterExceptions a0
             -> IO Int32
getCreator46 =
  propertyGet "Creator"
              []
              outInt32

getParent46 :: FirstLetterExceptions a0
            -> IO (IDispatch ())
getParent46 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum19 :: FirstLetterExceptions a0
             -> IO (IUnknown ())
getNewEnum19 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount19 :: FirstLetterExceptions a0
           -> IO Int32
getCount19 =
  propertyGet "Count"
              []
              outInt32

item19 :: (Variant a1)
       => a1
       -> FirstLetterExceptions a0
       -> IO (FirstLetterException ())
item19 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add13 :: String
      -> FirstLetterExceptions a0
      -> IO (FirstLetterException ())
add13 name =
  function1 "Add"
            [inString name]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface FirstLetterException
-- 
-- --------------------------------------------------
data FirstLetterException_ a = FirstLetterException__ 
type FirstLetterException a = IDispatch (FirstLetterException_ a)
iidFirstLetterException :: IID (FirstLetterException ())
iidFirstLetterException =
  mkIID "{00020945-0000-0000-C000-000000000046}"

getApplication47 :: FirstLetterException a0
                 -> IO (Maybe Application)
getApplication47 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator47 :: FirstLetterException a0
             -> IO Int32
getCreator47 =
  propertyGet "Creator"
              []
              outInt32

getParent47 :: FirstLetterException a0
            -> IO (IDispatch ())
getParent47 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex7 :: FirstLetterException a0
          -> IO Int32
getIndex7 =
  propertyGet "Index"
              []
              outInt32

getName9 :: FirstLetterException a0
         -> IO String
getName9 =
  propertyGet "Name"
              []
              outString

delete11 :: FirstLetterException a0
         -> IO ()
delete11 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface TwoInitialCapsExceptions
-- 
-- --------------------------------------------------
data TwoInitialCapsExceptions_ a = TwoInitialCapsExceptions__ 
type TwoInitialCapsExceptions a = IDispatch (TwoInitialCapsExceptions_ a)
iidTwoInitialCapsExceptions :: IID (TwoInitialCapsExceptions ())
iidTwoInitialCapsExceptions =
  mkIID "{00020944-0000-0000-C000-000000000046}"

getApplication48 :: TwoInitialCapsExceptions a0
                 -> IO (Maybe Application)
getApplication48 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator48 :: TwoInitialCapsExceptions a0
             -> IO Int32
getCreator48 =
  propertyGet "Creator"
              []
              outInt32

getParent48 :: TwoInitialCapsExceptions a0
            -> IO (IDispatch ())
getParent48 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum20 :: TwoInitialCapsExceptions a0
             -> IO (IUnknown ())
getNewEnum20 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount20 :: TwoInitialCapsExceptions a0
           -> IO Int32
getCount20 =
  propertyGet "Count"
              []
              outInt32

item20 :: (Variant a1)
       => a1
       -> TwoInitialCapsExceptions a0
       -> IO (TwoInitialCapsException ())
item20 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add14 :: String
      -> TwoInitialCapsExceptions a0
      -> IO (TwoInitialCapsException ())
add14 name =
  function1 "Add"
            [inString name]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface TwoInitialCapsException
-- 
-- --------------------------------------------------
data TwoInitialCapsException_ a = TwoInitialCapsException__ 
type TwoInitialCapsException a = IDispatch (TwoInitialCapsException_ a)
iidTwoInitialCapsException :: IID (TwoInitialCapsException ())
iidTwoInitialCapsException =
  mkIID "{00020943-0000-0000-C000-000000000046}"

getApplication49 :: TwoInitialCapsException a0
                 -> IO (Maybe Application)
getApplication49 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator49 :: TwoInitialCapsException a0
             -> IO Int32
getCreator49 =
  propertyGet "Creator"
              []
              outInt32

getParent49 :: TwoInitialCapsException a0
            -> IO (IDispatch ())
getParent49 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex8 :: TwoInitialCapsException a0
          -> IO Int32
getIndex8 =
  propertyGet "Index"
              []
              outInt32

getName10 :: TwoInitialCapsException a0
          -> IO String
getName10 =
  propertyGet "Name"
              []
              outString

delete12 :: TwoInitialCapsException a0
         -> IO ()
delete12 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Footnotes
-- 
-- --------------------------------------------------
data Footnotes_ a = Footnotes__ 
type Footnotes a = IDispatch (Footnotes_ a)
iidFootnotes :: IID (Footnotes ())
iidFootnotes = mkIID "{00020942-0000-0000-C000-000000000046}"

getNewEnum21 :: Footnotes a0
             -> IO (IUnknown ())
getNewEnum21 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount21 :: Footnotes a0
           -> IO Int32
getCount21 =
  propertyGet "Count"
              []
              outInt32

getApplication50 :: Footnotes a0
                 -> IO (Maybe Application)
getApplication50 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator50 :: Footnotes a0
             -> IO Int32
getCreator50 =
  propertyGet "Creator"
              []
              outInt32

getParent50 :: Footnotes a0
            -> IO (IDispatch ())
getParent50 =
  propertyGet "Parent"
              []
              outIDispatch

getLocation :: Footnotes a0
            -> IO WdFootnoteLocation
getLocation =
  propertyGet "Location"
              []
              outEnum

setLocation :: WdFootnoteLocation
            -> Footnotes a0
            -> IO ()
setLocation prop =
  propertySet "Location"
              [inEnum prop]

getNumberStyle :: Footnotes a0
               -> IO WdNoteNumberStyle
getNumberStyle =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle :: WdNoteNumberStyle
               -> Footnotes a0
               -> IO ()
setNumberStyle prop =
  propertySet "NumberStyle"
              [inEnum prop]

getStartingNumber :: Footnotes a0
                  -> IO Int32
getStartingNumber =
  propertyGet "StartingNumber"
              []
              outInt32

setStartingNumber :: Int32
                  -> Footnotes a0
                  -> IO ()
setStartingNumber prop =
  propertySet "StartingNumber"
              [inInt32 prop]

getNumberingRule :: Footnotes a0
                 -> IO WdNumberingRule
getNumberingRule =
  propertyGet "NumberingRule"
              []
              outEnum

setNumberingRule :: WdNumberingRule
                 -> Footnotes a0
                 -> IO ()
setNumberingRule prop =
  propertySet "NumberingRule"
              [inEnum prop]

getSeparator :: Footnotes a0
             -> IO (Range ())
getSeparator =
  propertyGet "Separator"
              []
              outIDispatch

getContinuationSeparator :: Footnotes a0
                         -> IO (Range ())
getContinuationSeparator =
  propertyGet "ContinuationSeparator"
              []
              outIDispatch

getContinuationNotice :: Footnotes a0
                      -> IO (Range ())
getContinuationNotice =
  propertyGet "ContinuationNotice"
              []
              outIDispatch

item21 :: Int32
       -> Footnotes a0
       -> IO (Footnote ())
item21 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add15 :: (Variant a2, Variant a3)
      => Range a1
      -> a2
      -> a3
      -> Footnotes a0
      -> IO (Footnote ())
add15 range0 reference text =
  function1 "Add"
            [ inIDispatch range0
            , inVariant reference
            , inVariant text
            ]
            outIUnknown

convert0 :: Footnotes a0
         -> IO ()
convert0 =
  method0 "Convert"
          []

swapWithEndnotes :: Footnotes a0
                 -> IO ()
swapWithEndnotes =
  method0 "SwapWithEndnotes"
          []

resetSeparator :: Footnotes a0
               -> IO ()
resetSeparator =
  method0 "ResetSeparator"
          []

resetContinuationSeparator :: Footnotes a0
                           -> IO ()
resetContinuationSeparator =
  method0 "ResetContinuationSeparator"
          []

resetContinuationNotice :: Footnotes a0
                        -> IO ()
resetContinuationNotice =
  method0 "ResetContinuationNotice"
          []

-- --------------------------------------------------
-- 
-- interface Endnotes
-- 
-- --------------------------------------------------
data Endnotes_ a = Endnotes__ 
type Endnotes a = IDispatch (Endnotes_ a)
iidEndnotes :: IID (Endnotes ())
iidEndnotes = mkIID "{00020941-0000-0000-C000-000000000046}"

getNewEnum22 :: Endnotes a0
             -> IO (IUnknown ())
getNewEnum22 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount22 :: Endnotes a0
           -> IO Int32
getCount22 =
  propertyGet "Count"
              []
              outInt32

getApplication51 :: Endnotes a0
                 -> IO (Maybe Application)
getApplication51 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator51 :: Endnotes a0
             -> IO Int32
getCreator51 =
  propertyGet "Creator"
              []
              outInt32

getParent51 :: Endnotes a0
            -> IO (IDispatch ())
getParent51 =
  propertyGet "Parent"
              []
              outIDispatch

getLocation0 :: Endnotes a0
             -> IO WdEndnoteLocation
getLocation0 =
  propertyGet "Location"
              []
              outEnum

setLocation0 :: WdEndnoteLocation
             -> Endnotes a0
             -> IO ()
setLocation0 prop =
  propertySet "Location"
              [inEnum prop]

getNumberStyle0 :: Endnotes a0
                -> IO WdNoteNumberStyle
getNumberStyle0 =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle0 :: WdNoteNumberStyle
                -> Endnotes a0
                -> IO ()
setNumberStyle0 prop =
  propertySet "NumberStyle"
              [inEnum prop]

getStartingNumber0 :: Endnotes a0
                   -> IO Int32
getStartingNumber0 =
  propertyGet "StartingNumber"
              []
              outInt32

setStartingNumber0 :: Int32
                   -> Endnotes a0
                   -> IO ()
setStartingNumber0 prop =
  propertySet "StartingNumber"
              [inInt32 prop]

getNumberingRule0 :: Endnotes a0
                  -> IO WdNumberingRule
getNumberingRule0 =
  propertyGet "NumberingRule"
              []
              outEnum

setNumberingRule0 :: WdNumberingRule
                  -> Endnotes a0
                  -> IO ()
setNumberingRule0 prop =
  propertySet "NumberingRule"
              [inEnum prop]

getSeparator0 :: Endnotes a0
              -> IO (Range ())
getSeparator0 =
  propertyGet "Separator"
              []
              outIDispatch

getContinuationSeparator0 :: Endnotes a0
                          -> IO (Range ())
getContinuationSeparator0 =
  propertyGet "ContinuationSeparator"
              []
              outIDispatch

getContinuationNotice0 :: Endnotes a0
                       -> IO (Range ())
getContinuationNotice0 =
  propertyGet "ContinuationNotice"
              []
              outIDispatch

item22 :: Int32
       -> Endnotes a0
       -> IO (Endnote ())
item22 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add16 :: (Variant a2, Variant a3)
      => Range a1
      -> a2
      -> a3
      -> Endnotes a0
      -> IO (Endnote ())
add16 range0 reference text =
  function1 "Add"
            [ inIDispatch range0
            , inVariant reference
            , inVariant text
            ]
            outIUnknown

convert1 :: Endnotes a0
         -> IO ()
convert1 =
  method0 "Convert"
          []

swapWithFootnotes :: Endnotes a0
                  -> IO ()
swapWithFootnotes =
  method0 "SwapWithFootnotes"
          []

resetSeparator0 :: Endnotes a0
                -> IO ()
resetSeparator0 =
  method0 "ResetSeparator"
          []

resetContinuationSeparator0 :: Endnotes a0
                            -> IO ()
resetContinuationSeparator0 =
  method0 "ResetContinuationSeparator"
          []

resetContinuationNotice0 :: Endnotes a0
                         -> IO ()
resetContinuationNotice0 =
  method0 "ResetContinuationNotice"
          []

-- --------------------------------------------------
-- 
-- interface Comments
-- 
-- --------------------------------------------------
data Comments_ a = Comments__ 
type Comments a = IDispatch (Comments_ a)
iidComments :: IID (Comments ())
iidComments = mkIID "{00020940-0000-0000-C000-000000000046}"

getNewEnum23 :: Comments a0
             -> IO (IUnknown ())
getNewEnum23 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount23 :: Comments a0
           -> IO Int32
getCount23 =
  propertyGet "Count"
              []
              outInt32

getApplication52 :: Comments a0
                 -> IO (Maybe Application)
getApplication52 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator52 :: Comments a0
             -> IO Int32
getCreator52 =
  propertyGet "Creator"
              []
              outInt32

getParent52 :: Comments a0
            -> IO (IDispatch ())
getParent52 =
  propertyGet "Parent"
              []
              outIDispatch

getShowBy :: Comments a0
          -> IO String
getShowBy =
  propertyGet "ShowBy"
              []
              outString

setShowBy :: String
          -> Comments a0
          -> IO ()
setShowBy prop =
  propertySet "ShowBy"
              [inString prop]

item23 :: Int32
       -> Comments a0
       -> IO (Comment ())
item23 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add17 :: (Variant a2)
      => Range a1
      -> a2
      -> Comments a0
      -> IO (Comment ())
add17 range0 text =
  function1 "Add"
            [ inIDispatch range0
            , inVariant text
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Footnote
-- 
-- --------------------------------------------------
data Footnote_ a = Footnote__ 
type Footnote a = IDispatch (Footnote_ a)
iidFootnote :: IID (Footnote ())
iidFootnote = mkIID "{0002093F-0000-0000-C000-000000000046}"

getApplication53 :: Footnote a0
                 -> IO (Maybe Application)
getApplication53 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator53 :: Footnote a0
             -> IO Int32
getCreator53 =
  propertyGet "Creator"
              []
              outInt32

getParent53 :: Footnote a0
            -> IO (IDispatch ())
getParent53 =
  propertyGet "Parent"
              []
              outIDispatch

getRange5 :: Footnote a0
          -> IO (Range ())
getRange5 =
  propertyGet "Range"
              []
              outIDispatch

getReference :: Footnote a0
             -> IO (Range ())
getReference =
  propertyGet "Reference"
              []
              outIDispatch

getIndex9 :: Footnote a0
          -> IO Int32
getIndex9 =
  propertyGet "Index"
              []
              outInt32

delete13 :: Footnote a0
         -> IO ()
delete13 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Endnote
-- 
-- --------------------------------------------------
data Endnote_ a = Endnote__ 
type Endnote a = IDispatch (Endnote_ a)
iidEndnote :: IID (Endnote ())
iidEndnote = mkIID "{0002093E-0000-0000-C000-000000000046}"

getApplication54 :: Endnote a0
                 -> IO (Maybe Application)
getApplication54 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator54 :: Endnote a0
             -> IO Int32
getCreator54 =
  propertyGet "Creator"
              []
              outInt32

getParent54 :: Endnote a0
            -> IO (IDispatch ())
getParent54 =
  propertyGet "Parent"
              []
              outIDispatch

getRange6 :: Endnote a0
          -> IO (Range ())
getRange6 =
  propertyGet "Range"
              []
              outIDispatch

getReference0 :: Endnote a0
              -> IO (Range ())
getReference0 =
  propertyGet "Reference"
              []
              outIDispatch

getIndex10 :: Endnote a0
           -> IO Int32
getIndex10 =
  propertyGet "Index"
              []
              outInt32

delete14 :: Endnote a0
         -> IO ()
delete14 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Comment
-- 
-- --------------------------------------------------
data Comment_ a = Comment__ 
type Comment a = IDispatch (Comment_ a)
iidComment :: IID (Comment ())
iidComment = mkIID "{0002093D-0000-0000-C000-000000000046}"

getApplication55 :: Comment a0
                 -> IO (Maybe Application)
getApplication55 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator55 :: Comment a0
             -> IO Int32
getCreator55 =
  propertyGet "Creator"
              []
              outInt32

getParent55 :: Comment a0
            -> IO (IDispatch ())
getParent55 =
  propertyGet "Parent"
              []
              outIDispatch

getRange7 :: Comment a0
          -> IO (Range ())
getRange7 =
  propertyGet "Range"
              []
              outIDispatch

getReference1 :: Comment a0
              -> IO (Range ())
getReference1 =
  propertyGet "Reference"
              []
              outIDispatch

getScope :: Comment a0
         -> IO (Range ())
getScope =
  propertyGet "Scope"
              []
              outIDispatch

getIndex11 :: Comment a0
           -> IO Int32
getIndex11 =
  propertyGet "Index"
              []
              outInt32

getAuthor :: Comment a0
          -> IO String
getAuthor =
  propertyGet "Author"
              []
              outString

setAuthor :: String
          -> Comment a0
          -> IO ()
setAuthor prop =
  propertySet "Author"
              [inString prop]

getInitial :: Comment a0
           -> IO String
getInitial =
  propertyGet "Initial"
              []
              outString

setInitial :: String
           -> Comment a0
           -> IO ()
setInitial prop =
  propertySet "Initial"
              [inString prop]

getShowTip :: Comment a0
           -> IO Bool
getShowTip =
  propertyGet "ShowTip"
              []
              outBool

setShowTip :: Bool
           -> Comment a0
           -> IO ()
setShowTip prop =
  propertySet "ShowTip"
              [inBool prop]

delete15 :: Comment a0
         -> IO ()
delete15 =
  method0 "Delete"
          []

edit :: Comment a0
     -> IO ()
edit =
  method0 "Edit"
          []

getDate :: Comment a0
        -> IO Int64
getDate =
  propertyGet "Date"
              []
              outDate

getIsInk :: Comment a0
         -> IO Bool
getIsInk =
  propertyGet "IsInk"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface Borders
-- 
-- --------------------------------------------------
data Borders_ a = Borders__ 
type Borders a = IDispatch (Borders_ a)
iidBorders :: IID (Borders ())
iidBorders = mkIID "{0002093C-0000-0000-C000-000000000046}"

getApplication56 :: Borders a0
                 -> IO (Maybe Application)
getApplication56 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator56 :: Borders a0
             -> IO Int32
getCreator56 =
  propertyGet "Creator"
              []
              outInt32

getParent56 :: Borders a0
            -> IO (IDispatch ())
getParent56 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum24 :: Borders a0
             -> IO (IUnknown ())
getNewEnum24 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount24 :: Borders a0
           -> IO Int32
getCount24 =
  propertyGet "Count"
              []
              outInt32

getEnable :: Borders a0
          -> IO Int32
getEnable =
  propertyGet "Enable"
              []
              outInt32

setEnable :: Int32
          -> Borders a0
          -> IO ()
setEnable prop =
  propertySet "Enable"
              [inInt32 prop]

getDistanceFromTop :: Borders a0
                   -> IO Int32
getDistanceFromTop =
  propertyGet "DistanceFromTop"
              []
              outInt32

setDistanceFromTop :: Int32
                   -> Borders a0
                   -> IO ()
setDistanceFromTop prop =
  propertySet "DistanceFromTop"
              [inInt32 prop]

getShadow0 :: Borders a0
           -> IO Bool
getShadow0 =
  propertyGet "Shadow"
              []
              outBool

setShadow0 :: Bool
           -> Borders a0
           -> IO ()
setShadow0 prop =
  propertySet "Shadow"
              [inBool prop]

getInsideLineStyle :: Borders a0
                   -> IO WdLineStyle
getInsideLineStyle =
  propertyGet "InsideLineStyle"
              []
              outEnum

setInsideLineStyle :: WdLineStyle
                   -> Borders a0
                   -> IO ()
setInsideLineStyle prop =
  propertySet "InsideLineStyle"
              [inEnum prop]

getOutsideLineStyle :: Borders a0
                    -> IO WdLineStyle
getOutsideLineStyle =
  propertyGet "OutsideLineStyle"
              []
              outEnum

setOutsideLineStyle :: WdLineStyle
                    -> Borders a0
                    -> IO ()
setOutsideLineStyle prop =
  propertySet "OutsideLineStyle"
              [inEnum prop]

getInsideLineWidth :: Borders a0
                   -> IO WdLineWidth
getInsideLineWidth =
  propertyGet "InsideLineWidth"
              []
              outEnum

setInsideLineWidth :: WdLineWidth
                   -> Borders a0
                   -> IO ()
setInsideLineWidth prop =
  propertySet "InsideLineWidth"
              [inEnum prop]

getOutsideLineWidth :: Borders a0
                    -> IO WdLineWidth
getOutsideLineWidth =
  propertyGet "OutsideLineWidth"
              []
              outEnum

setOutsideLineWidth :: WdLineWidth
                    -> Borders a0
                    -> IO ()
setOutsideLineWidth prop =
  propertySet "OutsideLineWidth"
              [inEnum prop]

getInsideColorIndex :: Borders a0
                    -> IO WdColorIndex
getInsideColorIndex =
  propertyGet "InsideColorIndex"
              []
              outEnum

setInsideColorIndex :: WdColorIndex
                    -> Borders a0
                    -> IO ()
setInsideColorIndex prop =
  propertySet "InsideColorIndex"
              [inEnum prop]

getOutsideColorIndex :: Borders a0
                     -> IO WdColorIndex
getOutsideColorIndex =
  propertyGet "OutsideColorIndex"
              []
              outEnum

setOutsideColorIndex :: WdColorIndex
                     -> Borders a0
                     -> IO ()
setOutsideColorIndex prop =
  propertySet "OutsideColorIndex"
              [inEnum prop]

getDistanceFromLeft :: Borders a0
                    -> IO Int32
getDistanceFromLeft =
  propertyGet "DistanceFromLeft"
              []
              outInt32

setDistanceFromLeft :: Int32
                    -> Borders a0
                    -> IO ()
setDistanceFromLeft prop =
  propertySet "DistanceFromLeft"
              [inInt32 prop]

getDistanceFromBottom :: Borders a0
                      -> IO Int32
getDistanceFromBottom =
  propertyGet "DistanceFromBottom"
              []
              outInt32

setDistanceFromBottom :: Int32
                      -> Borders a0
                      -> IO ()
setDistanceFromBottom prop =
  propertySet "DistanceFromBottom"
              [inInt32 prop]

getDistanceFromRight :: Borders a0
                     -> IO Int32
getDistanceFromRight =
  propertyGet "DistanceFromRight"
              []
              outInt32

setDistanceFromRight :: Int32
                     -> Borders a0
                     -> IO ()
setDistanceFromRight prop =
  propertySet "DistanceFromRight"
              [inInt32 prop]

getAlwaysInFront :: Borders a0
                 -> IO Bool
getAlwaysInFront =
  propertyGet "AlwaysInFront"
              []
              outBool

setAlwaysInFront :: Bool
                 -> Borders a0
                 -> IO ()
setAlwaysInFront prop =
  propertySet "AlwaysInFront"
              [inBool prop]

getSurroundHeader :: Borders a0
                  -> IO Bool
getSurroundHeader =
  propertyGet "SurroundHeader"
              []
              outBool

setSurroundHeader :: Bool
                  -> Borders a0
                  -> IO ()
setSurroundHeader prop =
  propertySet "SurroundHeader"
              [inBool prop]

getSurroundFooter :: Borders a0
                  -> IO Bool
getSurroundFooter =
  propertyGet "SurroundFooter"
              []
              outBool

setSurroundFooter :: Bool
                  -> Borders a0
                  -> IO ()
setSurroundFooter prop =
  propertySet "SurroundFooter"
              [inBool prop]

getJoinBorders :: Borders a0
               -> IO Bool
getJoinBorders =
  propertyGet "JoinBorders"
              []
              outBool

setJoinBorders :: Bool
               -> Borders a0
               -> IO ()
setJoinBorders prop =
  propertySet "JoinBorders"
              [inBool prop]

getHasHorizontal :: Borders a0
                 -> IO Bool
getHasHorizontal =
  propertyGet "HasHorizontal"
              []
              outBool

getHasVertical :: Borders a0
               -> IO Bool
getHasVertical =
  propertyGet "HasVertical"
              []
              outBool

getDistanceFrom :: Borders a0
                -> IO WdBorderDistanceFrom
getDistanceFrom =
  propertyGet "DistanceFrom"
              []
              outEnum

setDistanceFrom :: WdBorderDistanceFrom
                -> Borders a0
                -> IO ()
setDistanceFrom prop =
  propertySet "DistanceFrom"
              [inEnum prop]

getEnableFirstPageInSection :: Borders a0
                            -> IO Bool
getEnableFirstPageInSection =
  propertyGet "EnableFirstPageInSection"
              []
              outBool

setEnableFirstPageInSection :: Bool
                            -> Borders a0
                            -> IO ()
setEnableFirstPageInSection prop =
  propertySet "EnableFirstPageInSection"
              [inBool prop]

getEnableOtherPagesInSection :: Borders a0
                             -> IO Bool
getEnableOtherPagesInSection =
  propertyGet "EnableOtherPagesInSection"
              []
              outBool

setEnableOtherPagesInSection :: Bool
                             -> Borders a0
                             -> IO ()
setEnableOtherPagesInSection prop =
  propertySet "EnableOtherPagesInSection"
              [inBool prop]

item24 :: WdBorderType
       -> Borders a0
       -> IO (Border ())
item24 index =
  function1 "Item"
            [inEnum index]
            outIUnknown

applyPageBordersToAllSections :: Borders a0
                              -> IO ()
applyPageBordersToAllSections =
  method0 "ApplyPageBordersToAllSections"
          []

getInsideColor :: Borders a0
               -> IO WdColor
getInsideColor =
  propertyGet "InsideColor"
              []
              outEnum

setInsideColor :: WdColor
               -> Borders a0
               -> IO ()
setInsideColor prop =
  propertySet "InsideColor"
              [inEnum prop]

getOutsideColor :: Borders a0
                -> IO WdColor
getOutsideColor =
  propertyGet "OutsideColor"
              []
              outEnum

setOutsideColor :: WdColor
                -> Borders a0
                -> IO ()
setOutsideColor prop =
  propertySet "OutsideColor"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Border
-- 
-- --------------------------------------------------
data Border_ a = Border__ 
type Border a = IDispatch (Border_ a)
iidBorder :: IID (Border ())
iidBorder = mkIID "{0002093B-0000-0000-C000-000000000046}"

getApplication57 :: Border a0
                 -> IO (Maybe Application)
getApplication57 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator57 :: Border a0
             -> IO Int32
getCreator57 =
  propertyGet "Creator"
              []
              outInt32

getParent57 :: Border a0
            -> IO (IDispatch ())
getParent57 =
  propertyGet "Parent"
              []
              outIDispatch

getVisible1 :: Border a0
            -> IO Bool
getVisible1 =
  propertyGet "Visible"
              []
              outBool

setVisible1 :: Bool
            -> Border a0
            -> IO ()
setVisible1 prop =
  propertySet "Visible"
              [inBool prop]

getColorIndex0 :: Border a0
               -> IO WdColorIndex
getColorIndex0 =
  propertyGet "ColorIndex"
              []
              outEnum

setColorIndex0 :: WdColorIndex
               -> Border a0
               -> IO ()
setColorIndex0 prop =
  propertySet "ColorIndex"
              [inEnum prop]

getInside :: Border a0
          -> IO Bool
getInside =
  propertyGet "Inside"
              []
              outBool

getLineStyle :: Border a0
             -> IO WdLineStyle
getLineStyle =
  propertyGet "LineStyle"
              []
              outEnum

setLineStyle :: WdLineStyle
             -> Border a0
             -> IO ()
setLineStyle prop =
  propertySet "LineStyle"
              [inEnum prop]

getLineWidth :: Border a0
             -> IO WdLineWidth
getLineWidth =
  propertyGet "LineWidth"
              []
              outEnum

setLineWidth :: WdLineWidth
             -> Border a0
             -> IO ()
setLineWidth prop =
  propertySet "LineWidth"
              [inEnum prop]

getArtStyle :: Border a0
            -> IO WdPageBorderArt
getArtStyle =
  propertyGet "ArtStyle"
              []
              outEnum

setArtStyle :: WdPageBorderArt
            -> Border a0
            -> IO ()
setArtStyle prop =
  propertySet "ArtStyle"
              [inEnum prop]

getArtWidth :: Border a0
            -> IO Int32
getArtWidth =
  propertyGet "ArtWidth"
              []
              outInt32

setArtWidth :: Int32
            -> Border a0
            -> IO ()
setArtWidth prop =
  propertySet "ArtWidth"
              [inInt32 prop]

getColor0 :: Border a0
          -> IO WdColor
getColor0 =
  propertyGet "Color"
              []
              outEnum

setColor0 :: WdColor
          -> Border a0
          -> IO ()
setColor0 prop =
  propertySet "Color"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Shading
-- 
-- --------------------------------------------------
data Shading_ a = Shading__ 
type Shading a = IDispatch (Shading_ a)
iidShading :: IID (Shading ())
iidShading = mkIID "{0002093A-0000-0000-C000-000000000046}"

getApplication58 :: Shading a0
                 -> IO (Maybe Application)
getApplication58 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator58 :: Shading a0
             -> IO Int32
getCreator58 =
  propertyGet "Creator"
              []
              outInt32

getParent58 :: Shading a0
            -> IO (IDispatch ())
getParent58 =
  propertyGet "Parent"
              []
              outIDispatch

getForegroundPatternColorIndex :: Shading a0
                               -> IO WdColorIndex
getForegroundPatternColorIndex =
  propertyGet "ForegroundPatternColorIndex"
              []
              outEnum

setForegroundPatternColorIndex :: WdColorIndex
                               -> Shading a0
                               -> IO ()
setForegroundPatternColorIndex prop =
  propertySet "ForegroundPatternColorIndex"
              [inEnum prop]

getBackgroundPatternColorIndex :: Shading a0
                               -> IO WdColorIndex
getBackgroundPatternColorIndex =
  propertyGet "BackgroundPatternColorIndex"
              []
              outEnum

setBackgroundPatternColorIndex :: WdColorIndex
                               -> Shading a0
                               -> IO ()
setBackgroundPatternColorIndex prop =
  propertySet "BackgroundPatternColorIndex"
              [inEnum prop]

getTexture :: Shading a0
           -> IO WdTextureIndex
getTexture =
  propertyGet "Texture"
              []
              outEnum

setTexture :: WdTextureIndex
           -> Shading a0
           -> IO ()
setTexture prop =
  propertySet "Texture"
              [inEnum prop]

getForegroundPatternColor :: Shading a0
                          -> IO WdColor
getForegroundPatternColor =
  propertyGet "ForegroundPatternColor"
              []
              outEnum

setForegroundPatternColor :: WdColor
                          -> Shading a0
                          -> IO ()
setForegroundPatternColor prop =
  propertySet "ForegroundPatternColor"
              [inEnum prop]

getBackgroundPatternColor :: Shading a0
                          -> IO WdColor
getBackgroundPatternColor =
  propertyGet "BackgroundPatternColor"
              []
              outEnum

setBackgroundPatternColor :: WdColor
                          -> Shading a0
                          -> IO ()
setBackgroundPatternColor prop =
  propertySet "BackgroundPatternColor"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface TextRetrievalMode
-- 
-- --------------------------------------------------
data TextRetrievalMode_ a = TextRetrievalMode__ 
type TextRetrievalMode a = IDispatch (TextRetrievalMode_ a)
iidTextRetrievalMode :: IID (TextRetrievalMode ())
iidTextRetrievalMode =
  mkIID "{00020939-0000-0000-C000-000000000046}"

getApplication59 :: TextRetrievalMode a0
                 -> IO (Maybe Application)
getApplication59 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator59 :: TextRetrievalMode a0
             -> IO Int32
getCreator59 =
  propertyGet "Creator"
              []
              outInt32

getParent59 :: TextRetrievalMode a0
            -> IO (IDispatch ())
getParent59 =
  propertyGet "Parent"
              []
              outIDispatch

getViewType :: TextRetrievalMode a0
            -> IO WdViewType
getViewType =
  propertyGet "ViewType"
              []
              outEnum

setViewType :: WdViewType
            -> TextRetrievalMode a0
            -> IO ()
setViewType prop =
  propertySet "ViewType"
              [inEnum prop]

getDuplicate2 :: TextRetrievalMode a0
              -> IO (TextRetrievalMode ())
getDuplicate2 =
  propertyGet "Duplicate"
              []
              outIDispatch

getIncludeHiddenText :: TextRetrievalMode a0
                     -> IO Bool
getIncludeHiddenText =
  propertyGet "IncludeHiddenText"
              []
              outBool

setIncludeHiddenText :: Bool
                     -> TextRetrievalMode a0
                     -> IO ()
setIncludeHiddenText prop =
  propertySet "IncludeHiddenText"
              [inBool prop]

getIncludeFieldCodes :: TextRetrievalMode a0
                     -> IO Bool
getIncludeFieldCodes =
  propertyGet "IncludeFieldCodes"
              []
              outBool

setIncludeFieldCodes :: Bool
                     -> TextRetrievalMode a0
                     -> IO ()
setIncludeFieldCodes prop =
  propertySet "IncludeFieldCodes"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface AutoTextEntries
-- 
-- --------------------------------------------------
data AutoTextEntries_ a = AutoTextEntries__ 
type AutoTextEntries a = IDispatch (AutoTextEntries_ a)
iidAutoTextEntries :: IID (AutoTextEntries ())
iidAutoTextEntries = mkIID "{00020937-0000-0000-C000-000000000046}"

getApplication60 :: AutoTextEntries a0
                 -> IO (Maybe Application)
getApplication60 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator60 :: AutoTextEntries a0
             -> IO Int32
getCreator60 =
  propertyGet "Creator"
              []
              outInt32

getParent60 :: AutoTextEntries a0
            -> IO (IDispatch ())
getParent60 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum25 :: AutoTextEntries a0
             -> IO (IUnknown ())
getNewEnum25 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount25 :: AutoTextEntries a0
           -> IO Int32
getCount25 =
  propertyGet "Count"
              []
              outInt32

item25 :: (Variant a1)
       => a1
       -> AutoTextEntries a0
       -> IO (AutoTextEntry ())
item25 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add18 :: String
      -> Range a1
      -> AutoTextEntries a0
      -> IO (AutoTextEntry ())
add18 name range0 =
  function1 "Add"
            [ inString name
            , inIDispatch range0
            ]
            outIUnknown

appendToSpike :: Range a1
              -> AutoTextEntries a0
              -> IO (AutoTextEntry ())
appendToSpike range0 =
  function1 "AppendToSpike"
            [inIDispatch range0]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface AutoTextEntry
-- 
-- --------------------------------------------------
data AutoTextEntry_ a = AutoTextEntry__ 
type AutoTextEntry a = IDispatch (AutoTextEntry_ a)
iidAutoTextEntry :: IID (AutoTextEntry ())
iidAutoTextEntry = mkIID "{00020936-0000-0000-C000-000000000046}"

getApplication61 :: AutoTextEntry a0
                 -> IO (Maybe Application)
getApplication61 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator61 :: AutoTextEntry a0
             -> IO Int32
getCreator61 =
  propertyGet "Creator"
              []
              outInt32

getParent61 :: AutoTextEntry a0
            -> IO (IDispatch ())
getParent61 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex12 :: AutoTextEntry a0
           -> IO Int32
getIndex12 =
  propertyGet "Index"
              []
              outInt32

getName11 :: AutoTextEntry a0
          -> IO String
getName11 =
  propertyGet "Name"
              []
              outString

setName1 :: String
         -> AutoTextEntry a0
         -> IO ()
setName1 prop =
  propertySet "Name"
              [inString prop]

getStyleName :: AutoTextEntry a0
             -> IO String
getStyleName =
  propertyGet "StyleName"
              []
              outString

getValue1 :: AutoTextEntry a0
          -> IO String
getValue1 =
  propertyGet "Value"
              []
              outString

setValue1 :: String
          -> AutoTextEntry a0
          -> IO ()
setValue1 prop =
  propertySet "Value"
              [inString prop]

delete16 :: AutoTextEntry a0
         -> IO ()
delete16 =
  method0 "Delete"
          []

insert :: (Variant a2)
       => Range a1
       -> a2
       -> AutoTextEntry a0
       -> IO (Range ())
insert where0 richText =
  function1 "Insert"
            [ inIDispatch where0
            , inVariant richText
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface System
-- 
-- --------------------------------------------------
data System_ a = System__ 
type System a = IDispatch (System_ a)
iidSystem :: IID (System ())
iidSystem = mkIID "{00020935-0000-0000-C000-000000000046}"

getApplication62 :: System a0
                 -> IO (Maybe Application)
getApplication62 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator62 :: System a0
             -> IO Int32
getCreator62 =
  propertyGet "Creator"
              []
              outInt32

getParent62 :: System a0
            -> IO (IDispatch ())
getParent62 =
  propertyGet "Parent"
              []
              outIDispatch

getOperatingSystem :: System a0
                   -> IO String
getOperatingSystem =
  propertyGet "OperatingSystem"
              []
              outString

getProcessorType :: System a0
                 -> IO String
getProcessorType =
  propertyGet "ProcessorType"
              []
              outString

getVersion0 :: System a0
            -> IO String
getVersion0 =
  propertyGet "Version"
              []
              outString

getFreeDiskSpace :: System a0
                 -> IO Int32
getFreeDiskSpace =
  propertyGet "FreeDiskSpace"
              []
              outInt32

getCountry :: System a0
           -> IO WdCountry
getCountry =
  propertyGet "Country"
              []
              outEnum

getLanguageDesignation :: System a0
                       -> IO String
getLanguageDesignation =
  propertyGet "LanguageDesignation"
              []
              outString

getHorizontalResolution :: System a0
                        -> IO Int32
getHorizontalResolution =
  propertyGet "HorizontalResolution"
              []
              outInt32

getVerticalResolution :: System a0
                      -> IO Int32
getVerticalResolution =
  propertyGet "VerticalResolution"
              []
              outInt32

getProfileString :: String
                 -> String
                 -> System a0
                 -> IO String
getProfileString section key =
  propertyGet "ProfileString"
              [ inString section
              , inString key
              ]
              outString

setProfileString :: String
                 -> String
                 -> String
                 -> System a0
                 -> IO ()
setProfileString section key prop =
  propertySet "ProfileString"
              [ inString section
              , inString key
              , inString prop
              ]

getPrivateProfileString :: String
                        -> String
                        -> String
                        -> System a0
                        -> IO String
getPrivateProfileString fileName section key =
  propertyGet "PrivateProfileString"
              [ inString fileName
              , inString section
              , inString key
              ]
              outString

setPrivateProfileString :: String
                        -> String
                        -> String
                        -> String
                        -> System a0
                        -> IO ()
setPrivateProfileString fileName section key prop =
  propertySet "PrivateProfileString"
              [ inString fileName
              , inString section
              , inString key
              , inString prop
              ]

getMathCoprocessorInstalled :: System a0
                            -> IO Bool
getMathCoprocessorInstalled =
  propertyGet "MathCoprocessorInstalled"
              []
              outBool

getComputerType :: System a0
                -> IO String
getComputerType =
  propertyGet "ComputerType"
              []
              outString

getMacintoshName :: System a0
                 -> IO String
getMacintoshName =
  propertyGet "MacintoshName"
              []
              outString

getQuickDrawInstalled :: System a0
                      -> IO Bool
getQuickDrawInstalled =
  propertyGet "QuickDrawInstalled"
              []
              outBool

getCursor :: System a0
          -> IO WdCursorType
getCursor =
  propertyGet "Cursor"
              []
              outEnum

setCursor :: WdCursorType
          -> System a0
          -> IO ()
setCursor prop =
  propertySet "Cursor"
              [inEnum prop]

mSInfo :: System a0
       -> IO ()
mSInfo =
  method0 "MSInfo"
          []

connect :: (Variant a1, Variant a2)
        => String
        -> a1
        -> a2
        -> System a0
        -> IO ()
connect path drive password =
  method0 "Connect"
          [ inString path
          , inVariant drive
          , inVariant password
          ]

getCountryRegion :: System a0
                 -> IO WdCountry
getCountryRegion =
  propertyGet "CountryRegion"
              []
              outEnum

-- --------------------------------------------------
-- 
-- interface OLEFormat
-- 
-- --------------------------------------------------
data OLEFormat_ a = OLEFormat__ 
type OLEFormat a = IDispatch (OLEFormat_ a)
iidOLEFormat :: IID (OLEFormat ())
iidOLEFormat = mkIID "{00020933-0000-0000-C000-000000000046}"

getApplication63 :: OLEFormat a0
                 -> IO (Maybe Application)
getApplication63 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator63 :: OLEFormat a0
             -> IO Int32
getCreator63 =
  propertyGet "Creator"
              []
              outInt32

getParent63 :: OLEFormat a0
            -> IO (IDispatch ())
getParent63 =
  propertyGet "Parent"
              []
              outIDispatch

getClassType :: OLEFormat a0
             -> IO String
getClassType =
  propertyGet "ClassType"
              []
              outString

setClassType :: String
             -> OLEFormat a0
             -> IO ()
setClassType prop =
  propertySet "ClassType"
              [inString prop]

getDisplayAsIcon :: OLEFormat a0
                 -> IO Bool
getDisplayAsIcon =
  propertyGet "DisplayAsIcon"
              []
              outBool

setDisplayAsIcon :: Bool
                 -> OLEFormat a0
                 -> IO ()
setDisplayAsIcon prop =
  propertySet "DisplayAsIcon"
              [inBool prop]

getIconName :: OLEFormat a0
            -> IO String
getIconName =
  propertyGet "IconName"
              []
              outString

setIconName :: String
            -> OLEFormat a0
            -> IO ()
setIconName prop =
  propertySet "IconName"
              [inString prop]

getIconPath :: OLEFormat a0
            -> IO String
getIconPath =
  propertyGet "IconPath"
              []
              outString

getIconIndex :: OLEFormat a0
             -> IO Int32
getIconIndex =
  propertyGet "IconIndex"
              []
              outInt32

setIconIndex :: Int32
             -> OLEFormat a0
             -> IO ()
setIconIndex prop =
  propertySet "IconIndex"
              [inInt32 prop]

getIconLabel :: OLEFormat a0
             -> IO String
getIconLabel =
  propertyGet "IconLabel"
              []
              outString

setIconLabel :: String
             -> OLEFormat a0
             -> IO ()
setIconLabel prop =
  propertySet "IconLabel"
              [inString prop]

getLabel :: OLEFormat a0
         -> IO String
getLabel =
  propertyGet "Label"
              []
              outString

getObject :: OLEFormat a0
          -> IO (IDispatch ())
getObject =
  propertyGet "Object"
              []
              outIDispatch

getProgID :: OLEFormat a0
          -> IO String
getProgID =
  propertyGet "ProgID"
              []
              outString

activate3 :: OLEFormat a0
          -> IO ()
activate3 =
  method0 "Activate"
          []

edit0 :: OLEFormat a0
      -> IO ()
edit0 =
  method0 "Edit"
          []

open1 :: OLEFormat a0
      -> IO ()
open1 =
  method0 "Open"
          []

doVerb :: (Variant a1)
       => a1
       -> OLEFormat a0
       -> IO ()
doVerb verbIndex =
  method0 "DoVerb"
          [inVariant verbIndex]

convertTo :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> OLEFormat a0
          -> IO ()
convertTo classType displayAsIcon iconFileName iconIndex iconLabel =
  method0 "ConvertTo"
          [ inVariant classType
          , inVariant displayAsIcon
          , inVariant iconFileName
          , inVariant iconIndex
          , inVariant iconLabel
          ]

activateAs :: String
           -> OLEFormat a0
           -> IO ()
activateAs classType =
  method0 "ActivateAs"
          [inString classType]

getPreserveFormattingOnUpdate :: OLEFormat a0
                              -> IO Bool
getPreserveFormattingOnUpdate =
  propertyGet "PreserveFormattingOnUpdate"
              []
              outBool

setPreserveFormattingOnUpdate :: Bool
                              -> OLEFormat a0
                              -> IO ()
setPreserveFormattingOnUpdate prop =
  propertySet "PreserveFormattingOnUpdate"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface LinkFormat
-- 
-- --------------------------------------------------
data LinkFormat_ a = LinkFormat__ 
type LinkFormat a = IDispatch (LinkFormat_ a)
iidLinkFormat :: IID (LinkFormat ())
iidLinkFormat = mkIID "{00020931-0000-0000-C000-000000000046}"

getApplication64 :: LinkFormat a0
                 -> IO (Maybe Application)
getApplication64 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator64 :: LinkFormat a0
             -> IO Int32
getCreator64 =
  propertyGet "Creator"
              []
              outInt32

getParent64 :: LinkFormat a0
            -> IO (IDispatch ())
getParent64 =
  propertyGet "Parent"
              []
              outIDispatch

getAutoUpdate :: LinkFormat a0
              -> IO Bool
getAutoUpdate =
  propertyGet "AutoUpdate"
              []
              outBool

setAutoUpdate :: Bool
              -> LinkFormat a0
              -> IO ()
setAutoUpdate prop =
  propertySet "AutoUpdate"
              [inBool prop]

getSourceName :: LinkFormat a0
              -> IO String
getSourceName =
  propertyGet "SourceName"
              []
              outString

getSourcePath :: LinkFormat a0
              -> IO String
getSourcePath =
  propertyGet "SourcePath"
              []
              outString

getLocked :: LinkFormat a0
          -> IO Bool
getLocked =
  propertyGet "Locked"
              []
              outBool

setLocked :: Bool
          -> LinkFormat a0
          -> IO ()
setLocked prop =
  propertySet "Locked"
              [inBool prop]

getType2 :: LinkFormat a0
         -> IO WdLinkType
getType2 =
  propertyGet "Type"
              []
              outEnum

getSourceFullName :: LinkFormat a0
                  -> IO String
getSourceFullName =
  propertyGet "SourceFullName"
              []
              outString

setSourceFullName :: String
                  -> LinkFormat a0
                  -> IO ()
setSourceFullName prop =
  propertySet "SourceFullName"
              [inString prop]

getSavePictureWithDocument :: LinkFormat a0
                           -> IO Bool
getSavePictureWithDocument =
  propertyGet "SavePictureWithDocument"
              []
              outBool

setSavePictureWithDocument :: Bool
                           -> LinkFormat a0
                           -> IO ()
setSavePictureWithDocument prop =
  propertySet "SavePictureWithDocument"
              [inBool prop]

breakLink :: LinkFormat a0
          -> IO ()
breakLink =
  method0 "BreakLink"
          []

update :: LinkFormat a0
       -> IO ()
update =
  method0 "Update"
          []

-- --------------------------------------------------
-- 
-- interface _OLEControl
-- 
-- --------------------------------------------------
data OLEControl_ a = OLEControl__ 
type OLEControl a = IDispatch (OLEControl_ a)
iidOLEControl :: IID (OLEControl ())
iidOLEControl = mkIID "{000209A4-0000-0000-C000-000000000046}"

getLeft1 :: OLEControl a0
         -> IO Float
getLeft1 =
  propertyGet "Left"
              []
              outFloat

setLeft1 :: Float
         -> OLEControl a0
         -> IO ()
setLeft1 prop =
  propertySet "Left"
              [inFloat prop]

getTop1 :: OLEControl a0
        -> IO Float
getTop1 =
  propertyGet "Top"
              []
              outFloat

setTop1 :: Float
        -> OLEControl a0
        -> IO ()
setTop1 prop =
  propertySet "Top"
              [inFloat prop]

getHeight5 :: OLEControl a0
           -> IO Float
getHeight5 =
  propertyGet "Height"
              []
              outFloat

setHeight9 :: Float
           -> OLEControl a0
           -> IO ()
setHeight9 prop =
  propertySet "Height"
              [inFloat prop]

getWidth5 :: OLEControl a0
          -> IO Float
getWidth5 =
  propertyGet "Width"
              []
              outFloat

setWidth9 :: Float
          -> OLEControl a0
          -> IO ()
setWidth9 prop =
  propertySet "Width"
              [inFloat prop]

getName12 :: OLEControl a0
          -> IO String
getName12 =
  propertyGet "Name"
              []
              outString

setName2 :: String
         -> OLEControl a0
         -> IO ()
setName2 prop =
  propertySet "Name"
              [inString prop]

getAutomation :: OLEControl a0
              -> IO (IDispatch ())
getAutomation =
  propertyGet "Automation"
              []
              outIDispatch

select8 :: OLEControl a0
        -> IO ()
select8 =
  method0 "Select"
          []

copy1 :: OLEControl a0
      -> IO ()
copy1 =
  method0 "Copy"
          []

cut0 :: OLEControl a0
     -> IO ()
cut0 =
  method0 "Cut"
          []

delete17 :: OLEControl a0
         -> IO ()
delete17 =
  method0 "Delete"
          []

activate4 :: OLEControl a0
          -> IO ()
activate4 =
  method0 "Activate"
          []

getAltHTML :: OLEControl a0
           -> IO String
getAltHTML =
  propertyGet "AltHTML"
              []
              outString

setAltHTML :: String
           -> OLEControl a0
           -> IO ()
setAltHTML prop =
  propertySet "AltHTML"
              [inString prop]

-- --------------------------------------------------
-- 
-- interface Fields
-- 
-- --------------------------------------------------
data Fields_ a = Fields__ 
type Fields a = IDispatch (Fields_ a)
iidFields :: IID (Fields ())
iidFields = mkIID "{00020930-0000-0000-C000-000000000046}"

getApplication65 :: Fields a0
                 -> IO (Maybe Application)
getApplication65 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator65 :: Fields a0
             -> IO Int32
getCreator65 =
  propertyGet "Creator"
              []
              outInt32

getParent65 :: Fields a0
            -> IO (IDispatch ())
getParent65 =
  propertyGet "Parent"
              []
              outIDispatch

getCount26 :: Fields a0
           -> IO Int32
getCount26 =
  propertyGet "Count"
              []
              outInt32

getLocked0 :: Fields a0
           -> IO Int32
getLocked0 =
  propertyGet "Locked"
              []
              outInt32

setLocked0 :: Int32
           -> Fields a0
           -> IO ()
setLocked0 prop =
  propertySet "Locked"
              [inInt32 prop]

getNewEnum26 :: Fields a0
             -> IO (IUnknown ())
getNewEnum26 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item26 :: Int32
       -> Fields a0
       -> IO (Field ())
item26 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

toggleShowCodes :: Fields a0
                -> IO ()
toggleShowCodes =
  method0 "ToggleShowCodes"
          []

update0 :: Fields a0
        -> IO Int32
update0 =
  function1 "Update"
            []
            outInt32

unlink :: Fields a0
       -> IO ()
unlink =
  method0 "Unlink"
          []

updateSource :: Fields a0
             -> IO ()
updateSource =
  method0 "UpdateSource"
          []

add19 :: (Variant a2, Variant a3, Variant a4)
      => Range a1
      -> a2
      -> a3
      -> a4
      -> Fields a0
      -> IO (Field ())
add19 range0 type0 text preserveFormatting =
  function1 "Add"
            [ inIDispatch range0
            , inVariant type0
            , inVariant text
            , inVariant preserveFormatting
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Field
-- 
-- --------------------------------------------------
data Field_ a = Field__ 
type Field a = IDispatch (Field_ a)
iidField :: IID (Field ())
iidField = mkIID "{0002092F-0000-0000-C000-000000000046}"

getApplication66 :: Field a0
                 -> IO (Maybe Application)
getApplication66 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator66 :: Field a0
             -> IO Int32
getCreator66 =
  propertyGet "Creator"
              []
              outInt32

getParent66 :: Field a0
            -> IO (IDispatch ())
getParent66 =
  propertyGet "Parent"
              []
              outIDispatch

getCode :: Field a0
        -> IO (Range ())
getCode =
  propertyGet "Code"
              []
              outIDispatch

setCode :: Range a1
        -> Field a0
        -> IO ()
setCode prop =
  propertySet "Code"
              [inIDispatch prop]

getType3 :: Field a0
         -> IO WdFieldType
getType3 =
  propertyGet "Type"
              []
              outEnum

getLocked1 :: Field a0
           -> IO Bool
getLocked1 =
  propertyGet "Locked"
              []
              outBool

setLocked1 :: Bool
           -> Field a0
           -> IO ()
setLocked1 prop =
  propertySet "Locked"
              [inBool prop]

getKind0 :: Field a0
         -> IO WdFieldKind
getKind0 =
  propertyGet "Kind"
              []
              outEnum

getResult :: Field a0
          -> IO (Range ())
getResult =
  propertyGet "Result"
              []
              outIDispatch

setResult :: Range a1
          -> Field a0
          -> IO ()
setResult prop =
  propertySet "Result"
              [inIDispatch prop]

getData :: Field a0
        -> IO String
getData =
  propertyGet "Data"
              []
              outString

setData :: String
        -> Field a0
        -> IO ()
setData prop =
  propertySet "Data"
              [inString prop]

getNext5 :: Field a0
         -> IO (Field ())
getNext5 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious5 :: Field a0
             -> IO (Field ())
getPrevious5 =
  propertyGet "Previous"
              []
              outIDispatch

getIndex13 :: Field a0
           -> IO Int32
getIndex13 =
  propertyGet "Index"
              []
              outInt32

getShowCodes :: Field a0
             -> IO Bool
getShowCodes =
  propertyGet "ShowCodes"
              []
              outBool

setShowCodes :: Bool
             -> Field a0
             -> IO ()
setShowCodes prop =
  propertySet "ShowCodes"
              [inBool prop]

getLinkFormat :: Field a0
              -> IO (LinkFormat ())
getLinkFormat =
  propertyGet "LinkFormat"
              []
              outIDispatch

getOLEFormat :: Field a0
             -> IO (OLEFormat ())
getOLEFormat =
  propertyGet "OLEFormat"
              []
              outIDispatch

getInlineShape :: Field a0
               -> IO (InlineShape ())
getInlineShape =
  propertyGet "InlineShape"
              []
              outIUnknown

select9 :: Field a0
        -> IO ()
select9 =
  method0 "Select"
          []

update1 :: Field a0
        -> IO Bool
update1 =
  function1 "Update"
            []
            outBool

unlink0 :: Field a0
        -> IO ()
unlink0 =
  method0 "Unlink"
          []

updateSource0 :: Field a0
              -> IO ()
updateSource0 =
  method0 "UpdateSource"
          []

doClick :: Field a0
        -> IO ()
doClick =
  method0 "DoClick"
          []

copy2 :: Field a0
      -> IO ()
copy2 =
  method0 "Copy"
          []

cut1 :: Field a0
     -> IO ()
cut1 =
  method0 "Cut"
          []

delete18 :: Field a0
         -> IO ()
delete18 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Browser
-- 
-- --------------------------------------------------
data Browser_ a = Browser__ 
type Browser a = IDispatch (Browser_ a)
iidBrowser :: IID (Browser ())
iidBrowser = mkIID "{0002092E-0000-0000-C000-000000000046}"

getApplication67 :: Browser a0
                 -> IO (Maybe Application)
getApplication67 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator67 :: Browser a0
             -> IO Int32
getCreator67 =
  propertyGet "Creator"
              []
              outInt32

getParent67 :: Browser a0
            -> IO (IDispatch ())
getParent67 =
  propertyGet "Parent"
              []
              outIDispatch

getTarget :: Browser a0
          -> IO WdBrowseTarget
getTarget =
  propertyGet "Target"
              []
              outEnum

setTarget :: WdBrowseTarget
          -> Browser a0
          -> IO ()
setTarget prop =
  propertySet "Target"
              [inEnum prop]

next1 :: Browser a0
      -> IO ()
next1 =
  method0 "Next"
          []

previous1 :: Browser a0
          -> IO ()
previous1 =
  method0 "Previous"
          []

-- --------------------------------------------------
-- 
-- interface Styles
-- 
-- --------------------------------------------------
data Styles_ a = Styles__ 
type Styles a = IDispatch (Styles_ a)
iidStyles :: IID (Styles ())
iidStyles = mkIID "{0002092D-0000-0000-C000-000000000046}"

getApplication68 :: Styles a0
                 -> IO (Maybe Application)
getApplication68 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator68 :: Styles a0
             -> IO Int32
getCreator68 =
  propertyGet "Creator"
              []
              outInt32

getParent68 :: Styles a0
            -> IO (IDispatch ())
getParent68 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum27 :: Styles a0
             -> IO (IUnknown ())
getNewEnum27 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount27 :: Styles a0
           -> IO Int32
getCount27 =
  propertyGet "Count"
              []
              outInt32

item27 :: (Variant a1)
       => a1
       -> Styles a0
       -> IO (Style ())
item27 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add20 :: (Variant a1)
      => String
      -> a1
      -> Styles a0
      -> IO (Style ())
add20 name type0 =
  function1 "Add"
            [ inString name
            , inVariant type0
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Style
-- 
-- --------------------------------------------------
data Style_ a = Style__ 
type Style a = IDispatch (Style_ a)
iidStyle :: IID (Style ())
iidStyle = mkIID "{0002092C-0000-0000-C000-000000000046}"

getApplication69 :: Style a0
                 -> IO (Maybe Application)
getApplication69 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator69 :: Style a0
             -> IO Int32
getCreator69 =
  propertyGet "Creator"
              []
              outInt32

getParent69 :: Style a0
            -> IO (IDispatch ())
getParent69 =
  propertyGet "Parent"
              []
              outIDispatch

getNameLocal0 :: Style a0
              -> IO String
getNameLocal0 =
  propertyGet "NameLocal"
              []
              outString

setNameLocal :: String
             -> Style a0
             -> IO ()
setNameLocal prop =
  propertySet "NameLocal"
              [inString prop]

getBaseStyle :: (Variant a1)
             => Style a0
             -> IO a1
getBaseStyle =
  propertyGet "BaseStyle"
              []
              outVariant

setBaseStyle :: (Variant a1)
             => a1
             -> Style a0
             -> IO ()
setBaseStyle prop =
  propertySet "BaseStyle"
              [inVariant prop]

getDescription :: Style a0
               -> IO String
getDescription =
  propertyGet "Description"
              []
              outString

getType4 :: Style a0
         -> IO WdStyleType
getType4 =
  propertyGet "Type"
              []
              outEnum

getBuiltIn :: Style a0
           -> IO Bool
getBuiltIn =
  propertyGet "BuiltIn"
              []
              outBool

getNextParagraphStyle :: (Variant a1)
                      => Style a0
                      -> IO a1
getNextParagraphStyle =
  propertyGet "NextParagraphStyle"
              []
              outVariant

setNextParagraphStyle :: (Variant a1)
                      => a1
                      -> Style a0
                      -> IO ()
setNextParagraphStyle prop =
  propertySet "NextParagraphStyle"
              [inVariant prop]

getInUse :: Style a0
         -> IO Bool
getInUse =
  propertyGet "InUse"
              []
              outBool

getShading11 :: Style a0
             -> IO (Shading ())
getShading11 =
  propertyGet "Shading"
              []
              outIDispatch

getBorders12 :: Style a0
             -> IO (Borders ())
getBorders12 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders12 :: Borders a1
             -> Style a0
             -> IO ()
setBorders12 prop =
  propertySet "Borders"
              [inIDispatch prop]

getParagraphFormat2 :: Style a0
                    -> IO (Maybe ParagraphFormat)
getParagraphFormat2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 23 iptr
    doThenFree free (readunique readParagraphFormat) prop

setParagraphFormat2 :: ParagraphFormat
                    -> Style a0
                    -> IO ()
setParagraphFormat2 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 24 iptr
    free prop

getFont2 :: Style a0
         -> IO (Maybe Font)
getFont2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 25 iptr
    doThenFree free (readunique readFont) prop

setFont2 :: Font
         -> Style a0
         -> IO ()
setFont2 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 26 iptr
    free prop

getFrame1 :: Style a0
          -> IO (Frame ())
getFrame1 =
  propertyGet "Frame"
              []
              outIUnknown

getLanguageID3 :: Style a0
               -> IO WdLanguageID
getLanguageID3 =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID3 :: WdLanguageID
               -> Style a0
               -> IO ()
setLanguageID3 prop =
  propertySet "LanguageID"
              [inEnum prop]

getAutomaticallyUpdate :: Style a0
                       -> IO Bool
getAutomaticallyUpdate =
  propertyGet "AutomaticallyUpdate"
              []
              outBool

setAutomaticallyUpdate :: Bool
                       -> Style a0
                       -> IO ()
setAutomaticallyUpdate prop =
  propertySet "AutomaticallyUpdate"
              [inBool prop]

getListTemplate0 :: Style a0
                 -> IO (ListTemplate ())
getListTemplate0 =
  propertyGet "ListTemplate"
              []
              outIUnknown

getListLevelNumber0 :: Style a0
                    -> IO Int32
getListLevelNumber0 =
  propertyGet "ListLevelNumber"
              []
              outInt32

getLanguageIDFarEast3 :: Style a0
                      -> IO WdLanguageID
getLanguageIDFarEast3 =
  propertyGet "LanguageIDFarEast"
              []
              outEnum

setLanguageIDFarEast3 :: WdLanguageID
                      -> Style a0
                      -> IO ()
setLanguageIDFarEast3 prop =
  propertySet "LanguageIDFarEast"
              [inEnum prop]

getHidden0 :: Style a0
           -> IO Bool
getHidden0 =
  propertyGet "Hidden"
              []
              outBool

setHidden0 :: Bool
           -> Style a0
           -> IO ()
setHidden0 prop =
  propertySet "Hidden"
              [inBool prop]

delete19 :: Style a0
         -> IO ()
delete19 =
  method0 "Delete"
          []

linkToListTemplate :: (Variant a2)
                   => ListTemplate a1
                   -> a2
                   -> Style a0
                   -> IO ()
linkToListTemplate listTemplate listLevelNumber =
  method0 "LinkToListTemplate"
          [ inIUnknown listTemplate
          , inVariant listLevelNumber
          ]

getNoProofing3 :: Style a0
               -> IO Int32
getNoProofing3 =
  propertyGet "NoProofing"
              []
              outInt32

setNoProofing3 :: Int32
               -> Style a0
               -> IO ()
setNoProofing3 prop =
  propertySet "NoProofing"
              [inInt32 prop]

getLinkStyle :: (Variant a1)
             => Style a0
             -> IO a1
getLinkStyle =
  propertyGet "LinkStyle"
              []
              outVariant

setLinkStyle :: (Variant a1)
             => a1
             -> Style a0
             -> IO ()
setLinkStyle prop =
  propertySet "LinkStyle"
              [inVariant prop]

getVisibility :: Style a0
              -> IO Bool
getVisibility =
  propertyGet "Visibility"
              []
              outBool

setVisibility :: Bool
              -> Style a0
              -> IO ()
setVisibility prop =
  propertySet "Visibility"
              [inBool prop]

getNoSpaceBetweenParagraphsOfSameStyle :: Style a0
                                       -> IO Bool
getNoSpaceBetweenParagraphsOfSameStyle =
  propertyGet "NoSpaceBetweenParagraphsOfSameStyle"
              []
              outBool

setNoSpaceBetweenParagraphsOfSameStyle :: Bool
                                       -> Style a0
                                       -> IO ()
setNoSpaceBetweenParagraphsOfSameStyle prop =
  propertySet "NoSpaceBetweenParagraphsOfSameStyle"
              [inBool prop]

getTable :: Style a0
         -> IO (TableStyle ())
getTable =
  propertyGet "Table"
              []
              outIUnknown

getLocked2 :: Style a0
           -> IO Bool
getLocked2 =
  propertyGet "Locked"
              []
              outBool

setLocked2 :: Bool
           -> Style a0
           -> IO ()
setLocked2 prop =
  propertySet "Locked"
              [inBool prop]

getPriority :: Style a0
            -> IO Int32
getPriority =
  propertyGet "Priority"
              []
              outInt32

setPriority :: Int32
            -> Style a0
            -> IO ()
setPriority prop =
  propertySet "Priority"
              [inInt32 prop]

getUnhideWhenUsed :: Style a0
                  -> IO Bool
getUnhideWhenUsed =
  propertyGet "UnhideWhenUsed"
              []
              outBool

setUnhideWhenUsed :: Bool
                  -> Style a0
                  -> IO ()
setUnhideWhenUsed prop =
  propertySet "UnhideWhenUsed"
              [inBool prop]

getQuickStyle :: Style a0
              -> IO Bool
getQuickStyle =
  propertyGet "QuickStyle"
              []
              outBool

setQuickStyle :: Bool
              -> Style a0
              -> IO ()
setQuickStyle prop =
  propertySet "QuickStyle"
              [inBool prop]

getLinked :: Style a0
          -> IO Bool
getLinked =
  propertyGet "Linked"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface Frames
-- 
-- --------------------------------------------------
data Frames_ a = Frames__ 
type Frames a = IDispatch (Frames_ a)
iidFrames :: IID (Frames ())
iidFrames = mkIID "{0002092B-0000-0000-C000-000000000046}"

getApplication70 :: Frames a0
                 -> IO (Maybe Application)
getApplication70 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator70 :: Frames a0
             -> IO Int32
getCreator70 =
  propertyGet "Creator"
              []
              outInt32

getParent70 :: Frames a0
            -> IO (IDispatch ())
getParent70 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum28 :: Frames a0
             -> IO (IUnknown ())
getNewEnum28 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount28 :: Frames a0
           -> IO Int32
getCount28 =
  propertyGet "Count"
              []
              outInt32

item28 :: Int32
       -> Frames a0
       -> IO (Frame ())
item28 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add21 :: Range a1
      -> Frames a0
      -> IO (Frame ())
add21 range0 =
  function1 "Add"
            [inIDispatch range0]
            outIUnknown

delete20 :: Frames a0
         -> IO ()
delete20 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Frame
-- 
-- --------------------------------------------------
data Frame_ a = Frame__ 
type Frame a = IDispatch (Frame_ a)
iidFrame :: IID (Frame ())
iidFrame = mkIID "{0002092A-0000-0000-C000-000000000046}"

getApplication71 :: Frame a0
                 -> IO (Maybe Application)
getApplication71 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator71 :: Frame a0
             -> IO Int32
getCreator71 =
  propertyGet "Creator"
              []
              outInt32

getParent71 :: Frame a0
            -> IO (IDispatch ())
getParent71 =
  propertyGet "Parent"
              []
              outIDispatch

getHeightRule3 :: Frame a0
               -> IO WdFrameSizeRule
getHeightRule3 =
  propertyGet "HeightRule"
              []
              outEnum

setHeightRule3 :: WdFrameSizeRule
               -> Frame a0
               -> IO ()
setHeightRule3 prop =
  propertySet "HeightRule"
              [inEnum prop]

getWidthRule :: Frame a0
             -> IO WdFrameSizeRule
getWidthRule =
  propertyGet "WidthRule"
              []
              outEnum

setWidthRule :: WdFrameSizeRule
             -> Frame a0
             -> IO ()
setWidthRule prop =
  propertySet "WidthRule"
              [inEnum prop]

getHorizontalDistanceFromText :: Frame a0
                              -> IO Float
getHorizontalDistanceFromText =
  propertyGet "HorizontalDistanceFromText"
              []
              outFloat

setHorizontalDistanceFromText :: Float
                              -> Frame a0
                              -> IO ()
setHorizontalDistanceFromText prop =
  propertySet "HorizontalDistanceFromText"
              [inFloat prop]

getHeight6 :: Frame a0
           -> IO Float
getHeight6 =
  propertyGet "Height"
              []
              outFloat

setHeight10 :: Float
            -> Frame a0
            -> IO ()
setHeight10 prop =
  propertySet "Height"
              [inFloat prop]

getHorizontalPosition0 :: Frame a0
                       -> IO Float
getHorizontalPosition0 =
  propertyGet "HorizontalPosition"
              []
              outFloat

setHorizontalPosition0 :: Float
                       -> Frame a0
                       -> IO ()
setHorizontalPosition0 prop =
  propertySet "HorizontalPosition"
              [inFloat prop]

getLockAnchor :: Frame a0
              -> IO Bool
getLockAnchor =
  propertyGet "LockAnchor"
              []
              outBool

setLockAnchor :: Bool
              -> Frame a0
              -> IO ()
setLockAnchor prop =
  propertySet "LockAnchor"
              [inBool prop]

getRelativeHorizontalPosition0 :: Frame a0
                               -> IO WdRelativeHorizontalPosition
getRelativeHorizontalPosition0 =
  propertyGet "RelativeHorizontalPosition"
              []
              outEnum

setRelativeHorizontalPosition0 :: WdRelativeHorizontalPosition
                               -> Frame a0
                               -> IO ()
setRelativeHorizontalPosition0 prop =
  propertySet "RelativeHorizontalPosition"
              [inEnum prop]

getRelativeVerticalPosition0 :: Frame a0
                             -> IO WdRelativeVerticalPosition
getRelativeVerticalPosition0 =
  propertyGet "RelativeVerticalPosition"
              []
              outEnum

setRelativeVerticalPosition0 :: WdRelativeVerticalPosition
                             -> Frame a0
                             -> IO ()
setRelativeVerticalPosition0 prop =
  propertySet "RelativeVerticalPosition"
              [inEnum prop]

getVerticalDistanceFromText :: Frame a0
                            -> IO Float
getVerticalDistanceFromText =
  propertyGet "VerticalDistanceFromText"
              []
              outFloat

setVerticalDistanceFromText :: Float
                            -> Frame a0
                            -> IO ()
setVerticalDistanceFromText prop =
  propertySet "VerticalDistanceFromText"
              [inFloat prop]

getVerticalPosition0 :: Frame a0
                     -> IO Float
getVerticalPosition0 =
  propertyGet "VerticalPosition"
              []
              outFloat

setVerticalPosition0 :: Float
                     -> Frame a0
                     -> IO ()
setVerticalPosition0 prop =
  propertySet "VerticalPosition"
              [inFloat prop]

getWidth6 :: Frame a0
          -> IO Float
getWidth6 =
  propertyGet "Width"
              []
              outFloat

setWidth10 :: Float
           -> Frame a0
           -> IO ()
setWidth10 prop =
  propertySet "Width"
              [inFloat prop]

getTextWrap :: Frame a0
            -> IO Bool
getTextWrap =
  propertyGet "TextWrap"
              []
              outBool

setTextWrap :: Bool
            -> Frame a0
            -> IO ()
setTextWrap prop =
  propertySet "TextWrap"
              [inBool prop]

getShading12 :: Frame a0
             -> IO (Shading ())
getShading12 =
  propertyGet "Shading"
              []
              outIDispatch

getBorders13 :: Frame a0
             -> IO (Borders ())
getBorders13 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders13 :: Borders a1
             -> Frame a0
             -> IO ()
setBorders13 prop =
  propertySet "Borders"
              [inIDispatch prop]

getRange8 :: Frame a0
          -> IO (Range ())
getRange8 =
  propertyGet "Range"
              []
              outIDispatch

delete21 :: Frame a0
         -> IO ()
delete21 =
  method0 "Delete"
          []

select10 :: Frame a0
         -> IO ()
select10 =
  method0 "Select"
          []

copy3 :: Frame a0
      -> IO ()
copy3 =
  method0 "Copy"
          []

cut2 :: Frame a0
     -> IO ()
cut2 =
  method0 "Cut"
          []

-- --------------------------------------------------
-- 
-- interface FormFields
-- 
-- --------------------------------------------------
data FormFields_ a = FormFields__ 
type FormFields a = IDispatch (FormFields_ a)
iidFormFields :: IID (FormFields ())
iidFormFields = mkIID "{00020929-0000-0000-C000-000000000046}"

getApplication72 :: FormFields a0
                 -> IO (Maybe Application)
getApplication72 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator72 :: FormFields a0
             -> IO Int32
getCreator72 =
  propertyGet "Creator"
              []
              outInt32

getParent72 :: FormFields a0
            -> IO (IDispatch ())
getParent72 =
  propertyGet "Parent"
              []
              outIDispatch

getCount29 :: FormFields a0
           -> IO Int32
getCount29 =
  propertyGet "Count"
              []
              outInt32

getShaded :: FormFields a0
          -> IO Bool
getShaded =
  propertyGet "Shaded"
              []
              outBool

setShaded :: Bool
          -> FormFields a0
          -> IO ()
setShaded prop =
  propertySet "Shaded"
              [inBool prop]

getNewEnum29 :: FormFields a0
             -> IO (IUnknown ())
getNewEnum29 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item29 :: (Variant a1)
       => a1
       -> FormFields a0
       -> IO (FormField ())
item29 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add22 :: Range a1
      -> WdFieldType
      -> FormFields a0
      -> IO (FormField ())
add22 range0 type0 =
  function1 "Add"
            [ inIDispatch range0
            , inEnum type0
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface FormField
-- 
-- --------------------------------------------------
data FormField_ a = FormField__ 
type FormField a = IDispatch (FormField_ a)
iidFormField :: IID (FormField ())
iidFormField = mkIID "{00020928-0000-0000-C000-000000000046}"

getApplication73 :: FormField a0
                 -> IO (Maybe Application)
getApplication73 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator73 :: FormField a0
             -> IO Int32
getCreator73 =
  propertyGet "Creator"
              []
              outInt32

getParent73 :: FormField a0
            -> IO (IDispatch ())
getParent73 =
  propertyGet "Parent"
              []
              outIDispatch

getType5 :: FormField a0
         -> IO WdFieldType
getType5 =
  propertyGet "Type"
              []
              outEnum

getName13 :: FormField a0
          -> IO String
getName13 =
  propertyGet "Name"
              []
              outString

setName3 :: String
         -> FormField a0
         -> IO ()
setName3 prop =
  propertySet "Name"
              [inString prop]

getEntryMacro :: FormField a0
              -> IO String
getEntryMacro =
  propertyGet "EntryMacro"
              []
              outString

setEntryMacro :: String
              -> FormField a0
              -> IO ()
setEntryMacro prop =
  propertySet "EntryMacro"
              [inString prop]

getExitMacro :: FormField a0
             -> IO String
getExitMacro =
  propertyGet "ExitMacro"
              []
              outString

setExitMacro :: String
             -> FormField a0
             -> IO ()
setExitMacro prop =
  propertySet "ExitMacro"
              [inString prop]

getOwnHelp :: FormField a0
           -> IO Bool
getOwnHelp =
  propertyGet "OwnHelp"
              []
              outBool

setOwnHelp :: Bool
           -> FormField a0
           -> IO ()
setOwnHelp prop =
  propertySet "OwnHelp"
              [inBool prop]

getOwnStatus :: FormField a0
             -> IO Bool
getOwnStatus =
  propertyGet "OwnStatus"
              []
              outBool

setOwnStatus :: Bool
             -> FormField a0
             -> IO ()
setOwnStatus prop =
  propertySet "OwnStatus"
              [inBool prop]

getHelpText :: FormField a0
            -> IO String
getHelpText =
  propertyGet "HelpText"
              []
              outString

setHelpText :: String
            -> FormField a0
            -> IO ()
setHelpText prop =
  propertySet "HelpText"
              [inString prop]

getStatusText :: FormField a0
              -> IO String
getStatusText =
  propertyGet "StatusText"
              []
              outString

setStatusText :: String
              -> FormField a0
              -> IO ()
setStatusText prop =
  propertySet "StatusText"
              [inString prop]

getEnabled :: FormField a0
           -> IO Bool
getEnabled =
  propertyGet "Enabled"
              []
              outBool

setEnabled :: Bool
           -> FormField a0
           -> IO ()
setEnabled prop =
  propertySet "Enabled"
              [inBool prop]

getResult0 :: FormField a0
           -> IO String
getResult0 =
  propertyGet "Result"
              []
              outString

setResult0 :: String
           -> FormField a0
           -> IO ()
setResult0 prop =
  propertySet "Result"
              [inString prop]

getTextInput :: FormField a0
             -> IO (TextInput ())
getTextInput =
  propertyGet "TextInput"
              []
              outIUnknown

getCheckBox :: FormField a0
            -> IO (CheckBox ())
getCheckBox =
  propertyGet "CheckBox"
              []
              outIUnknown

getDropDown :: FormField a0
            -> IO (DropDown ())
getDropDown =
  propertyGet "DropDown"
              []
              outIUnknown

getNext6 :: FormField a0
         -> IO (FormField ())
getNext6 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious6 :: FormField a0
             -> IO (FormField ())
getPrevious6 =
  propertyGet "Previous"
              []
              outIDispatch

getCalculateOnExit :: FormField a0
                   -> IO Bool
getCalculateOnExit =
  propertyGet "CalculateOnExit"
              []
              outBool

setCalculateOnExit :: Bool
                   -> FormField a0
                   -> IO ()
setCalculateOnExit prop =
  propertySet "CalculateOnExit"
              [inBool prop]

getRange9 :: FormField a0
          -> IO (Range ())
getRange9 =
  propertyGet "Range"
              []
              outIDispatch

select11 :: FormField a0
         -> IO ()
select11 =
  method0 "Select"
          []

copy4 :: FormField a0
      -> IO ()
copy4 =
  method0 "Copy"
          []

cut3 :: FormField a0
     -> IO ()
cut3 =
  method0 "Cut"
          []

delete22 :: FormField a0
         -> IO ()
delete22 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface TextInput
-- 
-- --------------------------------------------------
data TextInput_ a = TextInput__ 
type TextInput a = IDispatch (TextInput_ a)
iidTextInput :: IID (TextInput ())
iidTextInput = mkIID "{00020927-0000-0000-C000-000000000046}"

getApplication74 :: TextInput a0
                 -> IO (Maybe Application)
getApplication74 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator74 :: TextInput a0
             -> IO Int32
getCreator74 =
  propertyGet "Creator"
              []
              outInt32

getParent74 :: TextInput a0
            -> IO (IDispatch ())
getParent74 =
  propertyGet "Parent"
              []
              outIDispatch

getValid :: TextInput a0
         -> IO Bool
getValid =
  propertyGet "Valid"
              []
              outBool

getDefault :: TextInput a0
           -> IO String
getDefault =
  propertyGet "Default"
              []
              outString

setDefault :: String
           -> TextInput a0
           -> IO ()
setDefault prop =
  propertySet "Default"
              [inString prop]

getType6 :: TextInput a0
         -> IO WdTextFormFieldType
getType6 =
  propertyGet "Type"
              []
              outEnum

getFormat2 :: TextInput a0
           -> IO String
getFormat2 =
  propertyGet "Format"
              []
              outString

getWidth7 :: TextInput a0
          -> IO Int32
getWidth7 =
  propertyGet "Width"
              []
              outInt32

setWidth11 :: Int32
           -> TextInput a0
           -> IO ()
setWidth11 prop =
  propertySet "Width"
              [inInt32 prop]

clear1 :: TextInput a0
       -> IO ()
clear1 =
  method0 "Clear"
          []

editType :: (Variant a1, Variant a2, Variant a3)
         => WdTextFormFieldType
         -> a1
         -> a2
         -> a3
         -> TextInput a0
         -> IO ()
editType type0 default0 format enabled =
  method0 "EditType"
          [ inEnum type0
          , inVariant default0
          , inVariant format
          , inVariant enabled
          ]

-- --------------------------------------------------
-- 
-- interface CheckBox
-- 
-- --------------------------------------------------
data CheckBox_ a = CheckBox__ 
type CheckBox a = IDispatch (CheckBox_ a)
iidCheckBox :: IID (CheckBox ())
iidCheckBox = mkIID "{00020926-0000-0000-C000-000000000046}"

getApplication75 :: CheckBox a0
                 -> IO (Maybe Application)
getApplication75 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator75 :: CheckBox a0
             -> IO Int32
getCreator75 =
  propertyGet "Creator"
              []
              outInt32

getParent75 :: CheckBox a0
            -> IO (IDispatch ())
getParent75 =
  propertyGet "Parent"
              []
              outIDispatch

getValid0 :: CheckBox a0
          -> IO Bool
getValid0 =
  propertyGet "Valid"
              []
              outBool

getAutoSize :: CheckBox a0
            -> IO Bool
getAutoSize =
  propertyGet "AutoSize"
              []
              outBool

setAutoSize :: Bool
            -> CheckBox a0
            -> IO ()
setAutoSize prop =
  propertySet "AutoSize"
              [inBool prop]

getSize0 :: CheckBox a0
         -> IO Float
getSize0 =
  propertyGet "Size"
              []
              outFloat

setSize0 :: Float
         -> CheckBox a0
         -> IO ()
setSize0 prop =
  propertySet "Size"
              [inFloat prop]

getDefault0 :: CheckBox a0
            -> IO Bool
getDefault0 =
  propertyGet "Default"
              []
              outBool

setDefault0 :: Bool
            -> CheckBox a0
            -> IO ()
setDefault0 prop =
  propertySet "Default"
              [inBool prop]

getValue2 :: CheckBox a0
          -> IO Bool
getValue2 =
  propertyGet "Value"
              []
              outBool

setValue2 :: Bool
          -> CheckBox a0
          -> IO ()
setValue2 prop =
  propertySet "Value"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface DropDown
-- 
-- --------------------------------------------------
data DropDown_ a = DropDown__ 
type DropDown a = IDispatch (DropDown_ a)
iidDropDown :: IID (DropDown ())
iidDropDown = mkIID "{00020925-0000-0000-C000-000000000046}"

getApplication76 :: DropDown a0
                 -> IO (Maybe Application)
getApplication76 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator76 :: DropDown a0
             -> IO Int32
getCreator76 =
  propertyGet "Creator"
              []
              outInt32

getParent76 :: DropDown a0
            -> IO (IDispatch ())
getParent76 =
  propertyGet "Parent"
              []
              outIDispatch

getValid1 :: DropDown a0
          -> IO Bool
getValid1 =
  propertyGet "Valid"
              []
              outBool

getDefault1 :: DropDown a0
            -> IO Int32
getDefault1 =
  propertyGet "Default"
              []
              outInt32

setDefault1 :: Int32
            -> DropDown a0
            -> IO ()
setDefault1 prop =
  propertySet "Default"
              [inInt32 prop]

getValue3 :: DropDown a0
          -> IO Int32
getValue3 =
  propertyGet "Value"
              []
              outInt32

setValue3 :: Int32
          -> DropDown a0
          -> IO ()
setValue3 prop =
  propertySet "Value"
              [inInt32 prop]

getListEntries :: DropDown a0
               -> IO (ListEntries ())
getListEntries =
  propertyGet "ListEntries"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface ListEntries
-- 
-- --------------------------------------------------
data ListEntries_ a = ListEntries__ 
type ListEntries a = IDispatch (ListEntries_ a)
iidListEntries :: IID (ListEntries ())
iidListEntries = mkIID "{00020924-0000-0000-C000-000000000046}"

getApplication77 :: ListEntries a0
                 -> IO (Maybe Application)
getApplication77 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator77 :: ListEntries a0
             -> IO Int32
getCreator77 =
  propertyGet "Creator"
              []
              outInt32

getParent77 :: ListEntries a0
            -> IO (IDispatch ())
getParent77 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum30 :: ListEntries a0
             -> IO (IUnknown ())
getNewEnum30 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount30 :: ListEntries a0
           -> IO Int32
getCount30 =
  propertyGet "Count"
              []
              outInt32

item30 :: (Variant a1)
       => a1
       -> ListEntries a0
       -> IO (ListEntry ())
item30 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add23 :: (Variant a1)
      => String
      -> a1
      -> ListEntries a0
      -> IO (ListEntry ())
add23 name index =
  function1 "Add"
            [ inString name
            , inVariant index
            ]
            outIUnknown

clear2 :: ListEntries a0
       -> IO ()
clear2 =
  method0 "Clear"
          []

-- --------------------------------------------------
-- 
-- interface ListEntry
-- 
-- --------------------------------------------------
data ListEntry_ a = ListEntry__ 
type ListEntry a = IDispatch (ListEntry_ a)
iidListEntry :: IID (ListEntry ())
iidListEntry = mkIID "{00020923-0000-0000-C000-000000000046}"

getApplication78 :: ListEntry a0
                 -> IO (Maybe Application)
getApplication78 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator78 :: ListEntry a0
             -> IO Int32
getCreator78 =
  propertyGet "Creator"
              []
              outInt32

getParent78 :: ListEntry a0
            -> IO (IDispatch ())
getParent78 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex14 :: ListEntry a0
           -> IO Int32
getIndex14 =
  propertyGet "Index"
              []
              outInt32

getName14 :: ListEntry a0
          -> IO String
getName14 =
  propertyGet "Name"
              []
              outString

setName4 :: String
         -> ListEntry a0
         -> IO ()
setName4 prop =
  propertySet "Name"
              [inString prop]

delete23 :: ListEntry a0
         -> IO ()
delete23 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface TablesOfFigures
-- 
-- --------------------------------------------------
data TablesOfFigures_ a = TablesOfFigures__ 
type TablesOfFigures a = IDispatch (TablesOfFigures_ a)
iidTablesOfFigures :: IID (TablesOfFigures ())
iidTablesOfFigures = mkIID "{00020922-0000-0000-C000-000000000046}"

getApplication79 :: TablesOfFigures a0
                 -> IO (Maybe Application)
getApplication79 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator79 :: TablesOfFigures a0
             -> IO Int32
getCreator79 =
  propertyGet "Creator"
              []
              outInt32

getParent79 :: TablesOfFigures a0
            -> IO (IDispatch ())
getParent79 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum31 :: TablesOfFigures a0
             -> IO (IUnknown ())
getNewEnum31 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount31 :: TablesOfFigures a0
           -> IO Int32
getCount31 =
  propertyGet "Count"
              []
              outInt32

getFormat3 :: TablesOfFigures a0
           -> IO WdTofFormat
getFormat3 =
  propertyGet "Format"
              []
              outEnum

setFormat2 :: WdTofFormat
           -> TablesOfFigures a0
           -> IO ()
setFormat2 prop =
  propertySet "Format"
              [inEnum prop]

item31 :: Int32
       -> TablesOfFigures a0
       -> IO (TableOfFigures ())
item31 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

addOld1 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
        => Range a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> TablesOfFigures a0
        -> IO (TableOfFigures ())
addOld1 range0 caption includeLabel useHeadingStyles upperHeadingLevel lowerHeadingLevel useFields tableID rightAlignPageNumbers includePageNumbers addedStyles =
  function1 "AddOld"
            [ inIDispatch range0
            , inVariant caption
            , inVariant includeLabel
            , inVariant useHeadingStyles
            , inVariant upperHeadingLevel
            , inVariant lowerHeadingLevel
            , inVariant useFields
            , inVariant tableID
            , inVariant rightAlignPageNumbers
            , inVariant includePageNumbers
            , inVariant addedStyles
            ]
            outIUnknown

markEntry :: (Variant a2, Variant a3, Variant a4, Variant a5)
          => Range a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> TablesOfFigures a0
          -> IO (Field ())
markEntry range0 entry entryAutoText tableID level =
  function1 "MarkEntry"
            [ inIDispatch range0
            , inVariant entry
            , inVariant entryAutoText
            , inVariant tableID
            , inVariant level
            ]
            outIDispatch

add24 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
      => Range a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> TablesOfFigures a0
      -> IO (TableOfFigures ())
add24 range0 caption includeLabel useHeadingStyles upperHeadingLevel lowerHeadingLevel useFields tableID rightAlignPageNumbers includePageNumbers addedStyles useHyperlinks hidePageNumbersInWeb =
  function1 "Add"
            [ inIDispatch range0
            , inVariant caption
            , inVariant includeLabel
            , inVariant useHeadingStyles
            , inVariant upperHeadingLevel
            , inVariant lowerHeadingLevel
            , inVariant useFields
            , inVariant tableID
            , inVariant rightAlignPageNumbers
            , inVariant includePageNumbers
            , inVariant addedStyles
            , inVariant useHyperlinks
            , inVariant hidePageNumbersInWeb
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface TableOfFigures
-- 
-- --------------------------------------------------
data TableOfFigures_ a = TableOfFigures__ 
type TableOfFigures a = IDispatch (TableOfFigures_ a)
iidTableOfFigures :: IID (TableOfFigures ())
iidTableOfFigures = mkIID "{00020921-0000-0000-C000-000000000046}"

getApplication80 :: TableOfFigures a0
                 -> IO (Maybe Application)
getApplication80 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator80 :: TableOfFigures a0
             -> IO Int32
getCreator80 =
  propertyGet "Creator"
              []
              outInt32

getParent80 :: TableOfFigures a0
            -> IO (IDispatch ())
getParent80 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption1 :: TableOfFigures a0
            -> IO String
getCaption1 =
  propertyGet "Caption"
              []
              outString

setCaption1 :: String
            -> TableOfFigures a0
            -> IO ()
setCaption1 prop =
  propertySet "Caption"
              [inString prop]

getIncludeLabel :: TableOfFigures a0
                -> IO Bool
getIncludeLabel =
  propertyGet "IncludeLabel"
              []
              outBool

setIncludeLabel :: Bool
                -> TableOfFigures a0
                -> IO ()
setIncludeLabel prop =
  propertySet "IncludeLabel"
              [inBool prop]

getRightAlignPageNumbers :: TableOfFigures a0
                         -> IO Bool
getRightAlignPageNumbers =
  propertyGet "RightAlignPageNumbers"
              []
              outBool

setRightAlignPageNumbers :: Bool
                         -> TableOfFigures a0
                         -> IO ()
setRightAlignPageNumbers prop =
  propertySet "RightAlignPageNumbers"
              [inBool prop]

getUseHeadingStyles :: TableOfFigures a0
                    -> IO Bool
getUseHeadingStyles =
  propertyGet "UseHeadingStyles"
              []
              outBool

setUseHeadingStyles :: Bool
                    -> TableOfFigures a0
                    -> IO ()
setUseHeadingStyles prop =
  propertySet "UseHeadingStyles"
              [inBool prop]

getLowerHeadingLevel :: TableOfFigures a0
                     -> IO Int32
getLowerHeadingLevel =
  propertyGet "LowerHeadingLevel"
              []
              outInt32

setLowerHeadingLevel :: Int32
                     -> TableOfFigures a0
                     -> IO ()
setLowerHeadingLevel prop =
  propertySet "LowerHeadingLevel"
              [inInt32 prop]

getUpperHeadingLevel :: TableOfFigures a0
                     -> IO Int32
getUpperHeadingLevel =
  propertyGet "UpperHeadingLevel"
              []
              outInt32

setUpperHeadingLevel :: Int32
                     -> TableOfFigures a0
                     -> IO ()
setUpperHeadingLevel prop =
  propertySet "UpperHeadingLevel"
              [inInt32 prop]

getIncludePageNumbers :: TableOfFigures a0
                      -> IO Bool
getIncludePageNumbers =
  propertyGet "IncludePageNumbers"
              []
              outBool

setIncludePageNumbers :: Bool
                      -> TableOfFigures a0
                      -> IO ()
setIncludePageNumbers prop =
  propertySet "IncludePageNumbers"
              [inBool prop]

getRange10 :: TableOfFigures a0
           -> IO (Range ())
getRange10 =
  propertyGet "Range"
              []
              outIDispatch

getUseFields :: TableOfFigures a0
             -> IO Bool
getUseFields =
  propertyGet "UseFields"
              []
              outBool

setUseFields :: Bool
             -> TableOfFigures a0
             -> IO ()
setUseFields prop =
  propertySet "UseFields"
              [inBool prop]

getTableID :: TableOfFigures a0
           -> IO String
getTableID =
  propertyGet "TableID"
              []
              outString

setTableID :: String
           -> TableOfFigures a0
           -> IO ()
setTableID prop =
  propertySet "TableID"
              [inString prop]

getHeadingStyles :: TableOfFigures a0
                 -> IO (HeadingStyles ())
getHeadingStyles =
  propertyGet "HeadingStyles"
              []
              outIUnknown

getTabLeader :: TableOfFigures a0
             -> IO WdTabLeader
getTabLeader =
  propertyGet "TabLeader"
              []
              outEnum

setTabLeader :: WdTabLeader
             -> TableOfFigures a0
             -> IO ()
setTabLeader prop =
  propertySet "TabLeader"
              [inEnum prop]

delete24 :: TableOfFigures a0
         -> IO ()
delete24 =
  method0 "Delete"
          []

updatePageNumbers :: TableOfFigures a0
                  -> IO ()
updatePageNumbers =
  method0 "UpdatePageNumbers"
          []

update2 :: TableOfFigures a0
        -> IO ()
update2 =
  method0 "Update"
          []

getUseHyperlinks :: TableOfFigures a0
                 -> IO Bool
getUseHyperlinks =
  propertyGet "UseHyperlinks"
              []
              outBool

setUseHyperlinks :: Bool
                 -> TableOfFigures a0
                 -> IO ()
setUseHyperlinks prop =
  propertySet "UseHyperlinks"
              [inBool prop]

getHidePageNumbersInWeb :: TableOfFigures a0
                        -> IO Bool
getHidePageNumbersInWeb =
  propertyGet "HidePageNumbersInWeb"
              []
              outBool

setHidePageNumbersInWeb :: Bool
                        -> TableOfFigures a0
                        -> IO ()
setHidePageNumbersInWeb prop =
  propertySet "HidePageNumbersInWeb"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface MailMerge
-- 
-- --------------------------------------------------
data MailMerge_ a = MailMerge__ 
type MailMerge a = IDispatch (MailMerge_ a)
iidMailMerge :: IID (MailMerge ())
iidMailMerge = mkIID "{00020920-0000-0000-C000-000000000046}"

getApplication81 :: MailMerge a0
                 -> IO (Maybe Application)
getApplication81 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator81 :: MailMerge a0
             -> IO Int32
getCreator81 =
  propertyGet "Creator"
              []
              outInt32

getParent81 :: MailMerge a0
            -> IO (IDispatch ())
getParent81 =
  propertyGet "Parent"
              []
              outIDispatch

getMainDocumentType :: MailMerge a0
                    -> IO WdMailMergeMainDocType
getMainDocumentType =
  propertyGet "MainDocumentType"
              []
              outEnum

setMainDocumentType :: WdMailMergeMainDocType
                    -> MailMerge a0
                    -> IO ()
setMainDocumentType prop =
  propertySet "MainDocumentType"
              [inEnum prop]

getState :: MailMerge a0
         -> IO WdMailMergeState
getState =
  propertyGet "State"
              []
              outEnum

getDestination :: MailMerge a0
               -> IO WdMailMergeDestination
getDestination =
  propertyGet "Destination"
              []
              outEnum

setDestination :: WdMailMergeDestination
               -> MailMerge a0
               -> IO ()
setDestination prop =
  propertySet "Destination"
              [inEnum prop]

getDataSource :: MailMerge a0
              -> IO (MailMergeDataSource ())
getDataSource =
  propertyGet "DataSource"
              []
              outIUnknown

getFields1 :: MailMerge a0
           -> IO (MailMergeFields ())
getFields1 =
  propertyGet "Fields"
              []
              outIUnknown

getViewMailMergeFieldCodes :: MailMerge a0
                           -> IO Int32
getViewMailMergeFieldCodes =
  propertyGet "ViewMailMergeFieldCodes"
              []
              outInt32

setViewMailMergeFieldCodes :: Int32
                           -> MailMerge a0
                           -> IO ()
setViewMailMergeFieldCodes prop =
  propertySet "ViewMailMergeFieldCodes"
              [inInt32 prop]

getSuppressBlankLines :: MailMerge a0
                      -> IO Bool
getSuppressBlankLines =
  propertyGet "SuppressBlankLines"
              []
              outBool

setSuppressBlankLines :: Bool
                      -> MailMerge a0
                      -> IO ()
setSuppressBlankLines prop =
  propertySet "SuppressBlankLines"
              [inBool prop]

getMailAsAttachment :: MailMerge a0
                    -> IO Bool
getMailAsAttachment =
  propertyGet "MailAsAttachment"
              []
              outBool

setMailAsAttachment :: Bool
                    -> MailMerge a0
                    -> IO ()
setMailAsAttachment prop =
  propertySet "MailAsAttachment"
              [inBool prop]

getMailAddressFieldName :: MailMerge a0
                        -> IO String
getMailAddressFieldName =
  propertyGet "MailAddressFieldName"
              []
              outString

setMailAddressFieldName :: String
                        -> MailMerge a0
                        -> IO ()
setMailAddressFieldName prop =
  propertySet "MailAddressFieldName"
              [inString prop]

getMailSubject :: MailMerge a0
               -> IO String
getMailSubject =
  propertyGet "MailSubject"
              []
              outString

setMailSubject :: String
               -> MailMerge a0
               -> IO ()
setMailSubject prop =
  propertySet "MailSubject"
              [inString prop]

createDataSource :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> MailMerge a0
                 -> IO ()
createDataSource name passwordDocument writePasswordDocument headerRecord mSQuery sQLStatement sQLStatement1 connection linkToSource =
  method0 "CreateDataSource"
          [ inVariant name
          , inVariant passwordDocument
          , inVariant writePasswordDocument
          , inVariant headerRecord
          , inVariant mSQuery
          , inVariant sQLStatement
          , inVariant sQLStatement1
          , inVariant connection
          , inVariant linkToSource
          ]

createHeaderSource :: (Variant a1, Variant a2, Variant a3)
                   => String
                   -> a1
                   -> a2
                   -> a3
                   -> MailMerge a0
                   -> IO ()
createHeaderSource name passwordDocument writePasswordDocument headerRecord =
  method0 "CreateHeaderSource"
          [ inString name
          , inVariant passwordDocument
          , inVariant writePasswordDocument
          , inVariant headerRecord
          ]

openDataSource2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13)
                   => String
                   -> a1
                   -> a2
                   -> a3
                   -> a4
                   -> a5
                   -> a6
                   -> a7
                   -> a8
                   -> a9
                   -> a10
                   -> a11
                   -> a12
                   -> a13
                   -> MailMerge a0
                   -> IO ()
openDataSource2000 name format confirmConversions readOnly linkToSource addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate connection sQLStatement sQLStatement1 =
  method0 "OpenDataSource2000"
          [ inString name
          , inVariant format
          , inVariant confirmConversions
          , inVariant readOnly
          , inVariant linkToSource
          , inVariant addToRecentFiles
          , inVariant passwordDocument
          , inVariant passwordTemplate
          , inVariant revert
          , inVariant writePasswordDocument
          , inVariant writePasswordTemplate
          , inVariant connection
          , inVariant sQLStatement
          , inVariant sQLStatement1
          ]

openHeaderSource2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
                     => String
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> MailMerge a0
                     -> IO ()
openHeaderSource2000 name format confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate =
  method0 "OpenHeaderSource2000"
          [ inString name
          , inVariant format
          , inVariant confirmConversions
          , inVariant readOnly
          , inVariant addToRecentFiles
          , inVariant passwordDocument
          , inVariant passwordTemplate
          , inVariant revert
          , inVariant writePasswordDocument
          , inVariant writePasswordTemplate
          ]

execute0 :: (Variant a1)
         => a1
         -> MailMerge a0
         -> IO ()
execute0 pause =
  method0 "Execute"
          [inVariant pause]

check :: MailMerge a0
      -> IO ()
check =
  method0 "Check"
          []

editDataSource :: MailMerge a0
               -> IO ()
editDataSource =
  method0 "EditDataSource"
          []

editHeaderSource :: MailMerge a0
                 -> IO ()
editHeaderSource =
  method0 "EditHeaderSource"
          []

editMainDocument :: MailMerge a0
                 -> IO ()
editMainDocument =
  method0 "EditMainDocument"
          []

useAddressBook :: String
               -> MailMerge a0
               -> IO ()
useAddressBook type0 =
  method0 "UseAddressBook"
          [inString type0]

getHighlightMergeFields :: MailMerge a0
                        -> IO Bool
getHighlightMergeFields =
  propertyGet "HighlightMergeFields"
              []
              outBool

setHighlightMergeFields :: Bool
                        -> MailMerge a0
                        -> IO ()
setHighlightMergeFields prop =
  propertySet "HighlightMergeFields"
              [inBool prop]

getMailFormat :: MailMerge a0
              -> IO WdMailMergeMailFormat
getMailFormat =
  propertyGet "MailFormat"
              []
              outEnum

setMailFormat :: WdMailMergeMailFormat
              -> MailMerge a0
              -> IO ()
setMailFormat prop =
  propertySet "MailFormat"
              [inEnum prop]

getShowSendToCustom :: MailMerge a0
                    -> IO String
getShowSendToCustom =
  propertyGet "ShowSendToCustom"
              []
              outString

setShowSendToCustom :: String
                    -> MailMerge a0
                    -> IO ()
setShowSendToCustom prop =
  propertySet "ShowSendToCustom"
              [inString prop]

getWizardState :: MailMerge a0
               -> IO Int32
getWizardState =
  propertyGet "WizardState"
              []
              outInt32

setWizardState :: Int32
               -> MailMerge a0
               -> IO ()
setWizardState prop =
  propertySet "WizardState"
              [inInt32 prop]

openDataSource :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15)
               => String
               -> a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> a9
               -> a10
               -> a11
               -> a12
               -> a13
               -> a14
               -> a15
               -> MailMerge a0
               -> IO ()
openDataSource name format confirmConversions readOnly linkToSource addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate connection sQLStatement sQLStatement1 openExclusive subType =
  method0 "OpenDataSource"
          [ inString name
          , inVariant format
          , inVariant confirmConversions
          , inVariant readOnly
          , inVariant linkToSource
          , inVariant addToRecentFiles
          , inVariant passwordDocument
          , inVariant passwordTemplate
          , inVariant revert
          , inVariant writePasswordDocument
          , inVariant writePasswordTemplate
          , inVariant connection
          , inVariant sQLStatement
          , inVariant sQLStatement1
          , inVariant openExclusive
          , inVariant subType
          ]

openHeaderSource :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
                 => String
                 -> a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> MailMerge a0
                 -> IO ()
openHeaderSource name format confirmConversions readOnly addToRecentFiles passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate openExclusive =
  method0 "OpenHeaderSource"
          [ inString name
          , inVariant format
          , inVariant confirmConversions
          , inVariant readOnly
          , inVariant addToRecentFiles
          , inVariant passwordDocument
          , inVariant passwordTemplate
          , inVariant revert
          , inVariant writePasswordDocument
          , inVariant writePasswordTemplate
          , inVariant openExclusive
          ]

showWizard :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> MailMerge a0
           -> IO ()
showWizard initialState showDocumentStep showTemplateStep showDataStep showWriteStep showPreviewStep showMergeStep =
  method0 "ShowWizard"
          [ inVariant initialState
          , inVariant showDocumentStep
          , inVariant showTemplateStep
          , inVariant showDataStep
          , inVariant showWriteStep
          , inVariant showPreviewStep
          , inVariant showMergeStep
          ]

-- --------------------------------------------------
-- 
-- interface MailMergeFields
-- 
-- --------------------------------------------------
data MailMergeFields_ a = MailMergeFields__ 
type MailMergeFields a = IDispatch (MailMergeFields_ a)
iidMailMergeFields :: IID (MailMergeFields ())
iidMailMergeFields = mkIID "{0002091F-0000-0000-C000-000000000046}"

getApplication82 :: MailMergeFields a0
                 -> IO (Maybe Application)
getApplication82 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator82 :: MailMergeFields a0
             -> IO Int32
getCreator82 =
  propertyGet "Creator"
              []
              outInt32

getParent82 :: MailMergeFields a0
            -> IO (IDispatch ())
getParent82 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum32 :: MailMergeFields a0
             -> IO (IUnknown ())
getNewEnum32 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount32 :: MailMergeFields a0
           -> IO Int32
getCount32 =
  propertyGet "Count"
              []
              outInt32

item32 :: Int32
       -> MailMergeFields a0
       -> IO (MailMergeField ())
item32 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add25 :: Range a1
      -> String
      -> MailMergeFields a0
      -> IO (MailMergeField ())
add25 range0 name =
  function1 "Add"
            [ inIDispatch range0
            , inString name
            ]
            outIUnknown

addAsk :: (Variant a2, Variant a3, Variant a4)
       => Range a1
       -> String
       -> a2
       -> a3
       -> a4
       -> MailMergeFields a0
       -> IO (MailMergeField ())
addAsk range0 name prompt defaultAskText askOnce =
  function1 "AddAsk"
            [ inIDispatch range0
            , inString name
            , inVariant prompt
            , inVariant defaultAskText
            , inVariant askOnce
            ]
            outIUnknown

addFillIn :: (Variant a2, Variant a3, Variant a4)
          => Range a1
          -> a2
          -> a3
          -> a4
          -> MailMergeFields a0
          -> IO (MailMergeField ())
addFillIn range0 prompt defaultFillInText askOnce =
  function1 "AddFillIn"
            [ inIDispatch range0
            , inVariant prompt
            , inVariant defaultFillInText
            , inVariant askOnce
            ]
            outIUnknown

addIf :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
      => Range a1
      -> String
      -> WdMailMergeComparison
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> MailMergeFields a0
      -> IO (MailMergeField ())
addIf range0 mergeField comparison compareTo trueAutoText trueText falseAutoText falseText =
  function1 "AddIf"
            [ inIDispatch range0
            , inString mergeField
            , inEnum comparison
            , inVariant compareTo
            , inVariant trueAutoText
            , inVariant trueText
            , inVariant falseAutoText
            , inVariant falseText
            ]
            outIUnknown

addMergeRec :: Range a1
            -> MailMergeFields a0
            -> IO (MailMergeField ())
addMergeRec range0 =
  function1 "AddMergeRec"
            [inIDispatch range0]
            outIUnknown

addMergeSeq :: Range a1
            -> MailMergeFields a0
            -> IO (MailMergeField ())
addMergeSeq range0 =
  function1 "AddMergeSeq"
            [inIDispatch range0]
            outIUnknown

addNext :: Range a1
        -> MailMergeFields a0
        -> IO (MailMergeField ())
addNext range0 =
  function1 "AddNext"
            [inIDispatch range0]
            outIUnknown

addNextIf :: (Variant a2)
          => Range a1
          -> String
          -> WdMailMergeComparison
          -> a2
          -> MailMergeFields a0
          -> IO (MailMergeField ())
addNextIf range0 mergeField comparison compareTo =
  function1 "AddNextIf"
            [ inIDispatch range0
            , inString mergeField
            , inEnum comparison
            , inVariant compareTo
            ]
            outIUnknown

addSet :: (Variant a2, Variant a3)
       => Range a1
       -> String
       -> a2
       -> a3
       -> MailMergeFields a0
       -> IO (MailMergeField ())
addSet range0 name valueText valueAutoText =
  function1 "AddSet"
            [ inIDispatch range0
            , inString name
            , inVariant valueText
            , inVariant valueAutoText
            ]
            outIUnknown

addSkipIf :: (Variant a2)
          => Range a1
          -> String
          -> WdMailMergeComparison
          -> a2
          -> MailMergeFields a0
          -> IO (MailMergeField ())
addSkipIf range0 mergeField comparison compareTo =
  function1 "AddSkipIf"
            [ inIDispatch range0
            , inString mergeField
            , inEnum comparison
            , inVariant compareTo
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface MailMergeField
-- 
-- --------------------------------------------------
data MailMergeField_ a = MailMergeField__ 
type MailMergeField a = IDispatch (MailMergeField_ a)
iidMailMergeField :: IID (MailMergeField ())
iidMailMergeField = mkIID "{0002091E-0000-0000-C000-000000000046}"

getApplication83 :: MailMergeField a0
                 -> IO (Maybe Application)
getApplication83 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator83 :: MailMergeField a0
             -> IO Int32
getCreator83 =
  propertyGet "Creator"
              []
              outInt32

getParent83 :: MailMergeField a0
            -> IO (IDispatch ())
getParent83 =
  propertyGet "Parent"
              []
              outIDispatch

getType7 :: MailMergeField a0
         -> IO WdFieldType
getType7 =
  propertyGet "Type"
              []
              outEnum

getLocked3 :: MailMergeField a0
           -> IO Bool
getLocked3 =
  propertyGet "Locked"
              []
              outBool

setLocked3 :: Bool
           -> MailMergeField a0
           -> IO ()
setLocked3 prop =
  propertySet "Locked"
              [inBool prop]

getCode0 :: MailMergeField a0
         -> IO (Range ())
getCode0 =
  propertyGet "Code"
              []
              outIDispatch

setCode0 :: Range a1
         -> MailMergeField a0
         -> IO ()
setCode0 prop =
  propertySet "Code"
              [inIDispatch prop]

getNext7 :: MailMergeField a0
         -> IO (MailMergeField ())
getNext7 =
  propertyGet "Next"
              []
              outIDispatch

getPrevious7 :: MailMergeField a0
             -> IO (MailMergeField ())
getPrevious7 =
  propertyGet "Previous"
              []
              outIDispatch

select12 :: MailMergeField a0
         -> IO ()
select12 =
  method0 "Select"
          []

copy5 :: MailMergeField a0
      -> IO ()
copy5 =
  method0 "Copy"
          []

cut4 :: MailMergeField a0
     -> IO ()
cut4 =
  method0 "Cut"
          []

delete25 :: MailMergeField a0
         -> IO ()
delete25 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface MailMergeDataSource
-- 
-- --------------------------------------------------
data MailMergeDataSource_ a = MailMergeDataSource__ 
type MailMergeDataSource a = IDispatch (MailMergeDataSource_ a)
iidMailMergeDataSource :: IID (MailMergeDataSource ())
iidMailMergeDataSource =
  mkIID "{0002091D-0000-0000-C000-000000000046}"

getApplication84 :: MailMergeDataSource a0
                 -> IO (Maybe Application)
getApplication84 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator84 :: MailMergeDataSource a0
             -> IO Int32
getCreator84 =
  propertyGet "Creator"
              []
              outInt32

getParent84 :: MailMergeDataSource a0
            -> IO (IDispatch ())
getParent84 =
  propertyGet "Parent"
              []
              outIDispatch

getName15 :: MailMergeDataSource a0
          -> IO String
getName15 =
  propertyGet "Name"
              []
              outString

getHeaderSourceName :: MailMergeDataSource a0
                    -> IO String
getHeaderSourceName =
  propertyGet "HeaderSourceName"
              []
              outString

getType8 :: MailMergeDataSource a0
         -> IO WdMailMergeDataSource
getType8 =
  propertyGet "Type"
              []
              outEnum

getHeaderSourceType :: MailMergeDataSource a0
                    -> IO WdMailMergeDataSource
getHeaderSourceType =
  propertyGet "HeaderSourceType"
              []
              outEnum

getConnectString :: MailMergeDataSource a0
                 -> IO String
getConnectString =
  propertyGet "ConnectString"
              []
              outString

getQueryString :: MailMergeDataSource a0
               -> IO String
getQueryString =
  propertyGet "QueryString"
              []
              outString

setQueryString :: String
               -> MailMergeDataSource a0
               -> IO ()
setQueryString prop =
  propertySet "QueryString"
              [inString prop]

getActiveRecord :: MailMergeDataSource a0
                -> IO WdMailMergeActiveRecord
getActiveRecord =
  propertyGet "ActiveRecord"
              []
              outEnum

setActiveRecord :: WdMailMergeActiveRecord
                -> MailMergeDataSource a0
                -> IO ()
setActiveRecord prop =
  propertySet "ActiveRecord"
              [inEnum prop]

getFirstRecord :: MailMergeDataSource a0
               -> IO Int32
getFirstRecord =
  propertyGet "FirstRecord"
              []
              outInt32

setFirstRecord :: Int32
               -> MailMergeDataSource a0
               -> IO ()
setFirstRecord prop =
  propertySet "FirstRecord"
              [inInt32 prop]

getLastRecord :: MailMergeDataSource a0
              -> IO Int32
getLastRecord =
  propertyGet "LastRecord"
              []
              outInt32

setLastRecord :: Int32
              -> MailMergeDataSource a0
              -> IO ()
setLastRecord prop =
  propertySet "LastRecord"
              [inInt32 prop]

getFieldNames :: MailMergeDataSource a0
              -> IO (MailMergeFieldNames ())
getFieldNames =
  propertyGet "FieldNames"
              []
              outIUnknown

getDataFields :: MailMergeDataSource a0
              -> IO (MailMergeDataFields ())
getDataFields =
  propertyGet "DataFields"
              []
              outIUnknown

findRecord2000 :: String
               -> String
               -> MailMergeDataSource a0
               -> IO Bool
findRecord2000 findText field =
  function1 "FindRecord2000"
            [ inString findText
            , inString field
            ]
            outBool

getRecordCount :: MailMergeDataSource a0
               -> IO Int32
getRecordCount =
  propertyGet "RecordCount"
              []
              outInt32

getIncluded :: MailMergeDataSource a0
            -> IO Bool
getIncluded =
  propertyGet "Included"
              []
              outBool

setIncluded :: Bool
            -> MailMergeDataSource a0
            -> IO ()
setIncluded prop =
  propertySet "Included"
              [inBool prop]

getInvalidAddress :: MailMergeDataSource a0
                  -> IO Bool
getInvalidAddress =
  propertyGet "InvalidAddress"
              []
              outBool

setInvalidAddress :: Bool
                  -> MailMergeDataSource a0
                  -> IO ()
setInvalidAddress prop =
  propertySet "InvalidAddress"
              [inBool prop]

getInvalidComments :: MailMergeDataSource a0
                   -> IO String
getInvalidComments =
  propertyGet "InvalidComments"
              []
              outString

setInvalidComments :: String
                   -> MailMergeDataSource a0
                   -> IO ()
setInvalidComments prop =
  propertySet "InvalidComments"
              [inString prop]

getMappedDataFields :: MailMergeDataSource a0
                    -> IO (MappedDataFields ())
getMappedDataFields =
  propertyGet "MappedDataFields"
              []
              outIUnknown

getTableName :: MailMergeDataSource a0
             -> IO String
getTableName =
  propertyGet "TableName"
              []
              outString

findRecord :: (Variant a1)
           => String
           -> a1
           -> MailMergeDataSource a0
           -> IO Bool
findRecord findText field =
  function1 "FindRecord"
            [ inString findText
            , inVariant field
            ]
            outBool

setAllIncludedFlags :: Bool
                    -> MailMergeDataSource a0
                    -> IO ()
setAllIncludedFlags included =
  method0 "SetAllIncludedFlags"
          [inBool included]

setAllErrorFlags :: Bool
                 -> String
                 -> MailMergeDataSource a0
                 -> IO ()
setAllErrorFlags invalid invalidComment =
  method0 "SetAllErrorFlags"
          [ inBool invalid
          , inString invalidComment
          ]

close3 :: MailMergeDataSource a0
       -> IO ()
close3 =
  method0 "Close"
          []

-- --------------------------------------------------
-- 
-- interface MailMergeFieldNames
-- 
-- --------------------------------------------------
data MailMergeFieldNames_ a = MailMergeFieldNames__ 
type MailMergeFieldNames a = IDispatch (MailMergeFieldNames_ a)
iidMailMergeFieldNames :: IID (MailMergeFieldNames ())
iidMailMergeFieldNames =
  mkIID "{0002091C-0000-0000-C000-000000000046}"

getApplication85 :: MailMergeFieldNames a0
                 -> IO (Maybe Application)
getApplication85 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator85 :: MailMergeFieldNames a0
             -> IO Int32
getCreator85 =
  propertyGet "Creator"
              []
              outInt32

getParent85 :: MailMergeFieldNames a0
            -> IO (IDispatch ())
getParent85 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum33 :: MailMergeFieldNames a0
             -> IO (IUnknown ())
getNewEnum33 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount33 :: MailMergeFieldNames a0
           -> IO Int32
getCount33 =
  propertyGet "Count"
              []
              outInt32

item33 :: (Variant a1)
       => a1
       -> MailMergeFieldNames a0
       -> IO (MailMergeFieldName ())
item33 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface MailMergeFieldName
-- 
-- --------------------------------------------------
data MailMergeFieldName_ a = MailMergeFieldName__ 
type MailMergeFieldName a = IDispatch (MailMergeFieldName_ a)
iidMailMergeFieldName :: IID (MailMergeFieldName ())
iidMailMergeFieldName =
  mkIID "{0002091B-0000-0000-C000-000000000046}"

getApplication86 :: MailMergeFieldName a0
                 -> IO (Maybe Application)
getApplication86 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator86 :: MailMergeFieldName a0
             -> IO Int32
getCreator86 =
  propertyGet "Creator"
              []
              outInt32

getParent86 :: MailMergeFieldName a0
            -> IO (IDispatch ())
getParent86 =
  propertyGet "Parent"
              []
              outIDispatch

getName16 :: MailMergeFieldName a0
          -> IO String
getName16 =
  propertyGet "Name"
              []
              outString

getIndex15 :: MailMergeFieldName a0
           -> IO Int32
getIndex15 =
  propertyGet "Index"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface MailMergeDataFields
-- 
-- --------------------------------------------------
data MailMergeDataFields_ a = MailMergeDataFields__ 
type MailMergeDataFields a = IDispatch (MailMergeDataFields_ a)
iidMailMergeDataFields :: IID (MailMergeDataFields ())
iidMailMergeDataFields =
  mkIID "{0002091A-0000-0000-C000-000000000046}"

getApplication87 :: MailMergeDataFields a0
                 -> IO (Maybe Application)
getApplication87 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator87 :: MailMergeDataFields a0
             -> IO Int32
getCreator87 =
  propertyGet "Creator"
              []
              outInt32

getParent87 :: MailMergeDataFields a0
            -> IO (IDispatch ())
getParent87 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum34 :: MailMergeDataFields a0
             -> IO (IUnknown ())
getNewEnum34 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount34 :: MailMergeDataFields a0
           -> IO Int32
getCount34 =
  propertyGet "Count"
              []
              outInt32

item34 :: (Variant a1)
       => a1
       -> MailMergeDataFields a0
       -> IO (MailMergeDataField ())
item34 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface MailMergeDataField
-- 
-- --------------------------------------------------
data MailMergeDataField_ a = MailMergeDataField__ 
type MailMergeDataField a = IDispatch (MailMergeDataField_ a)
iidMailMergeDataField :: IID (MailMergeDataField ())
iidMailMergeDataField =
  mkIID "{00020919-0000-0000-C000-000000000046}"

getApplication88 :: MailMergeDataField a0
                 -> IO (Maybe Application)
getApplication88 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator88 :: MailMergeDataField a0
             -> IO Int32
getCreator88 =
  propertyGet "Creator"
              []
              outInt32

getParent88 :: MailMergeDataField a0
            -> IO (IDispatch ())
getParent88 =
  propertyGet "Parent"
              []
              outIDispatch

getValue4 :: MailMergeDataField a0
          -> IO String
getValue4 =
  propertyGet "Value"
              []
              outString

getName17 :: MailMergeDataField a0
          -> IO String
getName17 =
  propertyGet "Name"
              []
              outString

getIndex16 :: MailMergeDataField a0
           -> IO Int32
getIndex16 =
  propertyGet "Index"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Envelope
-- 
-- --------------------------------------------------
data Envelope_ a = Envelope__ 
type Envelope a = IDispatch (Envelope_ a)
iidEnvelope :: IID (Envelope ())
iidEnvelope = mkIID "{00020918-0000-0000-C000-000000000046}"

getApplication89 :: Envelope a0
                 -> IO (Maybe Application)
getApplication89 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator89 :: Envelope a0
             -> IO Int32
getCreator89 =
  propertyGet "Creator"
              []
              outInt32

getParent89 :: Envelope a0
            -> IO (IDispatch ())
getParent89 =
  propertyGet "Parent"
              []
              outIDispatch

getAddress0 :: Envelope a0
            -> IO (Range ())
getAddress0 =
  propertyGet "Address"
              []
              outIDispatch

getReturnAddress :: Envelope a0
                 -> IO (Range ())
getReturnAddress =
  propertyGet "ReturnAddress"
              []
              outIDispatch

getDefaultPrintBarCode :: Envelope a0
                       -> IO Bool
getDefaultPrintBarCode =
  propertyGet "DefaultPrintBarCode"
              []
              outBool

setDefaultPrintBarCode :: Bool
                       -> Envelope a0
                       -> IO ()
setDefaultPrintBarCode prop =
  propertySet "DefaultPrintBarCode"
              [inBool prop]

getDefaultPrintFIMA :: Envelope a0
                    -> IO Bool
getDefaultPrintFIMA =
  propertyGet "DefaultPrintFIMA"
              []
              outBool

setDefaultPrintFIMA :: Bool
                    -> Envelope a0
                    -> IO ()
setDefaultPrintFIMA prop =
  propertySet "DefaultPrintFIMA"
              [inBool prop]

getDefaultHeight :: Envelope a0
                 -> IO Float
getDefaultHeight =
  propertyGet "DefaultHeight"
              []
              outFloat

setDefaultHeight :: Float
                 -> Envelope a0
                 -> IO ()
setDefaultHeight prop =
  propertySet "DefaultHeight"
              [inFloat prop]

getDefaultWidth :: Envelope a0
                -> IO Float
getDefaultWidth =
  propertyGet "DefaultWidth"
              []
              outFloat

setDefaultWidth :: Float
                -> Envelope a0
                -> IO ()
setDefaultWidth prop =
  propertySet "DefaultWidth"
              [inFloat prop]

getDefaultSize :: Envelope a0
               -> IO String
getDefaultSize =
  propertyGet "DefaultSize"
              []
              outString

setDefaultSize :: String
               -> Envelope a0
               -> IO ()
setDefaultSize prop =
  propertySet "DefaultSize"
              [inString prop]

getDefaultOmitReturnAddress :: Envelope a0
                            -> IO Bool
getDefaultOmitReturnAddress =
  propertyGet "DefaultOmitReturnAddress"
              []
              outBool

setDefaultOmitReturnAddress :: Bool
                            -> Envelope a0
                            -> IO ()
setDefaultOmitReturnAddress prop =
  propertySet "DefaultOmitReturnAddress"
              [inBool prop]

getFeedSource :: Envelope a0
              -> IO WdPaperTray
getFeedSource =
  propertyGet "FeedSource"
              []
              outEnum

setFeedSource :: WdPaperTray
              -> Envelope a0
              -> IO ()
setFeedSource prop =
  propertySet "FeedSource"
              [inEnum prop]

getAddressFromLeft :: Envelope a0
                   -> IO Float
getAddressFromLeft =
  propertyGet "AddressFromLeft"
              []
              outFloat

setAddressFromLeft :: Float
                   -> Envelope a0
                   -> IO ()
setAddressFromLeft prop =
  propertySet "AddressFromLeft"
              [inFloat prop]

getAddressFromTop :: Envelope a0
                  -> IO Float
getAddressFromTop =
  propertyGet "AddressFromTop"
              []
              outFloat

setAddressFromTop :: Float
                  -> Envelope a0
                  -> IO ()
setAddressFromTop prop =
  propertySet "AddressFromTop"
              [inFloat prop]

getReturnAddressFromLeft :: Envelope a0
                         -> IO Float
getReturnAddressFromLeft =
  propertyGet "ReturnAddressFromLeft"
              []
              outFloat

setReturnAddressFromLeft :: Float
                         -> Envelope a0
                         -> IO ()
setReturnAddressFromLeft prop =
  propertySet "ReturnAddressFromLeft"
              [inFloat prop]

getReturnAddressFromTop :: Envelope a0
                        -> IO Float
getReturnAddressFromTop =
  propertyGet "ReturnAddressFromTop"
              []
              outFloat

setReturnAddressFromTop :: Float
                        -> Envelope a0
                        -> IO ()
setReturnAddressFromTop prop =
  propertySet "ReturnAddressFromTop"
              [inFloat prop]

getAddressStyle :: Envelope a0
                -> IO (Style ())
getAddressStyle =
  propertyGet "AddressStyle"
              []
              outIDispatch

getReturnAddressStyle :: Envelope a0
                      -> IO (Style ())
getReturnAddressStyle =
  propertyGet "ReturnAddressStyle"
              []
              outIDispatch

getDefaultOrientation :: Envelope a0
                      -> IO WdEnvelopeOrientation
getDefaultOrientation =
  propertyGet "DefaultOrientation"
              []
              outEnum

setDefaultOrientation :: WdEnvelopeOrientation
                      -> Envelope a0
                      -> IO ()
setDefaultOrientation prop =
  propertySet "DefaultOrientation"
              [inEnum prop]

getDefaultFaceUp :: Envelope a0
                 -> IO Bool
getDefaultFaceUp =
  propertyGet "DefaultFaceUp"
              []
              outBool

setDefaultFaceUp :: Bool
                 -> Envelope a0
                 -> IO ()
setDefaultFaceUp prop =
  propertySet "DefaultFaceUp"
              [inBool prop]

insert2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18)
           => a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> a10
           -> a11
           -> a12
           -> a13
           -> a14
           -> a15
           -> a16
           -> a17
           -> a18
           -> Envelope a0
           -> IO ()
insert2000 extractAddress address autoText omitReturnAddress returnAddress returnAutoText printBarCode printFIMA size height width feedSource addressFromLeft addressFromTop returnAddressFromLeft returnAddressFromTop defaultFaceUp defaultOrientation =
  method0 "Insert2000"
          [ inVariant extractAddress
          , inVariant address
          , inVariant autoText
          , inVariant omitReturnAddress
          , inVariant returnAddress
          , inVariant returnAutoText
          , inVariant printBarCode
          , inVariant printFIMA
          , inVariant size
          , inVariant height
          , inVariant width
          , inVariant feedSource
          , inVariant addressFromLeft
          , inVariant addressFromTop
          , inVariant returnAddressFromLeft
          , inVariant returnAddressFromTop
          , inVariant defaultFaceUp
          , inVariant defaultOrientation
          ]

printOut20002 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> a9
              -> a10
              -> a11
              -> a12
              -> a13
              -> a14
              -> a15
              -> a16
              -> a17
              -> a18
              -> Envelope a0
              -> IO ()
printOut20002 extractAddress address autoText omitReturnAddress returnAddress returnAutoText printBarCode printFIMA size height width feedSource addressFromLeft addressFromTop returnAddressFromLeft returnAddressFromTop defaultFaceUp defaultOrientation =
  method0 "PrintOut2000"
          [ inVariant extractAddress
          , inVariant address
          , inVariant autoText
          , inVariant omitReturnAddress
          , inVariant returnAddress
          , inVariant returnAutoText
          , inVariant printBarCode
          , inVariant printFIMA
          , inVariant size
          , inVariant height
          , inVariant width
          , inVariant feedSource
          , inVariant addressFromLeft
          , inVariant addressFromTop
          , inVariant returnAddressFromLeft
          , inVariant returnAddressFromTop
          , inVariant defaultFaceUp
          , inVariant defaultOrientation
          ]

updateDocument :: Envelope a0
               -> IO ()
updateDocument =
  method0 "UpdateDocument"
          []

options :: Envelope a0
        -> IO ()
options =
  method0 "Options"
          []

getVertical :: Envelope a0
            -> IO Bool
getVertical =
  propertyGet "Vertical"
              []
              outBool

setVertical :: Bool
            -> Envelope a0
            -> IO ()
setVertical prop =
  propertySet "Vertical"
              [inBool prop]

getRecipientNamefromLeft :: Envelope a0
                         -> IO Float
getRecipientNamefromLeft =
  propertyGet "RecipientNamefromLeft"
              []
              outFloat

setRecipientNamefromLeft :: Float
                         -> Envelope a0
                         -> IO ()
setRecipientNamefromLeft prop =
  propertySet "RecipientNamefromLeft"
              [inFloat prop]

getRecipientNamefromTop :: Envelope a0
                        -> IO Float
getRecipientNamefromTop =
  propertyGet "RecipientNamefromTop"
              []
              outFloat

setRecipientNamefromTop :: Float
                        -> Envelope a0
                        -> IO ()
setRecipientNamefromTop prop =
  propertySet "RecipientNamefromTop"
              [inFloat prop]

getRecipientPostalfromLeft :: Envelope a0
                           -> IO Float
getRecipientPostalfromLeft =
  propertyGet "RecipientPostalfromLeft"
              []
              outFloat

setRecipientPostalfromLeft :: Float
                           -> Envelope a0
                           -> IO ()
setRecipientPostalfromLeft prop =
  propertySet "RecipientPostalfromLeft"
              [inFloat prop]

getRecipientPostalfromTop :: Envelope a0
                          -> IO Float
getRecipientPostalfromTop =
  propertyGet "RecipientPostalfromTop"
              []
              outFloat

setRecipientPostalfromTop :: Float
                          -> Envelope a0
                          -> IO ()
setRecipientPostalfromTop prop =
  propertySet "RecipientPostalfromTop"
              [inFloat prop]

getSenderNamefromLeft :: Envelope a0
                      -> IO Float
getSenderNamefromLeft =
  propertyGet "SenderNamefromLeft"
              []
              outFloat

setSenderNamefromLeft :: Float
                      -> Envelope a0
                      -> IO ()
setSenderNamefromLeft prop =
  propertySet "SenderNamefromLeft"
              [inFloat prop]

getSenderNamefromTop :: Envelope a0
                     -> IO Float
getSenderNamefromTop =
  propertyGet "SenderNamefromTop"
              []
              outFloat

setSenderNamefromTop :: Float
                     -> Envelope a0
                     -> IO ()
setSenderNamefromTop prop =
  propertySet "SenderNamefromTop"
              [inFloat prop]

getSenderPostalfromLeft :: Envelope a0
                        -> IO Float
getSenderPostalfromLeft =
  propertyGet "SenderPostalfromLeft"
              []
              outFloat

setSenderPostalfromLeft :: Float
                        -> Envelope a0
                        -> IO ()
setSenderPostalfromLeft prop =
  propertySet "SenderPostalfromLeft"
              [inFloat prop]

getSenderPostalfromTop :: Envelope a0
                       -> IO Float
getSenderPostalfromTop =
  propertyGet "SenderPostalfromTop"
              []
              outFloat

setSenderPostalfromTop :: Float
                       -> Envelope a0
                       -> IO ()
setSenderPostalfromTop prop =
  propertySet "SenderPostalfromTop"
              [inFloat prop]

insert0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28)
        => a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> a12
        -> a13
        -> a14
        -> a15
        -> a16
        -> a17
        -> a18
        -> a19
        -> a20
        -> a21
        -> a22
        -> a23
        -> a24
        -> a25
        -> a26
        -> a27
        -> a28
        -> Envelope a0
        -> IO ()
insert0 extractAddress address autoText omitReturnAddress returnAddress returnAutoText printBarCode printFIMA size height width feedSource addressFromLeft addressFromTop returnAddressFromLeft returnAddressFromTop defaultFaceUp defaultOrientation printEPostage vertical recipientNamefromLeft recipientNamefromTop recipientPostalfromLeft recipientPostalfromTop senderNamefromLeft senderNamefromTop senderPostalfromLeft senderPostalfromTop =
  method0 "Insert"
          [ inVariant extractAddress
          , inVariant address
          , inVariant autoText
          , inVariant omitReturnAddress
          , inVariant returnAddress
          , inVariant returnAutoText
          , inVariant printBarCode
          , inVariant printFIMA
          , inVariant size
          , inVariant height
          , inVariant width
          , inVariant feedSource
          , inVariant addressFromLeft
          , inVariant addressFromTop
          , inVariant returnAddressFromLeft
          , inVariant returnAddressFromTop
          , inVariant defaultFaceUp
          , inVariant defaultOrientation
          , inVariant printEPostage
          , inVariant vertical
          , inVariant recipientNamefromLeft
          , inVariant recipientNamefromTop
          , inVariant recipientPostalfromLeft
          , inVariant recipientPostalfromTop
          , inVariant senderNamefromLeft
          , inVariant senderNamefromTop
          , inVariant senderPostalfromLeft
          , inVariant senderPostalfromTop
          ]

printOut2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22, Variant a23, Variant a24, Variant a25, Variant a26, Variant a27, Variant a28)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> a10
          -> a11
          -> a12
          -> a13
          -> a14
          -> a15
          -> a16
          -> a17
          -> a18
          -> a19
          -> a20
          -> a21
          -> a22
          -> a23
          -> a24
          -> a25
          -> a26
          -> a27
          -> a28
          -> Envelope a0
          -> IO ()
printOut2 extractAddress address autoText omitReturnAddress returnAddress returnAutoText printBarCode printFIMA size height width feedSource addressFromLeft addressFromTop returnAddressFromLeft returnAddressFromTop defaultFaceUp defaultOrientation printEPostage vertical recipientNamefromLeft recipientNamefromTop recipientPostalfromLeft recipientPostalfromTop senderNamefromLeft senderNamefromTop senderPostalfromLeft senderPostalfromTop =
  method0 "PrintOut"
          [ inVariant extractAddress
          , inVariant address
          , inVariant autoText
          , inVariant omitReturnAddress
          , inVariant returnAddress
          , inVariant returnAutoText
          , inVariant printBarCode
          , inVariant printFIMA
          , inVariant size
          , inVariant height
          , inVariant width
          , inVariant feedSource
          , inVariant addressFromLeft
          , inVariant addressFromTop
          , inVariant returnAddressFromLeft
          , inVariant returnAddressFromTop
          , inVariant defaultFaceUp
          , inVariant defaultOrientation
          , inVariant printEPostage
          , inVariant vertical
          , inVariant recipientNamefromLeft
          , inVariant recipientNamefromTop
          , inVariant recipientPostalfromLeft
          , inVariant recipientPostalfromTop
          , inVariant senderNamefromLeft
          , inVariant senderNamefromTop
          , inVariant senderPostalfromLeft
          , inVariant senderPostalfromTop
          ]

-- --------------------------------------------------
-- 
-- interface MailingLabel
-- 
-- --------------------------------------------------
data MailingLabel_ a = MailingLabel__ 
type MailingLabel a = IDispatch (MailingLabel_ a)
iidMailingLabel :: IID (MailingLabel ())
iidMailingLabel = mkIID "{00020917-0000-0000-C000-000000000046}"

getApplication90 :: MailingLabel a0
                 -> IO (Maybe Application)
getApplication90 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator90 :: MailingLabel a0
             -> IO Int32
getCreator90 =
  propertyGet "Creator"
              []
              outInt32

getParent90 :: MailingLabel a0
            -> IO (IDispatch ())
getParent90 =
  propertyGet "Parent"
              []
              outIDispatch

getDefaultPrintBarCode0 :: MailingLabel a0
                        -> IO Bool
getDefaultPrintBarCode0 =
  propertyGet "DefaultPrintBarCode"
              []
              outBool

setDefaultPrintBarCode0 :: Bool
                        -> MailingLabel a0
                        -> IO ()
setDefaultPrintBarCode0 prop =
  propertySet "DefaultPrintBarCode"
              [inBool prop]

getDefaultLaserTray :: MailingLabel a0
                    -> IO WdPaperTray
getDefaultLaserTray =
  propertyGet "DefaultLaserTray"
              []
              outEnum

setDefaultLaserTray :: WdPaperTray
                    -> MailingLabel a0
                    -> IO ()
setDefaultLaserTray prop =
  propertySet "DefaultLaserTray"
              [inEnum prop]

getCustomLabels :: MailingLabel a0
                -> IO (CustomLabels ())
getCustomLabels =
  propertyGet "CustomLabels"
              []
              outIUnknown

getDefaultLabelName :: MailingLabel a0
                    -> IO String
getDefaultLabelName =
  propertyGet "DefaultLabelName"
              []
              outString

setDefaultLabelName :: String
                    -> MailingLabel a0
                    -> IO ()
setDefaultLabelName prop =
  propertySet "DefaultLabelName"
              [inString prop]

createNewDocument2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                      => a1
                      -> a2
                      -> a3
                      -> a4
                      -> a5
                      -> MailingLabel a0
                      -> IO (Maybe Document)
createNewDocument2000 name address autoText extractAddress laserTray iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    name <- marshallVariant name
    address <- marshallVariant address
    autoText <- marshallVariant autoText
    extractAddress <- marshallVariant extractAddress
    laserTray <- marshallVariant laserTray
    invokeAndCheck (\ methPtr iptr -> prim_Word_createNewDocument2000 methPtr iptr name address autoText extractAddress laserTray prop) 17 iptr
    free name
    free address
    free autoText
    free extractAddress
    free laserTray
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_createNewDocument2000 :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
printOut20003 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> MailingLabel a0
              -> IO ()
printOut20003 name address extractAddress laserTray singleLabel row column =
  method0 "PrintOut2000"
          [ inVariant name
          , inVariant address
          , inVariant extractAddress
          , inVariant laserTray
          , inVariant singleLabel
          , inVariant row
          , inVariant column
          ]

labelOptions :: MailingLabel a0
             -> IO ()
labelOptions =
  method0 "LabelOptions"
          []

createNewDocument :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                  => a1
                  -> a2
                  -> a3
                  -> a4
                  -> a5
                  -> a6
                  -> a7
                  -> MailingLabel a0
                  -> IO (Maybe Document)
createNewDocument name address autoText extractAddress laserTray printEPostageLabel vertical iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    name <- marshallVariant name
    address <- marshallVariant address
    autoText <- marshallVariant autoText
    extractAddress <- marshallVariant extractAddress
    laserTray <- marshallVariant laserTray
    printEPostageLabel <- marshallVariant printEPostageLabel
    vertical <- marshallVariant vertical
    invokeAndCheck (\ methPtr iptr -> prim_Word_createNewDocument methPtr iptr name address autoText extractAddress laserTray printEPostageLabel vertical prop) 20 iptr
    free name
    free address
    free autoText
    free extractAddress
    free laserTray
    free printEPostageLabel
    free vertical
    doThenFree free (readunique readDocument) prop

foreign import stdcall "dynamic" prim_Word_createNewDocument :: Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr Document) -> IO Int32
printOut3 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
          => a1
          -> a2
          -> a3
          -> a4
          -> a5
          -> a6
          -> a7
          -> a8
          -> a9
          -> MailingLabel a0
          -> IO ()
printOut3 name address extractAddress laserTray singleLabel row column printEPostageLabel vertical =
  method0 "PrintOut"
          [ inVariant name
          , inVariant address
          , inVariant extractAddress
          , inVariant laserTray
          , inVariant singleLabel
          , inVariant row
          , inVariant column
          , inVariant printEPostageLabel
          , inVariant vertical
          ]

getVertical0 :: MailingLabel a0
             -> IO Bool
getVertical0 =
  propertyGet "Vertical"
              []
              outBool

setVertical0 :: Bool
             -> MailingLabel a0
             -> IO ()
setVertical0 prop =
  propertySet "Vertical"
              [inBool prop]

createNewDocumentByID :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
                      => a1
                      -> a2
                      -> a3
                      -> a4
                      -> a5
                      -> a6
                      -> a7
                      -> MailingLabel a0
                      -> IO (Maybe Document)
createNewDocumentByID labelID address autoText extractAddress laserTray printEPostageLabel vertical iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    labelID <- marshallVariant labelID
    address <- marshallVariant address
    autoText <- marshallVariant autoText
    extractAddress <- marshallVariant extractAddress
    laserTray <- marshallVariant laserTray
    printEPostageLabel <- marshallVariant printEPostageLabel
    vertical <- marshallVariant vertical
    invokeAndCheck (\ methPtr iptr -> prim_Word_createNewDocument methPtr iptr labelID address autoText extractAddress laserTray printEPostageLabel vertical prop) 24 iptr
    free labelID
    free address
    free autoText
    free extractAddress
    free laserTray
    free printEPostageLabel
    free vertical
    doThenFree free (readunique readDocument) prop

printOutByID :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> MailingLabel a0
             -> IO ()
printOutByID labelID address extractAddress laserTray singleLabel row column printEPostageLabel vertical =
  method0 "PrintOutByID"
          [ inVariant labelID
          , inVariant address
          , inVariant extractAddress
          , inVariant laserTray
          , inVariant singleLabel
          , inVariant row
          , inVariant column
          , inVariant printEPostageLabel
          , inVariant vertical
          ]

-- --------------------------------------------------
-- 
-- interface CustomLabels
-- 
-- --------------------------------------------------
data CustomLabels_ a = CustomLabels__ 
type CustomLabels a = IDispatch (CustomLabels_ a)
iidCustomLabels :: IID (CustomLabels ())
iidCustomLabels = mkIID "{00020916-0000-0000-C000-000000000046}"

getApplication91 :: CustomLabels a0
                 -> IO (Maybe Application)
getApplication91 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator91 :: CustomLabels a0
             -> IO Int32
getCreator91 =
  propertyGet "Creator"
              []
              outInt32

getParent91 :: CustomLabels a0
            -> IO (IDispatch ())
getParent91 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum35 :: CustomLabels a0
             -> IO (IUnknown ())
getNewEnum35 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount35 :: CustomLabels a0
           -> IO Int32
getCount35 =
  propertyGet "Count"
              []
              outInt32

item35 :: (Variant a1)
       => a1
       -> CustomLabels a0
       -> IO (CustomLabel ())
item35 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add26 :: (Variant a1)
      => String
      -> a1
      -> CustomLabels a0
      -> IO (CustomLabel ())
add26 name dotMatrix =
  function1 "Add"
            [ inString name
            , inVariant dotMatrix
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface CustomLabel
-- 
-- --------------------------------------------------
data CustomLabel_ a = CustomLabel__ 
type CustomLabel a = IDispatch (CustomLabel_ a)
iidCustomLabel :: IID (CustomLabel ())
iidCustomLabel = mkIID "{00020915-0000-0000-C000-000000000046}"

getApplication92 :: CustomLabel a0
                 -> IO (Maybe Application)
getApplication92 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator92 :: CustomLabel a0
             -> IO Int32
getCreator92 =
  propertyGet "Creator"
              []
              outInt32

getParent92 :: CustomLabel a0
            -> IO (IDispatch ())
getParent92 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex17 :: CustomLabel a0
           -> IO Int32
getIndex17 =
  propertyGet "Index"
              []
              outInt32

getName18 :: CustomLabel a0
          -> IO String
getName18 =
  propertyGet "Name"
              []
              outString

setName5 :: String
         -> CustomLabel a0
         -> IO ()
setName5 prop =
  propertySet "Name"
              [inString prop]

getTopMargin :: CustomLabel a0
             -> IO Float
getTopMargin =
  propertyGet "TopMargin"
              []
              outFloat

setTopMargin :: Float
             -> CustomLabel a0
             -> IO ()
setTopMargin prop =
  propertySet "TopMargin"
              [inFloat prop]

getSideMargin :: CustomLabel a0
              -> IO Float
getSideMargin =
  propertyGet "SideMargin"
              []
              outFloat

setSideMargin :: Float
              -> CustomLabel a0
              -> IO ()
setSideMargin prop =
  propertySet "SideMargin"
              [inFloat prop]

getHeight7 :: CustomLabel a0
           -> IO Float
getHeight7 =
  propertyGet "Height"
              []
              outFloat

setHeight11 :: Float
            -> CustomLabel a0
            -> IO ()
setHeight11 prop =
  propertySet "Height"
              [inFloat prop]

getWidth8 :: CustomLabel a0
          -> IO Float
getWidth8 =
  propertyGet "Width"
              []
              outFloat

setWidth12 :: Float
           -> CustomLabel a0
           -> IO ()
setWidth12 prop =
  propertySet "Width"
              [inFloat prop]

getVerticalPitch :: CustomLabel a0
                 -> IO Float
getVerticalPitch =
  propertyGet "VerticalPitch"
              []
              outFloat

setVerticalPitch :: Float
                 -> CustomLabel a0
                 -> IO ()
setVerticalPitch prop =
  propertySet "VerticalPitch"
              [inFloat prop]

getHorizontalPitch :: CustomLabel a0
                   -> IO Float
getHorizontalPitch =
  propertyGet "HorizontalPitch"
              []
              outFloat

setHorizontalPitch :: Float
                   -> CustomLabel a0
                   -> IO ()
setHorizontalPitch prop =
  propertySet "HorizontalPitch"
              [inFloat prop]

getNumberAcross :: CustomLabel a0
                -> IO Int32
getNumberAcross =
  propertyGet "NumberAcross"
              []
              outInt32

setNumberAcross :: Int32
                -> CustomLabel a0
                -> IO ()
setNumberAcross prop =
  propertySet "NumberAcross"
              [inInt32 prop]

getNumberDown :: CustomLabel a0
              -> IO Int32
getNumberDown =
  propertyGet "NumberDown"
              []
              outInt32

setNumberDown :: Int32
              -> CustomLabel a0
              -> IO ()
setNumberDown prop =
  propertySet "NumberDown"
              [inInt32 prop]

getDotMatrix :: CustomLabel a0
             -> IO Bool
getDotMatrix =
  propertyGet "DotMatrix"
              []
              outBool

getPageSize :: CustomLabel a0
            -> IO WdCustomLabelPageSize
getPageSize =
  propertyGet "PageSize"
              []
              outEnum

setPageSize :: WdCustomLabelPageSize
            -> CustomLabel a0
            -> IO ()
setPageSize prop =
  propertySet "PageSize"
              [inEnum prop]

getValid2 :: CustomLabel a0
          -> IO Bool
getValid2 =
  propertyGet "Valid"
              []
              outBool

delete26 :: CustomLabel a0
         -> IO ()
delete26 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface TablesOfContents
-- 
-- --------------------------------------------------
data TablesOfContents_ a = TablesOfContents__ 
type TablesOfContents a = IDispatch (TablesOfContents_ a)
iidTablesOfContents :: IID (TablesOfContents ())
iidTablesOfContents =
  mkIID "{00020914-0000-0000-C000-000000000046}"

getApplication93 :: TablesOfContents a0
                 -> IO (Maybe Application)
getApplication93 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator93 :: TablesOfContents a0
             -> IO Int32
getCreator93 =
  propertyGet "Creator"
              []
              outInt32

getParent93 :: TablesOfContents a0
            -> IO (IDispatch ())
getParent93 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum36 :: TablesOfContents a0
             -> IO (IUnknown ())
getNewEnum36 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount36 :: TablesOfContents a0
           -> IO Int32
getCount36 =
  propertyGet "Count"
              []
              outInt32

getFormat4 :: TablesOfContents a0
           -> IO WdTocFormat
getFormat4 =
  propertyGet "Format"
              []
              outEnum

setFormat3 :: WdTocFormat
           -> TablesOfContents a0
           -> IO ()
setFormat3 prop =
  propertySet "Format"
              [inEnum prop]

item36 :: Int32
       -> TablesOfContents a0
       -> IO (TableOfContents ())
item36 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

addOld2 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
        => Range a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> TablesOfContents a0
        -> IO (TableOfContents ())
addOld2 range0 useHeadingStyles upperHeadingLevel lowerHeadingLevel useFields tableID rightAlignPageNumbers includePageNumbers addedStyles =
  function1 "AddOld"
            [ inIDispatch range0
            , inVariant useHeadingStyles
            , inVariant upperHeadingLevel
            , inVariant lowerHeadingLevel
            , inVariant useFields
            , inVariant tableID
            , inVariant rightAlignPageNumbers
            , inVariant includePageNumbers
            , inVariant addedStyles
            ]
            outIUnknown

markEntry0 :: (Variant a2, Variant a3, Variant a4, Variant a5)
           => Range a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> TablesOfContents a0
           -> IO (Field ())
markEntry0 range0 entry entryAutoText tableID level =
  function1 "MarkEntry"
            [ inIDispatch range0
            , inVariant entry
            , inVariant entryAutoText
            , inVariant tableID
            , inVariant level
            ]
            outIDispatch

add2000 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
        => Range a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> a7
        -> a8
        -> a9
        -> a10
        -> a11
        -> TablesOfContents a0
        -> IO (TableOfContents ())
add2000 range0 useHeadingStyles upperHeadingLevel lowerHeadingLevel useFields tableID rightAlignPageNumbers includePageNumbers addedStyles useHyperlinks hidePageNumbersInWeb =
  function1 "Add2000"
            [ inIDispatch range0
            , inVariant useHeadingStyles
            , inVariant upperHeadingLevel
            , inVariant lowerHeadingLevel
            , inVariant useFields
            , inVariant tableID
            , inVariant rightAlignPageNumbers
            , inVariant includePageNumbers
            , inVariant addedStyles
            , inVariant useHyperlinks
            , inVariant hidePageNumbersInWeb
            ]
            outIUnknown

add27 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
      => Range a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> TablesOfContents a0
      -> IO (TableOfContents ())
add27 range0 useHeadingStyles upperHeadingLevel lowerHeadingLevel useFields tableID rightAlignPageNumbers includePageNumbers addedStyles useHyperlinks hidePageNumbersInWeb useOutlineLevels =
  function1 "Add"
            [ inIDispatch range0
            , inVariant useHeadingStyles
            , inVariant upperHeadingLevel
            , inVariant lowerHeadingLevel
            , inVariant useFields
            , inVariant tableID
            , inVariant rightAlignPageNumbers
            , inVariant includePageNumbers
            , inVariant addedStyles
            , inVariant useHyperlinks
            , inVariant hidePageNumbersInWeb
            , inVariant useOutlineLevels
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface TableOfContents
-- 
-- --------------------------------------------------
data TableOfContents_ a = TableOfContents__ 
type TableOfContents a = IDispatch (TableOfContents_ a)
iidTableOfContents :: IID (TableOfContents ())
iidTableOfContents = mkIID "{00020913-0000-0000-C000-000000000046}"

getApplication94 :: TableOfContents a0
                 -> IO (Maybe Application)
getApplication94 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator94 :: TableOfContents a0
             -> IO Int32
getCreator94 =
  propertyGet "Creator"
              []
              outInt32

getParent94 :: TableOfContents a0
            -> IO (IDispatch ())
getParent94 =
  propertyGet "Parent"
              []
              outIDispatch

getUseHeadingStyles0 :: TableOfContents a0
                     -> IO Bool
getUseHeadingStyles0 =
  propertyGet "UseHeadingStyles"
              []
              outBool

setUseHeadingStyles0 :: Bool
                     -> TableOfContents a0
                     -> IO ()
setUseHeadingStyles0 prop =
  propertySet "UseHeadingStyles"
              [inBool prop]

getUseFields0 :: TableOfContents a0
              -> IO Bool
getUseFields0 =
  propertyGet "UseFields"
              []
              outBool

setUseFields0 :: Bool
              -> TableOfContents a0
              -> IO ()
setUseFields0 prop =
  propertySet "UseFields"
              [inBool prop]

getUpperHeadingLevel0 :: TableOfContents a0
                      -> IO Int32
getUpperHeadingLevel0 =
  propertyGet "UpperHeadingLevel"
              []
              outInt32

setUpperHeadingLevel0 :: Int32
                      -> TableOfContents a0
                      -> IO ()
setUpperHeadingLevel0 prop =
  propertySet "UpperHeadingLevel"
              [inInt32 prop]

getLowerHeadingLevel0 :: TableOfContents a0
                      -> IO Int32
getLowerHeadingLevel0 =
  propertyGet "LowerHeadingLevel"
              []
              outInt32

setLowerHeadingLevel0 :: Int32
                      -> TableOfContents a0
                      -> IO ()
setLowerHeadingLevel0 prop =
  propertySet "LowerHeadingLevel"
              [inInt32 prop]

getTableID0 :: TableOfContents a0
            -> IO String
getTableID0 =
  propertyGet "TableID"
              []
              outString

setTableID0 :: String
            -> TableOfContents a0
            -> IO ()
setTableID0 prop =
  propertySet "TableID"
              [inString prop]

getHeadingStyles0 :: TableOfContents a0
                  -> IO (HeadingStyles ())
getHeadingStyles0 =
  propertyGet "HeadingStyles"
              []
              outIUnknown

getRightAlignPageNumbers0 :: TableOfContents a0
                          -> IO Bool
getRightAlignPageNumbers0 =
  propertyGet "RightAlignPageNumbers"
              []
              outBool

setRightAlignPageNumbers0 :: Bool
                          -> TableOfContents a0
                          -> IO ()
setRightAlignPageNumbers0 prop =
  propertySet "RightAlignPageNumbers"
              [inBool prop]

getIncludePageNumbers0 :: TableOfContents a0
                       -> IO Bool
getIncludePageNumbers0 =
  propertyGet "IncludePageNumbers"
              []
              outBool

setIncludePageNumbers0 :: Bool
                       -> TableOfContents a0
                       -> IO ()
setIncludePageNumbers0 prop =
  propertySet "IncludePageNumbers"
              [inBool prop]

getRange11 :: TableOfContents a0
           -> IO (Range ())
getRange11 =
  propertyGet "Range"
              []
              outIDispatch

getTabLeader0 :: TableOfContents a0
              -> IO WdTabLeader
getTabLeader0 =
  propertyGet "TabLeader"
              []
              outEnum

setTabLeader0 :: WdTabLeader
              -> TableOfContents a0
              -> IO ()
setTabLeader0 prop =
  propertySet "TabLeader"
              [inEnum prop]

delete27 :: TableOfContents a0
         -> IO ()
delete27 =
  method0 "Delete"
          []

updatePageNumbers0 :: TableOfContents a0
                   -> IO ()
updatePageNumbers0 =
  method0 "UpdatePageNumbers"
          []

update3 :: TableOfContents a0
        -> IO ()
update3 =
  method0 "Update"
          []

getUseHyperlinks0 :: TableOfContents a0
                  -> IO Bool
getUseHyperlinks0 =
  propertyGet "UseHyperlinks"
              []
              outBool

setUseHyperlinks0 :: Bool
                  -> TableOfContents a0
                  -> IO ()
setUseHyperlinks0 prop =
  propertySet "UseHyperlinks"
              [inBool prop]

getHidePageNumbersInWeb0 :: TableOfContents a0
                         -> IO Bool
getHidePageNumbersInWeb0 =
  propertyGet "HidePageNumbersInWeb"
              []
              outBool

setHidePageNumbersInWeb0 :: Bool
                         -> TableOfContents a0
                         -> IO ()
setHidePageNumbersInWeb0 prop =
  propertySet "HidePageNumbersInWeb"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface TablesOfAuthorities
-- 
-- --------------------------------------------------
data TablesOfAuthorities_ a = TablesOfAuthorities__ 
type TablesOfAuthorities a = IDispatch (TablesOfAuthorities_ a)
iidTablesOfAuthorities :: IID (TablesOfAuthorities ())
iidTablesOfAuthorities =
  mkIID "{00020912-0000-0000-C000-000000000046}"

getApplication95 :: TablesOfAuthorities a0
                 -> IO (Maybe Application)
getApplication95 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator95 :: TablesOfAuthorities a0
             -> IO Int32
getCreator95 =
  propertyGet "Creator"
              []
              outInt32

getParent95 :: TablesOfAuthorities a0
            -> IO (IDispatch ())
getParent95 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum37 :: TablesOfAuthorities a0
             -> IO (IUnknown ())
getNewEnum37 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount37 :: TablesOfAuthorities a0
           -> IO Int32
getCount37 =
  propertyGet "Count"
              []
              outInt32

getFormat5 :: TablesOfAuthorities a0
           -> IO WdToaFormat
getFormat5 =
  propertyGet "Format"
              []
              outEnum

setFormat4 :: WdToaFormat
           -> TablesOfAuthorities a0
           -> IO ()
setFormat4 prop =
  propertySet "Format"
              [inEnum prop]

item37 :: Int32
       -> TablesOfAuthorities a0
       -> IO (TableOfAuthorities ())
item37 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add28 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
      => Range a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> TablesOfAuthorities a0
      -> IO (TableOfAuthorities ())
add28 range0 category bookmark passim keepEntryFormatting separator includeSequenceName entrySeparator pageRangeSeparator includeCategoryHeader pageNumberSeparator =
  function1 "Add"
            [ inIDispatch range0
            , inVariant category
            , inVariant bookmark
            , inVariant passim
            , inVariant keepEntryFormatting
            , inVariant separator
            , inVariant includeSequenceName
            , inVariant entrySeparator
            , inVariant pageRangeSeparator
            , inVariant includeCategoryHeader
            , inVariant pageNumberSeparator
            ]
            outIUnknown

nextCitation :: String
             -> TablesOfAuthorities a0
             -> IO ()
nextCitation shortCitation =
  method0 "NextCitation"
          [inString shortCitation]

markCitation :: (Variant a2, Variant a3, Variant a4)
             => Range a1
             -> String
             -> a2
             -> a3
             -> a4
             -> TablesOfAuthorities a0
             -> IO (Field ())
markCitation range0 shortCitation longCitation longCitationAutoText category =
  function1 "MarkCitation"
            [ inIDispatch range0
            , inString shortCitation
            , inVariant longCitation
            , inVariant longCitationAutoText
            , inVariant category
            ]
            outIDispatch

markAllCitations :: (Variant a1, Variant a2, Variant a3)
                 => String
                 -> a1
                 -> a2
                 -> a3
                 -> TablesOfAuthorities a0
                 -> IO ()
markAllCitations shortCitation longCitation longCitationAutoText category =
  method0 "MarkAllCitations"
          [ inString shortCitation
          , inVariant longCitation
          , inVariant longCitationAutoText
          , inVariant category
          ]

-- --------------------------------------------------
-- 
-- interface TableOfAuthorities
-- 
-- --------------------------------------------------
data TableOfAuthorities_ a = TableOfAuthorities__ 
type TableOfAuthorities a = IDispatch (TableOfAuthorities_ a)
iidTableOfAuthorities :: IID (TableOfAuthorities ())
iidTableOfAuthorities =
  mkIID "{00020911-0000-0000-C000-000000000046}"

getApplication96 :: TableOfAuthorities a0
                 -> IO (Maybe Application)
getApplication96 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator96 :: TableOfAuthorities a0
             -> IO Int32
getCreator96 =
  propertyGet "Creator"
              []
              outInt32

getParent96 :: TableOfAuthorities a0
            -> IO (IDispatch ())
getParent96 =
  propertyGet "Parent"
              []
              outIDispatch

getPassim :: TableOfAuthorities a0
          -> IO Bool
getPassim =
  propertyGet "Passim"
              []
              outBool

setPassim :: Bool
          -> TableOfAuthorities a0
          -> IO ()
setPassim prop =
  propertySet "Passim"
              [inBool prop]

getKeepEntryFormatting :: TableOfAuthorities a0
                       -> IO Bool
getKeepEntryFormatting =
  propertyGet "KeepEntryFormatting"
              []
              outBool

setKeepEntryFormatting :: Bool
                       -> TableOfAuthorities a0
                       -> IO ()
setKeepEntryFormatting prop =
  propertySet "KeepEntryFormatting"
              [inBool prop]

getCategory :: TableOfAuthorities a0
            -> IO Int32
getCategory =
  propertyGet "Category"
              []
              outInt32

setCategory :: Int32
            -> TableOfAuthorities a0
            -> IO ()
setCategory prop =
  propertySet "Category"
              [inInt32 prop]

getBookmark :: TableOfAuthorities a0
            -> IO String
getBookmark =
  propertyGet "Bookmark"
              []
              outString

setBookmark :: String
            -> TableOfAuthorities a0
            -> IO ()
setBookmark prop =
  propertySet "Bookmark"
              [inString prop]

getSeparator1 :: TableOfAuthorities a0
              -> IO String
getSeparator1 =
  propertyGet "Separator"
              []
              outString

setSeparator :: String
             -> TableOfAuthorities a0
             -> IO ()
setSeparator prop =
  propertySet "Separator"
              [inString prop]

getIncludeSequenceName :: TableOfAuthorities a0
                       -> IO String
getIncludeSequenceName =
  propertyGet "IncludeSequenceName"
              []
              outString

setIncludeSequenceName :: String
                       -> TableOfAuthorities a0
                       -> IO ()
setIncludeSequenceName prop =
  propertySet "IncludeSequenceName"
              [inString prop]

getEntrySeparator :: TableOfAuthorities a0
                  -> IO String
getEntrySeparator =
  propertyGet "EntrySeparator"
              []
              outString

setEntrySeparator :: String
                  -> TableOfAuthorities a0
                  -> IO ()
setEntrySeparator prop =
  propertySet "EntrySeparator"
              [inString prop]

getPageRangeSeparator :: TableOfAuthorities a0
                      -> IO String
getPageRangeSeparator =
  propertyGet "PageRangeSeparator"
              []
              outString

setPageRangeSeparator :: String
                      -> TableOfAuthorities a0
                      -> IO ()
setPageRangeSeparator prop =
  propertySet "PageRangeSeparator"
              [inString prop]

getIncludeCategoryHeader :: TableOfAuthorities a0
                         -> IO Bool
getIncludeCategoryHeader =
  propertyGet "IncludeCategoryHeader"
              []
              outBool

setIncludeCategoryHeader :: Bool
                         -> TableOfAuthorities a0
                         -> IO ()
setIncludeCategoryHeader prop =
  propertySet "IncludeCategoryHeader"
              [inBool prop]

getPageNumberSeparator :: TableOfAuthorities a0
                       -> IO String
getPageNumberSeparator =
  propertyGet "PageNumberSeparator"
              []
              outString

setPageNumberSeparator :: String
                       -> TableOfAuthorities a0
                       -> IO ()
setPageNumberSeparator prop =
  propertySet "PageNumberSeparator"
              [inString prop]

getRange12 :: TableOfAuthorities a0
           -> IO (Range ())
getRange12 =
  propertyGet "Range"
              []
              outIDispatch

getTabLeader1 :: TableOfAuthorities a0
              -> IO WdTabLeader
getTabLeader1 =
  propertyGet "TabLeader"
              []
              outEnum

setTabLeader1 :: WdTabLeader
              -> TableOfAuthorities a0
              -> IO ()
setTabLeader1 prop =
  propertySet "TabLeader"
              [inEnum prop]

delete28 :: TableOfAuthorities a0
         -> IO ()
delete28 =
  method0 "Delete"
          []

update4 :: TableOfAuthorities a0
        -> IO ()
update4 =
  method0 "Update"
          []

-- --------------------------------------------------
-- 
-- interface Dialogs
-- 
-- --------------------------------------------------
data Dialogs_ a = Dialogs__ 
type Dialogs a = IDispatch (Dialogs_ a)
iidDialogs :: IID (Dialogs ())
iidDialogs = mkIID "{00020910-0000-0000-C000-000000000046}"

getApplication97 :: Dialogs a0
                 -> IO (Maybe Application)
getApplication97 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator97 :: Dialogs a0
             -> IO Int32
getCreator97 =
  propertyGet "Creator"
              []
              outInt32

getParent97 :: Dialogs a0
            -> IO (IDispatch ())
getParent97 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum38 :: Dialogs a0
             -> IO (IUnknown ())
getNewEnum38 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount38 :: Dialogs a0
           -> IO Int32
getCount38 =
  propertyGet "Count"
              []
              outInt32

item38 :: WdWordDialog
       -> Dialogs a0
       -> IO (Dialog ())
item38 index =
  function1 "Item"
            [inEnum index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Dialog
-- 
-- --------------------------------------------------
data Dialog_ a = Dialog__ 
type Dialog a = IDispatch (Dialog_ a)
iidDialog :: IID (Dialog ())
iidDialog = mkIID "{000209B8-0000-0000-C000-000000000046}"

getApplication98 :: Dialog a0
                 -> IO (Maybe Application)
getApplication98 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator98 :: Dialog a0
             -> IO Int32
getCreator98 =
  propertyGet "Creator"
              []
              outInt32

getParent98 :: Dialog a0
            -> IO (IDispatch ())
getParent98 =
  propertyGet "Parent"
              []
              outIDispatch

getDefaultTab :: Dialog a0
              -> IO WdWordDialogTab
getDefaultTab =
  propertyGet "DefaultTab"
              []
              outEnum

setDefaultTab :: WdWordDialogTab
              -> Dialog a0
              -> IO ()
setDefaultTab prop =
  propertySet "DefaultTab"
              [inEnum prop]

getType9 :: Dialog a0
         -> IO WdWordDialog
getType9 =
  propertyGet "Type"
              []
              outEnum

show :: (Variant a1)
     => a1
     -> Dialog a0
     -> IO Int32
show timeOut =
  function1 "Show"
            [inVariant timeOut]
            outInt32

display :: (Variant a1)
        => a1
        -> Dialog a0
        -> IO Int32
display timeOut =
  function1 "Display"
            [inVariant timeOut]
            outInt32

execute1 :: Dialog a0
         -> IO ()
execute1 =
  method0 "Execute"
          []

update5 :: Dialog a0
        -> IO ()
update5 =
  method0 "Update"
          []

getCommandName :: Dialog a0
               -> IO String
getCommandName =
  propertyGet "CommandName"
              []
              outString

getCommandBarId :: Dialog a0
                -> IO Int32
getCommandBarId =
  propertyGet "CommandBarId"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface PageSetup
-- 
-- --------------------------------------------------
data PageSetup_ a = PageSetup__ 
type PageSetup a = IDispatch (PageSetup_ a)
iidPageSetup :: IID (PageSetup ())
iidPageSetup = mkIID "{00020971-0000-0000-C000-000000000046}"

getApplication99 :: PageSetup a0
                 -> IO (Maybe Application)
getApplication99 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator99 :: PageSetup a0
             -> IO Int32
getCreator99 =
  propertyGet "Creator"
              []
              outInt32

getParent99 :: PageSetup a0
            -> IO (IDispatch ())
getParent99 =
  propertyGet "Parent"
              []
              outIDispatch

getTopMargin0 :: PageSetup a0
              -> IO Float
getTopMargin0 =
  propertyGet "TopMargin"
              []
              outFloat

setTopMargin0 :: Float
              -> PageSetup a0
              -> IO ()
setTopMargin0 prop =
  propertySet "TopMargin"
              [inFloat prop]

getBottomMargin :: PageSetup a0
                -> IO Float
getBottomMargin =
  propertyGet "BottomMargin"
              []
              outFloat

setBottomMargin :: Float
                -> PageSetup a0
                -> IO ()
setBottomMargin prop =
  propertySet "BottomMargin"
              [inFloat prop]

getLeftMargin :: PageSetup a0
              -> IO Float
getLeftMargin =
  propertyGet "LeftMargin"
              []
              outFloat

setLeftMargin :: Float
              -> PageSetup a0
              -> IO ()
setLeftMargin prop =
  propertySet "LeftMargin"
              [inFloat prop]

getRightMargin :: PageSetup a0
               -> IO Float
getRightMargin =
  propertyGet "RightMargin"
              []
              outFloat

setRightMargin :: Float
               -> PageSetup a0
               -> IO ()
setRightMargin prop =
  propertySet "RightMargin"
              [inFloat prop]

getGutter :: PageSetup a0
          -> IO Float
getGutter =
  propertyGet "Gutter"
              []
              outFloat

setGutter :: Float
          -> PageSetup a0
          -> IO ()
setGutter prop =
  propertySet "Gutter"
              [inFloat prop]

getPageWidth :: PageSetup a0
             -> IO Float
getPageWidth =
  propertyGet "PageWidth"
              []
              outFloat

setPageWidth :: Float
             -> PageSetup a0
             -> IO ()
setPageWidth prop =
  propertySet "PageWidth"
              [inFloat prop]

getPageHeight :: PageSetup a0
              -> IO Float
getPageHeight =
  propertyGet "PageHeight"
              []
              outFloat

setPageHeight :: Float
              -> PageSetup a0
              -> IO ()
setPageHeight prop =
  propertySet "PageHeight"
              [inFloat prop]

getOrientation0 :: PageSetup a0
                -> IO WdOrientation
getOrientation0 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation0 :: WdOrientation
                -> PageSetup a0
                -> IO ()
setOrientation0 prop =
  propertySet "Orientation"
              [inEnum prop]

getFirstPageTray :: PageSetup a0
                 -> IO WdPaperTray
getFirstPageTray =
  propertyGet "FirstPageTray"
              []
              outEnum

setFirstPageTray :: WdPaperTray
                 -> PageSetup a0
                 -> IO ()
setFirstPageTray prop =
  propertySet "FirstPageTray"
              [inEnum prop]

getOtherPagesTray :: PageSetup a0
                  -> IO WdPaperTray
getOtherPagesTray =
  propertyGet "OtherPagesTray"
              []
              outEnum

setOtherPagesTray :: WdPaperTray
                  -> PageSetup a0
                  -> IO ()
setOtherPagesTray prop =
  propertySet "OtherPagesTray"
              [inEnum prop]

getVerticalAlignment1 :: PageSetup a0
                      -> IO WdVerticalAlignment
getVerticalAlignment1 =
  propertyGet "VerticalAlignment"
              []
              outEnum

setVerticalAlignment1 :: WdVerticalAlignment
                      -> PageSetup a0
                      -> IO ()
setVerticalAlignment1 prop =
  propertySet "VerticalAlignment"
              [inEnum prop]

getMirrorMargins :: PageSetup a0
                 -> IO Int32
getMirrorMargins =
  propertyGet "MirrorMargins"
              []
              outInt32

setMirrorMargins :: Int32
                 -> PageSetup a0
                 -> IO ()
setMirrorMargins prop =
  propertySet "MirrorMargins"
              [inInt32 prop]

getHeaderDistance :: PageSetup a0
                  -> IO Float
getHeaderDistance =
  propertyGet "HeaderDistance"
              []
              outFloat

setHeaderDistance :: Float
                  -> PageSetup a0
                  -> IO ()
setHeaderDistance prop =
  propertySet "HeaderDistance"
              [inFloat prop]

getFooterDistance :: PageSetup a0
                  -> IO Float
getFooterDistance =
  propertyGet "FooterDistance"
              []
              outFloat

setFooterDistance :: Float
                  -> PageSetup a0
                  -> IO ()
setFooterDistance prop =
  propertySet "FooterDistance"
              [inFloat prop]

getSectionStart :: PageSetup a0
                -> IO WdSectionStart
getSectionStart =
  propertyGet "SectionStart"
              []
              outEnum

setSectionStart :: WdSectionStart
                -> PageSetup a0
                -> IO ()
setSectionStart prop =
  propertySet "SectionStart"
              [inEnum prop]

getOddAndEvenPagesHeaderFooter :: PageSetup a0
                               -> IO Int32
getOddAndEvenPagesHeaderFooter =
  propertyGet "OddAndEvenPagesHeaderFooter"
              []
              outInt32

setOddAndEvenPagesHeaderFooter :: Int32
                               -> PageSetup a0
                               -> IO ()
setOddAndEvenPagesHeaderFooter prop =
  propertySet "OddAndEvenPagesHeaderFooter"
              [inInt32 prop]

getDifferentFirstPageHeaderFooter :: PageSetup a0
                                  -> IO Int32
getDifferentFirstPageHeaderFooter =
  propertyGet "DifferentFirstPageHeaderFooter"
              []
              outInt32

setDifferentFirstPageHeaderFooter :: Int32
                                  -> PageSetup a0
                                  -> IO ()
setDifferentFirstPageHeaderFooter prop =
  propertySet "DifferentFirstPageHeaderFooter"
              [inInt32 prop]

getSuppressEndnotes :: PageSetup a0
                    -> IO Int32
getSuppressEndnotes =
  propertyGet "SuppressEndnotes"
              []
              outInt32

setSuppressEndnotes :: Int32
                    -> PageSetup a0
                    -> IO ()
setSuppressEndnotes prop =
  propertySet "SuppressEndnotes"
              [inInt32 prop]

getLineNumbering :: PageSetup a0
                 -> IO (LineNumbering ())
getLineNumbering =
  propertyGet "LineNumbering"
              []
              outIUnknown

setLineNumbering :: LineNumbering a1
                 -> PageSetup a0
                 -> IO ()
setLineNumbering prop =
  propertySet "LineNumbering"
              [inIUnknown prop]

getTextColumns :: PageSetup a0
               -> IO (TextColumns ())
getTextColumns =
  propertyGet "TextColumns"
              []
              outIUnknown

setTextColumns :: TextColumns a1
               -> PageSetup a0
               -> IO ()
setTextColumns prop =
  propertySet "TextColumns"
              [inIUnknown prop]

getPaperSize :: PageSetup a0
             -> IO WdPaperSize
getPaperSize =
  propertyGet "PaperSize"
              []
              outEnum

setPaperSize :: WdPaperSize
             -> PageSetup a0
             -> IO ()
setPaperSize prop =
  propertySet "PaperSize"
              [inEnum prop]

getTwoPagesOnOne :: PageSetup a0
                 -> IO Bool
getTwoPagesOnOne =
  propertyGet "TwoPagesOnOne"
              []
              outBool

setTwoPagesOnOne :: Bool
                 -> PageSetup a0
                 -> IO ()
setTwoPagesOnOne prop =
  propertySet "TwoPagesOnOne"
              [inBool prop]

getGutterOnTop :: PageSetup a0
               -> IO Bool
getGutterOnTop =
  propertyGet "GutterOnTop"
              []
              outBool

setGutterOnTop :: Bool
               -> PageSetup a0
               -> IO ()
setGutterOnTop prop =
  propertySet "GutterOnTop"
              [inBool prop]

getCharsLine :: PageSetup a0
             -> IO Float
getCharsLine =
  propertyGet "CharsLine"
              []
              outFloat

setCharsLine :: Float
             -> PageSetup a0
             -> IO ()
setCharsLine prop =
  propertySet "CharsLine"
              [inFloat prop]

getLinesPage :: PageSetup a0
             -> IO Float
getLinesPage =
  propertyGet "LinesPage"
              []
              outFloat

setLinesPage :: Float
             -> PageSetup a0
             -> IO ()
setLinesPage prop =
  propertySet "LinesPage"
              [inFloat prop]

getShowGrid :: PageSetup a0
            -> IO Bool
getShowGrid =
  propertyGet "ShowGrid"
              []
              outBool

setShowGrid :: Bool
            -> PageSetup a0
            -> IO ()
setShowGrid prop =
  propertySet "ShowGrid"
              [inBool prop]

togglePortrait :: PageSetup a0
               -> IO ()
togglePortrait =
  method0 "TogglePortrait"
          []

setAsTemplateDefault0 :: PageSetup a0
                      -> IO ()
setAsTemplateDefault0 =
  method0 "SetAsTemplateDefault"
          []

getGutterStyle :: PageSetup a0
               -> IO WdGutterStyleOld
getGutterStyle =
  propertyGet "GutterStyle"
              []
              outEnum

setGutterStyle :: WdGutterStyleOld
               -> PageSetup a0
               -> IO ()
setGutterStyle prop =
  propertySet "GutterStyle"
              [inEnum prop]

getSectionDirection :: PageSetup a0
                    -> IO WdSectionDirection
getSectionDirection =
  propertyGet "SectionDirection"
              []
              outEnum

setSectionDirection :: WdSectionDirection
                    -> PageSetup a0
                    -> IO ()
setSectionDirection prop =
  propertySet "SectionDirection"
              [inEnum prop]

getLayoutMode :: PageSetup a0
              -> IO WdLayoutMode
getLayoutMode =
  propertyGet "LayoutMode"
              []
              outEnum

setLayoutMode :: WdLayoutMode
              -> PageSetup a0
              -> IO ()
setLayoutMode prop =
  propertySet "LayoutMode"
              [inEnum prop]

getGutterPos :: PageSetup a0
             -> IO WdGutterStyle
getGutterPos =
  propertyGet "GutterPos"
              []
              outEnum

setGutterPos :: WdGutterStyle
             -> PageSetup a0
             -> IO ()
setGutterPos prop =
  propertySet "GutterPos"
              [inEnum prop]

getBookFoldPrinting :: PageSetup a0
                    -> IO Bool
getBookFoldPrinting =
  propertyGet "BookFoldPrinting"
              []
              outBool

setBookFoldPrinting :: Bool
                    -> PageSetup a0
                    -> IO ()
setBookFoldPrinting prop =
  propertySet "BookFoldPrinting"
              [inBool prop]

getBookFoldRevPrinting :: PageSetup a0
                       -> IO Bool
getBookFoldRevPrinting =
  propertyGet "BookFoldRevPrinting"
              []
              outBool

setBookFoldRevPrinting :: Bool
                       -> PageSetup a0
                       -> IO ()
setBookFoldRevPrinting prop =
  propertySet "BookFoldRevPrinting"
              [inBool prop]

getBookFoldPrintingSheets :: PageSetup a0
                          -> IO Int32
getBookFoldPrintingSheets =
  propertyGet "BookFoldPrintingSheets"
              []
              outInt32

setBookFoldPrintingSheets :: Int32
                          -> PageSetup a0
                          -> IO ()
setBookFoldPrintingSheets prop =
  propertySet "BookFoldPrintingSheets"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface LineNumbering
-- 
-- --------------------------------------------------
data LineNumbering_ a = LineNumbering__ 
type LineNumbering a = IDispatch (LineNumbering_ a)
iidLineNumbering :: IID (LineNumbering ())
iidLineNumbering = mkIID "{00020972-0000-0000-C000-000000000046}"

getApplication100 :: LineNumbering a0
                  -> IO (Maybe Application)
getApplication100 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator100 :: LineNumbering a0
              -> IO Int32
getCreator100 =
  propertyGet "Creator"
              []
              outInt32

getParent100 :: LineNumbering a0
             -> IO (IDispatch ())
getParent100 =
  propertyGet "Parent"
              []
              outIDispatch

getRestartMode :: LineNumbering a0
               -> IO WdNumberingRule
getRestartMode =
  propertyGet "RestartMode"
              []
              outEnum

setRestartMode :: WdNumberingRule
               -> LineNumbering a0
               -> IO ()
setRestartMode prop =
  propertySet "RestartMode"
              [inEnum prop]

getStartingNumber1 :: LineNumbering a0
                   -> IO Int32
getStartingNumber1 =
  propertyGet "StartingNumber"
              []
              outInt32

setStartingNumber1 :: Int32
                   -> LineNumbering a0
                   -> IO ()
setStartingNumber1 prop =
  propertySet "StartingNumber"
              [inInt32 prop]

getDistanceFromText0 :: LineNumbering a0
                     -> IO Float
getDistanceFromText0 =
  propertyGet "DistanceFromText"
              []
              outFloat

setDistanceFromText0 :: Float
                     -> LineNumbering a0
                     -> IO ()
setDistanceFromText0 prop =
  propertySet "DistanceFromText"
              [inFloat prop]

getCountBy :: LineNumbering a0
           -> IO Int32
getCountBy =
  propertyGet "CountBy"
              []
              outInt32

setCountBy :: Int32
           -> LineNumbering a0
           -> IO ()
setCountBy prop =
  propertySet "CountBy"
              [inInt32 prop]

getActive0 :: LineNumbering a0
           -> IO Int32
getActive0 =
  propertyGet "Active"
              []
              outInt32

setActive :: Int32
          -> LineNumbering a0
          -> IO ()
setActive prop =
  propertySet "Active"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface TextColumns
-- 
-- --------------------------------------------------
data TextColumns_ a = TextColumns__ 
type TextColumns a = IDispatch (TextColumns_ a)
iidTextColumns :: IID (TextColumns ())
iidTextColumns = mkIID "{00020973-0000-0000-C000-000000000046}"

getNewEnum39 :: TextColumns a0
             -> IO (IUnknown ())
getNewEnum39 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount39 :: TextColumns a0
           -> IO Int32
getCount39 =
  propertyGet "Count"
              []
              outInt32

getApplication101 :: TextColumns a0
                  -> IO (Maybe Application)
getApplication101 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator101 :: TextColumns a0
              -> IO Int32
getCreator101 =
  propertyGet "Creator"
              []
              outInt32

getParent101 :: TextColumns a0
             -> IO (IDispatch ())
getParent101 =
  propertyGet "Parent"
              []
              outIDispatch

getEvenlySpaced :: TextColumns a0
                -> IO Int32
getEvenlySpaced =
  propertyGet "EvenlySpaced"
              []
              outInt32

setEvenlySpaced :: Int32
                -> TextColumns a0
                -> IO ()
setEvenlySpaced prop =
  propertySet "EvenlySpaced"
              [inInt32 prop]

getLineBetween :: TextColumns a0
               -> IO Int32
getLineBetween =
  propertyGet "LineBetween"
              []
              outInt32

setLineBetween :: Int32
               -> TextColumns a0
               -> IO ()
setLineBetween prop =
  propertySet "LineBetween"
              [inInt32 prop]

getWidth9 :: TextColumns a0
          -> IO Float
getWidth9 =
  propertyGet "Width"
              []
              outFloat

setWidth13 :: Float
           -> TextColumns a0
           -> IO ()
setWidth13 prop =
  propertySet "Width"
              [inFloat prop]

getSpacing1 :: TextColumns a0
            -> IO Float
getSpacing1 =
  propertyGet "Spacing"
              []
              outFloat

setSpacing1 :: Float
            -> TextColumns a0
            -> IO ()
setSpacing1 prop =
  propertySet "Spacing"
              [inFloat prop]

item39 :: Int32
       -> TextColumns a0
       -> IO (TextColumn ())
item39 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add29 :: (Variant a1, Variant a2, Variant a3)
      => a1
      -> a2
      -> a3
      -> TextColumns a0
      -> IO (TextColumn ())
add29 width spacing evenlySpaced =
  function1 "Add"
            [ inVariant width
            , inVariant spacing
            , inVariant evenlySpaced
            ]
            outIUnknown

setCount :: Int32
         -> TextColumns a0
         -> IO ()
setCount numColumns =
  method0 "SetCount"
          [inInt32 numColumns]

getFlowDirection :: TextColumns a0
                 -> IO WdFlowDirection
getFlowDirection =
  propertyGet "FlowDirection"
              []
              outEnum

setFlowDirection :: WdFlowDirection
                 -> TextColumns a0
                 -> IO ()
setFlowDirection prop =
  propertySet "FlowDirection"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface TextColumn
-- 
-- --------------------------------------------------
data TextColumn_ a = TextColumn__ 
type TextColumn a = IDispatch (TextColumn_ a)
iidTextColumn :: IID (TextColumn ())
iidTextColumn = mkIID "{00020974-0000-0000-C000-000000000046}"

getApplication102 :: TextColumn a0
                  -> IO (Maybe Application)
getApplication102 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator102 :: TextColumn a0
              -> IO Int32
getCreator102 =
  propertyGet "Creator"
              []
              outInt32

getParent102 :: TextColumn a0
             -> IO (IDispatch ())
getParent102 =
  propertyGet "Parent"
              []
              outIDispatch

getWidth10 :: TextColumn a0
           -> IO Float
getWidth10 =
  propertyGet "Width"
              []
              outFloat

setWidth14 :: Float
           -> TextColumn a0
           -> IO ()
setWidth14 prop =
  propertySet "Width"
              [inFloat prop]

getSpaceAfter2 :: TextColumn a0
               -> IO Float
getSpaceAfter2 =
  propertyGet "SpaceAfter"
              []
              outFloat

setSpaceAfter2 :: Float
               -> TextColumn a0
               -> IO ()
setSpaceAfter2 prop =
  propertySet "SpaceAfter"
              [inFloat prop]

-- --------------------------------------------------
-- 
-- interface Selection
-- 
-- --------------------------------------------------
data Selection_ a = Selection__ 
type Selection a = IDispatch (Selection_ a)
iidSelection :: IID (Selection ())
iidSelection = mkIID "{00020975-0000-0000-C000-000000000046}"

getText2 :: Selection a0
         -> IO String
getText2 =
  propertyGet "Text"
              []
              outString

setText2 :: String
         -> Selection a0
         -> IO ()
setText2 prop =
  propertySet "Text"
              [inString prop]

getFormattedText0 :: Selection a0
                  -> IO (Range ())
getFormattedText0 =
  propertyGet "FormattedText"
              []
              outIDispatch

setFormattedText0 :: Range a1
                  -> Selection a0
                  -> IO ()
setFormattedText0 prop =
  propertySet "FormattedText"
              [inIDispatch prop]

getStart1 :: Selection a0
          -> IO Int32
getStart1 =
  propertyGet "Start"
              []
              outInt32

setStart1 :: Int32
          -> Selection a0
          -> IO ()
setStart1 prop =
  propertySet "Start"
              [inInt32 prop]

getEnd1 :: Selection a0
        -> IO Int32
getEnd1 =
  propertyGet "End"
              []
              outInt32

setEnd1 :: Int32
        -> Selection a0
        -> IO ()
setEnd1 prop =
  propertySet "End"
              [inInt32 prop]

getFont3 :: Selection a0
         -> IO (Maybe Font)
getFont3 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 15 iptr
    doThenFree free (readunique readFont) prop

setFont3 :: Font
         -> Selection a0
         -> IO ()
setFont3 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 16 iptr
    free prop

getType10 :: Selection a0
          -> IO WdSelectionType
getType10 =
  propertyGet "Type"
              []
              outEnum

getStoryType1 :: Selection a0
              -> IO WdStoryType
getStoryType1 =
  propertyGet "StoryType"
              []
              outEnum

getStyle6 :: (Variant a1)
          => Selection a0
          -> IO a1
getStyle6 =
  propertyGet "Style"
              []
              outVariant

setStyle6 :: (Variant a1)
          => a1
          -> Selection a0
          -> IO ()
setStyle6 prop =
  propertySet "Style"
              [inVariant prop]

getTables3 :: Selection a0
           -> IO (Tables ())
getTables3 =
  propertyGet "Tables"
              []
              outIDispatch

getWords1 :: Selection a0
          -> IO (Words ())
getWords1 =
  propertyGet "Words"
              []
              outIDispatch

getSentences1 :: Selection a0
              -> IO (Sentences ())
getSentences1 =
  propertyGet "Sentences"
              []
              outIDispatch

getCharacters1 :: Selection a0
               -> IO (Characters ())
getCharacters1 =
  propertyGet "Characters"
              []
              outIDispatch

getFootnotes1 :: Selection a0
              -> IO (Footnotes ())
getFootnotes1 =
  propertyGet "Footnotes"
              []
              outIDispatch

getEndnotes1 :: Selection a0
             -> IO (Endnotes ())
getEndnotes1 =
  propertyGet "Endnotes"
              []
              outIDispatch

getComments1 :: Selection a0
             -> IO (Comments ())
getComments1 =
  propertyGet "Comments"
              []
              outIDispatch

getCells2 :: Selection a0
          -> IO (Cells ())
getCells2 =
  propertyGet "Cells"
              []
              outIDispatch

getSections1 :: Selection a0
             -> IO (Sections ())
getSections1 =
  propertyGet "Sections"
              []
              outIDispatch

getParagraphs1 :: Selection a0
               -> IO (Paragraphs ())
getParagraphs1 =
  propertyGet "Paragraphs"
              []
              outIDispatch

getBorders14 :: Selection a0
             -> IO (Borders ())
getBorders14 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders14 :: Borders a1
             -> Selection a0
             -> IO ()
setBorders14 prop =
  propertySet "Borders"
              [inIDispatch prop]

getShading13 :: Selection a0
             -> IO (Shading ())
getShading13 =
  propertyGet "Shading"
              []
              outIDispatch

getFields2 :: Selection a0
           -> IO (Fields ())
getFields2 =
  propertyGet "Fields"
              []
              outIDispatch

getFormFields1 :: Selection a0
               -> IO (FormFields ())
getFormFields1 =
  propertyGet "FormFields"
              []
              outIDispatch

getFrames1 :: Selection a0
           -> IO (Frames ())
getFrames1 =
  propertyGet "Frames"
              []
              outIDispatch

getParagraphFormat3 :: Selection a0
                    -> IO (Maybe ParagraphFormat)
getParagraphFormat3 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 37 iptr
    doThenFree free (readunique readParagraphFormat) prop

setParagraphFormat3 :: ParagraphFormat
                    -> Selection a0
                    -> IO ()
setParagraphFormat3 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 38 iptr
    free prop

getPageSetup3 :: Selection a0
              -> IO (PageSetup ())
getPageSetup3 =
  propertyGet "PageSetup"
              []
              outIDispatch

setPageSetup3 :: PageSetup a1
              -> Selection a0
              -> IO ()
setPageSetup3 prop =
  propertySet "PageSetup"
              [inIDispatch prop]

getBookmarks1 :: Selection a0
              -> IO (Bookmarks ())
getBookmarks1 =
  propertyGet "Bookmarks"
              []
              outIDispatch

getStoryLength0 :: Selection a0
                -> IO Int32
getStoryLength0 =
  propertyGet "StoryLength"
              []
              outInt32

getLanguageID4 :: Selection a0
               -> IO WdLanguageID
getLanguageID4 =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID4 :: WdLanguageID
               -> Selection a0
               -> IO ()
setLanguageID4 prop =
  propertySet "LanguageID"
              [inEnum prop]

getLanguageIDFarEast4 :: Selection a0
                      -> IO WdLanguageID
getLanguageIDFarEast4 =
  propertyGet "LanguageIDFarEast"
              []
              outEnum

setLanguageIDFarEast4 :: WdLanguageID
                      -> Selection a0
                      -> IO ()
setLanguageIDFarEast4 prop =
  propertySet "LanguageIDFarEast"
              [inEnum prop]

getLanguageIDOther1 :: Selection a0
                    -> IO WdLanguageID
getLanguageIDOther1 =
  propertyGet "LanguageIDOther"
              []
              outEnum

setLanguageIDOther1 :: WdLanguageID
                    -> Selection a0
                    -> IO ()
setLanguageIDOther1 prop =
  propertySet "LanguageIDOther"
              [inEnum prop]

getHyperlinks1 :: Selection a0
               -> IO (Hyperlinks ())
getHyperlinks1 =
  propertyGet "Hyperlinks"
              []
              outIUnknown

getColumns1 :: Selection a0
            -> IO (Columns ())
getColumns1 =
  propertyGet "Columns"
              []
              outIDispatch

getRows1 :: Selection a0
         -> IO (Rows ())
getRows1 =
  propertyGet "Rows"
              []
              outIDispatch

getHeaderFooter :: Selection a0
                -> IO (HeaderFooter ())
getHeaderFooter =
  propertyGet "HeaderFooter"
              []
              outIUnknown

getIsEndOfRowMark0 :: Selection a0
                   -> IO Bool
getIsEndOfRowMark0 =
  propertyGet "IsEndOfRowMark"
              []
              outBool

getBookmarkID0 :: Selection a0
               -> IO Int32
getBookmarkID0 =
  propertyGet "BookmarkID"
              []
              outInt32

getPreviousBookmarkID0 :: Selection a0
                       -> IO Int32
getPreviousBookmarkID0 =
  propertyGet "PreviousBookmarkID"
              []
              outInt32

getFind0 :: Selection a0
         -> IO (Find ())
getFind0 =
  propertyGet "Find"
              []
              outIDispatch

getRange13 :: Selection a0
           -> IO (Range ())
getRange13 =
  propertyGet "Range"
              []
              outIDispatch

getInformation0 :: (Variant a1)
                => WdInformation
                -> Selection a0
                -> IO a1
getInformation0 type0 =
  propertyGet "Information"
              [inEnum type0]
              outVariant

getFlags :: Selection a0
         -> IO WdSelectionFlags
getFlags =
  propertyGet "Flags"
              []
              outEnum

setFlags :: WdSelectionFlags
         -> Selection a0
         -> IO ()
setFlags prop =
  propertySet "Flags"
              [inEnum prop]

getActive1 :: Selection a0
           -> IO Bool
getActive1 =
  propertyGet "Active"
              []
              outBool

getStartIsActive :: Selection a0
                 -> IO Bool
getStartIsActive =
  propertyGet "StartIsActive"
              []
              outBool

setStartIsActive :: Bool
                 -> Selection a0
                 -> IO ()
setStartIsActive prop =
  propertySet "StartIsActive"
              [inBool prop]

getIPAtEndOfLine :: Selection a0
                 -> IO Bool
getIPAtEndOfLine =
  propertyGet "IPAtEndOfLine"
              []
              outBool

getExtendMode :: Selection a0
              -> IO Bool
getExtendMode =
  propertyGet "ExtendMode"
              []
              outBool

setExtendMode :: Bool
              -> Selection a0
              -> IO ()
setExtendMode prop =
  propertySet "ExtendMode"
              [inBool prop]

getColumnSelectMode :: Selection a0
                    -> IO Bool
getColumnSelectMode =
  propertyGet "ColumnSelectMode"
              []
              outBool

setColumnSelectMode :: Bool
                    -> Selection a0
                    -> IO ()
setColumnSelectMode prop =
  propertySet "ColumnSelectMode"
              [inBool prop]

getOrientation1 :: Selection a0
                -> IO WdTextOrientation
getOrientation1 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation1 :: WdTextOrientation
                -> Selection a0
                -> IO ()
setOrientation1 prop =
  propertySet "Orientation"
              [inEnum prop]

getInlineShapes1 :: Selection a0
                 -> IO (InlineShapes ())
getInlineShapes1 =
  propertyGet "InlineShapes"
              []
              outIUnknown

getApplication103 :: Selection a0
                  -> IO (Maybe Application)
getApplication103 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 72 iptr
    doThenFree free (readunique readApplication) prop

getCreator103 :: Selection a0
              -> IO Int32
getCreator103 =
  propertyGet "Creator"
              []
              outInt32

getParent103 :: Selection a0
             -> IO (IDispatch ())
getParent103 =
  propertyGet "Parent"
              []
              outIDispatch

getDocument2 :: Selection a0
             -> IO (Maybe Document)
getDocument2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 75 iptr
    doThenFree free (readunique readDocument) prop

getShapeRange0 :: Selection a0
               -> IO (ShapeRange ())
getShapeRange0 =
  propertyGet "ShapeRange"
              []
              outIUnknown

select13 :: Selection a0
         -> IO ()
select13 =
  method0 "Select"
          []

setRange0 :: Int32
          -> Int32
          -> Selection a0
          -> IO ()
setRange0 start end =
  method0 "SetRange"
          [ inInt32 start
          , inInt32 end
          ]

collapse0 :: (Variant a1)
          => a1
          -> Selection a0
          -> IO ()
collapse0 direction =
  method0 "Collapse"
          [inVariant direction]

insertBefore0 :: String
              -> Selection a0
              -> IO ()
insertBefore0 text =
  method0 "InsertBefore"
          [inString text]

insertAfter0 :: String
             -> Selection a0
             -> IO ()
insertAfter0 text =
  method0 "InsertAfter"
          [inString text]

next2 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Selection a0
      -> IO (Range ())
next2 unit count =
  function1 "Next"
            [ inVariant unit
            , inVariant count
            ]
            outIDispatch

previous2 :: (Variant a1, Variant a2)
          => a1
          -> a2
          -> Selection a0
          -> IO (Range ())
previous2 unit count =
  function1 "Previous"
            [ inVariant unit
            , inVariant count
            ]
            outIDispatch

startOf0 :: (Variant a1, Variant a2)
         => a1
         -> a2
         -> Selection a0
         -> IO Int32
startOf0 unit extend =
  function1 "StartOf"
            [ inVariant unit
            , inVariant extend
            ]
            outInt32

endOf0 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Selection a0
       -> IO Int32
endOf0 unit extend =
  function1 "EndOf"
            [ inVariant unit
            , inVariant extend
            ]
            outInt32

move1 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> Selection a0
      -> IO Int32
move1 unit count =
  function1 "Move"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

moveStart0 :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Selection a0
           -> IO Int32
moveStart0 unit count =
  function1 "MoveStart"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

moveEnd0 :: (Variant a1, Variant a2)
         => a1
         -> a2
         -> Selection a0
         -> IO Int32
moveEnd0 unit count =
  function1 "MoveEnd"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

moveWhile0 :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Selection a0
           -> IO Int32
moveWhile0 cset count =
  function1 "MoveWhile"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveStartWhile0 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Selection a0
                -> IO Int32
moveStartWhile0 cset count =
  function1 "MoveStartWhile"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveEndWhile0 :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> Selection a0
              -> IO Int32
moveEndWhile0 cset count =
  function1 "MoveEndWhile"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveUntil0 :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Selection a0
           -> IO Int32
moveUntil0 cset count =
  function1 "MoveUntil"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveStartUntil0 :: (Variant a1, Variant a2)
                => a1
                -> a2
                -> Selection a0
                -> IO Int32
moveStartUntil0 cset count =
  function1 "MoveStartUntil"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

moveEndUntil0 :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> Selection a0
              -> IO Int32
moveEndUntil0 cset count =
  function1 "MoveEndUntil"
            [ inVariant cset
            , inVariant count
            ]
            outInt32

cut5 :: Selection a0
     -> IO ()
cut5 =
  method0 "Cut"
          []

copy6 :: Selection a0
      -> IO ()
copy6 =
  method0 "Copy"
          []

paste0 :: Selection a0
       -> IO ()
paste0 =
  method0 "Paste"
          []

insertBreak0 :: (Variant a1)
             => a1
             -> Selection a0
             -> IO ()
insertBreak0 type0 =
  method0 "InsertBreak"
          [inVariant type0]

insertFile0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
            => String
            -> a1
            -> a2
            -> a3
            -> a4
            -> Selection a0
            -> IO ()
insertFile0 fileName range0 confirmConversions link attachment =
  method0 "InsertFile"
          [ inString fileName
          , inVariant range0
          , inVariant confirmConversions
          , inVariant link
          , inVariant attachment
          ]

inStory0 :: Range a1
         -> Selection a0
         -> IO Bool
inStory0 range0 =
  function1 "InStory"
            [inIDispatch range0]
            outBool

inRange0 :: Range a1
         -> Selection a0
         -> IO Bool
inRange0 range0 =
  function1 "InRange"
            [inIDispatch range0]
            outBool

delete29 :: (Variant a1, Variant a2)
         => a1
         -> a2
         -> Selection a0
         -> IO Int32
delete29 unit count =
  function1 "Delete"
            [ inVariant unit
            , inVariant count
            ]
            outInt32

expand0 :: (Variant a1)
        => a1
        -> Selection a0
        -> IO Int32
expand0 unit =
  function1 "Expand"
            [inVariant unit]
            outInt32

insertParagraph0 :: Selection a0
                 -> IO ()
insertParagraph0 =
  method0 "InsertParagraph"
          []

insertParagraphAfter0 :: Selection a0
                      -> IO ()
insertParagraphAfter0 =
  method0 "InsertParagraphAfter"
          []

convertToTableOld0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
                   => a1
                   -> a2
                   -> a3
                   -> a4
                   -> a5
                   -> a6
                   -> a7
                   -> a8
                   -> a9
                   -> a10
                   -> a11
                   -> a12
                   -> a13
                   -> a14
                   -> Selection a0
                   -> IO (Table ())
convertToTableOld0 separator numRows numColumns initialColumnWidth format applyBorders applyShading applyFont applyColor applyHeadingRows applyLastRow applyFirstColumn applyLastColumn autoFit2 =
  function1 "ConvertToTableOld"
            [ inVariant separator
            , inVariant numRows
            , inVariant numColumns
            , inVariant initialColumnWidth
            , inVariant format
            , inVariant applyBorders
            , inVariant applyShading
            , inVariant applyFont
            , inVariant applyColor
            , inVariant applyHeadingRows
            , inVariant applyLastRow
            , inVariant applyFirstColumn
            , inVariant applyLastColumn
            , inVariant autoFit2
            ]
            outIDispatch

insertDateTimeOld0 :: (Variant a1, Variant a2, Variant a3)
                   => a1
                   -> a2
                   -> a3
                   -> Selection a0
                   -> IO ()
insertDateTimeOld0 dateTimeFormat insertAsField insertAsFullWidth =
  method0 "InsertDateTimeOld"
          [ inVariant dateTimeFormat
          , inVariant insertAsField
          , inVariant insertAsFullWidth
          ]

insertSymbol0 :: (Variant a1, Variant a2, Variant a3)
              => Int32
              -> a1
              -> a2
              -> a3
              -> Selection a0
              -> IO ()
insertSymbol0 characterNumber font unicode bias =
  method0 "InsertSymbol"
          [ inInt32 characterNumber
          , inVariant font
          , inVariant unicode
          , inVariant bias
          ]

insertCrossReference_20020 :: (Variant a1, Variant a2, Variant a3, Variant a4)
                           => a1
                           -> WdReferenceKind
                           -> a2
                           -> a3
                           -> a4
                           -> Selection a0
                           -> IO ()
insertCrossReference_20020 referenceType referenceKind referenceItem insertAsHyperlink includePosition =
  method0 "InsertCrossReference_2002"
          [ inVariant referenceType
          , inEnum referenceKind
          , inVariant referenceItem
          , inVariant insertAsHyperlink
          , inVariant includePosition
          ]

insertCaptionXP0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> Selection a0
                 -> IO ()
insertCaptionXP0 label title titleAutoText position =
  method0 "InsertCaptionXP"
          [ inVariant label
          , inVariant title
          , inVariant titleAutoText
          , inVariant position
          ]

copyAsPicture0 :: Selection a0
               -> IO ()
copyAsPicture0 =
  method0 "CopyAsPicture"
          []

sortOld2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> Selection a0
         -> IO ()
sortOld2 excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 sortColumn separator caseSensitive languageID =
  method0 "SortOld"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant sortColumn
          , inVariant separator
          , inVariant caseSensitive
          , inVariant languageID
          ]

sortAscending1 :: Selection a0
               -> IO ()
sortAscending1 =
  method0 "SortAscending"
          []

sortDescending1 :: Selection a0
                -> IO ()
sortDescending1 =
  method0 "SortDescending"
          []

isEqual0 :: Range a1
         -> Selection a0
         -> IO Bool
isEqual0 range0 =
  function1 "IsEqual"
            [inIDispatch range0]
            outBool

calculate0 :: Selection a0
           -> IO Float
calculate0 =
  function1 "Calculate"
            []
            outFloat

goTo1 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => a1
      -> a2
      -> a3
      -> a4
      -> Selection a0
      -> IO (Range ())
goTo1 what which count name =
  function1 "GoTo"
            [ inVariant what
            , inVariant which
            , inVariant count
            , inVariant name
            ]
            outIDispatch

goToNext0 :: WdGoToItem
          -> Selection a0
          -> IO (Range ())
goToNext0 what =
  function1 "GoToNext"
            [inEnum what]
            outIDispatch

goToPrevious0 :: WdGoToItem
              -> Selection a0
              -> IO (Range ())
goToPrevious0 what =
  function1 "GoToPrevious"
            [inEnum what]
            outIDispatch

pasteSpecial0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> Selection a0
              -> IO ()
pasteSpecial0 iconIndex link placement displayAsIcon dataType iconFileName iconLabel =
  method0 "PasteSpecial"
          [ inVariant iconIndex
          , inVariant link
          , inVariant placement
          , inVariant displayAsIcon
          , inVariant dataType
          , inVariant iconFileName
          , inVariant iconLabel
          ]

previousField :: Selection a0
              -> IO (Field ())
previousField =
  function1 "PreviousField"
            []
            outIDispatch

nextField :: Selection a0
          -> IO (Field ())
nextField =
  function1 "NextField"
            []
            outIDispatch

insertParagraphBefore0 :: Selection a0
                       -> IO ()
insertParagraphBefore0 =
  method0 "InsertParagraphBefore"
          []

insertCells :: (Variant a1)
            => a1
            -> Selection a0
            -> IO ()
insertCells shiftCells =
  method0 "InsertCells"
          [inVariant shiftCells]

extend :: (Variant a1)
       => a1
       -> Selection a0
       -> IO ()
extend character =
  method0 "Extend"
          [inVariant character]

shrink0 :: Selection a0
        -> IO ()
shrink0 =
  method0 "Shrink"
          []

moveLeft :: (Variant a1, Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> Selection a0
         -> IO Int32
moveLeft unit count extend0 =
  function1 "MoveLeft"
            [ inVariant unit
            , inVariant count
            , inVariant extend0
            ]
            outInt32

moveRight :: (Variant a1, Variant a2, Variant a3)
          => a1
          -> a2
          -> a3
          -> Selection a0
          -> IO Int32
moveRight unit count extend0 =
  function1 "MoveRight"
            [ inVariant unit
            , inVariant count
            , inVariant extend0
            ]
            outInt32

moveUp :: (Variant a1, Variant a2, Variant a3)
       => a1
       -> a2
       -> a3
       -> Selection a0
       -> IO Int32
moveUp unit count extend0 =
  function1 "MoveUp"
            [ inVariant unit
            , inVariant count
            , inVariant extend0
            ]
            outInt32

moveDown :: (Variant a1, Variant a2, Variant a3)
         => a1
         -> a2
         -> a3
         -> Selection a0
         -> IO Int32
moveDown unit count extend0 =
  function1 "MoveDown"
            [ inVariant unit
            , inVariant count
            , inVariant extend0
            ]
            outInt32

homeKey :: (Variant a1, Variant a2)
        => a1
        -> a2
        -> Selection a0
        -> IO Int32
homeKey unit extend0 =
  function1 "HomeKey"
            [ inVariant unit
            , inVariant extend0
            ]
            outInt32

endKey :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Selection a0
       -> IO Int32
endKey unit extend0 =
  function1 "EndKey"
            [ inVariant unit
            , inVariant extend0
            ]
            outInt32

escapeKey :: Selection a0
          -> IO ()
escapeKey =
  method0 "EscapeKey"
          []

typeText :: String
         -> Selection a0
         -> IO ()
typeText text =
  method0 "TypeText"
          [inString text]

copyFormat :: Selection a0
           -> IO ()
copyFormat =
  method0 "CopyFormat"
          []

pasteFormat :: Selection a0
            -> IO ()
pasteFormat =
  method0 "PasteFormat"
          []

typeParagraph :: Selection a0
              -> IO ()
typeParagraph =
  method0 "TypeParagraph"
          []

typeBackspace :: Selection a0
              -> IO ()
typeBackspace =
  method0 "TypeBackspace"
          []

nextSubdocument0 :: Selection a0
                 -> IO ()
nextSubdocument0 =
  method0 "NextSubdocument"
          []

previousSubdocument0 :: Selection a0
                     -> IO ()
previousSubdocument0 =
  method0 "PreviousSubdocument"
          []

selectColumn :: Selection a0
             -> IO ()
selectColumn =
  method0 "SelectColumn"
          []

selectCurrentFont :: Selection a0
                  -> IO ()
selectCurrentFont =
  method0 "SelectCurrentFont"
          []

selectCurrentAlignment :: Selection a0
                       -> IO ()
selectCurrentAlignment =
  method0 "SelectCurrentAlignment"
          []

selectCurrentSpacing :: Selection a0
                     -> IO ()
selectCurrentSpacing =
  method0 "SelectCurrentSpacing"
          []

selectCurrentIndent :: Selection a0
                    -> IO ()
selectCurrentIndent =
  method0 "SelectCurrentIndent"
          []

selectCurrentTabs :: Selection a0
                  -> IO ()
selectCurrentTabs =
  method0 "SelectCurrentTabs"
          []

selectCurrentColor :: Selection a0
                   -> IO ()
selectCurrentColor =
  method0 "SelectCurrentColor"
          []

createTextbox :: Selection a0
              -> IO ()
createTextbox =
  method0 "CreateTextbox"
          []

wholeStory0 :: Selection a0
            -> IO ()
wholeStory0 =
  method0 "WholeStory"
          []

selectRow :: Selection a0
          -> IO ()
selectRow =
  method0 "SelectRow"
          []

splitTable :: Selection a0
           -> IO ()
splitTable =
  method0 "SplitTable"
          []

insertRows :: (Variant a1)
           => a1
           -> Selection a0
           -> IO ()
insertRows numRows =
  method0 "InsertRows"
          [inVariant numRows]

insertColumns :: Selection a0
              -> IO ()
insertColumns =
  method0 "InsertColumns"
          []

insertFormula :: (Variant a1, Variant a2)
              => a1
              -> a2
              -> Selection a0
              -> IO ()
insertFormula formula0 numberFormat =
  method0 "InsertFormula"
          [ inVariant formula0
          , inVariant numberFormat
          ]

nextRevision :: (Variant a1)
             => a1
             -> Selection a0
             -> IO (Revision ())
nextRevision wrap =
  function1 "NextRevision"
            [inVariant wrap]
            outIUnknown

previousRevision :: (Variant a1)
                 => a1
                 -> Selection a0
                 -> IO (Revision ())
previousRevision wrap =
  function1 "PreviousRevision"
            [inVariant wrap]
            outIUnknown

pasteAsNestedTable0 :: Selection a0
                    -> IO ()
pasteAsNestedTable0 =
  method0 "PasteAsNestedTable"
          []

createAutoTextEntry :: String
                    -> String
                    -> Selection a0
                    -> IO (AutoTextEntry ())
createAutoTextEntry name styleName =
  function1 "CreateAutoTextEntry"
            [ inString name
            , inString styleName
            ]
            outIDispatch

detectLanguage1 :: Selection a0
                -> IO ()
detectLanguage1 =
  method0 "DetectLanguage"
          []

selectCell :: Selection a0
           -> IO ()
selectCell =
  method0 "SelectCell"
          []

insertRowsBelow :: (Variant a1)
                => a1
                -> Selection a0
                -> IO ()
insertRowsBelow numRows =
  method0 "InsertRowsBelow"
          [inVariant numRows]

insertColumnsRight :: Selection a0
                   -> IO ()
insertColumnsRight =
  method0 "InsertColumnsRight"
          []

insertRowsAbove :: (Variant a1)
                => a1
                -> Selection a0
                -> IO ()
insertRowsAbove numRows =
  method0 "InsertRowsAbove"
          [inVariant numRows]

rtlRun :: Selection a0
       -> IO ()
rtlRun =
  method0 "RtlRun"
          []

ltrRun :: Selection a0
       -> IO ()
ltrRun =
  method0 "LtrRun"
          []

boldRun :: Selection a0
        -> IO ()
boldRun =
  method0 "BoldRun"
          []

italicRun :: Selection a0
          -> IO ()
italicRun =
  method0 "ItalicRun"
          []

rtlPara :: Selection a0
        -> IO ()
rtlPara =
  method0 "RtlPara"
          []

ltrPara :: Selection a0
        -> IO ()
ltrPara =
  method0 "LtrPara"
          []

insertDateTime0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> Selection a0
                -> IO ()
insertDateTime0 dateTimeFormat insertAsField insertAsFullWidth dateLanguage calendarType =
  method0 "InsertDateTime"
          [ inVariant dateTimeFormat
          , inVariant insertAsField
          , inVariant insertAsFullWidth
          , inVariant dateLanguage
          , inVariant calendarType
          ]

sort2000 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19)
         => a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> a6
         -> a7
         -> a8
         -> a9
         -> a10
         -> a11
         -> a12
         -> a13
         -> a14
         -> a15
         -> a16
         -> a17
         -> a18
         -> a19
         -> Selection a0
         -> IO ()
sort2000 excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 sortColumn separator caseSensitive bidiSort ignoreThe ignoreKashida ignoreDiacritics ignoreHe languageID =
  method0 "Sort2000"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant sortColumn
          , inVariant separator
          , inVariant caseSensitive
          , inVariant bidiSort
          , inVariant ignoreThe
          , inVariant ignoreKashida
          , inVariant ignoreDiacritics
          , inVariant ignoreHe
          , inVariant languageID
          ]

convertToTable0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> a7
                -> a8
                -> a9
                -> a10
                -> a11
                -> a12
                -> a13
                -> a14
                -> a15
                -> a16
                -> Selection a0
                -> IO (Table ())
convertToTable0 separator numRows numColumns initialColumnWidth format applyBorders applyShading applyFont applyColor applyHeadingRows applyLastRow applyFirstColumn applyLastColumn autoFit2 autoFitBehavior0 defaultTableBehavior =
  function1 "ConvertToTable"
            [ inVariant separator
            , inVariant numRows
            , inVariant numColumns
            , inVariant initialColumnWidth
            , inVariant format
            , inVariant applyBorders
            , inVariant applyShading
            , inVariant applyFont
            , inVariant applyColor
            , inVariant applyHeadingRows
            , inVariant applyLastRow
            , inVariant applyFirstColumn
            , inVariant applyLastColumn
            , inVariant autoFit2
            , inVariant autoFitBehavior0
            , inVariant defaultTableBehavior
            ]
            outIDispatch

getNoProofing4 :: Selection a0
               -> IO Int32
getNoProofing4 =
  propertyGet "NoProofing"
              []
              outInt32

setNoProofing4 :: Int32
               -> Selection a0
               -> IO ()
setNoProofing4 prop =
  propertySet "NoProofing"
              [inInt32 prop]

getTopLevelTables0 :: Selection a0
                   -> IO (Tables ())
getTopLevelTables0 =
  propertyGet "TopLevelTables"
              []
              outIDispatch

getLanguageDetected1 :: Selection a0
                     -> IO Bool
getLanguageDetected1 =
  propertyGet "LanguageDetected"
              []
              outBool

setLanguageDetected1 :: Bool
                     -> Selection a0
                     -> IO ()
setLanguageDetected1 prop =
  propertySet "LanguageDetected"
              [inBool prop]

getFitTextWidth0 :: Selection a0
                 -> IO Float
getFitTextWidth0 =
  propertyGet "FitTextWidth"
              []
              outFloat

setFitTextWidth0 :: Float
                 -> Selection a0
                 -> IO ()
setFitTextWidth0 prop =
  propertySet "FitTextWidth"
              [inFloat prop]

clearFormatting1 :: Selection a0
                 -> IO ()
clearFormatting1 =
  method0 "ClearFormatting"
          []

pasteAppendTable0 :: Selection a0
                  -> IO ()
pasteAppendTable0 =
  method0 "PasteAppendTable"
          []

getHTMLDivisions1 :: Selection a0
                  -> IO (HTMLDivisions ())
getHTMLDivisions1 =
  propertyGet "HTMLDivisions"
              []
              outIUnknown

getSmartTags1 :: Selection a0
              -> IO (SmartTags ())
getSmartTags1 =
  propertyGet "SmartTags"
              []
              outIUnknown

getChildShapeRange :: Selection a0
                   -> IO (ShapeRange ())
getChildShapeRange =
  propertyGet "ChildShapeRange"
              []
              outIUnknown

getHasChildShapeRange :: Selection a0
                      -> IO Bool
getHasChildShapeRange =
  propertyGet "HasChildShapeRange"
              []
              outBool

getFootnoteOptions0 :: Selection a0
                    -> IO (FootnoteOptions ())
getFootnoteOptions0 =
  propertyGet "FootnoteOptions"
              []
              outIUnknown

getEndnoteOptions0 :: Selection a0
                   -> IO (EndnoteOptions ())
getEndnoteOptions0 =
  propertyGet "EndnoteOptions"
              []
              outIUnknown

toggleCharacterCode :: Selection a0
                    -> IO ()
toggleCharacterCode =
  method0 "ToggleCharacterCode"
          []

pasteAndFormat0 :: WdRecoveryType
                -> Selection a0
                -> IO ()
pasteAndFormat0 type0 =
  method0 "PasteAndFormat"
          [inEnum type0]

pasteExcelTable0 :: Bool
                 -> Bool
                 -> Bool
                 -> Selection a0
                 -> IO ()
pasteExcelTable0 linkedToExcel wordFormatting rTF =
  method0 "PasteExcelTable"
          [ inBool linkedToExcel
          , inBool wordFormatting
          , inBool rTF
          ]

shrinkDiscontiguousSelection :: Selection a0
                             -> IO ()
shrinkDiscontiguousSelection =
  method0 "ShrinkDiscontiguousSelection"
          []

insertStyleSeparator :: Selection a0
                     -> IO ()
insertStyleSeparator =
  method0 "InsertStyleSeparator"
          []

sort2 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12, Variant a13, Variant a14, Variant a15, Variant a16, Variant a17, Variant a18, Variant a19, Variant a20, Variant a21, Variant a22)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> a10
      -> a11
      -> a12
      -> a13
      -> a14
      -> a15
      -> a16
      -> a17
      -> a18
      -> a19
      -> a20
      -> a21
      -> a22
      -> Selection a0
      -> IO ()
sort2 excludeHeader fieldNumber sortFieldType sortOrder fieldNumber2 sortFieldType2 sortOrder2 fieldNumber3 sortFieldType3 sortOrder3 sortColumn separator caseSensitive bidiSort ignoreThe ignoreKashida ignoreDiacritics ignoreHe languageID subFieldNumber subFieldNumber2 subFieldNumber3 =
  method0 "Sort"
          [ inVariant excludeHeader
          , inVariant fieldNumber
          , inVariant sortFieldType
          , inVariant sortOrder
          , inVariant fieldNumber2
          , inVariant sortFieldType2
          , inVariant sortOrder2
          , inVariant fieldNumber3
          , inVariant sortFieldType3
          , inVariant sortOrder3
          , inVariant sortColumn
          , inVariant separator
          , inVariant caseSensitive
          , inVariant bidiSort
          , inVariant ignoreThe
          , inVariant ignoreKashida
          , inVariant ignoreDiacritics
          , inVariant ignoreHe
          , inVariant languageID
          , inVariant subFieldNumber
          , inVariant subFieldNumber2
          , inVariant subFieldNumber3
          ]

getXMLNodes1 :: Selection a0
             -> IO (XMLNodes ())
getXMLNodes1 =
  propertyGet "XMLNodes"
              []
              outIUnknown

getXMLParentNode0 :: Selection a0
                  -> IO (XMLNode ())
getXMLParentNode0 =
  propertyGet "XMLParentNode"
              []
              outIUnknown

getEditors0 :: Selection a0
            -> IO (Editors ())
getEditors0 =
  propertyGet "Editors"
              []
              outIUnknown

getXML0 :: (Variant a1)
        => a1
        -> Selection a0
        -> IO String
getXML0 dataOnly =
  propertyGet "XML"
              [inDefaultValue (inInt32 0) inVariant dataOnly]
              outString

getEnhMetaFileBits0 :: (Variant a1)
                    => Selection a0
                    -> IO a1
getEnhMetaFileBits0 =
  propertyGet "EnhMetaFileBits"
              []
              outVariant

goToEditableRange0 :: (Variant a1)
                   => a1
                   -> Selection a0
                   -> IO (Range ())
goToEditableRange0 editorID =
  function1 "GoToEditableRange"
            [inVariant editorID]
            outIDispatch

insertXML0 :: (Variant a1)
           => String
           -> a1
           -> Selection a0
           -> IO ()
insertXML0 xML transform =
  method0 "InsertXML"
          [ inString xML
          , inVariant transform
          ]

insertCaption0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
               => a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> Selection a0
               -> IO ()
insertCaption0 label title titleAutoText position excludeLabel =
  method0 "InsertCaption"
          [ inVariant label
          , inVariant title
          , inVariant titleAutoText
          , inVariant position
          , inVariant excludeLabel
          ]

insertCrossReference0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                      => a1
                      -> WdReferenceKind
                      -> a2
                      -> a3
                      -> a4
                      -> a5
                      -> a6
                      -> Selection a0
                      -> IO ()
insertCrossReference0 referenceType referenceKind referenceItem insertAsHyperlink includePosition separateNumbers separatorString =
  method0 "InsertCrossReference"
          [ inVariant referenceType
          , inEnum referenceKind
          , inVariant referenceItem
          , inVariant insertAsHyperlink
          , inVariant includePosition
          , inVariant separateNumbers
          , inVariant separatorString
          ]

getOMaths1 :: Selection a0
           -> IO (OMaths ())
getOMaths1 =
  propertyGet "OMaths"
              []
              outIUnknown

getWordOpenXML1 :: Selection a0
                -> IO String
getWordOpenXML1 =
  propertyGet "WordOpenXML"
              []
              outString

clearParagraphStyle :: Selection a0
                    -> IO ()
clearParagraphStyle =
  method0 "ClearParagraphStyle"
          []

clearCharacterAllFormatting :: Selection a0
                            -> IO ()
clearCharacterAllFormatting =
  method0 "ClearCharacterAllFormatting"
          []

clearCharacterStyle :: Selection a0
                    -> IO ()
clearCharacterStyle =
  method0 "ClearCharacterStyle"
          []

clearCharacterDirectFormatting :: Selection a0
                               -> IO ()
clearCharacterDirectFormatting =
  method0 "ClearCharacterDirectFormatting"
          []

getContentControls1 :: Selection a0
                    -> IO (ContentControls ())
getContentControls1 =
  propertyGet "ContentControls"
              []
              outIUnknown

getParentContentControl0 :: Selection a0
                         -> IO (ContentControl ())
getParentContentControl0 =
  propertyGet "ParentContentControl"
              []
              outIUnknown

exportAsFixedFormat1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                     => String
                     -> WdExportFormat
                     -> a1
                     -> a2
                     -> a3
                     -> a4
                     -> a5
                     -> a6
                     -> a7
                     -> a8
                     -> a9
                     -> a10
                     -> a11
                     -> Selection a0
                     -> IO ()
exportAsFixedFormat1 outputFileName exportFormat openAfterExport optimizeFor exportCurrentPage item40 includeDocProps keepIRM createBookmarks docStructureTags bitmapMissingFonts useISO19005_1 fixedFormatExtClassPtr =
  method0 "ExportAsFixedFormat"
          [ inString outputFileName
          , inEnum exportFormat
          , inDefaultValue (inInt32 0) inVariant openAfterExport
          , inDefaultValue (inInt32 0) inVariant optimizeFor
          , inDefaultValue (inInt32 0) inVariant exportCurrentPage
          , inDefaultValue (inInt32 0) inVariant item40
          , inDefaultValue (inInt32 0) inVariant includeDocProps
          , inDefaultValue (inInt32 (-1)) inVariant keepIRM
          , inDefaultValue (inInt32 0) inVariant createBookmarks
          , inDefaultValue (inInt32 (-1)) inVariant docStructureTags
          , inDefaultValue (inInt32 (-1)) inVariant bitmapMissingFonts
          , inDefaultValue (inInt32 0) inVariant useISO19005_1
          , inVariant fixedFormatExtClassPtr
          ]

readingModeGrowFont :: Selection a0
                    -> IO ()
readingModeGrowFont =
  method0 "ReadingModeGrowFont"
          []

readingModeShrinkFont :: Selection a0
                      -> IO ()
readingModeShrinkFont =
  method0 "ReadingModeShrinkFont"
          []

clearParagraphAllFormatting :: Selection a0
                            -> IO ()
clearParagraphAllFormatting =
  method0 "ClearParagraphAllFormatting"
          []

clearParagraphDirectFormatting :: Selection a0
                               -> IO ()
clearParagraphDirectFormatting =
  method0 "ClearParagraphDirectFormatting"
          []

insertNewPage :: Selection a0
              -> IO ()
insertNewPage =
  method0 "InsertNewPage"
          []

-- --------------------------------------------------
-- 
-- interface TablesOfAuthoritiesCategories
-- 
-- --------------------------------------------------
data TablesOfAuthoritiesCategories_ a = TablesOfAuthoritiesCategories__
                                          
type TablesOfAuthoritiesCategories a = IDispatch (TablesOfAuthoritiesCategories_ a)
iidTablesOfAuthoritiesCategories :: IID (TablesOfAuthoritiesCategories ())
iidTablesOfAuthoritiesCategories =
  mkIID "{00020976-0000-0000-C000-000000000046}"

getApplication104 :: TablesOfAuthoritiesCategories a0
                  -> IO (Maybe Application)
getApplication104 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator104 :: TablesOfAuthoritiesCategories a0
              -> IO Int32
getCreator104 =
  propertyGet "Creator"
              []
              outInt32

getParent104 :: TablesOfAuthoritiesCategories a0
             -> IO (IDispatch ())
getParent104 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum40 :: TablesOfAuthoritiesCategories a0
             -> IO (IUnknown ())
getNewEnum40 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount40 :: TablesOfAuthoritiesCategories a0
           -> IO Int32
getCount40 =
  propertyGet "Count"
              []
              outInt32

item40 :: (Variant a1)
       => a1
       -> TablesOfAuthoritiesCategories a0
       -> IO (TableOfAuthoritiesCategory ())
item40 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface TableOfAuthoritiesCategory
-- 
-- --------------------------------------------------
data TableOfAuthoritiesCategory_ a = TableOfAuthoritiesCategory__ 
type TableOfAuthoritiesCategory a = IDispatch (TableOfAuthoritiesCategory_ a)
iidTableOfAuthoritiesCategory :: IID (TableOfAuthoritiesCategory ())
iidTableOfAuthoritiesCategory =
  mkIID "{00020977-0000-0000-C000-000000000046}"

getApplication105 :: TableOfAuthoritiesCategory a0
                  -> IO (Maybe Application)
getApplication105 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator105 :: TableOfAuthoritiesCategory a0
              -> IO Int32
getCreator105 =
  propertyGet "Creator"
              []
              outInt32

getParent105 :: TableOfAuthoritiesCategory a0
             -> IO (IDispatch ())
getParent105 =
  propertyGet "Parent"
              []
              outIDispatch

getName19 :: TableOfAuthoritiesCategory a0
          -> IO String
getName19 =
  propertyGet "Name"
              []
              outString

setName6 :: String
         -> TableOfAuthoritiesCategory a0
         -> IO ()
setName6 prop =
  propertySet "Name"
              [inString prop]

getIndex18 :: TableOfAuthoritiesCategory a0
           -> IO Int32
getIndex18 =
  propertyGet "Index"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface CaptionLabels
-- 
-- --------------------------------------------------
data CaptionLabels_ a = CaptionLabels__ 
type CaptionLabels a = IDispatch (CaptionLabels_ a)
iidCaptionLabels :: IID (CaptionLabels ())
iidCaptionLabels = mkIID "{00020978-0000-0000-C000-000000000046}"

getApplication106 :: CaptionLabels a0
                  -> IO (Maybe Application)
getApplication106 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator106 :: CaptionLabels a0
              -> IO Int32
getCreator106 =
  propertyGet "Creator"
              []
              outInt32

getParent106 :: CaptionLabels a0
             -> IO (IDispatch ())
getParent106 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum41 :: CaptionLabels a0
             -> IO (IUnknown ())
getNewEnum41 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount41 :: CaptionLabels a0
           -> IO Int32
getCount41 =
  propertyGet "Count"
              []
              outInt32

item41 :: (Variant a1)
       => a1
       -> CaptionLabels a0
       -> IO (CaptionLabel ())
item41 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add30 :: String
      -> CaptionLabels a0
      -> IO (CaptionLabel ())
add30 name =
  function1 "Add"
            [inString name]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface CaptionLabel
-- 
-- --------------------------------------------------
data CaptionLabel_ a = CaptionLabel__ 
type CaptionLabel a = IDispatch (CaptionLabel_ a)
iidCaptionLabel :: IID (CaptionLabel ())
iidCaptionLabel = mkIID "{00020979-0000-0000-C000-000000000046}"

getApplication107 :: CaptionLabel a0
                  -> IO (Maybe Application)
getApplication107 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator107 :: CaptionLabel a0
              -> IO Int32
getCreator107 =
  propertyGet "Creator"
              []
              outInt32

getParent107 :: CaptionLabel a0
             -> IO (IDispatch ())
getParent107 =
  propertyGet "Parent"
              []
              outIDispatch

getName20 :: CaptionLabel a0
          -> IO String
getName20 =
  propertyGet "Name"
              []
              outString

getBuiltIn0 :: CaptionLabel a0
            -> IO Bool
getBuiltIn0 =
  propertyGet "BuiltIn"
              []
              outBool

getID5 :: CaptionLabel a0
       -> IO WdCaptionLabelID
getID5 =
  propertyGet "ID"
              []
              outEnum

getIncludeChapterNumber :: CaptionLabel a0
                        -> IO Bool
getIncludeChapterNumber =
  propertyGet "IncludeChapterNumber"
              []
              outBool

setIncludeChapterNumber :: Bool
                        -> CaptionLabel a0
                        -> IO ()
setIncludeChapterNumber prop =
  propertySet "IncludeChapterNumber"
              [inBool prop]

getNumberStyle1 :: CaptionLabel a0
                -> IO WdCaptionNumberStyle
getNumberStyle1 =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle1 :: WdCaptionNumberStyle
                -> CaptionLabel a0
                -> IO ()
setNumberStyle1 prop =
  propertySet "NumberStyle"
              [inEnum prop]

getChapterStyleLevel :: CaptionLabel a0
                     -> IO Int32
getChapterStyleLevel =
  propertyGet "ChapterStyleLevel"
              []
              outInt32

setChapterStyleLevel :: Int32
                     -> CaptionLabel a0
                     -> IO ()
setChapterStyleLevel prop =
  propertySet "ChapterStyleLevel"
              [inInt32 prop]

getSeparator2 :: CaptionLabel a0
              -> IO WdSeparatorType
getSeparator2 =
  propertyGet "Separator"
              []
              outEnum

setSeparator0 :: WdSeparatorType
              -> CaptionLabel a0
              -> IO ()
setSeparator0 prop =
  propertySet "Separator"
              [inEnum prop]

getPosition2 :: CaptionLabel a0
             -> IO WdCaptionPosition
getPosition2 =
  propertyGet "Position"
              []
              outEnum

setPosition2 :: WdCaptionPosition
             -> CaptionLabel a0
             -> IO ()
setPosition2 prop =
  propertySet "Position"
              [inEnum prop]

delete30 :: CaptionLabel a0
         -> IO ()
delete30 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface AutoCaptions
-- 
-- --------------------------------------------------
data AutoCaptions_ a = AutoCaptions__ 
type AutoCaptions a = IDispatch (AutoCaptions_ a)
iidAutoCaptions :: IID (AutoCaptions ())
iidAutoCaptions = mkIID "{0002097A-0000-0000-C000-000000000046}"

getApplication108 :: AutoCaptions a0
                  -> IO (Maybe Application)
getApplication108 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator108 :: AutoCaptions a0
              -> IO Int32
getCreator108 =
  propertyGet "Creator"
              []
              outInt32

getParent108 :: AutoCaptions a0
             -> IO (IDispatch ())
getParent108 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum42 :: AutoCaptions a0
             -> IO (IUnknown ())
getNewEnum42 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount42 :: AutoCaptions a0
           -> IO Int32
getCount42 =
  propertyGet "Count"
              []
              outInt32

item42 :: (Variant a1)
       => a1
       -> AutoCaptions a0
       -> IO (AutoCaption ())
item42 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

cancelAutoInsert :: AutoCaptions a0
                 -> IO ()
cancelAutoInsert =
  method0 "CancelAutoInsert"
          []

-- --------------------------------------------------
-- 
-- interface AutoCaption
-- 
-- --------------------------------------------------
data AutoCaption_ a = AutoCaption__ 
type AutoCaption a = IDispatch (AutoCaption_ a)
iidAutoCaption :: IID (AutoCaption ())
iidAutoCaption = mkIID "{0002097B-0000-0000-C000-000000000046}"

getApplication109 :: AutoCaption a0
                  -> IO (Maybe Application)
getApplication109 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator109 :: AutoCaption a0
              -> IO Int32
getCreator109 =
  propertyGet "Creator"
              []
              outInt32

getParent109 :: AutoCaption a0
             -> IO (IDispatch ())
getParent109 =
  propertyGet "Parent"
              []
              outIDispatch

getName21 :: AutoCaption a0
          -> IO String
getName21 =
  propertyGet "Name"
              []
              outString

getAutoInsert :: AutoCaption a0
              -> IO Bool
getAutoInsert =
  propertyGet "AutoInsert"
              []
              outBool

setAutoInsert :: Bool
              -> AutoCaption a0
              -> IO ()
setAutoInsert prop =
  propertySet "AutoInsert"
              [inBool prop]

getIndex19 :: AutoCaption a0
           -> IO Int32
getIndex19 =
  propertyGet "Index"
              []
              outInt32

getCaptionLabel :: (Variant a1)
                => AutoCaption a0
                -> IO a1
getCaptionLabel =
  propertyGet "CaptionLabel"
              []
              outVariant

setCaptionLabel :: (Variant a1)
                => a1
                -> AutoCaption a0
                -> IO ()
setCaptionLabel prop =
  propertySet "CaptionLabel"
              [inVariant prop]

-- --------------------------------------------------
-- 
-- interface Indexes
-- 
-- --------------------------------------------------
data Indexes_ a = Indexes__ 
type Indexes a = IDispatch (Indexes_ a)
iidIndexes :: IID (Indexes ())
iidIndexes = mkIID "{0002097C-0000-0000-C000-000000000046}"

getApplication110 :: Indexes a0
                  -> IO (Maybe Application)
getApplication110 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator110 :: Indexes a0
              -> IO Int32
getCreator110 =
  propertyGet "Creator"
              []
              outInt32

getParent110 :: Indexes a0
             -> IO (IDispatch ())
getParent110 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum43 :: Indexes a0
             -> IO (IUnknown ())
getNewEnum43 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount43 :: Indexes a0
           -> IO Int32
getCount43 =
  propertyGet "Count"
              []
              outInt32

getFormat6 :: Indexes a0
           -> IO WdIndexFormat
getFormat6 =
  propertyGet "Format"
              []
              outEnum

setFormat5 :: WdIndexFormat
           -> Indexes a0
           -> IO ()
setFormat5 prop =
  propertySet "Format"
              [inEnum prop]

item43 :: Int32
       -> Indexes a0
       -> IO (Index ())
item43 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

addOld3 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
        => Range a1
        -> a2
        -> a3
        -> a4
        -> a5
        -> a6
        -> Indexes a0
        -> IO (Index ())
addOld3 range0 headingSeparator rightAlignPageNumbers type0 numberOfColumns accentedLetters =
  function1 "AddOld"
            [ inIDispatch range0
            , inVariant headingSeparator
            , inVariant rightAlignPageNumbers
            , inVariant type0
            , inVariant numberOfColumns
            , inVariant accentedLetters
            ]
            outIUnknown

markEntry1 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
           => Range a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> a8
           -> a9
           -> Indexes a0
           -> IO (Field ())
markEntry1 range0 entry entryAutoText crossReference crossReferenceAutoText bookmarkName bold italic reading =
  function1 "MarkEntry"
            [ inIDispatch range0
            , inVariant entry
            , inVariant entryAutoText
            , inVariant crossReference
            , inVariant crossReferenceAutoText
            , inVariant bookmarkName
            , inVariant bold
            , inVariant italic
            , inVariant reading
            ]
            outIDispatch

markAllEntries :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
               => Range a1
               -> a2
               -> a3
               -> a4
               -> a5
               -> a6
               -> a7
               -> a8
               -> Indexes a0
               -> IO ()
markAllEntries range0 entry entryAutoText crossReference crossReferenceAutoText bookmarkName bold italic =
  method0 "MarkAllEntries"
          [ inIDispatch range0
          , inVariant entry
          , inVariant entryAutoText
          , inVariant crossReference
          , inVariant crossReferenceAutoText
          , inVariant bookmarkName
          , inVariant bold
          , inVariant italic
          ]

autoMarkEntries :: String
                -> Indexes a0
                -> IO ()
autoMarkEntries concordanceFileName =
  method0 "AutoMarkEntries"
          [inString concordanceFileName]

add31 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
      => Range a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> Indexes a0
      -> IO (Index ())
add31 range0 headingSeparator rightAlignPageNumbers type0 numberOfColumns accentedLetters sortBy indexLanguage =
  function1 "Add"
            [ inIDispatch range0
            , inVariant headingSeparator
            , inVariant rightAlignPageNumbers
            , inVariant type0
            , inVariant numberOfColumns
            , inVariant accentedLetters
            , inVariant sortBy
            , inVariant indexLanguage
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Index
-- 
-- --------------------------------------------------
data Index_ a = Index__ 
type Index a = IDispatch (Index_ a)
iidIndex :: IID (Index ())
iidIndex = mkIID "{0002097D-0000-0000-C000-000000000046}"

getApplication111 :: Index a0
                  -> IO (Maybe Application)
getApplication111 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator111 :: Index a0
              -> IO Int32
getCreator111 =
  propertyGet "Creator"
              []
              outInt32

getParent111 :: Index a0
             -> IO (IDispatch ())
getParent111 =
  propertyGet "Parent"
              []
              outIDispatch

getHeadingSeparator :: Index a0
                    -> IO WdHeadingSeparator
getHeadingSeparator =
  propertyGet "HeadingSeparator"
              []
              outEnum

setHeadingSeparator :: WdHeadingSeparator
                    -> Index a0
                    -> IO ()
setHeadingSeparator prop =
  propertySet "HeadingSeparator"
              [inEnum prop]

getRightAlignPageNumbers1 :: Index a0
                          -> IO Bool
getRightAlignPageNumbers1 =
  propertyGet "RightAlignPageNumbers"
              []
              outBool

setRightAlignPageNumbers1 :: Bool
                          -> Index a0
                          -> IO ()
setRightAlignPageNumbers1 prop =
  propertySet "RightAlignPageNumbers"
              [inBool prop]

getType11 :: Index a0
          -> IO WdIndexType
getType11 =
  propertyGet "Type"
              []
              outEnum

setType :: WdIndexType
        -> Index a0
        -> IO ()
setType prop =
  propertySet "Type"
              [inEnum prop]

getNumberOfColumns :: Index a0
                   -> IO Int32
getNumberOfColumns =
  propertyGet "NumberOfColumns"
              []
              outInt32

setNumberOfColumns :: Int32
                   -> Index a0
                   -> IO ()
setNumberOfColumns prop =
  propertySet "NumberOfColumns"
              [inInt32 prop]

getRange14 :: Index a0
           -> IO (Range ())
getRange14 =
  propertyGet "Range"
              []
              outIDispatch

getTabLeader2 :: Index a0
              -> IO WdTabLeader
getTabLeader2 =
  propertyGet "TabLeader"
              []
              outEnum

setTabLeader2 :: WdTabLeader
              -> Index a0
              -> IO ()
setTabLeader2 prop =
  propertySet "TabLeader"
              [inEnum prop]

getAccentedLetters :: Index a0
                   -> IO Bool
getAccentedLetters =
  propertyGet "AccentedLetters"
              []
              outBool

setAccentedLetters :: Bool
                   -> Index a0
                   -> IO ()
setAccentedLetters prop =
  propertySet "AccentedLetters"
              [inBool prop]

getSortBy :: Index a0
          -> IO WdIndexSortBy
getSortBy =
  propertyGet "SortBy"
              []
              outEnum

setSortBy :: WdIndexSortBy
          -> Index a0
          -> IO ()
setSortBy prop =
  propertySet "SortBy"
              [inEnum prop]

getFilter :: Index a0
          -> IO WdIndexFilter
getFilter =
  propertyGet "Filter"
              []
              outEnum

setFilter :: WdIndexFilter
          -> Index a0
          -> IO ()
setFilter prop =
  propertySet "Filter"
              [inEnum prop]

delete31 :: Index a0
         -> IO ()
delete31 =
  method0 "Delete"
          []

update6 :: Index a0
        -> IO ()
update6 =
  method0 "Update"
          []

getIndexLanguage :: Index a0
                 -> IO WdLanguageID
getIndexLanguage =
  propertyGet "IndexLanguage"
              []
              outEnum

setIndexLanguage :: WdLanguageID
                 -> Index a0
                 -> IO ()
setIndexLanguage prop =
  propertySet "IndexLanguage"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface AddIn
-- 
-- --------------------------------------------------
data AddIn_ a = AddIn__ 
type AddIn a = IDispatch (AddIn_ a)
iidAddIn :: IID (AddIn ())
iidAddIn = mkIID "{0002097E-0000-0000-C000-000000000046}"

getApplication112 :: AddIn a0
                  -> IO (Maybe Application)
getApplication112 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator112 :: AddIn a0
              -> IO Int32
getCreator112 =
  propertyGet "Creator"
              []
              outInt32

getParent112 :: AddIn a0
             -> IO (IDispatch ())
getParent112 =
  propertyGet "Parent"
              []
              outIDispatch

getName22 :: AddIn a0
          -> IO String
getName22 =
  propertyGet "Name"
              []
              outString

getIndex20 :: AddIn a0
           -> IO Int32
getIndex20 =
  propertyGet "Index"
              []
              outInt32

getPath3 :: AddIn a0
         -> IO String
getPath3 =
  propertyGet "Path"
              []
              outString

getInstalled :: AddIn a0
             -> IO Bool
getInstalled =
  propertyGet "Installed"
              []
              outBool

setInstalled :: Bool
             -> AddIn a0
             -> IO ()
setInstalled prop =
  propertySet "Installed"
              [inBool prop]

getCompiled :: AddIn a0
            -> IO Bool
getCompiled =
  propertyGet "Compiled"
              []
              outBool

getAutoload :: AddIn a0
            -> IO Bool
getAutoload =
  propertyGet "Autoload"
              []
              outBool

delete32 :: AddIn a0
         -> IO ()
delete32 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface AddIns
-- 
-- --------------------------------------------------
data AddIns_ a = AddIns__ 
type AddIns a = IDispatch (AddIns_ a)
iidAddIns :: IID (AddIns ())
iidAddIns = mkIID "{0002097F-0000-0000-C000-000000000046}"

getApplication113 :: AddIns a0
                  -> IO (Maybe Application)
getApplication113 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator113 :: AddIns a0
              -> IO Int32
getCreator113 =
  propertyGet "Creator"
              []
              outInt32

getParent113 :: AddIns a0
             -> IO (IDispatch ())
getParent113 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum44 :: AddIns a0
             -> IO (IUnknown ())
getNewEnum44 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount44 :: AddIns a0
           -> IO Int32
getCount44 =
  propertyGet "Count"
              []
              outInt32

item44 :: (Variant a1)
       => a1
       -> AddIns a0
       -> IO (AddIn ())
item44 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add32 :: (Variant a1)
      => String
      -> a1
      -> AddIns a0
      -> IO (AddIn ())
add32 fileName install =
  function1 "Add"
            [ inString fileName
            , inVariant install
            ]
            outIDispatch

unload :: Bool
       -> AddIns a0
       -> IO ()
unload removeFromList =
  method0 "Unload"
          [inBool removeFromList]

-- --------------------------------------------------
-- 
-- interface Revisions
-- 
-- --------------------------------------------------
data Revisions_ a = Revisions__ 
type Revisions a = IDispatch (Revisions_ a)
iidRevisions :: IID (Revisions ())
iidRevisions = mkIID "{00020980-0000-0000-C000-000000000046}"

getApplication114 :: Revisions a0
                  -> IO (Maybe Application)
getApplication114 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator114 :: Revisions a0
              -> IO Int32
getCreator114 =
  propertyGet "Creator"
              []
              outInt32

getParent114 :: Revisions a0
             -> IO (IDispatch ())
getParent114 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum45 :: Revisions a0
             -> IO (IUnknown ())
getNewEnum45 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount45 :: Revisions a0
           -> IO Int32
getCount45 =
  propertyGet "Count"
              []
              outInt32

item45 :: Int32
       -> Revisions a0
       -> IO (Revision ())
item45 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

acceptAll :: Revisions a0
          -> IO ()
acceptAll =
  method0 "AcceptAll"
          []

rejectAll :: Revisions a0
          -> IO ()
rejectAll =
  method0 "RejectAll"
          []

-- --------------------------------------------------
-- 
-- interface Revision
-- 
-- --------------------------------------------------
data Revision_ a = Revision__ 
type Revision a = IDispatch (Revision_ a)
iidRevision :: IID (Revision ())
iidRevision = mkIID "{00020981-0000-0000-C000-000000000046}"

getApplication115 :: Revision a0
                  -> IO (Maybe Application)
getApplication115 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator115 :: Revision a0
              -> IO Int32
getCreator115 =
  propertyGet "Creator"
              []
              outInt32

getParent115 :: Revision a0
             -> IO (IDispatch ())
getParent115 =
  propertyGet "Parent"
              []
              outIDispatch

getAuthor0 :: Revision a0
           -> IO String
getAuthor0 =
  propertyGet "Author"
              []
              outString

getDate0 :: Revision a0
         -> IO Int64
getDate0 =
  propertyGet "Date"
              []
              outDate

getRange15 :: Revision a0
           -> IO (Range ())
getRange15 =
  propertyGet "Range"
              []
              outIDispatch

getType12 :: Revision a0
          -> IO WdRevisionType
getType12 =
  propertyGet "Type"
              []
              outEnum

getIndex21 :: Revision a0
           -> IO Int32
getIndex21 =
  propertyGet "Index"
              []
              outInt32

accept :: Revision a0
       -> IO ()
accept =
  method0 "Accept"
          []

reject :: Revision a0
       -> IO ()
reject =
  method0 "Reject"
          []

getStyle7 :: Revision a0
          -> IO (Style ())
getStyle7 =
  propertyGet "Style"
              []
              outIDispatch

getFormatDescription :: Revision a0
                     -> IO String
getFormatDescription =
  propertyGet "FormatDescription"
              []
              outString

getMovedRange :: Revision a0
              -> IO (Range ())
getMovedRange =
  propertyGet "MovedRange"
              []
              outIDispatch

getCells3 :: Revision a0
          -> IO (Cells ())
getCells3 =
  propertyGet "Cells"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface Task
-- 
-- --------------------------------------------------
data Task_ a = Task__ 
type Task a = IDispatch (Task_ a)
iidTask :: IID (Task ())
iidTask = mkIID "{00020982-0000-0000-C000-000000000046}"

getApplication116 :: Task a0
                  -> IO (Maybe Application)
getApplication116 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator116 :: Task a0
              -> IO Int32
getCreator116 =
  propertyGet "Creator"
              []
              outInt32

getParent116 :: Task a0
             -> IO (IDispatch ())
getParent116 =
  propertyGet "Parent"
              []
              outIDispatch

getName23 :: Task a0
          -> IO String
getName23 =
  propertyGet "Name"
              []
              outString

getLeft2 :: Task a0
         -> IO Int32
getLeft2 =
  propertyGet "Left"
              []
              outInt32

setLeft2 :: Int32
         -> Task a0
         -> IO ()
setLeft2 prop =
  propertySet "Left"
              [inInt32 prop]

getTop2 :: Task a0
        -> IO Int32
getTop2 =
  propertyGet "Top"
              []
              outInt32

setTop2 :: Int32
        -> Task a0
        -> IO ()
setTop2 prop =
  propertySet "Top"
              [inInt32 prop]

getWidth11 :: Task a0
           -> IO Int32
getWidth11 =
  propertyGet "Width"
              []
              outInt32

setWidth15 :: Int32
           -> Task a0
           -> IO ()
setWidth15 prop =
  propertySet "Width"
              [inInt32 prop]

getHeight8 :: Task a0
           -> IO Int32
getHeight8 =
  propertyGet "Height"
              []
              outInt32

setHeight12 :: Int32
            -> Task a0
            -> IO ()
setHeight12 prop =
  propertySet "Height"
              [inInt32 prop]

getWindowState1 :: Task a0
                -> IO WdWindowState
getWindowState1 =
  propertyGet "WindowState"
              []
              outEnum

setWindowState1 :: WdWindowState
                -> Task a0
                -> IO ()
setWindowState1 prop =
  propertySet "WindowState"
              [inEnum prop]

getVisible2 :: Task a0
            -> IO Bool
getVisible2 =
  propertyGet "Visible"
              []
              outBool

setVisible2 :: Bool
            -> Task a0
            -> IO ()
setVisible2 prop =
  propertySet "Visible"
              [inBool prop]

activate5 :: (Variant a1)
          => a1
          -> Task a0
          -> IO ()
activate5 wait =
  method0 "Activate"
          [inVariant wait]

close4 :: Task a0
       -> IO ()
close4 =
  method0 "Close"
          []

move2 :: Int32
      -> Int32
      -> Task a0
      -> IO ()
move2 left top =
  method0 "Move"
          [ inInt32 left
          , inInt32 top
          ]

resize0 :: Int32
        -> Int32
        -> Task a0
        -> IO ()
resize0 width height =
  method0 "Resize"
          [ inInt32 width
          , inInt32 height
          ]

sendWindowMessage :: Int32
                  -> Int32
                  -> Int32
                  -> Task a0
                  -> IO ()
sendWindowMessage message wParam lParam =
  method0 "SendWindowMessage"
          [ inInt32 message
          , inInt32 wParam
          , inInt32 lParam
          ]

-- --------------------------------------------------
-- 
-- interface Tasks
-- 
-- --------------------------------------------------
data Tasks_ a = Tasks__ 
type Tasks a = IDispatch (Tasks_ a)
iidTasks :: IID (Tasks ())
iidTasks = mkIID "{00020983-0000-0000-C000-000000000046}"

getApplication117 :: Tasks a0
                  -> IO (Maybe Application)
getApplication117 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator117 :: Tasks a0
              -> IO Int32
getCreator117 =
  propertyGet "Creator"
              []
              outInt32

getParent117 :: Tasks a0
             -> IO (IDispatch ())
getParent117 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum46 :: Tasks a0
             -> IO (IUnknown ())
getNewEnum46 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount46 :: Tasks a0
           -> IO Int32
getCount46 =
  propertyGet "Count"
              []
              outInt32

item46 :: (Variant a1)
       => a1
       -> Tasks a0
       -> IO (Task ())
item46 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

exists0 :: String
        -> Tasks a0
        -> IO Bool
exists0 name =
  function1 "Exists"
            [inString name]
            outBool

exitWindows :: Tasks a0
            -> IO ()
exitWindows =
  method0 "ExitWindows"
          []

-- --------------------------------------------------
-- 
-- interface HeadersFooters
-- 
-- --------------------------------------------------
data HeadersFooters_ a = HeadersFooters__ 
type HeadersFooters a = IDispatch (HeadersFooters_ a)
iidHeadersFooters :: IID (HeadersFooters ())
iidHeadersFooters = mkIID "{00020984-0000-0000-C000-000000000046}"

getApplication118 :: HeadersFooters a0
                  -> IO (Maybe Application)
getApplication118 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator118 :: HeadersFooters a0
              -> IO Int32
getCreator118 =
  propertyGet "Creator"
              []
              outInt32

getParent118 :: HeadersFooters a0
             -> IO (IDispatch ())
getParent118 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum47 :: HeadersFooters a0
             -> IO (IUnknown ())
getNewEnum47 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount47 :: HeadersFooters a0
           -> IO Int32
getCount47 =
  propertyGet "Count"
              []
              outInt32

item47 :: WdHeaderFooterIndex
       -> HeadersFooters a0
       -> IO (HeaderFooter ())
item47 index =
  function1 "Item"
            [inEnum index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface HeaderFooter
-- 
-- --------------------------------------------------
data HeaderFooter_ a = HeaderFooter__ 
type HeaderFooter a = IDispatch (HeaderFooter_ a)
iidHeaderFooter :: IID (HeaderFooter ())
iidHeaderFooter = mkIID "{00020985-0000-0000-C000-000000000046}"

getApplication119 :: HeaderFooter a0
                  -> IO (Maybe Application)
getApplication119 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator119 :: HeaderFooter a0
              -> IO Int32
getCreator119 =
  propertyGet "Creator"
              []
              outInt32

getParent119 :: HeaderFooter a0
             -> IO (IDispatch ())
getParent119 =
  propertyGet "Parent"
              []
              outIDispatch

getRange16 :: HeaderFooter a0
           -> IO (Range ())
getRange16 =
  propertyGet "Range"
              []
              outIDispatch

getIndex22 :: HeaderFooter a0
           -> IO WdHeaderFooterIndex
getIndex22 =
  propertyGet "Index"
              []
              outEnum

getIsHeader :: HeaderFooter a0
            -> IO Bool
getIsHeader =
  propertyGet "IsHeader"
              []
              outBool

getExists :: HeaderFooter a0
          -> IO Bool
getExists =
  propertyGet "Exists"
              []
              outBool

setExists :: Bool
          -> HeaderFooter a0
          -> IO ()
setExists prop =
  propertySet "Exists"
              [inBool prop]

getPageNumbers :: HeaderFooter a0
               -> IO (PageNumbers ())
getPageNumbers =
  propertyGet "PageNumbers"
              []
              outIUnknown

getLinkToPrevious :: HeaderFooter a0
                  -> IO Bool
getLinkToPrevious =
  propertyGet "LinkToPrevious"
              []
              outBool

setLinkToPrevious :: Bool
                  -> HeaderFooter a0
                  -> IO ()
setLinkToPrevious prop =
  propertySet "LinkToPrevious"
              [inBool prop]

getShapes0 :: HeaderFooter a0
           -> IO (Shapes ())
getShapes0 =
  propertyGet "Shapes"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface PageNumbers
-- 
-- --------------------------------------------------
data PageNumbers_ a = PageNumbers__ 
type PageNumbers a = IDispatch (PageNumbers_ a)
iidPageNumbers :: IID (PageNumbers ())
iidPageNumbers = mkIID "{00020986-0000-0000-C000-000000000046}"

getApplication120 :: PageNumbers a0
                  -> IO (Maybe Application)
getApplication120 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator120 :: PageNumbers a0
              -> IO Int32
getCreator120 =
  propertyGet "Creator"
              []
              outInt32

getParent120 :: PageNumbers a0
             -> IO (IDispatch ())
getParent120 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum48 :: PageNumbers a0
             -> IO (IUnknown ())
getNewEnum48 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount48 :: PageNumbers a0
           -> IO Int32
getCount48 =
  propertyGet "Count"
              []
              outInt32

getNumberStyle2 :: PageNumbers a0
                -> IO WdPageNumberStyle
getNumberStyle2 =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle2 :: WdPageNumberStyle
                -> PageNumbers a0
                -> IO ()
setNumberStyle2 prop =
  propertySet "NumberStyle"
              [inEnum prop]

getIncludeChapterNumber0 :: PageNumbers a0
                         -> IO Bool
getIncludeChapterNumber0 =
  propertyGet "IncludeChapterNumber"
              []
              outBool

setIncludeChapterNumber0 :: Bool
                         -> PageNumbers a0
                         -> IO ()
setIncludeChapterNumber0 prop =
  propertySet "IncludeChapterNumber"
              [inBool prop]

getHeadingLevelForChapter :: PageNumbers a0
                          -> IO Int32
getHeadingLevelForChapter =
  propertyGet "HeadingLevelForChapter"
              []
              outInt32

setHeadingLevelForChapter :: Int32
                          -> PageNumbers a0
                          -> IO ()
setHeadingLevelForChapter prop =
  propertySet "HeadingLevelForChapter"
              [inInt32 prop]

getChapterPageSeparator :: PageNumbers a0
                        -> IO WdSeparatorType
getChapterPageSeparator =
  propertyGet "ChapterPageSeparator"
              []
              outEnum

setChapterPageSeparator :: WdSeparatorType
                        -> PageNumbers a0
                        -> IO ()
setChapterPageSeparator prop =
  propertySet "ChapterPageSeparator"
              [inEnum prop]

getRestartNumberingAtSection :: PageNumbers a0
                             -> IO Bool
getRestartNumberingAtSection =
  propertyGet "RestartNumberingAtSection"
              []
              outBool

setRestartNumberingAtSection :: Bool
                             -> PageNumbers a0
                             -> IO ()
setRestartNumberingAtSection prop =
  propertySet "RestartNumberingAtSection"
              [inBool prop]

getStartingNumber2 :: PageNumbers a0
                   -> IO Int32
getStartingNumber2 =
  propertyGet "StartingNumber"
              []
              outInt32

setStartingNumber2 :: Int32
                   -> PageNumbers a0
                   -> IO ()
setStartingNumber2 prop =
  propertySet "StartingNumber"
              [inInt32 prop]

getShowFirstPageNumber :: PageNumbers a0
                       -> IO Bool
getShowFirstPageNumber =
  propertyGet "ShowFirstPageNumber"
              []
              outBool

setShowFirstPageNumber :: Bool
                       -> PageNumbers a0
                       -> IO ()
setShowFirstPageNumber prop =
  propertySet "ShowFirstPageNumber"
              [inBool prop]

item48 :: Int32
       -> PageNumbers a0
       -> IO (PageNumber ())
item48 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add33 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> PageNumbers a0
      -> IO (PageNumber ())
add33 pageNumberAlignment firstPage =
  function1 "Add"
            [ inVariant pageNumberAlignment
            , inVariant firstPage
            ]
            outIUnknown

getDoubleQuote :: PageNumbers a0
               -> IO Bool
getDoubleQuote =
  propertyGet "DoubleQuote"
              []
              outBool

setDoubleQuote :: Bool
               -> PageNumbers a0
               -> IO ()
setDoubleQuote prop =
  propertySet "DoubleQuote"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface PageNumber
-- 
-- --------------------------------------------------
data PageNumber_ a = PageNumber__ 
type PageNumber a = IDispatch (PageNumber_ a)
iidPageNumber :: IID (PageNumber ())
iidPageNumber = mkIID "{00020987-0000-0000-C000-000000000046}"

getApplication121 :: PageNumber a0
                  -> IO (Maybe Application)
getApplication121 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator121 :: PageNumber a0
              -> IO Int32
getCreator121 =
  propertyGet "Creator"
              []
              outInt32

getParent121 :: PageNumber a0
             -> IO (IDispatch ())
getParent121 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex23 :: PageNumber a0
           -> IO Int32
getIndex23 =
  propertyGet "Index"
              []
              outInt32

getAlignment5 :: PageNumber a0
              -> IO WdPageNumberAlignment
getAlignment5 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment5 :: WdPageNumberAlignment
              -> PageNumber a0
              -> IO ()
setAlignment5 prop =
  propertySet "Alignment"
              [inEnum prop]

select14 :: PageNumber a0
         -> IO ()
select14 =
  method0 "Select"
          []

copy7 :: PageNumber a0
      -> IO ()
copy7 =
  method0 "Copy"
          []

cut6 :: PageNumber a0
     -> IO ()
cut6 =
  method0 "Cut"
          []

delete33 :: PageNumber a0
         -> IO ()
delete33 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Subdocuments
-- 
-- --------------------------------------------------
data Subdocuments_ a = Subdocuments__ 
type Subdocuments a = IDispatch (Subdocuments_ a)
iidSubdocuments :: IID (Subdocuments ())
iidSubdocuments = mkIID "{00020988-0000-0000-C000-000000000046}"

getApplication122 :: Subdocuments a0
                  -> IO (Maybe Application)
getApplication122 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator122 :: Subdocuments a0
              -> IO Int32
getCreator122 =
  propertyGet "Creator"
              []
              outInt32

getParent122 :: Subdocuments a0
             -> IO (IDispatch ())
getParent122 =
  propertyGet "Parent"
              []
              outIDispatch

getCount49 :: Subdocuments a0
           -> IO Int32
getCount49 =
  propertyGet "Count"
              []
              outInt32

getNewEnum49 :: Subdocuments a0
             -> IO (IUnknown ())
getNewEnum49 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getExpanded :: Subdocuments a0
            -> IO Bool
getExpanded =
  propertyGet "Expanded"
              []
              outBool

setExpanded :: Bool
            -> Subdocuments a0
            -> IO ()
setExpanded prop =
  propertySet "Expanded"
              [inBool prop]

item49 :: Int32
       -> Subdocuments a0
       -> IO (Subdocument ())
item49 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

addFromFile :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> Subdocuments a0
            -> IO (Subdocument ())
addFromFile name confirmConversions readOnly passwordDocument passwordTemplate revert writePasswordDocument writePasswordTemplate =
  function1 "AddFromFile"
            [ inVariant name
            , inVariant confirmConversions
            , inVariant readOnly
            , inVariant passwordDocument
            , inVariant passwordTemplate
            , inVariant revert
            , inVariant writePasswordDocument
            , inVariant writePasswordTemplate
            ]
            outIUnknown

addFromRange :: Range a1
             -> Subdocuments a0
             -> IO (Subdocument ())
addFromRange range0 =
  function1 "AddFromRange"
            [inIDispatch range0]
            outIUnknown

merge2 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Subdocuments a0
       -> IO ()
merge2 firstSubdocument lastSubdocument =
  method0 "Merge"
          [ inVariant firstSubdocument
          , inVariant lastSubdocument
          ]

delete34 :: Subdocuments a0
         -> IO ()
delete34 =
  method0 "Delete"
          []

select15 :: Subdocuments a0
         -> IO ()
select15 =
  method0 "Select"
          []

-- --------------------------------------------------
-- 
-- interface Subdocument
-- 
-- --------------------------------------------------
data Subdocument_ a = Subdocument__ 
type Subdocument a = IDispatch (Subdocument_ a)
iidSubdocument :: IID (Subdocument ())
iidSubdocument = mkIID "{00020989-0000-0000-C000-000000000046}"

getApplication123 :: Subdocument a0
                  -> IO (Maybe Application)
getApplication123 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator123 :: Subdocument a0
              -> IO Int32
getCreator123 =
  propertyGet "Creator"
              []
              outInt32

getParent123 :: Subdocument a0
             -> IO (IDispatch ())
getParent123 =
  propertyGet "Parent"
              []
              outIDispatch

getLocked4 :: Subdocument a0
           -> IO Bool
getLocked4 =
  propertyGet "Locked"
              []
              outBool

setLocked4 :: Bool
           -> Subdocument a0
           -> IO ()
setLocked4 prop =
  propertySet "Locked"
              [inBool prop]

getRange17 :: Subdocument a0
           -> IO (Range ())
getRange17 =
  propertyGet "Range"
              []
              outIDispatch

getName24 :: Subdocument a0
          -> IO String
getName24 =
  propertyGet "Name"
              []
              outString

getPath4 :: Subdocument a0
         -> IO String
getPath4 =
  propertyGet "Path"
              []
              outString

getHasFile :: Subdocument a0
           -> IO Bool
getHasFile =
  propertyGet "HasFile"
              []
              outBool

getLevel :: Subdocument a0
         -> IO Int32
getLevel =
  propertyGet "Level"
              []
              outInt32

delete35 :: Subdocument a0
         -> IO ()
delete35 =
  method0 "Delete"
          []

split2 :: Range a1
       -> Subdocument a0
       -> IO ()
split2 range0 =
  method0 "Split"
          [inIDispatch range0]

open2 :: Subdocument a0
      -> IO (Maybe Document)
open2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 19 iptr
    doThenFree free (readunique readDocument) prop

-- --------------------------------------------------
-- 
-- interface HeadingStyles
-- 
-- --------------------------------------------------
data HeadingStyles_ a = HeadingStyles__ 
type HeadingStyles a = IDispatch (HeadingStyles_ a)
iidHeadingStyles :: IID (HeadingStyles ())
iidHeadingStyles = mkIID "{0002098A-0000-0000-C000-000000000046}"

getApplication124 :: HeadingStyles a0
                  -> IO (Maybe Application)
getApplication124 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator124 :: HeadingStyles a0
              -> IO Int32
getCreator124 =
  propertyGet "Creator"
              []
              outInt32

getParent124 :: HeadingStyles a0
             -> IO (IDispatch ())
getParent124 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum50 :: HeadingStyles a0
             -> IO (IUnknown ())
getNewEnum50 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount50 :: HeadingStyles a0
           -> IO Int32
getCount50 =
  propertyGet "Count"
              []
              outInt32

item50 :: Int32
       -> HeadingStyles a0
       -> IO (HeadingStyle ())
item50 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add34 :: (Variant a1)
      => a1
      -> Int16
      -> HeadingStyles a0
      -> IO (HeadingStyle ())
add34 style level =
  function1 "Add"
            [ inVariant style
            , inInt16 level
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface HeadingStyle
-- 
-- --------------------------------------------------
data HeadingStyle_ a = HeadingStyle__ 
type HeadingStyle a = IDispatch (HeadingStyle_ a)
iidHeadingStyle :: IID (HeadingStyle ())
iidHeadingStyle = mkIID "{0002098B-0000-0000-C000-000000000046}"

getApplication125 :: HeadingStyle a0
                  -> IO (Maybe Application)
getApplication125 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator125 :: HeadingStyle a0
              -> IO Int32
getCreator125 =
  propertyGet "Creator"
              []
              outInt32

getParent125 :: HeadingStyle a0
             -> IO (IDispatch ())
getParent125 =
  propertyGet "Parent"
              []
              outIDispatch

getStyle8 :: (Variant a1)
          => HeadingStyle a0
          -> IO a1
getStyle8 =
  propertyGet "Style"
              []
              outVariant

setStyle7 :: (Variant a1)
          => a1
          -> HeadingStyle a0
          -> IO ()
setStyle7 prop =
  propertySet "Style"
              [inVariant prop]

getLevel0 :: HeadingStyle a0
          -> IO Int16
getLevel0 =
  propertyGet "Level"
              []
              outInt16

setLevel :: Int16
         -> HeadingStyle a0
         -> IO ()
setLevel prop =
  propertySet "Level"
              [inInt16 prop]

delete36 :: HeadingStyle a0
         -> IO ()
delete36 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface StoryRanges
-- 
-- --------------------------------------------------
data StoryRanges_ a = StoryRanges__ 
type StoryRanges a = IDispatch (StoryRanges_ a)
iidStoryRanges :: IID (StoryRanges ())
iidStoryRanges = mkIID "{0002098C-0000-0000-C000-000000000046}"

getNewEnum51 :: StoryRanges a0
             -> IO (IUnknown ())
getNewEnum51 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount51 :: StoryRanges a0
           -> IO Int32
getCount51 =
  propertyGet "Count"
              []
              outInt32

getApplication126 :: StoryRanges a0
                  -> IO (Maybe Application)
getApplication126 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator126 :: StoryRanges a0
              -> IO Int32
getCreator126 =
  propertyGet "Creator"
              []
              outInt32

getParent126 :: StoryRanges a0
             -> IO (IDispatch ())
getParent126 =
  propertyGet "Parent"
              []
              outIDispatch

item51 :: WdStoryType
       -> StoryRanges a0
       -> IO (Range ())
item51 index =
  function1 "Item"
            [inEnum index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface ListLevel
-- 
-- --------------------------------------------------
data ListLevel_ a = ListLevel__ 
type ListLevel a = IDispatch (ListLevel_ a)
iidListLevel :: IID (ListLevel ())
iidListLevel = mkIID "{0002098D-0000-0000-C000-000000000046}"

getIndex24 :: ListLevel a0
           -> IO Int32
getIndex24 =
  propertyGet "Index"
              []
              outInt32

getNumberFormat :: ListLevel a0
                -> IO String
getNumberFormat =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat :: String
                -> ListLevel a0
                -> IO ()
setNumberFormat prop =
  propertySet "NumberFormat"
              [inString prop]

getTrailingCharacter :: ListLevel a0
                     -> IO WdTrailingCharacter
getTrailingCharacter =
  propertyGet "TrailingCharacter"
              []
              outEnum

setTrailingCharacter :: WdTrailingCharacter
                     -> ListLevel a0
                     -> IO ()
setTrailingCharacter prop =
  propertySet "TrailingCharacter"
              [inEnum prop]

getNumberStyle3 :: ListLevel a0
                -> IO WdListNumberStyle
getNumberStyle3 =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle3 :: WdListNumberStyle
                -> ListLevel a0
                -> IO ()
setNumberStyle3 prop =
  propertySet "NumberStyle"
              [inEnum prop]

getNumberPosition :: ListLevel a0
                  -> IO Float
getNumberPosition =
  propertyGet "NumberPosition"
              []
              outFloat

setNumberPosition :: Float
                  -> ListLevel a0
                  -> IO ()
setNumberPosition prop =
  propertySet "NumberPosition"
              [inFloat prop]

getAlignment6 :: ListLevel a0
              -> IO WdListLevelAlignment
getAlignment6 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment6 :: WdListLevelAlignment
              -> ListLevel a0
              -> IO ()
setAlignment6 prop =
  propertySet "Alignment"
              [inEnum prop]

getTextPosition :: ListLevel a0
                -> IO Float
getTextPosition =
  propertyGet "TextPosition"
              []
              outFloat

setTextPosition :: Float
                -> ListLevel a0
                -> IO ()
setTextPosition prop =
  propertySet "TextPosition"
              [inFloat prop]

getTabPosition :: ListLevel a0
               -> IO Float
getTabPosition =
  propertyGet "TabPosition"
              []
              outFloat

setTabPosition :: Float
               -> ListLevel a0
               -> IO ()
setTabPosition prop =
  propertySet "TabPosition"
              [inFloat prop]

getResetOnHigherOld :: ListLevel a0
                    -> IO Bool
getResetOnHigherOld =
  propertyGet "ResetOnHigherOld"
              []
              outBool

setResetOnHigherOld :: Bool
                    -> ListLevel a0
                    -> IO ()
setResetOnHigherOld prop =
  propertySet "ResetOnHigherOld"
              [inBool prop]

getStartAt :: ListLevel a0
           -> IO Int32
getStartAt =
  propertyGet "StartAt"
              []
              outInt32

setStartAt :: Int32
           -> ListLevel a0
           -> IO ()
setStartAt prop =
  propertySet "StartAt"
              [inInt32 prop]

getLinkedStyle :: ListLevel a0
               -> IO String
getLinkedStyle =
  propertyGet "LinkedStyle"
              []
              outString

setLinkedStyle :: String
               -> ListLevel a0
               -> IO ()
setLinkedStyle prop =
  propertySet "LinkedStyle"
              [inString prop]

getFont4 :: ListLevel a0
         -> IO (Maybe Font)
getFont4 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 28 iptr
    doThenFree free (readunique readFont) prop

setFont4 :: Font
         -> ListLevel a0
         -> IO ()
setFont4 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 29 iptr
    free prop

getApplication127 :: ListLevel a0
                  -> IO (Maybe Application)
getApplication127 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 30 iptr
    doThenFree free (readunique readApplication) prop

getCreator127 :: ListLevel a0
              -> IO Int32
getCreator127 =
  propertyGet "Creator"
              []
              outInt32

getParent127 :: ListLevel a0
             -> IO (IDispatch ())
getParent127 =
  propertyGet "Parent"
              []
              outIDispatch

getResetOnHigher :: ListLevel a0
                 -> IO Int32
getResetOnHigher =
  propertyGet "ResetOnHigher"
              []
              outInt32

setResetOnHigher :: Int32
                 -> ListLevel a0
                 -> IO ()
setResetOnHigher prop =
  propertySet "ResetOnHigher"
              [inInt32 prop]

getPictureBullet :: ListLevel a0
                 -> IO (InlineShape ())
getPictureBullet =
  propertyGet "PictureBullet"
              []
              outIUnknown

applyPictureBullet :: String
                   -> ListLevel a0
                   -> IO (InlineShape ())
applyPictureBullet fileName =
  function1 "ApplyPictureBullet"
            [inString fileName]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ListLevels
-- 
-- --------------------------------------------------
data ListLevels_ a = ListLevels__ 
type ListLevels a = IDispatch (ListLevels_ a)
iidListLevels :: IID (ListLevels ())
iidListLevels = mkIID "{0002098E-0000-0000-C000-000000000046}"

getNewEnum52 :: ListLevels a0
             -> IO (IUnknown ())
getNewEnum52 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount52 :: ListLevels a0
           -> IO Int32
getCount52 =
  propertyGet "Count"
              []
              outInt32

getApplication128 :: ListLevels a0
                  -> IO (Maybe Application)
getApplication128 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator128 :: ListLevels a0
              -> IO Int32
getCreator128 =
  propertyGet "Creator"
              []
              outInt32

getParent128 :: ListLevels a0
             -> IO (IDispatch ())
getParent128 =
  propertyGet "Parent"
              []
              outIDispatch

item52 :: Int32
       -> ListLevels a0
       -> IO (ListLevel ())
item52 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface ListTemplate
-- 
-- --------------------------------------------------
data ListTemplate_ a = ListTemplate__ 
type ListTemplate a = IDispatch (ListTemplate_ a)
iidListTemplate :: IID (ListTemplate ())
iidListTemplate = mkIID "{0002098F-0000-0000-C000-000000000046}"

getApplication129 :: ListTemplate a0
                  -> IO (Maybe Application)
getApplication129 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator129 :: ListTemplate a0
              -> IO Int32
getCreator129 =
  propertyGet "Creator"
              []
              outInt32

getParent129 :: ListTemplate a0
             -> IO (IDispatch ())
getParent129 =
  propertyGet "Parent"
              []
              outIDispatch

getOutlineNumbered :: ListTemplate a0
                   -> IO Bool
getOutlineNumbered =
  propertyGet "OutlineNumbered"
              []
              outBool

setOutlineNumbered :: Bool
                   -> ListTemplate a0
                   -> IO ()
setOutlineNumbered prop =
  propertySet "OutlineNumbered"
              [inBool prop]

getName25 :: ListTemplate a0
          -> IO String
getName25 =
  propertyGet "Name"
              []
              outString

setName7 :: String
         -> ListTemplate a0
         -> IO ()
setName7 prop =
  propertySet "Name"
              [inString prop]

getListLevels :: ListTemplate a0
              -> IO (ListLevels ())
getListLevels =
  propertyGet "ListLevels"
              []
              outIDispatch

convert2 :: (Variant a1)
         => a1
         -> ListTemplate a0
         -> IO (ListTemplate ())
convert2 level =
  function1 "Convert"
            [inVariant level]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface ListTemplates
-- 
-- --------------------------------------------------
data ListTemplates_ a = ListTemplates__ 
type ListTemplates a = IDispatch (ListTemplates_ a)
iidListTemplates :: IID (ListTemplates ())
iidListTemplates = mkIID "{00020990-0000-0000-C000-000000000046}"

getNewEnum53 :: ListTemplates a0
             -> IO (IUnknown ())
getNewEnum53 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount53 :: ListTemplates a0
           -> IO Int32
getCount53 =
  propertyGet "Count"
              []
              outInt32

getApplication130 :: ListTemplates a0
                  -> IO (Maybe Application)
getApplication130 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator130 :: ListTemplates a0
              -> IO Int32
getCreator130 =
  propertyGet "Creator"
              []
              outInt32

getParent130 :: ListTemplates a0
             -> IO (IDispatch ())
getParent130 =
  propertyGet "Parent"
              []
              outIDispatch

item53 :: (Variant a1)
       => a1
       -> ListTemplates a0
       -> IO (ListTemplate ())
item53 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add35 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> ListTemplates a0
      -> IO (ListTemplate ())
add35 outlineNumbered name =
  function1 "Add"
            [ inVariant outlineNumbered
            , inVariant name
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface ListParagraphs
-- 
-- --------------------------------------------------
data ListParagraphs_ a = ListParagraphs__ 
type ListParagraphs a = IDispatch (ListParagraphs_ a)
iidListParagraphs :: IID (ListParagraphs ())
iidListParagraphs = mkIID "{00020991-0000-0000-C000-000000000046}"

getNewEnum54 :: ListParagraphs a0
             -> IO (IUnknown ())
getNewEnum54 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount54 :: ListParagraphs a0
           -> IO Int32
getCount54 =
  propertyGet "Count"
              []
              outInt32

getApplication131 :: ListParagraphs a0
                  -> IO (Maybe Application)
getApplication131 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator131 :: ListParagraphs a0
              -> IO Int32
getCreator131 =
  propertyGet "Creator"
              []
              outInt32

getParent131 :: ListParagraphs a0
             -> IO (IDispatch ())
getParent131 =
  propertyGet "Parent"
              []
              outIDispatch

item54 :: Int32
       -> ListParagraphs a0
       -> IO (Paragraph ())
item54 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface List
-- 
-- --------------------------------------------------
data List_ a = List__ 
type List a = IDispatch (List_ a)
iidList :: IID (List ())
iidList = mkIID "{00020992-0000-0000-C000-000000000046}"

getRange18 :: List a0
           -> IO (Range ())
getRange18 =
  propertyGet "Range"
              []
              outIDispatch

getListParagraphs1 :: List a0
                   -> IO (ListParagraphs ())
getListParagraphs1 =
  propertyGet "ListParagraphs"
              []
              outIDispatch

getSingleListTemplate0 :: List a0
                       -> IO Bool
getSingleListTemplate0 =
  propertyGet "SingleListTemplate"
              []
              outBool

getApplication132 :: List a0
                  -> IO (Maybe Application)
getApplication132 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 10 iptr
    doThenFree free (readunique readApplication) prop

getCreator132 :: List a0
              -> IO Int32
getCreator132 =
  propertyGet "Creator"
              []
              outInt32

getParent132 :: List a0
             -> IO (IDispatch ())
getParent132 =
  propertyGet "Parent"
              []
              outIDispatch

convertNumbersToText1 :: (Variant a1)
                      => a1
                      -> List a0
                      -> IO ()
convertNumbersToText1 numberType =
  method0 "ConvertNumbersToText"
          [inVariant numberType]

removeNumbers1 :: (Variant a1)
               => a1
               -> List a0
               -> IO ()
removeNumbers1 numberType =
  method0 "RemoveNumbers"
          [inVariant numberType]

countNumberedItems1 :: (Variant a1, Variant a2)
                    => a1
                    -> a2
                    -> List a0
                    -> IO Int32
countNumberedItems1 numberType level =
  function1 "CountNumberedItems"
            [ inVariant numberType
            , inVariant level
            ]
            outInt32

applyListTemplateOld0 :: (Variant a2)
                      => ListTemplate a1
                      -> a2
                      -> List a0
                      -> IO ()
applyListTemplateOld0 listTemplate continuePreviousList =
  method0 "ApplyListTemplateOld"
          [ inIDispatch listTemplate
          , inVariant continuePreviousList
          ]

canContinuePreviousList0 :: ListTemplate a1
                         -> List a0
                         -> IO WdContinue
canContinuePreviousList0 listTemplate =
  function1 "CanContinuePreviousList"
            [inIDispatch listTemplate]
            outEnum

applyListTemplate0 :: (Variant a2, Variant a3)
                   => ListTemplate a1
                   -> a2
                   -> a3
                   -> List a0
                   -> IO ()
applyListTemplate0 listTemplate continuePreviousList defaultListBehavior =
  method0 "ApplyListTemplate"
          [ inIDispatch listTemplate
          , inVariant continuePreviousList
          , inVariant defaultListBehavior
          ]

getStyleName0 :: List a0
              -> IO String
getStyleName0 =
  propertyGet "StyleName"
              []
              outString

applyListTemplateWithLevel0 :: (Variant a2, Variant a3, Variant a4)
                            => ListTemplate a1
                            -> a2
                            -> a3
                            -> a4
                            -> List a0
                            -> IO ()
applyListTemplateWithLevel0 listTemplate continuePreviousList defaultListBehavior applyLevel =
  method0 "ApplyListTemplateWithLevel"
          [ inIDispatch listTemplate
          , inVariant continuePreviousList
          , inVariant defaultListBehavior
          , inVariant applyLevel
          ]

-- --------------------------------------------------
-- 
-- interface Lists
-- 
-- --------------------------------------------------
data Lists_ a = Lists__ 
type Lists a = IDispatch (Lists_ a)
iidLists :: IID (Lists ())
iidLists = mkIID "{00020993-0000-0000-C000-000000000046}"

getNewEnum55 :: Lists a0
             -> IO (IUnknown ())
getNewEnum55 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount55 :: Lists a0
           -> IO Int32
getCount55 =
  propertyGet "Count"
              []
              outInt32

getApplication133 :: Lists a0
                  -> IO (Maybe Application)
getApplication133 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator133 :: Lists a0
              -> IO Int32
getCreator133 =
  propertyGet "Creator"
              []
              outInt32

getParent133 :: Lists a0
             -> IO (IDispatch ())
getParent133 =
  propertyGet "Parent"
              []
              outIDispatch

item55 :: Int32
       -> Lists a0
       -> IO (List ())
item55 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface ListGallery
-- 
-- --------------------------------------------------
data ListGallery_ a = ListGallery__ 
type ListGallery a = IDispatch (ListGallery_ a)
iidListGallery :: IID (ListGallery ())
iidListGallery = mkIID "{00020994-0000-0000-C000-000000000046}"

getListTemplates1 :: ListGallery a0
                  -> IO (ListTemplates ())
getListTemplates1 =
  propertyGet "ListTemplates"
              []
              outIDispatch

getApplication134 :: ListGallery a0
                  -> IO (Maybe Application)
getApplication134 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator134 :: ListGallery a0
              -> IO Int32
getCreator134 =
  propertyGet "Creator"
              []
              outInt32

getParent134 :: ListGallery a0
             -> IO (IDispatch ())
getParent134 =
  propertyGet "Parent"
              []
              outIDispatch

getModified :: Int32
            -> ListGallery a0
            -> IO Bool
getModified index =
  propertyGet "Modified"
              [inInt32 index]
              outBool

reset4 :: Int32
       -> ListGallery a0
       -> IO ()
reset4 index =
  method0 "Reset"
          [inInt32 index]

-- --------------------------------------------------
-- 
-- interface ListGalleries
-- 
-- --------------------------------------------------
data ListGalleries_ a = ListGalleries__ 
type ListGalleries a = IDispatch (ListGalleries_ a)
iidListGalleries :: IID (ListGalleries ())
iidListGalleries = mkIID "{00020995-0000-0000-C000-000000000046}"

getNewEnum56 :: ListGalleries a0
             -> IO (IUnknown ())
getNewEnum56 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount56 :: ListGalleries a0
           -> IO Int32
getCount56 =
  propertyGet "Count"
              []
              outInt32

getApplication135 :: ListGalleries a0
                  -> IO (Maybe Application)
getApplication135 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator135 :: ListGalleries a0
              -> IO Int32
getCreator135 =
  propertyGet "Creator"
              []
              outInt32

getParent135 :: ListGalleries a0
             -> IO (IDispatch ())
getParent135 =
  propertyGet "Parent"
              []
              outIDispatch

item56 :: WdListGalleryType
       -> ListGalleries a0
       -> IO (ListGallery ())
item56 index =
  function1 "Item"
            [inEnum index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface KeyBindings
-- 
-- --------------------------------------------------
data KeyBindings_ a = KeyBindings__ 
type KeyBindings a = IDispatch (KeyBindings_ a)
iidKeyBindings :: IID (KeyBindings ())
iidKeyBindings = mkIID "{00020996-0000-0000-C000-000000000046}"

getApplication136 :: KeyBindings a0
                  -> IO (Maybe Application)
getApplication136 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator136 :: KeyBindings a0
              -> IO Int32
getCreator136 =
  propertyGet "Creator"
              []
              outInt32

getParent136 :: KeyBindings a0
             -> IO (IDispatch ())
getParent136 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum57 :: KeyBindings a0
             -> IO (IUnknown ())
getNewEnum57 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount57 :: KeyBindings a0
           -> IO Int32
getCount57 =
  propertyGet "Count"
              []
              outInt32

getContext :: KeyBindings a0
           -> IO (IDispatch ())
getContext =
  propertyGet "Context"
              []
              outIDispatch

item57 :: Int32
       -> KeyBindings a0
       -> IO (KeyBinding ())
item57 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add36 :: (Variant a1, Variant a2)
      => WdKeyCategory
      -> String
      -> Int32
      -> a1
      -> a2
      -> KeyBindings a0
      -> IO (KeyBinding ())
add36 keyCategory command keyCode keyCode2 commandParameter =
  function1 "Add"
            [ inEnum keyCategory
            , inString command
            , inInt32 keyCode
            , inVariant keyCode2
            , inVariant commandParameter
            ]
            outIUnknown

clearAll0 :: KeyBindings a0
          -> IO ()
clearAll0 =
  method0 "ClearAll"
          []

key :: (Variant a1)
    => Int32
    -> a1
    -> KeyBindings a0
    -> IO (KeyBinding ())
key keyCode keyCode2 =
  function1 "Key"
            [ inInt32 keyCode
            , inVariant keyCode2
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface KeysBoundTo
-- 
-- --------------------------------------------------
data KeysBoundTo_ a = KeysBoundTo__ 
type KeysBoundTo a = IDispatch (KeysBoundTo_ a)
iidKeysBoundTo :: IID (KeysBoundTo ())
iidKeysBoundTo = mkIID "{00020997-0000-0000-C000-000000000046}"

getApplication137 :: KeysBoundTo a0
                  -> IO (Maybe Application)
getApplication137 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator137 :: KeysBoundTo a0
              -> IO Int32
getCreator137 =
  propertyGet "Creator"
              []
              outInt32

getParent137 :: KeysBoundTo a0
             -> IO (IDispatch ())
getParent137 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum58 :: KeysBoundTo a0
             -> IO (IUnknown ())
getNewEnum58 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount58 :: KeysBoundTo a0
           -> IO Int32
getCount58 =
  propertyGet "Count"
              []
              outInt32

getKeyCategory :: KeysBoundTo a0
               -> IO WdKeyCategory
getKeyCategory =
  propertyGet "KeyCategory"
              []
              outEnum

getCommand :: KeysBoundTo a0
           -> IO String
getCommand =
  propertyGet "Command"
              []
              outString

getCommandParameter :: KeysBoundTo a0
                    -> IO String
getCommandParameter =
  propertyGet "CommandParameter"
              []
              outString

getContext0 :: KeysBoundTo a0
            -> IO (IDispatch ())
getContext0 =
  propertyGet "Context"
              []
              outIDispatch

item58 :: Int32
       -> KeysBoundTo a0
       -> IO (KeyBinding ())
item58 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

key0 :: (Variant a1)
     => Int32
     -> a1
     -> KeysBoundTo a0
     -> IO (KeyBinding ())
key0 keyCode keyCode2 =
  function1 "Key"
            [ inInt32 keyCode
            , inVariant keyCode2
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface KeyBinding
-- 
-- --------------------------------------------------
data KeyBinding_ a = KeyBinding__ 
type KeyBinding a = IDispatch (KeyBinding_ a)
iidKeyBinding :: IID (KeyBinding ())
iidKeyBinding = mkIID "{00020998-0000-0000-C000-000000000046}"

getApplication138 :: KeyBinding a0
                  -> IO (Maybe Application)
getApplication138 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator138 :: KeyBinding a0
              -> IO Int32
getCreator138 =
  propertyGet "Creator"
              []
              outInt32

getParent138 :: KeyBinding a0
             -> IO (IDispatch ())
getParent138 =
  propertyGet "Parent"
              []
              outIDispatch

getCommand0 :: KeyBinding a0
            -> IO String
getCommand0 =
  propertyGet "Command"
              []
              outString

getKeyString :: KeyBinding a0
             -> IO String
getKeyString =
  propertyGet "KeyString"
              []
              outString

getProtected :: KeyBinding a0
             -> IO Bool
getProtected =
  propertyGet "Protected"
              []
              outBool

getKeyCategory0 :: KeyBinding a0
                -> IO WdKeyCategory
getKeyCategory0 =
  propertyGet "KeyCategory"
              []
              outEnum

getKeyCode :: KeyBinding a0
           -> IO Int32
getKeyCode =
  propertyGet "KeyCode"
              []
              outInt32

getKeyCode2 :: KeyBinding a0
            -> IO Int32
getKeyCode2 =
  propertyGet "KeyCode2"
              []
              outInt32

getCommandParameter0 :: KeyBinding a0
                     -> IO String
getCommandParameter0 =
  propertyGet "CommandParameter"
              []
              outString

getContext1 :: KeyBinding a0
            -> IO (IDispatch ())
getContext1 =
  propertyGet "Context"
              []
              outIDispatch

clear3 :: KeyBinding a0
       -> IO ()
clear3 =
  method0 "Clear"
          []

disable :: KeyBinding a0
        -> IO ()
disable =
  method0 "Disable"
          []

execute2 :: KeyBinding a0
         -> IO ()
execute2 =
  method0 "Execute"
          []

rebind :: (Variant a1)
       => WdKeyCategory
       -> String
       -> a1
       -> KeyBinding a0
       -> IO ()
rebind keyCategory command commandParameter =
  method0 "Rebind"
          [ inEnum keyCategory
          , inString command
          , inVariant commandParameter
          ]

-- --------------------------------------------------
-- 
-- interface FileConverter
-- 
-- --------------------------------------------------
data FileConverter_ a = FileConverter__ 
type FileConverter a = IDispatch (FileConverter_ a)
iidFileConverter :: IID (FileConverter ())
iidFileConverter = mkIID "{00020999-0000-0000-C000-000000000046}"

getApplication139 :: FileConverter a0
                  -> IO (Maybe Application)
getApplication139 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator139 :: FileConverter a0
              -> IO Int32
getCreator139 =
  propertyGet "Creator"
              []
              outInt32

getParent139 :: FileConverter a0
             -> IO (IDispatch ())
getParent139 =
  propertyGet "Parent"
              []
              outIDispatch

getFormatName :: FileConverter a0
              -> IO String
getFormatName =
  propertyGet "FormatName"
              []
              outString

getClassName :: FileConverter a0
             -> IO String
getClassName =
  propertyGet "ClassName"
              []
              outString

getSaveFormat0 :: FileConverter a0
               -> IO Int32
getSaveFormat0 =
  propertyGet "SaveFormat"
              []
              outInt32

getOpenFormat :: FileConverter a0
              -> IO Int32
getOpenFormat =
  propertyGet "OpenFormat"
              []
              outInt32

getCanSave :: FileConverter a0
           -> IO Bool
getCanSave =
  propertyGet "CanSave"
              []
              outBool

getCanOpen :: FileConverter a0
           -> IO Bool
getCanOpen =
  propertyGet "CanOpen"
              []
              outBool

getPath5 :: FileConverter a0
         -> IO String
getPath5 =
  propertyGet "Path"
              []
              outString

getName26 :: FileConverter a0
          -> IO String
getName26 =
  propertyGet "Name"
              []
              outString

getExtensions :: FileConverter a0
              -> IO String
getExtensions =
  propertyGet "Extensions"
              []
              outString

-- --------------------------------------------------
-- 
-- interface FileConverters
-- 
-- --------------------------------------------------
data FileConverters_ a = FileConverters__ 
type FileConverters a = IDispatch (FileConverters_ a)
iidFileConverters :: IID (FileConverters ())
iidFileConverters = mkIID "{0002099A-0000-0000-C000-000000000046}"

getApplication140 :: FileConverters a0
                  -> IO (Maybe Application)
getApplication140 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator140 :: FileConverters a0
              -> IO Int32
getCreator140 =
  propertyGet "Creator"
              []
              outInt32

getParent140 :: FileConverters a0
             -> IO (IDispatch ())
getParent140 =
  propertyGet "Parent"
              []
              outIDispatch

getCount59 :: FileConverters a0
           -> IO Int32
getCount59 =
  propertyGet "Count"
              []
              outInt32

getNewEnum59 :: FileConverters a0
             -> IO (IUnknown ())
getNewEnum59 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getConvertMacWordChevrons :: FileConverters a0
                          -> IO WdChevronConvertRule
getConvertMacWordChevrons =
  propertyGet "ConvertMacWordChevrons"
              []
              outEnum

setConvertMacWordChevrons :: WdChevronConvertRule
                          -> FileConverters a0
                          -> IO ()
setConvertMacWordChevrons prop =
  propertySet "ConvertMacWordChevrons"
              [inEnum prop]

item59 :: (Variant a1)
       => a1
       -> FileConverters a0
       -> IO (FileConverter ())
item59 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface SynonymInfo
-- 
-- --------------------------------------------------
data SynonymInfo_ a = SynonymInfo__ 
type SynonymInfo a = IDispatch (SynonymInfo_ a)
iidSynonymInfo :: IID (SynonymInfo ())
iidSynonymInfo = mkIID "{0002099B-0000-0000-C000-000000000046}"

getApplication141 :: SynonymInfo a0
                  -> IO (Maybe Application)
getApplication141 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator141 :: SynonymInfo a0
              -> IO Int32
getCreator141 =
  propertyGet "Creator"
              []
              outInt32

getParent141 :: SynonymInfo a0
             -> IO (IDispatch ())
getParent141 =
  propertyGet "Parent"
              []
              outIDispatch

getWord :: SynonymInfo a0
        -> IO String
getWord =
  propertyGet "Word"
              []
              outString

getFound0 :: SynonymInfo a0
          -> IO Bool
getFound0 =
  propertyGet "Found"
              []
              outBool

getMeaningCount :: SynonymInfo a0
                -> IO Int32
getMeaningCount =
  propertyGet "MeaningCount"
              []
              outInt32

getMeaningList :: (Variant a1)
               => SynonymInfo a0
               -> IO a1
getMeaningList =
  propertyGet "MeaningList"
              []
              outVariant

getPartOfSpeechList :: (Variant a1)
                    => SynonymInfo a0
                    -> IO a1
getPartOfSpeechList =
  propertyGet "PartOfSpeechList"
              []
              outVariant

getSynonymList :: (Variant a1, Variant a2)
               => a2
               -> SynonymInfo a0
               -> IO a1
getSynonymList meaning =
  propertyGet "SynonymList"
              [inVariant meaning]
              outVariant

getAntonymList :: (Variant a1)
               => SynonymInfo a0
               -> IO a1
getAntonymList =
  propertyGet "AntonymList"
              []
              outVariant

getRelatedExpressionList :: (Variant a1)
                         => SynonymInfo a0
                         -> IO a1
getRelatedExpressionList =
  propertyGet "RelatedExpressionList"
              []
              outVariant

getRelatedWordList :: (Variant a1)
                   => SynonymInfo a0
                   -> IO a1
getRelatedWordList =
  propertyGet "RelatedWordList"
              []
              outVariant

-- --------------------------------------------------
-- 
-- interface Hyperlinks
-- 
-- --------------------------------------------------
data Hyperlinks_ a = Hyperlinks__ 
type Hyperlinks a = IDispatch (Hyperlinks_ a)
iidHyperlinks :: IID (Hyperlinks ())
iidHyperlinks = mkIID "{0002099C-0000-0000-C000-000000000046}"

getApplication142 :: Hyperlinks a0
                  -> IO (Maybe Application)
getApplication142 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator142 :: Hyperlinks a0
              -> IO Int32
getCreator142 =
  propertyGet "Creator"
              []
              outInt32

getParent142 :: Hyperlinks a0
             -> IO (IDispatch ())
getParent142 =
  propertyGet "Parent"
              []
              outIDispatch

getCount60 :: Hyperlinks a0
           -> IO Int32
getCount60 =
  propertyGet "Count"
              []
              outInt32

getNewEnum60 :: Hyperlinks a0
             -> IO (IUnknown ())
getNewEnum60 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item60 :: (Variant a1)
       => a1
       -> Hyperlinks a0
       -> IO (Hyperlink ())
item60 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add37 :: (Variant a2, Variant a3)
      => IDispatch a1
      -> a2
      -> a3
      -> Hyperlinks a0
      -> IO (Hyperlink ())
add37 anchor address subAddress =
  function1 "_Add"
            [ inIDispatch anchor
            , inVariant address
            , inVariant subAddress
            ]
            outIUnknown

add38 :: (Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
      => IDispatch a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> Hyperlinks a0
      -> IO (Hyperlink ())
add38 anchor address subAddress screenTip textToDisplay target =
  function1 "Add"
            [ inIDispatch anchor
            , inVariant address
            , inVariant subAddress
            , inVariant screenTip
            , inVariant textToDisplay
            , inVariant target
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Hyperlink
-- 
-- --------------------------------------------------
data Hyperlink_ a = Hyperlink__ 
type Hyperlink a = IDispatch (Hyperlink_ a)
iidHyperlink :: IID (Hyperlink ())
iidHyperlink = mkIID "{0002099D-0000-0000-C000-000000000046}"

getApplication143 :: Hyperlink a0
                  -> IO (Maybe Application)
getApplication143 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator143 :: Hyperlink a0
              -> IO Int32
getCreator143 =
  propertyGet "Creator"
              []
              outInt32

getParent143 :: Hyperlink a0
             -> IO (IDispatch ())
getParent143 =
  propertyGet "Parent"
              []
              outIDispatch

getName27 :: Hyperlink a0
          -> IO String
getName27 =
  propertyGet "Name"
              []
              outString

getAddressOld :: Hyperlink a0
              -> IO String
getAddressOld =
  propertyGet "AddressOld"
              []
              outString

getType13 :: Hyperlink a0
          -> IO MsoHyperlinkType
getType13 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoHyperlinkType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType13 methPtr iptr prop) 12 iptr
    doThenFree free readMsoHyperlinkType prop

foreign import stdcall "dynamic" prim_Word_getType13 :: Ptr () -> Ptr () -> Ptr MsoHyperlinkType -> IO Int32
getRange19 :: Hyperlink a0
           -> IO (Range ())
getRange19 =
  propertyGet "Range"
              []
              outIDispatch

getShape :: Hyperlink a0
         -> IO (Shape ())
getShape =
  propertyGet "Shape"
              []
              outIUnknown

getSubAddressOld :: Hyperlink a0
                 -> IO String
getSubAddressOld =
  propertyGet "SubAddressOld"
              []
              outString

getExtraInfoRequired :: Hyperlink a0
                     -> IO Bool
getExtraInfoRequired =
  propertyGet "ExtraInfoRequired"
              []
              outBool

delete37 :: Hyperlink a0
         -> IO ()
delete37 =
  method0 "Delete"
          []

follow :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
       => a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> Hyperlink a0
       -> IO ()
follow newWindow2 addHistory extraInfo method headerInfo =
  method0 "Follow"
          [ inVariant newWindow2
          , inVariant addHistory
          , inVariant extraInfo
          , inVariant method
          , inVariant headerInfo
          ]

addToFavorites0 :: Hyperlink a0
                -> IO ()
addToFavorites0 =
  method0 "AddToFavorites"
          []

createNewDocument0 :: String
                   -> Bool
                   -> Bool
                   -> Hyperlink a0
                   -> IO ()
createNewDocument0 fileName editNow overwrite =
  method0 "CreateNewDocument"
          [ inString fileName
          , inBool editNow
          , inBool overwrite
          ]

getAddress1 :: Hyperlink a0
            -> IO String
getAddress1 =
  propertyGet "Address"
              []
              outString

setAddress :: String
           -> Hyperlink a0
           -> IO ()
setAddress prop =
  propertySet "Address"
              [inString prop]

getSubAddress :: Hyperlink a0
              -> IO String
getSubAddress =
  propertyGet "SubAddress"
              []
              outString

setSubAddress :: String
              -> Hyperlink a0
              -> IO ()
setSubAddress prop =
  propertySet "SubAddress"
              [inString prop]

getEmailSubject :: Hyperlink a0
                -> IO String
getEmailSubject =
  propertyGet "EmailSubject"
              []
              outString

setEmailSubject :: String
                -> Hyperlink a0
                -> IO ()
setEmailSubject prop =
  propertySet "EmailSubject"
              [inString prop]

getScreenTip :: Hyperlink a0
             -> IO String
getScreenTip =
  propertyGet "ScreenTip"
              []
              outString

setScreenTip :: String
             -> Hyperlink a0
             -> IO ()
setScreenTip prop =
  propertySet "ScreenTip"
              [inString prop]

getTextToDisplay :: Hyperlink a0
                 -> IO String
getTextToDisplay =
  propertyGet "TextToDisplay"
              []
              outString

setTextToDisplay :: String
                 -> Hyperlink a0
                 -> IO ()
setTextToDisplay prop =
  propertySet "TextToDisplay"
              [inString prop]

getTarget0 :: Hyperlink a0
           -> IO String
getTarget0 =
  propertyGet "Target"
              []
              outString

setTarget0 :: String
           -> Hyperlink a0
           -> IO ()
setTarget0 prop =
  propertySet "Target"
              [inString prop]

-- --------------------------------------------------
-- 
-- interface Shapes
-- 
-- --------------------------------------------------
data Shapes_ a = Shapes__ 
type Shapes a = IDispatch (Shapes_ a)
iidShapes :: IID (Shapes ())
iidShapes = mkIID "{0002099F-0000-0000-C000-000000000046}"

getApplication144 :: Shapes a0
                  -> IO (Maybe Application)
getApplication144 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator144 :: Shapes a0
              -> IO Int32
getCreator144 =
  propertyGet "Creator"
              []
              outInt32

getParent144 :: Shapes a0
             -> IO (IDispatch ())
getParent144 =
  propertyGet "Parent"
              []
              outIDispatch

getCount61 :: Shapes a0
           -> IO Int32
getCount61 =
  propertyGet "Count"
              []
              outInt32

getNewEnum61 :: Shapes a0
             -> IO (IUnknown ())
getNewEnum61 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item61 :: (Variant a1)
       => a1
       -> Shapes a0
       -> IO (Shape ())
item61 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

addCallout :: (Variant a1)
           => MsoCalloutType
           -> Float
           -> Float
           -> Float
           -> Float
           -> a1
           -> Shapes a0
           -> IO (Shape ())
addCallout type0 left top width height anchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallMsoCalloutType type0
    anchor <- marshallVariant anchor
    invokeAndCheck (\ methPtr iptr -> prim_Word_addCallout methPtr iptr type0 left top width height anchor prop) 13 iptr
    free anchor
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addCallout" prim_Word_addCallout :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> VARIANT -> Ptr (Ptr (Shape a)) -> IO Int32
addConnector :: MsoConnectorType
             -> Float
             -> Float
             -> Float
             -> Float
             -> Shapes a0
             -> IO (Shape ())
addConnector type0 beginX beginY endX endY iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallMsoConnectorType type0
    invokeAndCheck (\ methPtr iptr -> prim_Word_addConnector methPtr iptr type0 beginX beginY endX endY prop) 14 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addConnector" prim_Word_addConnector :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Ptr (Ptr (Shape a)) -> IO Int32
addCurve :: (Variant a1, Variant a2)
         => a1
         -> a2
         -> Shapes a0
         -> IO (Shape ())
addCurve safeArrayOfPoints anchor =
  function1 "AddCurve"
            [ inVariant safeArrayOfPoints
            , inVariant anchor
            ]
            outIUnknown

addLabel :: (Variant a1)
         => MsoTextOrientation
         -> Float
         -> Float
         -> Float
         -> Float
         -> a1
         -> Shapes a0
         -> IO (Shape ())
addLabel orientation left top width height anchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    orientation <- marshallMsoTextOrientation orientation
    anchor <- marshallVariant anchor
    invokeAndCheck (\ methPtr iptr -> prim_Word_addLabel methPtr iptr orientation left top width height anchor prop) 16 iptr
    free anchor
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addLabel" prim_Word_addLabel :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> VARIANT -> Ptr (Ptr (Shape a)) -> IO Int32
addLine :: (Variant a1)
        => Float
        -> Float
        -> Float
        -> Float
        -> a1
        -> Shapes a0
        -> IO (Shape ())
addLine beginX beginY endX endY anchor =
  function1 "AddLine"
            [ inFloat beginX
            , inFloat beginY
            , inFloat endX
            , inFloat endY
            , inVariant anchor
            ]
            outIUnknown

addPicture :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7)
           => String
           -> a1
           -> a2
           -> a3
           -> a4
           -> a5
           -> a6
           -> a7
           -> Shapes a0
           -> IO (Shape ())
addPicture fileName linkToFile saveWithDocument left top width height anchor =
  function1 "AddPicture"
            [ inString fileName
            , inVariant linkToFile
            , inVariant saveWithDocument
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            , inVariant anchor
            ]
            outIUnknown

addPolyline :: (Variant a1, Variant a2)
            => a1
            -> a2
            -> Shapes a0
            -> IO (Shape ())
addPolyline safeArrayOfPoints anchor =
  function1 "AddPolyline"
            [ inVariant safeArrayOfPoints
            , inVariant anchor
            ]
            outIUnknown

addShape :: (Variant a1)
         => Int32
         -> Float
         -> Float
         -> Float
         -> Float
         -> a1
         -> Shapes a0
         -> IO (Shape ())
addShape type0 left top width height anchor =
  function1 "AddShape"
            [ inInt32 type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            , inVariant anchor
            ]
            outIUnknown

addTextEffect :: (Variant a1)
              => MsoPresetTextEffect
              -> String
              -> String
              -> Float
              -> MsoTriState
              -> MsoTriState
              -> Float
              -> Float
              -> a1
              -> Shapes a0
              -> IO (Shape ())
addTextEffect presetTextEffect text fontName fontSize fontBold fontItalic left top anchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    presetTextEffect <- marshallMsoPresetTextEffect presetTextEffect
    text <- marshallBSTR text
    fontName <- marshallBSTR fontName
    fontBold <- marshallMsoTriState fontBold
    fontItalic <- marshallMsoTriState fontItalic
    anchor <- marshallVariant anchor
    invokeAndCheck (\ methPtr iptr -> prim_Word_addTextEffect methPtr iptr presetTextEffect text fontName fontSize fontBold fontItalic left top anchor prop) 21 iptr
    freeBSTR text
    freeBSTR fontName
    free anchor
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addTextEffect" prim_Word_addTextEffect :: Ptr () -> Ptr () -> Ptr () -> Ptr String -> Ptr String -> Float -> Ptr () -> Ptr () -> Float -> Float -> VARIANT -> Ptr (Ptr (Shape a)) -> IO Int32
addTextbox :: (Variant a1)
           => MsoTextOrientation
           -> Float
           -> Float
           -> Float
           -> Float
           -> a1
           -> Shapes a0
           -> IO (Shape ())
addTextbox orientation left top width height anchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    orientation <- marshallMsoTextOrientation orientation
    anchor <- marshallVariant anchor
    invokeAndCheck (\ methPtr iptr -> prim_Word_addTextbox methPtr iptr orientation left top width height anchor prop) 22 iptr
    free anchor
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addTextbox" prim_Word_addTextbox :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> VARIANT -> Ptr (Ptr (Shape a)) -> IO Int32
buildFreeform :: MsoEditingType
              -> Float
              -> Float
              -> Shapes a0
              -> IO (FreeformBuilder ())
buildFreeform editingType x1 y1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Word_buildFreeform methPtr iptr editingType x1 y1 prop) 23 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_buildFreeform" prim_Word_buildFreeform :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Ptr (Ptr (FreeformBuilder a)) -> IO Int32
range0 :: (Variant a1)
       => a1
       -> Shapes a0
       -> IO (ShapeRange ())
range0 index =
  function1 "Range"
            [inVariant index]
            outIUnknown

selectAll :: Shapes a0
          -> IO ()
selectAll =
  method0 "SelectAll"
          []

addOLEObject :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11, Variant a12)
             => a1
             -> a2
             -> a3
             -> a4
             -> a5
             -> a6
             -> a7
             -> a8
             -> a9
             -> a10
             -> a11
             -> a12
             -> Shapes a0
             -> IO (Shape ())
addOLEObject classType fileName linkToFile displayAsIcon iconFileName iconIndex iconLabel left top width height anchor =
  function1 "AddOLEObject"
            [ inVariant classType
            , inVariant fileName
            , inVariant linkToFile
            , inVariant displayAsIcon
            , inVariant iconFileName
            , inVariant iconIndex
            , inVariant iconLabel
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            , inVariant anchor
            ]
            outIUnknown

addOLEControl :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> Shapes a0
              -> IO (Shape ())
addOLEControl classType left top width height anchor =
  function1 "AddOLEControl"
            [ inVariant classType
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            , inVariant anchor
            ]
            outIUnknown

addDiagram :: (Variant a1)
           => MsoDiagramType
           -> Float
           -> Float
           -> Float
           -> Float
           -> a1
           -> Shapes a0
           -> IO (Shape ())
addDiagram type0 left top width height anchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallMsoDiagramType type0
    anchor <- marshallVariant anchor
    invokeAndCheck (\ methPtr iptr -> prim_Word_addDiagram methPtr iptr type0 left top width height anchor prop) 28 iptr
    free anchor
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addDiagram" prim_Word_addDiagram :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> VARIANT -> Ptr (Ptr (Shape a)) -> IO Int32
addCanvas :: (Variant a1)
          => Float
          -> Float
          -> Float
          -> Float
          -> a1
          -> Shapes a0
          -> IO (Shape ())
addCanvas left top width height anchor =
  function1 "AddCanvas"
            [ inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            , inVariant anchor
            ]
            outIUnknown

addChart :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
         => XlChartType
         -> a1
         -> a2
         -> a3
         -> a4
         -> a5
         -> Shapes a0
         -> IO (Shape ())
addChart type0 left top width height anchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallXlChartType type0
    left <- marshallVariant left
    top <- marshallVariant top
    width <- marshallVariant width
    height <- marshallVariant height
    anchor <- marshallVariant anchor
    invokeAndCheck (\ methPtr iptr -> prim_Word_addChart methPtr iptr type0 left top width height anchor prop) 30 iptr
    free left
    free top
    free width
    free height
    free anchor
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addChart" prim_Word_addChart :: Ptr () -> Ptr () -> Ptr () -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> VARIANT -> Ptr (Ptr (Shape a)) -> IO Int32
-- --------------------------------------------------
-- 
-- interface ShapeRange
-- 
-- --------------------------------------------------
data ShapeRange_ a = ShapeRange__ 
type ShapeRange a = IDispatch (ShapeRange_ a)
iidShapeRange :: IID (ShapeRange ())
iidShapeRange = mkIID "{000209B5-0000-0000-C000-000000000046}"

getApplication145 :: ShapeRange a0
                  -> IO (Maybe Application)
getApplication145 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator145 :: ShapeRange a0
              -> IO Int32
getCreator145 =
  propertyGet "Creator"
              []
              outInt32

getParent145 :: ShapeRange a0
             -> IO (IDispatch ())
getParent145 =
  propertyGet "Parent"
              []
              outIDispatch

getCount62 :: ShapeRange a0
           -> IO Int32
getCount62 =
  propertyGet "Count"
              []
              outInt32

getNewEnum62 :: ShapeRange a0
             -> IO (IUnknown ())
getNewEnum62 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getAdjustments :: ShapeRange a0
               -> IO (Adjustments ())
getAdjustments =
  propertyGet "Adjustments"
              []
              outIUnknown

getAutoShapeType :: ShapeRange a0
                 -> IO MsoAutoShapeType
getAutoShapeType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoAutoShapeType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAutoShapeType methPtr iptr prop) 13 iptr
    doThenFree free readMsoAutoShapeType prop

foreign import stdcall "dynamic" prim_Word_getAutoShapeType :: Ptr () -> Ptr () -> Ptr MsoAutoShapeType -> IO Int32
setAutoShapeType :: MsoAutoShapeType
                 -> ShapeRange a0
                 -> IO ()
setAutoShapeType prop iptr =
  do
    prop <- marshallMsoAutoShapeType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAutoShapeType methPtr iptr prop) 14 iptr

foreign import stdcall "prim_Word_setAutoShapeType" prim_Word_setAutoShapeType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getCallout :: ShapeRange a0
           -> IO (CalloutFormat ())
getCallout =
  propertyGet "Callout"
              []
              outIUnknown

getConnectionSiteCount :: ShapeRange a0
                       -> IO Int32
getConnectionSiteCount =
  propertyGet "ConnectionSiteCount"
              []
              outInt32

getConnector :: ShapeRange a0
             -> IO MsoTriState
getConnector iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 17 iptr
    doThenFree free readMsoTriState prop

foreign import stdcall "dynamic" prim_Word_getConnector :: Ptr () -> Ptr () -> Ptr MsoTriState -> IO Int32
getConnectorFormat :: ShapeRange a0
                   -> IO (ConnectorFormat ())
getConnectorFormat =
  propertyGet "ConnectorFormat"
              []
              outIUnknown

getFill :: ShapeRange a0
        -> IO (FillFormat ())
getFill =
  propertyGet "Fill"
              []
              outIUnknown

getGroupItems :: ShapeRange a0
              -> IO (GroupShapes ())
getGroupItems =
  propertyGet "GroupItems"
              []
              outIUnknown

getHeight9 :: ShapeRange a0
           -> IO Float
getHeight9 =
  propertyGet "Height"
              []
              outFloat

setHeight13 :: Float
            -> ShapeRange a0
            -> IO ()
setHeight13 prop =
  propertySet "Height"
              [inFloat prop]

getHorizontalFlip :: ShapeRange a0
                  -> IO MsoTriState
getHorizontalFlip iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 23 iptr
    doThenFree free readMsoTriState prop

getLeft3 :: ShapeRange a0
         -> IO Float
getLeft3 =
  propertyGet "Left"
              []
              outFloat

setLeft3 :: Float
         -> ShapeRange a0
         -> IO ()
setLeft3 prop =
  propertySet "Left"
              [inFloat prop]

getLine :: ShapeRange a0
        -> IO (LineFormat ())
getLine =
  propertyGet "Line"
              []
              outIUnknown

getLockAspectRatio :: ShapeRange a0
                   -> IO MsoTriState
getLockAspectRatio iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 27 iptr
    doThenFree free readMsoTriState prop

setLockAspectRatio :: MsoTriState
                   -> ShapeRange a0
                   -> IO ()
setLockAspectRatio prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setLockAspectRatio methPtr iptr prop) 28 iptr

foreign import stdcall "prim_Word_setLockAspectRatio" prim_Word_setLockAspectRatio :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getName28 :: ShapeRange a0
          -> IO String
getName28 =
  propertyGet "Name"
              []
              outString

setName8 :: String
         -> ShapeRange a0
         -> IO ()
setName8 prop =
  propertySet "Name"
              [inString prop]

getNodes :: ShapeRange a0
         -> IO (ShapeNodes ())
getNodes =
  propertyGet "Nodes"
              []
              outIUnknown

getRotation :: ShapeRange a0
            -> IO Float
getRotation =
  propertyGet "Rotation"
              []
              outFloat

setRotation :: Float
            -> ShapeRange a0
            -> IO ()
setRotation prop =
  propertySet "Rotation"
              [inFloat prop]

getPictureFormat :: ShapeRange a0
                 -> IO (PictureFormat ())
getPictureFormat =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow1 :: ShapeRange a0
           -> IO (ShadowFormat ())
getShadow1 =
  propertyGet "Shadow"
              []
              outIUnknown

getTextEffect :: ShapeRange a0
              -> IO (TextEffectFormat ())
getTextEffect =
  propertyGet "TextEffect"
              []
              outIUnknown

getTextFrame :: ShapeRange a0
             -> IO (TextFrame ())
getTextFrame =
  propertyGet "TextFrame"
              []
              outIUnknown

getThreeD :: ShapeRange a0
          -> IO (ThreeDFormat ())
getThreeD =
  propertyGet "ThreeD"
              []
              outIUnknown

getTop3 :: ShapeRange a0
        -> IO Float
getTop3 =
  propertyGet "Top"
              []
              outFloat

setTop3 :: Float
        -> ShapeRange a0
        -> IO ()
setTop3 prop =
  propertySet "Top"
              [inFloat prop]

getType14 :: ShapeRange a0
          -> IO MsoShapeType
getType14 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoShapeType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType14 methPtr iptr prop) 41 iptr
    doThenFree free readMsoShapeType prop

foreign import stdcall "dynamic" prim_Word_getType14 :: Ptr () -> Ptr () -> Ptr MsoShapeType -> IO Int32
getVerticalFlip :: ShapeRange a0
                -> IO MsoTriState
getVerticalFlip iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 42 iptr
    doThenFree free readMsoTriState prop

getVertices :: (Variant a1)
            => ShapeRange a0
            -> IO a1
getVertices =
  propertyGet "Vertices"
              []
              outVariant

getVisible3 :: ShapeRange a0
            -> IO MsoTriState
getVisible3 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 44 iptr
    doThenFree free readMsoTriState prop

setVisible3 :: MsoTriState
            -> ShapeRange a0
            -> IO ()
setVisible3 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible3 methPtr iptr prop) 45 iptr

foreign import stdcall "prim_Word_setVisible3" prim_Word_setVisible3 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWidth12 :: ShapeRange a0
           -> IO Float
getWidth12 =
  propertyGet "Width"
              []
              outFloat

setWidth16 :: Float
           -> ShapeRange a0
           -> IO ()
setWidth16 prop =
  propertySet "Width"
              [inFloat prop]

getZOrderPosition :: ShapeRange a0
                  -> IO Int32
getZOrderPosition =
  propertyGet "ZOrderPosition"
              []
              outInt32

getHyperlink :: ShapeRange a0
             -> IO (Hyperlink ())
getHyperlink =
  propertyGet "Hyperlink"
              []
              outIDispatch

getRelativeHorizontalPosition1 :: ShapeRange a0
                               -> IO WdRelativeHorizontalPosition
getRelativeHorizontalPosition1 =
  propertyGet "RelativeHorizontalPosition"
              []
              outEnum

setRelativeHorizontalPosition1 :: WdRelativeHorizontalPosition
                               -> ShapeRange a0
                               -> IO ()
setRelativeHorizontalPosition1 prop =
  propertySet "RelativeHorizontalPosition"
              [inEnum prop]

getRelativeVerticalPosition1 :: ShapeRange a0
                             -> IO WdRelativeVerticalPosition
getRelativeVerticalPosition1 =
  propertyGet "RelativeVerticalPosition"
              []
              outEnum

setRelativeVerticalPosition1 :: WdRelativeVerticalPosition
                             -> ShapeRange a0
                             -> IO ()
setRelativeVerticalPosition1 prop =
  propertySet "RelativeVerticalPosition"
              [inEnum prop]

getLockAnchor0 :: ShapeRange a0
               -> IO Int32
getLockAnchor0 =
  propertyGet "LockAnchor"
              []
              outInt32

setLockAnchor0 :: Int32
               -> ShapeRange a0
               -> IO ()
setLockAnchor0 prop =
  propertySet "LockAnchor"
              [inInt32 prop]

getWrapFormat :: ShapeRange a0
              -> IO (WrapFormat ())
getWrapFormat =
  propertyGet "WrapFormat"
              []
              outIUnknown

getAnchor :: ShapeRange a0
          -> IO (Range ())
getAnchor =
  propertyGet "Anchor"
              []
              outIDispatch

item62 :: (Variant a1)
       => a1
       -> ShapeRange a0
       -> IO (Shape ())
item62 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

align :: MsoAlignCmd
      -> Int32
      -> ShapeRange a0
      -> IO ()
align align0 relativeTo iptr =
  do
    align0 <- marshallMsoAlignCmd align0
    invokeAndCheck (\ methPtr iptr -> prim_Word_align methPtr iptr align0 relativeTo) 59 iptr

foreign import stdcall "prim_Word_align" prim_Word_align :: Ptr () -> Ptr () -> Ptr () -> Int32 -> IO Int32
apply0 :: ShapeRange a0
       -> IO ()
apply0 =
  method0 "Apply"
          []

delete38 :: ShapeRange a0
         -> IO ()
delete38 =
  method0 "Delete"
          []

distribute :: MsoDistributeCmd
           -> Int32
           -> ShapeRange a0
           -> IO ()
distribute distribute0 relativeTo iptr =
  do
    distribute0 <- marshallMsoDistributeCmd distribute0
    invokeAndCheck (\ methPtr iptr -> prim_Word_distribute methPtr iptr distribute0 relativeTo) 62 iptr

foreign import stdcall "prim_Word_distribute" prim_Word_distribute :: Ptr () -> Ptr () -> Ptr () -> Int32 -> IO Int32
duplicate :: ShapeRange a0
          -> IO (ShapeRange ())
duplicate =
  function1 "Duplicate"
            []
            outIDispatch

flip :: MsoFlipCmd
     -> ShapeRange a0
     -> IO ()
flip flipCmd iptr =
  do
    flipCmd <- marshallMsoFlipCmd flipCmd
    invokeAndCheck (\ methPtr iptr -> prim_Word_flip methPtr iptr flipCmd) 64 iptr

foreign import stdcall "prim_Word_flip" prim_Word_flip :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementLeft :: Float
              -> ShapeRange a0
              -> IO ()
incrementLeft increment =
  method0 "IncrementLeft"
          [inFloat increment]

incrementRotation :: Float
                  -> ShapeRange a0
                  -> IO ()
incrementRotation increment =
  method0 "IncrementRotation"
          [inFloat increment]

incrementTop :: Float
             -> ShapeRange a0
             -> IO ()
incrementTop increment =
  method0 "IncrementTop"
          [inFloat increment]

group :: ShapeRange a0
      -> IO (Shape ())
group =
  function1 "Group"
            []
            outIUnknown

pickUp :: ShapeRange a0
       -> IO ()
pickUp =
  method0 "PickUp"
          []

regroup :: ShapeRange a0
        -> IO (Shape ())
regroup =
  function1 "Regroup"
            []
            outIUnknown

rerouteConnections :: ShapeRange a0
                   -> IO ()
rerouteConnections =
  method0 "RerouteConnections"
          []

scaleHeight :: Float
            -> MsoTriState
            -> MsoScaleFrom
            -> ShapeRange a0
            -> IO ()
scaleHeight factor relativeToOriginalSize scale iptr =
  do
    relativeToOriginalSize <- marshallMsoTriState relativeToOriginalSize
    scale <- marshallMsoScaleFrom scale
    invokeAndCheck (\ methPtr iptr -> prim_Word_scaleHeight methPtr iptr factor relativeToOriginalSize scale) 72 iptr

foreign import stdcall "prim_Word_scaleHeight" prim_Word_scaleHeight :: Ptr () -> Ptr () -> Float -> Ptr () -> Ptr () -> IO Int32
scaleWidth :: Float
           -> MsoTriState
           -> MsoScaleFrom
           -> ShapeRange a0
           -> IO ()
scaleWidth factor relativeToOriginalSize scale iptr =
  do
    relativeToOriginalSize <- marshallMsoTriState relativeToOriginalSize
    scale <- marshallMsoScaleFrom scale
    invokeAndCheck (\ methPtr iptr -> prim_Word_scaleWidth methPtr iptr factor relativeToOriginalSize scale) 73 iptr

foreign import stdcall "prim_Word_scaleWidth" prim_Word_scaleWidth :: Ptr () -> Ptr () -> Float -> Ptr () -> Ptr () -> IO Int32
select16 :: (Variant a1)
         => a1
         -> ShapeRange a0
         -> IO ()
select16 replace =
  method0 "Select"
          [inVariant replace]

setShapesDefaultProperties :: ShapeRange a0
                           -> IO ()
setShapesDefaultProperties =
  method0 "SetShapesDefaultProperties"
          []

ungroup :: ShapeRange a0
        -> IO (ShapeRange ())
ungroup =
  function1 "Ungroup"
            []
            outIDispatch

zOrder :: MsoZOrderCmd
       -> ShapeRange a0
       -> IO ()
zOrder zOrderCmd iptr =
  do
    zOrderCmd <- marshallMsoZOrderCmd zOrderCmd
    invokeAndCheck (\ methPtr iptr -> prim_Word_zOrder methPtr iptr zOrderCmd) 77 iptr

foreign import stdcall "prim_Word_zOrder" prim_Word_zOrder :: Ptr () -> Ptr () -> Ptr () -> IO Int32
convertToFrame :: ShapeRange a0
               -> IO (Frame ())
convertToFrame =
  function1 "ConvertToFrame"
            []
            outIDispatch

convertToInlineShape :: ShapeRange a0
                     -> IO (InlineShape ())
convertToInlineShape =
  function1 "ConvertToInlineShape"
            []
            outIUnknown

activate6 :: ShapeRange a0
          -> IO ()
activate6 =
  method0 "Activate"
          []

getAlternativeText :: ShapeRange a0
                   -> IO String
getAlternativeText =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText :: String
                   -> ShapeRange a0
                   -> IO ()
setAlternativeText prop =
  propertySet "AlternativeText"
              [inString prop]

getHasDiagram :: ShapeRange a0
              -> IO MsoTriState
getHasDiagram iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 83 iptr
    doThenFree free readMsoTriState prop

getDiagram :: ShapeRange a0
           -> IO (Maybe IMsoDiagram)
getDiagram iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDiagram methPtr iptr prop) 84 iptr
    doThenFree free (readunique readIMsoDiagram) prop

foreign import stdcall "dynamic" prim_Word_getDiagram :: Ptr () -> Ptr () -> Ptr (Ptr IMsoDiagram) -> IO Int32
getHasDiagramNode :: ShapeRange a0
                  -> IO MsoTriState
getHasDiagramNode iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 85 iptr
    doThenFree free readMsoTriState prop

getDiagramNode :: ShapeRange a0
               -> IO (DiagramNode ())
getDiagramNode =
  propertyGet "DiagramNode"
              []
              outIUnknown

getChild :: ShapeRange a0
         -> IO MsoTriState
getChild iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 87 iptr
    doThenFree free readMsoTriState prop

getParentGroup :: ShapeRange a0
               -> IO (Shape ())
getParentGroup =
  propertyGet "ParentGroup"
              []
              outIUnknown

getCanvasItems :: ShapeRange a0
               -> IO (CanvasShapes ())
getCanvasItems =
  propertyGet "CanvasItems"
              []
              outIUnknown

getID6 :: ShapeRange a0
       -> IO Int32
getID6 =
  propertyGet "ID"
              []
              outInt32

canvasCropLeft :: Float
               -> ShapeRange a0
               -> IO ()
canvasCropLeft increment =
  method0 "CanvasCropLeft"
          [inFloat increment]

canvasCropTop :: Float
              -> ShapeRange a0
              -> IO ()
canvasCropTop increment =
  method0 "CanvasCropTop"
          [inFloat increment]

canvasCropRight :: Float
                -> ShapeRange a0
                -> IO ()
canvasCropRight increment =
  method0 "CanvasCropRight"
          [inFloat increment]

canvasCropBottom :: Float
                 -> ShapeRange a0
                 -> IO ()
canvasCropBottom increment =
  method0 "CanvasCropBottom"
          [inFloat increment]

setRTF :: String
       -> ShapeRange a0
       -> IO ()
setRTF rhs =
  propertySet "RTF"
              [inString rhs]

getLayoutInCell :: ShapeRange a0
                -> IO Int32
getLayoutInCell =
  propertyGet "LayoutInCell"
              []
              outInt32

setLayoutInCell :: Int32
                -> ShapeRange a0
                -> IO ()
setLayoutInCell prop =
  propertySet "LayoutInCell"
              [inInt32 prop]

getLeftRelative :: ShapeRange a0
                -> IO Float
getLeftRelative =
  propertyGet "LeftRelative"
              []
              outFloat

setLeftRelative :: Float
                -> ShapeRange a0
                -> IO ()
setLeftRelative prop =
  propertySet "LeftRelative"
              [inFloat prop]

getTopRelative :: ShapeRange a0
               -> IO Float
getTopRelative =
  propertyGet "TopRelative"
              []
              outFloat

setTopRelative :: Float
               -> ShapeRange a0
               -> IO ()
setTopRelative prop =
  propertySet "TopRelative"
              [inFloat prop]

getWidthRelative :: ShapeRange a0
                 -> IO Float
getWidthRelative =
  propertyGet "WidthRelative"
              []
              outFloat

setWidthRelative :: Float
                 -> ShapeRange a0
                 -> IO ()
setWidthRelative prop =
  propertySet "WidthRelative"
              [inFloat prop]

getHeightRelative :: ShapeRange a0
                  -> IO Float
getHeightRelative =
  propertyGet "HeightRelative"
              []
              outFloat

setHeightRelative :: Float
                  -> ShapeRange a0
                  -> IO ()
setHeightRelative prop =
  propertySet "HeightRelative"
              [inFloat prop]

getRelativeHorizontalSize :: ShapeRange a0
                          -> IO WdRelativeHorizontalSize
getRelativeHorizontalSize =
  propertyGet "RelativeHorizontalSize"
              []
              outEnum

setRelativeHorizontalSize :: WdRelativeHorizontalSize
                          -> ShapeRange a0
                          -> IO ()
setRelativeHorizontalSize prop =
  propertySet "RelativeHorizontalSize"
              [inEnum prop]

getRelativeVerticalSize :: ShapeRange a0
                        -> IO WdRelativeVerticalSize
getRelativeVerticalSize =
  propertyGet "RelativeVerticalSize"
              []
              outEnum

setRelativeVerticalSize :: WdRelativeVerticalSize
                        -> ShapeRange a0
                        -> IO ()
setRelativeVerticalSize prop =
  propertySet "RelativeVerticalSize"
              [inEnum prop]

getSoftEdge :: ShapeRange a0
            -> IO (SoftEdgeFormat ())
getSoftEdge =
  propertyGet "SoftEdge"
              []
              outIUnknown

getGlow :: ShapeRange a0
        -> IO (GlowFormat ())
getGlow =
  propertyGet "Glow"
              []
              outIUnknown

getReflection :: ShapeRange a0
              -> IO (ReflectionFormat ())
getReflection =
  propertyGet "Reflection"
              []
              outIUnknown

getTextFrame2 :: ShapeRange a0
              -> IO (Maybe TextFrame2)
getTextFrame2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTextFrame2 methPtr iptr prop) 113 iptr
    doThenFree free (readunique readTextFrame2) prop

foreign import stdcall "dynamic" prim_Word_getTextFrame2 :: Ptr () -> Ptr () -> Ptr (Ptr TextFrame2) -> IO Int32
-- --------------------------------------------------
-- 
-- interface GroupShapes
-- 
-- --------------------------------------------------
data GroupShapes_ a = GroupShapes__ 
type GroupShapes a = IDispatch (GroupShapes_ a)
iidGroupShapes :: IID (GroupShapes ())
iidGroupShapes = mkIID "{000209B6-0000-0000-C000-000000000046}"

getApplication146 :: GroupShapes a0
                  -> IO (Maybe Application)
getApplication146 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator146 :: GroupShapes a0
              -> IO Int32
getCreator146 =
  propertyGet "Creator"
              []
              outInt32

getParent146 :: GroupShapes a0
             -> IO (IDispatch ())
getParent146 =
  propertyGet "Parent"
              []
              outIDispatch

getCount63 :: GroupShapes a0
           -> IO Int32
getCount63 =
  propertyGet "Count"
              []
              outInt32

getNewEnum63 :: GroupShapes a0
             -> IO (IUnknown ())
getNewEnum63 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item63 :: (Variant a1)
       => a1
       -> GroupShapes a0
       -> IO (Shape ())
item63 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

range1 :: (Variant a1)
       => a1
       -> GroupShapes a0
       -> IO (ShapeRange ())
range1 index =
  function1 "Range"
            [inVariant index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Shape
-- 
-- --------------------------------------------------
data Shape_ a = Shape__ 
type Shape a = IDispatch (Shape_ a)
iidShape :: IID (Shape ())
iidShape = mkIID "{000209A0-0000-0000-C000-000000000046}"

getApplication147 :: Shape a0
                  -> IO (Maybe Application)
getApplication147 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator147 :: Shape a0
              -> IO Int32
getCreator147 =
  propertyGet "Creator"
              []
              outInt32

getParent147 :: Shape a0
             -> IO (IDispatch ())
getParent147 =
  propertyGet "Parent"
              []
              outIDispatch

getAdjustments0 :: Shape a0
                -> IO (Adjustments ())
getAdjustments0 =
  propertyGet "Adjustments"
              []
              outIUnknown

getAutoShapeType0 :: Shape a0
                  -> IO MsoAutoShapeType
getAutoShapeType0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoAutoShapeType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAutoShapeType methPtr iptr prop) 11 iptr
    doThenFree free readMsoAutoShapeType prop

setAutoShapeType0 :: MsoAutoShapeType
                  -> Shape a0
                  -> IO ()
setAutoShapeType0 prop iptr =
  do
    prop <- marshallMsoAutoShapeType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAutoShapeType0 methPtr iptr prop) 12 iptr

foreign import stdcall "prim_Word_setAutoShapeType0" prim_Word_setAutoShapeType0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getCallout0 :: Shape a0
            -> IO (CalloutFormat ())
getCallout0 =
  propertyGet "Callout"
              []
              outIUnknown

getConnectionSiteCount0 :: Shape a0
                        -> IO Int32
getConnectionSiteCount0 =
  propertyGet "ConnectionSiteCount"
              []
              outInt32

getConnector0 :: Shape a0
              -> IO MsoTriState
getConnector0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 15 iptr
    doThenFree free readMsoTriState prop

getConnectorFormat0 :: Shape a0
                    -> IO (ConnectorFormat ())
getConnectorFormat0 =
  propertyGet "ConnectorFormat"
              []
              outIUnknown

getFill0 :: Shape a0
         -> IO (FillFormat ())
getFill0 =
  propertyGet "Fill"
              []
              outIUnknown

getGroupItems0 :: Shape a0
               -> IO (GroupShapes ())
getGroupItems0 =
  propertyGet "GroupItems"
              []
              outIDispatch

getHeight10 :: Shape a0
            -> IO Float
getHeight10 =
  propertyGet "Height"
              []
              outFloat

setHeight14 :: Float
            -> Shape a0
            -> IO ()
setHeight14 prop =
  propertySet "Height"
              [inFloat prop]

getHorizontalFlip0 :: Shape a0
                   -> IO MsoTriState
getHorizontalFlip0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 21 iptr
    doThenFree free readMsoTriState prop

getLeft4 :: Shape a0
         -> IO Float
getLeft4 =
  propertyGet "Left"
              []
              outFloat

setLeft4 :: Float
         -> Shape a0
         -> IO ()
setLeft4 prop =
  propertySet "Left"
              [inFloat prop]

getLine0 :: Shape a0
         -> IO (LineFormat ())
getLine0 =
  propertyGet "Line"
              []
              outIUnknown

getLockAspectRatio0 :: Shape a0
                    -> IO MsoTriState
getLockAspectRatio0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 25 iptr
    doThenFree free readMsoTriState prop

setLockAspectRatio0 :: MsoTriState
                    -> Shape a0
                    -> IO ()
setLockAspectRatio0 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setLockAspectRatio0 methPtr iptr prop) 26 iptr

foreign import stdcall "prim_Word_setLockAspectRatio0" prim_Word_setLockAspectRatio0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getName29 :: Shape a0
          -> IO String
getName29 =
  propertyGet "Name"
              []
              outString

setName9 :: String
         -> Shape a0
         -> IO ()
setName9 prop =
  propertySet "Name"
              [inString prop]

getNodes0 :: Shape a0
          -> IO (ShapeNodes ())
getNodes0 =
  propertyGet "Nodes"
              []
              outIUnknown

getRotation0 :: Shape a0
             -> IO Float
getRotation0 =
  propertyGet "Rotation"
              []
              outFloat

setRotation0 :: Float
             -> Shape a0
             -> IO ()
setRotation0 prop =
  propertySet "Rotation"
              [inFloat prop]

getPictureFormat0 :: Shape a0
                  -> IO (PictureFormat ())
getPictureFormat0 =
  propertyGet "PictureFormat"
              []
              outIUnknown

getShadow2 :: Shape a0
           -> IO (ShadowFormat ())
getShadow2 =
  propertyGet "Shadow"
              []
              outIUnknown

getTextEffect0 :: Shape a0
               -> IO (TextEffectFormat ())
getTextEffect0 =
  propertyGet "TextEffect"
              []
              outIUnknown

getTextFrame0 :: Shape a0
              -> IO (TextFrame ())
getTextFrame0 =
  propertyGet "TextFrame"
              []
              outIUnknown

getThreeD0 :: Shape a0
           -> IO (ThreeDFormat ())
getThreeD0 =
  propertyGet "ThreeD"
              []
              outIUnknown

getTop4 :: Shape a0
        -> IO Float
getTop4 =
  propertyGet "Top"
              []
              outFloat

setTop4 :: Float
        -> Shape a0
        -> IO ()
setTop4 prop =
  propertySet "Top"
              [inFloat prop]

getType15 :: Shape a0
          -> IO MsoShapeType
getType15 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoShapeType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType14 methPtr iptr prop) 39 iptr
    doThenFree free readMsoShapeType prop

getVerticalFlip0 :: Shape a0
                 -> IO MsoTriState
getVerticalFlip0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 40 iptr
    doThenFree free readMsoTriState prop

getVertices0 :: (Variant a1)
             => Shape a0
             -> IO a1
getVertices0 =
  propertyGet "Vertices"
              []
              outVariant

getVisible4 :: Shape a0
            -> IO MsoTriState
getVisible4 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 42 iptr
    doThenFree free readMsoTriState prop

setVisible4 :: MsoTriState
            -> Shape a0
            -> IO ()
setVisible4 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible4 methPtr iptr prop) 43 iptr

foreign import stdcall "prim_Word_setVisible4" prim_Word_setVisible4 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWidth13 :: Shape a0
           -> IO Float
getWidth13 =
  propertyGet "Width"
              []
              outFloat

setWidth17 :: Float
           -> Shape a0
           -> IO ()
setWidth17 prop =
  propertySet "Width"
              [inFloat prop]

getZOrderPosition0 :: Shape a0
                   -> IO Int32
getZOrderPosition0 =
  propertyGet "ZOrderPosition"
              []
              outInt32

getHyperlink0 :: Shape a0
              -> IO (Hyperlink ())
getHyperlink0 =
  propertyGet "Hyperlink"
              []
              outIDispatch

getRelativeHorizontalPosition2 :: Shape a0
                               -> IO WdRelativeHorizontalPosition
getRelativeHorizontalPosition2 =
  propertyGet "RelativeHorizontalPosition"
              []
              outEnum

setRelativeHorizontalPosition2 :: WdRelativeHorizontalPosition
                               -> Shape a0
                               -> IO ()
setRelativeHorizontalPosition2 prop =
  propertySet "RelativeHorizontalPosition"
              [inEnum prop]

getRelativeVerticalPosition2 :: Shape a0
                             -> IO WdRelativeVerticalPosition
getRelativeVerticalPosition2 =
  propertyGet "RelativeVerticalPosition"
              []
              outEnum

setRelativeVerticalPosition2 :: WdRelativeVerticalPosition
                             -> Shape a0
                             -> IO ()
setRelativeVerticalPosition2 prop =
  propertySet "RelativeVerticalPosition"
              [inEnum prop]

getLockAnchor1 :: Shape a0
               -> IO Int32
getLockAnchor1 =
  propertyGet "LockAnchor"
              []
              outInt32

setLockAnchor1 :: Int32
               -> Shape a0
               -> IO ()
setLockAnchor1 prop =
  propertySet "LockAnchor"
              [inInt32 prop]

getWrapFormat0 :: Shape a0
               -> IO (WrapFormat ())
getWrapFormat0 =
  propertyGet "WrapFormat"
              []
              outIUnknown

getOLEFormat0 :: Shape a0
              -> IO (OLEFormat ())
getOLEFormat0 =
  propertyGet "OLEFormat"
              []
              outIDispatch

getAnchor0 :: Shape a0
           -> IO (Range ())
getAnchor0 =
  propertyGet "Anchor"
              []
              outIDispatch

getLinkFormat0 :: Shape a0
               -> IO (LinkFormat ())
getLinkFormat0 =
  propertyGet "LinkFormat"
              []
              outIDispatch

apply1 :: Shape a0
       -> IO ()
apply1 =
  method0 "Apply"
          []

delete39 :: Shape a0
         -> IO ()
delete39 =
  method0 "Delete"
          []

duplicate0 :: Shape a0
           -> IO (Shape ())
duplicate0 =
  function1 "Duplicate"
            []
            outIDispatch

flip0 :: MsoFlipCmd
      -> Shape a0
      -> IO ()
flip0 flipCmd iptr =
  do
    flipCmd <- marshallMsoFlipCmd flipCmd
    invokeAndCheck (\ methPtr iptr -> prim_Word_flip0 methPtr iptr flipCmd) 61 iptr

foreign import stdcall "prim_Word_flip0" prim_Word_flip0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementLeft0 :: Float
               -> Shape a0
               -> IO ()
incrementLeft0 increment =
  method0 "IncrementLeft"
          [inFloat increment]

incrementRotation0 :: Float
                   -> Shape a0
                   -> IO ()
incrementRotation0 increment =
  method0 "IncrementRotation"
          [inFloat increment]

incrementTop0 :: Float
              -> Shape a0
              -> IO ()
incrementTop0 increment =
  method0 "IncrementTop"
          [inFloat increment]

pickUp0 :: Shape a0
        -> IO ()
pickUp0 =
  method0 "PickUp"
          []

rerouteConnections0 :: Shape a0
                    -> IO ()
rerouteConnections0 =
  method0 "RerouteConnections"
          []

scaleHeight0 :: Float
             -> MsoTriState
             -> MsoScaleFrom
             -> Shape a0
             -> IO ()
scaleHeight0 factor relativeToOriginalSize scale iptr =
  do
    relativeToOriginalSize <- marshallMsoTriState relativeToOriginalSize
    scale <- marshallMsoScaleFrom scale
    invokeAndCheck (\ methPtr iptr -> prim_Word_scaleHeight0 methPtr iptr factor relativeToOriginalSize scale) 67 iptr

foreign import stdcall "prim_Word_scaleHeight0" prim_Word_scaleHeight0 :: Ptr () -> Ptr () -> Float -> Ptr () -> Ptr () -> IO Int32
scaleWidth0 :: Float
            -> MsoTriState
            -> MsoScaleFrom
            -> Shape a0
            -> IO ()
scaleWidth0 factor relativeToOriginalSize scale iptr =
  do
    relativeToOriginalSize <- marshallMsoTriState relativeToOriginalSize
    scale <- marshallMsoScaleFrom scale
    invokeAndCheck (\ methPtr iptr -> prim_Word_scaleWidth0 methPtr iptr factor relativeToOriginalSize scale) 68 iptr

foreign import stdcall "prim_Word_scaleWidth0" prim_Word_scaleWidth0 :: Ptr () -> Ptr () -> Float -> Ptr () -> Ptr () -> IO Int32
select17 :: (Variant a1)
         => a1
         -> Shape a0
         -> IO ()
select17 replace =
  method0 "Select"
          [inVariant replace]

setShapesDefaultProperties0 :: Shape a0
                            -> IO ()
setShapesDefaultProperties0 =
  method0 "SetShapesDefaultProperties"
          []

ungroup0 :: Shape a0
         -> IO (ShapeRange ())
ungroup0 =
  function1 "Ungroup"
            []
            outIDispatch

zOrder0 :: MsoZOrderCmd
        -> Shape a0
        -> IO ()
zOrder0 zOrderCmd iptr =
  do
    zOrderCmd <- marshallMsoZOrderCmd zOrderCmd
    invokeAndCheck (\ methPtr iptr -> prim_Word_zOrder0 methPtr iptr zOrderCmd) 72 iptr

foreign import stdcall "prim_Word_zOrder0" prim_Word_zOrder0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
convertToInlineShape0 :: Shape a0
                      -> IO (InlineShape ())
convertToInlineShape0 =
  function1 "ConvertToInlineShape"
            []
            outIUnknown

convertToFrame0 :: Shape a0
                -> IO (Frame ())
convertToFrame0 =
  function1 "ConvertToFrame"
            []
            outIDispatch

activate7 :: Shape a0
          -> IO ()
activate7 =
  method0 "Activate"
          []

getAlternativeText0 :: Shape a0
                    -> IO String
getAlternativeText0 =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText0 :: String
                    -> Shape a0
                    -> IO ()
setAlternativeText0 prop =
  propertySet "AlternativeText"
              [inString prop]

getScript :: Shape a0
          -> IO (Maybe Script)
getScript iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getScript methPtr iptr prop) 78 iptr
    doThenFree free (readunique readScript) prop

foreign import stdcall "dynamic" prim_Word_getScript :: Ptr () -> Ptr () -> Ptr (Ptr Script) -> IO Int32
getHasDiagram0 :: Shape a0
               -> IO MsoTriState
getHasDiagram0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 79 iptr
    doThenFree free readMsoTriState prop

getDiagram0 :: Shape a0
            -> IO (Maybe IMsoDiagram)
getDiagram0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDiagram methPtr iptr prop) 80 iptr
    doThenFree free (readunique readIMsoDiagram) prop

getHasDiagramNode0 :: Shape a0
                   -> IO MsoTriState
getHasDiagramNode0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 81 iptr
    doThenFree free readMsoTriState prop

getDiagramNode0 :: Shape a0
                -> IO (DiagramNode ())
getDiagramNode0 =
  propertyGet "DiagramNode"
              []
              outIUnknown

getChild0 :: Shape a0
          -> IO MsoTriState
getChild0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 83 iptr
    doThenFree free readMsoTriState prop

getParentGroup0 :: Shape a0
                -> IO (Shape ())
getParentGroup0 =
  propertyGet "ParentGroup"
              []
              outIDispatch

getCanvasItems0 :: Shape a0
                -> IO (CanvasShapes ())
getCanvasItems0 =
  propertyGet "CanvasItems"
              []
              outIUnknown

getID7 :: Shape a0
       -> IO Int32
getID7 =
  propertyGet "ID"
              []
              outInt32

canvasCropLeft0 :: Float
                -> Shape a0
                -> IO ()
canvasCropLeft0 increment =
  method0 "CanvasCropLeft"
          [inFloat increment]

canvasCropTop0 :: Float
               -> Shape a0
               -> IO ()
canvasCropTop0 increment =
  method0 "CanvasCropTop"
          [inFloat increment]

canvasCropRight0 :: Float
                 -> Shape a0
                 -> IO ()
canvasCropRight0 increment =
  method0 "CanvasCropRight"
          [inFloat increment]

canvasCropBottom0 :: Float
                  -> Shape a0
                  -> IO ()
canvasCropBottom0 increment =
  method0 "CanvasCropBottom"
          [inFloat increment]

setRTF0 :: String
        -> Shape a0
        -> IO ()
setRTF0 rhs =
  propertySet "RTF"
              [inString rhs]

getLayoutInCell0 :: Shape a0
                 -> IO Int32
getLayoutInCell0 =
  propertyGet "LayoutInCell"
              []
              outInt32

setLayoutInCell0 :: Int32
                 -> Shape a0
                 -> IO ()
setLayoutInCell0 prop =
  propertySet "LayoutInCell"
              [inInt32 prop]

getHasChart :: Shape a0
            -> IO MsoTriState
getHasChart iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 94 iptr
    doThenFree free readMsoTriState prop

getChart :: Shape a0
         -> IO (Chart ())
getChart =
  propertyGet "Chart"
              []
              outIUnknown

getLeftRelative0 :: Shape a0
                 -> IO Float
getLeftRelative0 =
  propertyGet "LeftRelative"
              []
              outFloat

setLeftRelative0 :: Float
                 -> Shape a0
                 -> IO ()
setLeftRelative0 prop =
  propertySet "LeftRelative"
              [inFloat prop]

getTopRelative0 :: Shape a0
                -> IO Float
getTopRelative0 =
  propertyGet "TopRelative"
              []
              outFloat

setTopRelative0 :: Float
                -> Shape a0
                -> IO ()
setTopRelative0 prop =
  propertySet "TopRelative"
              [inFloat prop]

getWidthRelative0 :: Shape a0
                  -> IO Float
getWidthRelative0 =
  propertyGet "WidthRelative"
              []
              outFloat

setWidthRelative0 :: Float
                  -> Shape a0
                  -> IO ()
setWidthRelative0 prop =
  propertySet "WidthRelative"
              [inFloat prop]

getHeightRelative0 :: Shape a0
                   -> IO Float
getHeightRelative0 =
  propertyGet "HeightRelative"
              []
              outFloat

setHeightRelative0 :: Float
                   -> Shape a0
                   -> IO ()
setHeightRelative0 prop =
  propertySet "HeightRelative"
              [inFloat prop]

getRelativeHorizontalSize0 :: Shape a0
                           -> IO WdRelativeHorizontalSize
getRelativeHorizontalSize0 =
  propertyGet "RelativeHorizontalSize"
              []
              outEnum

setRelativeHorizontalSize0 :: WdRelativeHorizontalSize
                           -> Shape a0
                           -> IO ()
setRelativeHorizontalSize0 prop =
  propertySet "RelativeHorizontalSize"
              [inEnum prop]

getRelativeVerticalSize0 :: Shape a0
                         -> IO WdRelativeVerticalSize
getRelativeVerticalSize0 =
  propertyGet "RelativeVerticalSize"
              []
              outEnum

setRelativeVerticalSize0 :: WdRelativeVerticalSize
                         -> Shape a0
                         -> IO ()
setRelativeVerticalSize0 prop =
  propertySet "RelativeVerticalSize"
              [inEnum prop]

getSoftEdge0 :: Shape a0
             -> IO (SoftEdgeFormat ())
getSoftEdge0 =
  propertyGet "SoftEdge"
              []
              outIUnknown

getGlow0 :: Shape a0
         -> IO (GlowFormat ())
getGlow0 =
  propertyGet "Glow"
              []
              outIUnknown

getReflection0 :: Shape a0
               -> IO (ReflectionFormat ())
getReflection0 =
  propertyGet "Reflection"
              []
              outIUnknown

getTextFrame20 :: Shape a0
               -> IO (Maybe TextFrame2)
getTextFrame20 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTextFrame2 methPtr iptr prop) 111 iptr
    doThenFree free (readunique readTextFrame2) prop

-- --------------------------------------------------
-- 
-- interface TextFrame
-- 
-- --------------------------------------------------
data TextFrame_ a = TextFrame__ 
type TextFrame a = IDispatch (TextFrame_ a)
iidTextFrame :: IID (TextFrame ())
iidTextFrame = mkIID "{000209B2-0000-0000-C000-000000000046}"

getApplication148 :: TextFrame a0
                  -> IO (Maybe Application)
getApplication148 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator148 :: TextFrame a0
              -> IO Int32
getCreator148 =
  propertyGet "Creator"
              []
              outInt32

getParent148 :: TextFrame a0
             -> IO (Shape ())
getParent148 =
  propertyGet "Parent"
              []
              outIDispatch

getMarginBottom :: TextFrame a0
                -> IO Float
getMarginBottom =
  propertyGet "MarginBottom"
              []
              outFloat

setMarginBottom :: Float
                -> TextFrame a0
                -> IO ()
setMarginBottom prop =
  propertySet "MarginBottom"
              [inFloat prop]

getMarginLeft :: TextFrame a0
              -> IO Float
getMarginLeft =
  propertyGet "MarginLeft"
              []
              outFloat

setMarginLeft :: Float
              -> TextFrame a0
              -> IO ()
setMarginLeft prop =
  propertySet "MarginLeft"
              [inFloat prop]

getMarginRight :: TextFrame a0
               -> IO Float
getMarginRight =
  propertyGet "MarginRight"
              []
              outFloat

setMarginRight :: Float
               -> TextFrame a0
               -> IO ()
setMarginRight prop =
  propertySet "MarginRight"
              [inFloat prop]

getMarginTop :: TextFrame a0
             -> IO Float
getMarginTop =
  propertyGet "MarginTop"
              []
              outFloat

setMarginTop :: Float
             -> TextFrame a0
             -> IO ()
setMarginTop prop =
  propertySet "MarginTop"
              [inFloat prop]

getOrientation2 :: TextFrame a0
                -> IO MsoTextOrientation
getOrientation2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTextOrientation)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOrientation2 methPtr iptr prop) 18 iptr
    doThenFree free readMsoTextOrientation prop

foreign import stdcall "dynamic" prim_Word_getOrientation2 :: Ptr () -> Ptr () -> Ptr MsoTextOrientation -> IO Int32
setOrientation2 :: MsoTextOrientation
                -> TextFrame a0
                -> IO ()
setOrientation2 prop iptr =
  do
    prop <- marshallMsoTextOrientation prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setOrientation2 methPtr iptr prop) 19 iptr

foreign import stdcall "prim_Word_setOrientation2" prim_Word_setOrientation2 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTextRange :: TextFrame a0
             -> IO (Range ())
getTextRange =
  propertyGet "TextRange"
              []
              outIDispatch

getContainingRange :: TextFrame a0
                   -> IO (Range ())
getContainingRange =
  propertyGet "ContainingRange"
              []
              outIDispatch

getNext8 :: TextFrame a0
         -> IO (TextFrame ())
getNext8 =
  propertyGet "Next"
              []
              outIDispatch

setNext :: TextFrame a1
        -> TextFrame a0
        -> IO ()
setNext prop =
  propertySet "Next"
              [inIDispatch prop]

getPrevious8 :: TextFrame a0
             -> IO (TextFrame ())
getPrevious8 =
  propertyGet "Previous"
              []
              outIDispatch

setPrevious :: TextFrame a1
            -> TextFrame a0
            -> IO ()
setPrevious prop =
  propertySet "Previous"
              [inIDispatch prop]

getOverflowing :: TextFrame a0
               -> IO Bool
getOverflowing =
  propertyGet "Overflowing"
              []
              outBool

getHasText :: TextFrame a0
           -> IO Int32
getHasText =
  propertyGet "HasText"
              []
              outInt32

breakForwardLink :: TextFrame a0
                 -> IO ()
breakForwardLink =
  method0 "BreakForwardLink"
          []

validLinkTarget :: TextFrame a1
                -> TextFrame a0
                -> IO Bool
validLinkTarget targetTextFrame =
  function1 "ValidLinkTarget"
            [inIDispatch targetTextFrame]
            outBool

getAutoSize0 :: TextFrame a0
             -> IO Int32
getAutoSize0 =
  propertyGet "AutoSize"
              []
              outInt32

setAutoSize0 :: Int32
             -> TextFrame a0
             -> IO ()
setAutoSize0 prop =
  propertySet "AutoSize"
              [inInt32 prop]

getWordWrap3 :: TextFrame a0
             -> IO Int32
getWordWrap3 =
  propertyGet "WordWrap"
              []
              outInt32

setWordWrap3 :: Int32
             -> TextFrame a0
             -> IO ()
setWordWrap3 prop =
  propertySet "WordWrap"
              [inInt32 prop]

getVerticalAnchor :: TextFrame a0
                  -> IO MsoVerticalAnchor
getVerticalAnchor iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoVerticalAnchor)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getVerticalAnchor methPtr iptr prop) 34 iptr
    doThenFree free readMsoVerticalAnchor prop

foreign import stdcall "dynamic" prim_Word_getVerticalAnchor :: Ptr () -> Ptr () -> Ptr MsoVerticalAnchor -> IO Int32
setVerticalAnchor :: MsoVerticalAnchor
                  -> TextFrame a0
                  -> IO ()
setVerticalAnchor prop iptr =
  do
    prop <- marshallMsoVerticalAnchor prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVerticalAnchor methPtr iptr prop) 35 iptr

foreign import stdcall "prim_Word_setVerticalAnchor" prim_Word_setVerticalAnchor :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface _LetterContent
-- 
-- --------------------------------------------------
data LetterContent_ a = LetterContent__ 
type LetterContent a = IDispatch (LetterContent_ a)
iidLetterContent :: IID (LetterContent ())
iidLetterContent = mkIID "{000209A1-0000-0000-C000-000000000046}"

getApplication149 :: LetterContent a0
                  -> IO (Maybe Application)
getApplication149 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator149 :: LetterContent a0
              -> IO Int32
getCreator149 =
  propertyGet "Creator"
              []
              outInt32

getParent149 :: LetterContent a0
             -> IO (IDispatch ())
getParent149 =
  propertyGet "Parent"
              []
              outIDispatch

getDuplicate3 :: LetterContent a0
              -> IO (Maybe LetterContent)
getDuplicate3 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getLetterContent methPtr iptr prop) 10 iptr
    doThenFree free (readunique readLetterContent) prop

getDateFormat :: LetterContent a0
              -> IO String
getDateFormat =
  propertyGet "DateFormat"
              []
              outString

setDateFormat :: String
              -> LetterContent a0
              -> IO ()
setDateFormat prop =
  propertySet "DateFormat"
              [inString prop]

getIncludeHeaderFooter :: LetterContent a0
                       -> IO Bool
getIncludeHeaderFooter =
  propertyGet "IncludeHeaderFooter"
              []
              outBool

setIncludeHeaderFooter :: Bool
                       -> LetterContent a0
                       -> IO ()
setIncludeHeaderFooter prop =
  propertySet "IncludeHeaderFooter"
              [inBool prop]

getPageDesign :: LetterContent a0
              -> IO String
getPageDesign =
  propertyGet "PageDesign"
              []
              outString

setPageDesign :: String
              -> LetterContent a0
              -> IO ()
setPageDesign prop =
  propertySet "PageDesign"
              [inString prop]

getLetterStyle :: LetterContent a0
               -> IO WdLetterStyle
getLetterStyle =
  propertyGet "LetterStyle"
              []
              outEnum

setLetterStyle :: WdLetterStyle
               -> LetterContent a0
               -> IO ()
setLetterStyle prop =
  propertySet "LetterStyle"
              [inEnum prop]

getLetterhead :: LetterContent a0
              -> IO Bool
getLetterhead =
  propertyGet "Letterhead"
              []
              outBool

setLetterhead :: Bool
              -> LetterContent a0
              -> IO ()
setLetterhead prop =
  propertySet "Letterhead"
              [inBool prop]

getLetterheadLocation :: LetterContent a0
                      -> IO WdLetterheadLocation
getLetterheadLocation =
  propertyGet "LetterheadLocation"
              []
              outEnum

setLetterheadLocation :: WdLetterheadLocation
                      -> LetterContent a0
                      -> IO ()
setLetterheadLocation prop =
  propertySet "LetterheadLocation"
              [inEnum prop]

getLetterheadSize :: LetterContent a0
                  -> IO Float
getLetterheadSize =
  propertyGet "LetterheadSize"
              []
              outFloat

setLetterheadSize :: Float
                  -> LetterContent a0
                  -> IO ()
setLetterheadSize prop =
  propertySet "LetterheadSize"
              [inFloat prop]

getRecipientName :: LetterContent a0
                 -> IO String
getRecipientName =
  propertyGet "RecipientName"
              []
              outString

setRecipientName :: String
                 -> LetterContent a0
                 -> IO ()
setRecipientName prop =
  propertySet "RecipientName"
              [inString prop]

getRecipientAddress :: LetterContent a0
                    -> IO String
getRecipientAddress =
  propertyGet "RecipientAddress"
              []
              outString

setRecipientAddress :: String
                    -> LetterContent a0
                    -> IO ()
setRecipientAddress prop =
  propertySet "RecipientAddress"
              [inString prop]

getSalutation :: LetterContent a0
              -> IO String
getSalutation =
  propertyGet "Salutation"
              []
              outString

setSalutation :: String
              -> LetterContent a0
              -> IO ()
setSalutation prop =
  propertySet "Salutation"
              [inString prop]

getSalutationType :: LetterContent a0
                  -> IO WdSalutationType
getSalutationType =
  propertyGet "SalutationType"
              []
              outEnum

setSalutationType :: WdSalutationType
                  -> LetterContent a0
                  -> IO ()
setSalutationType prop =
  propertySet "SalutationType"
              [inEnum prop]

getRecipientReference :: LetterContent a0
                      -> IO String
getRecipientReference =
  propertyGet "RecipientReference"
              []
              outString

setRecipientReference :: String
                      -> LetterContent a0
                      -> IO ()
setRecipientReference prop =
  propertySet "RecipientReference"
              [inString prop]

getMailingInstructions :: LetterContent a0
                       -> IO String
getMailingInstructions =
  propertyGet "MailingInstructions"
              []
              outString

setMailingInstructions :: String
                       -> LetterContent a0
                       -> IO ()
setMailingInstructions prop =
  propertySet "MailingInstructions"
              [inString prop]

getAttentionLine :: LetterContent a0
                 -> IO String
getAttentionLine =
  propertyGet "AttentionLine"
              []
              outString

setAttentionLine :: String
                 -> LetterContent a0
                 -> IO ()
setAttentionLine prop =
  propertySet "AttentionLine"
              [inString prop]

getSubject0 :: LetterContent a0
            -> IO String
getSubject0 =
  propertyGet "Subject"
              []
              outString

setSubject0 :: String
            -> LetterContent a0
            -> IO ()
setSubject0 prop =
  propertySet "Subject"
              [inString prop]

getEnclosureNumber :: LetterContent a0
                   -> IO Int32
getEnclosureNumber =
  propertyGet "EnclosureNumber"
              []
              outInt32

setEnclosureNumber :: Int32
                   -> LetterContent a0
                   -> IO ()
setEnclosureNumber prop =
  propertySet "EnclosureNumber"
              [inInt32 prop]

getCCList :: LetterContent a0
          -> IO String
getCCList =
  propertyGet "CCList"
              []
              outString

setCCList :: String
          -> LetterContent a0
          -> IO ()
setCCList prop =
  propertySet "CCList"
              [inString prop]

getReturnAddress0 :: LetterContent a0
                  -> IO String
getReturnAddress0 =
  propertyGet "ReturnAddress"
              []
              outString

setReturnAddress :: String
                 -> LetterContent a0
                 -> IO ()
setReturnAddress prop =
  propertySet "ReturnAddress"
              [inString prop]

getSenderName :: LetterContent a0
              -> IO String
getSenderName =
  propertyGet "SenderName"
              []
              outString

setSenderName :: String
              -> LetterContent a0
              -> IO ()
setSenderName prop =
  propertySet "SenderName"
              [inString prop]

getClosing :: LetterContent a0
           -> IO String
getClosing =
  propertyGet "Closing"
              []
              outString

setClosing :: String
           -> LetterContent a0
           -> IO ()
setClosing prop =
  propertySet "Closing"
              [inString prop]

getSenderCompany :: LetterContent a0
                 -> IO String
getSenderCompany =
  propertyGet "SenderCompany"
              []
              outString

setSenderCompany :: String
                 -> LetterContent a0
                 -> IO ()
setSenderCompany prop =
  propertySet "SenderCompany"
              [inString prop]

getSenderJobTitle :: LetterContent a0
                  -> IO String
getSenderJobTitle =
  propertyGet "SenderJobTitle"
              []
              outString

setSenderJobTitle :: String
                  -> LetterContent a0
                  -> IO ()
setSenderJobTitle prop =
  propertySet "SenderJobTitle"
              [inString prop]

getSenderInitials :: LetterContent a0
                  -> IO String
getSenderInitials =
  propertyGet "SenderInitials"
              []
              outString

setSenderInitials :: String
                  -> LetterContent a0
                  -> IO ()
setSenderInitials prop =
  propertySet "SenderInitials"
              [inString prop]

getInfoBlock :: LetterContent a0
             -> IO Bool
getInfoBlock =
  propertyGet "InfoBlock"
              []
              outBool

setInfoBlock :: Bool
             -> LetterContent a0
             -> IO ()
setInfoBlock prop =
  propertySet "InfoBlock"
              [inBool prop]

getRecipientCode :: LetterContent a0
                 -> IO String
getRecipientCode =
  propertyGet "RecipientCode"
              []
              outString

setRecipientCode :: String
                 -> LetterContent a0
                 -> IO ()
setRecipientCode prop =
  propertySet "RecipientCode"
              [inString prop]

getRecipientGender :: LetterContent a0
                   -> IO WdSalutationGender
getRecipientGender =
  propertyGet "RecipientGender"
              []
              outEnum

setRecipientGender :: WdSalutationGender
                   -> LetterContent a0
                   -> IO ()
setRecipientGender prop =
  propertySet "RecipientGender"
              [inEnum prop]

getReturnAddressShortForm :: LetterContent a0
                          -> IO String
getReturnAddressShortForm =
  propertyGet "ReturnAddressShortForm"
              []
              outString

setReturnAddressShortForm :: String
                          -> LetterContent a0
                          -> IO ()
setReturnAddressShortForm prop =
  propertySet "ReturnAddressShortForm"
              [inString prop]

getSenderCity :: LetterContent a0
              -> IO String
getSenderCity =
  propertyGet "SenderCity"
              []
              outString

setSenderCity :: String
              -> LetterContent a0
              -> IO ()
setSenderCity prop =
  propertySet "SenderCity"
              [inString prop]

getSenderCode :: LetterContent a0
              -> IO String
getSenderCode =
  propertyGet "SenderCode"
              []
              outString

setSenderCode :: String
              -> LetterContent a0
              -> IO ()
setSenderCode prop =
  propertySet "SenderCode"
              [inString prop]

getSenderGender :: LetterContent a0
                -> IO WdSalutationGender
getSenderGender =
  propertyGet "SenderGender"
              []
              outEnum

setSenderGender :: WdSalutationGender
                -> LetterContent a0
                -> IO ()
setSenderGender prop =
  propertySet "SenderGender"
              [inEnum prop]

getSenderReference :: LetterContent a0
                   -> IO String
getSenderReference =
  propertyGet "SenderReference"
              []
              outString

setSenderReference :: String
                   -> LetterContent a0
                   -> IO ()
setSenderReference prop =
  propertySet "SenderReference"
              [inString prop]

-- --------------------------------------------------
-- 
-- interface View
-- 
-- --------------------------------------------------
data View_ a = View__ 
type View a = IDispatch (View_ a)
iidView :: IID (View ())
iidView = mkIID "{000209A5-0000-0000-C000-000000000046}"

getApplication150 :: View a0
                  -> IO (Maybe Application)
getApplication150 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator150 :: View a0
              -> IO Int32
getCreator150 =
  propertyGet "Creator"
              []
              outInt32

getParent150 :: View a0
             -> IO (IDispatch ())
getParent150 =
  propertyGet "Parent"
              []
              outIDispatch

getType16 :: View a0
          -> IO WdViewType
getType16 =
  propertyGet "Type"
              []
              outEnum

setType0 :: WdViewType
         -> View a0
         -> IO ()
setType0 prop =
  propertySet "Type"
              [inEnum prop]

getFullScreen :: View a0
              -> IO Bool
getFullScreen =
  propertyGet "FullScreen"
              []
              outBool

setFullScreen :: Bool
              -> View a0
              -> IO ()
setFullScreen prop =
  propertySet "FullScreen"
              [inBool prop]

getDraft :: View a0
         -> IO Bool
getDraft =
  propertyGet "Draft"
              []
              outBool

setDraft :: Bool
         -> View a0
         -> IO ()
setDraft prop =
  propertySet "Draft"
              [inBool prop]

getShowAll0 :: View a0
            -> IO Bool
getShowAll0 =
  propertyGet "ShowAll"
              []
              outBool

setShowAll0 :: Bool
            -> View a0
            -> IO ()
setShowAll0 prop =
  propertySet "ShowAll"
              [inBool prop]

getShowFieldCodes :: View a0
                  -> IO Bool
getShowFieldCodes =
  propertyGet "ShowFieldCodes"
              []
              outBool

setShowFieldCodes :: Bool
                  -> View a0
                  -> IO ()
setShowFieldCodes prop =
  propertySet "ShowFieldCodes"
              [inBool prop]

getMailMergeDataView :: View a0
                     -> IO Bool
getMailMergeDataView =
  propertyGet "MailMergeDataView"
              []
              outBool

setMailMergeDataView :: Bool
                     -> View a0
                     -> IO ()
setMailMergeDataView prop =
  propertySet "MailMergeDataView"
              [inBool prop]

getMagnifier :: View a0
             -> IO Bool
getMagnifier =
  propertyGet "Magnifier"
              []
              outBool

setMagnifier :: Bool
             -> View a0
             -> IO ()
setMagnifier prop =
  propertySet "Magnifier"
              [inBool prop]

getShowFirstLineOnly :: View a0
                     -> IO Bool
getShowFirstLineOnly =
  propertyGet "ShowFirstLineOnly"
              []
              outBool

setShowFirstLineOnly :: Bool
                     -> View a0
                     -> IO ()
setShowFirstLineOnly prop =
  propertySet "ShowFirstLineOnly"
              [inBool prop]

getShowFormat :: View a0
              -> IO Bool
getShowFormat =
  propertyGet "ShowFormat"
              []
              outBool

setShowFormat :: Bool
              -> View a0
              -> IO ()
setShowFormat prop =
  propertySet "ShowFormat"
              [inBool prop]

getZoom :: View a0
        -> IO (Zoom ())
getZoom =
  propertyGet "Zoom"
              []
              outIUnknown

getShowObjectAnchors :: View a0
                     -> IO Bool
getShowObjectAnchors =
  propertyGet "ShowObjectAnchors"
              []
              outBool

setShowObjectAnchors :: Bool
                     -> View a0
                     -> IO ()
setShowObjectAnchors prop =
  propertySet "ShowObjectAnchors"
              [inBool prop]

getShowTextBoundaries :: View a0
                      -> IO Bool
getShowTextBoundaries =
  propertyGet "ShowTextBoundaries"
              []
              outBool

setShowTextBoundaries :: Bool
                      -> View a0
                      -> IO ()
setShowTextBoundaries prop =
  propertySet "ShowTextBoundaries"
              [inBool prop]

getShowHighlight :: View a0
                 -> IO Bool
getShowHighlight =
  propertyGet "ShowHighlight"
              []
              outBool

setShowHighlight :: Bool
                 -> View a0
                 -> IO ()
setShowHighlight prop =
  propertySet "ShowHighlight"
              [inBool prop]

getShowDrawings :: View a0
                -> IO Bool
getShowDrawings =
  propertyGet "ShowDrawings"
              []
              outBool

setShowDrawings :: Bool
                -> View a0
                -> IO ()
setShowDrawings prop =
  propertySet "ShowDrawings"
              [inBool prop]

getShowTabs :: View a0
            -> IO Bool
getShowTabs =
  propertyGet "ShowTabs"
              []
              outBool

setShowTabs :: Bool
            -> View a0
            -> IO ()
setShowTabs prop =
  propertySet "ShowTabs"
              [inBool prop]

getShowSpaces :: View a0
              -> IO Bool
getShowSpaces =
  propertyGet "ShowSpaces"
              []
              outBool

setShowSpaces :: Bool
              -> View a0
              -> IO ()
setShowSpaces prop =
  propertySet "ShowSpaces"
              [inBool prop]

getShowParagraphs :: View a0
                  -> IO Bool
getShowParagraphs =
  propertyGet "ShowParagraphs"
              []
              outBool

setShowParagraphs :: Bool
                  -> View a0
                  -> IO ()
setShowParagraphs prop =
  propertySet "ShowParagraphs"
              [inBool prop]

getShowHyphens :: View a0
               -> IO Bool
getShowHyphens =
  propertyGet "ShowHyphens"
              []
              outBool

setShowHyphens :: Bool
               -> View a0
               -> IO ()
setShowHyphens prop =
  propertySet "ShowHyphens"
              [inBool prop]

getShowHiddenText :: View a0
                  -> IO Bool
getShowHiddenText =
  propertyGet "ShowHiddenText"
              []
              outBool

setShowHiddenText :: Bool
                  -> View a0
                  -> IO ()
setShowHiddenText prop =
  propertySet "ShowHiddenText"
              [inBool prop]

getWrapToWindow :: View a0
                -> IO Bool
getWrapToWindow =
  propertyGet "WrapToWindow"
              []
              outBool

setWrapToWindow :: Bool
                -> View a0
                -> IO ()
setWrapToWindow prop =
  propertySet "WrapToWindow"
              [inBool prop]

getShowPicturePlaceHolders :: View a0
                           -> IO Bool
getShowPicturePlaceHolders =
  propertyGet "ShowPicturePlaceHolders"
              []
              outBool

setShowPicturePlaceHolders :: Bool
                           -> View a0
                           -> IO ()
setShowPicturePlaceHolders prop =
  propertySet "ShowPicturePlaceHolders"
              [inBool prop]

getShowBookmarks :: View a0
                 -> IO Bool
getShowBookmarks =
  propertyGet "ShowBookmarks"
              []
              outBool

setShowBookmarks :: Bool
                 -> View a0
                 -> IO ()
setShowBookmarks prop =
  propertySet "ShowBookmarks"
              [inBool prop]

getFieldShading :: View a0
                -> IO WdFieldShading
getFieldShading =
  propertyGet "FieldShading"
              []
              outEnum

setFieldShading :: WdFieldShading
                -> View a0
                -> IO ()
setFieldShading prop =
  propertySet "FieldShading"
              [inEnum prop]

getShowAnimation :: View a0
                 -> IO Bool
getShowAnimation =
  propertyGet "ShowAnimation"
              []
              outBool

setShowAnimation :: Bool
                 -> View a0
                 -> IO ()
setShowAnimation prop =
  propertySet "ShowAnimation"
              [inBool prop]

getTableGridlines :: View a0
                  -> IO Bool
getTableGridlines =
  propertyGet "TableGridlines"
              []
              outBool

setTableGridlines :: Bool
                  -> View a0
                  -> IO ()
setTableGridlines prop =
  propertySet "TableGridlines"
              [inBool prop]

getEnlargeFontsLessThan :: View a0
                        -> IO Int32
getEnlargeFontsLessThan =
  propertyGet "EnlargeFontsLessThan"
              []
              outInt32

setEnlargeFontsLessThan :: Int32
                        -> View a0
                        -> IO ()
setEnlargeFontsLessThan prop =
  propertySet "EnlargeFontsLessThan"
              [inInt32 prop]

getShowMainTextLayer :: View a0
                     -> IO Bool
getShowMainTextLayer =
  propertyGet "ShowMainTextLayer"
              []
              outBool

setShowMainTextLayer :: Bool
                     -> View a0
                     -> IO ()
setShowMainTextLayer prop =
  propertySet "ShowMainTextLayer"
              [inBool prop]

getSeekView :: View a0
            -> IO WdSeekView
getSeekView =
  propertyGet "SeekView"
              []
              outEnum

setSeekView :: WdSeekView
            -> View a0
            -> IO ()
setSeekView prop =
  propertySet "SeekView"
              [inEnum prop]

getSplitSpecial :: View a0
                -> IO WdSpecialPane
getSplitSpecial =
  propertyGet "SplitSpecial"
              []
              outEnum

setSplitSpecial :: WdSpecialPane
                -> View a0
                -> IO ()
setSplitSpecial prop =
  propertySet "SplitSpecial"
              [inEnum prop]

getBrowseToWindow0 :: View a0
                   -> IO Int32
getBrowseToWindow0 =
  propertyGet "BrowseToWindow"
              []
              outInt32

setBrowseToWindow0 :: Int32
                   -> View a0
                   -> IO ()
setBrowseToWindow0 prop =
  propertySet "BrowseToWindow"
              [inInt32 prop]

getShowOptionalBreaks :: View a0
                      -> IO Bool
getShowOptionalBreaks =
  propertyGet "ShowOptionalBreaks"
              []
              outBool

setShowOptionalBreaks :: Bool
                      -> View a0
                      -> IO ()
setShowOptionalBreaks prop =
  propertySet "ShowOptionalBreaks"
              [inBool prop]

collapseOutline :: (Variant a1)
                => a1
                -> View a0
                -> IO ()
collapseOutline range2 =
  method0 "CollapseOutline"
          [inVariant range2]

expandOutline :: (Variant a1)
              => a1
              -> View a0
              -> IO ()
expandOutline range2 =
  method0 "ExpandOutline"
          [inVariant range2]

showAllHeadings :: View a0
                -> IO ()
showAllHeadings =
  method0 "ShowAllHeadings"
          []

showHeading :: Int32
            -> View a0
            -> IO ()
showHeading level =
  method0 "ShowHeading"
          [inInt32 level]

previousHeaderFooter :: View a0
                     -> IO ()
previousHeaderFooter =
  method0 "PreviousHeaderFooter"
          []

nextHeaderFooter :: View a0
                 -> IO ()
nextHeaderFooter =
  method0 "NextHeaderFooter"
          []

getDisplayPageBoundaries :: View a0
                         -> IO Bool
getDisplayPageBoundaries =
  propertyGet "DisplayPageBoundaries"
              []
              outBool

setDisplayPageBoundaries :: Bool
                         -> View a0
                         -> IO ()
setDisplayPageBoundaries prop =
  propertySet "DisplayPageBoundaries"
              [inBool prop]

getDisplaySmartTags :: View a0
                    -> IO Bool
getDisplaySmartTags =
  propertyGet "DisplaySmartTags"
              []
              outBool

setDisplaySmartTags :: Bool
                    -> View a0
                    -> IO ()
setDisplaySmartTags prop =
  propertySet "DisplaySmartTags"
              [inBool prop]

getShowRevisionsAndComments :: View a0
                            -> IO Bool
getShowRevisionsAndComments =
  propertyGet "ShowRevisionsAndComments"
              []
              outBool

setShowRevisionsAndComments :: Bool
                            -> View a0
                            -> IO ()
setShowRevisionsAndComments prop =
  propertySet "ShowRevisionsAndComments"
              [inBool prop]

getShowComments :: View a0
                -> IO Bool
getShowComments =
  propertyGet "ShowComments"
              []
              outBool

setShowComments :: Bool
                -> View a0
                -> IO ()
setShowComments prop =
  propertySet "ShowComments"
              [inBool prop]

getShowInsertionsAndDeletions :: View a0
                              -> IO Bool
getShowInsertionsAndDeletions =
  propertyGet "ShowInsertionsAndDeletions"
              []
              outBool

setShowInsertionsAndDeletions :: Bool
                              -> View a0
                              -> IO ()
setShowInsertionsAndDeletions prop =
  propertySet "ShowInsertionsAndDeletions"
              [inBool prop]

getShowFormatChanges :: View a0
                     -> IO Bool
getShowFormatChanges =
  propertyGet "ShowFormatChanges"
              []
              outBool

setShowFormatChanges :: Bool
                     -> View a0
                     -> IO ()
setShowFormatChanges prop =
  propertySet "ShowFormatChanges"
              [inBool prop]

getRevisionsView :: View a0
                 -> IO WdRevisionsView
getRevisionsView =
  propertyGet "RevisionsView"
              []
              outEnum

setRevisionsView :: WdRevisionsView
                 -> View a0
                 -> IO ()
setRevisionsView prop =
  propertySet "RevisionsView"
              [inEnum prop]

getRevisionsMode :: View a0
                 -> IO WdRevisionsMode
getRevisionsMode =
  propertyGet "RevisionsMode"
              []
              outEnum

setRevisionsMode :: WdRevisionsMode
                 -> View a0
                 -> IO ()
setRevisionsMode prop =
  propertySet "RevisionsMode"
              [inEnum prop]

getRevisionsBalloonWidth :: View a0
                         -> IO Float
getRevisionsBalloonWidth =
  propertyGet "RevisionsBalloonWidth"
              []
              outFloat

setRevisionsBalloonWidth :: Float
                         -> View a0
                         -> IO ()
setRevisionsBalloonWidth prop =
  propertySet "RevisionsBalloonWidth"
              [inFloat prop]

getRevisionsBalloonWidthType :: View a0
                             -> IO WdRevisionsBalloonWidthType
getRevisionsBalloonWidthType =
  propertyGet "RevisionsBalloonWidthType"
              []
              outEnum

setRevisionsBalloonWidthType :: WdRevisionsBalloonWidthType
                             -> View a0
                             -> IO ()
setRevisionsBalloonWidthType prop =
  propertySet "RevisionsBalloonWidthType"
              [inEnum prop]

getRevisionsBalloonSide :: View a0
                        -> IO WdRevisionsBalloonMargin
getRevisionsBalloonSide =
  propertyGet "RevisionsBalloonSide"
              []
              outEnum

setRevisionsBalloonSide :: WdRevisionsBalloonMargin
                        -> View a0
                        -> IO ()
setRevisionsBalloonSide prop =
  propertySet "RevisionsBalloonSide"
              [inEnum prop]

getReviewers :: View a0
             -> IO (Reviewers ())
getReviewers =
  propertyGet "Reviewers"
              []
              outIUnknown

getRevisionsBalloonShowConnectingLines :: View a0
                                       -> IO Bool
getRevisionsBalloonShowConnectingLines =
  propertyGet "RevisionsBalloonShowConnectingLines"
              []
              outBool

setRevisionsBalloonShowConnectingLines :: Bool
                                       -> View a0
                                       -> IO ()
setRevisionsBalloonShowConnectingLines prop =
  propertySet "RevisionsBalloonShowConnectingLines"
              [inBool prop]

getReadingLayout :: View a0
                 -> IO Bool
getReadingLayout =
  propertyGet "ReadingLayout"
              []
              outBool

setReadingLayout :: Bool
                 -> View a0
                 -> IO ()
setReadingLayout prop =
  propertySet "ReadingLayout"
              [inBool prop]

getShowXMLMarkup :: View a0
                 -> IO Int32
getShowXMLMarkup =
  propertyGet "ShowXMLMarkup"
              []
              outInt32

setShowXMLMarkup :: Int32
                 -> View a0
                 -> IO ()
setShowXMLMarkup prop =
  propertySet "ShowXMLMarkup"
              [inInt32 prop]

getShadeEditableRanges :: View a0
                       -> IO Int32
getShadeEditableRanges =
  propertyGet "ShadeEditableRanges"
              []
              outInt32

setShadeEditableRanges :: Int32
                       -> View a0
                       -> IO ()
setShadeEditableRanges prop =
  propertySet "ShadeEditableRanges"
              [inInt32 prop]

getShowInkAnnotations :: View a0
                      -> IO Bool
getShowInkAnnotations =
  propertyGet "ShowInkAnnotations"
              []
              outBool

setShowInkAnnotations :: Bool
                      -> View a0
                      -> IO ()
setShowInkAnnotations prop =
  propertySet "ShowInkAnnotations"
              [inBool prop]

getDisplayBackgrounds :: View a0
                      -> IO Bool
getDisplayBackgrounds =
  propertyGet "DisplayBackgrounds"
              []
              outBool

setDisplayBackgrounds :: Bool
                      -> View a0
                      -> IO ()
setDisplayBackgrounds prop =
  propertySet "DisplayBackgrounds"
              [inBool prop]

getReadingLayoutActualView :: View a0
                           -> IO Bool
getReadingLayoutActualView =
  propertyGet "ReadingLayoutActualView"
              []
              outBool

setReadingLayoutActualView :: Bool
                           -> View a0
                           -> IO ()
setReadingLayoutActualView prop =
  propertySet "ReadingLayoutActualView"
              [inBool prop]

getReadingLayoutAllowMultiplePages :: View a0
                                   -> IO Bool
getReadingLayoutAllowMultiplePages =
  propertyGet "ReadingLayoutAllowMultiplePages"
              []
              outBool

setReadingLayoutAllowMultiplePages :: Bool
                                   -> View a0
                                   -> IO ()
setReadingLayoutAllowMultiplePages prop =
  propertySet "ReadingLayoutAllowMultiplePages"
              [inBool prop]

getReadingLayoutAllowEditing :: View a0
                             -> IO Bool
getReadingLayoutAllowEditing =
  propertyGet "ReadingLayoutAllowEditing"
              []
              outBool

setReadingLayoutAllowEditing :: Bool
                             -> View a0
                             -> IO ()
setReadingLayoutAllowEditing prop =
  propertySet "ReadingLayoutAllowEditing"
              [inBool prop]

getReadingLayoutTruncateMargins :: View a0
                                -> IO WdReadingLayoutMargin
getReadingLayoutTruncateMargins =
  propertyGet "ReadingLayoutTruncateMargins"
              []
              outEnum

setReadingLayoutTruncateMargins :: WdReadingLayoutMargin
                                -> View a0
                                -> IO ()
setReadingLayoutTruncateMargins prop =
  propertySet "ReadingLayoutTruncateMargins"
              [inEnum prop]

getShowMarkupAreaHighlight :: View a0
                           -> IO Bool
getShowMarkupAreaHighlight =
  propertyGet "ShowMarkupAreaHighlight"
              []
              outBool

setShowMarkupAreaHighlight :: Bool
                           -> View a0
                           -> IO ()
setShowMarkupAreaHighlight prop =
  propertySet "ShowMarkupAreaHighlight"
              [inBool prop]

getPanning :: View a0
           -> IO Bool
getPanning =
  propertyGet "Panning"
              []
              outBool

setPanning :: Bool
           -> View a0
           -> IO ()
setPanning prop =
  propertySet "Panning"
              [inBool prop]

getShowCropMarks :: View a0
                 -> IO Bool
getShowCropMarks =
  propertyGet "ShowCropMarks"
              []
              outBool

setShowCropMarks :: Bool
                 -> View a0
                 -> IO ()
setShowCropMarks prop =
  propertySet "ShowCropMarks"
              [inBool prop]

getMarkupMode :: View a0
              -> IO WdRevisionsMode
getMarkupMode =
  propertyGet "MarkupMode"
              []
              outEnum

setMarkupMode :: WdRevisionsMode
              -> View a0
              -> IO ()
setMarkupMode prop =
  propertySet "MarkupMode"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Zoom
-- 
-- --------------------------------------------------
data Zoom_ a = Zoom__ 
type Zoom a = IDispatch (Zoom_ a)
iidZoom :: IID (Zoom ())
iidZoom = mkIID "{000209A6-0000-0000-C000-000000000046}"

getApplication151 :: Zoom a0
                  -> IO (Maybe Application)
getApplication151 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator151 :: Zoom a0
              -> IO Int32
getCreator151 =
  propertyGet "Creator"
              []
              outInt32

getParent151 :: Zoom a0
             -> IO (IDispatch ())
getParent151 =
  propertyGet "Parent"
              []
              outIDispatch

getPercentage :: Zoom a0
              -> IO Int32
getPercentage =
  propertyGet "Percentage"
              []
              outInt32

setPercentage :: Int32
              -> Zoom a0
              -> IO ()
setPercentage prop =
  propertySet "Percentage"
              [inInt32 prop]

getPageFit :: Zoom a0
           -> IO WdPageFit
getPageFit =
  propertyGet "PageFit"
              []
              outEnum

setPageFit :: WdPageFit
           -> Zoom a0
           -> IO ()
setPageFit prop =
  propertySet "PageFit"
              [inEnum prop]

getPageRows :: Zoom a0
            -> IO Int32
getPageRows =
  propertyGet "PageRows"
              []
              outInt32

setPageRows :: Int32
            -> Zoom a0
            -> IO ()
setPageRows prop =
  propertySet "PageRows"
              [inInt32 prop]

getPageColumns :: Zoom a0
               -> IO Int32
getPageColumns =
  propertyGet "PageColumns"
              []
              outInt32

setPageColumns :: Int32
               -> Zoom a0
               -> IO ()
setPageColumns prop =
  propertySet "PageColumns"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface Zooms
-- 
-- --------------------------------------------------
data Zooms_ a = Zooms__ 
type Zooms a = IDispatch (Zooms_ a)
iidZooms :: IID (Zooms ())
iidZooms = mkIID "{000209A7-0000-0000-C000-000000000046}"

getApplication152 :: Zooms a0
                  -> IO (Maybe Application)
getApplication152 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator152 :: Zooms a0
              -> IO Int32
getCreator152 =
  propertyGet "Creator"
              []
              outInt32

getParent152 :: Zooms a0
             -> IO (IDispatch ())
getParent152 =
  propertyGet "Parent"
              []
              outIDispatch

item64 :: WdViewType
       -> Zooms a0
       -> IO (Zoom ())
item64 index =
  function1 "Item"
            [inEnum index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface InlineShape
-- 
-- --------------------------------------------------
data InlineShape_ a = InlineShape__ 
type InlineShape a = IDispatch (InlineShape_ a)
iidInlineShape :: IID (InlineShape ())
iidInlineShape = mkIID "{000209A8-0000-0000-C000-000000000046}"

getApplication153 :: InlineShape a0
                  -> IO (Maybe Application)
getApplication153 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator153 :: InlineShape a0
              -> IO Int32
getCreator153 =
  propertyGet "Creator"
              []
              outInt32

getParent153 :: InlineShape a0
             -> IO (IDispatch ())
getParent153 =
  propertyGet "Parent"
              []
              outIDispatch

getBorders15 :: InlineShape a0
             -> IO (Borders ())
getBorders15 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders15 :: Borders a1
             -> InlineShape a0
             -> IO ()
setBorders15 prop =
  propertySet "Borders"
              [inIDispatch prop]

getRange20 :: InlineShape a0
           -> IO (Range ())
getRange20 =
  propertyGet "Range"
              []
              outIDispatch

getLinkFormat1 :: InlineShape a0
               -> IO (LinkFormat ())
getLinkFormat1 =
  propertyGet "LinkFormat"
              []
              outIDispatch

getField :: InlineShape a0
         -> IO (Field ())
getField =
  propertyGet "Field"
              []
              outIDispatch

getOLEFormat1 :: InlineShape a0
              -> IO (OLEFormat ())
getOLEFormat1 =
  propertyGet "OLEFormat"
              []
              outIDispatch

getType17 :: InlineShape a0
          -> IO WdInlineShapeType
getType17 =
  propertyGet "Type"
              []
              outEnum

getHyperlink1 :: InlineShape a0
              -> IO (Hyperlink ())
getHyperlink1 =
  propertyGet "Hyperlink"
              []
              outIDispatch

getHeight11 :: InlineShape a0
            -> IO Float
getHeight11 =
  propertyGet "Height"
              []
              outFloat

setHeight15 :: Float
            -> InlineShape a0
            -> IO ()
setHeight15 prop =
  propertySet "Height"
              [inFloat prop]

getWidth14 :: InlineShape a0
           -> IO Float
getWidth14 =
  propertyGet "Width"
              []
              outFloat

setWidth18 :: Float
           -> InlineShape a0
           -> IO ()
setWidth18 prop =
  propertySet "Width"
              [inFloat prop]

getScaleHeight :: InlineShape a0
               -> IO Float
getScaleHeight =
  propertyGet "ScaleHeight"
              []
              outFloat

setScaleHeight :: Float
               -> InlineShape a0
               -> IO ()
setScaleHeight prop =
  propertySet "ScaleHeight"
              [inFloat prop]

getScaleWidth :: InlineShape a0
              -> IO Float
getScaleWidth =
  propertyGet "ScaleWidth"
              []
              outFloat

setScaleWidth :: Float
              -> InlineShape a0
              -> IO ()
setScaleWidth prop =
  propertySet "ScaleWidth"
              [inFloat prop]

getLockAspectRatio1 :: InlineShape a0
                    -> IO MsoTriState
getLockAspectRatio1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 26 iptr
    doThenFree free readMsoTriState prop

setLockAspectRatio1 :: MsoTriState
                    -> InlineShape a0
                    -> IO ()
setLockAspectRatio1 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setLockAspectRatio1 methPtr iptr prop) 27 iptr

foreign import stdcall "prim_Word_setLockAspectRatio1" prim_Word_setLockAspectRatio1 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getLine1 :: InlineShape a0
         -> IO (LineFormat ())
getLine1 =
  propertyGet "Line"
              []
              outIUnknown

getFill1 :: InlineShape a0
         -> IO (FillFormat ())
getFill1 =
  propertyGet "Fill"
              []
              outIUnknown

getPictureFormat1 :: InlineShape a0
                  -> IO (PictureFormat ())
getPictureFormat1 =
  propertyGet "PictureFormat"
              []
              outIUnknown

setPictureFormat :: PictureFormat a1
                 -> InlineShape a0
                 -> IO ()
setPictureFormat prop =
  propertySet "PictureFormat"
              [inIUnknown prop]

activate8 :: InlineShape a0
          -> IO ()
activate8 =
  method0 "Activate"
          []

reset5 :: InlineShape a0
       -> IO ()
reset5 =
  method0 "Reset"
          []

delete40 :: InlineShape a0
         -> IO ()
delete40 =
  method0 "Delete"
          []

select18 :: InlineShape a0
         -> IO ()
select18 =
  method0 "Select"
          []

convertToShape :: InlineShape a0
               -> IO (Shape ())
convertToShape =
  function1 "ConvertToShape"
            []
            outIDispatch

getHorizontalLineFormat :: InlineShape a0
                        -> IO (HorizontalLineFormat ())
getHorizontalLineFormat =
  propertyGet "HorizontalLineFormat"
              []
              outIUnknown

getScript0 :: InlineShape a0
           -> IO (Maybe Script)
getScript0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getScript methPtr iptr prop) 38 iptr
    doThenFree free (readunique readScript) prop

getOWSAnchor :: InlineShape a0
             -> IO Int32
getOWSAnchor =
  propertyGet "OWSAnchor"
              []
              outInt32

getTextEffect1 :: InlineShape a0
               -> IO (TextEffectFormat ())
getTextEffect1 =
  propertyGet "TextEffect"
              []
              outIUnknown

setTextEffect :: TextEffectFormat a1
              -> InlineShape a0
              -> IO ()
setTextEffect prop =
  propertySet "TextEffect"
              [inIUnknown prop]

getAlternativeText1 :: InlineShape a0
                    -> IO String
getAlternativeText1 =
  propertyGet "AlternativeText"
              []
              outString

setAlternativeText1 :: String
                    -> InlineShape a0
                    -> IO ()
setAlternativeText1 prop =
  propertySet "AlternativeText"
              [inString prop]

getIsPictureBullet :: InlineShape a0
                   -> IO Bool
getIsPictureBullet =
  propertyGet "IsPictureBullet"
              []
              outBool

getGroupItems1 :: InlineShape a0
               -> IO (GroupShapes ())
getGroupItems1 =
  propertyGet "GroupItems"
              []
              outIDispatch

getHasChart0 :: InlineShape a0
             -> IO MsoTriState
getHasChart0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 46 iptr
    doThenFree free readMsoTriState prop

getChart0 :: InlineShape a0
          -> IO (Chart ())
getChart0 =
  propertyGet "Chart"
              []
              outIUnknown

getSoftEdge1 :: InlineShape a0
             -> IO (SoftEdgeFormat ())
getSoftEdge1 =
  propertyGet "SoftEdge"
              []
              outIUnknown

getGlow1 :: InlineShape a0
         -> IO (GlowFormat ())
getGlow1 =
  propertyGet "Glow"
              []
              outIUnknown

getReflection1 :: InlineShape a0
               -> IO (ReflectionFormat ())
getReflection1 =
  propertyGet "Reflection"
              []
              outIUnknown

getShadow3 :: InlineShape a0
           -> IO (ShadowFormat ())
getShadow3 =
  propertyGet "Shadow"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface InlineShapes
-- 
-- --------------------------------------------------
data InlineShapes_ a = InlineShapes__ 
type InlineShapes a = IDispatch (InlineShapes_ a)
iidInlineShapes :: IID (InlineShapes ())
iidInlineShapes = mkIID "{000209A9-0000-0000-C000-000000000046}"

getApplication154 :: InlineShapes a0
                  -> IO (Maybe Application)
getApplication154 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator154 :: InlineShapes a0
              -> IO Int32
getCreator154 =
  propertyGet "Creator"
              []
              outInt32

getParent154 :: InlineShapes a0
             -> IO (IDispatch ())
getParent154 =
  propertyGet "Parent"
              []
              outIDispatch

getCount64 :: InlineShapes a0
           -> IO Int32
getCount64 =
  propertyGet "Count"
              []
              outInt32

getNewEnum64 :: InlineShapes a0
             -> IO (IUnknown ())
getNewEnum64 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item65 :: Int32
       -> InlineShapes a0
       -> IO (InlineShape ())
item65 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

addPicture0 :: (Variant a1, Variant a2, Variant a3)
            => String
            -> a1
            -> a2
            -> a3
            -> InlineShapes a0
            -> IO (InlineShape ())
addPicture0 fileName linkToFile saveWithDocument range2 =
  function1 "AddPicture"
            [ inString fileName
            , inVariant linkToFile
            , inVariant saveWithDocument
            , inVariant range2
            ]
            outIDispatch

addOLEObject0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8)
              => a1
              -> a2
              -> a3
              -> a4
              -> a5
              -> a6
              -> a7
              -> a8
              -> InlineShapes a0
              -> IO (InlineShape ())
addOLEObject0 classType fileName linkToFile displayAsIcon iconFileName iconIndex iconLabel range2 =
  function1 "AddOLEObject"
            [ inVariant classType
            , inVariant fileName
            , inVariant linkToFile
            , inVariant displayAsIcon
            , inVariant iconFileName
            , inVariant iconIndex
            , inVariant iconLabel
            , inVariant range2
            ]
            outIDispatch

addOLEControl0 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> InlineShapes a0
               -> IO (InlineShape ())
addOLEControl0 classType range2 =
  function1 "AddOLEControl"
            [ inVariant classType
            , inVariant range2
            ]
            outIDispatch

new :: Range a1
    -> InlineShapes a0
    -> IO (InlineShape ())
new range2 =
  function1 "New"
            [inIDispatch range2]
            outIDispatch

addHorizontalLine :: (Variant a1)
                  => String
                  -> a1
                  -> InlineShapes a0
                  -> IO (InlineShape ())
addHorizontalLine fileName range2 =
  function1 "AddHorizontalLine"
            [ inString fileName
            , inVariant range2
            ]
            outIDispatch

addHorizontalLineStandard :: (Variant a1)
                          => a1
                          -> InlineShapes a0
                          -> IO (InlineShape ())
addHorizontalLineStandard range2 =
  function1 "AddHorizontalLineStandard"
            [inVariant range2]
            outIDispatch

addPictureBullet :: (Variant a1)
                 => String
                 -> a1
                 -> InlineShapes a0
                 -> IO (InlineShape ())
addPictureBullet fileName range2 =
  function1 "AddPictureBullet"
            [ inString fileName
            , inVariant range2
            ]
            outIDispatch

addChart0 :: (Variant a1)
          => XlChartType
          -> a1
          -> InlineShapes a0
          -> IO (InlineShape ())
addChart0 type0 range2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallXlChartType type0
    range2 <- marshallVariant range2
    invokeAndCheck (\ methPtr iptr -> prim_Word_addChart0 methPtr iptr type0 range2 prop) 20 iptr
    free range2
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addChart0" prim_Word_addChart0 :: Ptr () -> Ptr () -> Ptr () -> VARIANT -> Ptr (Ptr (InlineShape a)) -> IO Int32
-- --------------------------------------------------
-- 
-- interface SpellingSuggestions
-- 
-- --------------------------------------------------
data SpellingSuggestions_ a = SpellingSuggestions__ 
type SpellingSuggestions a = IDispatch (SpellingSuggestions_ a)
iidSpellingSuggestions :: IID (SpellingSuggestions ())
iidSpellingSuggestions =
  mkIID "{000209AA-0000-0000-C000-000000000046}"

getApplication155 :: SpellingSuggestions a0
                  -> IO (Maybe Application)
getApplication155 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator155 :: SpellingSuggestions a0
              -> IO Int32
getCreator155 =
  propertyGet "Creator"
              []
              outInt32

getParent155 :: SpellingSuggestions a0
             -> IO (IDispatch ())
getParent155 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum65 :: SpellingSuggestions a0
             -> IO (IUnknown ())
getNewEnum65 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount65 :: SpellingSuggestions a0
           -> IO Int32
getCount65 =
  propertyGet "Count"
              []
              outInt32

getSpellingErrorType :: SpellingSuggestions a0
                     -> IO WdSpellingErrorType
getSpellingErrorType =
  propertyGet "SpellingErrorType"
              []
              outEnum

item66 :: Int32
       -> SpellingSuggestions a0
       -> IO (SpellingSuggestion ())
item66 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface SpellingSuggestion
-- 
-- --------------------------------------------------
data SpellingSuggestion_ a = SpellingSuggestion__ 
type SpellingSuggestion a = IDispatch (SpellingSuggestion_ a)
iidSpellingSuggestion :: IID (SpellingSuggestion ())
iidSpellingSuggestion =
  mkIID "{000209AB-0000-0000-C000-000000000046}"

getApplication156 :: SpellingSuggestion a0
                  -> IO (Maybe Application)
getApplication156 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator156 :: SpellingSuggestion a0
              -> IO Int32
getCreator156 =
  propertyGet "Creator"
              []
              outInt32

getParent156 :: SpellingSuggestion a0
             -> IO (IDispatch ())
getParent156 =
  propertyGet "Parent"
              []
              outIDispatch

getName30 :: SpellingSuggestion a0
          -> IO String
getName30 =
  propertyGet "Name"
              []
              outString

-- --------------------------------------------------
-- 
-- interface Dictionaries
-- 
-- --------------------------------------------------
data Dictionaries_ a = Dictionaries__ 
type Dictionaries a = IDispatch (Dictionaries_ a)
iidDictionaries :: IID (Dictionaries ())
iidDictionaries = mkIID "{000209AC-0000-0000-C000-000000000046}"

getApplication157 :: Dictionaries a0
                  -> IO (Maybe Application)
getApplication157 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator157 :: Dictionaries a0
              -> IO Int32
getCreator157 =
  propertyGet "Creator"
              []
              outInt32

getParent157 :: Dictionaries a0
             -> IO (IDispatch ())
getParent157 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum66 :: Dictionaries a0
             -> IO (IUnknown ())
getNewEnum66 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount66 :: Dictionaries a0
           -> IO Int32
getCount66 =
  propertyGet "Count"
              []
              outInt32

getMaximum0 :: Dictionaries a0
            -> IO Int32
getMaximum0 =
  propertyGet "Maximum"
              []
              outInt32

getActiveCustomDictionary :: Dictionaries a0
                          -> IO (Dictionary ())
getActiveCustomDictionary =
  propertyGet "ActiveCustomDictionary"
              []
              outIUnknown

setActiveCustomDictionary :: Dictionary a1
                          -> Dictionaries a0
                          -> IO ()
setActiveCustomDictionary prop =
  propertySet "ActiveCustomDictionary"
              [inIUnknown prop]

item67 :: (Variant a1)
       => a1
       -> Dictionaries a0
       -> IO (Dictionary ())
item67 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add39 :: String
      -> Dictionaries a0
      -> IO (Dictionary ())
add39 fileName =
  function1 "Add"
            [inString fileName]
            outIUnknown

clearAll1 :: Dictionaries a0
          -> IO ()
clearAll1 =
  method0 "ClearAll"
          []

-- --------------------------------------------------
-- 
-- interface HangulHanjaConversionDictionaries
-- 
-- --------------------------------------------------
data HangulHanjaConversionDictionaries_ a = HangulHanjaConversionDictionaries__
                                              
type HangulHanjaConversionDictionaries a = IDispatch (HangulHanjaConversionDictionaries_ a)
iidHangulHanjaConversionDictionaries :: IID (HangulHanjaConversionDictionaries ())
iidHangulHanjaConversionDictionaries =
  mkIID "{000209E0-0000-0000-C000-000000000046}"

getApplication158 :: HangulHanjaConversionDictionaries a0
                  -> IO (Maybe Application)
getApplication158 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator158 :: HangulHanjaConversionDictionaries a0
              -> IO Int32
getCreator158 =
  propertyGet "Creator"
              []
              outInt32

getParent158 :: HangulHanjaConversionDictionaries a0
             -> IO (IDispatch ())
getParent158 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum67 :: HangulHanjaConversionDictionaries a0
             -> IO (IUnknown ())
getNewEnum67 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount67 :: HangulHanjaConversionDictionaries a0
           -> IO Int32
getCount67 =
  propertyGet "Count"
              []
              outInt32

getMaximum1 :: HangulHanjaConversionDictionaries a0
            -> IO Int32
getMaximum1 =
  propertyGet "Maximum"
              []
              outInt32

getActiveCustomDictionary0 :: HangulHanjaConversionDictionaries a0
                           -> IO (Dictionary ())
getActiveCustomDictionary0 =
  propertyGet "ActiveCustomDictionary"
              []
              outIUnknown

setActiveCustomDictionary0 :: Dictionary a1
                           -> HangulHanjaConversionDictionaries a0
                           -> IO ()
setActiveCustomDictionary0 prop =
  propertySet "ActiveCustomDictionary"
              [inIUnknown prop]

getBuiltinDictionary :: HangulHanjaConversionDictionaries a0
                     -> IO (Dictionary ())
getBuiltinDictionary =
  propertyGet "BuiltinDictionary"
              []
              outIUnknown

item68 :: (Variant a1)
       => a1
       -> HangulHanjaConversionDictionaries a0
       -> IO (Dictionary ())
item68 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add40 :: String
      -> HangulHanjaConversionDictionaries a0
      -> IO (Dictionary ())
add40 fileName =
  function1 "Add"
            [inString fileName]
            outIUnknown

clearAll2 :: HangulHanjaConversionDictionaries a0
          -> IO ()
clearAll2 =
  method0 "ClearAll"
          []

-- --------------------------------------------------
-- 
-- interface Dictionary
-- 
-- --------------------------------------------------
data Dictionary_ a = Dictionary__ 
type Dictionary a = IDispatch (Dictionary_ a)
iidDictionary :: IID (Dictionary ())
iidDictionary = mkIID "{000209AD-0000-0000-C000-000000000046}"

getApplication159 :: Dictionary a0
                  -> IO (Maybe Application)
getApplication159 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator159 :: Dictionary a0
              -> IO Int32
getCreator159 =
  propertyGet "Creator"
              []
              outInt32

getParent159 :: Dictionary a0
             -> IO (IDispatch ())
getParent159 =
  propertyGet "Parent"
              []
              outIDispatch

getName31 :: Dictionary a0
          -> IO String
getName31 =
  propertyGet "Name"
              []
              outString

getPath6 :: Dictionary a0
         -> IO String
getPath6 =
  propertyGet "Path"
              []
              outString

getLanguageID5 :: Dictionary a0
               -> IO WdLanguageID
getLanguageID5 =
  propertyGet "LanguageID"
              []
              outEnum

setLanguageID5 :: WdLanguageID
               -> Dictionary a0
               -> IO ()
setLanguageID5 prop =
  propertySet "LanguageID"
              [inEnum prop]

getReadOnly1 :: Dictionary a0
             -> IO Bool
getReadOnly1 =
  propertyGet "ReadOnly"
              []
              outBool

getType18 :: Dictionary a0
          -> IO WdDictionaryType
getType18 =
  propertyGet "Type"
              []
              outEnum

getLanguageSpecific :: Dictionary a0
                    -> IO Bool
getLanguageSpecific =
  propertyGet "LanguageSpecific"
              []
              outBool

setLanguageSpecific :: Bool
                    -> Dictionary a0
                    -> IO ()
setLanguageSpecific prop =
  propertySet "LanguageSpecific"
              [inBool prop]

delete41 :: Dictionary a0
         -> IO ()
delete41 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface ReadabilityStatistics
-- 
-- --------------------------------------------------
data ReadabilityStatistics_ a = ReadabilityStatistics__ 
type ReadabilityStatistics a = IDispatch (ReadabilityStatistics_ a)
iidReadabilityStatistics :: IID (ReadabilityStatistics ())
iidReadabilityStatistics =
  mkIID "{000209AE-0000-0000-C000-000000000046}"

getApplication160 :: ReadabilityStatistics a0
                  -> IO (Maybe Application)
getApplication160 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator160 :: ReadabilityStatistics a0
              -> IO Int32
getCreator160 =
  propertyGet "Creator"
              []
              outInt32

getParent160 :: ReadabilityStatistics a0
             -> IO (IDispatch ())
getParent160 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum68 :: ReadabilityStatistics a0
             -> IO (IUnknown ())
getNewEnum68 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount68 :: ReadabilityStatistics a0
           -> IO Int32
getCount68 =
  propertyGet "Count"
              []
              outInt32

item69 :: (Variant a1)
       => a1
       -> ReadabilityStatistics a0
       -> IO (ReadabilityStatistic ())
item69 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ReadabilityStatistic
-- 
-- --------------------------------------------------
data ReadabilityStatistic_ a = ReadabilityStatistic__ 
type ReadabilityStatistic a = IDispatch (ReadabilityStatistic_ a)
iidReadabilityStatistic :: IID (ReadabilityStatistic ())
iidReadabilityStatistic =
  mkIID "{000209AF-0000-0000-C000-000000000046}"

getApplication161 :: ReadabilityStatistic a0
                  -> IO (Maybe Application)
getApplication161 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator161 :: ReadabilityStatistic a0
              -> IO Int32
getCreator161 =
  propertyGet "Creator"
              []
              outInt32

getParent161 :: ReadabilityStatistic a0
             -> IO (IDispatch ())
getParent161 =
  propertyGet "Parent"
              []
              outIDispatch

getName32 :: ReadabilityStatistic a0
          -> IO String
getName32 =
  propertyGet "Name"
              []
              outString

getValue5 :: ReadabilityStatistic a0
          -> IO Float
getValue5 =
  propertyGet "Value"
              []
              outFloat

-- --------------------------------------------------
-- 
-- interface Versions
-- 
-- --------------------------------------------------
data Versions_ a = Versions__ 
type Versions a = IDispatch (Versions_ a)
iidVersions :: IID (Versions ())
iidVersions = mkIID "{000209B3-0000-0000-C000-000000000046}"

getApplication162 :: Versions a0
                  -> IO (Maybe Application)
getApplication162 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator162 :: Versions a0
              -> IO Int32
getCreator162 =
  propertyGet "Creator"
              []
              outInt32

getParent162 :: Versions a0
             -> IO (IDispatch ())
getParent162 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum69 :: Versions a0
             -> IO (IUnknown ())
getNewEnum69 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount69 :: Versions a0
           -> IO Int32
getCount69 =
  propertyGet "Count"
              []
              outInt32

getAutoVersion :: Versions a0
               -> IO WdAutoVersions
getAutoVersion =
  propertyGet "AutoVersion"
              []
              outEnum

setAutoVersion :: WdAutoVersions
               -> Versions a0
               -> IO ()
setAutoVersion prop =
  propertySet "AutoVersion"
              [inEnum prop]

item70 :: Int32
       -> Versions a0
       -> IO (Version ())
item70 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

save2 :: (Variant a1)
      => a1
      -> Versions a0
      -> IO ()
save2 comment =
  method0 "Save"
          [inVariant comment]

-- --------------------------------------------------
-- 
-- interface Version
-- 
-- --------------------------------------------------
data Version_ a = Version__ 
type Version a = IDispatch (Version_ a)
iidVersion :: IID (Version ())
iidVersion = mkIID "{000209B4-0000-0000-C000-000000000046}"

getApplication163 :: Version a0
                  -> IO (Maybe Application)
getApplication163 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator163 :: Version a0
              -> IO Int32
getCreator163 =
  propertyGet "Creator"
              []
              outInt32

getParent163 :: Version a0
             -> IO (IDispatch ())
getParent163 =
  propertyGet "Parent"
              []
              outIDispatch

getSavedBy :: Version a0
           -> IO String
getSavedBy =
  propertyGet "SavedBy"
              []
              outString

getComment :: Version a0
           -> IO String
getComment =
  propertyGet "Comment"
              []
              outString

getDate1 :: Version a0
         -> IO Int64
getDate1 =
  propertyGet "Date"
              []
              outDate

getIndex25 :: Version a0
           -> IO Int32
getIndex25 =
  propertyGet "Index"
              []
              outInt32

openOld0 :: Version a0
         -> IO ()
openOld0 =
  method0 "OpenOld"
          []

delete42 :: Version a0
         -> IO ()
delete42 =
  method0 "Delete"
          []

open3 :: Version a0
      -> IO (Maybe Document)
open3 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 16 iptr
    doThenFree free (readunique readDocument) prop

-- --------------------------------------------------
-- 
-- interface Options
-- 
-- --------------------------------------------------
data Options_ a = Options__ 
type Options a = IDispatch (Options_ a)
iidOptions :: IID (Options ())
iidOptions = mkIID "{000209B7-0000-0000-C000-000000000046}"

getApplication164 :: Options a0
                  -> IO (Maybe Application)
getApplication164 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator164 :: Options a0
              -> IO Int32
getCreator164 =
  propertyGet "Creator"
              []
              outInt32

getParent164 :: Options a0
             -> IO (IDispatch ())
getParent164 =
  propertyGet "Parent"
              []
              outIDispatch

getAllowAccentedUppercase :: Options a0
                          -> IO Bool
getAllowAccentedUppercase =
  propertyGet "AllowAccentedUppercase"
              []
              outBool

setAllowAccentedUppercase :: Bool
                          -> Options a0
                          -> IO ()
setAllowAccentedUppercase prop =
  propertySet "AllowAccentedUppercase"
              [inBool prop]

getWPHelp :: Options a0
          -> IO Bool
getWPHelp =
  propertyGet "WPHelp"
              []
              outBool

setWPHelp :: Bool
          -> Options a0
          -> IO ()
setWPHelp prop =
  propertySet "WPHelp"
              [inBool prop]

getWPDocNavKeys :: Options a0
                -> IO Bool
getWPDocNavKeys =
  propertyGet "WPDocNavKeys"
              []
              outBool

setWPDocNavKeys :: Bool
                -> Options a0
                -> IO ()
setWPDocNavKeys prop =
  propertySet "WPDocNavKeys"
              [inBool prop]

getPagination :: Options a0
              -> IO Bool
getPagination =
  propertyGet "Pagination"
              []
              outBool

setPagination :: Bool
              -> Options a0
              -> IO ()
setPagination prop =
  propertySet "Pagination"
              [inBool prop]

getBlueScreen :: Options a0
              -> IO Bool
getBlueScreen =
  propertyGet "BlueScreen"
              []
              outBool

setBlueScreen :: Bool
              -> Options a0
              -> IO ()
setBlueScreen prop =
  propertySet "BlueScreen"
              [inBool prop]

getEnableSound :: Options a0
               -> IO Bool
getEnableSound =
  propertyGet "EnableSound"
              []
              outBool

setEnableSound :: Bool
               -> Options a0
               -> IO ()
setEnableSound prop =
  propertySet "EnableSound"
              [inBool prop]

getConfirmConversions :: Options a0
                      -> IO Bool
getConfirmConversions =
  propertyGet "ConfirmConversions"
              []
              outBool

setConfirmConversions :: Bool
                      -> Options a0
                      -> IO ()
setConfirmConversions prop =
  propertySet "ConfirmConversions"
              [inBool prop]

getUpdateLinksAtOpen :: Options a0
                     -> IO Bool
getUpdateLinksAtOpen =
  propertyGet "UpdateLinksAtOpen"
              []
              outBool

setUpdateLinksAtOpen :: Bool
                     -> Options a0
                     -> IO ()
setUpdateLinksAtOpen prop =
  propertySet "UpdateLinksAtOpen"
              [inBool prop]

getSendMailAttach :: Options a0
                  -> IO Bool
getSendMailAttach =
  propertyGet "SendMailAttach"
              []
              outBool

setSendMailAttach :: Bool
                  -> Options a0
                  -> IO ()
setSendMailAttach prop =
  propertySet "SendMailAttach"
              [inBool prop]

getMeasurementUnit :: Options a0
                   -> IO WdMeasurementUnits
getMeasurementUnit =
  propertyGet "MeasurementUnit"
              []
              outEnum

setMeasurementUnit :: WdMeasurementUnits
                   -> Options a0
                   -> IO ()
setMeasurementUnit prop =
  propertySet "MeasurementUnit"
              [inEnum prop]

getButtonFieldClicks :: Options a0
                     -> IO Int32
getButtonFieldClicks =
  propertyGet "ButtonFieldClicks"
              []
              outInt32

setButtonFieldClicks :: Int32
                     -> Options a0
                     -> IO ()
setButtonFieldClicks prop =
  propertySet "ButtonFieldClicks"
              [inInt32 prop]

getShortMenuNames :: Options a0
                  -> IO Bool
getShortMenuNames =
  propertyGet "ShortMenuNames"
              []
              outBool

setShortMenuNames :: Bool
                  -> Options a0
                  -> IO ()
setShortMenuNames prop =
  propertySet "ShortMenuNames"
              [inBool prop]

getRTFInClipboard :: Options a0
                  -> IO Bool
getRTFInClipboard =
  propertyGet "RTFInClipboard"
              []
              outBool

setRTFInClipboard :: Bool
                  -> Options a0
                  -> IO ()
setRTFInClipboard prop =
  propertySet "RTFInClipboard"
              [inBool prop]

getUpdateFieldsAtPrint :: Options a0
                       -> IO Bool
getUpdateFieldsAtPrint =
  propertyGet "UpdateFieldsAtPrint"
              []
              outBool

setUpdateFieldsAtPrint :: Bool
                       -> Options a0
                       -> IO ()
setUpdateFieldsAtPrint prop =
  propertySet "UpdateFieldsAtPrint"
              [inBool prop]

getPrintProperties :: Options a0
                   -> IO Bool
getPrintProperties =
  propertyGet "PrintProperties"
              []
              outBool

setPrintProperties :: Bool
                   -> Options a0
                   -> IO ()
setPrintProperties prop =
  propertySet "PrintProperties"
              [inBool prop]

getPrintFieldCodes :: Options a0
                   -> IO Bool
getPrintFieldCodes =
  propertyGet "PrintFieldCodes"
              []
              outBool

setPrintFieldCodes :: Bool
                   -> Options a0
                   -> IO ()
setPrintFieldCodes prop =
  propertySet "PrintFieldCodes"
              [inBool prop]

getPrintComments :: Options a0
                 -> IO Bool
getPrintComments =
  propertyGet "PrintComments"
              []
              outBool

setPrintComments :: Bool
                 -> Options a0
                 -> IO ()
setPrintComments prop =
  propertySet "PrintComments"
              [inBool prop]

getPrintHiddenText :: Options a0
                   -> IO Bool
getPrintHiddenText =
  propertyGet "PrintHiddenText"
              []
              outBool

setPrintHiddenText :: Bool
                   -> Options a0
                   -> IO ()
setPrintHiddenText prop =
  propertySet "PrintHiddenText"
              [inBool prop]

getEnvelopeFeederInstalled :: Options a0
                           -> IO Bool
getEnvelopeFeederInstalled =
  propertyGet "EnvelopeFeederInstalled"
              []
              outBool

getUpdateLinksAtPrint :: Options a0
                      -> IO Bool
getUpdateLinksAtPrint =
  propertyGet "UpdateLinksAtPrint"
              []
              outBool

setUpdateLinksAtPrint :: Bool
                      -> Options a0
                      -> IO ()
setUpdateLinksAtPrint prop =
  propertySet "UpdateLinksAtPrint"
              [inBool prop]

getPrintBackground :: Options a0
                   -> IO Bool
getPrintBackground =
  propertyGet "PrintBackground"
              []
              outBool

setPrintBackground :: Bool
                   -> Options a0
                   -> IO ()
setPrintBackground prop =
  propertySet "PrintBackground"
              [inBool prop]

getPrintDrawingObjects :: Options a0
                       -> IO Bool
getPrintDrawingObjects =
  propertyGet "PrintDrawingObjects"
              []
              outBool

setPrintDrawingObjects :: Bool
                       -> Options a0
                       -> IO ()
setPrintDrawingObjects prop =
  propertySet "PrintDrawingObjects"
              [inBool prop]

getDefaultTray :: Options a0
               -> IO String
getDefaultTray =
  propertyGet "DefaultTray"
              []
              outString

setDefaultTray :: String
               -> Options a0
               -> IO ()
setDefaultTray prop =
  propertySet "DefaultTray"
              [inString prop]

getDefaultTrayID :: Options a0
                 -> IO Int32
getDefaultTrayID =
  propertyGet "DefaultTrayID"
              []
              outInt32

setDefaultTrayID :: Int32
                 -> Options a0
                 -> IO ()
setDefaultTrayID prop =
  propertySet "DefaultTrayID"
              [inInt32 prop]

getCreateBackup :: Options a0
                -> IO Bool
getCreateBackup =
  propertyGet "CreateBackup"
              []
              outBool

setCreateBackup :: Bool
                -> Options a0
                -> IO ()
setCreateBackup prop =
  propertySet "CreateBackup"
              [inBool prop]

getAllowFastSave :: Options a0
                 -> IO Bool
getAllowFastSave =
  propertyGet "AllowFastSave"
              []
              outBool

setAllowFastSave :: Bool
                 -> Options a0
                 -> IO ()
setAllowFastSave prop =
  propertySet "AllowFastSave"
              [inBool prop]

getSavePropertiesPrompt :: Options a0
                        -> IO Bool
getSavePropertiesPrompt =
  propertyGet "SavePropertiesPrompt"
              []
              outBool

setSavePropertiesPrompt :: Bool
                        -> Options a0
                        -> IO ()
setSavePropertiesPrompt prop =
  propertySet "SavePropertiesPrompt"
              [inBool prop]

getSaveNormalPrompt :: Options a0
                    -> IO Bool
getSaveNormalPrompt =
  propertyGet "SaveNormalPrompt"
              []
              outBool

setSaveNormalPrompt :: Bool
                    -> Options a0
                    -> IO ()
setSaveNormalPrompt prop =
  propertySet "SaveNormalPrompt"
              [inBool prop]

getSaveInterval :: Options a0
                -> IO Int32
getSaveInterval =
  propertyGet "SaveInterval"
              []
              outInt32

setSaveInterval :: Int32
                -> Options a0
                -> IO ()
setSaveInterval prop =
  propertySet "SaveInterval"
              [inInt32 prop]

getBackgroundSave :: Options a0
                  -> IO Bool
getBackgroundSave =
  propertyGet "BackgroundSave"
              []
              outBool

setBackgroundSave :: Bool
                  -> Options a0
                  -> IO ()
setBackgroundSave prop =
  propertySet "BackgroundSave"
              [inBool prop]

getInsertedTextMark :: Options a0
                    -> IO WdInsertedTextMark
getInsertedTextMark =
  propertyGet "InsertedTextMark"
              []
              outEnum

setInsertedTextMark :: WdInsertedTextMark
                    -> Options a0
                    -> IO ()
setInsertedTextMark prop =
  propertySet "InsertedTextMark"
              [inEnum prop]

getDeletedTextMark :: Options a0
                   -> IO WdDeletedTextMark
getDeletedTextMark =
  propertyGet "DeletedTextMark"
              []
              outEnum

setDeletedTextMark :: WdDeletedTextMark
                   -> Options a0
                   -> IO ()
setDeletedTextMark prop =
  propertySet "DeletedTextMark"
              [inEnum prop]

getRevisedLinesMark :: Options a0
                    -> IO WdRevisedLinesMark
getRevisedLinesMark =
  propertyGet "RevisedLinesMark"
              []
              outEnum

setRevisedLinesMark :: WdRevisedLinesMark
                    -> Options a0
                    -> IO ()
setRevisedLinesMark prop =
  propertySet "RevisedLinesMark"
              [inEnum prop]

getInsertedTextColor :: Options a0
                     -> IO WdColorIndex
getInsertedTextColor =
  propertyGet "InsertedTextColor"
              []
              outEnum

setInsertedTextColor :: WdColorIndex
                     -> Options a0
                     -> IO ()
setInsertedTextColor prop =
  propertySet "InsertedTextColor"
              [inEnum prop]

getDeletedTextColor :: Options a0
                    -> IO WdColorIndex
getDeletedTextColor =
  propertyGet "DeletedTextColor"
              []
              outEnum

setDeletedTextColor :: WdColorIndex
                    -> Options a0
                    -> IO ()
setDeletedTextColor prop =
  propertySet "DeletedTextColor"
              [inEnum prop]

getRevisedLinesColor :: Options a0
                     -> IO WdColorIndex
getRevisedLinesColor =
  propertyGet "RevisedLinesColor"
              []
              outEnum

setRevisedLinesColor :: WdColorIndex
                     -> Options a0
                     -> IO ()
setRevisedLinesColor prop =
  propertySet "RevisedLinesColor"
              [inEnum prop]

getDefaultFilePath :: WdDefaultFilePath
                   -> Options a0
                   -> IO String
getDefaultFilePath path =
  propertyGet "DefaultFilePath"
              [inEnum path]
              outString

setDefaultFilePath :: WdDefaultFilePath
                   -> String
                   -> Options a0
                   -> IO ()
setDefaultFilePath path prop =
  propertySet "DefaultFilePath"
              [ inEnum path
              , inString prop
              ]

getOvertype :: Options a0
            -> IO Bool
getOvertype =
  propertyGet "Overtype"
              []
              outBool

setOvertype :: Bool
            -> Options a0
            -> IO ()
setOvertype prop =
  propertySet "Overtype"
              [inBool prop]

getReplaceSelection :: Options a0
                    -> IO Bool
getReplaceSelection =
  propertyGet "ReplaceSelection"
              []
              outBool

setReplaceSelection :: Bool
                    -> Options a0
                    -> IO ()
setReplaceSelection prop =
  propertySet "ReplaceSelection"
              [inBool prop]

getAllowDragAndDrop :: Options a0
                    -> IO Bool
getAllowDragAndDrop =
  propertyGet "AllowDragAndDrop"
              []
              outBool

setAllowDragAndDrop :: Bool
                    -> Options a0
                    -> IO ()
setAllowDragAndDrop prop =
  propertySet "AllowDragAndDrop"
              [inBool prop]

getAutoWordSelection :: Options a0
                     -> IO Bool
getAutoWordSelection =
  propertyGet "AutoWordSelection"
              []
              outBool

setAutoWordSelection :: Bool
                     -> Options a0
                     -> IO ()
setAutoWordSelection prop =
  propertySet "AutoWordSelection"
              [inBool prop]

getINSKeyForPaste :: Options a0
                  -> IO Bool
getINSKeyForPaste =
  propertyGet "INSKeyForPaste"
              []
              outBool

setINSKeyForPaste :: Bool
                  -> Options a0
                  -> IO ()
setINSKeyForPaste prop =
  propertySet "INSKeyForPaste"
              [inBool prop]

getSmartCutPaste :: Options a0
                 -> IO Bool
getSmartCutPaste =
  propertyGet "SmartCutPaste"
              []
              outBool

setSmartCutPaste :: Bool
                 -> Options a0
                 -> IO ()
setSmartCutPaste prop =
  propertySet "SmartCutPaste"
              [inBool prop]

getTabIndentKey :: Options a0
                -> IO Bool
getTabIndentKey =
  propertyGet "TabIndentKey"
              []
              outBool

setTabIndentKey :: Bool
                -> Options a0
                -> IO ()
setTabIndentKey prop =
  propertySet "TabIndentKey"
              [inBool prop]

getPictureEditor :: Options a0
                 -> IO String
getPictureEditor =
  propertyGet "PictureEditor"
              []
              outString

setPictureEditor :: String
                 -> Options a0
                 -> IO ()
setPictureEditor prop =
  propertySet "PictureEditor"
              [inString prop]

getAnimateScreenMovements :: Options a0
                          -> IO Bool
getAnimateScreenMovements =
  propertyGet "AnimateScreenMovements"
              []
              outBool

setAnimateScreenMovements :: Bool
                          -> Options a0
                          -> IO ()
setAnimateScreenMovements prop =
  propertySet "AnimateScreenMovements"
              [inBool prop]

getVirusProtection :: Options a0
                   -> IO Bool
getVirusProtection =
  propertyGet "VirusProtection"
              []
              outBool

setVirusProtection :: Bool
                   -> Options a0
                   -> IO ()
setVirusProtection prop =
  propertySet "VirusProtection"
              [inBool prop]

getRevisedPropertiesMark :: Options a0
                         -> IO WdRevisedPropertiesMark
getRevisedPropertiesMark =
  propertyGet "RevisedPropertiesMark"
              []
              outEnum

setRevisedPropertiesMark :: WdRevisedPropertiesMark
                         -> Options a0
                         -> IO ()
setRevisedPropertiesMark prop =
  propertySet "RevisedPropertiesMark"
              [inEnum prop]

getRevisedPropertiesColor :: Options a0
                          -> IO WdColorIndex
getRevisedPropertiesColor =
  propertyGet "RevisedPropertiesColor"
              []
              outEnum

setRevisedPropertiesColor :: WdColorIndex
                          -> Options a0
                          -> IO ()
setRevisedPropertiesColor prop =
  propertySet "RevisedPropertiesColor"
              [inEnum prop]

getSnapToGrid0 :: Options a0
               -> IO Bool
getSnapToGrid0 =
  propertyGet "SnapToGrid"
              []
              outBool

setSnapToGrid0 :: Bool
               -> Options a0
               -> IO ()
setSnapToGrid0 prop =
  propertySet "SnapToGrid"
              [inBool prop]

getSnapToShapes0 :: Options a0
                 -> IO Bool
getSnapToShapes0 =
  propertyGet "SnapToShapes"
              []
              outBool

setSnapToShapes0 :: Bool
                 -> Options a0
                 -> IO ()
setSnapToShapes0 prop =
  propertySet "SnapToShapes"
              [inBool prop]

getGridDistanceHorizontal0 :: Options a0
                           -> IO Float
getGridDistanceHorizontal0 =
  propertyGet "GridDistanceHorizontal"
              []
              outFloat

setGridDistanceHorizontal0 :: Float
                           -> Options a0
                           -> IO ()
setGridDistanceHorizontal0 prop =
  propertySet "GridDistanceHorizontal"
              [inFloat prop]

getGridDistanceVertical0 :: Options a0
                         -> IO Float
getGridDistanceVertical0 =
  propertyGet "GridDistanceVertical"
              []
              outFloat

setGridDistanceVertical0 :: Float
                         -> Options a0
                         -> IO ()
setGridDistanceVertical0 prop =
  propertySet "GridDistanceVertical"
              [inFloat prop]

getGridOriginHorizontal0 :: Options a0
                         -> IO Float
getGridOriginHorizontal0 =
  propertyGet "GridOriginHorizontal"
              []
              outFloat

setGridOriginHorizontal0 :: Float
                         -> Options a0
                         -> IO ()
setGridOriginHorizontal0 prop =
  propertySet "GridOriginHorizontal"
              [inFloat prop]

getGridOriginVertical0 :: Options a0
                       -> IO Float
getGridOriginVertical0 =
  propertyGet "GridOriginVertical"
              []
              outFloat

setGridOriginVertical0 :: Float
                       -> Options a0
                       -> IO ()
setGridOriginVertical0 prop =
  propertySet "GridOriginVertical"
              [inFloat prop]

getInlineConversion :: Options a0
                    -> IO Bool
getInlineConversion =
  propertyGet "InlineConversion"
              []
              outBool

setInlineConversion :: Bool
                    -> Options a0
                    -> IO ()
setInlineConversion prop =
  propertySet "InlineConversion"
              [inBool prop]

getIMEAutomaticControl :: Options a0
                       -> IO Bool
getIMEAutomaticControl =
  propertyGet "IMEAutomaticControl"
              []
              outBool

setIMEAutomaticControl :: Bool
                       -> Options a0
                       -> IO ()
setIMEAutomaticControl prop =
  propertySet "IMEAutomaticControl"
              [inBool prop]

getAutoFormatApplyHeadings :: Options a0
                           -> IO Bool
getAutoFormatApplyHeadings =
  propertyGet "AutoFormatApplyHeadings"
              []
              outBool

setAutoFormatApplyHeadings :: Bool
                           -> Options a0
                           -> IO ()
setAutoFormatApplyHeadings prop =
  propertySet "AutoFormatApplyHeadings"
              [inBool prop]

getAutoFormatApplyLists :: Options a0
                        -> IO Bool
getAutoFormatApplyLists =
  propertyGet "AutoFormatApplyLists"
              []
              outBool

setAutoFormatApplyLists :: Bool
                        -> Options a0
                        -> IO ()
setAutoFormatApplyLists prop =
  propertySet "AutoFormatApplyLists"
              [inBool prop]

getAutoFormatApplyBulletedLists :: Options a0
                                -> IO Bool
getAutoFormatApplyBulletedLists =
  propertyGet "AutoFormatApplyBulletedLists"
              []
              outBool

setAutoFormatApplyBulletedLists :: Bool
                                -> Options a0
                                -> IO ()
setAutoFormatApplyBulletedLists prop =
  propertySet "AutoFormatApplyBulletedLists"
              [inBool prop]

getAutoFormatApplyOtherParas :: Options a0
                             -> IO Bool
getAutoFormatApplyOtherParas =
  propertyGet "AutoFormatApplyOtherParas"
              []
              outBool

setAutoFormatApplyOtherParas :: Bool
                             -> Options a0
                             -> IO ()
setAutoFormatApplyOtherParas prop =
  propertySet "AutoFormatApplyOtherParas"
              [inBool prop]

getAutoFormatReplaceQuotes :: Options a0
                           -> IO Bool
getAutoFormatReplaceQuotes =
  propertyGet "AutoFormatReplaceQuotes"
              []
              outBool

setAutoFormatReplaceQuotes :: Bool
                           -> Options a0
                           -> IO ()
setAutoFormatReplaceQuotes prop =
  propertySet "AutoFormatReplaceQuotes"
              [inBool prop]

getAutoFormatReplaceSymbols :: Options a0
                            -> IO Bool
getAutoFormatReplaceSymbols =
  propertyGet "AutoFormatReplaceSymbols"
              []
              outBool

setAutoFormatReplaceSymbols :: Bool
                            -> Options a0
                            -> IO ()
setAutoFormatReplaceSymbols prop =
  propertySet "AutoFormatReplaceSymbols"
              [inBool prop]

getAutoFormatReplaceOrdinals :: Options a0
                             -> IO Bool
getAutoFormatReplaceOrdinals =
  propertyGet "AutoFormatReplaceOrdinals"
              []
              outBool

setAutoFormatReplaceOrdinals :: Bool
                             -> Options a0
                             -> IO ()
setAutoFormatReplaceOrdinals prop =
  propertySet "AutoFormatReplaceOrdinals"
              [inBool prop]

getAutoFormatReplaceFractions :: Options a0
                              -> IO Bool
getAutoFormatReplaceFractions =
  propertyGet "AutoFormatReplaceFractions"
              []
              outBool

setAutoFormatReplaceFractions :: Bool
                              -> Options a0
                              -> IO ()
setAutoFormatReplaceFractions prop =
  propertySet "AutoFormatReplaceFractions"
              [inBool prop]

getAutoFormatReplacePlainTextEmphasis :: Options a0
                                      -> IO Bool
getAutoFormatReplacePlainTextEmphasis =
  propertyGet "AutoFormatReplacePlainTextEmphasis"
              []
              outBool

setAutoFormatReplacePlainTextEmphasis :: Bool
                                      -> Options a0
                                      -> IO ()
setAutoFormatReplacePlainTextEmphasis prop =
  propertySet "AutoFormatReplacePlainTextEmphasis"
              [inBool prop]

getAutoFormatPreserveStyles :: Options a0
                            -> IO Bool
getAutoFormatPreserveStyles =
  propertyGet "AutoFormatPreserveStyles"
              []
              outBool

setAutoFormatPreserveStyles :: Bool
                            -> Options a0
                            -> IO ()
setAutoFormatPreserveStyles prop =
  propertySet "AutoFormatPreserveStyles"
              [inBool prop]

getAutoFormatAsYouTypeApplyHeadings :: Options a0
                                    -> IO Bool
getAutoFormatAsYouTypeApplyHeadings =
  propertyGet "AutoFormatAsYouTypeApplyHeadings"
              []
              outBool

setAutoFormatAsYouTypeApplyHeadings :: Bool
                                    -> Options a0
                                    -> IO ()
setAutoFormatAsYouTypeApplyHeadings prop =
  propertySet "AutoFormatAsYouTypeApplyHeadings"
              [inBool prop]

getAutoFormatAsYouTypeApplyBorders :: Options a0
                                   -> IO Bool
getAutoFormatAsYouTypeApplyBorders =
  propertyGet "AutoFormatAsYouTypeApplyBorders"
              []
              outBool

setAutoFormatAsYouTypeApplyBorders :: Bool
                                   -> Options a0
                                   -> IO ()
setAutoFormatAsYouTypeApplyBorders prop =
  propertySet "AutoFormatAsYouTypeApplyBorders"
              [inBool prop]

getAutoFormatAsYouTypeApplyBulletedLists :: Options a0
                                         -> IO Bool
getAutoFormatAsYouTypeApplyBulletedLists =
  propertyGet "AutoFormatAsYouTypeApplyBulletedLists"
              []
              outBool

setAutoFormatAsYouTypeApplyBulletedLists :: Bool
                                         -> Options a0
                                         -> IO ()
setAutoFormatAsYouTypeApplyBulletedLists prop =
  propertySet "AutoFormatAsYouTypeApplyBulletedLists"
              [inBool prop]

getAutoFormatAsYouTypeApplyNumberedLists :: Options a0
                                         -> IO Bool
getAutoFormatAsYouTypeApplyNumberedLists =
  propertyGet "AutoFormatAsYouTypeApplyNumberedLists"
              []
              outBool

setAutoFormatAsYouTypeApplyNumberedLists :: Bool
                                         -> Options a0
                                         -> IO ()
setAutoFormatAsYouTypeApplyNumberedLists prop =
  propertySet "AutoFormatAsYouTypeApplyNumberedLists"
              [inBool prop]

getAutoFormatAsYouTypeReplaceQuotes :: Options a0
                                    -> IO Bool
getAutoFormatAsYouTypeReplaceQuotes =
  propertyGet "AutoFormatAsYouTypeReplaceQuotes"
              []
              outBool

setAutoFormatAsYouTypeReplaceQuotes :: Bool
                                    -> Options a0
                                    -> IO ()
setAutoFormatAsYouTypeReplaceQuotes prop =
  propertySet "AutoFormatAsYouTypeReplaceQuotes"
              [inBool prop]

getAutoFormatAsYouTypeReplaceSymbols :: Options a0
                                     -> IO Bool
getAutoFormatAsYouTypeReplaceSymbols =
  propertyGet "AutoFormatAsYouTypeReplaceSymbols"
              []
              outBool

setAutoFormatAsYouTypeReplaceSymbols :: Bool
                                     -> Options a0
                                     -> IO ()
setAutoFormatAsYouTypeReplaceSymbols prop =
  propertySet "AutoFormatAsYouTypeReplaceSymbols"
              [inBool prop]

getAutoFormatAsYouTypeReplaceOrdinals :: Options a0
                                      -> IO Bool
getAutoFormatAsYouTypeReplaceOrdinals =
  propertyGet "AutoFormatAsYouTypeReplaceOrdinals"
              []
              outBool

setAutoFormatAsYouTypeReplaceOrdinals :: Bool
                                      -> Options a0
                                      -> IO ()
setAutoFormatAsYouTypeReplaceOrdinals prop =
  propertySet "AutoFormatAsYouTypeReplaceOrdinals"
              [inBool prop]

getAutoFormatAsYouTypeReplaceFractions :: Options a0
                                       -> IO Bool
getAutoFormatAsYouTypeReplaceFractions =
  propertyGet "AutoFormatAsYouTypeReplaceFractions"
              []
              outBool

setAutoFormatAsYouTypeReplaceFractions :: Bool
                                       -> Options a0
                                       -> IO ()
setAutoFormatAsYouTypeReplaceFractions prop =
  propertySet "AutoFormatAsYouTypeReplaceFractions"
              [inBool prop]

getAutoFormatAsYouTypeReplacePlainTextEmphasis :: Options a0
                                               -> IO Bool
getAutoFormatAsYouTypeReplacePlainTextEmphasis =
  propertyGet "AutoFormatAsYouTypeReplacePlainTextEmphasis"
              []
              outBool

setAutoFormatAsYouTypeReplacePlainTextEmphasis :: Bool
                                               -> Options a0
                                               -> IO ()
setAutoFormatAsYouTypeReplacePlainTextEmphasis prop =
  propertySet "AutoFormatAsYouTypeReplacePlainTextEmphasis"
              [inBool prop]

getAutoFormatAsYouTypeFormatListItemBeginning :: Options a0
                                              -> IO Bool
getAutoFormatAsYouTypeFormatListItemBeginning =
  propertyGet "AutoFormatAsYouTypeFormatListItemBeginning"
              []
              outBool

setAutoFormatAsYouTypeFormatListItemBeginning :: Bool
                                              -> Options a0
                                              -> IO ()
setAutoFormatAsYouTypeFormatListItemBeginning prop =
  propertySet "AutoFormatAsYouTypeFormatListItemBeginning"
              [inBool prop]

getAutoFormatAsYouTypeDefineStyles :: Options a0
                                   -> IO Bool
getAutoFormatAsYouTypeDefineStyles =
  propertyGet "AutoFormatAsYouTypeDefineStyles"
              []
              outBool

setAutoFormatAsYouTypeDefineStyles :: Bool
                                   -> Options a0
                                   -> IO ()
setAutoFormatAsYouTypeDefineStyles prop =
  propertySet "AutoFormatAsYouTypeDefineStyles"
              [inBool prop]

getAutoFormatPlainTextWordMail :: Options a0
                               -> IO Bool
getAutoFormatPlainTextWordMail =
  propertyGet "AutoFormatPlainTextWordMail"
              []
              outBool

setAutoFormatPlainTextWordMail :: Bool
                               -> Options a0
                               -> IO ()
setAutoFormatPlainTextWordMail prop =
  propertySet "AutoFormatPlainTextWordMail"
              [inBool prop]

getAutoFormatAsYouTypeReplaceHyperlinks :: Options a0
                                        -> IO Bool
getAutoFormatAsYouTypeReplaceHyperlinks =
  propertyGet "AutoFormatAsYouTypeReplaceHyperlinks"
              []
              outBool

setAutoFormatAsYouTypeReplaceHyperlinks :: Bool
                                        -> Options a0
                                        -> IO ()
setAutoFormatAsYouTypeReplaceHyperlinks prop =
  propertySet "AutoFormatAsYouTypeReplaceHyperlinks"
              [inBool prop]

getAutoFormatReplaceHyperlinks :: Options a0
                               -> IO Bool
getAutoFormatReplaceHyperlinks =
  propertyGet "AutoFormatReplaceHyperlinks"
              []
              outBool

setAutoFormatReplaceHyperlinks :: Bool
                               -> Options a0
                               -> IO ()
setAutoFormatReplaceHyperlinks prop =
  propertySet "AutoFormatReplaceHyperlinks"
              [inBool prop]

getDefaultHighlightColorIndex :: Options a0
                              -> IO WdColorIndex
getDefaultHighlightColorIndex =
  propertyGet "DefaultHighlightColorIndex"
              []
              outEnum

setDefaultHighlightColorIndex :: WdColorIndex
                              -> Options a0
                              -> IO ()
setDefaultHighlightColorIndex prop =
  propertySet "DefaultHighlightColorIndex"
              [inEnum prop]

getDefaultBorderLineStyle :: Options a0
                          -> IO WdLineStyle
getDefaultBorderLineStyle =
  propertyGet "DefaultBorderLineStyle"
              []
              outEnum

setDefaultBorderLineStyle :: WdLineStyle
                          -> Options a0
                          -> IO ()
setDefaultBorderLineStyle prop =
  propertySet "DefaultBorderLineStyle"
              [inEnum prop]

getCheckSpellingAsYouType :: Options a0
                          -> IO Bool
getCheckSpellingAsYouType =
  propertyGet "CheckSpellingAsYouType"
              []
              outBool

setCheckSpellingAsYouType :: Bool
                          -> Options a0
                          -> IO ()
setCheckSpellingAsYouType prop =
  propertySet "CheckSpellingAsYouType"
              [inBool prop]

getCheckGrammarAsYouType :: Options a0
                         -> IO Bool
getCheckGrammarAsYouType =
  propertyGet "CheckGrammarAsYouType"
              []
              outBool

setCheckGrammarAsYouType :: Bool
                         -> Options a0
                         -> IO ()
setCheckGrammarAsYouType prop =
  propertySet "CheckGrammarAsYouType"
              [inBool prop]

getIgnoreInternetAndFileAddresses :: Options a0
                                  -> IO Bool
getIgnoreInternetAndFileAddresses =
  propertyGet "IgnoreInternetAndFileAddresses"
              []
              outBool

setIgnoreInternetAndFileAddresses :: Bool
                                  -> Options a0
                                  -> IO ()
setIgnoreInternetAndFileAddresses prop =
  propertySet "IgnoreInternetAndFileAddresses"
              [inBool prop]

getShowReadabilityStatistics :: Options a0
                             -> IO Bool
getShowReadabilityStatistics =
  propertyGet "ShowReadabilityStatistics"
              []
              outBool

setShowReadabilityStatistics :: Bool
                             -> Options a0
                             -> IO ()
setShowReadabilityStatistics prop =
  propertySet "ShowReadabilityStatistics"
              [inBool prop]

getIgnoreUppercase :: Options a0
                   -> IO Bool
getIgnoreUppercase =
  propertyGet "IgnoreUppercase"
              []
              outBool

setIgnoreUppercase :: Bool
                   -> Options a0
                   -> IO ()
setIgnoreUppercase prop =
  propertySet "IgnoreUppercase"
              [inBool prop]

getIgnoreMixedDigits :: Options a0
                     -> IO Bool
getIgnoreMixedDigits =
  propertyGet "IgnoreMixedDigits"
              []
              outBool

setIgnoreMixedDigits :: Bool
                     -> Options a0
                     -> IO ()
setIgnoreMixedDigits prop =
  propertySet "IgnoreMixedDigits"
              [inBool prop]

getSuggestFromMainDictionaryOnly :: Options a0
                                 -> IO Bool
getSuggestFromMainDictionaryOnly =
  propertyGet "SuggestFromMainDictionaryOnly"
              []
              outBool

setSuggestFromMainDictionaryOnly :: Bool
                                 -> Options a0
                                 -> IO ()
setSuggestFromMainDictionaryOnly prop =
  propertySet "SuggestFromMainDictionaryOnly"
              [inBool prop]

getSuggestSpellingCorrections :: Options a0
                              -> IO Bool
getSuggestSpellingCorrections =
  propertyGet "SuggestSpellingCorrections"
              []
              outBool

setSuggestSpellingCorrections :: Bool
                              -> Options a0
                              -> IO ()
setSuggestSpellingCorrections prop =
  propertySet "SuggestSpellingCorrections"
              [inBool prop]

getDefaultBorderLineWidth :: Options a0
                          -> IO WdLineWidth
getDefaultBorderLineWidth =
  propertyGet "DefaultBorderLineWidth"
              []
              outEnum

setDefaultBorderLineWidth :: WdLineWidth
                          -> Options a0
                          -> IO ()
setDefaultBorderLineWidth prop =
  propertySet "DefaultBorderLineWidth"
              [inEnum prop]

getCheckGrammarWithSpelling :: Options a0
                            -> IO Bool
getCheckGrammarWithSpelling =
  propertyGet "CheckGrammarWithSpelling"
              []
              outBool

setCheckGrammarWithSpelling :: Bool
                            -> Options a0
                            -> IO ()
setCheckGrammarWithSpelling prop =
  propertySet "CheckGrammarWithSpelling"
              [inBool prop]

getDefaultOpenFormat :: Options a0
                     -> IO WdOpenFormat
getDefaultOpenFormat =
  propertyGet "DefaultOpenFormat"
              []
              outEnum

setDefaultOpenFormat :: WdOpenFormat
                     -> Options a0
                     -> IO ()
setDefaultOpenFormat prop =
  propertySet "DefaultOpenFormat"
              [inEnum prop]

getPrintDraft :: Options a0
              -> IO Bool
getPrintDraft =
  propertyGet "PrintDraft"
              []
              outBool

setPrintDraft :: Bool
              -> Options a0
              -> IO ()
setPrintDraft prop =
  propertySet "PrintDraft"
              [inBool prop]

getPrintReverse :: Options a0
                -> IO Bool
getPrintReverse =
  propertyGet "PrintReverse"
              []
              outBool

setPrintReverse :: Bool
                -> Options a0
                -> IO ()
setPrintReverse prop =
  propertySet "PrintReverse"
              [inBool prop]

getMapPaperSize :: Options a0
                -> IO Bool
getMapPaperSize =
  propertyGet "MapPaperSize"
              []
              outBool

setMapPaperSize :: Bool
                -> Options a0
                -> IO ()
setMapPaperSize prop =
  propertySet "MapPaperSize"
              [inBool prop]

getAutoFormatAsYouTypeApplyTables :: Options a0
                                  -> IO Bool
getAutoFormatAsYouTypeApplyTables =
  propertyGet "AutoFormatAsYouTypeApplyTables"
              []
              outBool

setAutoFormatAsYouTypeApplyTables :: Bool
                                  -> Options a0
                                  -> IO ()
setAutoFormatAsYouTypeApplyTables prop =
  propertySet "AutoFormatAsYouTypeApplyTables"
              [inBool prop]

getAutoFormatApplyFirstIndents :: Options a0
                               -> IO Bool
getAutoFormatApplyFirstIndents =
  propertyGet "AutoFormatApplyFirstIndents"
              []
              outBool

setAutoFormatApplyFirstIndents :: Bool
                               -> Options a0
                               -> IO ()
setAutoFormatApplyFirstIndents prop =
  propertySet "AutoFormatApplyFirstIndents"
              [inBool prop]

getAutoFormatMatchParentheses :: Options a0
                              -> IO Bool
getAutoFormatMatchParentheses =
  propertyGet "AutoFormatMatchParentheses"
              []
              outBool

setAutoFormatMatchParentheses :: Bool
                              -> Options a0
                              -> IO ()
setAutoFormatMatchParentheses prop =
  propertySet "AutoFormatMatchParentheses"
              [inBool prop]

getAutoFormatReplaceFarEastDashes :: Options a0
                                  -> IO Bool
getAutoFormatReplaceFarEastDashes =
  propertyGet "AutoFormatReplaceFarEastDashes"
              []
              outBool

setAutoFormatReplaceFarEastDashes :: Bool
                                  -> Options a0
                                  -> IO ()
setAutoFormatReplaceFarEastDashes prop =
  propertySet "AutoFormatReplaceFarEastDashes"
              [inBool prop]

getAutoFormatDeleteAutoSpaces :: Options a0
                              -> IO Bool
getAutoFormatDeleteAutoSpaces =
  propertyGet "AutoFormatDeleteAutoSpaces"
              []
              outBool

setAutoFormatDeleteAutoSpaces :: Bool
                              -> Options a0
                              -> IO ()
setAutoFormatDeleteAutoSpaces prop =
  propertySet "AutoFormatDeleteAutoSpaces"
              [inBool prop]

getAutoFormatAsYouTypeApplyFirstIndents :: Options a0
                                        -> IO Bool
getAutoFormatAsYouTypeApplyFirstIndents =
  propertyGet "AutoFormatAsYouTypeApplyFirstIndents"
              []
              outBool

setAutoFormatAsYouTypeApplyFirstIndents :: Bool
                                        -> Options a0
                                        -> IO ()
setAutoFormatAsYouTypeApplyFirstIndents prop =
  propertySet "AutoFormatAsYouTypeApplyFirstIndents"
              [inBool prop]

getAutoFormatAsYouTypeApplyDates :: Options a0
                                 -> IO Bool
getAutoFormatAsYouTypeApplyDates =
  propertyGet "AutoFormatAsYouTypeApplyDates"
              []
              outBool

setAutoFormatAsYouTypeApplyDates :: Bool
                                 -> Options a0
                                 -> IO ()
setAutoFormatAsYouTypeApplyDates prop =
  propertySet "AutoFormatAsYouTypeApplyDates"
              [inBool prop]

getAutoFormatAsYouTypeApplyClosings :: Options a0
                                    -> IO Bool
getAutoFormatAsYouTypeApplyClosings =
  propertyGet "AutoFormatAsYouTypeApplyClosings"
              []
              outBool

setAutoFormatAsYouTypeApplyClosings :: Bool
                                    -> Options a0
                                    -> IO ()
setAutoFormatAsYouTypeApplyClosings prop =
  propertySet "AutoFormatAsYouTypeApplyClosings"
              [inBool prop]

getAutoFormatAsYouTypeMatchParentheses :: Options a0
                                       -> IO Bool
getAutoFormatAsYouTypeMatchParentheses =
  propertyGet "AutoFormatAsYouTypeMatchParentheses"
              []
              outBool

setAutoFormatAsYouTypeMatchParentheses :: Bool
                                       -> Options a0
                                       -> IO ()
setAutoFormatAsYouTypeMatchParentheses prop =
  propertySet "AutoFormatAsYouTypeMatchParentheses"
              [inBool prop]

getAutoFormatAsYouTypeReplaceFarEastDashes :: Options a0
                                           -> IO Bool
getAutoFormatAsYouTypeReplaceFarEastDashes =
  propertyGet "AutoFormatAsYouTypeReplaceFarEastDashes"
              []
              outBool

setAutoFormatAsYouTypeReplaceFarEastDashes :: Bool
                                           -> Options a0
                                           -> IO ()
setAutoFormatAsYouTypeReplaceFarEastDashes prop =
  propertySet "AutoFormatAsYouTypeReplaceFarEastDashes"
              [inBool prop]

getAutoFormatAsYouTypeDeleteAutoSpaces :: Options a0
                                       -> IO Bool
getAutoFormatAsYouTypeDeleteAutoSpaces =
  propertyGet "AutoFormatAsYouTypeDeleteAutoSpaces"
              []
              outBool

setAutoFormatAsYouTypeDeleteAutoSpaces :: Bool
                                       -> Options a0
                                       -> IO ()
setAutoFormatAsYouTypeDeleteAutoSpaces prop =
  propertySet "AutoFormatAsYouTypeDeleteAutoSpaces"
              [inBool prop]

getAutoFormatAsYouTypeInsertClosings :: Options a0
                                     -> IO Bool
getAutoFormatAsYouTypeInsertClosings =
  propertyGet "AutoFormatAsYouTypeInsertClosings"
              []
              outBool

setAutoFormatAsYouTypeInsertClosings :: Bool
                                     -> Options a0
                                     -> IO ()
setAutoFormatAsYouTypeInsertClosings prop =
  propertySet "AutoFormatAsYouTypeInsertClosings"
              [inBool prop]

getAutoFormatAsYouTypeAutoLetterWizard :: Options a0
                                       -> IO Bool
getAutoFormatAsYouTypeAutoLetterWizard =
  propertyGet "AutoFormatAsYouTypeAutoLetterWizard"
              []
              outBool

setAutoFormatAsYouTypeAutoLetterWizard :: Bool
                                       -> Options a0
                                       -> IO ()
setAutoFormatAsYouTypeAutoLetterWizard prop =
  propertySet "AutoFormatAsYouTypeAutoLetterWizard"
              [inBool prop]

getAutoFormatAsYouTypeInsertOvers :: Options a0
                                  -> IO Bool
getAutoFormatAsYouTypeInsertOvers =
  propertyGet "AutoFormatAsYouTypeInsertOvers"
              []
              outBool

setAutoFormatAsYouTypeInsertOvers :: Bool
                                  -> Options a0
                                  -> IO ()
setAutoFormatAsYouTypeInsertOvers prop =
  propertySet "AutoFormatAsYouTypeInsertOvers"
              [inBool prop]

getDisplayGridLines :: Options a0
                    -> IO Bool
getDisplayGridLines =
  propertyGet "DisplayGridLines"
              []
              outBool

setDisplayGridLines :: Bool
                    -> Options a0
                    -> IO ()
setDisplayGridLines prop =
  propertySet "DisplayGridLines"
              [inBool prop]

getMatchFuzzyCase :: Options a0
                  -> IO Bool
getMatchFuzzyCase =
  propertyGet "MatchFuzzyCase"
              []
              outBool

setMatchFuzzyCase :: Bool
                  -> Options a0
                  -> IO ()
setMatchFuzzyCase prop =
  propertySet "MatchFuzzyCase"
              [inBool prop]

getMatchFuzzyByte :: Options a0
                  -> IO Bool
getMatchFuzzyByte =
  propertyGet "MatchFuzzyByte"
              []
              outBool

setMatchFuzzyByte :: Bool
                  -> Options a0
                  -> IO ()
setMatchFuzzyByte prop =
  propertySet "MatchFuzzyByte"
              [inBool prop]

getMatchFuzzyHiragana :: Options a0
                      -> IO Bool
getMatchFuzzyHiragana =
  propertyGet "MatchFuzzyHiragana"
              []
              outBool

setMatchFuzzyHiragana :: Bool
                      -> Options a0
                      -> IO ()
setMatchFuzzyHiragana prop =
  propertySet "MatchFuzzyHiragana"
              [inBool prop]

getMatchFuzzySmallKana :: Options a0
                       -> IO Bool
getMatchFuzzySmallKana =
  propertyGet "MatchFuzzySmallKana"
              []
              outBool

setMatchFuzzySmallKana :: Bool
                       -> Options a0
                       -> IO ()
setMatchFuzzySmallKana prop =
  propertySet "MatchFuzzySmallKana"
              [inBool prop]

getMatchFuzzyDash :: Options a0
                  -> IO Bool
getMatchFuzzyDash =
  propertyGet "MatchFuzzyDash"
              []
              outBool

setMatchFuzzyDash :: Bool
                  -> Options a0
                  -> IO ()
setMatchFuzzyDash prop =
  propertySet "MatchFuzzyDash"
              [inBool prop]

getMatchFuzzyIterationMark :: Options a0
                           -> IO Bool
getMatchFuzzyIterationMark =
  propertyGet "MatchFuzzyIterationMark"
              []
              outBool

setMatchFuzzyIterationMark :: Bool
                           -> Options a0
                           -> IO ()
setMatchFuzzyIterationMark prop =
  propertySet "MatchFuzzyIterationMark"
              [inBool prop]

getMatchFuzzyKanji :: Options a0
                   -> IO Bool
getMatchFuzzyKanji =
  propertyGet "MatchFuzzyKanji"
              []
              outBool

setMatchFuzzyKanji :: Bool
                   -> Options a0
                   -> IO ()
setMatchFuzzyKanji prop =
  propertySet "MatchFuzzyKanji"
              [inBool prop]

getMatchFuzzyOldKana :: Options a0
                     -> IO Bool
getMatchFuzzyOldKana =
  propertyGet "MatchFuzzyOldKana"
              []
              outBool

setMatchFuzzyOldKana :: Bool
                     -> Options a0
                     -> IO ()
setMatchFuzzyOldKana prop =
  propertySet "MatchFuzzyOldKana"
              [inBool prop]

getMatchFuzzyProlongedSoundMark :: Options a0
                                -> IO Bool
getMatchFuzzyProlongedSoundMark =
  propertyGet "MatchFuzzyProlongedSoundMark"
              []
              outBool

setMatchFuzzyProlongedSoundMark :: Bool
                                -> Options a0
                                -> IO ()
setMatchFuzzyProlongedSoundMark prop =
  propertySet "MatchFuzzyProlongedSoundMark"
              [inBool prop]

getMatchFuzzyDZ :: Options a0
                -> IO Bool
getMatchFuzzyDZ =
  propertyGet "MatchFuzzyDZ"
              []
              outBool

setMatchFuzzyDZ :: Bool
                -> Options a0
                -> IO ()
setMatchFuzzyDZ prop =
  propertySet "MatchFuzzyDZ"
              [inBool prop]

getMatchFuzzyBV :: Options a0
                -> IO Bool
getMatchFuzzyBV =
  propertyGet "MatchFuzzyBV"
              []
              outBool

setMatchFuzzyBV :: Bool
                -> Options a0
                -> IO ()
setMatchFuzzyBV prop =
  propertySet "MatchFuzzyBV"
              [inBool prop]

getMatchFuzzyTC :: Options a0
                -> IO Bool
getMatchFuzzyTC =
  propertyGet "MatchFuzzyTC"
              []
              outBool

setMatchFuzzyTC :: Bool
                -> Options a0
                -> IO ()
setMatchFuzzyTC prop =
  propertySet "MatchFuzzyTC"
              [inBool prop]

getMatchFuzzyHF :: Options a0
                -> IO Bool
getMatchFuzzyHF =
  propertyGet "MatchFuzzyHF"
              []
              outBool

setMatchFuzzyHF :: Bool
                -> Options a0
                -> IO ()
setMatchFuzzyHF prop =
  propertySet "MatchFuzzyHF"
              [inBool prop]

getMatchFuzzyZJ :: Options a0
                -> IO Bool
getMatchFuzzyZJ =
  propertyGet "MatchFuzzyZJ"
              []
              outBool

setMatchFuzzyZJ :: Bool
                -> Options a0
                -> IO ()
setMatchFuzzyZJ prop =
  propertySet "MatchFuzzyZJ"
              [inBool prop]

getMatchFuzzyAY :: Options a0
                -> IO Bool
getMatchFuzzyAY =
  propertyGet "MatchFuzzyAY"
              []
              outBool

setMatchFuzzyAY :: Bool
                -> Options a0
                -> IO ()
setMatchFuzzyAY prop =
  propertySet "MatchFuzzyAY"
              [inBool prop]

getMatchFuzzyKiKu :: Options a0
                  -> IO Bool
getMatchFuzzyKiKu =
  propertyGet "MatchFuzzyKiKu"
              []
              outBool

setMatchFuzzyKiKu :: Bool
                  -> Options a0
                  -> IO ()
setMatchFuzzyKiKu prop =
  propertySet "MatchFuzzyKiKu"
              [inBool prop]

getMatchFuzzyPunctuation :: Options a0
                         -> IO Bool
getMatchFuzzyPunctuation =
  propertyGet "MatchFuzzyPunctuation"
              []
              outBool

setMatchFuzzyPunctuation :: Bool
                         -> Options a0
                         -> IO ()
setMatchFuzzyPunctuation prop =
  propertySet "MatchFuzzyPunctuation"
              [inBool prop]

getMatchFuzzySpace :: Options a0
                   -> IO Bool
getMatchFuzzySpace =
  propertyGet "MatchFuzzySpace"
              []
              outBool

setMatchFuzzySpace :: Bool
                   -> Options a0
                   -> IO ()
setMatchFuzzySpace prop =
  propertySet "MatchFuzzySpace"
              [inBool prop]

getApplyFarEastFontsToAscii :: Options a0
                            -> IO Bool
getApplyFarEastFontsToAscii =
  propertyGet "ApplyFarEastFontsToAscii"
              []
              outBool

setApplyFarEastFontsToAscii :: Bool
                            -> Options a0
                            -> IO ()
setApplyFarEastFontsToAscii prop =
  propertySet "ApplyFarEastFontsToAscii"
              [inBool prop]

getConvertHighAnsiToFarEast :: Options a0
                            -> IO Bool
getConvertHighAnsiToFarEast =
  propertyGet "ConvertHighAnsiToFarEast"
              []
              outBool

setConvertHighAnsiToFarEast :: Bool
                            -> Options a0
                            -> IO ()
setConvertHighAnsiToFarEast prop =
  propertySet "ConvertHighAnsiToFarEast"
              [inBool prop]

getPrintOddPagesInAscendingOrder :: Options a0
                                 -> IO Bool
getPrintOddPagesInAscendingOrder =
  propertyGet "PrintOddPagesInAscendingOrder"
              []
              outBool

setPrintOddPagesInAscendingOrder :: Bool
                                 -> Options a0
                                 -> IO ()
setPrintOddPagesInAscendingOrder prop =
  propertySet "PrintOddPagesInAscendingOrder"
              [inBool prop]

getPrintEvenPagesInAscendingOrder :: Options a0
                                  -> IO Bool
getPrintEvenPagesInAscendingOrder =
  propertyGet "PrintEvenPagesInAscendingOrder"
              []
              outBool

setPrintEvenPagesInAscendingOrder :: Bool
                                  -> Options a0
                                  -> IO ()
setPrintEvenPagesInAscendingOrder prop =
  propertySet "PrintEvenPagesInAscendingOrder"
              [inBool prop]

getDefaultBorderColorIndex :: Options a0
                           -> IO WdColorIndex
getDefaultBorderColorIndex =
  propertyGet "DefaultBorderColorIndex"
              []
              outEnum

setDefaultBorderColorIndex :: WdColorIndex
                           -> Options a0
                           -> IO ()
setDefaultBorderColorIndex prop =
  propertySet "DefaultBorderColorIndex"
              [inEnum prop]

getEnableMisusedWordsDictionary :: Options a0
                                -> IO Bool
getEnableMisusedWordsDictionary =
  propertyGet "EnableMisusedWordsDictionary"
              []
              outBool

setEnableMisusedWordsDictionary :: Bool
                                -> Options a0
                                -> IO ()
setEnableMisusedWordsDictionary prop =
  propertySet "EnableMisusedWordsDictionary"
              [inBool prop]

getAllowCombinedAuxiliaryForms :: Options a0
                               -> IO Bool
getAllowCombinedAuxiliaryForms =
  propertyGet "AllowCombinedAuxiliaryForms"
              []
              outBool

setAllowCombinedAuxiliaryForms :: Bool
                               -> Options a0
                               -> IO ()
setAllowCombinedAuxiliaryForms prop =
  propertySet "AllowCombinedAuxiliaryForms"
              [inBool prop]

getHangulHanjaFastConversion :: Options a0
                             -> IO Bool
getHangulHanjaFastConversion =
  propertyGet "HangulHanjaFastConversion"
              []
              outBool

setHangulHanjaFastConversion :: Bool
                             -> Options a0
                             -> IO ()
setHangulHanjaFastConversion prop =
  propertySet "HangulHanjaFastConversion"
              [inBool prop]

getCheckHangulEndings :: Options a0
                      -> IO Bool
getCheckHangulEndings =
  propertyGet "CheckHangulEndings"
              []
              outBool

setCheckHangulEndings :: Bool
                      -> Options a0
                      -> IO ()
setCheckHangulEndings prop =
  propertySet "CheckHangulEndings"
              [inBool prop]

getEnableHangulHanjaRecentOrdering :: Options a0
                                   -> IO Bool
getEnableHangulHanjaRecentOrdering =
  propertyGet "EnableHangulHanjaRecentOrdering"
              []
              outBool

setEnableHangulHanjaRecentOrdering :: Bool
                                   -> Options a0
                                   -> IO ()
setEnableHangulHanjaRecentOrdering prop =
  propertySet "EnableHangulHanjaRecentOrdering"
              [inBool prop]

getMultipleWordConversionsMode :: Options a0
                               -> IO WdMultipleWordConversionsMode
getMultipleWordConversionsMode =
  propertyGet "MultipleWordConversionsMode"
              []
              outEnum

setMultipleWordConversionsMode :: WdMultipleWordConversionsMode
                               -> Options a0
                               -> IO ()
setMultipleWordConversionsMode prop =
  propertySet "MultipleWordConversionsMode"
              [inEnum prop]

setWPHelpOptions :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
                 => a1
                 -> a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> Options a0
                 -> IO ()
setWPHelpOptions commandKeyHelp docNavigationKeys mouseSimulation demoGuidance demoSpeed helpType =
  method0 "SetWPHelpOptions"
          [ inVariant commandKeyHelp
          , inVariant docNavigationKeys
          , inVariant mouseSimulation
          , inVariant demoGuidance
          , inVariant demoSpeed
          , inVariant helpType
          ]

getDefaultBorderColor :: Options a0
                      -> IO WdColor
getDefaultBorderColor =
  propertyGet "DefaultBorderColor"
              []
              outEnum

setDefaultBorderColor :: WdColor
                      -> Options a0
                      -> IO ()
setDefaultBorderColor prop =
  propertySet "DefaultBorderColor"
              [inEnum prop]

getAllowPixelUnits :: Options a0
                   -> IO Bool
getAllowPixelUnits =
  propertyGet "AllowPixelUnits"
              []
              outBool

setAllowPixelUnits :: Bool
                   -> Options a0
                   -> IO ()
setAllowPixelUnits prop =
  propertySet "AllowPixelUnits"
              [inBool prop]

getUseCharacterUnit :: Options a0
                    -> IO Bool
getUseCharacterUnit =
  propertyGet "UseCharacterUnit"
              []
              outBool

setUseCharacterUnit :: Bool
                    -> Options a0
                    -> IO ()
setUseCharacterUnit prop =
  propertySet "UseCharacterUnit"
              [inBool prop]

getAllowCompoundNounProcessing :: Options a0
                               -> IO Bool
getAllowCompoundNounProcessing =
  propertyGet "AllowCompoundNounProcessing"
              []
              outBool

setAllowCompoundNounProcessing :: Bool
                               -> Options a0
                               -> IO ()
setAllowCompoundNounProcessing prop =
  propertySet "AllowCompoundNounProcessing"
              [inBool prop]

getAutoKeyboardSwitching :: Options a0
                         -> IO Bool
getAutoKeyboardSwitching =
  propertyGet "AutoKeyboardSwitching"
              []
              outBool

setAutoKeyboardSwitching :: Bool
                         -> Options a0
                         -> IO ()
setAutoKeyboardSwitching prop =
  propertySet "AutoKeyboardSwitching"
              [inBool prop]

getDocumentViewDirection :: Options a0
                         -> IO WdDocumentViewDirection
getDocumentViewDirection =
  propertyGet "DocumentViewDirection"
              []
              outEnum

setDocumentViewDirection :: WdDocumentViewDirection
                         -> Options a0
                         -> IO ()
setDocumentViewDirection prop =
  propertySet "DocumentViewDirection"
              [inEnum prop]

getArabicNumeral :: Options a0
                 -> IO WdArabicNumeral
getArabicNumeral =
  propertyGet "ArabicNumeral"
              []
              outEnum

setArabicNumeral :: WdArabicNumeral
                 -> Options a0
                 -> IO ()
setArabicNumeral prop =
  propertySet "ArabicNumeral"
              [inEnum prop]

getMonthNames :: Options a0
              -> IO WdMonthNames
getMonthNames =
  propertyGet "MonthNames"
              []
              outEnum

setMonthNames :: WdMonthNames
              -> Options a0
              -> IO ()
setMonthNames prop =
  propertySet "MonthNames"
              [inEnum prop]

getCursorMovement :: Options a0
                  -> IO WdCursorMovement
getCursorMovement =
  propertyGet "CursorMovement"
              []
              outEnum

setCursorMovement :: WdCursorMovement
                  -> Options a0
                  -> IO ()
setCursorMovement prop =
  propertySet "CursorMovement"
              [inEnum prop]

getVisualSelection :: Options a0
                   -> IO WdVisualSelection
getVisualSelection =
  propertyGet "VisualSelection"
              []
              outEnum

setVisualSelection :: WdVisualSelection
                   -> Options a0
                   -> IO ()
setVisualSelection prop =
  propertySet "VisualSelection"
              [inEnum prop]

getShowDiacritics :: Options a0
                  -> IO Bool
getShowDiacritics =
  propertyGet "ShowDiacritics"
              []
              outBool

setShowDiacritics :: Bool
                  -> Options a0
                  -> IO ()
setShowDiacritics prop =
  propertySet "ShowDiacritics"
              [inBool prop]

getShowControlCharacters :: Options a0
                         -> IO Bool
getShowControlCharacters =
  propertyGet "ShowControlCharacters"
              []
              outBool

setShowControlCharacters :: Bool
                         -> Options a0
                         -> IO ()
setShowControlCharacters prop =
  propertySet "ShowControlCharacters"
              [inBool prop]

getAddControlCharacters :: Options a0
                        -> IO Bool
getAddControlCharacters =
  propertyGet "AddControlCharacters"
              []
              outBool

setAddControlCharacters :: Bool
                        -> Options a0
                        -> IO ()
setAddControlCharacters prop =
  propertySet "AddControlCharacters"
              [inBool prop]

getAddBiDirectionalMarksWhenSavingTextFile :: Options a0
                                           -> IO Bool
getAddBiDirectionalMarksWhenSavingTextFile =
  propertyGet "AddBiDirectionalMarksWhenSavingTextFile"
              []
              outBool

setAddBiDirectionalMarksWhenSavingTextFile :: Bool
                                           -> Options a0
                                           -> IO ()
setAddBiDirectionalMarksWhenSavingTextFile prop =
  propertySet "AddBiDirectionalMarksWhenSavingTextFile"
              [inBool prop]

getStrictInitialAlefHamza :: Options a0
                          -> IO Bool
getStrictInitialAlefHamza =
  propertyGet "StrictInitialAlefHamza"
              []
              outBool

setStrictInitialAlefHamza :: Bool
                          -> Options a0
                          -> IO ()
setStrictInitialAlefHamza prop =
  propertySet "StrictInitialAlefHamza"
              [inBool prop]

getStrictFinalYaa :: Options a0
                  -> IO Bool
getStrictFinalYaa =
  propertyGet "StrictFinalYaa"
              []
              outBool

setStrictFinalYaa :: Bool
                  -> Options a0
                  -> IO ()
setStrictFinalYaa prop =
  propertySet "StrictFinalYaa"
              [inBool prop]

getHebrewMode :: Options a0
              -> IO WdHebSpellStart
getHebrewMode =
  propertyGet "HebrewMode"
              []
              outEnum

setHebrewMode :: WdHebSpellStart
              -> Options a0
              -> IO ()
setHebrewMode prop =
  propertySet "HebrewMode"
              [inEnum prop]

getArabicMode :: Options a0
              -> IO WdAraSpeller
getArabicMode =
  propertyGet "ArabicMode"
              []
              outEnum

setArabicMode :: WdAraSpeller
              -> Options a0
              -> IO ()
setArabicMode prop =
  propertySet "ArabicMode"
              [inEnum prop]

getAllowClickAndTypeMouse :: Options a0
                          -> IO Bool
getAllowClickAndTypeMouse =
  propertyGet "AllowClickAndTypeMouse"
              []
              outBool

setAllowClickAndTypeMouse :: Bool
                          -> Options a0
                          -> IO ()
setAllowClickAndTypeMouse prop =
  propertySet "AllowClickAndTypeMouse"
              [inBool prop]

getUseGermanSpellingReform :: Options a0
                           -> IO Bool
getUseGermanSpellingReform =
  propertyGet "UseGermanSpellingReform"
              []
              outBool

setUseGermanSpellingReform :: Bool
                           -> Options a0
                           -> IO ()
setUseGermanSpellingReform prop =
  propertySet "UseGermanSpellingReform"
              [inBool prop]

getInterpretHighAnsi :: Options a0
                     -> IO WdHighAnsiText
getInterpretHighAnsi =
  propertyGet "InterpretHighAnsi"
              []
              outEnum

setInterpretHighAnsi :: WdHighAnsiText
                     -> Options a0
                     -> IO ()
setInterpretHighAnsi prop =
  propertySet "InterpretHighAnsi"
              [inEnum prop]

getAddHebDoubleQuote :: Options a0
                     -> IO Bool
getAddHebDoubleQuote =
  propertyGet "AddHebDoubleQuote"
              []
              outBool

setAddHebDoubleQuote :: Bool
                     -> Options a0
                     -> IO ()
setAddHebDoubleQuote prop =
  propertySet "AddHebDoubleQuote"
              [inBool prop]

getUseDiffDiacColor :: Options a0
                    -> IO Bool
getUseDiffDiacColor =
  propertyGet "UseDiffDiacColor"
              []
              outBool

setUseDiffDiacColor :: Bool
                    -> Options a0
                    -> IO ()
setUseDiffDiacColor prop =
  propertySet "UseDiffDiacColor"
              [inBool prop]

getDiacriticColorVal :: Options a0
                     -> IO WdColor
getDiacriticColorVal =
  propertyGet "DiacriticColorVal"
              []
              outEnum

setDiacriticColorVal :: WdColor
                     -> Options a0
                     -> IO ()
setDiacriticColorVal prop =
  propertySet "DiacriticColorVal"
              [inEnum prop]

getOptimizeForWord97byDefault :: Options a0
                              -> IO Bool
getOptimizeForWord97byDefault =
  propertyGet "OptimizeForWord97byDefault"
              []
              outBool

setOptimizeForWord97byDefault :: Bool
                              -> Options a0
                              -> IO ()
setOptimizeForWord97byDefault prop =
  propertySet "OptimizeForWord97byDefault"
              [inBool prop]

getLocalNetworkFile :: Options a0
                    -> IO Bool
getLocalNetworkFile =
  propertyGet "LocalNetworkFile"
              []
              outBool

setLocalNetworkFile :: Bool
                    -> Options a0
                    -> IO ()
setLocalNetworkFile prop =
  propertySet "LocalNetworkFile"
              [inBool prop]

getTypeNReplace :: Options a0
                -> IO Bool
getTypeNReplace =
  propertyGet "TypeNReplace"
              []
              outBool

setTypeNReplace :: Bool
                -> Options a0
                -> IO ()
setTypeNReplace prop =
  propertySet "TypeNReplace"
              [inBool prop]

getSequenceCheck :: Options a0
                 -> IO Bool
getSequenceCheck =
  propertyGet "SequenceCheck"
              []
              outBool

setSequenceCheck :: Bool
                 -> Options a0
                 -> IO ()
setSequenceCheck prop =
  propertySet "SequenceCheck"
              [inBool prop]

getBackgroundOpen :: Options a0
                  -> IO Bool
getBackgroundOpen =
  propertyGet "BackgroundOpen"
              []
              outBool

setBackgroundOpen :: Bool
                  -> Options a0
                  -> IO ()
setBackgroundOpen prop =
  propertySet "BackgroundOpen"
              [inBool prop]

getDisableFeaturesbyDefault :: Options a0
                            -> IO Bool
getDisableFeaturesbyDefault =
  propertyGet "DisableFeaturesbyDefault"
              []
              outBool

setDisableFeaturesbyDefault :: Bool
                            -> Options a0
                            -> IO ()
setDisableFeaturesbyDefault prop =
  propertySet "DisableFeaturesbyDefault"
              [inBool prop]

getPasteAdjustWordSpacing :: Options a0
                          -> IO Bool
getPasteAdjustWordSpacing =
  propertyGet "PasteAdjustWordSpacing"
              []
              outBool

setPasteAdjustWordSpacing :: Bool
                          -> Options a0
                          -> IO ()
setPasteAdjustWordSpacing prop =
  propertySet "PasteAdjustWordSpacing"
              [inBool prop]

getPasteAdjustParagraphSpacing :: Options a0
                               -> IO Bool
getPasteAdjustParagraphSpacing =
  propertyGet "PasteAdjustParagraphSpacing"
              []
              outBool

setPasteAdjustParagraphSpacing :: Bool
                               -> Options a0
                               -> IO ()
setPasteAdjustParagraphSpacing prop =
  propertySet "PasteAdjustParagraphSpacing"
              [inBool prop]

getPasteAdjustTableFormatting :: Options a0
                              -> IO Bool
getPasteAdjustTableFormatting =
  propertyGet "PasteAdjustTableFormatting"
              []
              outBool

setPasteAdjustTableFormatting :: Bool
                              -> Options a0
                              -> IO ()
setPasteAdjustTableFormatting prop =
  propertySet "PasteAdjustTableFormatting"
              [inBool prop]

getPasteSmartStyleBehavior :: Options a0
                           -> IO Bool
getPasteSmartStyleBehavior =
  propertyGet "PasteSmartStyleBehavior"
              []
              outBool

setPasteSmartStyleBehavior :: Bool
                           -> Options a0
                           -> IO ()
setPasteSmartStyleBehavior prop =
  propertySet "PasteSmartStyleBehavior"
              [inBool prop]

getPasteMergeFromPPT :: Options a0
                     -> IO Bool
getPasteMergeFromPPT =
  propertyGet "PasteMergeFromPPT"
              []
              outBool

setPasteMergeFromPPT :: Bool
                     -> Options a0
                     -> IO ()
setPasteMergeFromPPT prop =
  propertySet "PasteMergeFromPPT"
              [inBool prop]

getPasteMergeFromXL :: Options a0
                    -> IO Bool
getPasteMergeFromXL =
  propertyGet "PasteMergeFromXL"
              []
              outBool

setPasteMergeFromXL :: Bool
                    -> Options a0
                    -> IO ()
setPasteMergeFromXL prop =
  propertySet "PasteMergeFromXL"
              [inBool prop]

getCtrlClickHyperlinkToOpen :: Options a0
                            -> IO Bool
getCtrlClickHyperlinkToOpen =
  propertyGet "CtrlClickHyperlinkToOpen"
              []
              outBool

setCtrlClickHyperlinkToOpen :: Bool
                            -> Options a0
                            -> IO ()
setCtrlClickHyperlinkToOpen prop =
  propertySet "CtrlClickHyperlinkToOpen"
              [inBool prop]

getPictureWrapType :: Options a0
                   -> IO WdWrapTypeMerged
getPictureWrapType =
  propertyGet "PictureWrapType"
              []
              outEnum

setPictureWrapType :: WdWrapTypeMerged
                   -> Options a0
                   -> IO ()
setPictureWrapType prop =
  propertySet "PictureWrapType"
              [inEnum prop]

getDisableFeaturesIntroducedAfterbyDefault :: Options a0
                                           -> IO WdDisableFeaturesIntroducedAfter
getDisableFeaturesIntroducedAfterbyDefault =
  propertyGet "DisableFeaturesIntroducedAfterbyDefault"
              []
              outEnum

setDisableFeaturesIntroducedAfterbyDefault :: WdDisableFeaturesIntroducedAfter
                                           -> Options a0
                                           -> IO ()
setDisableFeaturesIntroducedAfterbyDefault prop =
  propertySet "DisableFeaturesIntroducedAfterbyDefault"
              [inEnum prop]

getPasteSmartCutPaste :: Options a0
                      -> IO Bool
getPasteSmartCutPaste =
  propertyGet "PasteSmartCutPaste"
              []
              outBool

setPasteSmartCutPaste :: Bool
                      -> Options a0
                      -> IO ()
setPasteSmartCutPaste prop =
  propertySet "PasteSmartCutPaste"
              [inBool prop]

getDisplayPasteOptions :: Options a0
                       -> IO Bool
getDisplayPasteOptions =
  propertyGet "DisplayPasteOptions"
              []
              outBool

setDisplayPasteOptions :: Bool
                       -> Options a0
                       -> IO ()
setDisplayPasteOptions prop =
  propertySet "DisplayPasteOptions"
              [inBool prop]

getPromptUpdateStyle :: Options a0
                     -> IO Bool
getPromptUpdateStyle =
  propertyGet "PromptUpdateStyle"
              []
              outBool

setPromptUpdateStyle :: Bool
                     -> Options a0
                     -> IO ()
setPromptUpdateStyle prop =
  propertySet "PromptUpdateStyle"
              [inBool prop]

getDefaultEPostageApp :: Options a0
                      -> IO String
getDefaultEPostageApp =
  propertyGet "DefaultEPostageApp"
              []
              outString

setDefaultEPostageApp :: String
                      -> Options a0
                      -> IO ()
setDefaultEPostageApp prop =
  propertySet "DefaultEPostageApp"
              [inString prop]

getDefaultTextEncoding :: Options a0
                       -> IO MsoEncoding
getDefaultTextEncoding iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOpenEncoding methPtr iptr prop) 378 iptr
    doThenFree free readMsoEncoding prop

setDefaultTextEncoding :: MsoEncoding
                       -> Options a0
                       -> IO ()
setDefaultTextEncoding prop iptr =
  do
    prop <- marshallMsoEncoding prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setDefaultTextEncoding methPtr iptr prop) 379 iptr

foreign import stdcall "prim_Word_setDefaultTextEncoding" prim_Word_setDefaultTextEncoding :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getLabelSmartTags :: Options a0
                  -> IO Bool
getLabelSmartTags =
  propertyGet "LabelSmartTags"
              []
              outBool

setLabelSmartTags :: Bool
                  -> Options a0
                  -> IO ()
setLabelSmartTags prop =
  propertySet "LabelSmartTags"
              [inBool prop]

getDisplaySmartTagButtons :: Options a0
                          -> IO Bool
getDisplaySmartTagButtons =
  propertyGet "DisplaySmartTagButtons"
              []
              outBool

setDisplaySmartTagButtons :: Bool
                          -> Options a0
                          -> IO ()
setDisplaySmartTagButtons prop =
  propertySet "DisplaySmartTagButtons"
              [inBool prop]

getWarnBeforeSavingPrintingSendingMarkup :: Options a0
                                         -> IO Bool
getWarnBeforeSavingPrintingSendingMarkup =
  propertyGet "WarnBeforeSavingPrintingSendingMarkup"
              []
              outBool

setWarnBeforeSavingPrintingSendingMarkup :: Bool
                                         -> Options a0
                                         -> IO ()
setWarnBeforeSavingPrintingSendingMarkup prop =
  propertySet "WarnBeforeSavingPrintingSendingMarkup"
              [inBool prop]

getStoreRSIDOnSave :: Options a0
                   -> IO Bool
getStoreRSIDOnSave =
  propertyGet "StoreRSIDOnSave"
              []
              outBool

setStoreRSIDOnSave :: Bool
                   -> Options a0
                   -> IO ()
setStoreRSIDOnSave prop =
  propertySet "StoreRSIDOnSave"
              [inBool prop]

getShowFormatError :: Options a0
                   -> IO Bool
getShowFormatError =
  propertyGet "ShowFormatError"
              []
              outBool

setShowFormatError :: Bool
                   -> Options a0
                   -> IO ()
setShowFormatError prop =
  propertySet "ShowFormatError"
              [inBool prop]

getFormatScanning :: Options a0
                  -> IO Bool
getFormatScanning =
  propertyGet "FormatScanning"
              []
              outBool

setFormatScanning :: Bool
                  -> Options a0
                  -> IO ()
setFormatScanning prop =
  propertySet "FormatScanning"
              [inBool prop]

getPasteMergeLists :: Options a0
                   -> IO Bool
getPasteMergeLists =
  propertyGet "PasteMergeLists"
              []
              outBool

setPasteMergeLists :: Bool
                   -> Options a0
                   -> IO ()
setPasteMergeLists prop =
  propertySet "PasteMergeLists"
              [inBool prop]

getAutoCreateNewDrawings :: Options a0
                         -> IO Bool
getAutoCreateNewDrawings =
  propertyGet "AutoCreateNewDrawings"
              []
              outBool

setAutoCreateNewDrawings :: Bool
                         -> Options a0
                         -> IO ()
setAutoCreateNewDrawings prop =
  propertySet "AutoCreateNewDrawings"
              [inBool prop]

getSmartParaSelection :: Options a0
                      -> IO Bool
getSmartParaSelection =
  propertyGet "SmartParaSelection"
              []
              outBool

setSmartParaSelection :: Bool
                      -> Options a0
                      -> IO ()
setSmartParaSelection prop =
  propertySet "SmartParaSelection"
              [inBool prop]

getRevisionsBalloonPrintOrientation :: Options a0
                                    -> IO WdRevisionsBalloonPrintOrientation
getRevisionsBalloonPrintOrientation =
  propertyGet "RevisionsBalloonPrintOrientation"
              []
              outEnum

setRevisionsBalloonPrintOrientation :: WdRevisionsBalloonPrintOrientation
                                    -> Options a0
                                    -> IO ()
setRevisionsBalloonPrintOrientation prop =
  propertySet "RevisionsBalloonPrintOrientation"
              [inEnum prop]

getCommentsColor :: Options a0
                 -> IO WdColorIndex
getCommentsColor =
  propertyGet "CommentsColor"
              []
              outEnum

setCommentsColor :: WdColorIndex
                 -> Options a0
                 -> IO ()
setCommentsColor prop =
  propertySet "CommentsColor"
              [inEnum prop]

getPrintXMLTag :: Options a0
               -> IO Bool
getPrintXMLTag =
  propertyGet "PrintXMLTag"
              []
              outBool

setPrintXMLTag :: Bool
               -> Options a0
               -> IO ()
setPrintXMLTag prop =
  propertySet "PrintXMLTag"
              [inBool prop]

getPrintBackgrounds :: Options a0
                    -> IO Bool
getPrintBackgrounds =
  propertyGet "PrintBackgrounds"
              []
              outBool

setPrintBackgrounds :: Bool
                    -> Options a0
                    -> IO ()
setPrintBackgrounds prop =
  propertySet "PrintBackgrounds"
              [inBool prop]

getAllowReadingMode :: Options a0
                    -> IO Bool
getAllowReadingMode =
  propertyGet "AllowReadingMode"
              []
              outBool

setAllowReadingMode :: Bool
                    -> Options a0
                    -> IO ()
setAllowReadingMode prop =
  propertySet "AllowReadingMode"
              [inBool prop]

getShowMarkupOpenSave :: Options a0
                      -> IO Bool
getShowMarkupOpenSave =
  propertyGet "ShowMarkupOpenSave"
              []
              outBool

setShowMarkupOpenSave :: Bool
                      -> Options a0
                      -> IO ()
setShowMarkupOpenSave prop =
  propertySet "ShowMarkupOpenSave"
              [inBool prop]

getSmartCursoring :: Options a0
                  -> IO Bool
getSmartCursoring =
  propertyGet "SmartCursoring"
              []
              outBool

setSmartCursoring :: Bool
                  -> Options a0
                  -> IO ()
setSmartCursoring prop =
  propertySet "SmartCursoring"
              [inBool prop]

getMoveToTextMark :: Options a0
                  -> IO WdMoveToTextMark
getMoveToTextMark =
  propertyGet "MoveToTextMark"
              []
              outEnum

setMoveToTextMark :: WdMoveToTextMark
                  -> Options a0
                  -> IO ()
setMoveToTextMark prop =
  propertySet "MoveToTextMark"
              [inEnum prop]

getMoveFromTextMark :: Options a0
                    -> IO WdMoveFromTextMark
getMoveFromTextMark =
  propertyGet "MoveFromTextMark"
              []
              outEnum

setMoveFromTextMark :: WdMoveFromTextMark
                    -> Options a0
                    -> IO ()
setMoveFromTextMark prop =
  propertySet "MoveFromTextMark"
              [inEnum prop]

getBibliographyStyle :: Options a0
                     -> IO String
getBibliographyStyle =
  propertyGet "BibliographyStyle"
              []
              outString

setBibliographyStyle :: String
                     -> Options a0
                     -> IO ()
setBibliographyStyle prop =
  propertySet "BibliographyStyle"
              [inString prop]

getBibliographySort :: Options a0
                    -> IO String
getBibliographySort =
  propertyGet "BibliographySort"
              []
              outString

setBibliographySort :: String
                    -> Options a0
                    -> IO ()
setBibliographySort prop =
  propertySet "BibliographySort"
              [inString prop]

getInsertedCellColor :: Options a0
                     -> IO WdCellColor
getInsertedCellColor =
  propertyGet "InsertedCellColor"
              []
              outEnum

setInsertedCellColor :: WdCellColor
                     -> Options a0
                     -> IO ()
setInsertedCellColor prop =
  propertySet "InsertedCellColor"
              [inEnum prop]

getDeletedCellColor :: Options a0
                    -> IO WdCellColor
getDeletedCellColor =
  propertyGet "DeletedCellColor"
              []
              outEnum

setDeletedCellColor :: WdCellColor
                    -> Options a0
                    -> IO ()
setDeletedCellColor prop =
  propertySet "DeletedCellColor"
              [inEnum prop]

getMergedCellColor :: Options a0
                   -> IO WdCellColor
getMergedCellColor =
  propertyGet "MergedCellColor"
              []
              outEnum

setMergedCellColor :: WdCellColor
                   -> Options a0
                   -> IO ()
setMergedCellColor prop =
  propertySet "MergedCellColor"
              [inEnum prop]

getSplitCellColor :: Options a0
                  -> IO WdCellColor
getSplitCellColor =
  propertyGet "SplitCellColor"
              []
              outEnum

setSplitCellColor :: WdCellColor
                  -> Options a0
                  -> IO ()
setSplitCellColor prop =
  propertySet "SplitCellColor"
              [inEnum prop]

getShowSelectionFloaties :: Options a0
                         -> IO Bool
getShowSelectionFloaties =
  propertyGet "ShowSelectionFloaties"
              []
              outBool

setShowSelectionFloaties :: Bool
                         -> Options a0
                         -> IO ()
setShowSelectionFloaties prop =
  propertySet "ShowSelectionFloaties"
              [inBool prop]

getShowMenuFloaties :: Options a0
                    -> IO Bool
getShowMenuFloaties =
  propertyGet "ShowMenuFloaties"
              []
              outBool

setShowMenuFloaties :: Bool
                    -> Options a0
                    -> IO ()
setShowMenuFloaties prop =
  propertySet "ShowMenuFloaties"
              [inBool prop]

getShowDevTools :: Options a0
                -> IO Bool
getShowDevTools =
  propertyGet "ShowDevTools"
              []
              outBool

setShowDevTools :: Bool
                -> Options a0
                -> IO ()
setShowDevTools prop =
  propertySet "ShowDevTools"
              [inBool prop]

getEnableLivePreview :: Options a0
                     -> IO Bool
getEnableLivePreview =
  propertyGet "EnableLivePreview"
              []
              outBool

setEnableLivePreview :: Bool
                     -> Options a0
                     -> IO ()
setEnableLivePreview prop =
  propertySet "EnableLivePreview"
              [inBool prop]

getOMathAutoBuildUp :: Options a0
                    -> IO Bool
getOMathAutoBuildUp =
  propertyGet "OMathAutoBuildUp"
              []
              outBool

setOMathAutoBuildUp :: Bool
                    -> Options a0
                    -> IO ()
setOMathAutoBuildUp prop =
  propertySet "OMathAutoBuildUp"
              [inBool prop]

getAlwaysUseClearType :: Options a0
                      -> IO Bool
getAlwaysUseClearType =
  propertyGet "AlwaysUseClearType"
              []
              outBool

setAlwaysUseClearType :: Bool
                      -> Options a0
                      -> IO ()
setAlwaysUseClearType prop =
  propertySet "AlwaysUseClearType"
              [inBool prop]

getPasteFormatWithinDocument :: Options a0
                             -> IO WdPasteOptions
getPasteFormatWithinDocument =
  propertyGet "PasteFormatWithinDocument"
              []
              outEnum

setPasteFormatWithinDocument :: WdPasteOptions
                             -> Options a0
                             -> IO ()
setPasteFormatWithinDocument prop =
  propertySet "PasteFormatWithinDocument"
              [inEnum prop]

getPasteFormatBetweenDocuments :: Options a0
                               -> IO WdPasteOptions
getPasteFormatBetweenDocuments =
  propertyGet "PasteFormatBetweenDocuments"
              []
              outEnum

setPasteFormatBetweenDocuments :: WdPasteOptions
                               -> Options a0
                               -> IO ()
setPasteFormatBetweenDocuments prop =
  propertySet "PasteFormatBetweenDocuments"
              [inEnum prop]

getPasteFormatBetweenStyledDocuments :: Options a0
                                     -> IO WdPasteOptions
getPasteFormatBetweenStyledDocuments =
  propertyGet "PasteFormatBetweenStyledDocuments"
              []
              outEnum

setPasteFormatBetweenStyledDocuments :: WdPasteOptions
                                     -> Options a0
                                     -> IO ()
setPasteFormatBetweenStyledDocuments prop =
  propertySet "PasteFormatBetweenStyledDocuments"
              [inEnum prop]

getPasteFormatFromExternalSource :: Options a0
                                 -> IO WdPasteOptions
getPasteFormatFromExternalSource =
  propertyGet "PasteFormatFromExternalSource"
              []
              outEnum

setPasteFormatFromExternalSource :: WdPasteOptions
                                 -> Options a0
                                 -> IO ()
setPasteFormatFromExternalSource prop =
  propertySet "PasteFormatFromExternalSource"
              [inEnum prop]

getPasteOptionKeepBulletsAndNumbers :: Options a0
                                    -> IO Bool
getPasteOptionKeepBulletsAndNumbers =
  propertyGet "PasteOptionKeepBulletsAndNumbers"
              []
              outBool

setPasteOptionKeepBulletsAndNumbers :: Bool
                                    -> Options a0
                                    -> IO ()
setPasteOptionKeepBulletsAndNumbers prop =
  propertySet "PasteOptionKeepBulletsAndNumbers"
              [inBool prop]

getINSKeyForOvertype :: Options a0
                     -> IO Bool
getINSKeyForOvertype =
  propertyGet "INSKeyForOvertype"
              []
              outBool

setINSKeyForOvertype :: Bool
                     -> Options a0
                     -> IO ()
setINSKeyForOvertype prop =
  propertySet "INSKeyForOvertype"
              [inBool prop]

getRepeatWord :: Options a0
              -> IO Bool
getRepeatWord =
  propertyGet "RepeatWord"
              []
              outBool

setRepeatWord :: Bool
              -> Options a0
              -> IO ()
setRepeatWord prop =
  propertySet "RepeatWord"
              [inBool prop]

getFrenchReform :: Options a0
                -> IO WdFrenchSpeller
getFrenchReform =
  propertyGet "FrenchReform"
              []
              outEnum

setFrenchReform :: WdFrenchSpeller
                -> Options a0
                -> IO ()
setFrenchReform prop =
  propertySet "FrenchReform"
              [inEnum prop]

getContextualSpeller :: Options a0
                     -> IO Bool
getContextualSpeller =
  propertyGet "ContextualSpeller"
              []
              outBool

setContextualSpeller :: Bool
                     -> Options a0
                     -> IO ()
setContextualSpeller prop =
  propertySet "ContextualSpeller"
              [inBool prop]

getMoveToTextColor :: Options a0
                   -> IO WdColorIndex
getMoveToTextColor =
  propertyGet "MoveToTextColor"
              []
              outEnum

setMoveToTextColor :: WdColorIndex
                   -> Options a0
                   -> IO ()
setMoveToTextColor prop =
  propertySet "MoveToTextColor"
              [inEnum prop]

getMoveFromTextColor :: Options a0
                     -> IO WdColorIndex
getMoveFromTextColor =
  propertyGet "MoveFromTextColor"
              []
              outEnum

setMoveFromTextColor :: WdColorIndex
                     -> Options a0
                     -> IO ()
setMoveFromTextColor prop =
  propertySet "MoveFromTextColor"
              [inEnum prop]

getOMathCopyLF :: Options a0
               -> IO Bool
getOMathCopyLF =
  propertyGet "OMathCopyLF"
              []
              outBool

setOMathCopyLF :: Bool
               -> Options a0
               -> IO ()
setOMathCopyLF prop =
  propertySet "OMathCopyLF"
              [inBool prop]

getUseNormalStyleForList :: Options a0
                         -> IO Bool
getUseNormalStyleForList =
  propertyGet "UseNormalStyleForList"
              []
              outBool

setUseNormalStyleForList :: Bool
                         -> Options a0
                         -> IO ()
setUseNormalStyleForList prop =
  propertySet "UseNormalStyleForList"
              [inBool prop]

getAllowOpenInDraftView :: Options a0
                        -> IO Bool
getAllowOpenInDraftView =
  propertyGet "AllowOpenInDraftView"
              []
              outBool

setAllowOpenInDraftView :: Bool
                        -> Options a0
                        -> IO ()
setAllowOpenInDraftView prop =
  propertySet "AllowOpenInDraftView"
              [inBool prop]

getEnableLegacyIMEMode :: Options a0
                       -> IO Bool
getEnableLegacyIMEMode =
  propertyGet "EnableLegacyIMEMode"
              []
              outBool

setEnableLegacyIMEMode :: Bool
                       -> Options a0
                       -> IO ()
setEnableLegacyIMEMode prop =
  propertySet "EnableLegacyIMEMode"
              [inBool prop]

getDoNotPromptForConvert :: Options a0
                         -> IO Bool
getDoNotPromptForConvert =
  propertyGet "DoNotPromptForConvert"
              []
              outBool

setDoNotPromptForConvert :: Bool
                         -> Options a0
                         -> IO ()
setDoNotPromptForConvert prop =
  propertySet "DoNotPromptForConvert"
              [inBool prop]

getPrecisePositioning :: Options a0
                      -> IO Bool
getPrecisePositioning =
  propertyGet "PrecisePositioning"
              []
              outBool

setPrecisePositioning :: Bool
                      -> Options a0
                      -> IO ()
setPrecisePositioning prop =
  propertySet "PrecisePositioning"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface MailMessage
-- 
-- --------------------------------------------------
data MailMessage_ a = MailMessage__ 
type MailMessage a = IDispatch (MailMessage_ a)
iidMailMessage :: IID (MailMessage ())
iidMailMessage = mkIID "{000209BA-0000-0000-C000-000000000046}"

getApplication165 :: MailMessage a0
                  -> IO (Maybe Application)
getApplication165 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator165 :: MailMessage a0
              -> IO Int32
getCreator165 =
  propertyGet "Creator"
              []
              outInt32

getParent165 :: MailMessage a0
             -> IO (IDispatch ())
getParent165 =
  propertyGet "Parent"
              []
              outIDispatch

checkName :: MailMessage a0
          -> IO ()
checkName =
  method0 "CheckName"
          []

delete43 :: MailMessage a0
         -> IO ()
delete43 =
  method0 "Delete"
          []

displayMoveDialog :: MailMessage a0
                  -> IO ()
displayMoveDialog =
  method0 "DisplayMoveDialog"
          []

displayProperties :: MailMessage a0
                  -> IO ()
displayProperties =
  method0 "DisplayProperties"
          []

displaySelectNamesDialog :: MailMessage a0
                         -> IO ()
displaySelectNamesDialog =
  method0 "DisplaySelectNamesDialog"
          []

forward :: MailMessage a0
        -> IO ()
forward =
  method0 "Forward"
          []

goToNext1 :: MailMessage a0
          -> IO ()
goToNext1 =
  method0 "GoToNext"
          []

goToPrevious1 :: MailMessage a0
              -> IO ()
goToPrevious1 =
  method0 "GoToPrevious"
          []

reply0 :: MailMessage a0
       -> IO ()
reply0 =
  method0 "Reply"
          []

replyAll0 :: MailMessage a0
          -> IO ()
replyAll0 =
  method0 "ReplyAll"
          []

toggleHeader :: MailMessage a0
             -> IO ()
toggleHeader =
  method0 "ToggleHeader"
          []

-- --------------------------------------------------
-- 
-- interface ProofreadingErrors
-- 
-- --------------------------------------------------
data ProofreadingErrors_ a = ProofreadingErrors__ 
type ProofreadingErrors a = IDispatch (ProofreadingErrors_ a)
iidProofreadingErrors :: IID (ProofreadingErrors ())
iidProofreadingErrors =
  mkIID "{000209BB-0000-0000-C000-000000000046}"

getApplication166 :: ProofreadingErrors a0
                  -> IO (Maybe Application)
getApplication166 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator166 :: ProofreadingErrors a0
              -> IO Int32
getCreator166 =
  propertyGet "Creator"
              []
              outInt32

getParent166 :: ProofreadingErrors a0
             -> IO (IDispatch ())
getParent166 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum70 :: ProofreadingErrors a0
             -> IO (IUnknown ())
getNewEnum70 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount70 :: ProofreadingErrors a0
           -> IO Int32
getCount70 =
  propertyGet "Count"
              []
              outInt32

getType19 :: ProofreadingErrors a0
          -> IO WdProofreadingErrorType
getType19 =
  propertyGet "Type"
              []
              outEnum

item71 :: Int32
       -> ProofreadingErrors a0
       -> IO (Range ())
item71 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Mailer
-- 
-- --------------------------------------------------
data Mailer_ a = Mailer__ 
type Mailer a = IDispatch (Mailer_ a)
iidMailer :: IID (Mailer ())
iidMailer = mkIID "{000209BD-0000-0000-C000-000000000046}"

getApplication167 :: Mailer a0
                  -> IO (Maybe Application)
getApplication167 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator167 :: Mailer a0
              -> IO Int32
getCreator167 =
  propertyGet "Creator"
              []
              outInt32

getParent167 :: Mailer a0
             -> IO (IDispatch ())
getParent167 =
  propertyGet "Parent"
              []
              outIDispatch

getBCCRecipients :: (Variant a1)
                 => Mailer a0
                 -> IO a1
getBCCRecipients =
  propertyGet "BCCRecipients"
              []
              outVariant

setBCCRecipients :: (Variant a1)
                 => a1
                 -> Mailer a0
                 -> IO ()
setBCCRecipients prop =
  propertySet "BCCRecipients"
              [inVariant prop]

getCCRecipients :: (Variant a1)
                => Mailer a0
                -> IO a1
getCCRecipients =
  propertyGet "CCRecipients"
              []
              outVariant

setCCRecipients :: (Variant a1)
                => a1
                -> Mailer a0
                -> IO ()
setCCRecipients prop =
  propertySet "CCRecipients"
              [inVariant prop]

getRecipients0 :: (Variant a1)
               => Mailer a0
               -> IO a1
getRecipients0 =
  propertyGet "Recipients"
              []
              outVariant

setRecipients :: (Variant a1)
              => a1
              -> Mailer a0
              -> IO ()
setRecipients prop =
  propertySet "Recipients"
              [inVariant prop]

getEnclosures :: (Variant a1)
              => Mailer a0
              -> IO a1
getEnclosures =
  propertyGet "Enclosures"
              []
              outVariant

setEnclosures :: (Variant a1)
              => a1
              -> Mailer a0
              -> IO ()
setEnclosures prop =
  propertySet "Enclosures"
              [inVariant prop]

getSender :: Mailer a0
          -> IO String
getSender =
  propertyGet "Sender"
              []
              outString

getSendDateTime :: Mailer a0
                -> IO Int64
getSendDateTime =
  propertyGet "SendDateTime"
              []
              outDate

getReceived :: Mailer a0
            -> IO Bool
getReceived =
  propertyGet "Received"
              []
              outBool

getSubject1 :: Mailer a0
            -> IO String
getSubject1 =
  propertyGet "Subject"
              []
              outString

setSubject1 :: String
            -> Mailer a0
            -> IO ()
setSubject1 prop =
  propertySet "Subject"
              [inString prop]

-- --------------------------------------------------
-- 
-- interface WrapFormat
-- 
-- --------------------------------------------------
data WrapFormat_ a = WrapFormat__ 
type WrapFormat a = IDispatch (WrapFormat_ a)
iidWrapFormat :: IID (WrapFormat ())
iidWrapFormat = mkIID "{000209C3-0000-0000-C000-000000000046}"

getApplication168 :: WrapFormat a0
                  -> IO (Maybe Application)
getApplication168 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator168 :: WrapFormat a0
              -> IO Int32
getCreator168 =
  propertyGet "Creator"
              []
              outInt32

getParent168 :: WrapFormat a0
             -> IO (IDispatch ())
getParent168 =
  propertyGet "Parent"
              []
              outIDispatch

getType20 :: WrapFormat a0
          -> IO WdWrapType
getType20 =
  propertyGet "Type"
              []
              outEnum

setType1 :: WdWrapType
         -> WrapFormat a0
         -> IO ()
setType1 prop =
  propertySet "Type"
              [inEnum prop]

getSide :: WrapFormat a0
        -> IO WdWrapSideType
getSide =
  propertyGet "Side"
              []
              outEnum

setSide :: WdWrapSideType
        -> WrapFormat a0
        -> IO ()
setSide prop =
  propertySet "Side"
              [inEnum prop]

getDistanceTop0 :: WrapFormat a0
                -> IO Float
getDistanceTop0 =
  propertyGet "DistanceTop"
              []
              outFloat

setDistanceTop0 :: Float
                -> WrapFormat a0
                -> IO ()
setDistanceTop0 prop =
  propertySet "DistanceTop"
              [inFloat prop]

getDistanceBottom0 :: WrapFormat a0
                   -> IO Float
getDistanceBottom0 =
  propertyGet "DistanceBottom"
              []
              outFloat

setDistanceBottom0 :: Float
                   -> WrapFormat a0
                   -> IO ()
setDistanceBottom0 prop =
  propertySet "DistanceBottom"
              [inFloat prop]

getDistanceLeft0 :: WrapFormat a0
                 -> IO Float
getDistanceLeft0 =
  propertyGet "DistanceLeft"
              []
              outFloat

setDistanceLeft0 :: Float
                 -> WrapFormat a0
                 -> IO ()
setDistanceLeft0 prop =
  propertySet "DistanceLeft"
              [inFloat prop]

getDistanceRight0 :: WrapFormat a0
                  -> IO Float
getDistanceRight0 =
  propertyGet "DistanceRight"
              []
              outFloat

setDistanceRight0 :: Float
                  -> WrapFormat a0
                  -> IO ()
setDistanceRight0 prop =
  propertySet "DistanceRight"
              [inFloat prop]

getAllowOverlap0 :: WrapFormat a0
                 -> IO Int32
getAllowOverlap0 =
  propertyGet "AllowOverlap"
              []
              outInt32

setAllowOverlap0 :: Int32
                 -> WrapFormat a0
                 -> IO ()
setAllowOverlap0 prop =
  propertySet "AllowOverlap"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface HangulAndAlphabetExceptions
-- 
-- --------------------------------------------------
data HangulAndAlphabetExceptions_ a = HangulAndAlphabetExceptions__
                                        
type HangulAndAlphabetExceptions a = IDispatch (HangulAndAlphabetExceptions_ a)
iidHangulAndAlphabetExceptions :: IID (HangulAndAlphabetExceptions ())
iidHangulAndAlphabetExceptions =
  mkIID "{000209D1-0000-0000-C000-000000000046}"

getApplication169 :: HangulAndAlphabetExceptions a0
                  -> IO (Maybe Application)
getApplication169 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator169 :: HangulAndAlphabetExceptions a0
              -> IO Int32
getCreator169 =
  propertyGet "Creator"
              []
              outInt32

getParent169 :: HangulAndAlphabetExceptions a0
             -> IO (IDispatch ())
getParent169 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum71 :: HangulAndAlphabetExceptions a0
             -> IO (IUnknown ())
getNewEnum71 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount71 :: HangulAndAlphabetExceptions a0
           -> IO Int32
getCount71 =
  propertyGet "Count"
              []
              outInt32

item72 :: (Variant a1)
       => a1
       -> HangulAndAlphabetExceptions a0
       -> IO (HangulAndAlphabetException ())
item72 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add41 :: String
      -> HangulAndAlphabetExceptions a0
      -> IO (HangulAndAlphabetException ())
add41 name =
  function1 "Add"
            [inString name]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface HangulAndAlphabetException
-- 
-- --------------------------------------------------
data HangulAndAlphabetException_ a = HangulAndAlphabetException__ 
type HangulAndAlphabetException a = IDispatch (HangulAndAlphabetException_ a)
iidHangulAndAlphabetException :: IID (HangulAndAlphabetException ())
iidHangulAndAlphabetException =
  mkIID "{000209D2-0000-0000-C000-000000000046}"

getApplication170 :: HangulAndAlphabetException a0
                  -> IO (Maybe Application)
getApplication170 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator170 :: HangulAndAlphabetException a0
              -> IO Int32
getCreator170 =
  propertyGet "Creator"
              []
              outInt32

getParent170 :: HangulAndAlphabetException a0
             -> IO (IDispatch ())
getParent170 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex26 :: HangulAndAlphabetException a0
           -> IO Int32
getIndex26 =
  propertyGet "Index"
              []
              outInt32

getName33 :: HangulAndAlphabetException a0
          -> IO String
getName33 =
  propertyGet "Name"
              []
              outString

delete44 :: HangulAndAlphabetException a0
         -> IO ()
delete44 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Adjustments
-- 
-- --------------------------------------------------
data Adjustments_ a = Adjustments__ 
type Adjustments a = IDispatch (Adjustments_ a)
iidAdjustments :: IID (Adjustments ())
iidAdjustments = mkIID "{000209C4-0000-0000-C000-000000000046}"

getApplication171 :: Adjustments a0
                  -> IO (Maybe Application)
getApplication171 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator171 :: Adjustments a0
              -> IO Int32
getCreator171 =
  propertyGet "Creator"
              []
              outInt32

getParent171 :: Adjustments a0
             -> IO (IDispatch ())
getParent171 =
  propertyGet "Parent"
              []
              outIDispatch

getCount72 :: Adjustments a0
           -> IO Int32
getCount72 =
  propertyGet "Count"
              []
              outInt32

getItem :: Int32
        -> Adjustments a0
        -> IO Float
getItem index =
  propertyGet "Item"
              [inInt32 index]
              outFloat

setItem :: Int32
        -> Float
        -> Adjustments a0
        -> IO ()
setItem index prop =
  propertySet "Item"
              [ inInt32 index
              , inFloat prop
              ]

-- --------------------------------------------------
-- 
-- interface CalloutFormat
-- 
-- --------------------------------------------------
data CalloutFormat_ a = CalloutFormat__ 
type CalloutFormat a = IDispatch (CalloutFormat_ a)
iidCalloutFormat :: IID (CalloutFormat ())
iidCalloutFormat = mkIID "{000209C5-0000-0000-C000-000000000046}"

getApplication172 :: CalloutFormat a0
                  -> IO (Maybe Application)
getApplication172 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator172 :: CalloutFormat a0
              -> IO Int32
getCreator172 =
  propertyGet "Creator"
              []
              outInt32

getParent172 :: CalloutFormat a0
             -> IO (IDispatch ())
getParent172 =
  propertyGet "Parent"
              []
              outIDispatch

getAccent :: CalloutFormat a0
          -> IO MsoTriState
getAccent iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 10 iptr
    doThenFree free readMsoTriState prop

setAccent :: MsoTriState
          -> CalloutFormat a0
          -> IO ()
setAccent prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAccent methPtr iptr prop) 11 iptr

foreign import stdcall "prim_Word_setAccent" prim_Word_setAccent :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAngle :: CalloutFormat a0
         -> IO MsoCalloutAngleType
getAngle iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoCalloutAngleType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAngle methPtr iptr prop) 12 iptr
    doThenFree free readMsoCalloutAngleType prop

foreign import stdcall "dynamic" prim_Word_getAngle :: Ptr () -> Ptr () -> Ptr MsoCalloutAngleType -> IO Int32
setAngle :: MsoCalloutAngleType
         -> CalloutFormat a0
         -> IO ()
setAngle prop iptr =
  do
    prop <- marshallMsoCalloutAngleType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAngle methPtr iptr prop) 13 iptr

foreign import stdcall "prim_Word_setAngle" prim_Word_setAngle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAutoAttach :: CalloutFormat a0
              -> IO MsoTriState
getAutoAttach iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 14 iptr
    doThenFree free readMsoTriState prop

setAutoAttach :: MsoTriState
              -> CalloutFormat a0
              -> IO ()
setAutoAttach prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAutoAttach methPtr iptr prop) 15 iptr

foreign import stdcall "prim_Word_setAutoAttach" prim_Word_setAutoAttach :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAutoLength :: CalloutFormat a0
              -> IO MsoTriState
getAutoLength iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 16 iptr
    doThenFree free readMsoTriState prop

getBorder :: CalloutFormat a0
          -> IO MsoTriState
getBorder iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 17 iptr
    doThenFree free readMsoTriState prop

setBorder :: MsoTriState
          -> CalloutFormat a0
          -> IO ()
setBorder prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setBorder methPtr iptr prop) 18 iptr

foreign import stdcall "prim_Word_setBorder" prim_Word_setBorder :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getDrop :: CalloutFormat a0
        -> IO Float
getDrop =
  propertyGet "Drop"
              []
              outFloat

getDropType :: CalloutFormat a0
            -> IO MsoCalloutDropType
getDropType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoCalloutDropType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDropType methPtr iptr prop) 20 iptr
    doThenFree free readMsoCalloutDropType prop

foreign import stdcall "dynamic" prim_Word_getDropType :: Ptr () -> Ptr () -> Ptr MsoCalloutDropType -> IO Int32
getGap :: CalloutFormat a0
       -> IO Float
getGap =
  propertyGet "Gap"
              []
              outFloat

setGap :: Float
       -> CalloutFormat a0
       -> IO ()
setGap prop =
  propertySet "Gap"
              [inFloat prop]

getLength :: CalloutFormat a0
          -> IO Float
getLength =
  propertyGet "Length"
              []
              outFloat

getType21 :: CalloutFormat a0
          -> IO MsoCalloutType
getType21 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoCalloutType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType21 methPtr iptr prop) 24 iptr
    doThenFree free readMsoCalloutType prop

foreign import stdcall "dynamic" prim_Word_getType21 :: Ptr () -> Ptr () -> Ptr MsoCalloutType -> IO Int32
setType2 :: MsoCalloutType
         -> CalloutFormat a0
         -> IO ()
setType2 prop iptr =
  do
    prop <- marshallMsoCalloutType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setType2 methPtr iptr prop) 25 iptr

foreign import stdcall "prim_Word_setType2" prim_Word_setType2 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
automaticLength :: CalloutFormat a0
                -> IO ()
automaticLength =
  method0 "AutomaticLength"
          []

customDrop :: Float
           -> CalloutFormat a0
           -> IO ()
customDrop drop =
  method0 "CustomDrop"
          [inFloat drop]

customLength :: Float
             -> CalloutFormat a0
             -> IO ()
customLength length =
  method0 "CustomLength"
          [inFloat length]

presetDrop :: MsoCalloutDropType
           -> CalloutFormat a0
           -> IO ()
presetDrop dropType iptr =
  do
    dropType <- marshallMsoCalloutDropType dropType
    invokeAndCheck (\ methPtr iptr -> prim_Word_presetDrop methPtr iptr dropType) 29 iptr

foreign import stdcall "prim_Word_presetDrop" prim_Word_presetDrop :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface ColorFormat
-- 
-- --------------------------------------------------
data ColorFormat_ a = ColorFormat__ 
type ColorFormat a = IDispatch (ColorFormat_ a)
iidColorFormat :: IID (ColorFormat ())
iidColorFormat = mkIID "{000209C6-0000-0000-C000-000000000046}"

getApplication173 :: ColorFormat a0
                  -> IO (Maybe Application)
getApplication173 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator173 :: ColorFormat a0
              -> IO Int32
getCreator173 =
  propertyGet "Creator"
              []
              outInt32

getParent173 :: ColorFormat a0
             -> IO (IDispatch ())
getParent173 =
  propertyGet "Parent"
              []
              outIDispatch

getRGB :: ColorFormat a0
       -> IO Int32
getRGB =
  propertyGet "RGB"
              []
              outInt32

setRGB :: Int32
       -> ColorFormat a0
       -> IO ()
setRGB prop =
  propertySet "RGB"
              [inInt32 prop]

getSchemeColor :: ColorFormat a0
               -> IO Int32
getSchemeColor =
  propertyGet "SchemeColor"
              []
              outInt32

setSchemeColor :: Int32
               -> ColorFormat a0
               -> IO ()
setSchemeColor prop =
  propertySet "SchemeColor"
              [inInt32 prop]

getType22 :: ColorFormat a0
          -> IO MsoColorType
getType22 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType22 methPtr iptr prop) 14 iptr
    doThenFree free readMsoColorType prop

foreign import stdcall "dynamic" prim_Word_getType22 :: Ptr () -> Ptr () -> Ptr MsoColorType -> IO Int32
getName34 :: ColorFormat a0
          -> IO String
getName34 =
  propertyGet "Name"
              []
              outString

setName10 :: String
          -> ColorFormat a0
          -> IO ()
setName10 prop =
  propertySet "Name"
              [inString prop]

getTintAndShade :: ColorFormat a0
                -> IO Float
getTintAndShade =
  propertyGet "TintAndShade"
              []
              outFloat

setTintAndShade :: Float
                -> ColorFormat a0
                -> IO ()
setTintAndShade prop =
  propertySet "TintAndShade"
              [inFloat prop]

getOverPrint :: ColorFormat a0
             -> IO MsoTriState
getOverPrint iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 19 iptr
    doThenFree free readMsoTriState prop

setOverPrint :: MsoTriState
             -> ColorFormat a0
             -> IO ()
setOverPrint prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setOverPrint methPtr iptr prop) 20 iptr

foreign import stdcall "prim_Word_setOverPrint" prim_Word_setOverPrint :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getInk :: Int32
       -> ColorFormat a0
       -> IO Float
getInk index =
  propertyGet "Ink"
              [inInt32 index]
              outFloat

setInk :: Int32
       -> Float
       -> ColorFormat a0
       -> IO ()
setInk index prop =
  propertySet "Ink"
              [ inInt32 index
              , inFloat prop
              ]

getCyan :: ColorFormat a0
        -> IO Int32
getCyan =
  propertyGet "Cyan"
              []
              outInt32

setCyan :: Int32
        -> ColorFormat a0
        -> IO ()
setCyan prop =
  propertySet "Cyan"
              [inInt32 prop]

getMagenta :: ColorFormat a0
           -> IO Int32
getMagenta =
  propertyGet "Magenta"
              []
              outInt32

setMagenta :: Int32
           -> ColorFormat a0
           -> IO ()
setMagenta prop =
  propertySet "Magenta"
              [inInt32 prop]

getYellow :: ColorFormat a0
          -> IO Int32
getYellow =
  propertyGet "Yellow"
              []
              outInt32

setYellow :: Int32
          -> ColorFormat a0
          -> IO ()
setYellow prop =
  propertySet "Yellow"
              [inInt32 prop]

getBlack :: ColorFormat a0
         -> IO Int32
getBlack =
  propertyGet "Black"
              []
              outInt32

setBlack :: Int32
         -> ColorFormat a0
         -> IO ()
setBlack prop =
  propertySet "Black"
              [inInt32 prop]

setCMYK :: Int32
        -> Int32
        -> Int32
        -> Int32
        -> ColorFormat a0
        -> IO ()
setCMYK cyan magenta yellow black =
  method0 "SetCMYK"
          [ inInt32 cyan
          , inInt32 magenta
          , inInt32 yellow
          , inInt32 black
          ]

getObjectThemeColor :: ColorFormat a0
                    -> IO WdThemeColorIndex
getObjectThemeColor =
  propertyGet "ObjectThemeColor"
              []
              outEnum

setObjectThemeColor :: WdThemeColorIndex
                    -> ColorFormat a0
                    -> IO ()
setObjectThemeColor prop =
  propertySet "ObjectThemeColor"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface ConnectorFormat
-- 
-- --------------------------------------------------
data ConnectorFormat_ a = ConnectorFormat__ 
type ConnectorFormat a = IDispatch (ConnectorFormat_ a)
iidConnectorFormat :: IID (ConnectorFormat ())
iidConnectorFormat = mkIID "{000209C7-0000-0000-C000-000000000046}"

getApplication174 :: ConnectorFormat a0
                  -> IO (Maybe Application)
getApplication174 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator174 :: ConnectorFormat a0
              -> IO Int32
getCreator174 =
  propertyGet "Creator"
              []
              outInt32

getBeginConnected :: ConnectorFormat a0
                  -> IO MsoTriState
getBeginConnected iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 9 iptr
    doThenFree free readMsoTriState prop

getBeginConnectedShape :: ConnectorFormat a0
                       -> IO (Shape ())
getBeginConnectedShape =
  propertyGet "BeginConnectedShape"
              []
              outIDispatch

getBeginConnectionSite :: ConnectorFormat a0
                       -> IO Int32
getBeginConnectionSite =
  propertyGet "BeginConnectionSite"
              []
              outInt32

getEndConnected :: ConnectorFormat a0
                -> IO MsoTriState
getEndConnected iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 12 iptr
    doThenFree free readMsoTriState prop

getEndConnectedShape :: ConnectorFormat a0
                     -> IO (Shape ())
getEndConnectedShape =
  propertyGet "EndConnectedShape"
              []
              outIDispatch

getEndConnectionSite :: ConnectorFormat a0
                     -> IO Int32
getEndConnectionSite =
  propertyGet "EndConnectionSite"
              []
              outInt32

getParent174 :: ConnectorFormat a0
             -> IO (IDispatch ())
getParent174 =
  propertyGet "Parent"
              []
              outIDispatch

getType23 :: ConnectorFormat a0
          -> IO MsoConnectorType
getType23 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoConnectorType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType23 methPtr iptr prop) 16 iptr
    doThenFree free readMsoConnectorType prop

foreign import stdcall "dynamic" prim_Word_getType23 :: Ptr () -> Ptr () -> Ptr MsoConnectorType -> IO Int32
setType3 :: MsoConnectorType
         -> ConnectorFormat a0
         -> IO ()
setType3 prop iptr =
  do
    prop <- marshallMsoConnectorType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setType3 methPtr iptr prop) 17 iptr

foreign import stdcall "prim_Word_setType3" prim_Word_setType3 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
beginConnect :: Int32
             -> ConnectorFormat a0
             -> IO (Shape ())
beginConnect connectionSite =
  method1 "BeginConnect"
          [inInt32 connectionSite]
          outIDispatch

beginDisconnect :: ConnectorFormat a0
                -> IO ()
beginDisconnect =
  method0 "BeginDisconnect"
          []

endConnect :: Int32
           -> ConnectorFormat a0
           -> IO (Shape ())
endConnect connectionSite =
  method1 "EndConnect"
          [inInt32 connectionSite]
          outIDispatch

endDisconnect :: ConnectorFormat a0
              -> IO ()
endDisconnect =
  method0 "EndDisconnect"
          []

-- --------------------------------------------------
-- 
-- interface FillFormat
-- 
-- --------------------------------------------------
data FillFormat_ a = FillFormat__ 
type FillFormat a = IDispatch (FillFormat_ a)
iidFillFormat :: IID (FillFormat ())
iidFillFormat = mkIID "{000209C8-0000-0000-C000-000000000046}"

getApplication175 :: FillFormat a0
                  -> IO (Maybe Application)
getApplication175 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator175 :: FillFormat a0
              -> IO Int32
getCreator175 =
  propertyGet "Creator"
              []
              outInt32

getParent175 :: FillFormat a0
             -> IO (IDispatch ())
getParent175 =
  propertyGet "Parent"
              []
              outIDispatch

getBackColor :: FillFormat a0
             -> IO (ColorFormat ())
getBackColor =
  propertyGet "BackColor"
              []
              outIDispatch

getForeColor :: FillFormat a0
             -> IO (ColorFormat ())
getForeColor =
  propertyGet "ForeColor"
              []
              outIDispatch

getGradientColorType :: FillFormat a0
                     -> IO MsoGradientColorType
getGradientColorType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoGradientColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getGradientColorType methPtr iptr prop) 12 iptr
    doThenFree free readMsoGradientColorType prop

foreign import stdcall "dynamic" prim_Word_getGradientColorType :: Ptr () -> Ptr () -> Ptr MsoGradientColorType -> IO Int32
getGradientDegree :: FillFormat a0
                  -> IO Float
getGradientDegree =
  propertyGet "GradientDegree"
              []
              outFloat

getGradientStyle :: FillFormat a0
                 -> IO MsoGradientStyle
getGradientStyle iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoGradientStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getGradientStyle methPtr iptr prop) 14 iptr
    doThenFree free readMsoGradientStyle prop

foreign import stdcall "dynamic" prim_Word_getGradientStyle :: Ptr () -> Ptr () -> Ptr MsoGradientStyle -> IO Int32
getGradientVariant :: FillFormat a0
                   -> IO Int32
getGradientVariant =
  propertyGet "GradientVariant"
              []
              outInt32

getPattern :: FillFormat a0
           -> IO MsoPatternType
getPattern iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPatternType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPattern methPtr iptr prop) 16 iptr
    doThenFree free readMsoPatternType prop

foreign import stdcall "dynamic" prim_Word_getPattern :: Ptr () -> Ptr () -> Ptr MsoPatternType -> IO Int32
getPresetGradientType :: FillFormat a0
                      -> IO MsoPresetGradientType
getPresetGradientType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetGradientType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetGradientType methPtr iptr prop) 17 iptr
    doThenFree free readMsoPresetGradientType prop

foreign import stdcall "dynamic" prim_Word_getPresetGradientType :: Ptr () -> Ptr () -> Ptr MsoPresetGradientType -> IO Int32
getPresetTexture :: FillFormat a0
                 -> IO MsoPresetTexture
getPresetTexture iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetTexture)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetTexture methPtr iptr prop) 18 iptr
    doThenFree free readMsoPresetTexture prop

foreign import stdcall "dynamic" prim_Word_getPresetTexture :: Ptr () -> Ptr () -> Ptr MsoPresetTexture -> IO Int32
getTextureName :: FillFormat a0
               -> IO String
getTextureName =
  propertyGet "TextureName"
              []
              outString

getTextureType :: FillFormat a0
               -> IO MsoTextureType
getTextureType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTextureType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTextureType methPtr iptr prop) 20 iptr
    doThenFree free readMsoTextureType prop

foreign import stdcall "dynamic" prim_Word_getTextureType :: Ptr () -> Ptr () -> Ptr MsoTextureType -> IO Int32
getTransparency :: FillFormat a0
                -> IO Float
getTransparency =
  propertyGet "Transparency"
              []
              outFloat

setTransparency :: Float
                -> FillFormat a0
                -> IO ()
setTransparency prop =
  propertySet "Transparency"
              [inFloat prop]

getType24 :: FillFormat a0
          -> IO MsoFillType
getType24 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoFillType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType24 methPtr iptr prop) 23 iptr
    doThenFree free readMsoFillType prop

foreign import stdcall "dynamic" prim_Word_getType24 :: Ptr () -> Ptr () -> Ptr MsoFillType -> IO Int32
getVisible5 :: FillFormat a0
            -> IO MsoTriState
getVisible5 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 24 iptr
    doThenFree free readMsoTriState prop

setVisible5 :: MsoTriState
            -> FillFormat a0
            -> IO ()
setVisible5 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible5 methPtr iptr prop) 25 iptr

foreign import stdcall "prim_Word_setVisible5" prim_Word_setVisible5 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
background :: FillFormat a0
           -> IO ()
background =
  method0 "Background"
          []

oneColorGradient :: MsoGradientStyle
                 -> Int32
                 -> Float
                 -> FillFormat a0
                 -> IO ()
oneColorGradient style variant degree iptr =
  do
    style <- marshallMsoGradientStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Word_oneColorGradient methPtr iptr style variant degree) 27 iptr

foreign import stdcall "prim_Word_oneColorGradient" prim_Word_oneColorGradient :: Ptr () -> Ptr () -> Ptr () -> Int32 -> Float -> IO Int32
patterned :: MsoPatternType
          -> FillFormat a0
          -> IO ()
patterned pattern iptr =
  do
    pattern <- marshallMsoPatternType pattern
    invokeAndCheck (\ methPtr iptr -> prim_Word_patterned methPtr iptr pattern) 28 iptr

foreign import stdcall "prim_Word_patterned" prim_Word_patterned :: Ptr () -> Ptr () -> Ptr () -> IO Int32
presetGradient :: MsoGradientStyle
               -> Int32
               -> MsoPresetGradientType
               -> FillFormat a0
               -> IO ()
presetGradient style variant presetGradientType iptr =
  do
    style <- marshallMsoGradientStyle style
    presetGradientType <- marshallMsoPresetGradientType presetGradientType
    invokeAndCheck (\ methPtr iptr -> prim_Word_presetGradient methPtr iptr style variant presetGradientType) 29 iptr

foreign import stdcall "prim_Word_presetGradient" prim_Word_presetGradient :: Ptr () -> Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
presetTextured :: MsoPresetTexture
               -> FillFormat a0
               -> IO ()
presetTextured presetTexture iptr =
  do
    presetTexture <- marshallMsoPresetTexture presetTexture
    invokeAndCheck (\ methPtr iptr -> prim_Word_presetTextured methPtr iptr presetTexture) 30 iptr

foreign import stdcall "prim_Word_presetTextured" prim_Word_presetTextured :: Ptr () -> Ptr () -> Ptr () -> IO Int32
solid :: FillFormat a0
      -> IO ()
solid =
  method0 "Solid"
          []

twoColorGradient :: MsoGradientStyle
                 -> Int32
                 -> FillFormat a0
                 -> IO ()
twoColorGradient style variant iptr =
  do
    style <- marshallMsoGradientStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Word_twoColorGradient methPtr iptr style variant) 32 iptr

foreign import stdcall "prim_Word_twoColorGradient" prim_Word_twoColorGradient :: Ptr () -> Ptr () -> Ptr () -> Int32 -> IO Int32
userPicture :: String
            -> FillFormat a0
            -> IO ()
userPicture pictureFile =
  method0 "UserPicture"
          [inString pictureFile]

userTextured :: String
             -> FillFormat a0
             -> IO ()
userTextured textureFile =
  method0 "UserTextured"
          [inString textureFile]

-- --------------------------------------------------
-- 
-- interface FreeformBuilder
-- 
-- --------------------------------------------------
data FreeformBuilder_ a = FreeformBuilder__ 
type FreeformBuilder a = IDispatch (FreeformBuilder_ a)
iidFreeformBuilder :: IID (FreeformBuilder ())
iidFreeformBuilder = mkIID "{000209C9-0000-0000-C000-000000000046}"

getApplication176 :: FreeformBuilder a0
                  -> IO (Maybe Application)
getApplication176 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator176 :: FreeformBuilder a0
              -> IO Int32
getCreator176 =
  propertyGet "Creator"
              []
              outInt32

getParent176 :: FreeformBuilder a0
             -> IO (IDispatch ())
getParent176 =
  propertyGet "Parent"
              []
              outIDispatch

addNodes :: MsoSegmentType
         -> MsoEditingType
         -> Float
         -> Float
         -> Float
         -> Float
         -> Float
         -> Float
         -> FreeformBuilder a0
         -> IO ()
addNodes segmentType editingType x1 y1 x2 y2 x3 y3 iptr =
  do
    segmentType <- marshallMsoSegmentType segmentType
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Word_addNodes methPtr iptr segmentType editingType x1 y1 x2 y2 x3 y3) 10 iptr

foreign import stdcall "prim_Word_addNodes" prim_Word_addNodes :: Ptr () -> Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Float -> Float -> IO Int32
convertToShape0 :: (Variant a1)
                => a1
                -> FreeformBuilder a0
                -> IO (Shape ())
convertToShape0 anchor =
  function1 "ConvertToShape"
            [inVariant anchor]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface LineFormat
-- 
-- --------------------------------------------------
data LineFormat_ a = LineFormat__ 
type LineFormat a = IDispatch (LineFormat_ a)
iidLineFormat :: IID (LineFormat ())
iidLineFormat = mkIID "{000209CA-0000-0000-C000-000000000046}"

getApplication177 :: LineFormat a0
                  -> IO (Maybe Application)
getApplication177 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator177 :: LineFormat a0
              -> IO Int32
getCreator177 =
  propertyGet "Creator"
              []
              outInt32

getParent177 :: LineFormat a0
             -> IO (IDispatch ())
getParent177 =
  propertyGet "Parent"
              []
              outIDispatch

getBackColor0 :: LineFormat a0
              -> IO (ColorFormat ())
getBackColor0 =
  propertyGet "BackColor"
              []
              outIDispatch

getBeginArrowheadLength :: LineFormat a0
                        -> IO MsoArrowheadLength
getBeginArrowheadLength iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoArrowheadLength)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBeginArrowheadLength methPtr iptr prop) 11 iptr
    doThenFree free readMsoArrowheadLength prop

foreign import stdcall "dynamic" prim_Word_getBeginArrowheadLength :: Ptr () -> Ptr () -> Ptr MsoArrowheadLength -> IO Int32
setBeginArrowheadLength :: MsoArrowheadLength
                        -> LineFormat a0
                        -> IO ()
setBeginArrowheadLength prop iptr =
  do
    prop <- marshallMsoArrowheadLength prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setBeginArrowheadLength methPtr iptr prop) 12 iptr

foreign import stdcall "prim_Word_setBeginArrowheadLength" prim_Word_setBeginArrowheadLength :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBeginArrowheadStyle :: LineFormat a0
                       -> IO MsoArrowheadStyle
getBeginArrowheadStyle iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoArrowheadStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBeginArrowheadStyle methPtr iptr prop) 13 iptr
    doThenFree free readMsoArrowheadStyle prop

foreign import stdcall "dynamic" prim_Word_getBeginArrowheadStyle :: Ptr () -> Ptr () -> Ptr MsoArrowheadStyle -> IO Int32
setBeginArrowheadStyle :: MsoArrowheadStyle
                       -> LineFormat a0
                       -> IO ()
setBeginArrowheadStyle prop iptr =
  do
    prop <- marshallMsoArrowheadStyle prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setBeginArrowheadStyle methPtr iptr prop) 14 iptr

foreign import stdcall "prim_Word_setBeginArrowheadStyle" prim_Word_setBeginArrowheadStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBeginArrowheadWidth :: LineFormat a0
                       -> IO MsoArrowheadWidth
getBeginArrowheadWidth iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoArrowheadWidth)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBeginArrowheadWidth methPtr iptr prop) 15 iptr
    doThenFree free readMsoArrowheadWidth prop

foreign import stdcall "dynamic" prim_Word_getBeginArrowheadWidth :: Ptr () -> Ptr () -> Ptr MsoArrowheadWidth -> IO Int32
setBeginArrowheadWidth :: MsoArrowheadWidth
                       -> LineFormat a0
                       -> IO ()
setBeginArrowheadWidth prop iptr =
  do
    prop <- marshallMsoArrowheadWidth prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setBeginArrowheadWidth methPtr iptr prop) 16 iptr

foreign import stdcall "prim_Word_setBeginArrowheadWidth" prim_Word_setBeginArrowheadWidth :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getDashStyle :: LineFormat a0
             -> IO MsoLineDashStyle
getDashStyle iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoLineDashStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getDashStyle methPtr iptr prop) 17 iptr
    doThenFree free readMsoLineDashStyle prop

foreign import stdcall "dynamic" prim_Word_getDashStyle :: Ptr () -> Ptr () -> Ptr MsoLineDashStyle -> IO Int32
setDashStyle :: MsoLineDashStyle
             -> LineFormat a0
             -> IO ()
setDashStyle prop iptr =
  do
    prop <- marshallMsoLineDashStyle prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setDashStyle methPtr iptr prop) 18 iptr

foreign import stdcall "prim_Word_setDashStyle" prim_Word_setDashStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getEndArrowheadLength :: LineFormat a0
                      -> IO MsoArrowheadLength
getEndArrowheadLength iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoArrowheadLength)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBeginArrowheadLength methPtr iptr prop) 19 iptr
    doThenFree free readMsoArrowheadLength prop

setEndArrowheadLength :: MsoArrowheadLength
                      -> LineFormat a0
                      -> IO ()
setEndArrowheadLength prop iptr =
  do
    prop <- marshallMsoArrowheadLength prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setEndArrowheadLength methPtr iptr prop) 20 iptr

foreign import stdcall "prim_Word_setEndArrowheadLength" prim_Word_setEndArrowheadLength :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getEndArrowheadStyle :: LineFormat a0
                     -> IO MsoArrowheadStyle
getEndArrowheadStyle iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoArrowheadStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBeginArrowheadStyle methPtr iptr prop) 21 iptr
    doThenFree free readMsoArrowheadStyle prop

setEndArrowheadStyle :: MsoArrowheadStyle
                     -> LineFormat a0
                     -> IO ()
setEndArrowheadStyle prop iptr =
  do
    prop <- marshallMsoArrowheadStyle prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setEndArrowheadStyle methPtr iptr prop) 22 iptr

foreign import stdcall "prim_Word_setEndArrowheadStyle" prim_Word_setEndArrowheadStyle :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getEndArrowheadWidth :: LineFormat a0
                     -> IO MsoArrowheadWidth
getEndArrowheadWidth iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoArrowheadWidth)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBeginArrowheadWidth methPtr iptr prop) 23 iptr
    doThenFree free readMsoArrowheadWidth prop

setEndArrowheadWidth :: MsoArrowheadWidth
                     -> LineFormat a0
                     -> IO ()
setEndArrowheadWidth prop iptr =
  do
    prop <- marshallMsoArrowheadWidth prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setEndArrowheadWidth methPtr iptr prop) 24 iptr

foreign import stdcall "prim_Word_setEndArrowheadWidth" prim_Word_setEndArrowheadWidth :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getForeColor0 :: LineFormat a0
              -> IO (ColorFormat ())
getForeColor0 =
  propertyGet "ForeColor"
              []
              outIDispatch

getPattern0 :: LineFormat a0
            -> IO MsoPatternType
getPattern0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPatternType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPattern methPtr iptr prop) 26 iptr
    doThenFree free readMsoPatternType prop

setPattern :: MsoPatternType
           -> LineFormat a0
           -> IO ()
setPattern prop iptr =
  do
    prop <- marshallMsoPatternType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPattern methPtr iptr prop) 27 iptr

foreign import stdcall "prim_Word_setPattern" prim_Word_setPattern :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getStyle9 :: LineFormat a0
          -> IO MsoLineStyle
getStyle9 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoLineStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getStyle9 methPtr iptr prop) 28 iptr
    doThenFree free readMsoLineStyle prop

foreign import stdcall "dynamic" prim_Word_getStyle9 :: Ptr () -> Ptr () -> Ptr MsoLineStyle -> IO Int32
setStyle8 :: MsoLineStyle
          -> LineFormat a0
          -> IO ()
setStyle8 prop iptr =
  do
    prop <- marshallMsoLineStyle prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setStyle8 methPtr iptr prop) 29 iptr

foreign import stdcall "prim_Word_setStyle8" prim_Word_setStyle8 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTransparency0 :: LineFormat a0
                 -> IO Float
getTransparency0 =
  propertyGet "Transparency"
              []
              outFloat

setTransparency0 :: Float
                 -> LineFormat a0
                 -> IO ()
setTransparency0 prop =
  propertySet "Transparency"
              [inFloat prop]

getVisible6 :: LineFormat a0
            -> IO MsoTriState
getVisible6 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 32 iptr
    doThenFree free readMsoTriState prop

setVisible6 :: MsoTriState
            -> LineFormat a0
            -> IO ()
setVisible6 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible6 methPtr iptr prop) 33 iptr

foreign import stdcall "prim_Word_setVisible6" prim_Word_setVisible6 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getWeight :: LineFormat a0
          -> IO Float
getWeight =
  propertyGet "Weight"
              []
              outFloat

setWeight :: Float
          -> LineFormat a0
          -> IO ()
setWeight prop =
  propertySet "Weight"
              [inFloat prop]

getInsetPen :: LineFormat a0
            -> IO MsoTriState
getInsetPen iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 36 iptr
    doThenFree free readMsoTriState prop

setInsetPen :: MsoTriState
            -> LineFormat a0
            -> IO ()
setInsetPen prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setInsetPen methPtr iptr prop) 37 iptr

foreign import stdcall "prim_Word_setInsetPen" prim_Word_setInsetPen :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface PictureFormat
-- 
-- --------------------------------------------------
data PictureFormat_ a = PictureFormat__ 
type PictureFormat a = IDispatch (PictureFormat_ a)
iidPictureFormat :: IID (PictureFormat ())
iidPictureFormat = mkIID "{000209CB-0000-0000-C000-000000000046}"

getApplication178 :: PictureFormat a0
                  -> IO (Maybe Application)
getApplication178 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator178 :: PictureFormat a0
              -> IO Int32
getCreator178 =
  propertyGet "Creator"
              []
              outInt32

getParent178 :: PictureFormat a0
             -> IO (IDispatch ())
getParent178 =
  propertyGet "Parent"
              []
              outIDispatch

getBrightness :: PictureFormat a0
              -> IO Float
getBrightness =
  propertyGet "Brightness"
              []
              outFloat

setBrightness :: Float
              -> PictureFormat a0
              -> IO ()
setBrightness prop =
  propertySet "Brightness"
              [inFloat prop]

getColorType :: PictureFormat a0
             -> IO MsoPictureColorType
getColorType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPictureColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getColorType methPtr iptr prop) 12 iptr
    doThenFree free readMsoPictureColorType prop

foreign import stdcall "dynamic" prim_Word_getColorType :: Ptr () -> Ptr () -> Ptr MsoPictureColorType -> IO Int32
setColorType :: MsoPictureColorType
             -> PictureFormat a0
             -> IO ()
setColorType prop iptr =
  do
    prop <- marshallMsoPictureColorType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setColorType methPtr iptr prop) 13 iptr

foreign import stdcall "prim_Word_setColorType" prim_Word_setColorType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getContrast :: PictureFormat a0
            -> IO Float
getContrast =
  propertyGet "Contrast"
              []
              outFloat

setContrast :: Float
            -> PictureFormat a0
            -> IO ()
setContrast prop =
  propertySet "Contrast"
              [inFloat prop]

getCropBottom :: PictureFormat a0
              -> IO Float
getCropBottom =
  propertyGet "CropBottom"
              []
              outFloat

setCropBottom :: Float
              -> PictureFormat a0
              -> IO ()
setCropBottom prop =
  propertySet "CropBottom"
              [inFloat prop]

getCropLeft :: PictureFormat a0
            -> IO Float
getCropLeft =
  propertyGet "CropLeft"
              []
              outFloat

setCropLeft :: Float
            -> PictureFormat a0
            -> IO ()
setCropLeft prop =
  propertySet "CropLeft"
              [inFloat prop]

getCropRight :: PictureFormat a0
             -> IO Float
getCropRight =
  propertyGet "CropRight"
              []
              outFloat

setCropRight :: Float
             -> PictureFormat a0
             -> IO ()
setCropRight prop =
  propertySet "CropRight"
              [inFloat prop]

getCropTop :: PictureFormat a0
           -> IO Float
getCropTop =
  propertyGet "CropTop"
              []
              outFloat

setCropTop :: Float
           -> PictureFormat a0
           -> IO ()
setCropTop prop =
  propertySet "CropTop"
              [inFloat prop]

getTransparencyColor :: PictureFormat a0
                     -> IO Int32
getTransparencyColor =
  propertyGet "TransparencyColor"
              []
              outInt32

setTransparencyColor :: Int32
                     -> PictureFormat a0
                     -> IO ()
setTransparencyColor prop =
  propertySet "TransparencyColor"
              [inInt32 prop]

getTransparentBackground :: PictureFormat a0
                         -> IO MsoTriState
getTransparentBackground iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 26 iptr
    doThenFree free readMsoTriState prop

setTransparentBackground :: MsoTriState
                         -> PictureFormat a0
                         -> IO ()
setTransparentBackground prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setTransparentBackground methPtr iptr prop) 27 iptr

foreign import stdcall "prim_Word_setTransparentBackground" prim_Word_setTransparentBackground :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementBrightness :: Float
                    -> PictureFormat a0
                    -> IO ()
incrementBrightness increment =
  method0 "IncrementBrightness"
          [inFloat increment]

incrementContrast :: Float
                  -> PictureFormat a0
                  -> IO ()
incrementContrast increment =
  method0 "IncrementContrast"
          [inFloat increment]

-- --------------------------------------------------
-- 
-- interface ShadowFormat
-- 
-- --------------------------------------------------
data ShadowFormat_ a = ShadowFormat__ 
type ShadowFormat a = IDispatch (ShadowFormat_ a)
iidShadowFormat :: IID (ShadowFormat ())
iidShadowFormat = mkIID "{000209CC-0000-0000-C000-000000000046}"

getApplication179 :: ShadowFormat a0
                  -> IO (Maybe Application)
getApplication179 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator179 :: ShadowFormat a0
              -> IO Int32
getCreator179 =
  propertyGet "Creator"
              []
              outInt32

getParent179 :: ShadowFormat a0
             -> IO (IDispatch ())
getParent179 =
  propertyGet "Parent"
              []
              outIDispatch

getForeColor1 :: ShadowFormat a0
              -> IO (ColorFormat ())
getForeColor1 =
  propertyGet "ForeColor"
              []
              outIDispatch

getObscured :: ShadowFormat a0
            -> IO MsoTriState
getObscured iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 11 iptr
    doThenFree free readMsoTriState prop

setObscured :: MsoTriState
            -> ShadowFormat a0
            -> IO ()
setObscured prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setObscured methPtr iptr prop) 12 iptr

foreign import stdcall "prim_Word_setObscured" prim_Word_setObscured :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getOffsetX :: ShadowFormat a0
           -> IO Float
getOffsetX =
  propertyGet "OffsetX"
              []
              outFloat

setOffsetX :: Float
           -> ShadowFormat a0
           -> IO ()
setOffsetX prop =
  propertySet "OffsetX"
              [inFloat prop]

getOffsetY :: ShadowFormat a0
           -> IO Float
getOffsetY =
  propertyGet "OffsetY"
              []
              outFloat

setOffsetY :: Float
           -> ShadowFormat a0
           -> IO ()
setOffsetY prop =
  propertySet "OffsetY"
              [inFloat prop]

getTransparency1 :: ShadowFormat a0
                 -> IO Float
getTransparency1 =
  propertyGet "Transparency"
              []
              outFloat

setTransparency1 :: Float
                 -> ShadowFormat a0
                 -> IO ()
setTransparency1 prop =
  propertySet "Transparency"
              [inFloat prop]

getType25 :: ShadowFormat a0
          -> IO MsoShadowType
getType25 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoShadowType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType25 methPtr iptr prop) 19 iptr
    doThenFree free readMsoShadowType prop

foreign import stdcall "dynamic" prim_Word_getType25 :: Ptr () -> Ptr () -> Ptr MsoShadowType -> IO Int32
setType4 :: MsoShadowType
         -> ShadowFormat a0
         -> IO ()
setType4 prop iptr =
  do
    prop <- marshallMsoShadowType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setType4 methPtr iptr prop) 20 iptr

foreign import stdcall "prim_Word_setType4" prim_Word_setType4 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getVisible7 :: ShadowFormat a0
            -> IO MsoTriState
getVisible7 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 21 iptr
    doThenFree free readMsoTriState prop

setVisible7 :: MsoTriState
            -> ShadowFormat a0
            -> IO ()
setVisible7 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible7 methPtr iptr prop) 22 iptr

foreign import stdcall "prim_Word_setVisible7" prim_Word_setVisible7 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementOffsetX :: Float
                 -> ShadowFormat a0
                 -> IO ()
incrementOffsetX increment =
  method0 "IncrementOffsetX"
          [inFloat increment]

incrementOffsetY :: Float
                 -> ShadowFormat a0
                 -> IO ()
incrementOffsetY increment =
  method0 "IncrementOffsetY"
          [inFloat increment]

getStyle10 :: ShadowFormat a0
           -> IO MsoShadowStyle
getStyle10 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoShadowStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getStyle10 methPtr iptr prop) 25 iptr
    doThenFree free readMsoShadowStyle prop

foreign import stdcall "dynamic" prim_Word_getStyle10 :: Ptr () -> Ptr () -> Ptr MsoShadowStyle -> IO Int32
setStyle9 :: MsoShadowStyle
          -> ShadowFormat a0
          -> IO ()
setStyle9 prop iptr =
  do
    prop <- marshallMsoShadowStyle prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setStyle9 methPtr iptr prop) 26 iptr

foreign import stdcall "prim_Word_setStyle9" prim_Word_setStyle9 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBlur :: ShadowFormat a0
        -> IO Float
getBlur =
  propertyGet "Blur"
              []
              outFloat

setBlur :: Float
        -> ShadowFormat a0
        -> IO ()
setBlur prop =
  propertySet "Blur"
              [inFloat prop]

getSize1 :: ShadowFormat a0
         -> IO Float
getSize1 =
  propertyGet "Size"
              []
              outFloat

setSize1 :: Float
         -> ShadowFormat a0
         -> IO ()
setSize1 prop =
  propertySet "Size"
              [inFloat prop]

getRotateWithShape :: ShadowFormat a0
                   -> IO MsoTriState
getRotateWithShape iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 31 iptr
    doThenFree free readMsoTriState prop

setRotateWithShape :: MsoTriState
                   -> ShadowFormat a0
                   -> IO ()
setRotateWithShape prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setRotateWithShape methPtr iptr prop) 32 iptr

foreign import stdcall "prim_Word_setRotateWithShape" prim_Word_setRotateWithShape :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface ShapeNode
-- 
-- --------------------------------------------------
data ShapeNode_ a = ShapeNode__ 
type ShapeNode a = IDispatch (ShapeNode_ a)
iidShapeNode :: IID (ShapeNode ())
iidShapeNode = mkIID "{000209CD-0000-0000-C000-000000000046}"

getApplication180 :: ShapeNode a0
                  -> IO (Maybe Application)
getApplication180 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator180 :: ShapeNode a0
              -> IO Int32
getCreator180 =
  propertyGet "Creator"
              []
              outInt32

getParent180 :: ShapeNode a0
             -> IO (IDispatch ())
getParent180 =
  propertyGet "Parent"
              []
              outIDispatch

getEditingType :: ShapeNode a0
               -> IO MsoEditingType
getEditingType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEditingType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getEditingType methPtr iptr prop) 10 iptr
    doThenFree free readMsoEditingType prop

foreign import stdcall "dynamic" prim_Word_getEditingType :: Ptr () -> Ptr () -> Ptr MsoEditingType -> IO Int32
getPoints :: (Variant a1)
          => ShapeNode a0
          -> IO a1
getPoints =
  propertyGet "Points"
              []
              outVariant

getSegmentType :: ShapeNode a0
               -> IO MsoSegmentType
getSegmentType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoSegmentType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getSegmentType methPtr iptr prop) 12 iptr
    doThenFree free readMsoSegmentType prop

foreign import stdcall "dynamic" prim_Word_getSegmentType :: Ptr () -> Ptr () -> Ptr MsoSegmentType -> IO Int32
-- --------------------------------------------------
-- 
-- interface ShapeNodes
-- 
-- --------------------------------------------------
data ShapeNodes_ a = ShapeNodes__ 
type ShapeNodes a = IDispatch (ShapeNodes_ a)
iidShapeNodes :: IID (ShapeNodes ())
iidShapeNodes = mkIID "{000209CE-0000-0000-C000-000000000046}"

getApplication181 :: ShapeNodes a0
                  -> IO (Maybe Application)
getApplication181 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator181 :: ShapeNodes a0
              -> IO Int32
getCreator181 =
  propertyGet "Creator"
              []
              outInt32

getParent181 :: ShapeNodes a0
             -> IO (IDispatch ())
getParent181 =
  propertyGet "Parent"
              []
              outIDispatch

getCount73 :: ShapeNodes a0
           -> IO Int32
getCount73 =
  propertyGet "Count"
              []
              outInt32

getNewEnum72 :: ShapeNodes a0
             -> IO (IUnknown ())
getNewEnum72 =
  propertyGet "_NewEnum"
              []
              outIUnknown

delete45 :: Int32
         -> ShapeNodes a0
         -> IO ()
delete45 index =
  method0 "Delete"
          [inInt32 index]

item73 :: (Variant a1)
       => a1
       -> ShapeNodes a0
       -> IO (ShapeNode ())
item73 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

setEditingType :: Int32
               -> MsoEditingType
               -> ShapeNodes a0
               -> IO ()
setEditingType index editingType iptr =
  do
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Word_setEditingType methPtr iptr index editingType) 14 iptr

foreign import stdcall "prim_Word_setEditingType" prim_Word_setEditingType :: Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
setPosition3 :: Int32
             -> Float
             -> Float
             -> ShapeNodes a0
             -> IO ()
setPosition3 index x1 y1 =
  method0 "SetPosition"
          [ inInt32 index
          , inFloat x1
          , inFloat y1
          ]

setSegmentType :: Int32
               -> MsoSegmentType
               -> ShapeNodes a0
               -> IO ()
setSegmentType index segmentType iptr =
  do
    segmentType <- marshallMsoSegmentType segmentType
    invokeAndCheck (\ methPtr iptr -> prim_Word_setSegmentType methPtr iptr index segmentType) 16 iptr

foreign import stdcall "prim_Word_setSegmentType" prim_Word_setSegmentType :: Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
insert1 :: Int32
        -> MsoSegmentType
        -> MsoEditingType
        -> Float
        -> Float
        -> Float
        -> Float
        -> Float
        -> Float
        -> ShapeNodes a0
        -> IO ()
insert1 index segmentType editingType x1 y1 x2 y2 x3 y3 iptr =
  do
    segmentType <- marshallMsoSegmentType segmentType
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Word_insert1 methPtr iptr index segmentType editingType x1 y1 x2 y2 x3 y3) 17 iptr

foreign import stdcall "prim_Word_insert1" prim_Word_insert1 :: Ptr () -> Ptr () -> Int32 -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Float -> Float -> IO Int32
-- --------------------------------------------------
-- 
-- interface TextEffectFormat
-- 
-- --------------------------------------------------
data TextEffectFormat_ a = TextEffectFormat__ 
type TextEffectFormat a = IDispatch (TextEffectFormat_ a)
iidTextEffectFormat :: IID (TextEffectFormat ())
iidTextEffectFormat =
  mkIID "{000209CF-0000-0000-C000-000000000046}"

getApplication182 :: TextEffectFormat a0
                  -> IO (Maybe Application)
getApplication182 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator182 :: TextEffectFormat a0
              -> IO Int32
getCreator182 =
  propertyGet "Creator"
              []
              outInt32

getParent182 :: TextEffectFormat a0
             -> IO (IDispatch ())
getParent182 =
  propertyGet "Parent"
              []
              outIDispatch

getAlignment7 :: TextEffectFormat a0
              -> IO MsoTextEffectAlignment
getAlignment7 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTextEffectAlignment)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getAlignment7 methPtr iptr prop) 10 iptr
    doThenFree free readMsoTextEffectAlignment prop

foreign import stdcall "dynamic" prim_Word_getAlignment7 :: Ptr () -> Ptr () -> Ptr MsoTextEffectAlignment -> IO Int32
setAlignment7 :: MsoTextEffectAlignment
              -> TextEffectFormat a0
              -> IO ()
setAlignment7 prop iptr =
  do
    prop <- marshallMsoTextEffectAlignment prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAlignment7 methPtr iptr prop) 11 iptr

foreign import stdcall "prim_Word_setAlignment7" prim_Word_setAlignment7 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFontBold :: TextEffectFormat a0
            -> IO MsoTriState
getFontBold iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 12 iptr
    doThenFree free readMsoTriState prop

setFontBold :: MsoTriState
            -> TextEffectFormat a0
            -> IO ()
setFontBold prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFontBold methPtr iptr prop) 13 iptr

foreign import stdcall "prim_Word_setFontBold" prim_Word_setFontBold :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFontItalic :: TextEffectFormat a0
              -> IO MsoTriState
getFontItalic iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 14 iptr
    doThenFree free readMsoTriState prop

setFontItalic :: MsoTriState
              -> TextEffectFormat a0
              -> IO ()
setFontItalic prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFontItalic methPtr iptr prop) 15 iptr

foreign import stdcall "prim_Word_setFontItalic" prim_Word_setFontItalic :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFontName0 :: TextEffectFormat a0
             -> IO String
getFontName0 =
  propertyGet "FontName"
              []
              outString

setFontName0 :: String
             -> TextEffectFormat a0
             -> IO ()
setFontName0 prop =
  propertySet "FontName"
              [inString prop]

getFontSize :: TextEffectFormat a0
            -> IO Float
getFontSize =
  propertyGet "FontSize"
              []
              outFloat

setFontSize :: Float
            -> TextEffectFormat a0
            -> IO ()
setFontSize prop =
  propertySet "FontSize"
              [inFloat prop]

getKernedPairs :: TextEffectFormat a0
               -> IO MsoTriState
getKernedPairs iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 20 iptr
    doThenFree free readMsoTriState prop

setKernedPairs :: MsoTriState
               -> TextEffectFormat a0
               -> IO ()
setKernedPairs prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setKernedPairs methPtr iptr prop) 21 iptr

foreign import stdcall "prim_Word_setKernedPairs" prim_Word_setKernedPairs :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getNormalizedHeight :: TextEffectFormat a0
                    -> IO MsoTriState
getNormalizedHeight iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 22 iptr
    doThenFree free readMsoTriState prop

setNormalizedHeight :: MsoTriState
                    -> TextEffectFormat a0
                    -> IO ()
setNormalizedHeight prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setNormalizedHeight methPtr iptr prop) 23 iptr

foreign import stdcall "prim_Word_setNormalizedHeight" prim_Word_setNormalizedHeight :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetShape :: TextEffectFormat a0
               -> IO MsoPresetTextEffectShape
getPresetShape iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetTextEffectShape)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetShape methPtr iptr prop) 24 iptr
    doThenFree free readMsoPresetTextEffectShape prop

foreign import stdcall "dynamic" prim_Word_getPresetShape :: Ptr () -> Ptr () -> Ptr MsoPresetTextEffectShape -> IO Int32
setPresetShape :: MsoPresetTextEffectShape
               -> TextEffectFormat a0
               -> IO ()
setPresetShape prop iptr =
  do
    prop <- marshallMsoPresetTextEffectShape prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetShape methPtr iptr prop) 25 iptr

foreign import stdcall "prim_Word_setPresetShape" prim_Word_setPresetShape :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetTextEffect :: TextEffectFormat a0
                    -> IO MsoPresetTextEffect
getPresetTextEffect iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetTextEffect)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetTextEffect methPtr iptr prop) 26 iptr
    doThenFree free readMsoPresetTextEffect prop

foreign import stdcall "dynamic" prim_Word_getPresetTextEffect :: Ptr () -> Ptr () -> Ptr MsoPresetTextEffect -> IO Int32
setPresetTextEffect :: MsoPresetTextEffect
                    -> TextEffectFormat a0
                    -> IO ()
setPresetTextEffect prop iptr =
  do
    prop <- marshallMsoPresetTextEffect prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetTextEffect methPtr iptr prop) 27 iptr

foreign import stdcall "prim_Word_setPresetTextEffect" prim_Word_setPresetTextEffect :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getRotatedChars :: TextEffectFormat a0
                -> IO MsoTriState
getRotatedChars iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 28 iptr
    doThenFree free readMsoTriState prop

setRotatedChars :: MsoTriState
                -> TextEffectFormat a0
                -> IO ()
setRotatedChars prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setRotatedChars methPtr iptr prop) 29 iptr

foreign import stdcall "prim_Word_setRotatedChars" prim_Word_setRotatedChars :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getText3 :: TextEffectFormat a0
         -> IO String
getText3 =
  propertyGet "Text"
              []
              outString

setText3 :: String
         -> TextEffectFormat a0
         -> IO ()
setText3 prop =
  propertySet "Text"
              [inString prop]

getTracking :: TextEffectFormat a0
            -> IO Float
getTracking =
  propertyGet "Tracking"
              []
              outFloat

setTracking :: Float
            -> TextEffectFormat a0
            -> IO ()
setTracking prop =
  propertySet "Tracking"
              [inFloat prop]

toggleVerticalText :: TextEffectFormat a0
                   -> IO ()
toggleVerticalText =
  method0 "ToggleVerticalText"
          []

-- --------------------------------------------------
-- 
-- interface ThreeDFormat
-- 
-- --------------------------------------------------
data ThreeDFormat_ a = ThreeDFormat__ 
type ThreeDFormat a = IDispatch (ThreeDFormat_ a)
iidThreeDFormat :: IID (ThreeDFormat ())
iidThreeDFormat = mkIID "{000209D0-0000-0000-C000-000000000046}"

getApplication183 :: ThreeDFormat a0
                  -> IO (Maybe Application)
getApplication183 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator183 :: ThreeDFormat a0
              -> IO Int32
getCreator183 =
  propertyGet "Creator"
              []
              outInt32

getParent183 :: ThreeDFormat a0
             -> IO (IDispatch ())
getParent183 =
  propertyGet "Parent"
              []
              outIDispatch

getDepth :: ThreeDFormat a0
         -> IO Float
getDepth =
  propertyGet "Depth"
              []
              outFloat

setDepth :: Float
         -> ThreeDFormat a0
         -> IO ()
setDepth prop =
  propertySet "Depth"
              [inFloat prop]

getExtrusionColor :: ThreeDFormat a0
                  -> IO (ColorFormat ())
getExtrusionColor =
  propertyGet "ExtrusionColor"
              []
              outIDispatch

getExtrusionColorType :: ThreeDFormat a0
                      -> IO MsoExtrusionColorType
getExtrusionColorType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoExtrusionColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getExtrusionColorType methPtr iptr prop) 13 iptr
    doThenFree free readMsoExtrusionColorType prop

foreign import stdcall "dynamic" prim_Word_getExtrusionColorType :: Ptr () -> Ptr () -> Ptr MsoExtrusionColorType -> IO Int32
setExtrusionColorType :: MsoExtrusionColorType
                      -> ThreeDFormat a0
                      -> IO ()
setExtrusionColorType prop iptr =
  do
    prop <- marshallMsoExtrusionColorType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setExtrusionColorType methPtr iptr prop) 14 iptr

foreign import stdcall "prim_Word_setExtrusionColorType" prim_Word_setExtrusionColorType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPerspective :: ThreeDFormat a0
               -> IO MsoTriState
getPerspective iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 15 iptr
    doThenFree free readMsoTriState prop

setPerspective :: MsoTriState
               -> ThreeDFormat a0
               -> IO ()
setPerspective prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPerspective methPtr iptr prop) 16 iptr

foreign import stdcall "prim_Word_setPerspective" prim_Word_setPerspective :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetExtrusionDirection :: ThreeDFormat a0
                            -> IO MsoPresetExtrusionDirection
getPresetExtrusionDirection iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetExtrusionDirection)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetExtrusionDirection methPtr iptr prop) 17 iptr
    doThenFree free readMsoPresetExtrusionDirection prop

foreign import stdcall "dynamic" prim_Word_getPresetExtrusionDirection :: Ptr () -> Ptr () -> Ptr MsoPresetExtrusionDirection -> IO Int32
getPresetLightingDirection :: ThreeDFormat a0
                           -> IO MsoPresetLightingDirection
getPresetLightingDirection iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetLightingDirection)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetLightingDirection methPtr iptr prop) 18 iptr
    doThenFree free readMsoPresetLightingDirection prop

foreign import stdcall "dynamic" prim_Word_getPresetLightingDirection :: Ptr () -> Ptr () -> Ptr MsoPresetLightingDirection -> IO Int32
setPresetLightingDirection :: MsoPresetLightingDirection
                           -> ThreeDFormat a0
                           -> IO ()
setPresetLightingDirection prop iptr =
  do
    prop <- marshallMsoPresetLightingDirection prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetLightingDirection methPtr iptr prop) 19 iptr

foreign import stdcall "prim_Word_setPresetLightingDirection" prim_Word_setPresetLightingDirection :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetLightingSoftness :: ThreeDFormat a0
                          -> IO MsoPresetLightingSoftness
getPresetLightingSoftness iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetLightingSoftness)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetLightingSoftness methPtr iptr prop) 20 iptr
    doThenFree free readMsoPresetLightingSoftness prop

foreign import stdcall "dynamic" prim_Word_getPresetLightingSoftness :: Ptr () -> Ptr () -> Ptr MsoPresetLightingSoftness -> IO Int32
setPresetLightingSoftness :: MsoPresetLightingSoftness
                          -> ThreeDFormat a0
                          -> IO ()
setPresetLightingSoftness prop iptr =
  do
    prop <- marshallMsoPresetLightingSoftness prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetLightingSoftness methPtr iptr prop) 21 iptr

foreign import stdcall "prim_Word_setPresetLightingSoftness" prim_Word_setPresetLightingSoftness :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetMaterial :: ThreeDFormat a0
                  -> IO MsoPresetMaterial
getPresetMaterial iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetMaterial)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetMaterial methPtr iptr prop) 22 iptr
    doThenFree free readMsoPresetMaterial prop

foreign import stdcall "dynamic" prim_Word_getPresetMaterial :: Ptr () -> Ptr () -> Ptr MsoPresetMaterial -> IO Int32
setPresetMaterial :: MsoPresetMaterial
                  -> ThreeDFormat a0
                  -> IO ()
setPresetMaterial prop iptr =
  do
    prop <- marshallMsoPresetMaterial prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetMaterial methPtr iptr prop) 23 iptr

foreign import stdcall "prim_Word_setPresetMaterial" prim_Word_setPresetMaterial :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPresetThreeDFormat :: ThreeDFormat a0
                      -> IO MsoPresetThreeDFormat
getPresetThreeDFormat iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetThreeDFormat)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetThreeDFormat methPtr iptr prop) 24 iptr
    doThenFree free readMsoPresetThreeDFormat prop

foreign import stdcall "dynamic" prim_Word_getPresetThreeDFormat :: Ptr () -> Ptr () -> Ptr MsoPresetThreeDFormat -> IO Int32
getRotationX :: ThreeDFormat a0
             -> IO Float
getRotationX =
  propertyGet "RotationX"
              []
              outFloat

setRotationX :: Float
             -> ThreeDFormat a0
             -> IO ()
setRotationX prop =
  propertySet "RotationX"
              [inFloat prop]

getRotationY :: ThreeDFormat a0
             -> IO Float
getRotationY =
  propertyGet "RotationY"
              []
              outFloat

setRotationY :: Float
             -> ThreeDFormat a0
             -> IO ()
setRotationY prop =
  propertySet "RotationY"
              [inFloat prop]

getVisible8 :: ThreeDFormat a0
            -> IO MsoTriState
getVisible8 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 29 iptr
    doThenFree free readMsoTriState prop

setVisible8 :: MsoTriState
            -> ThreeDFormat a0
            -> IO ()
setVisible8 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible8 methPtr iptr prop) 30 iptr

foreign import stdcall "prim_Word_setVisible8" prim_Word_setVisible8 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementRotationX :: Float
                   -> ThreeDFormat a0
                   -> IO ()
incrementRotationX increment =
  method0 "IncrementRotationX"
          [inFloat increment]

incrementRotationY :: Float
                   -> ThreeDFormat a0
                   -> IO ()
incrementRotationY increment =
  method0 "IncrementRotationY"
          [inFloat increment]

resetRotation :: ThreeDFormat a0
              -> IO ()
resetRotation =
  method0 "ResetRotation"
          []

setExtrusionDirection :: MsoPresetExtrusionDirection
                      -> ThreeDFormat a0
                      -> IO ()
setExtrusionDirection presetExtrusionDirection iptr =
  do
    presetExtrusionDirection <- marshallMsoPresetExtrusionDirection presetExtrusionDirection
    invokeAndCheck (\ methPtr iptr -> prim_Word_setExtrusionDirection methPtr iptr presetExtrusionDirection) 34 iptr

foreign import stdcall "prim_Word_setExtrusionDirection" prim_Word_setExtrusionDirection :: Ptr () -> Ptr () -> Ptr () -> IO Int32
setThreeDFormat :: MsoPresetThreeDFormat
                -> ThreeDFormat a0
                -> IO ()
setThreeDFormat presetThreeDFormat iptr =
  do
    presetThreeDFormat <- marshallMsoPresetThreeDFormat presetThreeDFormat
    invokeAndCheck (\ methPtr iptr -> prim_Word_setThreeDFormat methPtr iptr presetThreeDFormat) 35 iptr

foreign import stdcall "prim_Word_setThreeDFormat" prim_Word_setThreeDFormat :: Ptr () -> Ptr () -> Ptr () -> IO Int32
setPresetCamera :: MsoPresetCamera
                -> ThreeDFormat a0
                -> IO ()
setPresetCamera presetCamera iptr =
  do
    presetCamera <- marshallMsoPresetCamera presetCamera
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetCamera methPtr iptr presetCamera) 36 iptr

foreign import stdcall "prim_Word_setPresetCamera" prim_Word_setPresetCamera :: Ptr () -> Ptr () -> Ptr () -> IO Int32
incrementRotationZ :: Float
                   -> ThreeDFormat a0
                   -> IO ()
incrementRotationZ increment =
  method0 "IncrementRotationZ"
          [inFloat increment]

incrementRotationHorizontal :: Float
                            -> ThreeDFormat a0
                            -> IO ()
incrementRotationHorizontal increment =
  method0 "IncrementRotationHorizontal"
          [inFloat increment]

incrementRotationVertical :: Float
                          -> ThreeDFormat a0
                          -> IO ()
incrementRotationVertical increment =
  method0 "IncrementRotationVertical"
          [inFloat increment]

getPresetLighting :: ThreeDFormat a0
                  -> IO MsoLightRigType
getPresetLighting iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoLightRigType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetLighting methPtr iptr prop) 40 iptr
    doThenFree free readMsoLightRigType prop

foreign import stdcall "dynamic" prim_Word_getPresetLighting :: Ptr () -> Ptr () -> Ptr MsoLightRigType -> IO Int32
setPresetLighting :: MsoLightRigType
                  -> ThreeDFormat a0
                  -> IO ()
setPresetLighting prop iptr =
  do
    prop <- marshallMsoLightRigType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setPresetLighting methPtr iptr prop) 41 iptr

foreign import stdcall "prim_Word_setPresetLighting" prim_Word_setPresetLighting :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getZ :: ThreeDFormat a0
     -> IO Float
getZ =
  propertyGet "Z"
              []
              outFloat

setZ :: Float
     -> ThreeDFormat a0
     -> IO ()
setZ prop =
  propertySet "Z"
              [inFloat prop]

getBevelTopType :: ThreeDFormat a0
                -> IO MsoBevelType
getBevelTopType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoBevelType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBevelTopType methPtr iptr prop) 44 iptr
    doThenFree free readMsoBevelType prop

foreign import stdcall "dynamic" prim_Word_getBevelTopType :: Ptr () -> Ptr () -> Ptr MsoBevelType -> IO Int32
setBevelTopType :: MsoBevelType
                -> ThreeDFormat a0
                -> IO ()
setBevelTopType prop iptr =
  do
    prop <- marshallMsoBevelType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setBevelTopType methPtr iptr prop) 45 iptr

foreign import stdcall "prim_Word_setBevelTopType" prim_Word_setBevelTopType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBevelTopInset :: ThreeDFormat a0
                 -> IO Float
getBevelTopInset =
  propertyGet "BevelTopInset"
              []
              outFloat

setBevelTopInset :: Float
                 -> ThreeDFormat a0
                 -> IO ()
setBevelTopInset prop =
  propertySet "BevelTopInset"
              [inFloat prop]

getBevelTopDepth :: ThreeDFormat a0
                 -> IO Float
getBevelTopDepth =
  propertyGet "BevelTopDepth"
              []
              outFloat

setBevelTopDepth :: Float
                 -> ThreeDFormat a0
                 -> IO ()
setBevelTopDepth prop =
  propertySet "BevelTopDepth"
              [inFloat prop]

getBevelBottomType :: ThreeDFormat a0
                   -> IO MsoBevelType
getBevelBottomType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoBevelType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getBevelTopType methPtr iptr prop) 50 iptr
    doThenFree free readMsoBevelType prop

setBevelBottomType :: MsoBevelType
                   -> ThreeDFormat a0
                   -> IO ()
setBevelBottomType prop iptr =
  do
    prop <- marshallMsoBevelType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setBevelBottomType methPtr iptr prop) 51 iptr

foreign import stdcall "prim_Word_setBevelBottomType" prim_Word_setBevelBottomType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getBevelBottomInset :: ThreeDFormat a0
                    -> IO Float
getBevelBottomInset =
  propertyGet "BevelBottomInset"
              []
              outFloat

setBevelBottomInset :: Float
                    -> ThreeDFormat a0
                    -> IO ()
setBevelBottomInset prop =
  propertySet "BevelBottomInset"
              [inFloat prop]

getBevelBottomDepth :: ThreeDFormat a0
                    -> IO Float
getBevelBottomDepth =
  propertyGet "BevelBottomDepth"
              []
              outFloat

setBevelBottomDepth :: Float
                    -> ThreeDFormat a0
                    -> IO ()
setBevelBottomDepth prop =
  propertySet "BevelBottomDepth"
              [inFloat prop]

getPresetCamera :: ThreeDFormat a0
                -> IO MsoPresetCamera
getPresetCamera iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetCamera)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetCamera methPtr iptr prop) 56 iptr
    doThenFree free readMsoPresetCamera prop

foreign import stdcall "dynamic" prim_Word_getPresetCamera :: Ptr () -> Ptr () -> Ptr MsoPresetCamera -> IO Int32
getRotationZ :: ThreeDFormat a0
             -> IO Float
getRotationZ =
  propertyGet "RotationZ"
              []
              outFloat

setRotationZ :: Float
             -> ThreeDFormat a0
             -> IO ()
setRotationZ prop =
  propertySet "RotationZ"
              [inFloat prop]

getContourWidth :: ThreeDFormat a0
                -> IO Float
getContourWidth =
  propertyGet "ContourWidth"
              []
              outFloat

setContourWidth :: Float
                -> ThreeDFormat a0
                -> IO ()
setContourWidth prop =
  propertySet "ContourWidth"
              [inFloat prop]

getContourColor :: ThreeDFormat a0
                -> IO (ColorFormat ())
getContourColor =
  propertyGet "ContourColor"
              []
              outIDispatch

getFieldOfView :: ThreeDFormat a0
               -> IO Float
getFieldOfView =
  propertyGet "FieldOfView"
              []
              outFloat

setFieldOfView :: Float
               -> ThreeDFormat a0
               -> IO ()
setFieldOfView prop =
  propertySet "FieldOfView"
              [inFloat prop]

getProjectText :: ThreeDFormat a0
               -> IO MsoTriState
getProjectText iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 64 iptr
    doThenFree free readMsoTriState prop

setProjectText :: MsoTriState
               -> ThreeDFormat a0
               -> IO ()
setProjectText prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setProjectText methPtr iptr prop) 65 iptr

foreign import stdcall "prim_Word_setProjectText" prim_Word_setProjectText :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getLightAngle :: ThreeDFormat a0
              -> IO Float
getLightAngle =
  propertyGet "LightAngle"
              []
              outFloat

setLightAngle :: Float
              -> ThreeDFormat a0
              -> IO ()
setLightAngle prop =
  propertySet "LightAngle"
              [inFloat prop]

-- --------------------------------------------------
-- 
-- dispinterface ApplicationEvents
-- 
-- --------------------------------------------------
data ApplicationEvents_ a = ApplicationEvents__ 
type ApplicationEvents a = IDispatch (ApplicationEvents_ a)
iidApplicationEvents :: IID (ApplicationEvents ())
iidApplicationEvents =
  mkIID "{000209F7-0000-0000-C000-000000000046}"

mkApplicationEvents_vtbl :: IO (ComVTable (ApplicationEvents ()) objState)
mkApplicationEvents_vtbl = createStdDispatchVTBL2 []

-- --------------------------------------------------
-- 
-- coclass Global
-- 
--   implements: _Global
-- --------------------------------------------------
clsidGlobal :: CLSID
clsidGlobal = mkCLSID "{000209F0-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Application
-- 
--   implements: _Application , [source]ApplicationEvents , [source]ApplicationEvents2 , [source]ApplicationEvents3 , [source]ApplicationEvents4
-- --------------------------------------------------
clsidApplication :: CLSID
clsidApplication = mkCLSID "{000209FF-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface DocumentEvents
-- 
-- --------------------------------------------------
data DocumentEvents_ a = DocumentEvents__ 
type DocumentEvents a = IDispatch (DocumentEvents_ a)
iidDocumentEvents :: IID (DocumentEvents ())
iidDocumentEvents = mkIID "{000209F6-0000-0000-C000-000000000046}"

mkDocumentEvents_vtbl :: (objState -> IO ())
                      -> (objState -> IO ())
                      -> (objState -> IO ())
                      -> IO (ComVTable (DocumentEvents ()) objState)
mkDocumentEvents_vtbl new0 open4 close5 =
  let
   meth_arg0 = mkDispMethod "New" 0x4 (prim_new0 new0)
   meth_arg1 = mkDispMethod "Open" 0x5 (prim_open4 open4)
   meth_arg2 = mkDispMethod "Close" 0x6 (prim_close5 close5)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         ]

prim_new0 :: (objState -> IO ())
          -> [VARIANT]
          -> objState
          -> IO (Maybe VARIANT)
prim_new0 new0_meth = apply_0 (new0_meth)

prim_open4 :: (objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_open4 open4_meth = apply_0 (open4_meth)

prim_close5 :: (objState -> IO ())
            -> [VARIANT]
            -> objState
            -> IO (Maybe VARIANT)
prim_close5 close5_meth = apply_0 (close5_meth)

-- --------------------------------------------------
-- 
-- coclass Document
-- 
--   implements: _Document , [source]DocumentEvents , [source]DocumentEvents2
-- --------------------------------------------------
clsidDocument :: CLSID
clsidDocument = mkCLSID "{00020906-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass Font
-- 
--   implements: _Font
-- --------------------------------------------------
clsidFont :: CLSID
clsidFont = mkCLSID "{000209F5-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass ParagraphFormat
-- 
--   implements: _ParagraphFormat
-- --------------------------------------------------
clsidParagraphFormat :: CLSID
clsidParagraphFormat =
  mkCLSID "{000209F4-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- dispinterface OCXEvents
-- 
-- --------------------------------------------------
data OCXEvents_ a = OCXEvents__ 
type OCXEvents a = IDispatch (OCXEvents_ a)
iidOCXEvents :: IID (OCXEvents ())
iidOCXEvents = mkIID "{000209F3-0000-0000-C000-000000000046}"

mkOCXEvents_vtbl :: (objState -> IO ())
                 -> (objState -> IO ())
                 -> IO (ComVTable (OCXEvents ()) objState)
mkOCXEvents_vtbl gotFocus lostFocus =
  let
   meth_arg0 = mkDispMethod "GotFocus" 0x800100e0 (prim_gotFocus gotFocus)
   meth_arg1 = mkDispMethod "LostFocus" 0x800100e1 (prim_lostFocus lostFocus)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         ]

prim_gotFocus :: (objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_gotFocus gotFocus_meth = apply_0 (gotFocus_meth)

prim_lostFocus :: (objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_lostFocus lostFocus_meth = apply_0 (lostFocus_meth)

-- --------------------------------------------------
-- 
-- coclass OLEControl
-- 
--   implements: _OLEControl , [source]OCXEvents
-- --------------------------------------------------
clsidOLEControl :: CLSID
clsidOLEControl = mkCLSID "{000209F2-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- coclass LetterContent
-- 
--   implements: _LetterContent
-- --------------------------------------------------
clsidLetterContent :: CLSID
clsidLetterContent =
  mkCLSID "{000209F1-0000-0000-C000-000000000046}"

-- --------------------------------------------------
-- 
-- interface IApplicationEvents
-- 
-- --------------------------------------------------
data IApplicationEvents_ a = IApplicationEvents__ 
type IApplicationEvents a = IDispatch (IApplicationEvents_ a)
iidIApplicationEvents :: IID (IApplicationEvents ())
iidIApplicationEvents =
  mkIID "{000209F7-0001-0000-C000-000000000046}"

startup :: IApplicationEvents a0
        -> IO ()
startup =
  method0 "Startup"
          []

quit0 :: IApplicationEvents a0
      -> IO ()
quit0 =
  method0 "Quit"
          []

documentChange :: IApplicationEvents a0
               -> IO ()
documentChange =
  method0 "DocumentChange"
          []

-- --------------------------------------------------
-- 
-- interface IApplicationEvents2
-- 
-- --------------------------------------------------
data IApplicationEvents2_ a = IApplicationEvents2__ 
type IApplicationEvents2 a = IDispatch (IApplicationEvents2_ a)
iidIApplicationEvents2 :: IID (IApplicationEvents2 ())
iidIApplicationEvents2 =
  mkIID "{000209FE-0001-0000-C000-000000000046}"

startup0 :: IApplicationEvents2 a0
         -> IO ()
startup0 =
  method0 "Startup"
          []

quit1 :: IApplicationEvents2 a0
      -> IO ()
quit1 =
  method0 "Quit"
          []

documentChange0 :: IApplicationEvents2 a0
                -> IO ()
documentChange0 =
  method0 "DocumentChange"
          []

documentOpen :: Document
             -> IApplicationEvents2 a0
             -> IO ()
documentOpen doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 10 iptr
    free doc

foreign import stdcall "dynamic" prim_Word_documentOpen :: Ptr () -> Ptr () -> Ptr Document -> IO Int32
documentBeforeClose :: Document
                    -> Bool
                    -> IApplicationEvents2 a0
                    -> IO ()
documentBeforeClose doc cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeClose methPtr iptr doc cancel) 11 iptr
    free doc
    free cancel

foreign import stdcall "dynamic" prim_Word_documentBeforeClose :: Ptr () -> Ptr () -> Ptr Document -> Ptr Int16 -> IO Int32
documentBeforePrint :: Document
                    -> Bool
                    -> IApplicationEvents2 a0
                    -> IO ()
documentBeforePrint doc cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeClose methPtr iptr doc cancel) 12 iptr
    free doc
    free cancel

documentBeforeSave :: Document
                   -> Bool
                   -> Bool
                   -> IApplicationEvents2 a0
                   -> IO ()
documentBeforeSave doc saveAsUI cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    saveAsUI <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL saveAsUI
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeSave methPtr iptr doc saveAsUI cancel) 13 iptr
    free doc
    free saveAsUI
    free cancel

foreign import stdcall "dynamic" prim_Word_documentBeforeSave :: Ptr () -> Ptr () -> Ptr Document -> Ptr Int16 -> Ptr Int16 -> IO Int32
newDocument :: Document
            -> IApplicationEvents2 a0
            -> IO ()
newDocument doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 14 iptr
    free doc

windowActivate :: Document
               -> Window a1
               -> IApplicationEvents2 a0
               -> IO ()
windowActivate doc wn iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    wn <- marshallIUnknown wn
    invokeAndCheck (\ methPtr iptr -> withForeignPtr wn (\ wn -> prim_Word_windowActivate methPtr iptr doc wn)) 15 iptr
    free doc

foreign import stdcall "dynamic" prim_Word_windowActivate :: Ptr () -> Ptr () -> Ptr Document -> Ptr (Window a) -> IO Int32
windowDeactivate :: Document
                 -> Window a1
                 -> IApplicationEvents2 a0
                 -> IO ()
windowDeactivate doc wn iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    wn <- marshallIUnknown wn
    invokeAndCheck (\ methPtr iptr -> withForeignPtr wn (\ wn -> prim_Word_windowActivate methPtr iptr doc wn)) 16 iptr
    free doc

windowSelectionChange :: Selection a1
                      -> IApplicationEvents2 a0
                      -> IO ()
windowSelectionChange sel =
  method0 "WindowSelectionChange"
          [inIDispatch sel]

windowBeforeRightClick :: Selection a1
                       -> Bool
                       -> IApplicationEvents2 a0
                       -> IO ()
windowBeforeRightClick sel cancel =
  method0 "WindowBeforeRightClick"
          [ inIDispatch sel
          , inBool cancel
          ]

windowBeforeDoubleClick :: Selection a1
                        -> Bool
                        -> IApplicationEvents2 a0
                        -> IO ()
windowBeforeDoubleClick sel cancel =
  method0 "WindowBeforeDoubleClick"
          [ inIDispatch sel
          , inBool cancel
          ]

-- --------------------------------------------------
-- 
-- dispinterface ApplicationEvents2
-- 
-- --------------------------------------------------
data ApplicationEvents2_ a = ApplicationEvents2__ 
type ApplicationEvents2 a = IDispatch (ApplicationEvents2_ a)
iidApplicationEvents2 :: IID (ApplicationEvents2 ())
iidApplicationEvents2 =
  mkIID "{000209FE-0000-0000-C000-000000000046}"

mkApplicationEvents2_vtbl :: (GUID -> objState -> IO (Ptr ()))
                          -> (objState -> IO Word32)
                          -> (objState -> IO Word32)
                          -> (objState -> IO Word32)
                          -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                          -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                          -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                          -> (objState -> IO ())
                          -> (objState -> IO ())
                          -> (objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> Bool -> Bool -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Selection a0 -> objState -> IO ())
                          -> (Selection a0 -> Bool -> objState -> IO ())
                          -> (Selection a0 -> Bool -> objState -> IO ())
                          -> IO (ComVTable (ApplicationEvents2 ()) objState)
mkApplicationEvents2_vtbl queryInterface addRef release getTypeInfoCount getTypeInfo getIDsOfNames invoke startup1 quit2 documentChange1 documentOpen0 documentBeforeClose0 documentBeforePrint0 documentBeforeSave0 newDocument0 windowActivate0 windowDeactivate0 windowSelectionChange0 windowBeforeRightClick0 windowBeforeDoubleClick0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface queryInterface)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef addRef)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release release)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount getTypeInfoCount)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo getTypeInfo)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames getIDsOfNames)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke invoke)
   meth_arg7 = mkDispMethod "Startup" 0x1 (prim_startup1 startup1)
   meth_arg8 = mkDispMethod "Quit" 0x2 (prim_quit2 quit2)
   meth_arg9 = mkDispMethod "DocumentChange" 0x3 (prim_documentChange1 documentChange1)
   meth_arg10 = mkDispMethod "DocumentOpen" 0x4 (prim_documentOpen0 documentOpen0)
   meth_arg11 = mkDispMethod "DocumentBeforeClose" 0x6 (prim_documentBeforeClose0 documentBeforeClose0)
   meth_arg12 = mkDispMethod "DocumentBeforePrint" 0x7 (prim_documentBeforePrint0 documentBeforePrint0)
   meth_arg13 = mkDispMethod "DocumentBeforeSave" 0x8 (prim_documentBeforeSave0 documentBeforeSave0)
   meth_arg14 = mkDispMethod "NewDocument" 0x9 (prim_newDocument0 newDocument0)
   meth_arg15 = mkDispMethod "WindowActivate" 0xa (prim_windowActivate0 windowActivate0)
   meth_arg16 = mkDispMethod "WindowDeactivate" 0xb (prim_windowDeactivate0 windowDeactivate0)
   meth_arg17 = mkDispMethod "WindowSelectionChange" 0xc (prim_windowSelectionChange0 windowSelectionChange0)
   meth_arg18 = mkDispMethod "WindowBeforeRightClick" 0xd (prim_windowBeforeRightClick0 windowBeforeRightClick0)
   meth_arg19 = mkDispMethod "WindowBeforeDoubleClick" 0xe (prim_windowBeforeDoubleClick0 windowBeforeDoubleClick0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         ]

prim_queryInterface :: (GUID -> objState -> IO (Ptr ()))
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_queryInterface queryInterface_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface_meth riid)
          ppvObj

prim_addRef :: (objState -> IO Word32)
            -> [VARIANT]
            -> objState
            -> IO (Maybe VARIANT)
prim_addRef addRef_meth =
  retVal $ \ the_res ->
  apply_1 (addRef_meth)
          the_res

prim_release :: (objState -> IO Word32)
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_release release_meth =
  retVal $ \ the_res ->
  apply_1 (release_meth)
          the_res

prim_getTypeInfoCount :: (objState -> IO Word32)
                      -> [VARIANT]
                      -> objState
                      -> IO (Maybe VARIANT)
prim_getTypeInfoCount getTypeInfoCount_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount_meth)
          pctinfo

prim_getTypeInfo :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_getTypeInfo getTypeInfo_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_getIDsOfNames getIDsOfNames_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
            -> [VARIANT]
            -> objState
            -> IO (Maybe VARIANT)
prim_invoke invoke_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_startup1 :: (objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_startup1 startup1_meth = apply_0 (startup1_meth)

prim_quit2 :: (objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_quit2 quit2_meth = apply_0 (quit2_meth)

prim_documentChange1 :: (objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_documentChange1 documentChange1_meth =
  apply_0 (documentChange1_meth)

prim_documentOpen0 :: (Document -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_documentOpen0 documentOpen0_meth =
  inArg $ \ doc ->
  apply_0 (documentOpen0_meth doc)

prim_documentBeforeClose0 :: (Document -> Bool -> objState -> IO ())
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_documentBeforeClose0 documentBeforeClose0_meth =
  inArg $ \ doc ->
  inArg $ \ cancel ->
  apply_0 (documentBeforeClose0_meth doc cancel)

prim_documentBeforePrint0 :: (Document -> Bool -> objState -> IO ())
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_documentBeforePrint0 documentBeforePrint0_meth =
  inArg $ \ doc ->
  inArg $ \ cancel ->
  apply_0 (documentBeforePrint0_meth doc cancel)

prim_documentBeforeSave0 :: (Document -> Bool -> Bool -> objState -> IO ())
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_documentBeforeSave0 documentBeforeSave0_meth =
  inArg $ \ doc ->
  inArg $ \ saveAsUI ->
  inArg $ \ cancel ->
  apply_0 (documentBeforeSave0_meth doc saveAsUI cancel)

prim_newDocument0 :: (Document -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_newDocument0 newDocument0_meth =
  inArg $ \ doc ->
  apply_0 (newDocument0_meth doc)

prim_windowActivate0 :: (Document -> Window a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_windowActivate0 windowActivate0_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowActivate0_meth doc wn)

prim_windowDeactivate0 :: (Document -> Window a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_windowDeactivate0 windowDeactivate0_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowDeactivate0_meth doc wn)

prim_windowSelectionChange0 :: (Selection a0 -> objState -> IO ())
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_windowSelectionChange0 windowSelectionChange0_meth =
  inArg $ \ sel ->
  apply_0 (windowSelectionChange0_meth sel)

prim_windowBeforeRightClick0 :: (Selection a0 -> Bool -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_windowBeforeRightClick0 windowBeforeRightClick0_meth =
  inArg $ \ sel ->
  inArg $ \ cancel ->
  apply_0 (windowBeforeRightClick0_meth sel cancel)

prim_windowBeforeDoubleClick0 :: (Selection a0 -> Bool -> objState -> IO ())
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_windowBeforeDoubleClick0 windowBeforeDoubleClick0_meth =
  inArg $ \ sel ->
  inArg $ \ cancel ->
  apply_0 (windowBeforeDoubleClick0_meth sel cancel)

data WdBrowserLevel
 = WdBrowserLevelList__ [WdBrowserLevel]
 | WdBrowserLevelV4
 | WdBrowserLevelMicrosoftInternetExplorer5
 | WdBrowserLevelMicrosoftInternetExplorer6
 
instance Flags (WdBrowserLevel) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdBrowserLevel) where
  fromEnum v =
    case v of
       (WdBrowserLevelList__ xs) -> orList (map fromEnum xs)
       WdBrowserLevelV4 -> 0
       WdBrowserLevelMicrosoftInternetExplorer5 -> 1
       WdBrowserLevelMicrosoftInternetExplorer6 -> 2
  
  toEnum v =
    case v of
       0 -> WdBrowserLevelV4
       1 -> WdBrowserLevelMicrosoftInternetExplorer5
       2 -> WdBrowserLevelMicrosoftInternetExplorer6
       x -> WdBrowserLevelList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdBrowserLevel: illegal enum value "
  
instance Variant (WdBrowserLevel) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEnclosureType
 = WdEnclosureCircle
 | WdEnclosureSquare
 | WdEnclosureTriangle
 | WdEnclosureDiamond
 deriving (Enum)
instance Variant (WdEnclosureType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEncloseStyle
 = WdEncloseStyleList__ [WdEncloseStyle]
 | WdEncloseStyleNone
 | WdEncloseStyleSmall
 | WdEncloseStyleLarge
 
instance Flags (WdEncloseStyle) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdEncloseStyle) where
  fromEnum v =
    case v of
       (WdEncloseStyleList__ xs) -> orList (map fromEnum xs)
       WdEncloseStyleNone -> 0
       WdEncloseStyleSmall -> 1
       WdEncloseStyleLarge -> 2
  
  toEnum v =
    case v of
       0 -> WdEncloseStyleNone
       1 -> WdEncloseStyleSmall
       2 -> WdEncloseStyleLarge
       x -> WdEncloseStyleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdEncloseStyle: illegal enum value "
  
instance Variant (WdEncloseStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHighAnsiText
 = WdHighAnsiTextList__ [WdHighAnsiText]
 | WdHighAnsiIsFarEast
 | WdHighAnsiIsHighAnsi
 | WdAutoDetectHighAnsiFarEast
 
instance Flags (WdHighAnsiText) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdHighAnsiText) where
  fromEnum v =
    case v of
       (WdHighAnsiTextList__ xs) -> orList (map fromEnum xs)
       WdHighAnsiIsFarEast -> 0
       WdHighAnsiIsHighAnsi -> 1
       WdAutoDetectHighAnsiFarEast -> 2
  
  toEnum v =
    case v of
       0 -> WdHighAnsiIsFarEast
       1 -> WdHighAnsiIsHighAnsi
       2 -> WdAutoDetectHighAnsiFarEast
       x -> WdHighAnsiTextList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdHighAnsiText: illegal enum value "
  
instance Variant (WdHighAnsiText) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLayoutMode
 = WdLayoutModeDefault
 | WdLayoutModeGrid
 | WdLayoutModeLineGrid
 | WdLayoutModeGenko
 deriving (Enum)
instance Variant (WdLayoutMode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDocumentMedium
 = WdDocumentMediumList__ [WdDocumentMedium]
 | WdEmailMessage
 | WdDocument
 | WdWebPage
 
instance Flags (WdDocumentMedium) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDocumentMedium) where
  fromEnum v =
    case v of
       (WdDocumentMediumList__ xs) -> orList (map fromEnum xs)
       WdEmailMessage -> 0
       WdDocument -> 1
       WdWebPage -> 2
  
  toEnum v =
    case v of
       0 -> WdEmailMessage
       1 -> WdDocument
       2 -> WdWebPage
       x -> WdDocumentMediumList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDocumentMedium: illegal enum value "
  
instance Variant (WdDocumentMedium) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailerPriority
 = WdPriorityNormal
 | WdPriorityLow
 | WdPriorityHigh
 
instance Enum (WdMailerPriority) where
  fromEnum v =
    case v of
       WdPriorityNormal -> 1
       WdPriorityLow -> 2
       WdPriorityHigh -> 3
  
  toEnum v =
    case v of
       1 -> WdPriorityNormal
       2 -> WdPriorityLow
       3 -> WdPriorityHigh
       _ -> error "unmarshallWdMailerPriority: illegal enum value "
  
instance Variant (WdMailerPriority) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDocumentViewDirection
 = WdDocumentViewDirectionList__ [WdDocumentViewDirection]
 | WdDocumentViewRtl
 | WdDocumentViewLtr
 
instance Flags (WdDocumentViewDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDocumentViewDirection) where
  fromEnum v =
    case v of
       (WdDocumentViewDirectionList__ xs) -> orList (map fromEnum xs)
       WdDocumentViewRtl -> 0
       WdDocumentViewLtr -> 1
  
  toEnum v =
    case v of
       0 -> WdDocumentViewRtl
       1 -> WdDocumentViewLtr
       x -> WdDocumentViewDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                then Just (toEnum (fromIntegral val))
                                                                else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdDocumentViewDirection: illegal enum value "
  
instance Variant (WdDocumentViewDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdArabicNumeral
 = WdNumeralArabic
 | WdNumeralHindi
 | WdNumeralContext
 | WdNumeralSystem
 deriving (Enum)
instance Variant (WdArabicNumeral) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMonthNames
 = WdMonthNamesList__ [WdMonthNames]
 | WdMonthNamesArabic
 | WdMonthNamesEnglish
 | WdMonthNamesFrench
 
instance Flags (WdMonthNames) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdMonthNames) where
  fromEnum v =
    case v of
       (WdMonthNamesList__ xs) -> orList (map fromEnum xs)
       WdMonthNamesArabic -> 0
       WdMonthNamesEnglish -> 1
       WdMonthNamesFrench -> 2
  
  toEnum v =
    case v of
       0 -> WdMonthNamesArabic
       1 -> WdMonthNamesEnglish
       2 -> WdMonthNamesFrench
       x -> WdMonthNamesList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                     then Just (toEnum (fromIntegral val))
                                                     else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdMonthNames: illegal enum value "
  
instance Variant (WdMonthNames) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCursorMovement
 = WdCursorMovementList__ [WdCursorMovement]
 | WdCursorMovementLogical
 | WdCursorMovementVisual
 
instance Flags (WdCursorMovement) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdCursorMovement) where
  fromEnum v =
    case v of
       (WdCursorMovementList__ xs) -> orList (map fromEnum xs)
       WdCursorMovementLogical -> 0
       WdCursorMovementVisual -> 1
  
  toEnum v =
    case v of
       0 -> WdCursorMovementLogical
       1 -> WdCursorMovementVisual
       x -> WdCursorMovementList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdCursorMovement: illegal enum value "
  
instance Variant (WdCursorMovement) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdVisualSelection
 = WdVisualSelectionList__ [WdVisualSelection]
 | WdVisualSelectionBlock
 | WdVisualSelectionContinuous
 
instance Flags (WdVisualSelection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdVisualSelection) where
  fromEnum v =
    case v of
       (WdVisualSelectionList__ xs) -> orList (map fromEnum xs)
       WdVisualSelectionBlock -> 0
       WdVisualSelectionContinuous -> 1
  
  toEnum v =
    case v of
       0 -> WdVisualSelectionBlock
       1 -> WdVisualSelectionContinuous
       x -> WdVisualSelectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdVisualSelection: illegal enum value "
  
instance Variant (WdVisualSelection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTableDirection
 = WdTableDirectionList__ [WdTableDirection]
 | WdTableDirectionRtl
 | WdTableDirectionLtr
 
instance Flags (WdTableDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdTableDirection) where
  fromEnum v =
    case v of
       (WdTableDirectionList__ xs) -> orList (map fromEnum xs)
       WdTableDirectionRtl -> 0
       WdTableDirectionLtr -> 1
  
  toEnum v =
    case v of
       0 -> WdTableDirectionRtl
       1 -> WdTableDirectionLtr
       x -> WdTableDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdTableDirection: illegal enum value "
  
instance Variant (WdTableDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFlowDirection
 = WdFlowDirectionList__ [WdFlowDirection]
 | WdFlowLtr
 | WdFlowRtl
 
instance Flags (WdFlowDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFlowDirection) where
  fromEnum v =
    case v of
       (WdFlowDirectionList__ xs) -> orList (map fromEnum xs)
       WdFlowLtr -> 0
       WdFlowRtl -> 1
  
  toEnum v =
    case v of
       0 -> WdFlowLtr
       1 -> WdFlowRtl
       x -> WdFlowDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdFlowDirection: illegal enum value "
  
instance Variant (WdFlowDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDiacriticColor
 = WdDiacriticColorList__ [WdDiacriticColor]
 | WdDiacriticColorBidi
 | WdDiacriticColorLatin
 
instance Flags (WdDiacriticColor) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDiacriticColor) where
  fromEnum v =
    case v of
       (WdDiacriticColorList__ xs) -> orList (map fromEnum xs)
       WdDiacriticColorBidi -> 0
       WdDiacriticColorLatin -> 1
  
  toEnum v =
    case v of
       0 -> WdDiacriticColorBidi
       1 -> WdDiacriticColorLatin
       x -> WdDiacriticColorList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdDiacriticColor: illegal enum value "
  
instance Variant (WdDiacriticColor) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdGutterStyle
 = WdGutterStyleList__ [WdGutterStyle]
 | WdGutterPosLeft
 | WdGutterPosTop
 | WdGutterPosRight
 
instance Flags (WdGutterStyle) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdGutterStyle) where
  fromEnum v =
    case v of
       (WdGutterStyleList__ xs) -> orList (map fromEnum xs)
       WdGutterPosLeft -> 0
       WdGutterPosTop -> 1
       WdGutterPosRight -> 2
  
  toEnum v =
    case v of
       0 -> WdGutterPosLeft
       1 -> WdGutterPosTop
       2 -> WdGutterPosRight
       x -> WdGutterStyleList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdGutterStyle: illegal enum value "
  
instance Variant (WdGutterStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdGutterStyleOld
 = WdGutterStyleLatin
 | WdGutterStyleBidi
 
instance Enum (WdGutterStyleOld) where
  fromEnum v =
    case v of
       WdGutterStyleLatin -> (-10)
       WdGutterStyleBidi -> 2
  
  toEnum v =
    case v of
       (-10) -> WdGutterStyleLatin
       2 -> WdGutterStyleBidi
       _ -> error "unmarshallWdGutterStyleOld: illegal enum value "
  
instance Variant (WdGutterStyleOld) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSectionDirection
 = WdSectionDirectionList__ [WdSectionDirection]
 | WdSectionDirectionRtl
 | WdSectionDirectionLtr
 
instance Flags (WdSectionDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdSectionDirection) where
  fromEnum v =
    case v of
       (WdSectionDirectionList__ xs) -> orList (map fromEnum xs)
       WdSectionDirectionRtl -> 0
       WdSectionDirectionLtr -> 1
  
  toEnum v =
    case v of
       0 -> WdSectionDirectionRtl
       1 -> WdSectionDirectionLtr
       x -> WdSectionDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdSectionDirection: illegal enum value "
  
instance Variant (WdSectionDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDateLanguage
 = WdDateLanguageBidi
 | WdDateLanguageLatin
 
instance Enum (WdDateLanguage) where
  fromEnum v =
    case v of
       WdDateLanguageBidi -> 10
       WdDateLanguageLatin -> 1033
  
  toEnum v =
    case v of
       10 -> WdDateLanguageBidi
       1033 -> WdDateLanguageLatin
       _ -> error "unmarshallWdDateLanguage: illegal enum value "
  
instance Variant (WdDateLanguage) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCalendarTypeBi
 = WdCalendarTypeBidi
 | WdCalendarTypeGregorian
 
instance Enum (WdCalendarTypeBi) where
  fromEnum v =
    case v of
       WdCalendarTypeBidi -> 99
       WdCalendarTypeGregorian -> 100
  
  toEnum v =
    case v of
       99 -> WdCalendarTypeBidi
       100 -> WdCalendarTypeGregorian
       _ -> error "unmarshallWdCalendarTypeBi: illegal enum value "
  
instance Variant (WdCalendarTypeBi) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCalendarType
 = WdCalendarWestern
 | WdCalendarArabic
 | WdCalendarHebrew
 | WdCalendarChina
 | WdCalendarJapan
 | WdCalendarThai
 | WdCalendarKorean
 | WdCalendarSakaEra
 | WdCalendarTranslitEnglish
 | WdCalendarTranslitFrench
 deriving (Enum)
instance Variant (WdCalendarType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdReadingOrder
 = WdReadingOrderList__ [WdReadingOrder]
 | WdReadingOrderRtl
 | WdReadingOrderLtr
 
instance Flags (WdReadingOrder) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdReadingOrder) where
  fromEnum v =
    case v of
       (WdReadingOrderList__ xs) -> orList (map fromEnum xs)
       WdReadingOrderRtl -> 0
       WdReadingOrderLtr -> 1
  
  toEnum v =
    case v of
       0 -> WdReadingOrderRtl
       1 -> WdReadingOrderLtr
       x -> WdReadingOrderList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdReadingOrder: illegal enum value "
  
instance Variant (WdReadingOrder) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHebSpellStart
 = WdFullScript
 | WdPartialScript
 | WdMixedScript
 | WdMixedAuthorizedScript
 deriving (Enum)
instance Variant (WdHebSpellStart) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAraSpeller
 = WdNone
 | WdInitialAlef
 | WdFinalYaa
 | WdBoth
 deriving (Enum)
instance Variant (WdAraSpeller) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdColor
 = WdColorAutomatic
 | WdColorBlack
 | WdColorDarkRed
 | WdColorRed
 | WdColorDarkGreen
 | WdColorOliveGreen
 | WdColorBrown
 | WdColorOrange
 | WdColorGreen
 | WdColorDarkYellow
 | WdColorLightOrange
 | WdColorLime
 | WdColorGold
 | WdColorBrightGreen
 | WdColorYellow
 | WdColorGray95
 | WdColorGray90
 | WdColorGray875
 | WdColorGray85
 | WdColorGray80
 | WdColorGray75
 | WdColorGray70
 | WdColorGray65
 | WdColorGray625
 | WdColorDarkTeal
 | WdColorPlum
 | WdColorGray60
 | WdColorSeaGreen
 | WdColorGray55
 | WdColorDarkBlue
 | WdColorViolet
 | WdColorTeal
 | WdColorGray50
 | WdColorGray45
 | WdColorIndigo
 | WdColorBlueGray
 | WdColorGray40
 | WdColorTan
 | WdColorLightYellow
 | WdColorGray375
 | WdColorGray35
 | WdColorGray30
 | WdColorGray25
 | WdColorRose
 | WdColorAqua
 | WdColorGray20
 | WdColorLightGreen
 | WdColorGray15
 | WdColorGray125
 | WdColorGray10
 | WdColorGray05
 | WdColorBlue
 | WdColorPink
 | WdColorLightBlue
 | WdColorLavender
 | WdColorSkyBlue
 | WdColorPaleBlue
 | WdColorTurquoise
 | WdColorLightTurquoise
 | WdColorWhite
 
instance Enum (WdColor) where
  fromEnum v =
    case v of
       WdColorAutomatic -> (-16777216)
       WdColorBlack -> 0
       WdColorDarkRed -> 128
       WdColorRed -> 255
       WdColorDarkGreen -> 13056
       WdColorOliveGreen -> 13107
       WdColorBrown -> 13209
       WdColorOrange -> 26367
       WdColorGreen -> 32768
       WdColorDarkYellow -> 32896
       WdColorLightOrange -> 39423
       WdColorLime -> 52377
       WdColorGold -> 52479
       WdColorBrightGreen -> 65280
       WdColorYellow -> 65535
       WdColorGray95 -> 789516
       WdColorGray90 -> 1644825
       WdColorGray875 -> 2105376
       WdColorGray85 -> 2500134
       WdColorGray80 -> 3355443
       WdColorGray75 -> 4210752
       WdColorGray70 -> 5000268
       WdColorGray65 -> 5855577
       WdColorGray625 -> 6316128
       WdColorDarkTeal -> 6697728
       WdColorPlum -> 6697881
       WdColorGray60 -> 6710886
       WdColorSeaGreen -> 6723891
       WdColorGray55 -> 7566195
       WdColorDarkBlue -> 8388608
       WdColorViolet -> 8388736
       WdColorTeal -> 8421376
       WdColorGray50 -> 8421504
       WdColorGray45 -> 9211020
       WdColorIndigo -> 10040115
       WdColorBlueGray -> 10053222
       WdColorGray40 -> 10066329
       WdColorTan -> 10079487
       WdColorLightYellow -> 10092543
       WdColorGray375 -> 10526880
       WdColorGray35 -> 10921638
       WdColorGray30 -> 11776947
       WdColorGray25 -> 12632256
       WdColorRose -> 13408767
       WdColorAqua -> 13421619
       WdColorGray20 -> 13421772
       WdColorLightGreen -> 13434828
       WdColorGray15 -> 14277081
       WdColorGray125 -> 14737632
       WdColorGray10 -> 15132390
       WdColorGray05 -> 15987699
       WdColorBlue -> 16711680
       WdColorPink -> 16711935
       WdColorLightBlue -> 16737843
       WdColorLavender -> 16751052
       WdColorSkyBlue -> 16763904
       WdColorPaleBlue -> 16764057
       WdColorTurquoise -> 16776960
       WdColorLightTurquoise -> 16777164
       WdColorWhite -> 16777215
  
  toEnum v =
    case v of
       (-16777216) -> WdColorAutomatic
       0 -> WdColorBlack
       128 -> WdColorDarkRed
       255 -> WdColorRed
       13056 -> WdColorDarkGreen
       13107 -> WdColorOliveGreen
       13209 -> WdColorBrown
       26367 -> WdColorOrange
       32768 -> WdColorGreen
       32896 -> WdColorDarkYellow
       39423 -> WdColorLightOrange
       52377 -> WdColorLime
       52479 -> WdColorGold
       65280 -> WdColorBrightGreen
       65535 -> WdColorYellow
       789516 -> WdColorGray95
       1644825 -> WdColorGray90
       2105376 -> WdColorGray875
       2500134 -> WdColorGray85
       3355443 -> WdColorGray80
       4210752 -> WdColorGray75
       5000268 -> WdColorGray70
       5855577 -> WdColorGray65
       6316128 -> WdColorGray625
       6697728 -> WdColorDarkTeal
       6697881 -> WdColorPlum
       6710886 -> WdColorGray60
       6723891 -> WdColorSeaGreen
       7566195 -> WdColorGray55
       8388608 -> WdColorDarkBlue
       8388736 -> WdColorViolet
       8421376 -> WdColorTeal
       8421504 -> WdColorGray50
       9211020 -> WdColorGray45
       10040115 -> WdColorIndigo
       10053222 -> WdColorBlueGray
       10066329 -> WdColorGray40
       10079487 -> WdColorTan
       10092543 -> WdColorLightYellow
       10526880 -> WdColorGray375
       10921638 -> WdColorGray35
       11776947 -> WdColorGray30
       12632256 -> WdColorGray25
       13408767 -> WdColorRose
       13421619 -> WdColorAqua
       13421772 -> WdColorGray20
       13434828 -> WdColorLightGreen
       14277081 -> WdColorGray15
       14737632 -> WdColorGray125
       15132390 -> WdColorGray10
       15987699 -> WdColorGray05
       16711680 -> WdColorBlue
       16711935 -> WdColorPink
       16737843 -> WdColorLightBlue
       16751052 -> WdColorLavender
       16763904 -> WdColorSkyBlue
       16764057 -> WdColorPaleBlue
       16776960 -> WdColorTurquoise
       16777164 -> WdColorLightTurquoise
       16777215 -> WdColorWhite
       _ -> error "unmarshallWdColor: illegal enum value "
  
instance Variant (WdColor) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdShapePosition
 = WdShapeTop
 | WdShapeLeft
 | WdShapeBottom
 | WdShapeRight
 | WdShapeCenter
 | WdShapeInside
 | WdShapeOutside
 
instance Enum (WdShapePosition) where
  fromEnum v =
    case v of
       WdShapeTop -> (-999999)
       WdShapeLeft -> (-999998)
       WdShapeBottom -> (-999997)
       WdShapeRight -> (-999996)
       WdShapeCenter -> (-999995)
       WdShapeInside -> (-999994)
       WdShapeOutside -> (-999993)
  
  toEnum v =
    case v of
       (-999999) -> WdShapeTop
       (-999998) -> WdShapeLeft
       (-999997) -> WdShapeBottom
       (-999996) -> WdShapeRight
       (-999995) -> WdShapeCenter
       (-999994) -> WdShapeInside
       (-999993) -> WdShapeOutside
       _ -> error "unmarshallWdShapePosition: illegal enum value "
  
instance Variant (WdShapePosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTablePosition
 = WdTableTop
 | WdTableLeft
 | WdTableBottom
 | WdTableRight
 | WdTableCenter
 | WdTableInside
 | WdTableOutside
 
instance Enum (WdTablePosition) where
  fromEnum v =
    case v of
       WdTableTop -> (-999999)
       WdTableLeft -> (-999998)
       WdTableBottom -> (-999997)
       WdTableRight -> (-999996)
       WdTableCenter -> (-999995)
       WdTableInside -> (-999994)
       WdTableOutside -> (-999993)
  
  toEnum v =
    case v of
       (-999999) -> WdTableTop
       (-999998) -> WdTableLeft
       (-999997) -> WdTableBottom
       (-999996) -> WdTableRight
       (-999995) -> WdTableCenter
       (-999994) -> WdTableInside
       (-999993) -> WdTableOutside
       _ -> error "unmarshallWdTablePosition: illegal enum value "
  
instance Variant (WdTablePosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDefaultListBehavior
 = WdDefaultListBehaviorList__ [WdDefaultListBehavior]
 | WdWord8ListBehavior
 | WdWord9ListBehavior
 | WdWord10ListBehavior
 
instance Flags (WdDefaultListBehavior) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDefaultListBehavior) where
  fromEnum v =
    case v of
       (WdDefaultListBehaviorList__ xs) -> orList (map fromEnum xs)
       WdWord8ListBehavior -> 0
       WdWord9ListBehavior -> 1
       WdWord10ListBehavior -> 2
  
  toEnum v =
    case v of
       0 -> WdWord8ListBehavior
       1 -> WdWord9ListBehavior
       2 -> WdWord10ListBehavior
       x -> WdDefaultListBehaviorList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDefaultListBehavior: illegal enum value "
  
instance Variant (WdDefaultListBehavior) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDefaultTableBehavior
 = WdDefaultTableBehaviorList__ [WdDefaultTableBehavior]
 | WdWord8TableBehavior
 | WdWord9TableBehavior
 
instance Flags (WdDefaultTableBehavior) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDefaultTableBehavior) where
  fromEnum v =
    case v of
       (WdDefaultTableBehaviorList__ xs) -> orList (map fromEnum xs)
       WdWord8TableBehavior -> 0
       WdWord9TableBehavior -> 1
  
  toEnum v =
    case v of
       0 -> WdWord8TableBehavior
       1 -> WdWord9TableBehavior
       x -> WdDefaultTableBehaviorList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                               then Just (toEnum (fromIntegral val))
                                                               else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdDefaultTableBehavior: illegal enum value "
  
instance Variant (WdDefaultTableBehavior) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAutoFitBehavior
 = WdAutoFitBehaviorList__ [WdAutoFitBehavior]
 | WdAutoFitFixed
 | WdAutoFitContent
 | WdAutoFitWindow
 
instance Flags (WdAutoFitBehavior) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdAutoFitBehavior) where
  fromEnum v =
    case v of
       (WdAutoFitBehaviorList__ xs) -> orList (map fromEnum xs)
       WdAutoFitFixed -> 0
       WdAutoFitContent -> 1
       WdAutoFitWindow -> 2
  
  toEnum v =
    case v of
       0 -> WdAutoFitFixed
       1 -> WdAutoFitContent
       2 -> WdAutoFitWindow
       x -> WdAutoFitBehaviorList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdAutoFitBehavior: illegal enum value "
  
instance Variant (WdAutoFitBehavior) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPreferredWidthType
 = WdPreferredWidthAuto
 | WdPreferredWidthPercent
 | WdPreferredWidthPoints
 
instance Enum (WdPreferredWidthType) where
  fromEnum v =
    case v of
       WdPreferredWidthAuto -> 1
       WdPreferredWidthPercent -> 2
       WdPreferredWidthPoints -> 3
  
  toEnum v =
    case v of
       1 -> WdPreferredWidthAuto
       2 -> WdPreferredWidthPercent
       3 -> WdPreferredWidthPoints
       _ -> error "unmarshallWdPreferredWidthType: illegal enum value "
  
instance Variant (WdPreferredWidthType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFarEastLineBreakLanguageID
 = WdLineBreakTraditionalChinese
 | WdLineBreakJapanese
 | WdLineBreakKorean
 | WdLineBreakSimplifiedChinese
 
instance Enum (WdFarEastLineBreakLanguageID) where
  fromEnum v =
    case v of
       WdLineBreakTraditionalChinese -> 1028
       WdLineBreakJapanese -> 1041
       WdLineBreakKorean -> 1042
       WdLineBreakSimplifiedChinese -> 2052
  
  toEnum v =
    case v of
       1028 -> WdLineBreakTraditionalChinese
       1041 -> WdLineBreakJapanese
       1042 -> WdLineBreakKorean
       2052 -> WdLineBreakSimplifiedChinese
       _ -> error "unmarshallWdFarEastLineBreakLanguageID: illegal enum value "
  
instance Variant (WdFarEastLineBreakLanguageID) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdViewTypeOld
 = WdViewTypeOldList__ [WdViewTypeOld]
 | WdPageView
 | WdOnlineView
 
instance Flags (WdViewTypeOld) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdViewTypeOld) where
  fromEnum v =
    case v of
       (WdViewTypeOldList__ xs) -> orList (map fromEnum xs)
       WdPageView -> 3
       WdOnlineView -> 6
  
  toEnum v =
    case v of
       3 -> WdPageView
       6 -> WdOnlineView
       x -> WdViewTypeOldList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 3))
       _ -> error "unmarshallWdViewTypeOld: illegal enum value "
  
instance Variant (WdViewTypeOld) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFramesetType
 = WdFramesetTypeList__ [WdFramesetType]
 | WdFramesetTypeFrameset
 | WdFramesetTypeFrame
 
instance Flags (WdFramesetType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFramesetType) where
  fromEnum v =
    case v of
       (WdFramesetTypeList__ xs) -> orList (map fromEnum xs)
       WdFramesetTypeFrameset -> 0
       WdFramesetTypeFrame -> 1
  
  toEnum v =
    case v of
       0 -> WdFramesetTypeFrameset
       1 -> WdFramesetTypeFrame
       x -> WdFramesetTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                       then Just (toEnum (fromIntegral val))
                                                       else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdFramesetType: illegal enum value "
  
instance Variant (WdFramesetType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFramesetSizeType
 = WdFramesetSizeTypeList__ [WdFramesetSizeType]
 | WdFramesetSizeTypePercent
 | WdFramesetSizeTypeFixed
 | WdFramesetSizeTypeRelative
 
instance Flags (WdFramesetSizeType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFramesetSizeType) where
  fromEnum v =
    case v of
       (WdFramesetSizeTypeList__ xs) -> orList (map fromEnum xs)
       WdFramesetSizeTypePercent -> 0
       WdFramesetSizeTypeFixed -> 1
       WdFramesetSizeTypeRelative -> 2
  
  toEnum v =
    case v of
       0 -> WdFramesetSizeTypePercent
       1 -> WdFramesetSizeTypeFixed
       2 -> WdFramesetSizeTypeRelative
       x -> WdFramesetSizeTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                           then Just (toEnum (fromIntegral val))
                                                           else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdFramesetSizeType: illegal enum value "
  
instance Variant (WdFramesetSizeType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFramesetNewFrameLocation
 = WdFramesetNewFrameAbove
 | WdFramesetNewFrameBelow
 | WdFramesetNewFrameRight
 | WdFramesetNewFrameLeft
 deriving (Enum)
instance Variant (WdFramesetNewFrameLocation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdScrollbarType
 = WdScrollbarTypeList__ [WdScrollbarType]
 | WdScrollbarTypeAuto
 | WdScrollbarTypeYes
 | WdScrollbarTypeNo
 
instance Flags (WdScrollbarType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdScrollbarType) where
  fromEnum v =
    case v of
       (WdScrollbarTypeList__ xs) -> orList (map fromEnum xs)
       WdScrollbarTypeAuto -> 0
       WdScrollbarTypeYes -> 1
       WdScrollbarTypeNo -> 2
  
  toEnum v =
    case v of
       0 -> WdScrollbarTypeAuto
       1 -> WdScrollbarTypeYes
       2 -> WdScrollbarTypeNo
       x -> WdScrollbarTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdScrollbarType: illegal enum value "
  
instance Variant (WdScrollbarType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTwoLinesInOneType
 = WdTwoLinesInOneNone
 | WdTwoLinesInOneNoBrackets
 | WdTwoLinesInOneParentheses
 | WdTwoLinesInOneSquareBrackets
 | WdTwoLinesInOneAngleBrackets
 | WdTwoLinesInOneCurlyBrackets
 deriving (Enum)
instance Variant (WdTwoLinesInOneType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHorizontalInVerticalType
 = WdHorizontalInVerticalTypeList__ [WdHorizontalInVerticalType]
 | WdHorizontalInVerticalNone
 | WdHorizontalInVerticalFitInLine
 | WdHorizontalInVerticalResizeLine
 
instance Flags (WdHorizontalInVerticalType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdHorizontalInVerticalType) where
  fromEnum v =
    case v of
       (WdHorizontalInVerticalTypeList__ xs) -> orList (map fromEnum xs)
       WdHorizontalInVerticalNone -> 0
       WdHorizontalInVerticalFitInLine -> 1
       WdHorizontalInVerticalResizeLine -> 2
  
  toEnum v =
    case v of
       0 -> WdHorizontalInVerticalNone
       1 -> WdHorizontalInVerticalFitInLine
       2 -> WdHorizontalInVerticalResizeLine
       x -> WdHorizontalInVerticalTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                   then Just (toEnum (fromIntegral val))
                                                                   else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdHorizontalInVerticalType: illegal enum value "
  
instance Variant (WdHorizontalInVerticalType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHorizontalLineAlignment
 = WdHorizontalLineAlignmentList__ [WdHorizontalLineAlignment]
 | WdHorizontalLineAlignLeft
 | WdHorizontalLineAlignCenter
 | WdHorizontalLineAlignRight
 
instance Flags (WdHorizontalLineAlignment) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdHorizontalLineAlignment) where
  fromEnum v =
    case v of
       (WdHorizontalLineAlignmentList__ xs) -> orList (map fromEnum xs)
       WdHorizontalLineAlignLeft -> 0
       WdHorizontalLineAlignCenter -> 1
       WdHorizontalLineAlignRight -> 2
  
  toEnum v =
    case v of
       0 -> WdHorizontalLineAlignLeft
       1 -> WdHorizontalLineAlignCenter
       2 -> WdHorizontalLineAlignRight
       x -> WdHorizontalLineAlignmentList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                  then Just (toEnum (fromIntegral val))
                                                                  else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdHorizontalLineAlignment: illegal enum value "
  
instance Variant (WdHorizontalLineAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdHorizontalLineWidthType
 = WdHorizontalLineFixedWidth
 | WdHorizontalLinePercentWidth
 
instance Enum (WdHorizontalLineWidthType) where
  fromEnum v =
    case v of
       WdHorizontalLineFixedWidth -> (-2)
       WdHorizontalLinePercentWidth -> (-1)
  
  toEnum v =
    case v of
       (-2) -> WdHorizontalLineFixedWidth
       (-1) -> WdHorizontalLinePercentWidth
       _ -> error "unmarshallWdHorizontalLineWidthType: illegal enum value "
  
instance Variant (WdHorizontalLineWidthType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPhoneticGuideAlignmentType
 = WdPhoneticGuideAlignmentCenter
 | WdPhoneticGuideAlignmentZeroOneZero
 | WdPhoneticGuideAlignmentOneTwoOne
 | WdPhoneticGuideAlignmentLeft
 | WdPhoneticGuideAlignmentRight
 | WdPhoneticGuideAlignmentRightVertical
 deriving (Enum)
instance Variant (WdPhoneticGuideAlignmentType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdNewDocumentType
 = WdNewBlankDocument
 | WdNewWebPage
 | WdNewEmailMessage
 | WdNewFrameset
 | WdNewXMLDocument
 deriving (Enum)
instance Variant (WdNewDocumentType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdKana
 = WdKanaKatakana
 | WdKanaHiragana
 
instance Enum (WdKana) where
  fromEnum v =
    case v of
       WdKanaKatakana -> 8
       WdKanaHiragana -> 9
  
  toEnum v =
    case v of
       8 -> WdKanaKatakana
       9 -> WdKanaHiragana
       _ -> error "unmarshallWdKana: illegal enum value "
  
instance Variant (WdKana) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCharacterWidth
 = WdWidthHalfWidth
 | WdWidthFullWidth
 
instance Enum (WdCharacterWidth) where
  fromEnum v =
    case v of
       WdWidthHalfWidth -> 6
       WdWidthFullWidth -> 7
  
  toEnum v =
    case v of
       6 -> WdWidthHalfWidth
       7 -> WdWidthFullWidth
       _ -> error "unmarshallWdCharacterWidth: illegal enum value "
  
instance Variant (WdCharacterWidth) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdNumberStyleWordBasicBiDi
 = WdListNumberStyleBidi1
 | WdCaptionNumberStyleBidiLetter1
 | WdNoteNumberStyleBidiLetter1
 | WdPageNumberStyleBidiLetter1
 | WdListNumberStyleBidi2
 | WdCaptionNumberStyleBidiLetter2
 | WdNoteNumberStyleBidiLetter2
 | WdPageNumberStyleBidiLetter2
 
instance Enum (WdNumberStyleWordBasicBiDi) where
  fromEnum v =
    case v of
       WdListNumberStyleBidi1 -> 49
       WdCaptionNumberStyleBidiLetter1 -> 49
       WdNoteNumberStyleBidiLetter1 -> 49
       WdPageNumberStyleBidiLetter1 -> 49
       WdListNumberStyleBidi2 -> 50
       WdCaptionNumberStyleBidiLetter2 -> 50
       WdNoteNumberStyleBidiLetter2 -> 50
       WdPageNumberStyleBidiLetter2 -> 50
  
  toEnum v =
    case v of
       49 -> WdListNumberStyleBidi1
       49 -> WdCaptionNumberStyleBidiLetter1
       49 -> WdNoteNumberStyleBidiLetter1
       49 -> WdPageNumberStyleBidiLetter1
       50 -> WdListNumberStyleBidi2
       50 -> WdCaptionNumberStyleBidiLetter2
       50 -> WdNoteNumberStyleBidiLetter2
       50 -> WdPageNumberStyleBidiLetter2
       _ -> error "unmarshallWdNumberStyleWordBasicBiDi: illegal enum value "
  
instance Variant (WdNumberStyleWordBasicBiDi) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTCSCConverterDirection
 = WdTCSCConverterDirectionList__ [WdTCSCConverterDirection]
 | WdTCSCConverterDirectionSCTC
 | WdTCSCConverterDirectionTCSC
 | WdTCSCConverterDirectionAuto
 
instance Flags (WdTCSCConverterDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdTCSCConverterDirection) where
  fromEnum v =
    case v of
       (WdTCSCConverterDirectionList__ xs) -> orList (map fromEnum xs)
       WdTCSCConverterDirectionSCTC -> 0
       WdTCSCConverterDirectionTCSC -> 1
       WdTCSCConverterDirectionAuto -> 2
  
  toEnum v =
    case v of
       0 -> WdTCSCConverterDirectionSCTC
       1 -> WdTCSCConverterDirectionTCSC
       2 -> WdTCSCConverterDirectionAuto
       x -> WdTCSCConverterDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                 then Just (toEnum (fromIntegral val))
                                                                 else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdTCSCConverterDirection: illegal enum value "
  
instance Variant (WdTCSCConverterDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
-- --------------------------------------------------
-- 
-- interface EmailAuthor
-- 
-- --------------------------------------------------
data EmailAuthor_ a = EmailAuthor__ 
type EmailAuthor a = IDispatch (EmailAuthor_ a)
iidEmailAuthor :: IID (EmailAuthor ())
iidEmailAuthor = mkIID "{000209D7-0000-0000-C000-000000000046}"

getApplication184 :: EmailAuthor a0
                  -> IO (Maybe Application)
getApplication184 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator184 :: EmailAuthor a0
              -> IO Int32
getCreator184 =
  propertyGet "Creator"
              []
              outInt32

getParent184 :: EmailAuthor a0
             -> IO (IDispatch ())
getParent184 =
  propertyGet "Parent"
              []
              outIDispatch

getStyle11 :: EmailAuthor a0
           -> IO (Style ())
getStyle11 =
  propertyGet "Style"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface EmailOptions
-- 
-- --------------------------------------------------
data EmailOptions_ a = EmailOptions__ 
type EmailOptions a = IDispatch (EmailOptions_ a)
iidEmailOptions :: IID (EmailOptions ())
iidEmailOptions = mkIID "{000209DB-0000-0000-C000-000000000046}"

getApplication185 :: EmailOptions a0
                  -> IO (Maybe Application)
getApplication185 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator185 :: EmailOptions a0
              -> IO Int32
getCreator185 =
  propertyGet "Creator"
              []
              outInt32

getParent185 :: EmailOptions a0
             -> IO (IDispatch ())
getParent185 =
  propertyGet "Parent"
              []
              outIDispatch

getUseThemeStyle :: EmailOptions a0
                 -> IO Bool
getUseThemeStyle =
  propertyGet "UseThemeStyle"
              []
              outBool

setUseThemeStyle :: Bool
                 -> EmailOptions a0
                 -> IO ()
setUseThemeStyle prop =
  propertySet "UseThemeStyle"
              [inBool prop]

getMarkCommentsWith :: EmailOptions a0
                    -> IO String
getMarkCommentsWith =
  propertyGet "MarkCommentsWith"
              []
              outString

setMarkCommentsWith :: String
                    -> EmailOptions a0
                    -> IO ()
setMarkCommentsWith prop =
  propertySet "MarkCommentsWith"
              [inString prop]

getMarkComments :: EmailOptions a0
                -> IO Bool
getMarkComments =
  propertyGet "MarkComments"
              []
              outBool

setMarkComments :: Bool
                -> EmailOptions a0
                -> IO ()
setMarkComments prop =
  propertySet "MarkComments"
              [inBool prop]

getEmailSignature :: EmailOptions a0
                  -> IO (EmailSignature ())
getEmailSignature =
  propertyGet "EmailSignature"
              []
              outIUnknown

getComposeStyle :: EmailOptions a0
                -> IO (Style ())
getComposeStyle =
  propertyGet "ComposeStyle"
              []
              outIDispatch

getReplyStyle :: EmailOptions a0
              -> IO (Style ())
getReplyStyle =
  propertyGet "ReplyStyle"
              []
              outIDispatch

getThemeName :: EmailOptions a0
             -> IO String
getThemeName =
  propertyGet "ThemeName"
              []
              outString

setThemeName :: String
             -> EmailOptions a0
             -> IO ()
setThemeName prop =
  propertySet "ThemeName"
              [inString prop]

getDummy11 :: EmailOptions a0
           -> IO Bool
getDummy11 =
  propertyGet "Dummy1"
              []
              outBool

getDummy2 :: EmailOptions a0
          -> IO Bool
getDummy2 =
  propertyGet "Dummy2"
              []
              outBool

dummy3 :: EmailOptions a0
       -> IO ()
dummy3 =
  method0 "Dummy3"
          []

getNewColorOnReply :: EmailOptions a0
                   -> IO Bool
getNewColorOnReply =
  propertyGet "NewColorOnReply"
              []
              outBool

setNewColorOnReply :: Bool
                   -> EmailOptions a0
                   -> IO ()
setNewColorOnReply prop =
  propertySet "NewColorOnReply"
              [inBool prop]

getPlainTextStyle :: EmailOptions a0
                  -> IO (Style ())
getPlainTextStyle =
  propertyGet "PlainTextStyle"
              []
              outIDispatch

getUseThemeStyleOnReply :: EmailOptions a0
                        -> IO Bool
getUseThemeStyleOnReply =
  propertyGet "UseThemeStyleOnReply"
              []
              outBool

setUseThemeStyleOnReply :: Bool
                        -> EmailOptions a0
                        -> IO ()
setUseThemeStyleOnReply prop =
  propertySet "UseThemeStyleOnReply"
              [inBool prop]

getAutoFormatAsYouTypeApplyHeadings0 :: EmailOptions a0
                                     -> IO Bool
getAutoFormatAsYouTypeApplyHeadings0 =
  propertyGet "AutoFormatAsYouTypeApplyHeadings"
              []
              outBool

setAutoFormatAsYouTypeApplyHeadings0 :: Bool
                                     -> EmailOptions a0
                                     -> IO ()
setAutoFormatAsYouTypeApplyHeadings0 prop =
  propertySet "AutoFormatAsYouTypeApplyHeadings"
              [inBool prop]

getAutoFormatAsYouTypeApplyBorders0 :: EmailOptions a0
                                    -> IO Bool
getAutoFormatAsYouTypeApplyBorders0 =
  propertyGet "AutoFormatAsYouTypeApplyBorders"
              []
              outBool

setAutoFormatAsYouTypeApplyBorders0 :: Bool
                                    -> EmailOptions a0
                                    -> IO ()
setAutoFormatAsYouTypeApplyBorders0 prop =
  propertySet "AutoFormatAsYouTypeApplyBorders"
              [inBool prop]

getAutoFormatAsYouTypeApplyBulletedLists0 :: EmailOptions a0
                                          -> IO Bool
getAutoFormatAsYouTypeApplyBulletedLists0 =
  propertyGet "AutoFormatAsYouTypeApplyBulletedLists"
              []
              outBool

setAutoFormatAsYouTypeApplyBulletedLists0 :: Bool
                                          -> EmailOptions a0
                                          -> IO ()
setAutoFormatAsYouTypeApplyBulletedLists0 prop =
  propertySet "AutoFormatAsYouTypeApplyBulletedLists"
              [inBool prop]

getAutoFormatAsYouTypeApplyNumberedLists0 :: EmailOptions a0
                                          -> IO Bool
getAutoFormatAsYouTypeApplyNumberedLists0 =
  propertyGet "AutoFormatAsYouTypeApplyNumberedLists"
              []
              outBool

setAutoFormatAsYouTypeApplyNumberedLists0 :: Bool
                                          -> EmailOptions a0
                                          -> IO ()
setAutoFormatAsYouTypeApplyNumberedLists0 prop =
  propertySet "AutoFormatAsYouTypeApplyNumberedLists"
              [inBool prop]

getAutoFormatAsYouTypeReplaceQuotes0 :: EmailOptions a0
                                     -> IO Bool
getAutoFormatAsYouTypeReplaceQuotes0 =
  propertyGet "AutoFormatAsYouTypeReplaceQuotes"
              []
              outBool

setAutoFormatAsYouTypeReplaceQuotes0 :: Bool
                                     -> EmailOptions a0
                                     -> IO ()
setAutoFormatAsYouTypeReplaceQuotes0 prop =
  propertySet "AutoFormatAsYouTypeReplaceQuotes"
              [inBool prop]

getAutoFormatAsYouTypeReplaceSymbols0 :: EmailOptions a0
                                      -> IO Bool
getAutoFormatAsYouTypeReplaceSymbols0 =
  propertyGet "AutoFormatAsYouTypeReplaceSymbols"
              []
              outBool

setAutoFormatAsYouTypeReplaceSymbols0 :: Bool
                                      -> EmailOptions a0
                                      -> IO ()
setAutoFormatAsYouTypeReplaceSymbols0 prop =
  propertySet "AutoFormatAsYouTypeReplaceSymbols"
              [inBool prop]

getAutoFormatAsYouTypeReplaceOrdinals0 :: EmailOptions a0
                                       -> IO Bool
getAutoFormatAsYouTypeReplaceOrdinals0 =
  propertyGet "AutoFormatAsYouTypeReplaceOrdinals"
              []
              outBool

setAutoFormatAsYouTypeReplaceOrdinals0 :: Bool
                                       -> EmailOptions a0
                                       -> IO ()
setAutoFormatAsYouTypeReplaceOrdinals0 prop =
  propertySet "AutoFormatAsYouTypeReplaceOrdinals"
              [inBool prop]

getAutoFormatAsYouTypeReplaceFractions0 :: EmailOptions a0
                                        -> IO Bool
getAutoFormatAsYouTypeReplaceFractions0 =
  propertyGet "AutoFormatAsYouTypeReplaceFractions"
              []
              outBool

setAutoFormatAsYouTypeReplaceFractions0 :: Bool
                                        -> EmailOptions a0
                                        -> IO ()
setAutoFormatAsYouTypeReplaceFractions0 prop =
  propertySet "AutoFormatAsYouTypeReplaceFractions"
              [inBool prop]

getAutoFormatAsYouTypeReplacePlainTextEmphasis0 :: EmailOptions a0
                                                -> IO Bool
getAutoFormatAsYouTypeReplacePlainTextEmphasis0 =
  propertyGet "AutoFormatAsYouTypeReplacePlainTextEmphasis"
              []
              outBool

setAutoFormatAsYouTypeReplacePlainTextEmphasis0 :: Bool
                                                -> EmailOptions a0
                                                -> IO ()
setAutoFormatAsYouTypeReplacePlainTextEmphasis0 prop =
  propertySet "AutoFormatAsYouTypeReplacePlainTextEmphasis"
              [inBool prop]

getAutoFormatAsYouTypeFormatListItemBeginning0 :: EmailOptions a0
                                               -> IO Bool
getAutoFormatAsYouTypeFormatListItemBeginning0 =
  propertyGet "AutoFormatAsYouTypeFormatListItemBeginning"
              []
              outBool

setAutoFormatAsYouTypeFormatListItemBeginning0 :: Bool
                                               -> EmailOptions a0
                                               -> IO ()
setAutoFormatAsYouTypeFormatListItemBeginning0 prop =
  propertySet "AutoFormatAsYouTypeFormatListItemBeginning"
              [inBool prop]

getAutoFormatAsYouTypeDefineStyles0 :: EmailOptions a0
                                    -> IO Bool
getAutoFormatAsYouTypeDefineStyles0 =
  propertyGet "AutoFormatAsYouTypeDefineStyles"
              []
              outBool

setAutoFormatAsYouTypeDefineStyles0 :: Bool
                                    -> EmailOptions a0
                                    -> IO ()
setAutoFormatAsYouTypeDefineStyles0 prop =
  propertySet "AutoFormatAsYouTypeDefineStyles"
              [inBool prop]

getAutoFormatAsYouTypeReplaceHyperlinks0 :: EmailOptions a0
                                         -> IO Bool
getAutoFormatAsYouTypeReplaceHyperlinks0 =
  propertyGet "AutoFormatAsYouTypeReplaceHyperlinks"
              []
              outBool

setAutoFormatAsYouTypeReplaceHyperlinks0 :: Bool
                                         -> EmailOptions a0
                                         -> IO ()
setAutoFormatAsYouTypeReplaceHyperlinks0 prop =
  propertySet "AutoFormatAsYouTypeReplaceHyperlinks"
              [inBool prop]

getAutoFormatAsYouTypeApplyTables0 :: EmailOptions a0
                                   -> IO Bool
getAutoFormatAsYouTypeApplyTables0 =
  propertyGet "AutoFormatAsYouTypeApplyTables"
              []
              outBool

setAutoFormatAsYouTypeApplyTables0 :: Bool
                                   -> EmailOptions a0
                                   -> IO ()
setAutoFormatAsYouTypeApplyTables0 prop =
  propertySet "AutoFormatAsYouTypeApplyTables"
              [inBool prop]

getAutoFormatAsYouTypeApplyFirstIndents0 :: EmailOptions a0
                                         -> IO Bool
getAutoFormatAsYouTypeApplyFirstIndents0 =
  propertyGet "AutoFormatAsYouTypeApplyFirstIndents"
              []
              outBool

setAutoFormatAsYouTypeApplyFirstIndents0 :: Bool
                                         -> EmailOptions a0
                                         -> IO ()
setAutoFormatAsYouTypeApplyFirstIndents0 prop =
  propertySet "AutoFormatAsYouTypeApplyFirstIndents"
              [inBool prop]

getAutoFormatAsYouTypeApplyDates0 :: EmailOptions a0
                                  -> IO Bool
getAutoFormatAsYouTypeApplyDates0 =
  propertyGet "AutoFormatAsYouTypeApplyDates"
              []
              outBool

setAutoFormatAsYouTypeApplyDates0 :: Bool
                                  -> EmailOptions a0
                                  -> IO ()
setAutoFormatAsYouTypeApplyDates0 prop =
  propertySet "AutoFormatAsYouTypeApplyDates"
              [inBool prop]

getAutoFormatAsYouTypeApplyClosings0 :: EmailOptions a0
                                     -> IO Bool
getAutoFormatAsYouTypeApplyClosings0 =
  propertyGet "AutoFormatAsYouTypeApplyClosings"
              []
              outBool

setAutoFormatAsYouTypeApplyClosings0 :: Bool
                                     -> EmailOptions a0
                                     -> IO ()
setAutoFormatAsYouTypeApplyClosings0 prop =
  propertySet "AutoFormatAsYouTypeApplyClosings"
              [inBool prop]

getAutoFormatAsYouTypeMatchParentheses0 :: EmailOptions a0
                                        -> IO Bool
getAutoFormatAsYouTypeMatchParentheses0 =
  propertyGet "AutoFormatAsYouTypeMatchParentheses"
              []
              outBool

setAutoFormatAsYouTypeMatchParentheses0 :: Bool
                                        -> EmailOptions a0
                                        -> IO ()
setAutoFormatAsYouTypeMatchParentheses0 prop =
  propertySet "AutoFormatAsYouTypeMatchParentheses"
              [inBool prop]

getAutoFormatAsYouTypeReplaceFarEastDashes0 :: EmailOptions a0
                                            -> IO Bool
getAutoFormatAsYouTypeReplaceFarEastDashes0 =
  propertyGet "AutoFormatAsYouTypeReplaceFarEastDashes"
              []
              outBool

setAutoFormatAsYouTypeReplaceFarEastDashes0 :: Bool
                                            -> EmailOptions a0
                                            -> IO ()
setAutoFormatAsYouTypeReplaceFarEastDashes0 prop =
  propertySet "AutoFormatAsYouTypeReplaceFarEastDashes"
              [inBool prop]

getAutoFormatAsYouTypeDeleteAutoSpaces0 :: EmailOptions a0
                                        -> IO Bool
getAutoFormatAsYouTypeDeleteAutoSpaces0 =
  propertyGet "AutoFormatAsYouTypeDeleteAutoSpaces"
              []
              outBool

setAutoFormatAsYouTypeDeleteAutoSpaces0 :: Bool
                                        -> EmailOptions a0
                                        -> IO ()
setAutoFormatAsYouTypeDeleteAutoSpaces0 prop =
  propertySet "AutoFormatAsYouTypeDeleteAutoSpaces"
              [inBool prop]

getAutoFormatAsYouTypeInsertClosings0 :: EmailOptions a0
                                      -> IO Bool
getAutoFormatAsYouTypeInsertClosings0 =
  propertyGet "AutoFormatAsYouTypeInsertClosings"
              []
              outBool

setAutoFormatAsYouTypeInsertClosings0 :: Bool
                                      -> EmailOptions a0
                                      -> IO ()
setAutoFormatAsYouTypeInsertClosings0 prop =
  propertySet "AutoFormatAsYouTypeInsertClosings"
              [inBool prop]

getAutoFormatAsYouTypeAutoLetterWizard0 :: EmailOptions a0
                                        -> IO Bool
getAutoFormatAsYouTypeAutoLetterWizard0 =
  propertyGet "AutoFormatAsYouTypeAutoLetterWizard"
              []
              outBool

setAutoFormatAsYouTypeAutoLetterWizard0 :: Bool
                                        -> EmailOptions a0
                                        -> IO ()
setAutoFormatAsYouTypeAutoLetterWizard0 prop =
  propertySet "AutoFormatAsYouTypeAutoLetterWizard"
              [inBool prop]

getAutoFormatAsYouTypeInsertOvers0 :: EmailOptions a0
                                   -> IO Bool
getAutoFormatAsYouTypeInsertOvers0 =
  propertyGet "AutoFormatAsYouTypeInsertOvers"
              []
              outBool

setAutoFormatAsYouTypeInsertOvers0 :: Bool
                                   -> EmailOptions a0
                                   -> IO ()
setAutoFormatAsYouTypeInsertOvers0 prop =
  propertySet "AutoFormatAsYouTypeInsertOvers"
              [inBool prop]

getRelyOnCSS :: EmailOptions a0
             -> IO Bool
getRelyOnCSS =
  propertyGet "RelyOnCSS"
              []
              outBool

setRelyOnCSS :: Bool
             -> EmailOptions a0
             -> IO ()
setRelyOnCSS prop =
  propertySet "RelyOnCSS"
              [inBool prop]

getHTMLFidelity :: EmailOptions a0
                -> IO WdEmailHTMLFidelity
getHTMLFidelity =
  propertyGet "HTMLFidelity"
              []
              outEnum

setHTMLFidelity :: WdEmailHTMLFidelity
                -> EmailOptions a0
                -> IO ()
setHTMLFidelity prop =
  propertySet "HTMLFidelity"
              [inEnum prop]

getEmbedSmartTag :: EmailOptions a0
                 -> IO Bool
getEmbedSmartTag =
  propertyGet "EmbedSmartTag"
              []
              outBool

setEmbedSmartTag :: Bool
                 -> EmailOptions a0
                 -> IO ()
setEmbedSmartTag prop =
  propertySet "EmbedSmartTag"
              [inBool prop]

getTabIndentKey0 :: EmailOptions a0
                 -> IO Bool
getTabIndentKey0 =
  propertyGet "TabIndentKey"
              []
              outBool

setTabIndentKey0 :: Bool
                 -> EmailOptions a0
                 -> IO ()
setTabIndentKey0 prop =
  propertySet "TabIndentKey"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface EmailSignature
-- 
-- --------------------------------------------------
data EmailSignature_ a = EmailSignature__ 
type EmailSignature a = IDispatch (EmailSignature_ a)
iidEmailSignature :: IID (EmailSignature ())
iidEmailSignature = mkIID "{000209DC-0000-0000-C000-000000000046}"

getApplication186 :: EmailSignature a0
                  -> IO (Maybe Application)
getApplication186 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator186 :: EmailSignature a0
              -> IO Int32
getCreator186 =
  propertyGet "Creator"
              []
              outInt32

getParent186 :: EmailSignature a0
             -> IO (IDispatch ())
getParent186 =
  propertyGet "Parent"
              []
              outIDispatch

getNewMessageSignature :: EmailSignature a0
                       -> IO String
getNewMessageSignature =
  propertyGet "NewMessageSignature"
              []
              outString

setNewMessageSignature :: String
                       -> EmailSignature a0
                       -> IO ()
setNewMessageSignature prop =
  propertySet "NewMessageSignature"
              [inString prop]

getReplyMessageSignature :: EmailSignature a0
                         -> IO String
getReplyMessageSignature =
  propertyGet "ReplyMessageSignature"
              []
              outString

setReplyMessageSignature :: String
                         -> EmailSignature a0
                         -> IO ()
setReplyMessageSignature prop =
  propertySet "ReplyMessageSignature"
              [inString prop]

getEmailSignatureEntries :: EmailSignature a0
                         -> IO (EmailSignatureEntries ())
getEmailSignatureEntries =
  propertyGet "EmailSignatureEntries"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface Email
-- 
-- --------------------------------------------------
data Email_ a = Email__ 
type Email a = IDispatch (Email_ a)
iidEmail :: IID (Email ())
iidEmail = mkIID "{000209DD-0000-0000-C000-000000000046}"

getApplication187 :: Email a0
                  -> IO (Maybe Application)
getApplication187 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator187 :: Email a0
              -> IO Int32
getCreator187 =
  propertyGet "Creator"
              []
              outInt32

getParent187 :: Email a0
             -> IO (IDispatch ())
getParent187 =
  propertyGet "Parent"
              []
              outIDispatch

getCurrentEmailAuthor :: Email a0
                      -> IO (EmailAuthor ())
getCurrentEmailAuthor =
  propertyGet "CurrentEmailAuthor"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface HorizontalLineFormat
-- 
-- --------------------------------------------------
data HorizontalLineFormat_ a = HorizontalLineFormat__ 
type HorizontalLineFormat a = IDispatch (HorizontalLineFormat_ a)
iidHorizontalLineFormat :: IID (HorizontalLineFormat ())
iidHorizontalLineFormat =
  mkIID "{000209DE-0000-0000-C000-000000000046}"

getApplication188 :: HorizontalLineFormat a0
                  -> IO (Maybe Application)
getApplication188 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator188 :: HorizontalLineFormat a0
              -> IO Int32
getCreator188 =
  propertyGet "Creator"
              []
              outInt32

getParent188 :: HorizontalLineFormat a0
             -> IO (IDispatch ())
getParent188 =
  propertyGet "Parent"
              []
              outIDispatch

getPercentWidth :: HorizontalLineFormat a0
                -> IO Float
getPercentWidth =
  propertyGet "PercentWidth"
              []
              outFloat

setPercentWidth :: Float
                -> HorizontalLineFormat a0
                -> IO ()
setPercentWidth prop =
  propertySet "PercentWidth"
              [inFloat prop]

getNoShade :: HorizontalLineFormat a0
           -> IO Bool
getNoShade =
  propertyGet "NoShade"
              []
              outBool

setNoShade :: Bool
           -> HorizontalLineFormat a0
           -> IO ()
setNoShade prop =
  propertySet "NoShade"
              [inBool prop]

getAlignment8 :: HorizontalLineFormat a0
              -> IO WdHorizontalLineAlignment
getAlignment8 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment8 :: WdHorizontalLineAlignment
              -> HorizontalLineFormat a0
              -> IO ()
setAlignment8 prop =
  propertySet "Alignment"
              [inEnum prop]

getWidthType :: HorizontalLineFormat a0
             -> IO WdHorizontalLineWidthType
getWidthType =
  propertyGet "WidthType"
              []
              outEnum

setWidthType :: WdHorizontalLineWidthType
             -> HorizontalLineFormat a0
             -> IO ()
setWidthType prop =
  propertySet "WidthType"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Frameset
-- 
-- --------------------------------------------------
data Frameset_ a = Frameset__ 
type Frameset a = IDispatch (Frameset_ a)
iidFrameset :: IID (Frameset ())
iidFrameset = mkIID "{000209E2-0000-0000-C000-000000000046}"

getApplication189 :: Frameset a0
                  -> IO (Maybe Application)
getApplication189 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator189 :: Frameset a0
              -> IO Int32
getCreator189 =
  propertyGet "Creator"
              []
              outInt32

getParent189 :: Frameset a0
             -> IO (IDispatch ())
getParent189 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum73 :: Frameset a0
             -> IO (IUnknown ())
getNewEnum73 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getParentFrameset :: Frameset a0
                  -> IO (Frameset ())
getParentFrameset =
  propertyGet "ParentFrameset"
              []
              outIDispatch

getType26 :: Frameset a0
          -> IO WdFramesetType
getType26 =
  propertyGet "Type"
              []
              outEnum

getWidthType0 :: Frameset a0
              -> IO WdFramesetSizeType
getWidthType0 =
  propertyGet "WidthType"
              []
              outEnum

setWidthType0 :: WdFramesetSizeType
              -> Frameset a0
              -> IO ()
setWidthType0 prop =
  propertySet "WidthType"
              [inEnum prop]

getHeightType :: Frameset a0
              -> IO WdFramesetSizeType
getHeightType =
  propertyGet "HeightType"
              []
              outEnum

setHeightType :: WdFramesetSizeType
              -> Frameset a0
              -> IO ()
setHeightType prop =
  propertySet "HeightType"
              [inEnum prop]

getWidth15 :: Frameset a0
           -> IO Int32
getWidth15 =
  propertyGet "Width"
              []
              outInt32

setWidth19 :: Int32
           -> Frameset a0
           -> IO ()
setWidth19 prop =
  propertySet "Width"
              [inInt32 prop]

getHeight12 :: Frameset a0
            -> IO Int32
getHeight12 =
  propertyGet "Height"
              []
              outInt32

setHeight16 :: Int32
            -> Frameset a0
            -> IO ()
setHeight16 prop =
  propertySet "Height"
              [inInt32 prop]

getChildFramesetCount :: Frameset a0
                      -> IO Int32
getChildFramesetCount =
  propertyGet "ChildFramesetCount"
              []
              outInt32

getChildFramesetItem :: Int32
                     -> Frameset a0
                     -> IO (Frameset ())
getChildFramesetItem index =
  propertyGet "ChildFramesetItem"
              [inInt32 index]
              outIDispatch

getFramesetBorderWidth :: Frameset a0
                       -> IO Float
getFramesetBorderWidth =
  propertyGet "FramesetBorderWidth"
              []
              outFloat

setFramesetBorderWidth :: Float
                       -> Frameset a0
                       -> IO ()
setFramesetBorderWidth prop =
  propertySet "FramesetBorderWidth"
              [inFloat prop]

getFramesetBorderColor :: Frameset a0
                       -> IO WdColor
getFramesetBorderColor =
  propertyGet "FramesetBorderColor"
              []
              outEnum

setFramesetBorderColor :: WdColor
                       -> Frameset a0
                       -> IO ()
setFramesetBorderColor prop =
  propertySet "FramesetBorderColor"
              [inEnum prop]

getFrameScrollbarType :: Frameset a0
                      -> IO WdScrollbarType
getFrameScrollbarType =
  propertyGet "FrameScrollbarType"
              []
              outEnum

setFrameScrollbarType :: WdScrollbarType
                      -> Frameset a0
                      -> IO ()
setFrameScrollbarType prop =
  propertySet "FrameScrollbarType"
              [inEnum prop]

getFrameResizable :: Frameset a0
                  -> IO Bool
getFrameResizable =
  propertyGet "FrameResizable"
              []
              outBool

setFrameResizable :: Bool
                  -> Frameset a0
                  -> IO ()
setFrameResizable prop =
  propertySet "FrameResizable"
              [inBool prop]

getFrameName :: Frameset a0
             -> IO String
getFrameName =
  propertyGet "FrameName"
              []
              outString

setFrameName :: String
             -> Frameset a0
             -> IO ()
setFrameName prop =
  propertySet "FrameName"
              [inString prop]

getFrameDisplayBorders :: Frameset a0
                       -> IO Bool
getFrameDisplayBorders =
  propertyGet "FrameDisplayBorders"
              []
              outBool

setFrameDisplayBorders :: Bool
                       -> Frameset a0
                       -> IO ()
setFrameDisplayBorders prop =
  propertySet "FrameDisplayBorders"
              [inBool prop]

getFrameDefaultURL :: Frameset a0
                   -> IO String
getFrameDefaultURL =
  propertyGet "FrameDefaultURL"
              []
              outString

setFrameDefaultURL :: String
                   -> Frameset a0
                   -> IO ()
setFrameDefaultURL prop =
  propertySet "FrameDefaultURL"
              [inString prop]

getFrameLinkToFile :: Frameset a0
                   -> IO Bool
getFrameLinkToFile =
  propertyGet "FrameLinkToFile"
              []
              outBool

setFrameLinkToFile :: Bool
                   -> Frameset a0
                   -> IO ()
setFrameLinkToFile prop =
  propertySet "FrameLinkToFile"
              [inBool prop]

addNewFrame :: WdFramesetNewFrameLocation
            -> Frameset a0
            -> IO (Frameset ())
addNewFrame where0 =
  function1 "AddNewFrame"
            [inEnum where0]
            outIDispatch

delete46 :: Frameset a0
         -> IO ()
delete46 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface DefaultWebOptions
-- 
-- --------------------------------------------------
data DefaultWebOptions_ a = DefaultWebOptions__ 
type DefaultWebOptions a = IDispatch (DefaultWebOptions_ a)
iidDefaultWebOptions :: IID (DefaultWebOptions ())
iidDefaultWebOptions =
  mkIID "{000209E3-0000-0000-C000-000000000046}"

getApplication190 :: DefaultWebOptions a0
                  -> IO (Maybe Application)
getApplication190 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator190 :: DefaultWebOptions a0
              -> IO Int32
getCreator190 =
  propertyGet "Creator"
              []
              outInt32

getParent190 :: DefaultWebOptions a0
             -> IO (IDispatch ())
getParent190 =
  propertyGet "Parent"
              []
              outIDispatch

getOptimizeForBrowser :: DefaultWebOptions a0
                      -> IO Bool
getOptimizeForBrowser =
  propertyGet "OptimizeForBrowser"
              []
              outBool

setOptimizeForBrowser :: Bool
                      -> DefaultWebOptions a0
                      -> IO ()
setOptimizeForBrowser prop =
  propertySet "OptimizeForBrowser"
              [inBool prop]

getBrowserLevel :: DefaultWebOptions a0
                -> IO WdBrowserLevel
getBrowserLevel =
  propertyGet "BrowserLevel"
              []
              outEnum

setBrowserLevel :: WdBrowserLevel
                -> DefaultWebOptions a0
                -> IO ()
setBrowserLevel prop =
  propertySet "BrowserLevel"
              [inEnum prop]

getRelyOnCSS0 :: DefaultWebOptions a0
              -> IO Bool
getRelyOnCSS0 =
  propertyGet "RelyOnCSS"
              []
              outBool

setRelyOnCSS0 :: Bool
              -> DefaultWebOptions a0
              -> IO ()
setRelyOnCSS0 prop =
  propertySet "RelyOnCSS"
              [inBool prop]

getOrganizeInFolder :: DefaultWebOptions a0
                    -> IO Bool
getOrganizeInFolder =
  propertyGet "OrganizeInFolder"
              []
              outBool

setOrganizeInFolder :: Bool
                    -> DefaultWebOptions a0
                    -> IO ()
setOrganizeInFolder prop =
  propertySet "OrganizeInFolder"
              [inBool prop]

getUpdateLinksOnSave :: DefaultWebOptions a0
                     -> IO Bool
getUpdateLinksOnSave =
  propertyGet "UpdateLinksOnSave"
              []
              outBool

setUpdateLinksOnSave :: Bool
                     -> DefaultWebOptions a0
                     -> IO ()
setUpdateLinksOnSave prop =
  propertySet "UpdateLinksOnSave"
              [inBool prop]

getUseLongFileNames :: DefaultWebOptions a0
                    -> IO Bool
getUseLongFileNames =
  propertyGet "UseLongFileNames"
              []
              outBool

setUseLongFileNames :: Bool
                    -> DefaultWebOptions a0
                    -> IO ()
setUseLongFileNames prop =
  propertySet "UseLongFileNames"
              [inBool prop]

getCheckIfOfficeIsHTMLEditor :: DefaultWebOptions a0
                             -> IO Bool
getCheckIfOfficeIsHTMLEditor =
  propertyGet "CheckIfOfficeIsHTMLEditor"
              []
              outBool

setCheckIfOfficeIsHTMLEditor :: Bool
                             -> DefaultWebOptions a0
                             -> IO ()
setCheckIfOfficeIsHTMLEditor prop =
  propertySet "CheckIfOfficeIsHTMLEditor"
              [inBool prop]

getCheckIfWordIsDefaultHTMLEditor :: DefaultWebOptions a0
                                  -> IO Bool
getCheckIfWordIsDefaultHTMLEditor =
  propertyGet "CheckIfWordIsDefaultHTMLEditor"
              []
              outBool

setCheckIfWordIsDefaultHTMLEditor :: Bool
                                  -> DefaultWebOptions a0
                                  -> IO ()
setCheckIfWordIsDefaultHTMLEditor prop =
  propertySet "CheckIfWordIsDefaultHTMLEditor"
              [inBool prop]

getRelyOnVML :: DefaultWebOptions a0
             -> IO Bool
getRelyOnVML =
  propertyGet "RelyOnVML"
              []
              outBool

setRelyOnVML :: Bool
             -> DefaultWebOptions a0
             -> IO ()
setRelyOnVML prop =
  propertySet "RelyOnVML"
              [inBool prop]

getAllowPNG :: DefaultWebOptions a0
            -> IO Bool
getAllowPNG =
  propertyGet "AllowPNG"
              []
              outBool

setAllowPNG :: Bool
            -> DefaultWebOptions a0
            -> IO ()
setAllowPNG prop =
  propertySet "AllowPNG"
              [inBool prop]

getScreenSize :: DefaultWebOptions a0
              -> IO MsoScreenSize
getScreenSize iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoScreenSize)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getScreenSize methPtr iptr prop) 30 iptr
    doThenFree free readMsoScreenSize prop

foreign import stdcall "dynamic" prim_Word_getScreenSize :: Ptr () -> Ptr () -> Ptr MsoScreenSize -> IO Int32
setScreenSize :: MsoScreenSize
              -> DefaultWebOptions a0
              -> IO ()
setScreenSize prop iptr =
  do
    prop <- marshallMsoScreenSize prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setScreenSize methPtr iptr prop) 31 iptr

foreign import stdcall "prim_Word_setScreenSize" prim_Word_setScreenSize :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPixelsPerInch :: DefaultWebOptions a0
                 -> IO Int32
getPixelsPerInch =
  propertyGet "PixelsPerInch"
              []
              outInt32

setPixelsPerInch :: Int32
                 -> DefaultWebOptions a0
                 -> IO ()
setPixelsPerInch prop =
  propertySet "PixelsPerInch"
              [inInt32 prop]

getEncoding :: DefaultWebOptions a0
            -> IO MsoEncoding
getEncoding iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOpenEncoding methPtr iptr prop) 34 iptr
    doThenFree free readMsoEncoding prop

setEncoding :: MsoEncoding
            -> DefaultWebOptions a0
            -> IO ()
setEncoding prop iptr =
  do
    prop <- marshallMsoEncoding prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setEncoding methPtr iptr prop) 35 iptr

foreign import stdcall "prim_Word_setEncoding" prim_Word_setEncoding :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAlwaysSaveInDefaultEncoding :: DefaultWebOptions a0
                               -> IO Bool
getAlwaysSaveInDefaultEncoding =
  propertyGet "AlwaysSaveInDefaultEncoding"
              []
              outBool

setAlwaysSaveInDefaultEncoding :: Bool
                               -> DefaultWebOptions a0
                               -> IO ()
setAlwaysSaveInDefaultEncoding prop =
  propertySet "AlwaysSaveInDefaultEncoding"
              [inBool prop]

getFonts :: DefaultWebOptions a0
         -> IO (Maybe WebPageFonts)
getFonts iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFonts methPtr iptr prop) 38 iptr
    doThenFree free (readunique readWebPageFonts) prop

foreign import stdcall "dynamic" prim_Word_getFonts :: Ptr () -> Ptr () -> Ptr (Ptr WebPageFonts) -> IO Int32
getFolderSuffix :: DefaultWebOptions a0
                -> IO String
getFolderSuffix =
  propertyGet "FolderSuffix"
              []
              outString

getTargetBrowser :: DefaultWebOptions a0
                 -> IO MsoTargetBrowser
getTargetBrowser iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTargetBrowser)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTargetBrowser methPtr iptr prop) 40 iptr
    doThenFree free readMsoTargetBrowser prop

foreign import stdcall "dynamic" prim_Word_getTargetBrowser :: Ptr () -> Ptr () -> Ptr MsoTargetBrowser -> IO Int32
setTargetBrowser :: MsoTargetBrowser
                 -> DefaultWebOptions a0
                 -> IO ()
setTargetBrowser prop iptr =
  do
    prop <- marshallMsoTargetBrowser prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setTargetBrowser methPtr iptr prop) 41 iptr

foreign import stdcall "prim_Word_setTargetBrowser" prim_Word_setTargetBrowser :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getSaveNewWebPagesAsWebArchives :: DefaultWebOptions a0
                                -> IO Bool
getSaveNewWebPagesAsWebArchives =
  propertyGet "SaveNewWebPagesAsWebArchives"
              []
              outBool

setSaveNewWebPagesAsWebArchives :: Bool
                                -> DefaultWebOptions a0
                                -> IO ()
setSaveNewWebPagesAsWebArchives prop =
  propertySet "SaveNewWebPagesAsWebArchives"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface WebOptions
-- 
-- --------------------------------------------------
data WebOptions_ a = WebOptions__ 
type WebOptions a = IDispatch (WebOptions_ a)
iidWebOptions :: IID (WebOptions ())
iidWebOptions = mkIID "{000209E4-0000-0000-C000-000000000046}"

getApplication191 :: WebOptions a0
                  -> IO (Maybe Application)
getApplication191 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator191 :: WebOptions a0
              -> IO Int32
getCreator191 =
  propertyGet "Creator"
              []
              outInt32

getParent191 :: WebOptions a0
             -> IO (IDispatch ())
getParent191 =
  propertyGet "Parent"
              []
              outIDispatch

getOptimizeForBrowser0 :: WebOptions a0
                       -> IO Bool
getOptimizeForBrowser0 =
  propertyGet "OptimizeForBrowser"
              []
              outBool

setOptimizeForBrowser0 :: Bool
                       -> WebOptions a0
                       -> IO ()
setOptimizeForBrowser0 prop =
  propertySet "OptimizeForBrowser"
              [inBool prop]

getBrowserLevel0 :: WebOptions a0
                 -> IO WdBrowserLevel
getBrowserLevel0 =
  propertyGet "BrowserLevel"
              []
              outEnum

setBrowserLevel0 :: WdBrowserLevel
                 -> WebOptions a0
                 -> IO ()
setBrowserLevel0 prop =
  propertySet "BrowserLevel"
              [inEnum prop]

getRelyOnCSS1 :: WebOptions a0
              -> IO Bool
getRelyOnCSS1 =
  propertyGet "RelyOnCSS"
              []
              outBool

setRelyOnCSS1 :: Bool
              -> WebOptions a0
              -> IO ()
setRelyOnCSS1 prop =
  propertySet "RelyOnCSS"
              [inBool prop]

getOrganizeInFolder0 :: WebOptions a0
                     -> IO Bool
getOrganizeInFolder0 =
  propertyGet "OrganizeInFolder"
              []
              outBool

setOrganizeInFolder0 :: Bool
                     -> WebOptions a0
                     -> IO ()
setOrganizeInFolder0 prop =
  propertySet "OrganizeInFolder"
              [inBool prop]

getUseLongFileNames0 :: WebOptions a0
                     -> IO Bool
getUseLongFileNames0 =
  propertyGet "UseLongFileNames"
              []
              outBool

setUseLongFileNames0 :: Bool
                     -> WebOptions a0
                     -> IO ()
setUseLongFileNames0 prop =
  propertySet "UseLongFileNames"
              [inBool prop]

getRelyOnVML0 :: WebOptions a0
              -> IO Bool
getRelyOnVML0 =
  propertyGet "RelyOnVML"
              []
              outBool

setRelyOnVML0 :: Bool
              -> WebOptions a0
              -> IO ()
setRelyOnVML0 prop =
  propertySet "RelyOnVML"
              [inBool prop]

getAllowPNG0 :: WebOptions a0
             -> IO Bool
getAllowPNG0 =
  propertyGet "AllowPNG"
              []
              outBool

setAllowPNG0 :: Bool
             -> WebOptions a0
             -> IO ()
setAllowPNG0 prop =
  propertySet "AllowPNG"
              [inBool prop]

getScreenSize0 :: WebOptions a0
               -> IO MsoScreenSize
getScreenSize0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoScreenSize)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getScreenSize methPtr iptr prop) 24 iptr
    doThenFree free readMsoScreenSize prop

setScreenSize0 :: MsoScreenSize
               -> WebOptions a0
               -> IO ()
setScreenSize0 prop iptr =
  do
    prop <- marshallMsoScreenSize prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setScreenSize0 methPtr iptr prop) 25 iptr

foreign import stdcall "prim_Word_setScreenSize0" prim_Word_setScreenSize0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getPixelsPerInch0 :: WebOptions a0
                  -> IO Int32
getPixelsPerInch0 =
  propertyGet "PixelsPerInch"
              []
              outInt32

setPixelsPerInch0 :: Int32
                  -> WebOptions a0
                  -> IO ()
setPixelsPerInch0 prop =
  propertySet "PixelsPerInch"
              [inInt32 prop]

getEncoding0 :: WebOptions a0
             -> IO MsoEncoding
getEncoding0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoEncoding)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getOpenEncoding methPtr iptr prop) 28 iptr
    doThenFree free readMsoEncoding prop

setEncoding0 :: MsoEncoding
             -> WebOptions a0
             -> IO ()
setEncoding0 prop iptr =
  do
    prop <- marshallMsoEncoding prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setEncoding0 methPtr iptr prop) 29 iptr

foreign import stdcall "prim_Word_setEncoding0" prim_Word_setEncoding0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getFolderSuffix0 :: WebOptions a0
                 -> IO String
getFolderSuffix0 =
  propertyGet "FolderSuffix"
              []
              outString

useDefaultFolderSuffix :: WebOptions a0
                       -> IO ()
useDefaultFolderSuffix =
  method0 "UseDefaultFolderSuffix"
          []

getTargetBrowser0 :: WebOptions a0
                  -> IO MsoTargetBrowser
getTargetBrowser0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTargetBrowser)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTargetBrowser methPtr iptr prop) 32 iptr
    doThenFree free readMsoTargetBrowser prop

setTargetBrowser0 :: MsoTargetBrowser
                  -> WebOptions a0
                  -> IO ()
setTargetBrowser0 prop iptr =
  do
    prop <- marshallMsoTargetBrowser prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setTargetBrowser0 methPtr iptr prop) 33 iptr

foreign import stdcall "prim_Word_setTargetBrowser0" prim_Word_setTargetBrowser0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface OtherCorrectionsExceptions
-- 
-- --------------------------------------------------
data OtherCorrectionsExceptions_ a = OtherCorrectionsExceptions__ 
type OtherCorrectionsExceptions a = IDispatch (OtherCorrectionsExceptions_ a)
iidOtherCorrectionsExceptions :: IID (OtherCorrectionsExceptions ())
iidOtherCorrectionsExceptions =
  mkIID "{000209DF-0000-0000-C000-000000000046}"

getApplication192 :: OtherCorrectionsExceptions a0
                  -> IO (Maybe Application)
getApplication192 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator192 :: OtherCorrectionsExceptions a0
              -> IO Int32
getCreator192 =
  propertyGet "Creator"
              []
              outInt32

getParent192 :: OtherCorrectionsExceptions a0
             -> IO (IDispatch ())
getParent192 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum74 :: OtherCorrectionsExceptions a0
             -> IO (IUnknown ())
getNewEnum74 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount74 :: OtherCorrectionsExceptions a0
           -> IO Int32
getCount74 =
  propertyGet "Count"
              []
              outInt32

item74 :: (Variant a1)
       => a1
       -> OtherCorrectionsExceptions a0
       -> IO (OtherCorrectionsException ())
item74 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add42 :: String
      -> OtherCorrectionsExceptions a0
      -> IO (OtherCorrectionsException ())
add42 name =
  function1 "Add"
            [inString name]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OtherCorrectionsException
-- 
-- --------------------------------------------------
data OtherCorrectionsException_ a = OtherCorrectionsException__ 
type OtherCorrectionsException a = IDispatch (OtherCorrectionsException_ a)
iidOtherCorrectionsException :: IID (OtherCorrectionsException ())
iidOtherCorrectionsException =
  mkIID "{000209E1-0000-0000-C000-000000000046}"

getApplication193 :: OtherCorrectionsException a0
                  -> IO (Maybe Application)
getApplication193 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator193 :: OtherCorrectionsException a0
              -> IO Int32
getCreator193 =
  propertyGet "Creator"
              []
              outInt32

getParent193 :: OtherCorrectionsException a0
             -> IO (IDispatch ())
getParent193 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex27 :: OtherCorrectionsException a0
           -> IO Int32
getIndex27 =
  propertyGet "Index"
              []
              outInt32

getName35 :: OtherCorrectionsException a0
          -> IO String
getName35 =
  propertyGet "Name"
              []
              outString

delete47 :: OtherCorrectionsException a0
         -> IO ()
delete47 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface EmailSignatureEntries
-- 
-- --------------------------------------------------
data EmailSignatureEntries_ a = EmailSignatureEntries__ 
type EmailSignatureEntries a = IDispatch (EmailSignatureEntries_ a)
iidEmailSignatureEntries :: IID (EmailSignatureEntries ())
iidEmailSignatureEntries =
  mkIID "{000209E5-0000-0000-C000-000000000046}"

getApplication194 :: EmailSignatureEntries a0
                  -> IO (Maybe Application)
getApplication194 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator194 :: EmailSignatureEntries a0
              -> IO Int32
getCreator194 =
  propertyGet "Creator"
              []
              outInt32

getParent194 :: EmailSignatureEntries a0
             -> IO (IDispatch ())
getParent194 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum75 :: EmailSignatureEntries a0
             -> IO (IUnknown ())
getNewEnum75 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount75 :: EmailSignatureEntries a0
           -> IO Int32
getCount75 =
  propertyGet "Count"
              []
              outInt32

item75 :: (Variant a1)
       => a1
       -> EmailSignatureEntries a0
       -> IO (EmailSignatureEntry ())
item75 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add43 :: String
      -> Range a1
      -> EmailSignatureEntries a0
      -> IO (EmailSignatureEntry ())
add43 name range2 =
  function1 "Add"
            [ inString name
            , inIDispatch range2
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface EmailSignatureEntry
-- 
-- --------------------------------------------------
data EmailSignatureEntry_ a = EmailSignatureEntry__ 
type EmailSignatureEntry a = IDispatch (EmailSignatureEntry_ a)
iidEmailSignatureEntry :: IID (EmailSignatureEntry ())
iidEmailSignatureEntry =
  mkIID "{000209E6-0000-0000-C000-000000000046}"

getApplication195 :: EmailSignatureEntry a0
                  -> IO (Maybe Application)
getApplication195 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator195 :: EmailSignatureEntry a0
              -> IO Int32
getCreator195 =
  propertyGet "Creator"
              []
              outInt32

getParent195 :: EmailSignatureEntry a0
             -> IO (IDispatch ())
getParent195 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex28 :: EmailSignatureEntry a0
           -> IO Int32
getIndex28 =
  propertyGet "Index"
              []
              outInt32

getName36 :: EmailSignatureEntry a0
          -> IO String
getName36 =
  propertyGet "Name"
              []
              outString

setName11 :: String
          -> EmailSignatureEntry a0
          -> IO ()
setName11 prop =
  propertySet "Name"
              [inString prop]

delete48 :: EmailSignatureEntry a0
         -> IO ()
delete48 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface HTMLDivision
-- 
-- --------------------------------------------------
data HTMLDivision_ a = HTMLDivision__ 
type HTMLDivision a = IDispatch (HTMLDivision_ a)
iidHTMLDivision :: IID (HTMLDivision ())
iidHTMLDivision = mkIID "{000209E7-0000-0000-C000-000000000046}"

getApplication196 :: HTMLDivision a0
                  -> IO (Maybe Application)
getApplication196 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator196 :: HTMLDivision a0
              -> IO Int32
getCreator196 =
  propertyGet "Creator"
              []
              outInt32

getParent196 :: HTMLDivision a0
             -> IO (IDispatch ())
getParent196 =
  propertyGet "Parent"
              []
              outIDispatch

getRange21 :: HTMLDivision a0
           -> IO (Range ())
getRange21 =
  propertyGet "Range"
              []
              outIDispatch

getBorders16 :: HTMLDivision a0
             -> IO (Borders ())
getBorders16 =
  propertyGet "Borders"
              []
              outIDispatch

getLeftIndent4 :: HTMLDivision a0
               -> IO Float
getLeftIndent4 =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent6 :: Float
               -> HTMLDivision a0
               -> IO ()
setLeftIndent6 prop =
  propertySet "LeftIndent"
              [inFloat prop]

getRightIndent2 :: HTMLDivision a0
                -> IO Float
getRightIndent2 =
  propertyGet "RightIndent"
              []
              outFloat

setRightIndent2 :: Float
                -> HTMLDivision a0
                -> IO ()
setRightIndent2 prop =
  propertySet "RightIndent"
              [inFloat prop]

getSpaceBefore2 :: HTMLDivision a0
                -> IO Float
getSpaceBefore2 =
  propertyGet "SpaceBefore"
              []
              outFloat

setSpaceBefore2 :: Float
                -> HTMLDivision a0
                -> IO ()
setSpaceBefore2 prop =
  propertySet "SpaceBefore"
              [inFloat prop]

getSpaceAfter3 :: HTMLDivision a0
               -> IO Float
getSpaceAfter3 =
  propertyGet "SpaceAfter"
              []
              outFloat

setSpaceAfter3 :: Float
               -> HTMLDivision a0
               -> IO ()
setSpaceAfter3 prop =
  propertySet "SpaceAfter"
              [inFloat prop]

getHTMLDivisions2 :: HTMLDivision a0
                  -> IO (HTMLDivisions ())
getHTMLDivisions2 =
  propertyGet "HTMLDivisions"
              []
              outIUnknown

hTMLDivisionParent :: (Variant a1)
                   => a1
                   -> HTMLDivision a0
                   -> IO (HTMLDivision ())
hTMLDivisionParent levelsUp =
  function1 "HTMLDivisionParent"
            [inVariant levelsUp]
            outIDispatch

delete49 :: HTMLDivision a0
         -> IO ()
delete49 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface HTMLDivisions
-- 
-- --------------------------------------------------
data HTMLDivisions_ a = HTMLDivisions__ 
type HTMLDivisions a = IDispatch (HTMLDivisions_ a)
iidHTMLDivisions :: IID (HTMLDivisions ())
iidHTMLDivisions = mkIID "{000209E8-0000-0000-C000-000000000046}"

getApplication197 :: HTMLDivisions a0
                  -> IO (Maybe Application)
getApplication197 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator197 :: HTMLDivisions a0
              -> IO Int32
getCreator197 =
  propertyGet "Creator"
              []
              outInt32

getParent197 :: HTMLDivisions a0
             -> IO (IDispatch ())
getParent197 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum76 :: HTMLDivisions a0
             -> IO (IUnknown ())
getNewEnum76 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount76 :: HTMLDivisions a0
           -> IO Int32
getCount76 =
  propertyGet "Count"
              []
              outInt32

getNestingLevel7 :: HTMLDivisions a0
                 -> IO Int32
getNestingLevel7 =
  propertyGet "NestingLevel"
              []
              outInt32

add44 :: (Variant a1)
      => a1
      -> HTMLDivisions a0
      -> IO (HTMLDivision ())
add44 range2 =
  function1 "Add"
            [inVariant range2]
            outIDispatch

item76 :: Int32
       -> HTMLDivisions a0
       -> IO (HTMLDivision ())
item76 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface DiagramNode
-- 
-- --------------------------------------------------
data DiagramNode_ a = DiagramNode__ 
type DiagramNode a = IDispatch (DiagramNode_ a)
iidDiagramNode :: IID (DiagramNode ())
iidDiagramNode = mkIID "{000209E9-0000-0000-C000-000000000046}"

getApplication198 :: DiagramNode a0
                  -> IO (Maybe Application)
getApplication198 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator198 :: DiagramNode a0
              -> IO Int32
getCreator198 =
  propertyGet "Creator"
              []
              outInt32

getParent198 :: DiagramNode a0
             -> IO (IDispatch ())
getParent198 =
  propertyGet "Parent"
              []
              outIDispatch

getChildren :: DiagramNode a0
            -> IO (DiagramNodeChildren ())
getChildren =
  propertyGet "Children"
              []
              outIUnknown

getShape0 :: DiagramNode a0
          -> IO (Shape ())
getShape0 =
  propertyGet "Shape"
              []
              outIDispatch

getRoot :: DiagramNode a0
        -> IO (DiagramNode ())
getRoot =
  propertyGet "Root"
              []
              outIDispatch

getDiagram1 :: DiagramNode a0
            -> IO (Diagram ())
getDiagram1 =
  propertyGet "Diagram"
              []
              outIUnknown

getLayout :: DiagramNode a0
          -> IO MsoOrgChartLayoutType
getLayout iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoOrgChartLayoutType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getLayout methPtr iptr prop) 14 iptr
    doThenFree free readMsoOrgChartLayoutType prop

foreign import stdcall "dynamic" prim_Word_getLayout :: Ptr () -> Ptr () -> Ptr MsoOrgChartLayoutType -> IO Int32
setLayout :: MsoOrgChartLayoutType
          -> DiagramNode a0
          -> IO ()
setLayout prop iptr =
  do
    prop <- marshallMsoOrgChartLayoutType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setLayout methPtr iptr prop) 15 iptr

foreign import stdcall "prim_Word_setLayout" prim_Word_setLayout :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getTextShape :: DiagramNode a0
             -> IO (Shape ())
getTextShape =
  propertyGet "TextShape"
              []
              outIDispatch

addNode :: MsoRelativeNodePosition
        -> MsoDiagramNodeType
        -> DiagramNode a0
        -> IO (DiagramNode ())
addNode pos nodeType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    pos <- marshallMsoRelativeNodePosition pos
    nodeType <- marshallMsoDiagramNodeType nodeType
    invokeAndCheck (\ methPtr iptr -> prim_Word_addNode methPtr iptr pos nodeType prop) 17 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addNode" prim_Word_addNode :: Ptr () -> Ptr () -> Ptr () -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> IO Int32
delete50 :: DiagramNode a0
         -> IO ()
delete50 =
  method0 "Delete"
          []

moveNode :: MsoRelativeNodePosition
         -> DiagramNode a0
         -> IO (DiagramNode ())
moveNode pos iptr =
  do
    targetNode <- allocBytes (fromIntegral sizeofForeignPtr)
    pos <- marshallMsoRelativeNodePosition pos
    invokeAndCheck (\ methPtr iptr -> prim_Word_moveNode methPtr iptr targetNode pos) 19 iptr
    doThenFree free (readIUnknown False) targetNode

foreign import stdcall "prim_Word_moveNode" prim_Word_moveNode :: Ptr () -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> Ptr () -> IO Int32
replaceNode :: DiagramNode a0
            -> IO (DiagramNode ())
replaceNode =
  method1 "ReplaceNode"
          []
          outIDispatch

swapNode :: MsoRelativeNodePosition
         -> DiagramNode a0
         -> IO (DiagramNode ())
swapNode pos iptr =
  do
    targetNode <- allocBytes (fromIntegral sizeofForeignPtr)
    pos <- marshallMsoRelativeNodePosition pos
    invokeAndCheck (\ methPtr iptr -> prim_Word_swapNode methPtr iptr targetNode pos) 21 iptr
    doThenFree free (readIUnknown False) targetNode

foreign import stdcall "prim_Word_swapNode" prim_Word_swapNode :: Ptr () -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> Ptr () -> IO Int32
cloneNode :: Bool
          -> MsoRelativeNodePosition
          -> DiagramNode a0
          -> IO (DiagramNode (), DiagramNode ())
cloneNode copyChildren pos iptr =
  do
    targetNode <- allocBytes (fromIntegral sizeofForeignPtr)
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    copyChildren <- marshallVARIANT_BOOL copyChildren
    pos <- marshallMsoRelativeNodePosition pos
    invokeAndCheck (\ methPtr iptr -> prim_Word_cloneNode methPtr iptr copyChildren targetNode pos prop) 22 iptr
    targetNode <- doThenFree free (readIUnknown False) targetNode
    prop <- doThenFree free (readIUnknown False) prop
    return (targetNode, prop)

foreign import stdcall "prim_Word_cloneNode" prim_Word_cloneNode :: Ptr () -> Ptr () -> Int16 -> Ptr (Ptr (DiagramNode a)) -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> IO Int32
transferChildren :: DiagramNode a0
                 -> IO (DiagramNode ())
transferChildren =
  method1 "TransferChildren"
          []
          outIDispatch

nextNode :: DiagramNode a0
         -> IO (DiagramNode ())
nextNode =
  function1 "NextNode"
            []
            outIDispatch

prevNode :: DiagramNode a0
         -> IO (DiagramNode ())
prevNode =
  function1 "PrevNode"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface DiagramNodeChildren
-- 
-- --------------------------------------------------
data DiagramNodeChildren_ a = DiagramNodeChildren__ 
type DiagramNodeChildren a = IDispatch (DiagramNodeChildren_ a)
iidDiagramNodeChildren :: IID (DiagramNodeChildren ())
iidDiagramNodeChildren =
  mkIID "{000209EA-0000-0000-C000-000000000046}"

getApplication199 :: DiagramNodeChildren a0
                  -> IO (Maybe Application)
getApplication199 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator199 :: DiagramNodeChildren a0
              -> IO Int32
getCreator199 =
  propertyGet "Creator"
              []
              outInt32

getNewEnum77 :: DiagramNodeChildren a0
             -> IO (IUnknown ())
getNewEnum77 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getParent199 :: DiagramNodeChildren a0
             -> IO (IDispatch ())
getParent199 =
  propertyGet "Parent"
              []
              outIDispatch

getCount77 :: DiagramNodeChildren a0
           -> IO Int32
getCount77 =
  propertyGet "Count"
              []
              outInt32

getFirstChild :: DiagramNodeChildren a0
              -> IO (DiagramNode ())
getFirstChild =
  propertyGet "FirstChild"
              []
              outIDispatch

getLastChild :: DiagramNodeChildren a0
             -> IO (DiagramNode ())
getLastChild =
  propertyGet "LastChild"
              []
              outIDispatch

item77 :: (Variant a1)
       => a1
       -> DiagramNodeChildren a0
       -> IO (DiagramNode ())
item77 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

addNode0 :: (Variant a1)
         => a1
         -> MsoDiagramNodeType
         -> DiagramNodeChildren a0
         -> IO (DiagramNode ())
addNode0 index nodeType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    index <- marshallVariant index
    nodeType <- marshallMsoDiagramNodeType nodeType
    invokeAndCheck (\ methPtr iptr -> prim_Word_addNode0 methPtr iptr index nodeType prop) 15 iptr
    free index
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addNode0" prim_Word_addNode0 :: Ptr () -> Ptr () -> VARIANT -> Ptr () -> Ptr (Ptr (DiagramNode a)) -> IO Int32
selectAll0 :: DiagramNodeChildren a0
           -> IO ()
selectAll0 =
  method0 "SelectAll"
          []

-- --------------------------------------------------
-- 
-- interface DiagramNodes
-- 
-- --------------------------------------------------
data DiagramNodes_ a = DiagramNodes__ 
type DiagramNodes a = IDispatch (DiagramNodes_ a)
iidDiagramNodes :: IID (DiagramNodes ())
iidDiagramNodes = mkIID "{000209EB-0000-0000-C000-000000000046}"

getApplication200 :: DiagramNodes a0
                  -> IO (Maybe Application)
getApplication200 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator200 :: DiagramNodes a0
              -> IO Int32
getCreator200 =
  propertyGet "Creator"
              []
              outInt32

getNewEnum78 :: DiagramNodes a0
             -> IO (IUnknown ())
getNewEnum78 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getParent200 :: DiagramNodes a0
             -> IO (IDispatch ())
getParent200 =
  propertyGet "Parent"
              []
              outIDispatch

getCount78 :: DiagramNodes a0
           -> IO Int32
getCount78 =
  propertyGet "Count"
              []
              outInt32

item78 :: (Variant a1)
       => a1
       -> DiagramNodes a0
       -> IO (DiagramNode ())
item78 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

selectAll1 :: DiagramNodes a0
           -> IO ()
selectAll1 =
  method0 "SelectAll"
          []

-- --------------------------------------------------
-- 
-- interface Diagram
-- 
-- --------------------------------------------------
data Diagram_ a = Diagram__ 
type Diagram a = IDispatch (Diagram_ a)
iidDiagram :: IID (Diagram ())
iidDiagram = mkIID "{000209EC-0000-0000-C000-000000000046}"

getApplication201 :: Diagram a0
                  -> IO (Maybe Application)
getApplication201 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator201 :: Diagram a0
              -> IO Int32
getCreator201 =
  propertyGet "Creator"
              []
              outInt32

getParent201 :: Diagram a0
             -> IO (IDispatch ())
getParent201 =
  propertyGet "Parent"
              []
              outIDispatch

getNodes1 :: Diagram a0
          -> IO (DiagramNodes ())
getNodes1 =
  propertyGet "Nodes"
              []
              outIDispatch

getType27 :: Diagram a0
          -> IO MsoDiagramType
getType27 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoDiagramType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType27 methPtr iptr prop) 11 iptr
    doThenFree free readMsoDiagramType prop

foreign import stdcall "dynamic" prim_Word_getType27 :: Ptr () -> Ptr () -> Ptr MsoDiagramType -> IO Int32
getAutoLayout :: Diagram a0
              -> IO MsoTriState
getAutoLayout iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 12 iptr
    doThenFree free readMsoTriState prop

setAutoLayout :: MsoTriState
              -> Diagram a0
              -> IO ()
setAutoLayout prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAutoLayout methPtr iptr prop) 13 iptr

foreign import stdcall "prim_Word_setAutoLayout" prim_Word_setAutoLayout :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getReverse :: Diagram a0
           -> IO MsoTriState
getReverse iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 14 iptr
    doThenFree free readMsoTriState prop

setReverse :: MsoTriState
           -> Diagram a0
           -> IO ()
setReverse prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setReverse methPtr iptr prop) 15 iptr

foreign import stdcall "prim_Word_setReverse" prim_Word_setReverse :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getAutoFormat :: Diagram a0
              -> IO MsoTriState
getAutoFormat iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 16 iptr
    doThenFree free readMsoTriState prop

setAutoFormat :: MsoTriState
              -> Diagram a0
              -> IO ()
setAutoFormat prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setAutoFormat methPtr iptr prop) 17 iptr

foreign import stdcall "prim_Word_setAutoFormat" prim_Word_setAutoFormat :: Ptr () -> Ptr () -> Ptr () -> IO Int32
convert3 :: MsoDiagramType
         -> Diagram a0
         -> IO ()
convert3 type0 iptr =
  do
    type0 <- marshallMsoDiagramType type0
    invokeAndCheck (\ methPtr iptr -> prim_Word_convert3 methPtr iptr type0) 18 iptr

foreign import stdcall "prim_Word_convert3" prim_Word_convert3 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
fitText :: Diagram a0
        -> IO ()
fitText =
  method0 "FitText"
          []

-- --------------------------------------------------
-- 
-- interface CustomProperty
-- 
-- --------------------------------------------------
data CustomProperty_ a = CustomProperty__ 
type CustomProperty a = IDispatch (CustomProperty_ a)
iidCustomProperty :: IID (CustomProperty ())
iidCustomProperty = mkIID "{B923FDE0-F08C-11D3-91B0-00105A0A19FD}"

getName37 :: CustomProperty a0
          -> IO String
getName37 =
  propertyGet "Name"
              []
              outString

getValue6 :: CustomProperty a0
          -> IO String
getValue6 =
  propertyGet "Value"
              []
              outString

setValue4 :: String
          -> CustomProperty a0
          -> IO ()
setValue4 prop =
  propertySet "Value"
              [inString prop]

getApplication202 :: CustomProperty a0
                  -> IO (Maybe Application)
getApplication202 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 10 iptr
    doThenFree free (readunique readApplication) prop

getCreator202 :: CustomProperty a0
              -> IO Int32
getCreator202 =
  propertyGet "Creator"
              []
              outInt32

getParent202 :: CustomProperty a0
             -> IO (IDispatch ())
getParent202 =
  propertyGet "Parent"
              []
              outIDispatch

delete51 :: CustomProperty a0
         -> IO ()
delete51 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface CustomProperties
-- 
-- --------------------------------------------------
data CustomProperties_ a = CustomProperties__ 
type CustomProperties a = IDispatch (CustomProperties_ a)
iidCustomProperties :: IID (CustomProperties ())
iidCustomProperties =
  mkIID "{B923FDE1-F08C-11D3-91B0-00105A0A19FD}"

getNewEnum79 :: CustomProperties a0
             -> IO (IUnknown ())
getNewEnum79 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount79 :: CustomProperties a0
           -> IO Int32
getCount79 =
  propertyGet "Count"
              []
              outInt32

getApplication203 :: CustomProperties a0
                  -> IO (Maybe Application)
getApplication203 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator203 :: CustomProperties a0
              -> IO Int32
getCreator203 =
  propertyGet "Creator"
              []
              outInt32

getParent203 :: CustomProperties a0
             -> IO (IDispatch ())
getParent203 =
  propertyGet "Parent"
              []
              outIDispatch

item79 :: (Variant a1)
       => a1
       -> CustomProperties a0
       -> IO (CustomProperty ())
item79 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add45 :: String
      -> String
      -> CustomProperties a0
      -> IO (CustomProperty ())
add45 name value =
  function1 "Add"
            [ inString name
            , inString value
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface SmartTag
-- 
-- --------------------------------------------------
data SmartTag_ a = SmartTag__ 
type SmartTag a = IDispatch (SmartTag_ a)
iidSmartTag :: IID (SmartTag ())
iidSmartTag = mkIID "{000209ED-0000-0000-C000-000000000046}"

getName38 :: SmartTag a0
          -> IO String
getName38 =
  propertyGet "Name"
              []
              outString

getXML1 :: SmartTag a0
        -> IO String
getXML1 =
  propertyGet "XML"
              []
              outString

getRange22 :: SmartTag a0
           -> IO (Range ())
getRange22 =
  propertyGet "Range"
              []
              outIDispatch

getDownloadURL :: SmartTag a0
               -> IO String
getDownloadURL =
  propertyGet "DownloadURL"
              []
              outString

getProperties :: SmartTag a0
              -> IO (CustomProperties ())
getProperties =
  propertyGet "Properties"
              []
              outIDispatch

getApplication204 :: SmartTag a0
                  -> IO (Maybe Application)
getApplication204 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 12 iptr
    doThenFree free (readunique readApplication) prop

getCreator204 :: SmartTag a0
              -> IO Int32
getCreator204 =
  propertyGet "Creator"
              []
              outInt32

getParent204 :: SmartTag a0
             -> IO (IDispatch ())
getParent204 =
  propertyGet "Parent"
              []
              outIDispatch

select19 :: SmartTag a0
         -> IO ()
select19 =
  method0 "Select"
          []

delete52 :: SmartTag a0
         -> IO ()
delete52 =
  method0 "Delete"
          []

getSmartTagActions :: SmartTag a0
                   -> IO (SmartTagActions ())
getSmartTagActions =
  propertyGet "SmartTagActions"
              []
              outIUnknown

getXMLNode :: SmartTag a0
           -> IO (XMLNode ())
getXMLNode =
  propertyGet "XMLNode"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface SmartTags
-- 
-- --------------------------------------------------
data SmartTags_ a = SmartTags__ 
type SmartTags a = IDispatch (SmartTags_ a)
iidSmartTags :: IID (SmartTags ())
iidSmartTags = mkIID "{000209EE-0000-0000-C000-000000000046}"

getNewEnum80 :: SmartTags a0
             -> IO (IUnknown ())
getNewEnum80 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount80 :: SmartTags a0
           -> IO Int32
getCount80 =
  propertyGet "Count"
              []
              outInt32

getApplication205 :: SmartTags a0
                  -> IO (Maybe Application)
getApplication205 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator205 :: SmartTags a0
              -> IO Int32
getCreator205 =
  propertyGet "Creator"
              []
              outInt32

getParent205 :: SmartTags a0
             -> IO (IDispatch ())
getParent205 =
  propertyGet "Parent"
              []
              outIDispatch

item80 :: (Variant a1)
       => a1
       -> SmartTags a0
       -> IO (SmartTag ())
item80 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add46 :: (Variant a1, Variant a2)
      => String
      -> a1
      -> a2
      -> SmartTags a0
      -> IO (SmartTag ())
add46 name range2 properties =
  function1 "Add"
            [ inString name
            , inVariant range2
            , inVariant properties
            ]
            outIDispatch

smartTagsByType :: String
                -> SmartTags a0
                -> IO (SmartTags ())
smartTagsByType name =
  function1 "SmartTagsByType"
            [inString name]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface StyleSheet
-- 
-- --------------------------------------------------
data StyleSheet_ a = StyleSheet__ 
type StyleSheet a = IDispatch (StyleSheet_ a)
iidStyleSheet :: IID (StyleSheet ())
iidStyleSheet = mkIID "{000209EF-0000-0000-C000-000000000046}"

getApplication206 :: StyleSheet a0
                  -> IO (Maybe Application)
getApplication206 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator206 :: StyleSheet a0
              -> IO Int32
getCreator206 =
  propertyGet "Creator"
              []
              outInt32

getParent206 :: StyleSheet a0
             -> IO (IDispatch ())
getParent206 =
  propertyGet "Parent"
              []
              outIDispatch

getFullName1 :: StyleSheet a0
             -> IO String
getFullName1 =
  propertyGet "FullName"
              []
              outString

getIndex29 :: StyleSheet a0
           -> IO Int32
getIndex29 =
  propertyGet "Index"
              []
              outInt32

getName39 :: StyleSheet a0
          -> IO String
getName39 =
  propertyGet "Name"
              []
              outString

getPath7 :: StyleSheet a0
         -> IO String
getPath7 =
  propertyGet "Path"
              []
              outString

getType28 :: StyleSheet a0
          -> IO WdStyleSheetLinkType
getType28 =
  propertyGet "Type"
              []
              outEnum

setType5 :: WdStyleSheetLinkType
         -> StyleSheet a0
         -> IO ()
setType5 prop =
  propertySet "Type"
              [inEnum prop]

getTitle :: StyleSheet a0
         -> IO String
getTitle =
  propertyGet "Title"
              []
              outString

setTitle :: String
         -> StyleSheet a0
         -> IO ()
setTitle prop =
  propertySet "Title"
              [inString prop]

move3 :: WdStyleSheetPrecedence
      -> StyleSheet a0
      -> IO ()
move3 precedence =
  method0 "Move"
          [inEnum precedence]

delete53 :: StyleSheet a0
         -> IO ()
delete53 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface StyleSheets
-- 
-- --------------------------------------------------
data StyleSheets_ a = StyleSheets__ 
type StyleSheets a = IDispatch (StyleSheets_ a)
iidStyleSheets :: IID (StyleSheets ())
iidStyleSheets = mkIID "{07B7CC7E-E66C-11D3-9454-00105AA31A08}"

getApplication207 :: StyleSheets a0
                  -> IO (Maybe Application)
getApplication207 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator207 :: StyleSheets a0
              -> IO Int32
getCreator207 =
  propertyGet "Creator"
              []
              outInt32

getParent207 :: StyleSheets a0
             -> IO (IDispatch ())
getParent207 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum81 :: StyleSheets a0
             -> IO (IUnknown ())
getNewEnum81 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount81 :: StyleSheets a0
           -> IO Int32
getCount81 =
  propertyGet "Count"
              []
              outInt32

item81 :: (Variant a1)
       => a1
       -> StyleSheets a0
       -> IO (StyleSheet ())
item81 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add47 :: String
      -> WdStyleSheetLinkType
      -> String
      -> WdStyleSheetPrecedence
      -> StyleSheets a0
      -> IO (StyleSheet ())
add47 fileName linkType title precedence =
  function1 "Add"
            [ inString fileName
            , inEnum linkType
            , inString title
            , inEnum precedence
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface MappedDataField
-- 
-- --------------------------------------------------
data MappedDataField_ a = MappedDataField__ 
type MappedDataField a = IDispatch (MappedDataField_ a)
iidMappedDataField :: IID (MappedDataField ())
iidMappedDataField = mkIID "{5D311669-EA51-11D3-87CC-00105AA31A34}"

getApplication208 :: MappedDataField a0
                  -> IO (Maybe Application)
getApplication208 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator208 :: MappedDataField a0
              -> IO Int32
getCreator208 =
  propertyGet "Creator"
              []
              outInt32

getParent208 :: MappedDataField a0
             -> IO (IDispatch ())
getParent208 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex30 :: MappedDataField a0
           -> IO Int32
getIndex30 =
  propertyGet "Index"
              []
              outInt32

getDataFieldName :: MappedDataField a0
                 -> IO String
getDataFieldName =
  propertyGet "DataFieldName"
              []
              outString

getName40 :: MappedDataField a0
          -> IO String
getName40 =
  propertyGet "Name"
              []
              outString

getValue7 :: MappedDataField a0
          -> IO String
getValue7 =
  propertyGet "Value"
              []
              outString

getDataFieldIndex :: MappedDataField a0
                  -> IO Int32
getDataFieldIndex =
  propertyGet "DataFieldIndex"
              []
              outInt32

setDataFieldIndex :: Int32
                  -> MappedDataField a0
                  -> IO ()
setDataFieldIndex prop =
  propertySet "DataFieldIndex"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface MappedDataFields
-- 
-- --------------------------------------------------
data MappedDataFields_ a = MappedDataFields__ 
type MappedDataFields a = IDispatch (MappedDataFields_ a)
iidMappedDataFields :: IID (MappedDataFields ())
iidMappedDataFields =
  mkIID "{799A6814-EA41-11D3-87CC-00105AA31A34}"

getApplication209 :: MappedDataFields a0
                  -> IO (Maybe Application)
getApplication209 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator209 :: MappedDataFields a0
              -> IO Int32
getCreator209 =
  propertyGet "Creator"
              []
              outInt32

getParent209 :: MappedDataFields a0
             -> IO (IDispatch ())
getParent209 =
  propertyGet "Parent"
              []
              outIDispatch

getCount82 :: MappedDataFields a0
           -> IO Int32
getCount82 =
  propertyGet "Count"
              []
              outInt32

getNewEnum82 :: MappedDataFields a0
             -> IO (IUnknown ())
getNewEnum82 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item82 :: WdMappedDataFields
       -> MappedDataFields a0
       -> IO (MappedDataField ())
item82 index =
  function1 "Item"
            [inEnum index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface CanvasShapes
-- 
-- --------------------------------------------------
data CanvasShapes_ a = CanvasShapes__ 
type CanvasShapes a = IDispatch (CanvasShapes_ a)
iidCanvasShapes :: IID (CanvasShapes ())
iidCanvasShapes = mkIID "{396F9073-F9FD-11D3-8EA0-0050049A1A01}"

getApplication210 :: CanvasShapes a0
                  -> IO (Maybe Application)
getApplication210 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator210 :: CanvasShapes a0
              -> IO Int32
getCreator210 =
  propertyGet "Creator"
              []
              outInt32

getParent210 :: CanvasShapes a0
             -> IO (IDispatch ())
getParent210 =
  propertyGet "Parent"
              []
              outIDispatch

getCount83 :: CanvasShapes a0
           -> IO Int32
getCount83 =
  propertyGet "Count"
              []
              outInt32

getNewEnum83 :: CanvasShapes a0
             -> IO (IUnknown ())
getNewEnum83 =
  propertyGet "_NewEnum"
              []
              outIUnknown

item83 :: (Variant a1)
       => a1
       -> CanvasShapes a0
       -> IO (Shape ())
item83 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

addCallout0 :: MsoCalloutType
            -> Float
            -> Float
            -> Float
            -> Float
            -> CanvasShapes a0
            -> IO (Shape ())
addCallout0 type0 left top width height iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallMsoCalloutType type0
    invokeAndCheck (\ methPtr iptr -> prim_Word_addCallout0 methPtr iptr type0 left top width height prop) 13 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addCallout0" prim_Word_addCallout0 :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Ptr (Ptr (Shape a)) -> IO Int32
addConnector0 :: MsoConnectorType
              -> Float
              -> Float
              -> Float
              -> Float
              -> CanvasShapes a0
              -> IO (Shape ())
addConnector0 type0 beginX beginY endX endY iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    type0 <- marshallMsoConnectorType type0
    invokeAndCheck (\ methPtr iptr -> prim_Word_addConnector0 methPtr iptr type0 beginX beginY endX endY prop) 14 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addConnector0" prim_Word_addConnector0 :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Ptr (Ptr (Shape a)) -> IO Int32
addCurve0 :: (Variant a1)
          => a1
          -> CanvasShapes a0
          -> IO (Shape ())
addCurve0 safeArrayOfPoints =
  function1 "AddCurve"
            [inVariant safeArrayOfPoints]
            outIDispatch

addLabel0 :: MsoTextOrientation
          -> Float
          -> Float
          -> Float
          -> Float
          -> CanvasShapes a0
          -> IO (Shape ())
addLabel0 orientation left top width height iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    orientation <- marshallMsoTextOrientation orientation
    invokeAndCheck (\ methPtr iptr -> prim_Word_addLabel0 methPtr iptr orientation left top width height prop) 16 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addLabel0" prim_Word_addLabel0 :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Ptr (Ptr (Shape a)) -> IO Int32
addLine0 :: Float
         -> Float
         -> Float
         -> Float
         -> CanvasShapes a0
         -> IO (Shape ())
addLine0 beginX beginY endX endY =
  function1 "AddLine"
            [ inFloat beginX
            , inFloat beginY
            , inFloat endX
            , inFloat endY
            ]
            outIDispatch

addPicture1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6)
            => String
            -> a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> CanvasShapes a0
            -> IO (Shape ())
addPicture1 fileName linkToFile saveWithDocument left top width height =
  function1 "AddPicture"
            [ inString fileName
            , inVariant linkToFile
            , inVariant saveWithDocument
            , inVariant left
            , inVariant top
            , inVariant width
            , inVariant height
            ]
            outIDispatch

addPolyline0 :: (Variant a1)
             => a1
             -> CanvasShapes a0
             -> IO (Shape ())
addPolyline0 safeArrayOfPoints =
  function1 "AddPolyline"
            [inVariant safeArrayOfPoints]
            outIDispatch

addShape0 :: Int32
          -> Float
          -> Float
          -> Float
          -> Float
          -> CanvasShapes a0
          -> IO (Shape ())
addShape0 type0 left top width height =
  function1 "AddShape"
            [ inInt32 type0
            , inFloat left
            , inFloat top
            , inFloat width
            , inFloat height
            ]
            outIDispatch

addTextEffect0 :: MsoPresetTextEffect
               -> String
               -> String
               -> Float
               -> MsoTriState
               -> MsoTriState
               -> Float
               -> Float
               -> CanvasShapes a0
               -> IO (Shape ())
addTextEffect0 presetTextEffect text fontName fontSize fontBold fontItalic left top iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    presetTextEffect <- marshallMsoPresetTextEffect presetTextEffect
    text <- marshallBSTR text
    fontName <- marshallBSTR fontName
    fontBold <- marshallMsoTriState fontBold
    fontItalic <- marshallMsoTriState fontItalic
    invokeAndCheck (\ methPtr iptr -> prim_Word_addTextEffect0 methPtr iptr presetTextEffect text fontName fontSize fontBold fontItalic left top prop) 21 iptr
    freeBSTR text
    freeBSTR fontName
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addTextEffect0" prim_Word_addTextEffect0 :: Ptr () -> Ptr () -> Ptr () -> Ptr String -> Ptr String -> Float -> Ptr () -> Ptr () -> Float -> Float -> Ptr (Ptr (Shape a)) -> IO Int32
addTextbox0 :: MsoTextOrientation
            -> Float
            -> Float
            -> Float
            -> Float
            -> CanvasShapes a0
            -> IO (Shape ())
addTextbox0 orientation left top width height iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    orientation <- marshallMsoTextOrientation orientation
    invokeAndCheck (\ methPtr iptr -> prim_Word_addTextbox0 methPtr iptr orientation left top width height prop) 22 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_addTextbox0" prim_Word_addTextbox0 :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Float -> Float -> Ptr (Ptr (Shape a)) -> IO Int32
buildFreeform0 :: MsoEditingType
               -> Float
               -> Float
               -> CanvasShapes a0
               -> IO (FreeformBuilder ())
buildFreeform0 editingType x1 y1 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofForeignPtr)
    editingType <- marshallMsoEditingType editingType
    invokeAndCheck (\ methPtr iptr -> prim_Word_buildFreeform0 methPtr iptr editingType x1 y1 prop) 23 iptr
    doThenFree free (readIUnknown False) prop

foreign import stdcall "prim_Word_buildFreeform0" prim_Word_buildFreeform0 :: Ptr () -> Ptr () -> Ptr () -> Float -> Float -> Ptr (Ptr (FreeformBuilder a)) -> IO Int32
range2 :: (Variant a1)
       => a1
       -> CanvasShapes a0
       -> IO (ShapeRange ())
range2 index =
  function1 "Range"
            [inVariant index]
            outIDispatch

selectAll2 :: CanvasShapes a0
           -> IO ()
selectAll2 =
  method0 "SelectAll"
          []

-- --------------------------------------------------
-- 
-- interface TableStyle
-- 
-- --------------------------------------------------
data TableStyle_ a = TableStyle__ 
type TableStyle a = IDispatch (TableStyle_ a)
iidTableStyle :: IID (TableStyle ())
iidTableStyle = mkIID "{B7564E97-0519-4C68-B400-3803E7C63242}"

getApplication211 :: TableStyle a0
                  -> IO (Maybe Application)
getApplication211 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator211 :: TableStyle a0
              -> IO Int32
getCreator211 =
  propertyGet "Creator"
              []
              outInt32

getParent211 :: TableStyle a0
             -> IO (IDispatch ())
getParent211 =
  propertyGet "Parent"
              []
              outIDispatch

getAllowPageBreaks0 :: TableStyle a0
                    -> IO Bool
getAllowPageBreaks0 =
  propertyGet "AllowPageBreaks"
              []
              outBool

setAllowPageBreaks0 :: Bool
                    -> TableStyle a0
                    -> IO ()
setAllowPageBreaks0 prop =
  propertySet "AllowPageBreaks"
              [inBool prop]

getBorders17 :: TableStyle a0
             -> IO (Borders ())
getBorders17 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders16 :: Borders a1
             -> TableStyle a0
             -> IO ()
setBorders16 prop =
  propertySet "Borders"
              [inIDispatch prop]

getBottomPadding1 :: TableStyle a0
                  -> IO Float
getBottomPadding1 =
  propertyGet "BottomPadding"
              []
              outFloat

setBottomPadding1 :: Float
                  -> TableStyle a0
                  -> IO ()
setBottomPadding1 prop =
  propertySet "BottomPadding"
              [inFloat prop]

getLeftPadding1 :: TableStyle a0
                -> IO Float
getLeftPadding1 =
  propertyGet "LeftPadding"
              []
              outFloat

setLeftPadding1 :: Float
                -> TableStyle a0
                -> IO ()
setLeftPadding1 prop =
  propertySet "LeftPadding"
              [inFloat prop]

getTopPadding1 :: TableStyle a0
               -> IO Float
getTopPadding1 =
  propertyGet "TopPadding"
              []
              outFloat

setTopPadding1 :: Float
               -> TableStyle a0
               -> IO ()
setTopPadding1 prop =
  propertySet "TopPadding"
              [inFloat prop]

getRightPadding1 :: TableStyle a0
                 -> IO Float
getRightPadding1 =
  propertyGet "RightPadding"
              []
              outFloat

setRightPadding1 :: Float
                 -> TableStyle a0
                 -> IO ()
setRightPadding1 prop =
  propertySet "RightPadding"
              [inFloat prop]

getAlignment9 :: TableStyle a0
              -> IO WdRowAlignment
getAlignment9 =
  propertyGet "Alignment"
              []
              outEnum

setAlignment9 :: WdRowAlignment
              -> TableStyle a0
              -> IO ()
setAlignment9 prop =
  propertySet "Alignment"
              [inEnum prop]

getSpacing2 :: TableStyle a0
            -> IO Float
getSpacing2 =
  propertyGet "Spacing"
              []
              outFloat

setSpacing2 :: Float
            -> TableStyle a0
            -> IO ()
setSpacing2 prop =
  propertySet "Spacing"
              [inFloat prop]

condition :: WdConditionCode
          -> TableStyle a0
          -> IO (ConditionalStyle ())
condition conditionCode =
  function1 "Condition"
            [inEnum conditionCode]
            outIUnknown

getTableDirection1 :: TableStyle a0
                   -> IO WdTableDirection
getTableDirection1 =
  propertyGet "TableDirection"
              []
              outEnum

setTableDirection1 :: WdTableDirection
                   -> TableStyle a0
                   -> IO ()
setTableDirection1 prop =
  propertySet "TableDirection"
              [inEnum prop]

getAllowBreakAcrossPage :: TableStyle a0
                        -> IO Int32
getAllowBreakAcrossPage =
  propertyGet "AllowBreakAcrossPage"
              []
              outInt32

setAllowBreakAcrossPage :: Int32
                        -> TableStyle a0
                        -> IO ()
setAllowBreakAcrossPage prop =
  propertySet "AllowBreakAcrossPage"
              [inInt32 prop]

getLeftIndent5 :: TableStyle a0
               -> IO Float
getLeftIndent5 =
  propertyGet "LeftIndent"
              []
              outFloat

setLeftIndent7 :: Float
               -> TableStyle a0
               -> IO ()
setLeftIndent7 prop =
  propertySet "LeftIndent"
              [inFloat prop]

getShading14 :: TableStyle a0
             -> IO (Shading ())
getShading14 =
  propertyGet "Shading"
              []
              outIDispatch

getRowStripe :: TableStyle a0
             -> IO Int32
getRowStripe =
  propertyGet "RowStripe"
              []
              outInt32

setRowStripe :: Int32
             -> TableStyle a0
             -> IO ()
setRowStripe prop =
  propertySet "RowStripe"
              [inInt32 prop]

getColumnStripe :: TableStyle a0
                -> IO Int32
getColumnStripe =
  propertyGet "ColumnStripe"
              []
              outInt32

setColumnStripe :: Int32
                -> TableStyle a0
                -> IO ()
setColumnStripe prop =
  propertySet "ColumnStripe"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface ConditionalStyle
-- 
-- --------------------------------------------------
data ConditionalStyle_ a = ConditionalStyle__ 
type ConditionalStyle a = IDispatch (ConditionalStyle_ a)
iidConditionalStyle :: IID (ConditionalStyle ())
iidConditionalStyle =
  mkIID "{1498F56D-ED33-41F9-B37B-EF30E50B08AC}"

getApplication212 :: ConditionalStyle a0
                  -> IO (Maybe Application)
getApplication212 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator212 :: ConditionalStyle a0
              -> IO Int32
getCreator212 =
  propertyGet "Creator"
              []
              outInt32

getParent212 :: ConditionalStyle a0
             -> IO (IDispatch ())
getParent212 =
  propertyGet "Parent"
              []
              outIDispatch

getShading15 :: ConditionalStyle a0
             -> IO (Shading ())
getShading15 =
  propertyGet "Shading"
              []
              outIDispatch

getBorders18 :: ConditionalStyle a0
             -> IO (Borders ())
getBorders18 =
  propertyGet "Borders"
              []
              outIDispatch

setBorders17 :: Borders a1
             -> ConditionalStyle a0
             -> IO ()
setBorders17 prop =
  propertySet "Borders"
              [inIDispatch prop]

getBottomPadding2 :: ConditionalStyle a0
                  -> IO Float
getBottomPadding2 =
  propertyGet "BottomPadding"
              []
              outFloat

setBottomPadding2 :: Float
                  -> ConditionalStyle a0
                  -> IO ()
setBottomPadding2 prop =
  propertySet "BottomPadding"
              [inFloat prop]

getTopPadding2 :: ConditionalStyle a0
               -> IO Float
getTopPadding2 =
  propertyGet "TopPadding"
              []
              outFloat

setTopPadding2 :: Float
               -> ConditionalStyle a0
               -> IO ()
setTopPadding2 prop =
  propertySet "TopPadding"
              [inFloat prop]

getLeftPadding2 :: ConditionalStyle a0
                -> IO Float
getLeftPadding2 =
  propertyGet "LeftPadding"
              []
              outFloat

setLeftPadding2 :: Float
                -> ConditionalStyle a0
                -> IO ()
setLeftPadding2 prop =
  propertySet "LeftPadding"
              [inFloat prop]

getRightPadding2 :: ConditionalStyle a0
                 -> IO Float
getRightPadding2 =
  propertyGet "RightPadding"
              []
              outFloat

setRightPadding2 :: Float
                 -> ConditionalStyle a0
                 -> IO ()
setRightPadding2 prop =
  propertySet "RightPadding"
              [inFloat prop]

getParagraphFormat4 :: ConditionalStyle a0
                    -> IO (Maybe ParagraphFormat)
getParagraphFormat4 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getParagraphFormat methPtr iptr prop) 21 iptr
    doThenFree free (readunique readParagraphFormat) prop

setParagraphFormat4 :: ParagraphFormat
                    -> ConditionalStyle a0
                    -> IO ()
setParagraphFormat4 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofParagraphFormat)) writeParagraphFormat prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setParagraphFormat methPtr iptr prop) 22 iptr
    free prop

getFont5 :: ConditionalStyle a0
         -> IO (Maybe Font)
getFont5 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getFont methPtr iptr prop) 23 iptr
    doThenFree free (readunique readFont) prop

setFont5 :: Font
         -> ConditionalStyle a0
         -> IO ()
setFont5 prop iptr =
  do
    prop <- marshallref (allocBytes (fromIntegral sizeofFont)) writeFont prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setFont methPtr iptr prop) 24 iptr
    free prop

-- --------------------------------------------------
-- 
-- interface FootnoteOptions
-- 
-- --------------------------------------------------
data FootnoteOptions_ a = FootnoteOptions__ 
type FootnoteOptions a = IDispatch (FootnoteOptions_ a)
iidFootnoteOptions :: IID (FootnoteOptions ())
iidFootnoteOptions = mkIID "{BEA85A24-D7DA-4F3D-B58C-ED90FB01D615}"

getApplication213 :: FootnoteOptions a0
                  -> IO (Maybe Application)
getApplication213 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator213 :: FootnoteOptions a0
              -> IO Int32
getCreator213 =
  propertyGet "Creator"
              []
              outInt32

getParent213 :: FootnoteOptions a0
             -> IO (IDispatch ())
getParent213 =
  propertyGet "Parent"
              []
              outIDispatch

getLocation1 :: FootnoteOptions a0
             -> IO WdFootnoteLocation
getLocation1 =
  propertyGet "Location"
              []
              outEnum

setLocation1 :: WdFootnoteLocation
             -> FootnoteOptions a0
             -> IO ()
setLocation1 prop =
  propertySet "Location"
              [inEnum prop]

getNumberStyle4 :: FootnoteOptions a0
                -> IO WdNoteNumberStyle
getNumberStyle4 =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle4 :: WdNoteNumberStyle
                -> FootnoteOptions a0
                -> IO ()
setNumberStyle4 prop =
  propertySet "NumberStyle"
              [inEnum prop]

getStartingNumber3 :: FootnoteOptions a0
                   -> IO Int32
getStartingNumber3 =
  propertyGet "StartingNumber"
              []
              outInt32

setStartingNumber3 :: Int32
                   -> FootnoteOptions a0
                   -> IO ()
setStartingNumber3 prop =
  propertySet "StartingNumber"
              [inInt32 prop]

getNumberingRule1 :: FootnoteOptions a0
                  -> IO WdNumberingRule
getNumberingRule1 =
  propertyGet "NumberingRule"
              []
              outEnum

setNumberingRule1 :: WdNumberingRule
                  -> FootnoteOptions a0
                  -> IO ()
setNumberingRule1 prop =
  propertySet "NumberingRule"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface EndnoteOptions
-- 
-- --------------------------------------------------
data EndnoteOptions_ a = EndnoteOptions__ 
type EndnoteOptions a = IDispatch (EndnoteOptions_ a)
iidEndnoteOptions :: IID (EndnoteOptions ())
iidEndnoteOptions = mkIID "{BF043168-F4DE-4E7C-B206-741A8B3EF71A}"

getApplication214 :: EndnoteOptions a0
                  -> IO (Maybe Application)
getApplication214 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator214 :: EndnoteOptions a0
              -> IO Int32
getCreator214 =
  propertyGet "Creator"
              []
              outInt32

getParent214 :: EndnoteOptions a0
             -> IO (IDispatch ())
getParent214 =
  propertyGet "Parent"
              []
              outIDispatch

getLocation2 :: EndnoteOptions a0
             -> IO WdEndnoteLocation
getLocation2 =
  propertyGet "Location"
              []
              outEnum

setLocation2 :: WdEndnoteLocation
             -> EndnoteOptions a0
             -> IO ()
setLocation2 prop =
  propertySet "Location"
              [inEnum prop]

getNumberStyle5 :: EndnoteOptions a0
                -> IO WdNoteNumberStyle
getNumberStyle5 =
  propertyGet "NumberStyle"
              []
              outEnum

setNumberStyle5 :: WdNoteNumberStyle
                -> EndnoteOptions a0
                -> IO ()
setNumberStyle5 prop =
  propertySet "NumberStyle"
              [inEnum prop]

getStartingNumber4 :: EndnoteOptions a0
                   -> IO Int32
getStartingNumber4 =
  propertyGet "StartingNumber"
              []
              outInt32

setStartingNumber4 :: Int32
                   -> EndnoteOptions a0
                   -> IO ()
setStartingNumber4 prop =
  propertySet "StartingNumber"
              [inInt32 prop]

getNumberingRule2 :: EndnoteOptions a0
                  -> IO WdNumberingRule
getNumberingRule2 =
  propertyGet "NumberingRule"
              []
              outEnum

setNumberingRule2 :: WdNumberingRule
                  -> EndnoteOptions a0
                  -> IO ()
setNumberingRule2 prop =
  propertySet "NumberingRule"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface Reviewers
-- 
-- --------------------------------------------------
data Reviewers_ a = Reviewers__ 
type Reviewers a = IDispatch (Reviewers_ a)
iidReviewers :: IID (Reviewers ())
iidReviewers = mkIID "{12DCDC9A-5418-48A3-BBE6-EB57BAE275E8}"

getNewEnum84 :: Reviewers a0
             -> IO (IUnknown ())
getNewEnum84 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication215 :: Reviewers a0
                  -> IO (Maybe Application)
getApplication215 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator215 :: Reviewers a0
              -> IO Int32
getCreator215 =
  propertyGet "Creator"
              []
              outInt32

getParent215 :: Reviewers a0
             -> IO (IDispatch ())
getParent215 =
  propertyGet "Parent"
              []
              outIDispatch

getCount84 :: Reviewers a0
           -> IO Int32
getCount84 =
  propertyGet "Count"
              []
              outInt32

item84 :: (Variant a1)
       => a1
       -> Reviewers a0
       -> IO (Reviewer ())
item84 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Reviewer
-- 
-- --------------------------------------------------
data Reviewer_ a = Reviewer__ 
type Reviewer a = IDispatch (Reviewer_ a)
iidReviewer :: IID (Reviewer ())
iidReviewer = mkIID "{47CEF4AE-DC32-4220-8AA5-19CCC0E6633A}"

getApplication216 :: Reviewer a0
                  -> IO (Maybe Application)
getApplication216 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator216 :: Reviewer a0
              -> IO Int32
getCreator216 =
  propertyGet "Creator"
              []
              outInt32

getParent216 :: Reviewer a0
             -> IO (IDispatch ())
getParent216 =
  propertyGet "Parent"
              []
              outIDispatch

getVisible9 :: Reviewer a0
            -> IO Bool
getVisible9 =
  propertyGet "Visible"
              []
              outBool

setVisible9 :: Bool
            -> Reviewer a0
            -> IO ()
setVisible9 prop =
  propertySet "Visible"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface TaskPane
-- 
-- --------------------------------------------------
data TaskPane_ a = TaskPane__ 
type TaskPane a = IDispatch (TaskPane_ a)
iidTaskPane :: IID (TaskPane ())
iidTaskPane = mkIID "{B9F1A4E2-0D0A-43B7-8495-139E7ACBD840}"

getApplication217 :: TaskPane a0
                  -> IO (Maybe Application)
getApplication217 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator217 :: TaskPane a0
              -> IO Int32
getCreator217 =
  propertyGet "Creator"
              []
              outInt32

getParent217 :: TaskPane a0
             -> IO (IDispatch ())
getParent217 =
  propertyGet "Parent"
              []
              outIDispatch

getVisible10 :: TaskPane a0
             -> IO Bool
getVisible10 =
  propertyGet "Visible"
              []
              outBool

setVisible10 :: Bool
             -> TaskPane a0
             -> IO ()
setVisible10 prop =
  propertySet "Visible"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface TaskPanes
-- 
-- --------------------------------------------------
data TaskPanes_ a = TaskPanes__ 
type TaskPanes a = IDispatch (TaskPanes_ a)
iidTaskPanes :: IID (TaskPanes ())
iidTaskPanes = mkIID "{E6AAEC05-E543-4085-BA92-9BF7D2474F5C}"

getNewEnum85 :: TaskPanes a0
             -> IO (IUnknown ())
getNewEnum85 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount85 :: TaskPanes a0
           -> IO Int32
getCount85 =
  propertyGet "Count"
              []
              outInt32

getApplication218 :: TaskPanes a0
                  -> IO (Maybe Application)
getApplication218 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator218 :: TaskPanes a0
              -> IO Int32
getCreator218 =
  propertyGet "Creator"
              []
              outInt32

getParent218 :: TaskPanes a0
             -> IO (IDispatch ())
getParent218 =
  propertyGet "Parent"
              []
              outIDispatch

item85 :: WdTaskPanes
       -> TaskPanes a0
       -> IO (TaskPane ())
item85 index =
  function1 "Item"
            [inEnum index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface IApplicationEvents3
-- 
-- --------------------------------------------------
data IApplicationEvents3_ a = IApplicationEvents3__ 
type IApplicationEvents3 a = IDispatch (IApplicationEvents3_ a)
iidIApplicationEvents3 :: IID (IApplicationEvents3 ())
iidIApplicationEvents3 =
  mkIID "{00020A00-0001-0000-C000-000000000046}"

startup2 :: IApplicationEvents3 a0
         -> IO ()
startup2 =
  method0 "Startup"
          []

quit3 :: IApplicationEvents3 a0
      -> IO ()
quit3 =
  method0 "Quit"
          []

documentChange2 :: IApplicationEvents3 a0
                -> IO ()
documentChange2 =
  method0 "DocumentChange"
          []

documentOpen1 :: Document
              -> IApplicationEvents3 a0
              -> IO ()
documentOpen1 doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 10 iptr
    free doc

documentBeforeClose1 :: Document
                     -> Bool
                     -> IApplicationEvents3 a0
                     -> IO ()
documentBeforeClose1 doc cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeClose methPtr iptr doc cancel) 11 iptr
    free doc
    free cancel

documentBeforePrint1 :: Document
                     -> Bool
                     -> IApplicationEvents3 a0
                     -> IO ()
documentBeforePrint1 doc cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeClose methPtr iptr doc cancel) 12 iptr
    free doc
    free cancel

documentBeforeSave1 :: Document
                    -> Bool
                    -> Bool
                    -> IApplicationEvents3 a0
                    -> IO ()
documentBeforeSave1 doc saveAsUI cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    saveAsUI <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL saveAsUI
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeSave methPtr iptr doc saveAsUI cancel) 13 iptr
    free doc
    free saveAsUI
    free cancel

newDocument1 :: Document
             -> IApplicationEvents3 a0
             -> IO ()
newDocument1 doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 14 iptr
    free doc

windowActivate1 :: Document
                -> Window a1
                -> IApplicationEvents3 a0
                -> IO ()
windowActivate1 doc wn iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    wn <- marshallIUnknown wn
    invokeAndCheck (\ methPtr iptr -> withForeignPtr wn (\ wn -> prim_Word_windowActivate methPtr iptr doc wn)) 15 iptr
    free doc

windowDeactivate1 :: Document
                  -> Window a1
                  -> IApplicationEvents3 a0
                  -> IO ()
windowDeactivate1 doc wn iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    wn <- marshallIUnknown wn
    invokeAndCheck (\ methPtr iptr -> withForeignPtr wn (\ wn -> prim_Word_windowActivate methPtr iptr doc wn)) 16 iptr
    free doc

windowSelectionChange1 :: Selection a1
                       -> IApplicationEvents3 a0
                       -> IO ()
windowSelectionChange1 sel =
  method0 "WindowSelectionChange"
          [inIDispatch sel]

windowBeforeRightClick1 :: Selection a1
                        -> Bool
                        -> IApplicationEvents3 a0
                        -> IO ()
windowBeforeRightClick1 sel cancel =
  method0 "WindowBeforeRightClick"
          [ inIDispatch sel
          , inBool cancel
          ]

windowBeforeDoubleClick1 :: Selection a1
                         -> Bool
                         -> IApplicationEvents3 a0
                         -> IO ()
windowBeforeDoubleClick1 sel cancel =
  method0 "WindowBeforeDoubleClick"
          [ inIDispatch sel
          , inBool cancel
          ]

ePostagePropertyDialog :: Document
                       -> IApplicationEvents3 a0
                       -> IO ()
ePostagePropertyDialog doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 20 iptr
    free doc

ePostageInsert :: Document
               -> IApplicationEvents3 a0
               -> IO ()
ePostageInsert doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 21 iptr
    free doc

mailMergeAfterMerge :: Document
                    -> Document
                    -> IApplicationEvents3 a0
                    -> IO ()
mailMergeAfterMerge doc docResult iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    docResult <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument docResult
    invokeAndCheck (\ methPtr iptr -> prim_Word_mailMergeAfterMerge methPtr iptr doc docResult) 22 iptr
    free doc
    free docResult

foreign import stdcall "dynamic" prim_Word_mailMergeAfterMerge :: Ptr () -> Ptr () -> Ptr Document -> Ptr Document -> IO Int32
mailMergeAfterRecordMerge :: Document
                          -> IApplicationEvents3 a0
                          -> IO ()
mailMergeAfterRecordMerge doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 23 iptr
    free doc

mailMergeBeforeMerge :: Document
                     -> Int32
                     -> Int32
                     -> Bool
                     -> IApplicationEvents3 a0
                     -> IO ()
mailMergeBeforeMerge doc startRecord endRecord cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_mailMergeBeforeMerge methPtr iptr doc startRecord endRecord cancel) 24 iptr
    free doc
    free cancel

foreign import stdcall "dynamic" prim_Word_mailMergeBeforeMerge :: Ptr () -> Ptr () -> Ptr Document -> Int32 -> Int32 -> Ptr Int16 -> IO Int32
mailMergeBeforeRecordMerge :: Document
                           -> Bool
                           -> IApplicationEvents3 a0
                           -> IO ()
mailMergeBeforeRecordMerge doc cancel iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    cancel <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL cancel
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeClose methPtr iptr doc cancel) 25 iptr
    free doc
    free cancel

mailMergeDataSourceLoad :: Document
                        -> IApplicationEvents3 a0
                        -> IO ()
mailMergeDataSourceLoad doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 26 iptr
    free doc

mailMergeDataSourceValidate :: Document
                            -> Bool
                            -> IApplicationEvents3 a0
                            -> IO ()
mailMergeDataSourceValidate doc handled iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    handled <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL handled
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentBeforeClose methPtr iptr doc handled) 27 iptr
    free doc
    free handled

mailMergeWizardSendToCustom :: Document
                            -> IApplicationEvents3 a0
                            -> IO ()
mailMergeWizardSendToCustom doc iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    invokeAndCheck (\ methPtr iptr -> prim_Word_documentOpen methPtr iptr doc) 28 iptr
    free doc

mailMergeWizardStateChange :: Document
                           -> Int32
                           -> Int32
                           -> Bool
                           -> IApplicationEvents3 a0
                           -> IO ()
mailMergeWizardStateChange doc fromState toState handled iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    fromState <- marshallref (allocBytes (fromIntegral sizeofInt32)) writeInt32 fromState
    toState <- marshallref (allocBytes (fromIntegral sizeofInt32)) writeInt32 toState
    handled <- marshallref (allocBytes (fromIntegral sizeofInt16)) writeVARIANT_BOOL handled
    invokeAndCheck (\ methPtr iptr -> prim_Word_mailMergeWizardStateChange methPtr iptr doc fromState toState handled) 29 iptr
    free doc
    free fromState
    free toState
    free handled

foreign import stdcall "dynamic" prim_Word_mailMergeWizardStateChange :: Ptr () -> Ptr () -> Ptr Document -> Ptr Int32 -> Ptr Int32 -> Ptr Int16 -> IO Int32
windowSize :: Document
           -> Window a1
           -> IApplicationEvents3 a0
           -> IO ()
windowSize doc wn iptr =
  do
    doc <- marshallref (allocBytes (fromIntegral sizeofDocument)) writeDocument doc
    wn <- marshallIUnknown wn
    invokeAndCheck (\ methPtr iptr -> withForeignPtr wn (\ wn -> prim_Word_windowActivate methPtr iptr doc wn)) 30 iptr
    free doc

-- --------------------------------------------------
-- 
-- dispinterface ApplicationEvents3
-- 
-- --------------------------------------------------
data ApplicationEvents3_ a = ApplicationEvents3__ 
type ApplicationEvents3 a = IDispatch (ApplicationEvents3_ a)
iidApplicationEvents3 :: IID (ApplicationEvents3 ())
iidApplicationEvents3 =
  mkIID "{00020A00-0000-0000-C000-000000000046}"

mkApplicationEvents3_vtbl :: (GUID -> objState -> IO (Ptr ()))
                          -> (objState -> IO Word32)
                          -> (objState -> IO Word32)
                          -> (objState -> IO Word32)
                          -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                          -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                          -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                          -> (objState -> IO ())
                          -> (objState -> IO ())
                          -> (objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> Bool -> Bool -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Selection a0 -> objState -> IO ())
                          -> (Selection a0 -> Bool -> objState -> IO ())
                          -> (Selection a0 -> Bool -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Document -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Int32 -> Int32 -> Bool -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Int32 -> Int32 -> Bool -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> IO (ComVTable (ApplicationEvents3 ()) objState)
mkApplicationEvents3_vtbl queryInterface0 addRef0 release0 getTypeInfoCount0 getTypeInfo0 getIDsOfNames0 invoke0 startup3 quit4 documentChange3 documentOpen2 documentBeforeClose2 documentBeforePrint2 documentBeforeSave2 newDocument2 windowActivate2 windowDeactivate2 windowSelectionChange2 windowBeforeRightClick2 windowBeforeDoubleClick2 ePostagePropertyDialog0 ePostageInsert0 mailMergeAfterMerge0 mailMergeAfterRecordMerge0 mailMergeBeforeMerge0 mailMergeBeforeRecordMerge0 mailMergeDataSourceLoad0 mailMergeDataSourceValidate0 mailMergeWizardSendToCustom0 mailMergeWizardStateChange0 windowSize0 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface0 queryInterface0)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef0 addRef0)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release0 release0)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount0 getTypeInfoCount0)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo0 getTypeInfo0)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames0 getIDsOfNames0)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke0 invoke0)
   meth_arg7 = mkDispMethod "Startup" 0x1 (prim_startup3 startup3)
   meth_arg8 = mkDispMethod "Quit" 0x2 (prim_quit4 quit4)
   meth_arg9 = mkDispMethod "DocumentChange" 0x3 (prim_documentChange3 documentChange3)
   meth_arg10 = mkDispMethod "DocumentOpen" 0x4 (prim_documentOpen2 documentOpen2)
   meth_arg11 = mkDispMethod "DocumentBeforeClose" 0x6 (prim_documentBeforeClose2 documentBeforeClose2)
   meth_arg12 = mkDispMethod "DocumentBeforePrint" 0x7 (prim_documentBeforePrint2 documentBeforePrint2)
   meth_arg13 = mkDispMethod "DocumentBeforeSave" 0x8 (prim_documentBeforeSave2 documentBeforeSave2)
   meth_arg14 = mkDispMethod "NewDocument" 0x9 (prim_newDocument2 newDocument2)
   meth_arg15 = mkDispMethod "WindowActivate" 0xa (prim_windowActivate2 windowActivate2)
   meth_arg16 = mkDispMethod "WindowDeactivate" 0xb (prim_windowDeactivate2 windowDeactivate2)
   meth_arg17 = mkDispMethod "WindowSelectionChange" 0xc (prim_windowSelectionChange2 windowSelectionChange2)
   meth_arg18 = mkDispMethod "WindowBeforeRightClick" 0xd (prim_windowBeforeRightClick2 windowBeforeRightClick2)
   meth_arg19 = mkDispMethod "WindowBeforeDoubleClick" 0xe (prim_windowBeforeDoubleClick2 windowBeforeDoubleClick2)
   meth_arg20 = mkDispMethod "EPostagePropertyDialog" 0xf (prim_ePostagePropertyDialog0 ePostagePropertyDialog0)
   meth_arg21 = mkDispMethod "EPostageInsert" 0x10 (prim_ePostageInsert0 ePostageInsert0)
   meth_arg22 = mkDispMethod "MailMergeAfterMerge" 0x11 (prim_mailMergeAfterMerge0 mailMergeAfterMerge0)
   meth_arg23 = mkDispMethod "MailMergeAfterRecordMerge" 0x12 (prim_mailMergeAfterRecordMerge0 mailMergeAfterRecordMerge0)
   meth_arg24 = mkDispMethod "MailMergeBeforeMerge" 0x13 (prim_mailMergeBeforeMerge0 mailMergeBeforeMerge0)
   meth_arg25 = mkDispMethod "MailMergeBeforeRecordMerge" 0x14 (prim_mailMergeBeforeRecordMerge0 mailMergeBeforeRecordMerge0)
   meth_arg26 = mkDispMethod "MailMergeDataSourceLoad" 0x15 (prim_mailMergeDataSourceLoad0 mailMergeDataSourceLoad0)
   meth_arg27 = mkDispMethod "MailMergeDataSourceValidate" 0x16 (prim_mailMergeDataSourceValidate0 mailMergeDataSourceValidate0)
   meth_arg28 = mkDispMethod "MailMergeWizardSendToCustom" 0x17 (prim_mailMergeWizardSendToCustom0 mailMergeWizardSendToCustom0)
   meth_arg29 = mkDispMethod "MailMergeWizardStateChange" 0x18 (prim_mailMergeWizardStateChange0 mailMergeWizardStateChange0)
   meth_arg30 = mkDispMethod "WindowSize" 0x19 (prim_windowSize0 windowSize0)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         , meth_arg20
                         , meth_arg21
                         , meth_arg22
                         , meth_arg23
                         , meth_arg24
                         , meth_arg25
                         , meth_arg26
                         , meth_arg27
                         , meth_arg28
                         , meth_arg29
                         , meth_arg30
                         ]

prim_queryInterface0 :: (GUID -> objState -> IO (Ptr ()))
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_queryInterface0 queryInterface0_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface0_meth riid)
          ppvObj

prim_addRef0 :: (objState -> IO Word32)
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_addRef0 addRef0_meth =
  retVal $ \ the_res ->
  apply_1 (addRef0_meth)
          the_res

prim_release0 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_release0 release0_meth =
  retVal $ \ the_res ->
  apply_1 (release0_meth)
          the_res

prim_getTypeInfoCount0 :: (objState -> IO Word32)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_getTypeInfoCount0 getTypeInfoCount0_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount0_meth)
          pctinfo

prim_getTypeInfo0 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_getTypeInfo0 getTypeInfo0_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo0_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames0 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_getIDsOfNames0 getIDsOfNames0_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames0_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke0 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_invoke0 invoke0_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke0_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_startup3 :: (objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_startup3 startup3_meth = apply_0 (startup3_meth)

prim_quit4 :: (objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_quit4 quit4_meth = apply_0 (quit4_meth)

prim_documentChange3 :: (objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_documentChange3 documentChange3_meth =
  apply_0 (documentChange3_meth)

prim_documentOpen2 :: (Document -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_documentOpen2 documentOpen2_meth =
  inArg $ \ doc ->
  apply_0 (documentOpen2_meth doc)

prim_documentBeforeClose2 :: (Document -> Bool -> objState -> IO ())
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_documentBeforeClose2 documentBeforeClose2_meth =
  inArg $ \ doc ->
  inArg $ \ cancel ->
  apply_0 (documentBeforeClose2_meth doc cancel)

prim_documentBeforePrint2 :: (Document -> Bool -> objState -> IO ())
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_documentBeforePrint2 documentBeforePrint2_meth =
  inArg $ \ doc ->
  inArg $ \ cancel ->
  apply_0 (documentBeforePrint2_meth doc cancel)

prim_documentBeforeSave2 :: (Document -> Bool -> Bool -> objState -> IO ())
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_documentBeforeSave2 documentBeforeSave2_meth =
  inArg $ \ doc ->
  inArg $ \ saveAsUI ->
  inArg $ \ cancel ->
  apply_0 (documentBeforeSave2_meth doc saveAsUI cancel)

prim_newDocument2 :: (Document -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_newDocument2 newDocument2_meth =
  inArg $ \ doc ->
  apply_0 (newDocument2_meth doc)

prim_windowActivate2 :: (Document -> Window a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_windowActivate2 windowActivate2_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowActivate2_meth doc wn)

prim_windowDeactivate2 :: (Document -> Window a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_windowDeactivate2 windowDeactivate2_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowDeactivate2_meth doc wn)

prim_windowSelectionChange2 :: (Selection a0 -> objState -> IO ())
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_windowSelectionChange2 windowSelectionChange2_meth =
  inArg $ \ sel ->
  apply_0 (windowSelectionChange2_meth sel)

prim_windowBeforeRightClick2 :: (Selection a0 -> Bool -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_windowBeforeRightClick2 windowBeforeRightClick2_meth =
  inArg $ \ sel ->
  inArg $ \ cancel ->
  apply_0 (windowBeforeRightClick2_meth sel cancel)

prim_windowBeforeDoubleClick2 :: (Selection a0 -> Bool -> objState -> IO ())
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_windowBeforeDoubleClick2 windowBeforeDoubleClick2_meth =
  inArg $ \ sel ->
  inArg $ \ cancel ->
  apply_0 (windowBeforeDoubleClick2_meth sel cancel)

prim_ePostagePropertyDialog0 :: (Document -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_ePostagePropertyDialog0 ePostagePropertyDialog0_meth =
  inArg $ \ doc ->
  apply_0 (ePostagePropertyDialog0_meth doc)

prim_ePostageInsert0 :: (Document -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_ePostageInsert0 ePostageInsert0_meth =
  inArg $ \ doc ->
  apply_0 (ePostageInsert0_meth doc)

prim_mailMergeAfterMerge0 :: (Document -> Document -> objState -> IO ())
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_mailMergeAfterMerge0 mailMergeAfterMerge0_meth =
  inArg $ \ doc ->
  inArg $ \ docResult ->
  apply_0 (mailMergeAfterMerge0_meth doc docResult)

prim_mailMergeAfterRecordMerge0 :: (Document -> objState -> IO ())
                                -> [VARIANT]
                                -> objState
                                -> IO (Maybe VARIANT)
prim_mailMergeAfterRecordMerge0 mailMergeAfterRecordMerge0_meth =
  inArg $ \ doc ->
  apply_0 (mailMergeAfterRecordMerge0_meth doc)

prim_mailMergeBeforeMerge0 :: (Document -> Int32 -> Int32 -> Bool -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_mailMergeBeforeMerge0 mailMergeBeforeMerge0_meth =
  inArg $ \ doc ->
  inArg $ \ startRecord ->
  inArg $ \ endRecord ->
  inArg $ \ cancel ->
  apply_0 (mailMergeBeforeMerge0_meth doc startRecord endRecord cancel)

prim_mailMergeBeforeRecordMerge0 :: (Document -> Bool -> objState -> IO ())
                                 -> [VARIANT]
                                 -> objState
                                 -> IO (Maybe VARIANT)
prim_mailMergeBeforeRecordMerge0 mailMergeBeforeRecordMerge0_meth =
  inArg $ \ doc ->
  inArg $ \ cancel ->
  apply_0 (mailMergeBeforeRecordMerge0_meth doc cancel)

prim_mailMergeDataSourceLoad0 :: (Document -> objState -> IO ())
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_mailMergeDataSourceLoad0 mailMergeDataSourceLoad0_meth =
  inArg $ \ doc ->
  apply_0 (mailMergeDataSourceLoad0_meth doc)

prim_mailMergeDataSourceValidate0 :: (Document -> Bool -> objState -> IO ())
                                  -> [VARIANT]
                                  -> objState
                                  -> IO (Maybe VARIANT)
prim_mailMergeDataSourceValidate0 mailMergeDataSourceValidate0_meth =
  inArg $ \ doc ->
  inArg $ \ handled ->
  apply_0 (mailMergeDataSourceValidate0_meth doc handled)

prim_mailMergeWizardSendToCustom0 :: (Document -> objState -> IO ())
                                  -> [VARIANT]
                                  -> objState
                                  -> IO (Maybe VARIANT)
prim_mailMergeWizardSendToCustom0 mailMergeWizardSendToCustom0_meth =
  inArg $ \ doc ->
  apply_0 (mailMergeWizardSendToCustom0_meth doc)

prim_mailMergeWizardStateChange0 :: (Document -> Int32 -> Int32 -> Bool -> objState -> IO ())
                                 -> [VARIANT]
                                 -> objState
                                 -> IO (Maybe VARIANT)
prim_mailMergeWizardStateChange0 mailMergeWizardStateChange0_meth =
  inArg $ \ doc ->
  inArg $ \ fromState ->
  inArg $ \ toState ->
  inArg $ \ handled ->
  apply_0 (mailMergeWizardStateChange0_meth doc fromState toState handled)

prim_windowSize0 :: (Document -> Window a0 -> objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_windowSize0 windowSize0_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowSize0_meth doc wn)

data WdDisableFeaturesIntroducedAfter
 = WdDisableFeaturesIntroducedAfterList__ [WdDisableFeaturesIntroducedAfter]
 | Wd70
 | Wd70FE
 | Wd80
 
instance Flags (WdDisableFeaturesIntroducedAfter) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDisableFeaturesIntroducedAfter) where
  fromEnum v =
    case v of
       (WdDisableFeaturesIntroducedAfterList__ xs) -> orList (map fromEnum xs)
       Wd70 -> 0
       Wd70FE -> 1
       Wd80 -> 2
  
  toEnum v =
    case v of
       0 -> Wd70
       1 -> Wd70FE
       2 -> Wd80
       x -> WdDisableFeaturesIntroducedAfterList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                         then Just (toEnum (fromIntegral val))
                                                                         else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDisableFeaturesIntroducedAfter: illegal enum value "
  
instance Variant (WdDisableFeaturesIntroducedAfter) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdWrapTypeMerged
 = WdWrapMergeInline
 | WdWrapMergeSquare
 | WdWrapMergeTight
 | WdWrapMergeBehind
 | WdWrapMergeFront
 | WdWrapMergeThrough
 | WdWrapMergeTopBottom
 deriving (Enum)
instance Variant (WdWrapTypeMerged) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRecoveryType
 = WdPasteDefault
 | WdSingleCellText
 | WdSingleCellTable
 | WdListContinueNumbering
 | WdListRestartNumbering
 | WdTableAppendTable
 | WdTableInsertAsRows
 | WdTableOriginalFormatting
 | WdChartPicture
 | WdChart
 | WdChartLinked
 | WdFormatOriginalFormatting
 | WdUseDestinationStylesRecovery
 | WdFormatSurroundingFormattingWithEmphasis
 | WdFormatPlainText
 | WdTableOverwriteCells
 | WdListCombineWithExistingList
 | WdListDontMerge
 
instance Enum (WdRecoveryType) where
  fromEnum v =
    case v of
       WdPasteDefault -> 0
       WdSingleCellText -> 5
       WdSingleCellTable -> 6
       WdListContinueNumbering -> 7
       WdListRestartNumbering -> 8
       WdTableAppendTable -> 10
       WdTableInsertAsRows -> 11
       WdTableOriginalFormatting -> 12
       WdChartPicture -> 13
       WdChart -> 14
       WdChartLinked -> 15
       WdFormatOriginalFormatting -> 16
       WdUseDestinationStylesRecovery -> 19
       WdFormatSurroundingFormattingWithEmphasis -> 20
       WdFormatPlainText -> 22
       WdTableOverwriteCells -> 23
       WdListCombineWithExistingList -> 24
       WdListDontMerge -> 25
  
  toEnum v =
    case v of
       0 -> WdPasteDefault
       5 -> WdSingleCellText
       6 -> WdSingleCellTable
       7 -> WdListContinueNumbering
       8 -> WdListRestartNumbering
       10 -> WdTableAppendTable
       11 -> WdTableInsertAsRows
       12 -> WdTableOriginalFormatting
       13 -> WdChartPicture
       14 -> WdChart
       15 -> WdChartLinked
       16 -> WdFormatOriginalFormatting
       19 -> WdUseDestinationStylesRecovery
       20 -> WdFormatSurroundingFormattingWithEmphasis
       22 -> WdFormatPlainText
       23 -> WdTableOverwriteCells
       24 -> WdListCombineWithExistingList
       25 -> WdListDontMerge
       _ -> error "unmarshallWdRecoveryType: illegal enum value "
  
instance Variant (WdRecoveryType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLineEndingType
 = WdCRLF
 | WdCROnly
 | WdLFOnly
 | WdLFCR
 | WdLSPS
 deriving (Enum)
instance Variant (WdLineEndingType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdStyleSheetLinkType
 = WdStyleSheetLinkTypeList__ [WdStyleSheetLinkType]
 | WdStyleSheetLinkTypeLinked
 | WdStyleSheetLinkTypeImported
 
instance Flags (WdStyleSheetLinkType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdStyleSheetLinkType) where
  fromEnum v =
    case v of
       (WdStyleSheetLinkTypeList__ xs) -> orList (map fromEnum xs)
       WdStyleSheetLinkTypeLinked -> 0
       WdStyleSheetLinkTypeImported -> 1
  
  toEnum v =
    case v of
       0 -> WdStyleSheetLinkTypeLinked
       1 -> WdStyleSheetLinkTypeImported
       x -> WdStyleSheetLinkTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdStyleSheetLinkType: illegal enum value "
  
instance Variant (WdStyleSheetLinkType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdStyleSheetPrecedence
 = WdStyleSheetPrecedenceLower
 | WdStyleSheetPrecedenceHigher
 | WdStyleSheetPrecedenceLowest
 | WdStyleSheetPrecedenceHighest
 
instance Enum (WdStyleSheetPrecedence) where
  fromEnum v =
    case v of
       WdStyleSheetPrecedenceLower -> (-2)
       WdStyleSheetPrecedenceHigher -> (-1)
       WdStyleSheetPrecedenceLowest -> 0
       WdStyleSheetPrecedenceHighest -> 1
  
  toEnum v =
    case v of
       (-2) -> WdStyleSheetPrecedenceLower
       (-1) -> WdStyleSheetPrecedenceHigher
       0 -> WdStyleSheetPrecedenceLowest
       1 -> WdStyleSheetPrecedenceHighest
       _ -> error "unmarshallWdStyleSheetPrecedence: illegal enum value "
  
instance Variant (WdStyleSheetPrecedence) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEmailHTMLFidelity
 = WdEmailHTMLFidelityLow
 | WdEmailHTMLFidelityMedium
 | WdEmailHTMLFidelityHigh
 
instance Enum (WdEmailHTMLFidelity) where
  fromEnum v =
    case v of
       WdEmailHTMLFidelityLow -> 1
       WdEmailHTMLFidelityMedium -> 2
       WdEmailHTMLFidelityHigh -> 3
  
  toEnum v =
    case v of
       1 -> WdEmailHTMLFidelityLow
       2 -> WdEmailHTMLFidelityMedium
       3 -> WdEmailHTMLFidelityHigh
       _ -> error "unmarshallWdEmailHTMLFidelity: illegal enum value "
  
instance Variant (WdEmailHTMLFidelity) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMailMergeMailFormat
 = WdMailMergeMailFormatList__ [WdMailMergeMailFormat]
 | WdMailFormatPlainText
 | WdMailFormatHTML
 
instance Flags (WdMailMergeMailFormat) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdMailMergeMailFormat) where
  fromEnum v =
    case v of
       (WdMailMergeMailFormatList__ xs) -> orList (map fromEnum xs)
       WdMailFormatPlainText -> 0
       WdMailFormatHTML -> 1
  
  toEnum v =
    case v of
       0 -> WdMailFormatPlainText
       1 -> WdMailFormatHTML
       x -> WdMailMergeMailFormatList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdMailMergeMailFormat: illegal enum value "
  
instance Variant (WdMailMergeMailFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMappedDataFields
 = WdUniqueIdentifier
 | WdCourtesyTitle
 | WdFirstName
 | WdMiddleName
 | WdLastName
 | WdSuffix
 | WdNickname
 | WdJobTitle
 | WdCompany
 | WdAddress1
 | WdAddress2
 | WdCity
 | WdState
 | WdPostalCode
 | WdCountryRegion
 | WdBusinessPhone
 | WdBusinessFax
 | WdHomePhone
 | WdHomeFax
 | WdEmailAddress
 | WdWebPageURL
 | WdSpouseCourtesyTitle
 | WdSpouseFirstName
 | WdSpouseMiddleName
 | WdSpouseLastName
 | WdSpouseNickname
 | WdRubyFirstName
 | WdRubyLastName
 | WdAddress3
 | WdDepartment
 
instance Enum (WdMappedDataFields) where
  fromEnum v =
    case v of
       WdUniqueIdentifier -> 1
       WdCourtesyTitle -> 2
       WdFirstName -> 3
       WdMiddleName -> 4
       WdLastName -> 5
       WdSuffix -> 6
       WdNickname -> 7
       WdJobTitle -> 8
       WdCompany -> 9
       WdAddress1 -> 10
       WdAddress2 -> 11
       WdCity -> 12
       WdState -> 13
       WdPostalCode -> 14
       WdCountryRegion -> 15
       WdBusinessPhone -> 16
       WdBusinessFax -> 17
       WdHomePhone -> 18
       WdHomeFax -> 19
       WdEmailAddress -> 20
       WdWebPageURL -> 21
       WdSpouseCourtesyTitle -> 22
       WdSpouseFirstName -> 23
       WdSpouseMiddleName -> 24
       WdSpouseLastName -> 25
       WdSpouseNickname -> 26
       WdRubyFirstName -> 27
       WdRubyLastName -> 28
       WdAddress3 -> 29
       WdDepartment -> 30
  
  toEnum v =
    case v of
       1 -> WdUniqueIdentifier
       2 -> WdCourtesyTitle
       3 -> WdFirstName
       4 -> WdMiddleName
       5 -> WdLastName
       6 -> WdSuffix
       7 -> WdNickname
       8 -> WdJobTitle
       9 -> WdCompany
       10 -> WdAddress1
       11 -> WdAddress2
       12 -> WdCity
       13 -> WdState
       14 -> WdPostalCode
       15 -> WdCountryRegion
       16 -> WdBusinessPhone
       17 -> WdBusinessFax
       18 -> WdHomePhone
       19 -> WdHomeFax
       20 -> WdEmailAddress
       21 -> WdWebPageURL
       22 -> WdSpouseCourtesyTitle
       23 -> WdSpouseFirstName
       24 -> WdSpouseMiddleName
       25 -> WdSpouseLastName
       26 -> WdSpouseNickname
       27 -> WdRubyFirstName
       28 -> WdRubyLastName
       29 -> WdAddress3
       30 -> WdDepartment
       _ -> error "unmarshallWdMappedDataFields: illegal enum value "
  
instance Variant (WdMappedDataFields) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdConditionCode
 = WdFirstRow
 | WdLastRow
 | WdOddRowBanding
 | WdEvenRowBanding
 | WdFirstColumn
 | WdLastColumn
 | WdOddColumnBanding
 | WdEvenColumnBanding
 | WdNECell
 | WdNWCell
 | WdSECell
 | WdSWCell
 deriving (Enum)
instance Variant (WdConditionCode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCompareTarget
 = WdCompareTargetList__ [WdCompareTarget]
 | WdCompareTargetSelected
 | WdCompareTargetCurrent
 | WdCompareTargetNew
 
instance Flags (WdCompareTarget) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdCompareTarget) where
  fromEnum v =
    case v of
       (WdCompareTargetList__ xs) -> orList (map fromEnum xs)
       WdCompareTargetSelected -> 0
       WdCompareTargetCurrent -> 1
       WdCompareTargetNew -> 2
  
  toEnum v =
    case v of
       0 -> WdCompareTargetSelected
       1 -> WdCompareTargetCurrent
       2 -> WdCompareTargetNew
       x -> WdCompareTargetList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdCompareTarget: illegal enum value "
  
instance Variant (WdCompareTarget) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMergeTarget
 = WdMergeTargetList__ [WdMergeTarget]
 | WdMergeTargetSelected
 | WdMergeTargetCurrent
 | WdMergeTargetNew
 
instance Flags (WdMergeTarget) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdMergeTarget) where
  fromEnum v =
    case v of
       (WdMergeTargetList__ xs) -> orList (map fromEnum xs)
       WdMergeTargetSelected -> 0
       WdMergeTargetCurrent -> 1
       WdMergeTargetNew -> 2
  
  toEnum v =
    case v of
       0 -> WdMergeTargetSelected
       1 -> WdMergeTargetCurrent
       2 -> WdMergeTargetNew
       x -> WdMergeTargetList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdMergeTarget: illegal enum value "
  
instance Variant (WdMergeTarget) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdUseFormattingFrom
 = WdUseFormattingFromList__ [WdUseFormattingFrom]
 | WdFormattingFromCurrent
 | WdFormattingFromSelected
 | WdFormattingFromPrompt
 
instance Flags (WdUseFormattingFrom) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdUseFormattingFrom) where
  fromEnum v =
    case v of
       (WdUseFormattingFromList__ xs) -> orList (map fromEnum xs)
       WdFormattingFromCurrent -> 0
       WdFormattingFromSelected -> 1
       WdFormattingFromPrompt -> 2
  
  toEnum v =
    case v of
       0 -> WdFormattingFromCurrent
       1 -> WdFormattingFromSelected
       2 -> WdFormattingFromPrompt
       x -> WdUseFormattingFromList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdUseFormattingFrom: illegal enum value "
  
instance Variant (WdUseFormattingFrom) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionsView
 = WdRevisionsViewList__ [WdRevisionsView]
 | WdRevisionsViewFinal
 | WdRevisionsViewOriginal
 
instance Flags (WdRevisionsView) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRevisionsView) where
  fromEnum v =
    case v of
       (WdRevisionsViewList__ xs) -> orList (map fromEnum xs)
       WdRevisionsViewFinal -> 0
       WdRevisionsViewOriginal -> 1
  
  toEnum v =
    case v of
       0 -> WdRevisionsViewFinal
       1 -> WdRevisionsViewOriginal
       x -> WdRevisionsViewList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdRevisionsView: illegal enum value "
  
instance Variant (WdRevisionsView) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionsMode
 = WdRevisionsModeList__ [WdRevisionsMode]
 | WdBalloonRevisions
 | WdInLineRevisions
 | WdMixedRevisions
 
instance Flags (WdRevisionsMode) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRevisionsMode) where
  fromEnum v =
    case v of
       (WdRevisionsModeList__ xs) -> orList (map fromEnum xs)
       WdBalloonRevisions -> 0
       WdInLineRevisions -> 1
       WdMixedRevisions -> 2
  
  toEnum v =
    case v of
       0 -> WdBalloonRevisions
       1 -> WdInLineRevisions
       2 -> WdMixedRevisions
       x -> WdRevisionsModeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdRevisionsMode: illegal enum value "
  
instance Variant (WdRevisionsMode) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionsBalloonWidthType
 = WdRevisionsBalloonWidthTypeList__ [WdRevisionsBalloonWidthType]
 | WdBalloonWidthPercent
 | WdBalloonWidthPoints
 
instance Flags (WdRevisionsBalloonWidthType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRevisionsBalloonWidthType) where
  fromEnum v =
    case v of
       (WdRevisionsBalloonWidthTypeList__ xs) -> orList (map fromEnum xs)
       WdBalloonWidthPercent -> 0
       WdBalloonWidthPoints -> 1
  
  toEnum v =
    case v of
       0 -> WdBalloonWidthPercent
       1 -> WdBalloonWidthPoints
       x -> WdRevisionsBalloonWidthTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                    then Just (toEnum (fromIntegral val))
                                                                    else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdRevisionsBalloonWidthType: illegal enum value "
  
instance Variant (WdRevisionsBalloonWidthType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionsBalloonPrintOrientation
 = WdRevisionsBalloonPrintOrientationList__ [WdRevisionsBalloonPrintOrientation]
 | WdBalloonPrintOrientationAuto
 | WdBalloonPrintOrientationPreserve
 | WdBalloonPrintOrientationForceLandscape
 
instance Flags (WdRevisionsBalloonPrintOrientation) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRevisionsBalloonPrintOrientation) where
  fromEnum v =
    case v of
       (WdRevisionsBalloonPrintOrientationList__ xs) -> orList (map fromEnum xs)
       WdBalloonPrintOrientationAuto -> 0
       WdBalloonPrintOrientationPreserve -> 1
       WdBalloonPrintOrientationForceLandscape -> 2
  
  toEnum v =
    case v of
       0 -> WdBalloonPrintOrientationAuto
       1 -> WdBalloonPrintOrientationPreserve
       2 -> WdBalloonPrintOrientationForceLandscape
       x -> WdRevisionsBalloonPrintOrientationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                           then Just (toEnum (fromIntegral val))
                                                                           else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdRevisionsBalloonPrintOrientation: illegal enum value "
  
instance Variant (WdRevisionsBalloonPrintOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRevisionsBalloonMargin
 = WdRevisionsBalloonMarginList__ [WdRevisionsBalloonMargin]
 | WdLeftMargin
 | WdRightMargin
 
instance Flags (WdRevisionsBalloonMargin) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdRevisionsBalloonMargin) where
  fromEnum v =
    case v of
       (WdRevisionsBalloonMarginList__ xs) -> orList (map fromEnum xs)
       WdLeftMargin -> 0
       WdRightMargin -> 1
  
  toEnum v =
    case v of
       0 -> WdLeftMargin
       1 -> WdRightMargin
       x -> WdRevisionsBalloonMarginList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                 then Just (toEnum (fromIntegral val))
                                                                 else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdRevisionsBalloonMargin: illegal enum value "
  
instance Variant (WdRevisionsBalloonMargin) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTaskPanes
 = WdTaskPaneFormatting
 | WdTaskPaneRevealFormatting
 | WdTaskPaneMailMerge
 | WdTaskPaneTranslate
 | WdTaskPaneSearch
 | WdTaskPaneXMLStructure
 | WdTaskPaneDocumentProtection
 | WdTaskPaneDocumentActions
 | WdTaskPaneSharedWorkspace
 | WdTaskPaneHelp
 | WdTaskPaneResearch
 | WdTaskPaneFaxService
 | WdTaskPaneXMLDocument
 | WdTaskPaneDocumentUpdates
 | WdTaskPaneSignature
 | WdTaskPaneStyleInspector
 | WdTaskPaneDocumentManagement
 | WdTaskPaneApplyStyles
 deriving (Enum)
instance Variant (WdTaskPanes) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdShowFilter
 = WdShowFilterStylesAvailable
 | WdShowFilterStylesInUse
 | WdShowFilterStylesAll
 | WdShowFilterFormattingInUse
 | WdShowFilterFormattingAvailable
 | WdShowFilterFormattingRecommended
 deriving (Enum)
instance Variant (WdShowFilter) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMergeSubType
 = WdMergeSubTypeOther
 | WdMergeSubTypeAccess
 | WdMergeSubTypeOAL
 | WdMergeSubTypeOLEDBWord
 | WdMergeSubTypeWorks
 | WdMergeSubTypeOLEDBText
 | WdMergeSubTypeOutlook
 | WdMergeSubTypeWord
 | WdMergeSubTypeWord2000
 deriving (Enum)
instance Variant (WdMergeSubType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDocumentDirection
 = WdDocumentDirectionList__ [WdDocumentDirection]
 | WdLeftToRight
 | WdRightToLeft
 
instance Flags (WdDocumentDirection) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDocumentDirection) where
  fromEnum v =
    case v of
       (WdDocumentDirectionList__ xs) -> orList (map fromEnum xs)
       WdLeftToRight -> 0
       WdRightToLeft -> 1
  
  toEnum v =
    case v of
       0 -> WdLeftToRight
       1 -> WdRightToLeft
       x -> WdDocumentDirectionList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdDocumentDirection: illegal enum value "
  
instance Variant (WdDocumentDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLanguageID2000
 = WdChineseHongKong
 | WdChineseMacao
 | WdEnglishTrinidad
 
instance Enum (WdLanguageID2000) where
  fromEnum v =
    case v of
       WdChineseHongKong -> 3076
       WdChineseMacao -> 5124
       WdEnglishTrinidad -> 11273
  
  toEnum v =
    case v of
       3076 -> WdChineseHongKong
       5124 -> WdChineseMacao
       11273 -> WdEnglishTrinidad
       _ -> error "unmarshallWdLanguageID2000: illegal enum value "
  
instance Variant (WdLanguageID2000) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
-- --------------------------------------------------
-- 
-- interface SmartTagAction
-- 
-- --------------------------------------------------
data SmartTagAction_ a = SmartTagAction__ 
type SmartTagAction a = IDispatch (SmartTagAction_ a)
iidSmartTagAction :: IID (SmartTagAction ())
iidSmartTagAction = mkIID "{DFB6AA6C-1068-420F-969D-01280FCC1630}"

getName41 :: SmartTagAction a0
          -> IO String
getName41 =
  propertyGet "Name"
              []
              outString

getApplication219 :: SmartTagAction a0
                  -> IO (Maybe Application)
getApplication219 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator219 :: SmartTagAction a0
              -> IO Int32
getCreator219 =
  propertyGet "Creator"
              []
              outInt32

getParent219 :: SmartTagAction a0
             -> IO (IDispatch ())
getParent219 =
  propertyGet "Parent"
              []
              outIDispatch

execute3 :: SmartTagAction a0
         -> IO ()
execute3 =
  method0 "Execute"
          []

getType29 :: SmartTagAction a0
          -> IO WdSmartTagControlType
getType29 =
  propertyGet "Type"
              []
              outEnum

getPresentInPane :: SmartTagAction a0
                 -> IO Bool
getPresentInPane =
  propertyGet "PresentInPane"
              []
              outBool

getExpandHelp :: SmartTagAction a0
              -> IO Bool
getExpandHelp =
  propertyGet "ExpandHelp"
              []
              outBool

setExpandHelp :: Bool
              -> SmartTagAction a0
              -> IO ()
setExpandHelp prop =
  propertySet "ExpandHelp"
              [inBool prop]

getCheckboxState :: SmartTagAction a0
                 -> IO Bool
getCheckboxState =
  propertyGet "CheckboxState"
              []
              outBool

setCheckboxState :: Bool
                 -> SmartTagAction a0
                 -> IO ()
setCheckboxState prop =
  propertySet "CheckboxState"
              [inBool prop]

getTextboxText :: SmartTagAction a0
               -> IO String
getTextboxText =
  propertyGet "TextboxText"
              []
              outString

setTextboxText :: String
               -> SmartTagAction a0
               -> IO ()
setTextboxText prop =
  propertySet "TextboxText"
              [inString prop]

getListSelection :: SmartTagAction a0
                 -> IO Int32
getListSelection =
  propertyGet "ListSelection"
              []
              outInt32

setListSelection :: Int32
                 -> SmartTagAction a0
                 -> IO ()
setListSelection prop =
  propertySet "ListSelection"
              [inInt32 prop]

getRadioGroupSelection :: SmartTagAction a0
                       -> IO Int32
getRadioGroupSelection =
  propertyGet "RadioGroupSelection"
              []
              outInt32

setRadioGroupSelection :: Int32
                       -> SmartTagAction a0
                       -> IO ()
setRadioGroupSelection prop =
  propertySet "RadioGroupSelection"
              [inInt32 prop]

getExpandDocumentFragment :: SmartTagAction a0
                          -> IO Bool
getExpandDocumentFragment =
  propertyGet "ExpandDocumentFragment"
              []
              outBool

setExpandDocumentFragment :: Bool
                          -> SmartTagAction a0
                          -> IO ()
setExpandDocumentFragment prop =
  propertySet "ExpandDocumentFragment"
              [inBool prop]

getActiveXControl :: SmartTagAction a0
                  -> IO (IDispatch ())
getActiveXControl =
  propertyGet "ActiveXControl"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface SmartTagActions
-- 
-- --------------------------------------------------
data SmartTagActions_ a = SmartTagActions__ 
type SmartTagActions a = IDispatch (SmartTagActions_ a)
iidSmartTagActions :: IID (SmartTagActions ())
iidSmartTagActions = mkIID "{CDE12CD8-767B-4757-8A31-13029A086305}"

getNewEnum86 :: SmartTagActions a0
             -> IO (IUnknown ())
getNewEnum86 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount86 :: SmartTagActions a0
           -> IO Int32
getCount86 =
  propertyGet "Count"
              []
              outInt32

getApplication220 :: SmartTagActions a0
                  -> IO (Maybe Application)
getApplication220 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator220 :: SmartTagActions a0
              -> IO Int32
getCreator220 =
  propertyGet "Creator"
              []
              outInt32

getParent220 :: SmartTagActions a0
             -> IO (IDispatch ())
getParent220 =
  propertyGet "Parent"
              []
              outIDispatch

item86 :: (Variant a1)
       => a1
       -> SmartTagActions a0
       -> IO (SmartTagAction ())
item86 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

reloadActions :: SmartTagActions a0
              -> IO ()
reloadActions =
  method0 "ReloadActions"
          []

-- --------------------------------------------------
-- 
-- interface SmartTagRecognizer
-- 
-- --------------------------------------------------
data SmartTagRecognizer_ a = SmartTagRecognizer__ 
type SmartTagRecognizer a = IDispatch (SmartTagRecognizer_ a)
iidSmartTagRecognizer :: IID (SmartTagRecognizer ())
iidSmartTagRecognizer =
  mkIID "{15EBE471-0182-4CCE-98D0-B6614D1C32A1}"

getFullName2 :: SmartTagRecognizer a0
             -> IO String
getFullName2 =
  propertyGet "FullName"
              []
              outString

getApplication221 :: SmartTagRecognizer a0
                  -> IO (Maybe Application)
getApplication221 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator221 :: SmartTagRecognizer a0
              -> IO Int32
getCreator221 =
  propertyGet "Creator"
              []
              outInt32

getParent221 :: SmartTagRecognizer a0
             -> IO (IDispatch ())
getParent221 =
  propertyGet "Parent"
              []
              outIDispatch

getEnabled0 :: SmartTagRecognizer a0
            -> IO Bool
getEnabled0 =
  propertyGet "Enabled"
              []
              outBool

setEnabled0 :: Bool
            -> SmartTagRecognizer a0
            -> IO ()
setEnabled0 prop =
  propertySet "Enabled"
              [inBool prop]

getProgID0 :: SmartTagRecognizer a0
           -> IO String
getProgID0 =
  propertyGet "ProgID"
              []
              outString

getCaption2 :: SmartTagRecognizer a0
            -> IO String
getCaption2 =
  propertyGet "Caption"
              []
              outString

-- --------------------------------------------------
-- 
-- interface SmartTagRecognizers
-- 
-- --------------------------------------------------
data SmartTagRecognizers_ a = SmartTagRecognizers__ 
type SmartTagRecognizers a = IDispatch (SmartTagRecognizers_ a)
iidSmartTagRecognizers :: IID (SmartTagRecognizers ())
iidSmartTagRecognizers =
  mkIID "{F2B60A10-DED5-46FB-A914-3C6F4EBB6451}"

getNewEnum87 :: SmartTagRecognizers a0
             -> IO (IUnknown ())
getNewEnum87 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount87 :: SmartTagRecognizers a0
           -> IO Int32
getCount87 =
  propertyGet "Count"
              []
              outInt32

getApplication222 :: SmartTagRecognizers a0
                  -> IO (Maybe Application)
getApplication222 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator222 :: SmartTagRecognizers a0
              -> IO Int32
getCreator222 =
  propertyGet "Creator"
              []
              outInt32

getParent222 :: SmartTagRecognizers a0
             -> IO (IDispatch ())
getParent222 =
  propertyGet "Parent"
              []
              outIDispatch

item87 :: (Variant a1)
       => a1
       -> SmartTagRecognizers a0
       -> IO (SmartTagRecognizer ())
item87 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

reloadRecognizers :: SmartTagRecognizers a0
                  -> IO ()
reloadRecognizers =
  method0 "ReloadRecognizers"
          []

-- --------------------------------------------------
-- 
-- interface SmartTagType
-- 
-- --------------------------------------------------
data SmartTagType_ a = SmartTagType__ 
type SmartTagType a = IDispatch (SmartTagType_ a)
iidSmartTagType :: IID (SmartTagType ())
iidSmartTagType = mkIID "{5E9A888C-E5DC-4DCB-8308-3C91FB61E6F4}"

getName42 :: SmartTagType a0
          -> IO String
getName42 =
  propertyGet "Name"
              []
              outString

getApplication223 :: SmartTagType a0
                  -> IO (Maybe Application)
getApplication223 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator223 :: SmartTagType a0
              -> IO Int32
getCreator223 =
  propertyGet "Creator"
              []
              outInt32

getParent223 :: SmartTagType a0
             -> IO (IDispatch ())
getParent223 =
  propertyGet "Parent"
              []
              outIDispatch

getSmartTagActions0 :: SmartTagType a0
                    -> IO (SmartTagActions ())
getSmartTagActions0 =
  propertyGet "SmartTagActions"
              []
              outIDispatch

getSmartTagRecognizers0 :: SmartTagType a0
                        -> IO (SmartTagRecognizers ())
getSmartTagRecognizers0 =
  propertyGet "SmartTagRecognizers"
              []
              outIDispatch

getFriendlyName :: SmartTagType a0
                -> IO String
getFriendlyName =
  propertyGet "FriendlyName"
              []
              outString

-- --------------------------------------------------
-- 
-- interface SmartTagTypes
-- 
-- --------------------------------------------------
data SmartTagTypes_ a = SmartTagTypes__ 
type SmartTagTypes a = IDispatch (SmartTagTypes_ a)
iidSmartTagTypes :: IID (SmartTagTypes ())
iidSmartTagTypes = mkIID "{DB8E3072-E106-4453-8E7C-53056F1D30DC}"

getNewEnum88 :: SmartTagTypes a0
             -> IO (IUnknown ())
getNewEnum88 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount88 :: SmartTagTypes a0
           -> IO Int32
getCount88 =
  propertyGet "Count"
              []
              outInt32

getApplication224 :: SmartTagTypes a0
                  -> IO (Maybe Application)
getApplication224 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator224 :: SmartTagTypes a0
              -> IO Int32
getCreator224 =
  propertyGet "Creator"
              []
              outInt32

getParent224 :: SmartTagTypes a0
             -> IO (IDispatch ())
getParent224 =
  propertyGet "Parent"
              []
              outIDispatch

item88 :: (Variant a1)
       => a1
       -> SmartTagTypes a0
       -> IO (SmartTagType ())
item88 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

reloadAll :: SmartTagTypes a0
          -> IO ()
reloadAll =
  method0 "ReloadAll"
          []

-- --------------------------------------------------
-- 
-- interface Line
-- 
-- --------------------------------------------------
data Line_ a = Line__ 
type Line a = IDispatch (Line_ a)
iidLine :: IID (Line ())
iidLine = mkIID "{AE6CE2F5-B9D3-407D-85A8-0F10C63289A4}"

getApplication225 :: Line a0
                  -> IO (Maybe Application)
getApplication225 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator225 :: Line a0
              -> IO Int32
getCreator225 =
  propertyGet "Creator"
              []
              outInt32

getParent225 :: Line a0
             -> IO (IDispatch ())
getParent225 =
  propertyGet "Parent"
              []
              outIDispatch

getLineType :: Line a0
            -> IO WdLineType
getLineType =
  propertyGet "LineType"
              []
              outEnum

getLeft5 :: Line a0
         -> IO Int32
getLeft5 =
  propertyGet "Left"
              []
              outInt32

getTop5 :: Line a0
        -> IO Int32
getTop5 =
  propertyGet "Top"
              []
              outInt32

getWidth16 :: Line a0
           -> IO Int32
getWidth16 =
  propertyGet "Width"
              []
              outInt32

getHeight13 :: Line a0
            -> IO Int32
getHeight13 =
  propertyGet "Height"
              []
              outInt32

getRange23 :: Line a0
           -> IO (Range ())
getRange23 =
  propertyGet "Range"
              []
              outIDispatch

getRectangles :: Line a0
              -> IO (Rectangles ())
getRectangles =
  propertyGet "Rectangles"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface Lines
-- 
-- --------------------------------------------------
data Lines_ a = Lines__ 
type Lines a = IDispatch (Lines_ a)
iidLines :: IID (Lines ())
iidLines = mkIID "{E2E8A400-0615-427D-ADCC-CAD39FFEBD42}"

getNewEnum89 :: Lines a0
             -> IO (IUnknown ())
getNewEnum89 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount89 :: Lines a0
           -> IO Int32
getCount89 =
  propertyGet "Count"
              []
              outInt32

getApplication226 :: Lines a0
                  -> IO (Maybe Application)
getApplication226 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator226 :: Lines a0
              -> IO Int32
getCreator226 =
  propertyGet "Creator"
              []
              outInt32

getParent226 :: Lines a0
             -> IO (IDispatch ())
getParent226 =
  propertyGet "Parent"
              []
              outIDispatch

item89 :: Int32
       -> Lines a0
       -> IO (Line ())
item89 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Rectangle
-- 
-- --------------------------------------------------
data Rectangle_ a = Rectangle__ 
type Rectangle a = IDispatch (Rectangle_ a)
iidRectangle :: IID (Rectangle ())
iidRectangle = mkIID "{ADD4EDF3-2F33-4734-9CE6-D476097C5ADA}"

getApplication227 :: Rectangle a0
                  -> IO (Maybe Application)
getApplication227 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator227 :: Rectangle a0
              -> IO Int32
getCreator227 =
  propertyGet "Creator"
              []
              outInt32

getParent227 :: Rectangle a0
             -> IO (IDispatch ())
getParent227 =
  propertyGet "Parent"
              []
              outIDispatch

getRectangleType :: Rectangle a0
                 -> IO WdRectangleType
getRectangleType =
  propertyGet "RectangleType"
              []
              outEnum

getLeft6 :: Rectangle a0
         -> IO Int32
getLeft6 =
  propertyGet "Left"
              []
              outInt32

getTop6 :: Rectangle a0
        -> IO Int32
getTop6 =
  propertyGet "Top"
              []
              outInt32

getWidth17 :: Rectangle a0
           -> IO Int32
getWidth17 =
  propertyGet "Width"
              []
              outInt32

getHeight14 :: Rectangle a0
            -> IO Int32
getHeight14 =
  propertyGet "Height"
              []
              outInt32

getRange24 :: Rectangle a0
           -> IO (Range ())
getRange24 =
  propertyGet "Range"
              []
              outIDispatch

getLines :: Rectangle a0
         -> IO (Lines ())
getLines =
  propertyGet "Lines"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface Rectangles
-- 
-- --------------------------------------------------
data Rectangles_ a = Rectangles__ 
type Rectangles a = IDispatch (Rectangles_ a)
iidRectangles :: IID (Rectangles ())
iidRectangles = mkIID "{7D0F7985-68D9-4D93-91CB-8109280E76CC}"

getNewEnum90 :: Rectangles a0
             -> IO (IUnknown ())
getNewEnum90 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount90 :: Rectangles a0
           -> IO Int32
getCount90 =
  propertyGet "Count"
              []
              outInt32

getApplication228 :: Rectangles a0
                  -> IO (Maybe Application)
getApplication228 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator228 :: Rectangles a0
              -> IO Int32
getCreator228 =
  propertyGet "Creator"
              []
              outInt32

getParent228 :: Rectangles a0
             -> IO (IDispatch ())
getParent228 =
  propertyGet "Parent"
              []
              outIDispatch

item90 :: Int32
       -> Rectangles a0
       -> IO (Rectangle ())
item90 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Break
-- 
-- --------------------------------------------------
data Break_ a = Break__ 
type Break a = IDispatch (Break_ a)
iidBreak :: IID (Break ())
iidBreak = mkIID "{79635BF1-BD1D-4B3F-A520-C1106F1AAAD8}"

getApplication229 :: Break a0
                  -> IO (Maybe Application)
getApplication229 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator229 :: Break a0
              -> IO Int32
getCreator229 =
  propertyGet "Creator"
              []
              outInt32

getParent229 :: Break a0
             -> IO (IDispatch ())
getParent229 =
  propertyGet "Parent"
              []
              outIDispatch

getRange25 :: Break a0
           -> IO (Range ())
getRange25 =
  propertyGet "Range"
              []
              outIDispatch

getPageIndex :: Break a0
             -> IO Int32
getPageIndex =
  propertyGet "PageIndex"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Breaks
-- 
-- --------------------------------------------------
data Breaks_ a = Breaks__ 
type Breaks a = IDispatch (Breaks_ a)
iidBreaks :: IID (Breaks ())
iidBreaks = mkIID "{16BE9309-D708-4322-BB1A-B056F58D17EA}"

getNewEnum91 :: Breaks a0
             -> IO (IUnknown ())
getNewEnum91 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount91 :: Breaks a0
           -> IO Int32
getCount91 =
  propertyGet "Count"
              []
              outInt32

getApplication230 :: Breaks a0
                  -> IO (Maybe Application)
getApplication230 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator230 :: Breaks a0
              -> IO Int32
getCreator230 =
  propertyGet "Creator"
              []
              outInt32

getParent230 :: Breaks a0
             -> IO (IDispatch ())
getParent230 =
  propertyGet "Parent"
              []
              outIDispatch

item91 :: Int32
       -> Breaks a0
       -> IO (Break ())
item91 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Page
-- 
-- --------------------------------------------------
data Page_ a = Page__ 
type Page a = IDispatch (Page_ a)
iidPage :: IID (Page ())
iidPage = mkIID "{352840A9-AF7D-4CA4-87FC-21C68FDAB3E4}"

getApplication231 :: Page a0
                  -> IO (Maybe Application)
getApplication231 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator231 :: Page a0
              -> IO Int32
getCreator231 =
  propertyGet "Creator"
              []
              outInt32

getParent231 :: Page a0
             -> IO (IDispatch ())
getParent231 =
  propertyGet "Parent"
              []
              outIDispatch

getLeft7 :: Page a0
         -> IO Int32
getLeft7 =
  propertyGet "Left"
              []
              outInt32

getTop7 :: Page a0
        -> IO Int32
getTop7 =
  propertyGet "Top"
              []
              outInt32

getWidth18 :: Page a0
           -> IO Int32
getWidth18 =
  propertyGet "Width"
              []
              outInt32

getHeight15 :: Page a0
            -> IO Int32
getHeight15 =
  propertyGet "Height"
              []
              outInt32

getRectangles0 :: Page a0
               -> IO (Rectangles ())
getRectangles0 =
  propertyGet "Rectangles"
              []
              outIDispatch

getBreaks :: Page a0
          -> IO (Breaks ())
getBreaks =
  propertyGet "Breaks"
              []
              outIDispatch

getEnhMetaFileBits1 :: (Variant a1)
                    => Page a0
                    -> IO a1
getEnhMetaFileBits1 =
  propertyGet "EnhMetaFileBits"
              []
              outVariant

-- --------------------------------------------------
-- 
-- interface Pages
-- 
-- --------------------------------------------------
data Pages_ a = Pages__ 
type Pages a = IDispatch (Pages_ a)
iidPages :: IID (Pages ())
iidPages = mkIID "{91807402-6C6F-47CD-B8FA-C42FEE8EE924}"

getNewEnum92 :: Pages a0
             -> IO (IUnknown ())
getNewEnum92 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount92 :: Pages a0
           -> IO Int32
getCount92 =
  propertyGet "Count"
              []
              outInt32

getApplication232 :: Pages a0
                  -> IO (Maybe Application)
getApplication232 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator232 :: Pages a0
              -> IO Int32
getCreator232 =
  propertyGet "Creator"
              []
              outInt32

getParent232 :: Pages a0
             -> IO (IDispatch ())
getParent232 =
  propertyGet "Parent"
              []
              outIDispatch

item92 :: Int32
       -> Pages a0
       -> IO (Page ())
item92 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface XMLNode
-- 
-- --------------------------------------------------
data XMLNode_ a = XMLNode__ 
type XMLNode a = IDispatch (XMLNode_ a)
iidXMLNode :: IID (XMLNode ())
iidXMLNode = mkIID "{09760240-0B89-49F7-A79D-479F24723F56}"

getBaseName :: XMLNode a0
            -> IO String
getBaseName =
  propertyGet "BaseName"
              []
              outString

getApplication233 :: XMLNode a0
                  -> IO (Maybe Application)
getApplication233 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator233 :: XMLNode a0
              -> IO Int32
getCreator233 =
  propertyGet "Creator"
              []
              outInt32

getParent233 :: XMLNode a0
             -> IO (IDispatch ())
getParent233 =
  propertyGet "Parent"
              []
              outIDispatch

getRange26 :: XMLNode a0
           -> IO (Range ())
getRange26 =
  propertyGet "Range"
              []
              outIDispatch

getText4 :: XMLNode a0
         -> IO String
getText4 =
  propertyGet "Text"
              []
              outString

setText4 :: String
         -> XMLNode a0
         -> IO ()
setText4 prop =
  propertySet "Text"
              [inString prop]

getNamespaceURI :: XMLNode a0
                -> IO String
getNamespaceURI =
  propertyGet "NamespaceURI"
              []
              outString

getXML2 :: (Variant a1)
        => a1
        -> XMLNode a0
        -> IO String
getXML2 dataOnly =
  propertyGet "XML"
              [inDefaultValue (inInt32 0) inVariant dataOnly]
              outString

getNextSibling :: XMLNode a0
               -> IO (XMLNode ())
getNextSibling =
  propertyGet "NextSibling"
              []
              outIDispatch

getPreviousSibling :: XMLNode a0
                   -> IO (XMLNode ())
getPreviousSibling =
  propertyGet "PreviousSibling"
              []
              outIDispatch

getParentNode :: XMLNode a0
              -> IO (XMLNode ())
getParentNode =
  propertyGet "ParentNode"
              []
              outIDispatch

getFirstChild0 :: XMLNode a0
               -> IO (XMLNode ())
getFirstChild0 =
  propertyGet "FirstChild"
              []
              outIDispatch

getLastChild0 :: XMLNode a0
              -> IO (XMLNode ())
getLastChild0 =
  propertyGet "LastChild"
              []
              outIDispatch

getOwnerDocument :: XMLNode a0
                 -> IO (Maybe Document)
getOwnerDocument iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getActiveDocument methPtr iptr prop) 21 iptr
    doThenFree free (readunique readDocument) prop

getNodeType :: XMLNode a0
            -> IO WdXMLNodeType
getNodeType =
  propertyGet "NodeType"
              []
              outEnum

getChildNodes :: XMLNode a0
              -> IO (XMLNodes ())
getChildNodes =
  propertyGet "ChildNodes"
              []
              outIUnknown

getAttributes :: XMLNode a0
              -> IO (XMLNodes ())
getAttributes =
  propertyGet "Attributes"
              []
              outIUnknown

getNodeValue :: XMLNode a0
             -> IO String
getNodeValue =
  propertyGet "NodeValue"
              []
              outString

setNodeValue :: String
             -> XMLNode a0
             -> IO ()
setNodeValue prop =
  propertySet "NodeValue"
              [inString prop]

getHasChildNodes :: XMLNode a0
                 -> IO Bool
getHasChildNodes =
  propertyGet "HasChildNodes"
              []
              outBool

selectSingleNode0 :: (Variant a1, Variant a2)
                  => String
                  -> a1
                  -> a2
                  -> XMLNode a0
                  -> IO (XMLNode ())
selectSingleNode0 xPath prefixMapping fastSearchSkippingTextNodes =
  function1 "SelectSingleNode"
            [ inString xPath
            , inDefaultValue (inVariant "") inVariant prefixMapping
            , inDefaultValue (inInt32 (-1)) inVariant fastSearchSkippingTextNodes
            ]
            outIDispatch

selectNodes0 :: (Variant a1, Variant a2)
             => String
             -> a1
             -> a2
             -> XMLNode a0
             -> IO (XMLNodes ())
selectNodes0 xPath prefixMapping fastSearchSkippingTextNodes =
  function1 "SelectNodes"
            [ inString xPath
            , inDefaultValue (inVariant "") inVariant prefixMapping
            , inDefaultValue (inInt32 (-1)) inVariant fastSearchSkippingTextNodes
            ]
            outIUnknown

getChildNodeSuggestions0 :: XMLNode a0
                         -> IO (XMLChildNodeSuggestions ())
getChildNodeSuggestions0 =
  propertyGet "ChildNodeSuggestions"
              []
              outIUnknown

getLevel1 :: XMLNode a0
          -> IO WdXMLNodeLevel
getLevel1 =
  propertyGet "Level"
              []
              outEnum

getValidationStatus :: XMLNode a0
                    -> IO WdXMLValidationStatus
getValidationStatus =
  propertyGet "ValidationStatus"
              []
              outEnum

getSmartTag :: XMLNode a0
            -> IO (SmartTag ())
getSmartTag =
  propertyGet "SmartTag"
              []
              outIDispatch

getValidationErrorText :: (Variant a1)
                       => a1
                       -> XMLNode a0
                       -> IO String
getValidationErrorText advanced =
  propertyGet "ValidationErrorText"
              [inDefaultValue (inInt32 0) inVariant advanced]
              outString

getPlaceholderText :: XMLNode a0
                   -> IO String
getPlaceholderText =
  propertyGet "PlaceholderText"
              []
              outString

setPlaceholderText :: String
                   -> XMLNode a0
                   -> IO ()
setPlaceholderText prop =
  propertySet "PlaceholderText"
              [inString prop]

delete54 :: XMLNode a0
         -> IO ()
delete54 =
  method0 "Delete"
          []

copy8 :: XMLNode a0
      -> IO ()
copy8 =
  method0 "Copy"
          []

removeChild :: XMLNode a1
            -> XMLNode a0
            -> IO ()
removeChild childElement =
  method0 "RemoveChild"
          [inIDispatch childElement]

cut7 :: XMLNode a0
     -> IO ()
cut7 =
  method0 "Cut"
          []

validate :: XMLNode a0
         -> IO ()
validate =
  method0 "Validate"
          []

setValidationError :: (Variant a1, Variant a2)
                   => WdXMLValidationStatus
                   -> a1
                   -> a2
                   -> XMLNode a0
                   -> IO ()
setValidationError status errorText clearedAutomatically =
  method0 "SetValidationError"
          [ inEnum status
          , inVariant errorText
          , inDefaultValue (inInt32 (-1)) inVariant clearedAutomatically
          ]

getWordOpenXML2 :: XMLNode a0
                -> IO String
getWordOpenXML2 =
  propertyGet "WordOpenXML"
              []
              outString

-- --------------------------------------------------
-- 
-- interface XMLNodes
-- 
-- --------------------------------------------------
data XMLNodes_ a = XMLNodes__ 
type XMLNodes a = IDispatch (XMLNodes_ a)
iidXMLNodes :: IID (XMLNodes ())
iidXMLNodes = mkIID "{D36C1F42-7044-4B9E-9CA3-85919454DB04}"

getNewEnum93 :: XMLNodes a0
             -> IO (IUnknown ())
getNewEnum93 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount93 :: XMLNodes a0
           -> IO Int32
getCount93 =
  propertyGet "Count"
              []
              outInt32

getApplication234 :: XMLNodes a0
                  -> IO (Maybe Application)
getApplication234 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator234 :: XMLNodes a0
              -> IO Int32
getCreator234 =
  propertyGet "Creator"
              []
              outInt32

getParent234 :: XMLNodes a0
             -> IO (IDispatch ())
getParent234 =
  propertyGet "Parent"
              []
              outIDispatch

item93 :: Int32
       -> XMLNodes a0
       -> IO (XMLNode ())
item93 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add48 :: (Variant a1)
      => String
      -> String
      -> a1
      -> XMLNodes a0
      -> IO (XMLNode ())
add48 name namespace range3 =
  function1 "Add"
            [ inString name
            , inString namespace
            , inVariant range3
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface XMLSchemaReference
-- 
-- --------------------------------------------------
data XMLSchemaReference_ a = XMLSchemaReference__ 
type XMLSchemaReference a = IDispatch (XMLSchemaReference_ a)
iidXMLSchemaReference :: IID (XMLSchemaReference ())
iidXMLSchemaReference =
  mkIID "{FE0971F0-5E60-4985-BCDA-95CB0B8E0308}"

getApplication235 :: XMLSchemaReference a0
                  -> IO (Maybe Application)
getApplication235 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator235 :: XMLSchemaReference a0
              -> IO Int32
getCreator235 =
  propertyGet "Creator"
              []
              outInt32

getParent235 :: XMLSchemaReference a0
             -> IO (IDispatch ())
getParent235 =
  propertyGet "Parent"
              []
              outIDispatch

getNamespaceURI0 :: XMLSchemaReference a0
                 -> IO String
getNamespaceURI0 =
  propertyGet "NamespaceURI"
              []
              outString

getLocation3 :: XMLSchemaReference a0
             -> IO String
getLocation3 =
  propertyGet "Location"
              []
              outString

delete55 :: XMLSchemaReference a0
         -> IO ()
delete55 =
  method0 "Delete"
          []

reload0 :: XMLSchemaReference a0
        -> IO ()
reload0 =
  method0 "Reload"
          []

-- --------------------------------------------------
-- 
-- interface XMLSchemaReferences
-- 
-- --------------------------------------------------
data XMLSchemaReferences_ a = XMLSchemaReferences__ 
type XMLSchemaReferences a = IDispatch (XMLSchemaReferences_ a)
iidXMLSchemaReferences :: IID (XMLSchemaReferences ())
iidXMLSchemaReferences =
  mkIID "{356B06EC-4908-42A4-81FC-4B5A51F3483B}"

getNewEnum94 :: XMLSchemaReferences a0
             -> IO (IUnknown ())
getNewEnum94 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount94 :: XMLSchemaReferences a0
           -> IO Int32
getCount94 =
  propertyGet "Count"
              []
              outInt32

getApplication236 :: XMLSchemaReferences a0
                  -> IO (Maybe Application)
getApplication236 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator236 :: XMLSchemaReferences a0
              -> IO Int32
getCreator236 =
  propertyGet "Creator"
              []
              outInt32

getParent236 :: XMLSchemaReferences a0
             -> IO (IDispatch ())
getParent236 =
  propertyGet "Parent"
              []
              outIDispatch

getAutomaticValidation :: XMLSchemaReferences a0
                       -> IO Bool
getAutomaticValidation =
  propertyGet "AutomaticValidation"
              []
              outBool

setAutomaticValidation :: Bool
                       -> XMLSchemaReferences a0
                       -> IO ()
setAutomaticValidation prop =
  propertySet "AutomaticValidation"
              [inBool prop]

getAllowSaveAsXMLWithoutValidation :: XMLSchemaReferences a0
                                   -> IO Bool
getAllowSaveAsXMLWithoutValidation =
  propertyGet "AllowSaveAsXMLWithoutValidation"
              []
              outBool

setAllowSaveAsXMLWithoutValidation :: Bool
                                   -> XMLSchemaReferences a0
                                   -> IO ()
setAllowSaveAsXMLWithoutValidation prop =
  propertySet "AllowSaveAsXMLWithoutValidation"
              [inBool prop]

getHideValidationErrors :: XMLSchemaReferences a0
                        -> IO Bool
getHideValidationErrors =
  propertyGet "HideValidationErrors"
              []
              outBool

setHideValidationErrors :: Bool
                        -> XMLSchemaReferences a0
                        -> IO ()
setHideValidationErrors prop =
  propertySet "HideValidationErrors"
              [inBool prop]

getIgnoreMixedContent :: XMLSchemaReferences a0
                      -> IO Bool
getIgnoreMixedContent =
  propertyGet "IgnoreMixedContent"
              []
              outBool

setIgnoreMixedContent :: Bool
                      -> XMLSchemaReferences a0
                      -> IO ()
setIgnoreMixedContent prop =
  propertySet "IgnoreMixedContent"
              [inBool prop]

getShowPlaceholderText :: XMLSchemaReferences a0
                       -> IO Bool
getShowPlaceholderText =
  propertyGet "ShowPlaceholderText"
              []
              outBool

setShowPlaceholderText :: Bool
                       -> XMLSchemaReferences a0
                       -> IO ()
setShowPlaceholderText prop =
  propertySet "ShowPlaceholderText"
              [inBool prop]

item94 :: (Variant a1)
       => a1
       -> XMLSchemaReferences a0
       -> IO (XMLSchemaReference ())
item94 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

validate0 :: XMLSchemaReferences a0
          -> IO ()
validate0 =
  method0 "Validate"
          []

add49 :: (Variant a1, Variant a2, Variant a3, Variant a4)
      => a1
      -> a2
      -> a3
      -> a4
      -> XMLSchemaReferences a0
      -> IO (XMLSchemaReference ())
add49 namespaceURI alias fileName installForAllUsers =
  function1 "Add"
            [ inVariant namespaceURI
            , inVariant alias
            , inVariant fileName
            , inDefaultValue (inInt32 0) inVariant installForAllUsers
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface XMLChildNodeSuggestion
-- 
-- --------------------------------------------------
data XMLChildNodeSuggestion_ a = XMLChildNodeSuggestion__ 
type XMLChildNodeSuggestion a = IDispatch (XMLChildNodeSuggestion_ a)
iidXMLChildNodeSuggestion :: IID (XMLChildNodeSuggestion ())
iidXMLChildNodeSuggestion =
  mkIID "{A87E00E9-3AC3-4B53-ABE3-7379653D0E82}"

getApplication237 :: XMLChildNodeSuggestion a0
                  -> IO (Maybe Application)
getApplication237 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator237 :: XMLChildNodeSuggestion a0
              -> IO Int32
getCreator237 =
  propertyGet "Creator"
              []
              outInt32

getParent237 :: XMLChildNodeSuggestion a0
             -> IO (IDispatch ())
getParent237 =
  propertyGet "Parent"
              []
              outIDispatch

getBaseName0 :: XMLChildNodeSuggestion a0
             -> IO String
getBaseName0 =
  propertyGet "BaseName"
              []
              outString

getNamespaceURI1 :: XMLChildNodeSuggestion a0
                 -> IO String
getNamespaceURI1 =
  propertyGet "NamespaceURI"
              []
              outString

getXMLSchemaReference :: XMLChildNodeSuggestion a0
                      -> IO (XMLSchemaReference ())
getXMLSchemaReference =
  propertyGet "XMLSchemaReference"
              []
              outIDispatch

insert2 :: (Variant a1)
        => a1
        -> XMLChildNodeSuggestion a0
        -> IO (XMLNode ())
insert2 range3 =
  function1 "Insert"
            [inVariant range3]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface XMLChildNodeSuggestions
-- 
-- --------------------------------------------------
data XMLChildNodeSuggestions_ a = XMLChildNodeSuggestions__ 
type XMLChildNodeSuggestions a = IDispatch (XMLChildNodeSuggestions_ a)
iidXMLChildNodeSuggestions :: IID (XMLChildNodeSuggestions ())
iidXMLChildNodeSuggestions =
  mkIID "{DE63B5AC-CA4F-46FE-9184-A5719AB9ED5B}"

getNewEnum95 :: XMLChildNodeSuggestions a0
             -> IO (IUnknown ())
getNewEnum95 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount95 :: XMLChildNodeSuggestions a0
           -> IO Int32
getCount95 =
  propertyGet "Count"
              []
              outInt32

getApplication238 :: XMLChildNodeSuggestions a0
                  -> IO (Maybe Application)
getApplication238 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator238 :: XMLChildNodeSuggestions a0
              -> IO Int32
getCreator238 =
  propertyGet "Creator"
              []
              outInt32

getParent238 :: XMLChildNodeSuggestions a0
             -> IO (IDispatch ())
getParent238 =
  propertyGet "Parent"
              []
              outIDispatch

item95 :: (Variant a1)
       => a1
       -> XMLChildNodeSuggestions a0
       -> IO (XMLChildNodeSuggestion ())
item95 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface XMLNamespace
-- 
-- --------------------------------------------------
data XMLNamespace_ a = XMLNamespace__ 
type XMLNamespace a = IDispatch (XMLNamespace_ a)
iidXMLNamespace :: IID (XMLNamespace ())
iidXMLNamespace = mkIID "{B140A023-4850-4DA6-BC5F-CC459C4507BC}"

getApplication239 :: XMLNamespace a0
                  -> IO (Maybe Application)
getApplication239 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator239 :: XMLNamespace a0
              -> IO Int32
getCreator239 =
  propertyGet "Creator"
              []
              outInt32

getParent239 :: XMLNamespace a0
             -> IO (IDispatch ())
getParent239 =
  propertyGet "Parent"
              []
              outIDispatch

getURI :: XMLNamespace a0
       -> IO String
getURI =
  propertyGet "URI"
              []
              outString

getLocation4 :: (Variant a1)
             => a1
             -> XMLNamespace a0
             -> IO String
getLocation4 allUsers =
  propertyGet "Location"
              [inDefaultValue (inInt32 0) inVariant allUsers]
              outString

setLocation3 :: (Variant a1)
             => a1
             -> String
             -> XMLNamespace a0
             -> IO ()
setLocation3 allUsers prop =
  propertySet "Location"
              [ inDefaultValue (inInt32 0) inVariant allUsers
              , inString prop
              ]

getAlias :: (Variant a1)
         => a1
         -> XMLNamespace a0
         -> IO String
getAlias allUsers =
  propertyGet "Alias"
              [inDefaultValue (inInt32 0) inVariant allUsers]
              outString

setAlias :: (Variant a1)
         => a1
         -> String
         -> XMLNamespace a0
         -> IO ()
setAlias allUsers prop =
  propertySet "Alias"
              [ inDefaultValue (inInt32 0) inVariant allUsers
              , inString prop
              ]

getXSLTransforms :: XMLNamespace a0
                 -> IO (XSLTransforms ())
getXSLTransforms =
  propertyGet "XSLTransforms"
              []
              outIUnknown

getDefaultTransform :: (Variant a1)
                    => a1
                    -> XMLNamespace a0
                    -> IO (XSLTransform ())
getDefaultTransform allUsers =
  propertyGet "DefaultTransform"
              [inDefaultValue (inInt32 0) inVariant allUsers]
              outIUnknown

setDefaultTransform :: (Variant a1)
                    => a1
                    -> XSLTransform a2
                    -> XMLNamespace a0
                    -> IO ()
setDefaultTransform allUsers prop =
  propertySet "DefaultTransform"
              [ inDefaultValue (inInt32 0) inVariant allUsers
              , inIUnknown prop
              ]

attachToDocument :: (Variant a1)
                 => a1
                 -> XMLNamespace a0
                 -> IO ()
attachToDocument document =
  method0 "AttachToDocument"
          [inVariant document]

delete56 :: XMLNamespace a0
         -> IO ()
delete56 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface XMLNamespaces
-- 
-- --------------------------------------------------
data XMLNamespaces_ a = XMLNamespaces__ 
type XMLNamespaces a = IDispatch (XMLNamespaces_ a)
iidXMLNamespaces :: IID (XMLNamespaces ())
iidXMLNamespaces = mkIID "{656BBED7-E82D-4B0A-8F97-EC742BA11FFA}"

getNewEnum96 :: XMLNamespaces a0
             -> IO (IUnknown ())
getNewEnum96 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount96 :: XMLNamespaces a0
           -> IO Int32
getCount96 =
  propertyGet "Count"
              []
              outInt32

getApplication240 :: XMLNamespaces a0
                  -> IO (Maybe Application)
getApplication240 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator240 :: XMLNamespaces a0
              -> IO Int32
getCreator240 =
  propertyGet "Creator"
              []
              outInt32

getParent240 :: XMLNamespaces a0
             -> IO (IDispatch ())
getParent240 =
  propertyGet "Parent"
              []
              outIDispatch

item96 :: (Variant a1)
       => a1
       -> XMLNamespaces a0
       -> IO (XMLNamespace ())
item96 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add50 :: (Variant a1, Variant a2, Variant a3)
      => String
      -> a1
      -> a2
      -> a3
      -> XMLNamespaces a0
      -> IO (XMLNamespace ())
add50 path namespaceURI alias installForAllUsers =
  function1 "Add"
            [ inString path
            , inVariant namespaceURI
            , inVariant alias
            , inDefaultValue (inInt32 0) inVariant installForAllUsers
            ]
            outIDispatch

installManifest :: (Variant a1)
                => String
                -> a1
                -> XMLNamespaces a0
                -> IO ()
installManifest path installForAllUsers =
  method0 "InstallManifest"
          [ inString path
          , inDefaultValue (inInt32 0) inVariant installForAllUsers
          ]

-- --------------------------------------------------
-- 
-- interface XSLTransform
-- 
-- --------------------------------------------------
data XSLTransform_ a = XSLTransform__ 
type XSLTransform a = IDispatch (XSLTransform_ a)
iidXSLTransform :: IID (XSLTransform ())
iidXSLTransform = mkIID "{E3124493-7D6A-410F-9A48-CC822C033CEC}"

getApplication241 :: XSLTransform a0
                  -> IO (Maybe Application)
getApplication241 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator241 :: XSLTransform a0
              -> IO Int32
getCreator241 =
  propertyGet "Creator"
              []
              outInt32

getParent241 :: XSLTransform a0
             -> IO (IDispatch ())
getParent241 =
  propertyGet "Parent"
              []
              outIDispatch

getAlias0 :: (Variant a1)
          => a1
          -> XSLTransform a0
          -> IO String
getAlias0 allUsers =
  propertyGet "Alias"
              [inDefaultValue (inInt32 0) inVariant allUsers]
              outString

setAlias0 :: (Variant a1)
          => a1
          -> String
          -> XSLTransform a0
          -> IO ()
setAlias0 allUsers prop =
  propertySet "Alias"
              [ inDefaultValue (inInt32 0) inVariant allUsers
              , inString prop
              ]

getLocation5 :: (Variant a1)
             => a1
             -> XSLTransform a0
             -> IO String
getLocation5 allUsers =
  propertyGet "Location"
              [inDefaultValue (inInt32 0) inVariant allUsers]
              outString

setLocation4 :: (Variant a1)
             => a1
             -> String
             -> XSLTransform a0
             -> IO ()
setLocation4 allUsers prop =
  propertySet "Location"
              [ inDefaultValue (inInt32 0) inVariant allUsers
              , inString prop
              ]

delete57 :: XSLTransform a0
         -> IO ()
delete57 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface XSLTransforms
-- 
-- --------------------------------------------------
data XSLTransforms_ a = XSLTransforms__ 
type XSLTransforms a = IDispatch (XSLTransforms_ a)
iidXSLTransforms :: IID (XSLTransforms ())
iidXSLTransforms = mkIID "{C774F5EA-A539-4284-A1BE-30AEC052D899}"

getNewEnum97 :: XSLTransforms a0
             -> IO (IUnknown ())
getNewEnum97 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount97 :: XSLTransforms a0
           -> IO Int32
getCount97 =
  propertyGet "Count"
              []
              outInt32

getApplication242 :: XSLTransforms a0
                  -> IO (Maybe Application)
getApplication242 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator242 :: XSLTransforms a0
              -> IO Int32
getCreator242 =
  propertyGet "Creator"
              []
              outInt32

getParent242 :: XSLTransforms a0
             -> IO (IDispatch ())
getParent242 =
  propertyGet "Parent"
              []
              outIDispatch

item97 :: (Variant a1)
       => a1
       -> XSLTransforms a0
       -> IO (XSLTransform ())
item97 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add51 :: (Variant a1, Variant a2)
      => String
      -> a1
      -> a2
      -> XSLTransforms a0
      -> IO (XSLTransform ())
add51 location alias installForAllUsers =
  function1 "Add"
            [ inString location
            , inVariant alias
            , inDefaultValue (inInt32 0) inVariant installForAllUsers
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface Editors
-- 
-- --------------------------------------------------
data Editors_ a = Editors__ 
type Editors a = IDispatch (Editors_ a)
iidEditors :: IID (Editors ())
iidEditors = mkIID "{AED7E08C-14F0-4F33-921D-4C5353137BF6}"

getApplication243 :: Editors a0
                  -> IO (Maybe Application)
getApplication243 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator243 :: Editors a0
              -> IO Int32
getCreator243 =
  propertyGet "Creator"
              []
              outInt32

getParent243 :: Editors a0
             -> IO (IDispatch ())
getParent243 =
  propertyGet "Parent"
              []
              outIDispatch

getCount98 :: Editors a0
           -> IO Int32
getCount98 =
  propertyGet "Count"
              []
              outInt32

item98 :: (Variant a1)
       => a1
       -> Editors a0
       -> IO (Editor ())
item98 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add52 :: (Variant a1)
      => a1
      -> Editors a0
      -> IO (Editor ())
add52 editorID =
  function1 "Add"
            [inVariant editorID]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Editor
-- 
-- --------------------------------------------------
data Editor_ a = Editor__ 
type Editor a = IDispatch (Editor_ a)
iidEditor :: IID (Editor ())
iidEditor = mkIID "{DD947D72-F33C-4198-9BDF-F86181D05E41}"

getID8 :: Editor a0
       -> IO String
getID8 =
  propertyGet "ID"
              []
              outString

getName43 :: Editor a0
          -> IO String
getName43 =
  propertyGet "Name"
              []
              outString

getRange27 :: Editor a0
           -> IO (Range ())
getRange27 =
  propertyGet "Range"
              []
              outIDispatch

getNextRange :: Editor a0
             -> IO (Range ())
getNextRange =
  propertyGet "NextRange"
              []
              outIDispatch

getApplication244 :: Editor a0
                  -> IO (Maybe Application)
getApplication244 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 11 iptr
    doThenFree free (readunique readApplication) prop

getCreator244 :: Editor a0
              -> IO Int32
getCreator244 =
  propertyGet "Creator"
              []
              outInt32

getParent244 :: Editor a0
             -> IO (IDispatch ())
getParent244 =
  propertyGet "Parent"
              []
              outIDispatch

delete58 :: Editor a0
         -> IO ()
delete58 =
  method0 "Delete"
          []

deleteAll :: Editor a0
          -> IO ()
deleteAll =
  method0 "DeleteAll"
          []

selectAll3 :: Editor a0
           -> IO ()
selectAll3 =
  method0 "SelectAll"
          []

-- --------------------------------------------------
-- 
-- interface IApplicationEvents4
-- 
-- --------------------------------------------------
data IApplicationEvents4_ a = IApplicationEvents4__ 
type IApplicationEvents4 a = IDispatch (IApplicationEvents4_ a)
iidIApplicationEvents4 :: IID (IApplicationEvents4 ())
iidIApplicationEvents4 =
  mkIID "{00020A01-0001-0000-C000-000000000046}"

startup4 :: IApplicationEvents4 a0
         -> IO ()
startup4 =
  method0 "Startup"
          []

quit5 :: IApplicationEvents4 a0
      -> IO ()
quit5 =
  method0 "Quit"
          []

documentChange4 :: IApplicationEvents4 a0
                -> IO ()
documentChange4 =
  method0 "DocumentChange"
          []

documentOpen3 :: (Variant a1)
              => a1
              -> IApplicationEvents4 a0
              -> IO ()
documentOpen3 doc =
  method0 "DocumentOpen"
          [inVariant doc]

documentBeforeClose3 :: (Variant a1)
                     => a1
                     -> Bool
                     -> IApplicationEvents4 a0
                     -> IO Bool
documentBeforeClose3 doc cancel =
  method1 "DocumentBeforeClose"
          [inVariant doc]
          (inoutBool cancel)

documentBeforePrint3 :: (Variant a1)
                     => a1
                     -> Bool
                     -> IApplicationEvents4 a0
                     -> IO Bool
documentBeforePrint3 doc cancel =
  method1 "DocumentBeforePrint"
          [inVariant doc]
          (inoutBool cancel)

documentBeforeSave3 :: (Variant a1)
                    => a1
                    -> Bool
                    -> Bool
                    -> IApplicationEvents4 a0
                    -> IO Bool
documentBeforeSave3 doc saveAsUI cancel =
  method1 "DocumentBeforeSave"
          [ inVariant doc
          , inBool saveAsUI
          ]
          (inoutBool cancel)

newDocument3 :: (Variant a1)
             => a1
             -> IApplicationEvents4 a0
             -> IO ()
newDocument3 doc =
  method0 "NewDocument"
          [inVariant doc]

windowActivate3 :: (Variant a1)
                => a1
                -> Window a2
                -> IApplicationEvents4 a0
                -> IO ()
windowActivate3 doc wn =
  method0 "WindowActivate"
          [ inVariant doc
          , inIDispatch wn
          ]

windowDeactivate3 :: (Variant a1)
                  => a1
                  -> Window a2
                  -> IApplicationEvents4 a0
                  -> IO ()
windowDeactivate3 doc wn =
  method0 "WindowDeactivate"
          [ inVariant doc
          , inIDispatch wn
          ]

windowSelectionChange3 :: Selection a1
                       -> IApplicationEvents4 a0
                       -> IO ()
windowSelectionChange3 sel =
  method0 "WindowSelectionChange"
          [inIDispatch sel]

windowBeforeRightClick3 :: Selection a1
                        -> Bool
                        -> IApplicationEvents4 a0
                        -> IO Bool
windowBeforeRightClick3 sel cancel =
  method1 "WindowBeforeRightClick"
          [inIDispatch sel]
          (inoutBool cancel)

windowBeforeDoubleClick3 :: Selection a1
                         -> Bool
                         -> IApplicationEvents4 a0
                         -> IO Bool
windowBeforeDoubleClick3 sel cancel =
  method1 "WindowBeforeDoubleClick"
          [inIDispatch sel]
          (inoutBool cancel)

ePostagePropertyDialog1 :: (Variant a1)
                        => a1
                        -> IApplicationEvents4 a0
                        -> IO ()
ePostagePropertyDialog1 doc =
  method0 "EPostagePropertyDialog"
          [inVariant doc]

ePostageInsert1 :: (Variant a1)
                => a1
                -> IApplicationEvents4 a0
                -> IO ()
ePostageInsert1 doc =
  method0 "EPostageInsert"
          [inVariant doc]

mailMergeAfterMerge1 :: (Variant a1, Variant a2)
                     => a1
                     -> a2
                     -> IApplicationEvents4 a0
                     -> IO ()
mailMergeAfterMerge1 doc docResult =
  method0 "MailMergeAfterMerge"
          [ inVariant doc
          , inVariant docResult
          ]

mailMergeAfterRecordMerge1 :: (Variant a1)
                           => a1
                           -> IApplicationEvents4 a0
                           -> IO ()
mailMergeAfterRecordMerge1 doc =
  method0 "MailMergeAfterRecordMerge"
          [inVariant doc]

mailMergeBeforeMerge1 :: (Variant a1)
                      => a1
                      -> Int32
                      -> Int32
                      -> Bool
                      -> IApplicationEvents4 a0
                      -> IO Bool
mailMergeBeforeMerge1 doc startRecord endRecord cancel =
  method1 "MailMergeBeforeMerge"
          [ inVariant doc
          , inInt32 startRecord
          , inInt32 endRecord
          ]
          (inoutBool cancel)

mailMergeBeforeRecordMerge1 :: (Variant a1)
                            => a1
                            -> Bool
                            -> IApplicationEvents4 a0
                            -> IO Bool
mailMergeBeforeRecordMerge1 doc cancel =
  method1 "MailMergeBeforeRecordMerge"
          [inVariant doc]
          (inoutBool cancel)

mailMergeDataSourceLoad1 :: (Variant a1)
                         => a1
                         -> IApplicationEvents4 a0
                         -> IO ()
mailMergeDataSourceLoad1 doc =
  method0 "MailMergeDataSourceLoad"
          [inVariant doc]

mailMergeDataSourceValidate1 :: (Variant a1)
                             => a1
                             -> Bool
                             -> IApplicationEvents4 a0
                             -> IO ()
mailMergeDataSourceValidate1 doc handled =
  method0 "MailMergeDataSourceValidate"
          [ inVariant doc
          , inBool handled
          ]

mailMergeWizardSendToCustom1 :: (Variant a1)
                             => a1
                             -> IApplicationEvents4 a0
                             -> IO ()
mailMergeWizardSendToCustom1 doc =
  method0 "MailMergeWizardSendToCustom"
          [inVariant doc]

mailMergeWizardStateChange1 :: (Variant a1)
                            => a1
                            -> Int32
                            -> Int32
                            -> Bool
                            -> IApplicationEvents4 a0
                            -> IO ()
mailMergeWizardStateChange1 doc fromState toState handled =
  method0 "MailMergeWizardStateChange"
          [ inVariant doc
          , inInt32 fromState
          , inInt32 toState
          , inBool handled
          ]

windowSize1 :: (Variant a1)
            => a1
            -> Window a2
            -> IApplicationEvents4 a0
            -> IO ()
windowSize1 doc wn =
  method0 "WindowSize"
          [ inVariant doc
          , inIDispatch wn
          ]

xMLSelectionChange :: Selection a1
                   -> XMLNode a2
                   -> XMLNode a3
                   -> Int32
                   -> IApplicationEvents4 a0
                   -> IO ()
xMLSelectionChange sel oldXMLNode newXMLNode reason =
  method0 "XMLSelectionChange"
          [ inIDispatch sel
          , inIDispatch oldXMLNode
          , inIDispatch newXMLNode
          , inInt32 reason
          ]

xMLValidationError :: XMLNode a1
                   -> IApplicationEvents4 a0
                   -> IO ()
xMLValidationError xMLNode =
  method0 "XMLValidationError"
          [inIDispatch xMLNode]

documentSync :: (Variant a1, Variant a2)
             => a1
             -> a2
             -> IApplicationEvents4 a0
             -> IO ()
documentSync doc syncEventType =
  method0 "DocumentSync"
          [ inVariant doc
          , inVariant syncEventType
          ]

ePostageInsertEx :: (Variant a1)
                 => a1
                 -> Int32
                 -> Int32
                 -> Int32
                 -> Int32
                 -> Int32
                 -> Int32
                 -> String
                 -> String
                 -> Bool
                 -> Bool
                 -> IApplicationEvents4 a0
                 -> IO Bool
ePostageInsertEx doc cpDeliveryAddrStart cpDeliveryAddrEnd cpReturnAddrStart cpReturnAddrEnd xaWidth yaHeight bstrPrinterName bstrPaperFeed fPrint fCancel =
  method1 "EPostageInsertEx"
          [ inVariant doc
          , inInt32 cpDeliveryAddrStart
          , inInt32 cpDeliveryAddrEnd
          , inInt32 cpReturnAddrStart
          , inInt32 cpReturnAddrEnd
          , inInt32 xaWidth
          , inInt32 yaHeight
          , inString bstrPrinterName
          , inString bstrPaperFeed
          , inBool fPrint
          ]
          (inoutBool fCancel)

mailMergeDataSourceValidate2 :: (Variant a1)
                             => a1
                             -> Bool
                             -> IApplicationEvents4 a0
                             -> IO Bool
mailMergeDataSourceValidate2 doc handled =
  method1 "MailMergeDataSourceValidate2"
          [inVariant doc]
          (inoutBool handled)

-- --------------------------------------------------
-- 
-- dispinterface ApplicationEvents4
-- 
-- --------------------------------------------------
data ApplicationEvents4_ a = ApplicationEvents4__ 
type ApplicationEvents4 a = IDispatch (ApplicationEvents4_ a)
iidApplicationEvents4 :: IID (ApplicationEvents4 ())
iidApplicationEvents4 =
  mkIID "{00020A01-0000-0000-C000-000000000046}"

mkApplicationEvents4_vtbl :: (GUID -> objState -> IO (Ptr ()))
                          -> (objState -> IO Word32)
                          -> (objState -> IO Word32)
                          -> (objState -> IO Word32)
                          -> (Word32 -> Word32 -> objState -> IO (Ptr ()))
                          -> (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                          -> (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
                          -> (objState -> IO ())
                          -> (objState -> IO ())
                          -> (objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO Bool)
                          -> (Document -> Bool -> objState -> IO Bool)
                          -> (Document -> Bool -> Bool -> objState -> IO Bool)
                          -> (Document -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Selection a0 -> objState -> IO ())
                          -> (Selection a0 -> Bool -> objState -> IO Bool)
                          -> (Selection a0 -> Bool -> objState -> IO Bool)
                          -> (Document -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Document -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Int32 -> Int32 -> Bool -> objState -> IO Bool)
                          -> (Document -> Bool -> objState -> IO Bool)
                          -> (Document -> objState -> IO ())
                          -> (Document -> Bool -> objState -> IO ())
                          -> (Document -> objState -> IO ())
                          -> (Document -> Int32 -> Int32 -> Bool -> objState -> IO ())
                          -> (Document -> Window a0 -> objState -> IO ())
                          -> (Selection a0 -> XMLNode a1 -> XMLNode a2 -> Int32 -> objState -> IO ())
                          -> (XMLNode a0 -> objState -> IO ())
                          -> (Document -> MsoSyncEventType -> objState -> IO ())
                          -> (Document -> Int32 -> Int32 -> Int32 -> Int32 -> Int32 -> Int32 -> String -> String -> Bool -> Bool -> objState -> IO Bool)
                          -> (Document -> Bool -> objState -> IO Bool)
                          -> IO (ComVTable (ApplicationEvents4 ()) objState)
mkApplicationEvents4_vtbl queryInterface1 addRef1 release1 getTypeInfoCount1 getTypeInfo1 getIDsOfNames1 invoke1 startup5 quit6 documentChange5 documentOpen4 documentBeforeClose4 documentBeforePrint4 documentBeforeSave4 newDocument4 windowActivate4 windowDeactivate4 windowSelectionChange4 windowBeforeRightClick4 windowBeforeDoubleClick4 ePostagePropertyDialog2 ePostageInsert2 mailMergeAfterMerge2 mailMergeAfterRecordMerge2 mailMergeBeforeMerge2 mailMergeBeforeRecordMerge2 mailMergeDataSourceLoad2 mailMergeDataSourceValidate3 mailMergeWizardSendToCustom2 mailMergeWizardStateChange2 windowSize2 xMLSelectionChange0 xMLValidationError0 documentSync0 ePostageInsertEx0 mailMergeDataSourceValidate20 =
  let
   meth_arg0 = mkDispMethod "QueryInterface" 0x60000000 (prim_queryInterface1 queryInterface1)
   meth_arg1 = mkDispMethod "AddRef" 0x60000001 (prim_addRef1 addRef1)
   meth_arg2 = mkDispMethod "Release" 0x60000002 (prim_release1 release1)
   meth_arg3 = mkDispMethod "GetTypeInfoCount" 0x60010000 (prim_getTypeInfoCount1 getTypeInfoCount1)
   meth_arg4 = mkDispMethod "GetTypeInfo" 0x60010001 (prim_getTypeInfo1 getTypeInfo1)
   meth_arg5 = mkDispMethod "GetIDsOfNames" 0x60010002 (prim_getIDsOfNames1 getIDsOfNames1)
   meth_arg6 = mkDispMethod "Invoke" 0x60010003 (prim_invoke1 invoke1)
   meth_arg7 = mkDispMethod "Startup" 0x1 (prim_startup5 startup5)
   meth_arg8 = mkDispMethod "Quit" 0x2 (prim_quit6 quit6)
   meth_arg9 = mkDispMethod "DocumentChange" 0x3 (prim_documentChange5 documentChange5)
   meth_arg10 = mkDispMethod "DocumentOpen" 0x4 (prim_documentOpen4 documentOpen4)
   meth_arg11 = mkDispMethod "DocumentBeforeClose" 0x6 (prim_documentBeforeClose4 documentBeforeClose4)
   meth_arg12 = mkDispMethod "DocumentBeforePrint" 0x7 (prim_documentBeforePrint4 documentBeforePrint4)
   meth_arg13 = mkDispMethod "DocumentBeforeSave" 0x8 (prim_documentBeforeSave4 documentBeforeSave4)
   meth_arg14 = mkDispMethod "NewDocument" 0x9 (prim_newDocument4 newDocument4)
   meth_arg15 = mkDispMethod "WindowActivate" 0xa (prim_windowActivate4 windowActivate4)
   meth_arg16 = mkDispMethod "WindowDeactivate" 0xb (prim_windowDeactivate4 windowDeactivate4)
   meth_arg17 = mkDispMethod "WindowSelectionChange" 0xc (prim_windowSelectionChange4 windowSelectionChange4)
   meth_arg18 = mkDispMethod "WindowBeforeRightClick" 0xd (prim_windowBeforeRightClick4 windowBeforeRightClick4)
   meth_arg19 = mkDispMethod "WindowBeforeDoubleClick" 0xe (prim_windowBeforeDoubleClick4 windowBeforeDoubleClick4)
   meth_arg20 = mkDispMethod "EPostagePropertyDialog" 0xf (prim_ePostagePropertyDialog2 ePostagePropertyDialog2)
   meth_arg21 = mkDispMethod "EPostageInsert" 0x10 (prim_ePostageInsert2 ePostageInsert2)
   meth_arg22 = mkDispMethod "MailMergeAfterMerge" 0x11 (prim_mailMergeAfterMerge2 mailMergeAfterMerge2)
   meth_arg23 = mkDispMethod "MailMergeAfterRecordMerge" 0x12 (prim_mailMergeAfterRecordMerge2 mailMergeAfterRecordMerge2)
   meth_arg24 = mkDispMethod "MailMergeBeforeMerge" 0x13 (prim_mailMergeBeforeMerge2 mailMergeBeforeMerge2)
   meth_arg25 = mkDispMethod "MailMergeBeforeRecordMerge" 0x14 (prim_mailMergeBeforeRecordMerge2 mailMergeBeforeRecordMerge2)
   meth_arg26 = mkDispMethod "MailMergeDataSourceLoad" 0x15 (prim_mailMergeDataSourceLoad2 mailMergeDataSourceLoad2)
   meth_arg27 = mkDispMethod "MailMergeDataSourceValidate" 0x16 (prim_mailMergeDataSourceValidate3 mailMergeDataSourceValidate3)
   meth_arg28 = mkDispMethod "MailMergeWizardSendToCustom" 0x17 (prim_mailMergeWizardSendToCustom2 mailMergeWizardSendToCustom2)
   meth_arg29 = mkDispMethod "MailMergeWizardStateChange" 0x18 (prim_mailMergeWizardStateChange2 mailMergeWizardStateChange2)
   meth_arg30 = mkDispMethod "WindowSize" 0x19 (prim_windowSize2 windowSize2)
   meth_arg31 = mkDispMethod "XMLSelectionChange" 0x1a (prim_xMLSelectionChange0 xMLSelectionChange0)
   meth_arg32 = mkDispMethod "XMLValidationError" 0x1b (prim_xMLValidationError0 xMLValidationError0)
   meth_arg33 = mkDispMethod "DocumentSync" 0x1c (prim_documentSync0 documentSync0)
   meth_arg34 = mkDispMethod "EPostageInsertEx" 0x1d (prim_ePostageInsertEx0 ePostageInsertEx0)
   meth_arg35 = mkDispMethod "MailMergeDataSourceValidate2" 0x1e (prim_mailMergeDataSourceValidate20 mailMergeDataSourceValidate20)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         , meth_arg20
                         , meth_arg21
                         , meth_arg22
                         , meth_arg23
                         , meth_arg24
                         , meth_arg25
                         , meth_arg26
                         , meth_arg27
                         , meth_arg28
                         , meth_arg29
                         , meth_arg30
                         , meth_arg31
                         , meth_arg32
                         , meth_arg33
                         , meth_arg34
                         , meth_arg35
                         ]

prim_queryInterface1 :: (GUID -> objState -> IO (Ptr ()))
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_queryInterface1 queryInterface1_meth =
  inArg $ \ riid ->
  outArg $ \ ppvObj ->
  apply_1 (queryInterface1_meth riid)
          ppvObj

prim_addRef1 :: (objState -> IO Word32)
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_addRef1 addRef1_meth =
  retVal $ \ the_res ->
  apply_1 (addRef1_meth)
          the_res

prim_release1 :: (objState -> IO Word32)
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_release1 release1_meth =
  retVal $ \ the_res ->
  apply_1 (release1_meth)
          the_res

prim_getTypeInfoCount1 :: (objState -> IO Word32)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_getTypeInfoCount1 getTypeInfoCount1_meth =
  outArg $ \ pctinfo ->
  apply_1 (getTypeInfoCount1_meth)
          pctinfo

prim_getTypeInfo1 :: (Word32 -> Word32 -> objState -> IO (Ptr ()))
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_getTypeInfo1 getTypeInfo1_meth =
  inArg $ \ itinfo ->
  inArg $ \ lcid ->
  outArg $ \ pptinfo ->
  apply_1 (getTypeInfo1_meth itinfo lcid)
          pptinfo

prim_getIDsOfNames1 :: (GUID -> Maybe Char -> Word32 -> Word32 -> objState -> IO Int32)
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_getIDsOfNames1 getIDsOfNames1_meth =
  inArg $ \ riid ->
  inArg $ \ rgszNames ->
  inArg $ \ cNames ->
  inArg $ \ lcid ->
  outArg $ \ rgdispid ->
  apply_1 (getIDsOfNames1_meth riid rgszNames cNames lcid)
          rgdispid

prim_invoke1 :: (Int32 -> GUID -> Word32 -> Word16 -> DISPPARAMS -> objState -> IO (VARIANT, EXCEPINFO, Word32))
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_invoke1 invoke1_meth =
  inArg $ \ dispidMember ->
  inArg $ \ riid ->
  inArg $ \ lcid ->
  inArg $ \ wFlags ->
  inArg $ \ pdispparams ->
  outArg $ \ pvarResult ->
  outArg $ \ pexcepinfo ->
  outArg $ \ puArgErr ->
  apply_3 (invoke1_meth dispidMember riid lcid wFlags pdispparams)
          pvarResult
          pexcepinfo
          puArgErr

prim_startup5 :: (objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_startup5 startup5_meth = apply_0 (startup5_meth)

prim_quit6 :: (objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_quit6 quit6_meth = apply_0 (quit6_meth)

prim_documentChange5 :: (objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_documentChange5 documentChange5_meth =
  apply_0 (documentChange5_meth)

prim_documentOpen4 :: (Document -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_documentOpen4 documentOpen4_meth =
  inArg $ \ doc ->
  apply_0 (documentOpen4_meth doc)

prim_documentBeforeClose4 :: (Document -> Bool -> objState -> IO Bool)
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_documentBeforeClose4 documentBeforeClose4_meth =
  inArg $ \ doc ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (documentBeforeClose4_meth doc cancel)
          out_cancel

prim_documentBeforePrint4 :: (Document -> Bool -> objState -> IO Bool)
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_documentBeforePrint4 documentBeforePrint4_meth =
  inArg $ \ doc ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (documentBeforePrint4_meth doc cancel)
          out_cancel

prim_documentBeforeSave4 :: (Document -> Bool -> Bool -> objState -> IO Bool)
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_documentBeforeSave4 documentBeforeSave4_meth =
  inArg $ \ doc ->
  inArg $ \ saveAsUI ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (documentBeforeSave4_meth doc saveAsUI cancel)
          out_cancel

prim_newDocument4 :: (Document -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_newDocument4 newDocument4_meth =
  inArg $ \ doc ->
  apply_0 (newDocument4_meth doc)

prim_windowActivate4 :: (Document -> Window a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_windowActivate4 windowActivate4_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowActivate4_meth doc wn)

prim_windowDeactivate4 :: (Document -> Window a0 -> objState -> IO ())
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_windowDeactivate4 windowDeactivate4_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowDeactivate4_meth doc wn)

prim_windowSelectionChange4 :: (Selection a0 -> objState -> IO ())
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_windowSelectionChange4 windowSelectionChange4_meth =
  inArg $ \ sel ->
  apply_0 (windowSelectionChange4_meth sel)

prim_windowBeforeRightClick4 :: (Selection a0 -> Bool -> objState -> IO Bool)
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_windowBeforeRightClick4 windowBeforeRightClick4_meth =
  inArg $ \ sel ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (windowBeforeRightClick4_meth sel cancel)
          out_cancel

prim_windowBeforeDoubleClick4 :: (Selection a0 -> Bool -> objState -> IO Bool)
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_windowBeforeDoubleClick4 windowBeforeDoubleClick4_meth =
  inArg $ \ sel ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (windowBeforeDoubleClick4_meth sel cancel)
          out_cancel

prim_ePostagePropertyDialog2 :: (Document -> objState -> IO ())
                             -> [VARIANT]
                             -> objState
                             -> IO (Maybe VARIANT)
prim_ePostagePropertyDialog2 ePostagePropertyDialog2_meth =
  inArg $ \ doc ->
  apply_0 (ePostagePropertyDialog2_meth doc)

prim_ePostageInsert2 :: (Document -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_ePostageInsert2 ePostageInsert2_meth =
  inArg $ \ doc ->
  apply_0 (ePostageInsert2_meth doc)

prim_mailMergeAfterMerge2 :: (Document -> Document -> objState -> IO ())
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_mailMergeAfterMerge2 mailMergeAfterMerge2_meth =
  inArg $ \ doc ->
  inArg $ \ docResult ->
  apply_0 (mailMergeAfterMerge2_meth doc docResult)

prim_mailMergeAfterRecordMerge2 :: (Document -> objState -> IO ())
                                -> [VARIANT]
                                -> objState
                                -> IO (Maybe VARIANT)
prim_mailMergeAfterRecordMerge2 mailMergeAfterRecordMerge2_meth =
  inArg $ \ doc ->
  apply_0 (mailMergeAfterRecordMerge2_meth doc)

prim_mailMergeBeforeMerge2 :: (Document -> Int32 -> Int32 -> Bool -> objState -> IO Bool)
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_mailMergeBeforeMerge2 mailMergeBeforeMerge2_meth =
  inArg $ \ doc ->
  inArg $ \ startRecord ->
  inArg $ \ endRecord ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (mailMergeBeforeMerge2_meth doc startRecord endRecord cancel)
          out_cancel

prim_mailMergeBeforeRecordMerge2 :: (Document -> Bool -> objState -> IO Bool)
                                 -> [VARIANT]
                                 -> objState
                                 -> IO (Maybe VARIANT)
prim_mailMergeBeforeRecordMerge2 mailMergeBeforeRecordMerge2_meth =
  inArg $ \ doc ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (mailMergeBeforeRecordMerge2_meth doc cancel)
          out_cancel

prim_mailMergeDataSourceLoad2 :: (Document -> objState -> IO ())
                              -> [VARIANT]
                              -> objState
                              -> IO (Maybe VARIANT)
prim_mailMergeDataSourceLoad2 mailMergeDataSourceLoad2_meth =
  inArg $ \ doc ->
  apply_0 (mailMergeDataSourceLoad2_meth doc)

prim_mailMergeDataSourceValidate3 :: (Document -> Bool -> objState -> IO ())
                                  -> [VARIANT]
                                  -> objState
                                  -> IO (Maybe VARIANT)
prim_mailMergeDataSourceValidate3 mailMergeDataSourceValidate3_meth =
  inArg $ \ doc ->
  inArg $ \ handled ->
  apply_0 (mailMergeDataSourceValidate3_meth doc handled)

prim_mailMergeWizardSendToCustom2 :: (Document -> objState -> IO ())
                                  -> [VARIANT]
                                  -> objState
                                  -> IO (Maybe VARIANT)
prim_mailMergeWizardSendToCustom2 mailMergeWizardSendToCustom2_meth =
  inArg $ \ doc ->
  apply_0 (mailMergeWizardSendToCustom2_meth doc)

prim_mailMergeWizardStateChange2 :: (Document -> Int32 -> Int32 -> Bool -> objState -> IO ())
                                 -> [VARIANT]
                                 -> objState
                                 -> IO (Maybe VARIANT)
prim_mailMergeWizardStateChange2 mailMergeWizardStateChange2_meth =
  inArg $ \ doc ->
  inArg $ \ fromState ->
  inArg $ \ toState ->
  inArg $ \ handled ->
  apply_0 (mailMergeWizardStateChange2_meth doc fromState toState handled)

prim_windowSize2 :: (Document -> Window a0 -> objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_windowSize2 windowSize2_meth =
  inArg $ \ doc ->
  inArg $ \ wn ->
  apply_0 (windowSize2_meth doc wn)

prim_xMLSelectionChange0 :: (Selection a0 -> XMLNode a1 -> XMLNode a2 -> Int32 -> objState -> IO ())
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_xMLSelectionChange0 xMLSelectionChange0_meth =
  inArg $ \ sel ->
  inArg $ \ oldXMLNode ->
  inArg $ \ newXMLNode ->
  inArg $ \ reason ->
  apply_0 (xMLSelectionChange0_meth sel oldXMLNode newXMLNode reason)

prim_xMLValidationError0 :: (XMLNode a0 -> objState -> IO ())
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_xMLValidationError0 xMLValidationError0_meth =
  inArg $ \ xMLNode ->
  apply_0 (xMLValidationError0_meth xMLNode)

prim_documentSync0 :: (Document -> MsoSyncEventType -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_documentSync0 documentSync0_meth =
  inArg $ \ doc ->
  inArg $ \ syncEventType ->
  apply_0 (documentSync0_meth doc syncEventType)

prim_ePostageInsertEx0 :: (Document -> Int32 -> Int32 -> Int32 -> Int32 -> Int32 -> Int32 -> String -> String -> Bool -> Bool -> objState -> IO Bool)
                       -> [VARIANT]
                       -> objState
                       -> IO (Maybe VARIANT)
prim_ePostageInsertEx0 ePostageInsertEx0_meth =
  inArg $ \ doc ->
  inArg $ \ cpDeliveryAddrStart ->
  inArg $ \ cpDeliveryAddrEnd ->
  inArg $ \ cpReturnAddrStart ->
  inArg $ \ cpReturnAddrEnd ->
  inArg $ \ xaWidth ->
  inArg $ \ yaHeight ->
  inArg $ \ bstrPrinterName ->
  inArg $ \ bstrPaperFeed ->
  inArg $ \ fPrint ->
  inoutArg $ \ fCancel out_fCancel ->
  apply_1 (ePostageInsertEx0_meth doc cpDeliveryAddrStart cpDeliveryAddrEnd cpReturnAddrStart cpReturnAddrEnd xaWidth yaHeight bstrPrinterName bstrPaperFeed fPrint fCancel)
          out_fCancel

prim_mailMergeDataSourceValidate20 :: (Document -> Bool -> objState -> IO Bool)
                                   -> [VARIANT]
                                   -> objState
                                   -> IO (Maybe VARIANT)
prim_mailMergeDataSourceValidate20 mailMergeDataSourceValidate20_meth =
  inArg $ \ doc ->
  inoutArg $ \ handled out_handled ->
  apply_1 (mailMergeDataSourceValidate20_meth doc handled)
          out_handled

-- --------------------------------------------------
-- 
-- dispinterface DocumentEvents2
-- 
-- --------------------------------------------------
data DocumentEvents2_ a = DocumentEvents2__ 
type DocumentEvents2 a = IDispatch (DocumentEvents2_ a)
iidDocumentEvents2 :: IID (DocumentEvents2 ())
iidDocumentEvents2 = mkIID "{00020A02-0000-0000-C000-000000000046}"

mkDocumentEvents2_vtbl :: (objState -> IO ())
                       -> (objState -> IO ())
                       -> (objState -> IO ())
                       -> (MsoSyncEventType -> objState -> IO ())
                       -> (XMLNode a0 -> Bool -> objState -> IO ())
                       -> (Range a0 -> XMLNode a1 -> Bool -> objState -> IO ())
                       -> (ContentControl a0 -> Bool -> objState -> IO ())
                       -> (ContentControl a0 -> Bool -> objState -> IO ())
                       -> (ContentControl a0 -> Bool -> objState -> IO Bool)
                       -> (ContentControl a0 -> objState -> IO ())
                       -> (ContentControl a0 -> String -> objState -> IO String)
                       -> (ContentControl a0 -> String -> objState -> IO String)
                       -> (Range a0 -> String -> String -> String -> String -> objState -> IO ())
                       -> IO (ComVTable (DocumentEvents2 ()) objState)
mkDocumentEvents2_vtbl new1 open5 close6 sync xMLAfterInsert xMLBeforeDelete contentControlAfterAdd contentControlBeforeDelete contentControlOnExit contentControlOnEnter contentControlBeforeStoreUpdate contentControlBeforeContentUpdate buildingBlockInsert =
  let
   meth_arg0 = mkDispMethod "New" 0x4 (prim_new1 new1)
   meth_arg1 = mkDispMethod "Open" 0x5 (prim_open5 open5)
   meth_arg2 = mkDispMethod "Close" 0x6 (prim_close6 close6)
   meth_arg3 = mkDispMethod "Sync" 0x7 (prim_sync sync)
   meth_arg4 = mkDispMethod "XMLAfterInsert" 0x8 (prim_xMLAfterInsert xMLAfterInsert)
   meth_arg5 = mkDispMethod "XMLBeforeDelete" 0x9 (prim_xMLBeforeDelete xMLBeforeDelete)
   meth_arg6 = mkDispMethod "ContentControlAfterAdd" 0xc (prim_contentControlAfterAdd contentControlAfterAdd)
   meth_arg7 = mkDispMethod "ContentControlBeforeDelete" 0xd (prim_contentControlBeforeDelete contentControlBeforeDelete)
   meth_arg8 = mkDispMethod "ContentControlOnExit" 0xe (prim_contentControlOnExit contentControlOnExit)
   meth_arg9 = mkDispMethod "ContentControlOnEnter" 0xf (prim_contentControlOnEnter contentControlOnEnter)
   meth_arg10 = mkDispMethod "ContentControlBeforeStoreUpdate" 0x10 (prim_contentControlBeforeStoreUpdate contentControlBeforeStoreUpdate)
   meth_arg11 = mkDispMethod "ContentControlBeforeContentUpdate" 0x11 (prim_contentControlBeforeContentUpdate contentControlBeforeContentUpdate)
   meth_arg12 = mkDispMethod "BuildingBlockInsert" 0x12 (prim_buildingBlockInsert buildingBlockInsert)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         ]

prim_new1 :: (objState -> IO ())
          -> [VARIANT]
          -> objState
          -> IO (Maybe VARIANT)
prim_new1 new1_meth = apply_0 (new1_meth)

prim_open5 :: (objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_open5 open5_meth = apply_0 (open5_meth)

prim_close6 :: (objState -> IO ())
            -> [VARIANT]
            -> objState
            -> IO (Maybe VARIANT)
prim_close6 close6_meth = apply_0 (close6_meth)

prim_sync :: (MsoSyncEventType -> objState -> IO ())
          -> [VARIANT]
          -> objState
          -> IO (Maybe VARIANT)
prim_sync sync_meth =
  inArg $ \ syncEventType ->
  apply_0 (sync_meth syncEventType)

prim_xMLAfterInsert :: (XMLNode a0 -> Bool -> objState -> IO ())
                    -> [VARIANT]
                    -> objState
                    -> IO (Maybe VARIANT)
prim_xMLAfterInsert xMLAfterInsert_meth =
  inArg $ \ newXMLNode ->
  inArg $ \ inUndoRedo ->
  apply_0 (xMLAfterInsert_meth newXMLNode inUndoRedo)

prim_xMLBeforeDelete :: (Range a0 -> XMLNode a1 -> Bool -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_xMLBeforeDelete xMLBeforeDelete_meth =
  inArg $ \ deletedRange ->
  inArg $ \ oldXMLNode ->
  inArg $ \ inUndoRedo ->
  apply_0 (xMLBeforeDelete_meth deletedRange oldXMLNode inUndoRedo)

prim_contentControlAfterAdd :: (ContentControl a0 -> Bool -> objState -> IO ())
                            -> [VARIANT]
                            -> objState
                            -> IO (Maybe VARIANT)
prim_contentControlAfterAdd contentControlAfterAdd_meth =
  inIUnknownArg $ \ newContentControl ->
  inArg $ \ inUndoRedo ->
  apply_0 (contentControlAfterAdd_meth newContentControl inUndoRedo)

prim_contentControlBeforeDelete :: (ContentControl a0 -> Bool -> objState -> IO ())
                                -> [VARIANT]
                                -> objState
                                -> IO (Maybe VARIANT)
prim_contentControlBeforeDelete contentControlBeforeDelete_meth =
  inIUnknownArg $ \ oldContentControl ->
  inArg $ \ inUndoRedo ->
  apply_0 (contentControlBeforeDelete_meth oldContentControl inUndoRedo)

prim_contentControlOnExit :: (ContentControl a0 -> Bool -> objState -> IO Bool)
                          -> [VARIANT]
                          -> objState
                          -> IO (Maybe VARIANT)
prim_contentControlOnExit contentControlOnExit_meth =
  inIUnknownArg $ \ contentControl ->
  inoutArg $ \ cancel out_cancel ->
  apply_1 (contentControlOnExit_meth contentControl cancel)
          out_cancel

prim_contentControlOnEnter :: (ContentControl a0 -> objState -> IO ())
                           -> [VARIANT]
                           -> objState
                           -> IO (Maybe VARIANT)
prim_contentControlOnEnter contentControlOnEnter_meth =
  inIUnknownArg $ \ contentControl ->
  apply_0 (contentControlOnEnter_meth contentControl)

prim_contentControlBeforeStoreUpdate :: (ContentControl a0 -> String -> objState -> IO String)
                                     -> [VARIANT]
                                     -> objState
                                     -> IO (Maybe VARIANT)
prim_contentControlBeforeStoreUpdate contentControlBeforeStoreUpdate_meth =
  inIUnknownArg $ \ contentControl ->
  inoutArg $ \ content out_content ->
  apply_1 (contentControlBeforeStoreUpdate_meth contentControl content)
          out_content

prim_contentControlBeforeContentUpdate :: (ContentControl a0 -> String -> objState -> IO String)
                                       -> [VARIANT]
                                       -> objState
                                       -> IO (Maybe VARIANT)
prim_contentControlBeforeContentUpdate contentControlBeforeContentUpdate_meth =
  inIUnknownArg $ \ contentControl ->
  inoutArg $ \ content out_content ->
  apply_1 (contentControlBeforeContentUpdate_meth contentControl content)
          out_content

prim_buildingBlockInsert :: (Range a0 -> String -> String -> String -> String -> objState -> IO ())
                         -> [VARIANT]
                         -> objState
                         -> IO (Maybe VARIANT)
prim_buildingBlockInsert buildingBlockInsert_meth =
  inArg $ \ range3 ->
  inArg $ \ name ->
  inArg $ \ category ->
  inArg $ \ blockType ->
  inArg $ \ template ->
  apply_0 (buildingBlockInsert_meth range3 name category blockType template)

data WdRectangleType
 = WdTextRectangle
 | WdShapeRectangle
 | WdMarkupRectangle
 | WdMarkupRectangleButton
 | WdPageBorderRectangle
 | WdLineBetweenColumnRectangle
 | WdSelection
 | WdSystem
 | WdMarkupRectangleArea
 | WdReadingModeNavigation
 | WdMarkupRectangleMoveMatch
 | WdReadingModePanningArea
 | WdMailNavArea
 | WdDocumentControlRectangle
 deriving (Enum)
instance Variant (WdRectangleType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdLineType
 = WdLineTypeList__ [WdLineType]
 | WdTextLine
 | WdTableRow
 
instance Flags (WdLineType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdLineType) where
  fromEnum v =
    case v of
       (WdLineTypeList__ xs) -> orList (map fromEnum xs)
       WdTextLine -> 0
       WdTableRow -> 1
  
  toEnum v =
    case v of
       0 -> WdTextLine
       1 -> WdTableRow
       x -> WdLineTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdLineType: illegal enum value "
  
instance Variant (WdLineType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdXMLNodeType
 = WdXMLNodeTypeList__ [WdXMLNodeType]
 | WdXMLNodeElement
 | WdXMLNodeAttribute
 
instance Flags (WdXMLNodeType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdXMLNodeType) where
  fromEnum v =
    case v of
       (WdXMLNodeTypeList__ xs) -> orList (map fromEnum xs)
       WdXMLNodeElement -> 1
       WdXMLNodeAttribute -> 2
  
  toEnum v =
    case v of
       1 -> WdXMLNodeElement
       2 -> WdXMLNodeAttribute
       x -> WdXMLNodeTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallWdXMLNodeType: illegal enum value "
  
instance Variant (WdXMLNodeType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdXMLSelectionChangeReason
 = WdXMLSelectionChangeReasonList__ [WdXMLSelectionChangeReason]
 | WdXMLSelectionChangeReasonMove
 | WdXMLSelectionChangeReasonInsert
 | WdXMLSelectionChangeReasonDelete
 
instance Flags (WdXMLSelectionChangeReason) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdXMLSelectionChangeReason) where
  fromEnum v =
    case v of
       (WdXMLSelectionChangeReasonList__ xs) -> orList (map fromEnum xs)
       WdXMLSelectionChangeReasonMove -> 0
       WdXMLSelectionChangeReasonInsert -> 1
       WdXMLSelectionChangeReasonDelete -> 2
  
  toEnum v =
    case v of
       0 -> WdXMLSelectionChangeReasonMove
       1 -> WdXMLSelectionChangeReasonInsert
       2 -> WdXMLSelectionChangeReasonDelete
       x -> WdXMLSelectionChangeReasonList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                   then Just (toEnum (fromIntegral val))
                                                                   else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdXMLSelectionChangeReason: illegal enum value "
  
instance Variant (WdXMLSelectionChangeReason) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdXMLNodeLevel
 = WdXMLNodeLevelInline
 | WdXMLNodeLevelParagraph
 | WdXMLNodeLevelRow
 | WdXMLNodeLevelCell
 deriving (Enum)
instance Variant (WdXMLNodeLevel) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdSmartTagControlType
 = WdControlSmartTag
 | WdControlLink
 | WdControlHelp
 | WdControlHelpURL
 | WdControlSeparator
 | WdControlButton
 | WdControlLabel
 | WdControlImage
 | WdControlCheckbox
 | WdControlTextbox
 | WdControlListbox
 | WdControlCombo
 | WdControlActiveX
 | WdControlDocumentFragment
 | WdControlDocumentFragmentURL
 | WdControlRadioGroup
 
instance Enum (WdSmartTagControlType) where
  fromEnum v =
    case v of
       WdControlSmartTag -> 1
       WdControlLink -> 2
       WdControlHelp -> 3
       WdControlHelpURL -> 4
       WdControlSeparator -> 5
       WdControlButton -> 6
       WdControlLabel -> 7
       WdControlImage -> 8
       WdControlCheckbox -> 9
       WdControlTextbox -> 10
       WdControlListbox -> 11
       WdControlCombo -> 12
       WdControlActiveX -> 13
       WdControlDocumentFragment -> 14
       WdControlDocumentFragmentURL -> 15
       WdControlRadioGroup -> 16
  
  toEnum v =
    case v of
       1 -> WdControlSmartTag
       2 -> WdControlLink
       3 -> WdControlHelp
       4 -> WdControlHelpURL
       5 -> WdControlSeparator
       6 -> WdControlButton
       7 -> WdControlLabel
       8 -> WdControlImage
       9 -> WdControlCheckbox
       10 -> WdControlTextbox
       11 -> WdControlListbox
       12 -> WdControlCombo
       13 -> WdControlActiveX
       14 -> WdControlDocumentFragment
       15 -> WdControlDocumentFragmentURL
       16 -> WdControlRadioGroup
       _ -> error "unmarshallWdSmartTagControlType: illegal enum value "
  
instance Variant (WdSmartTagControlType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdEditorType
 = WdEditorCurrent
 | WdEditorEditors
 | WdEditorOwners
 | WdEditorEveryone
 
instance Enum (WdEditorType) where
  fromEnum v =
    case v of
       WdEditorCurrent -> (-6)
       WdEditorEditors -> (-5)
       WdEditorOwners -> (-4)
       WdEditorEveryone -> (-1)
  
  toEnum v =
    case v of
       (-6) -> WdEditorCurrent
       (-5) -> WdEditorEditors
       (-4) -> WdEditorOwners
       (-1) -> WdEditorEveryone
       _ -> error "unmarshallWdEditorType: illegal enum value "
  
instance Variant (WdEditorType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdXMLValidationStatus
 = WdXMLValidationStatusCustom
 | WdXMLValidationStatusOK
 
instance Enum (WdXMLValidationStatus) where
  fromEnum v =
    case v of
       WdXMLValidationStatusCustom -> (-1072898048)
       WdXMLValidationStatusOK -> 0
  
  toEnum v =
    case v of
       (-1072898048) -> WdXMLValidationStatusCustom
       0 -> WdXMLValidationStatusOK
       _ -> error "unmarshallWdXMLValidationStatus: illegal enum value "
  
instance Variant (WdXMLValidationStatus) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
-- --------------------------------------------------
-- 
-- interface Source
-- 
-- --------------------------------------------------
data Source_ a = Source__ 
type Source a = IDispatch (Source_ a)
iidSource :: IID (Source ())
iidSource = mkIID "{4A6AE865-199D-4EA3-9F6B-125BD9C40EDF}"

getApplication245 :: Source a0
                  -> IO (Maybe Application)
getApplication245 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator245 :: Source a0
              -> IO Int32
getCreator245 =
  propertyGet "Creator"
              []
              outInt32

getParent245 :: Source a0
             -> IO (IDispatch ())
getParent245 =
  propertyGet "Parent"
              []
              outIDispatch

getTag :: Source a0
       -> IO String
getTag =
  propertyGet "Tag"
              []
              outString

getField0 :: String
          -> Source a0
          -> IO String
getField0 name =
  propertyGet "Field"
              [inString name]
              outString

setField :: String
         -> String
         -> Source a0
         -> IO ()
setField name prop =
  propertySet "Field"
              [ inString name
              , inString prop
              ]

getXML3 :: Source a0
        -> IO String
getXML3 =
  propertyGet "XML"
              []
              outString

getCited :: Source a0
         -> IO Bool
getCited =
  propertyGet "Cited"
              []
              outBool

delete59 :: Source a0
         -> IO ()
delete59 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Sources
-- 
-- --------------------------------------------------
data Sources_ a = Sources__ 
type Sources a = IDispatch (Sources_ a)
iidSources :: IID (Sources ())
iidSources = mkIID "{FA02A26B-6550-45C5-B6F0-80E757CD3482}"

getNewEnum98 :: Sources a0
             -> IO (IUnknown ())
getNewEnum98 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount99 :: Sources a0
           -> IO Int32
getCount99 =
  propertyGet "Count"
              []
              outInt32

getApplication246 :: Sources a0
                  -> IO (Maybe Application)
getApplication246 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 9 iptr
    doThenFree free (readunique readApplication) prop

getCreator246 :: Sources a0
              -> IO Int32
getCreator246 =
  propertyGet "Creator"
              []
              outInt32

getParent246 :: Sources a0
             -> IO (IDispatch ())
getParent246 =
  propertyGet "Parent"
              []
              outIDispatch

item99 :: Int32
       -> Sources a0
       -> IO (Source ())
item99 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add53 :: String
      -> Sources a0
      -> IO ()
add53 data0 =
  method0 "Add"
          [inString data0]

-- --------------------------------------------------
-- 
-- interface Bibliography
-- 
-- --------------------------------------------------
data Bibliography_ a = Bibliography__ 
type Bibliography a = IDispatch (Bibliography_ a)
iidBibliography :: IID (Bibliography ())
iidBibliography = mkIID "{3834F60F-EE8C-455D-A441-D766675D6D3B}"

getApplication247 :: Bibliography a0
                  -> IO (Maybe Application)
getApplication247 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator247 :: Bibliography a0
              -> IO Int32
getCreator247 =
  propertyGet "Creator"
              []
              outInt32

getParent247 :: Bibliography a0
             -> IO (IDispatch ())
getParent247 =
  propertyGet "Parent"
              []
              outIDispatch

getSources :: Bibliography a0
           -> IO (Sources ())
getSources =
  propertyGet "Sources"
              []
              outIDispatch

getBibliographyStyle0 :: Bibliography a0
                      -> IO String
getBibliographyStyle0 =
  propertyGet "BibliographyStyle"
              []
              outString

setBibliographyStyle0 :: String
                      -> Bibliography a0
                      -> IO ()
setBibliographyStyle0 prop =
  propertySet "BibliographyStyle"
              [inString prop]

generateUniqueTag :: Bibliography a0
                  -> IO String
generateUniqueTag =
  function1 "GenerateUniqueTag"
            []
            outString

-- --------------------------------------------------
-- 
-- interface OMaths
-- 
-- --------------------------------------------------
data OMaths_ a = OMaths__ 
type OMaths a = IDispatch (OMaths_ a)
iidOMaths :: IID (OMaths ())
iidOMaths = mkIID "{873E774B-926A-4CB1-878D-635A45187595}"

getNewEnum99 :: OMaths a0
             -> IO (IUnknown ())
getNewEnum99 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication248 :: OMaths a0
                  -> IO (Maybe Application)
getApplication248 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator248 :: OMaths a0
              -> IO Int32
getCreator248 =
  propertyGet "Creator"
              []
              outInt32

getParent248 :: OMaths a0
             -> IO (IDispatch ())
getParent248 =
  propertyGet "Parent"
              []
              outIDispatch

getCount100 :: OMaths a0
            -> IO Int32
getCount100 =
  propertyGet "Count"
              []
              outInt32

item100 :: Int32
        -> OMaths a0
        -> IO (OMath ())
item100 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

linearize :: OMaths a0
          -> IO ()
linearize =
  method0 "Linearize"
          []

buildUp :: OMaths a0
        -> IO ()
buildUp =
  method0 "BuildUp"
          []

add54 :: Range a1
      -> OMaths a0
      -> IO (Range ())
add54 range3 =
  function1 "Add"
            [inIDispatch range3]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMath
-- 
-- --------------------------------------------------
data OMath_ a = OMath__ 
type OMath a = IDispatch (OMath_ a)
iidOMath :: IID (OMath ())
iidOMath = mkIID "{E4442A83-F623-459C-8E95-8BFB44DCF23A}"

getApplication249 :: OMath a0
                  -> IO (Maybe Application)
getApplication249 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator249 :: OMath a0
              -> IO Int32
getCreator249 =
  propertyGet "Creator"
              []
              outInt32

getParent249 :: OMath a0
             -> IO (IDispatch ())
getParent249 =
  propertyGet "Parent"
              []
              outIDispatch

getRange28 :: OMath a0
           -> IO (Range ())
getRange28 =
  propertyGet "Range"
              []
              outIDispatch

getFunctions :: OMath a0
             -> IO (OMathFunctions ())
getFunctions =
  propertyGet "Functions"
              []
              outIUnknown

getType30 :: OMath a0
          -> IO WdOMathType
getType30 =
  propertyGet "Type"
              []
              outEnum

setType6 :: WdOMathType
         -> OMath a0
         -> IO ()
setType6 prop =
  propertySet "Type"
              [inEnum prop]

getParentOMath :: OMath a0
               -> IO (OMath ())
getParentOMath =
  propertyGet "ParentOMath"
              []
              outIDispatch

getParentFunction :: OMath a0
                  -> IO (OMathFunction ())
getParentFunction =
  propertyGet "ParentFunction"
              []
              outIUnknown

getParentRow :: OMath a0
             -> IO (OMathMatRow ())
getParentRow =
  propertyGet "ParentRow"
              []
              outIUnknown

getParentCol :: OMath a0
             -> IO (OMathMatCol ())
getParentCol =
  propertyGet "ParentCol"
              []
              outIUnknown

getParentArg :: OMath a0
             -> IO (OMath ())
getParentArg =
  propertyGet "ParentArg"
              []
              outIDispatch

getArgIndex :: OMath a0
            -> IO Int32
getArgIndex =
  propertyGet "ArgIndex"
              []
              outInt32

getNestingLevel8 :: OMath a0
                 -> IO Int32
getNestingLevel8 =
  propertyGet "NestingLevel"
              []
              outInt32

getArgSize :: OMath a0
           -> IO Int32
getArgSize =
  propertyGet "ArgSize"
              []
              outInt32

setArgSize :: Int32
           -> OMath a0
           -> IO ()
setArgSize prop =
  propertySet "ArgSize"
              [inInt32 prop]

getBreaks0 :: OMath a0
           -> IO (OMathBreaks ())
getBreaks0 =
  propertyGet "Breaks"
              []
              outIUnknown

getJustification :: OMath a0
                 -> IO WdOMathJc
getJustification =
  propertyGet "Justification"
              []
              outEnum

setJustification :: WdOMathJc
                 -> OMath a0
                 -> IO ()
setJustification prop =
  propertySet "Justification"
              [inEnum prop]

getAlignPoint :: OMath a0
              -> IO Int32
getAlignPoint =
  propertyGet "AlignPoint"
              []
              outInt32

setAlignPoint :: Int32
              -> OMath a0
              -> IO ()
setAlignPoint prop =
  propertySet "AlignPoint"
              [inInt32 prop]

linearize0 :: OMath a0
           -> IO ()
linearize0 =
  method0 "Linearize"
          []

buildUp0 :: OMath a0
         -> IO ()
buildUp0 =
  method0 "BuildUp"
          []

remove :: OMath a0
       -> IO ()
remove =
  method0 "Remove"
          []

convertToMathText :: OMath a0
                  -> IO ()
convertToMathText =
  method0 "ConvertToMathText"
          []

convertToNormalText :: OMath a0
                    -> IO ()
convertToNormalText =
  method0 "ConvertToNormalText"
          []

convertToLiteralText :: OMath a0
                     -> IO ()
convertToLiteralText =
  method0 "ConvertToLiteralText"
          []

-- --------------------------------------------------
-- 
-- interface OMathFunctions
-- 
-- --------------------------------------------------
data OMathFunctions_ a = OMathFunctions__ 
type OMathFunctions a = IDispatch (OMathFunctions_ a)
iidOMathFunctions :: IID (OMathFunctions ())
iidOMathFunctions = mkIID "{497142A4-16FD-42C6-BC58-15D89345FC21}"

getNewEnum100 :: OMathFunctions a0
              -> IO (IUnknown ())
getNewEnum100 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication250 :: OMathFunctions a0
                  -> IO (Maybe Application)
getApplication250 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator250 :: OMathFunctions a0
              -> IO Int32
getCreator250 =
  propertyGet "Creator"
              []
              outInt32

getParent250 :: OMathFunctions a0
             -> IO (IDispatch ())
getParent250 =
  propertyGet "Parent"
              []
              outIDispatch

getCount101 :: OMathFunctions a0
            -> IO Int32
getCount101 =
  propertyGet "Count"
              []
              outInt32

item101 :: Int32
        -> OMathFunctions a0
        -> IO (OMathFunction ())
item101 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add55 :: (Variant a2, Variant a3)
      => Range a1
      -> WdOMathFunctionType
      -> a2
      -> a3
      -> OMathFunctions a0
      -> IO (OMathFunction ())
add55 range3 type0 numArgs numCols =
  function1 "Add"
            [ inIDispatch range3
            , inEnum type0
            , inVariant numArgs
            , inVariant numCols
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathArgs
-- 
-- --------------------------------------------------
data OMathArgs_ a = OMathArgs__ 
type OMathArgs a = IDispatch (OMathArgs_ a)
iidOMathArgs :: IID (OMathArgs ())
iidOMathArgs = mkIID "{8245795B-9AED-4943-A16D-E586ED8180D1}"

getApplication251 :: OMathArgs a0
                  -> IO (Maybe Application)
getApplication251 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator251 :: OMathArgs a0
              -> IO Int32
getCreator251 =
  propertyGet "Creator"
              []
              outInt32

getParent251 :: OMathArgs a0
             -> IO (IDispatch ())
getParent251 =
  propertyGet "Parent"
              []
              outIDispatch

getCount102 :: OMathArgs a0
            -> IO Int32
getCount102 =
  propertyGet "Count"
              []
              outInt32

item102 :: Int32
        -> OMathArgs a0
        -> IO (OMath ())
item102 index =
  function1 "Item"
            [inInt32 index]
            outIDispatch

add56 :: (Variant a1)
      => a1
      -> OMathArgs a0
      -> IO (OMath ())
add56 beforeArg =
  function1 "Add"
            [inVariant beforeArg]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathFunction
-- 
-- --------------------------------------------------
data OMathFunction_ a = OMathFunction__ 
type OMathFunction a = IDispatch (OMathFunction_ a)
iidOMathFunction :: IID (OMathFunction ())
iidOMathFunction = mkIID "{F1F37152-1DB1-4901-AD9A-C740F99464B4}"

getType31 :: OMathFunction a0
          -> IO WdOMathFunctionType
getType31 =
  propertyGet "Type"
              []
              outEnum

getApplication252 :: OMathFunction a0
                  -> IO (Maybe Application)
getApplication252 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator252 :: OMathFunction a0
              -> IO Int32
getCreator252 =
  propertyGet "Creator"
              []
              outInt32

getParent252 :: OMathFunction a0
             -> IO (IDispatch ())
getParent252 =
  propertyGet "Parent"
              []
              outIDispatch

getRange29 :: OMathFunction a0
           -> IO (Range ())
getRange29 =
  propertyGet "Range"
              []
              outIDispatch

getArgs :: OMathFunction a0
        -> IO (OMathArgs ())
getArgs =
  propertyGet "Args"
              []
              outIDispatch

getAcc :: OMathFunction a0
       -> IO (OMathAcc ())
getAcc =
  propertyGet "Acc"
              []
              outIUnknown

getBar :: OMathFunction a0
       -> IO (OMathBar ())
getBar =
  propertyGet "Bar"
              []
              outIUnknown

getBox :: OMathFunction a0
       -> IO (OMathBox ())
getBox =
  propertyGet "Box"
              []
              outIUnknown

getBorderBox :: OMathFunction a0
             -> IO (OMathBorderBox ())
getBorderBox =
  propertyGet "BorderBox"
              []
              outIUnknown

getDelim :: OMathFunction a0
         -> IO (OMathDelim ())
getDelim =
  propertyGet "Delim"
              []
              outIUnknown

getEqArray :: OMathFunction a0
           -> IO (OMathEqArray ())
getEqArray =
  propertyGet "EqArray"
              []
              outIUnknown

getFrac :: OMathFunction a0
        -> IO (OMathFrac ())
getFrac =
  propertyGet "Frac"
              []
              outIUnknown

getFunc :: OMathFunction a0
        -> IO (OMathFunc ())
getFunc =
  propertyGet "Func"
              []
              outIUnknown

getGroupChar :: OMathFunction a0
             -> IO (OMathGroupChar ())
getGroupChar =
  propertyGet "GroupChar"
              []
              outIUnknown

getLimLow :: OMathFunction a0
          -> IO (OMathLimLow ())
getLimLow =
  propertyGet "LimLow"
              []
              outIUnknown

getLimUpp :: OMathFunction a0
          -> IO (OMathLimUpp ())
getLimUpp =
  propertyGet "LimUpp"
              []
              outIUnknown

getMat :: OMathFunction a0
       -> IO (OMathMat ())
getMat =
  propertyGet "Mat"
              []
              outIUnknown

getNary :: OMathFunction a0
        -> IO (OMathNary ())
getNary =
  propertyGet "Nary"
              []
              outIUnknown

getPhantom :: OMathFunction a0
           -> IO (OMathPhantom ())
getPhantom =
  propertyGet "Phantom"
              []
              outIUnknown

getScrPre :: OMathFunction a0
          -> IO (OMathScrPre ())
getScrPre =
  propertyGet "ScrPre"
              []
              outIUnknown

getRad :: OMathFunction a0
       -> IO (OMathRad ())
getRad =
  propertyGet "Rad"
              []
              outIUnknown

getScrSub :: OMathFunction a0
          -> IO (OMathScrSub ())
getScrSub =
  propertyGet "ScrSub"
              []
              outIUnknown

getScrSubSup :: OMathFunction a0
             -> IO (OMathScrSubSup ())
getScrSubSup =
  propertyGet "ScrSubSup"
              []
              outIUnknown

getScrSup :: OMathFunction a0
          -> IO (OMathScrSup ())
getScrSup =
  propertyGet "ScrSup"
              []
              outIUnknown

getOMath :: OMathFunction a0
         -> IO (OMath ())
getOMath =
  propertyGet "OMath"
              []
              outIDispatch

remove0 :: OMathFunction a0
        -> IO (OMathFunction ())
remove0 =
  function1 "Remove"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathAcc
-- 
-- --------------------------------------------------
data OMathAcc_ a = OMathAcc__ 
type OMathAcc a = IDispatch (OMathAcc_ a)
iidOMathAcc :: IID (OMathAcc ())
iidOMathAcc = mkIID "{F258DE05-C41B-4C33-A778-F0D3F98CEEB3}"

getApplication253 :: OMathAcc a0
                  -> IO (Maybe Application)
getApplication253 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator253 :: OMathAcc a0
              -> IO Int32
getCreator253 =
  propertyGet "Creator"
              []
              outInt32

getParent253 :: OMathAcc a0
             -> IO (IDispatch ())
getParent253 =
  propertyGet "Parent"
              []
              outIDispatch

getE :: OMathAcc a0
     -> IO (OMath ())
getE =
  propertyGet "E"
              []
              outIDispatch

getChar :: OMathAcc a0
        -> IO Int16
getChar =
  propertyGet "Char"
              []
              outInt16

setChar :: Int16
        -> OMathAcc a0
        -> IO ()
setChar prop =
  propertySet "Char"
              [inInt16 prop]

-- --------------------------------------------------
-- 
-- interface OMathBar
-- 
-- --------------------------------------------------
data OMathBar_ a = OMathBar__ 
type OMathBar a = IDispatch (OMathBar_ a)
iidOMathBar :: IID (OMathBar ())
iidOMathBar = mkIID "{F08B45F1-8F23-4156-9D63-1820C0ED229A}"

getApplication254 :: OMathBar a0
                  -> IO (Maybe Application)
getApplication254 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator254 :: OMathBar a0
              -> IO Int32
getCreator254 =
  propertyGet "Creator"
              []
              outInt32

getParent254 :: OMathBar a0
             -> IO (IDispatch ())
getParent254 =
  propertyGet "Parent"
              []
              outIDispatch

getE0 :: OMathBar a0
      -> IO (OMath ())
getE0 =
  propertyGet "E"
              []
              outIDispatch

getBarTop :: OMathBar a0
          -> IO Bool
getBarTop =
  propertyGet "BarTop"
              []
              outBool

setBarTop :: Bool
          -> OMathBar a0
          -> IO ()
setBarTop prop =
  propertySet "BarTop"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathBox
-- 
-- --------------------------------------------------
data OMathBox_ a = OMathBox__ 
type OMathBox a = IDispatch (OMathBox_ a)
iidOMathBox :: IID (OMathBox ())
iidOMathBox = mkIID "{842C37FE-C76F-4B2B-9B60-C408CB5E838E}"

getApplication255 :: OMathBox a0
                  -> IO (Maybe Application)
getApplication255 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator255 :: OMathBox a0
              -> IO Int32
getCreator255 =
  propertyGet "Creator"
              []
              outInt32

getParent255 :: OMathBox a0
             -> IO (IDispatch ())
getParent255 =
  propertyGet "Parent"
              []
              outIDispatch

getE1 :: OMathBox a0
      -> IO (OMath ())
getE1 =
  propertyGet "E"
              []
              outIDispatch

getOpEmu :: OMathBox a0
         -> IO Bool
getOpEmu =
  propertyGet "OpEmu"
              []
              outBool

setOpEmu :: Bool
         -> OMathBox a0
         -> IO ()
setOpEmu prop =
  propertySet "OpEmu"
              [inBool prop]

getNoBreak :: OMathBox a0
           -> IO Bool
getNoBreak =
  propertyGet "NoBreak"
              []
              outBool

setNoBreak :: Bool
           -> OMathBox a0
           -> IO ()
setNoBreak prop =
  propertySet "NoBreak"
              [inBool prop]

getDiff :: OMathBox a0
        -> IO Bool
getDiff =
  propertyGet "Diff"
              []
              outBool

setDiff :: Bool
        -> OMathBox a0
        -> IO ()
setDiff prop =
  propertySet "Diff"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathBorderBox
-- 
-- --------------------------------------------------
data OMathBorderBox_ a = OMathBorderBox__ 
type OMathBorderBox a = IDispatch (OMathBorderBox_ a)
iidOMathBorderBox :: IID (OMathBorderBox ())
iidOMathBorderBox = mkIID "{2503B6EE-0889-44DF-B920-6D6F9659DEA3}"

getApplication256 :: OMathBorderBox a0
                  -> IO (Maybe Application)
getApplication256 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator256 :: OMathBorderBox a0
              -> IO Int32
getCreator256 =
  propertyGet "Creator"
              []
              outInt32

getParent256 :: OMathBorderBox a0
             -> IO (IDispatch ())
getParent256 =
  propertyGet "Parent"
              []
              outIDispatch

getE2 :: OMathBorderBox a0
      -> IO (OMath ())
getE2 =
  propertyGet "E"
              []
              outIDispatch

getHideTop :: OMathBorderBox a0
           -> IO Bool
getHideTop =
  propertyGet "HideTop"
              []
              outBool

setHideTop :: Bool
           -> OMathBorderBox a0
           -> IO ()
setHideTop prop =
  propertySet "HideTop"
              [inBool prop]

getHideBot :: OMathBorderBox a0
           -> IO Bool
getHideBot =
  propertyGet "HideBot"
              []
              outBool

setHideBot :: Bool
           -> OMathBorderBox a0
           -> IO ()
setHideBot prop =
  propertySet "HideBot"
              [inBool prop]

getHideLeft :: OMathBorderBox a0
            -> IO Bool
getHideLeft =
  propertyGet "HideLeft"
              []
              outBool

setHideLeft :: Bool
            -> OMathBorderBox a0
            -> IO ()
setHideLeft prop =
  propertySet "HideLeft"
              [inBool prop]

getHideRight :: OMathBorderBox a0
             -> IO Bool
getHideRight =
  propertyGet "HideRight"
              []
              outBool

setHideRight :: Bool
             -> OMathBorderBox a0
             -> IO ()
setHideRight prop =
  propertySet "HideRight"
              [inBool prop]

getStrikeH :: OMathBorderBox a0
           -> IO Bool
getStrikeH =
  propertyGet "StrikeH"
              []
              outBool

setStrikeH :: Bool
           -> OMathBorderBox a0
           -> IO ()
setStrikeH prop =
  propertySet "StrikeH"
              [inBool prop]

getStrikeV :: OMathBorderBox a0
           -> IO Bool
getStrikeV =
  propertyGet "StrikeV"
              []
              outBool

setStrikeV :: Bool
           -> OMathBorderBox a0
           -> IO ()
setStrikeV prop =
  propertySet "StrikeV"
              [inBool prop]

getStrikeBLTR :: OMathBorderBox a0
              -> IO Bool
getStrikeBLTR =
  propertyGet "StrikeBLTR"
              []
              outBool

setStrikeBLTR :: Bool
              -> OMathBorderBox a0
              -> IO ()
setStrikeBLTR prop =
  propertySet "StrikeBLTR"
              [inBool prop]

getStrikeTLBR :: OMathBorderBox a0
              -> IO Bool
getStrikeTLBR =
  propertyGet "StrikeTLBR"
              []
              outBool

setStrikeTLBR :: Bool
              -> OMathBorderBox a0
              -> IO ()
setStrikeTLBR prop =
  propertySet "StrikeTLBR"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathDelim
-- 
-- --------------------------------------------------
data OMathDelim_ a = OMathDelim__ 
type OMathDelim a = IDispatch (OMathDelim_ a)
iidOMathDelim :: IID (OMathDelim ())
iidOMathDelim = mkIID "{C94688A6-A2A7-4133-A26D-726CD569D5F3}"

getApplication257 :: OMathDelim a0
                  -> IO (Maybe Application)
getApplication257 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator257 :: OMathDelim a0
              -> IO Int32
getCreator257 =
  propertyGet "Creator"
              []
              outInt32

getParent257 :: OMathDelim a0
             -> IO (IDispatch ())
getParent257 =
  propertyGet "Parent"
              []
              outIDispatch

getE3 :: OMathDelim a0
      -> IO (OMathArgs ())
getE3 =
  propertyGet "E"
              []
              outIDispatch

getBegChar :: OMathDelim a0
           -> IO Int16
getBegChar =
  propertyGet "BegChar"
              []
              outInt16

setBegChar :: Int16
           -> OMathDelim a0
           -> IO ()
setBegChar prop =
  propertySet "BegChar"
              [inInt16 prop]

getSepChar :: OMathDelim a0
           -> IO Int16
getSepChar =
  propertyGet "SepChar"
              []
              outInt16

setSepChar :: Int16
           -> OMathDelim a0
           -> IO ()
setSepChar prop =
  propertySet "SepChar"
              [inInt16 prop]

getEndChar :: OMathDelim a0
           -> IO Int16
getEndChar =
  propertyGet "EndChar"
              []
              outInt16

setEndChar :: Int16
           -> OMathDelim a0
           -> IO ()
setEndChar prop =
  propertySet "EndChar"
              [inInt16 prop]

getGrow :: OMathDelim a0
        -> IO Bool
getGrow =
  propertyGet "Grow"
              []
              outBool

setGrow :: Bool
        -> OMathDelim a0
        -> IO ()
setGrow prop =
  propertySet "Grow"
              [inBool prop]

getShape1 :: OMathDelim a0
          -> IO WdOMathShapeType
getShape1 =
  propertyGet "Shape"
              []
              outEnum

setShape :: WdOMathShapeType
         -> OMathDelim a0
         -> IO ()
setShape prop =
  propertySet "Shape"
              [inEnum prop]

getNoLeftChar :: OMathDelim a0
              -> IO Bool
getNoLeftChar =
  propertyGet "NoLeftChar"
              []
              outBool

setNoLeftChar :: Bool
              -> OMathDelim a0
              -> IO ()
setNoLeftChar prop =
  propertySet "NoLeftChar"
              [inBool prop]

getNoRightChar :: OMathDelim a0
               -> IO Bool
getNoRightChar =
  propertyGet "NoRightChar"
              []
              outBool

setNoRightChar :: Bool
               -> OMathDelim a0
               -> IO ()
setNoRightChar prop =
  propertySet "NoRightChar"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathEqArray
-- 
-- --------------------------------------------------
data OMathEqArray_ a = OMathEqArray__ 
type OMathEqArray a = IDispatch (OMathEqArray_ a)
iidOMathEqArray :: IID (OMathEqArray ())
iidOMathEqArray = mkIID "{1F998A61-71C6-44C2-A0F2-1D66169B47CB}"

getApplication258 :: OMathEqArray a0
                  -> IO (Maybe Application)
getApplication258 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator258 :: OMathEqArray a0
              -> IO Int32
getCreator258 =
  propertyGet "Creator"
              []
              outInt32

getParent258 :: OMathEqArray a0
             -> IO (IDispatch ())
getParent258 =
  propertyGet "Parent"
              []
              outIDispatch

getE4 :: OMathEqArray a0
      -> IO (OMathArgs ())
getE4 =
  propertyGet "E"
              []
              outIDispatch

getMaxDist :: OMathEqArray a0
           -> IO Bool
getMaxDist =
  propertyGet "MaxDist"
              []
              outBool

setMaxDist :: Bool
           -> OMathEqArray a0
           -> IO ()
setMaxDist prop =
  propertySet "MaxDist"
              [inBool prop]

getObjDist :: OMathEqArray a0
           -> IO Bool
getObjDist =
  propertyGet "ObjDist"
              []
              outBool

setObjDist :: Bool
           -> OMathEqArray a0
           -> IO ()
setObjDist prop =
  propertySet "ObjDist"
              [inBool prop]

getAlign :: OMathEqArray a0
         -> IO WdOMathVertAlignType
getAlign =
  propertyGet "Align"
              []
              outEnum

setAlign :: WdOMathVertAlignType
         -> OMathEqArray a0
         -> IO ()
setAlign prop =
  propertySet "Align"
              [inEnum prop]

getRowSpacingRule :: OMathEqArray a0
                  -> IO WdOMathSpacingRule
getRowSpacingRule =
  propertyGet "RowSpacingRule"
              []
              outEnum

setRowSpacingRule :: WdOMathSpacingRule
                  -> OMathEqArray a0
                  -> IO ()
setRowSpacingRule prop =
  propertySet "RowSpacingRule"
              [inEnum prop]

getRowSpacing :: OMathEqArray a0
              -> IO Int32
getRowSpacing =
  propertyGet "RowSpacing"
              []
              outInt32

setRowSpacing :: Int32
              -> OMathEqArray a0
              -> IO ()
setRowSpacing prop =
  propertySet "RowSpacing"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface OMathFrac
-- 
-- --------------------------------------------------
data OMathFrac_ a = OMathFrac__ 
type OMathFrac a = IDispatch (OMathFrac_ a)
iidOMathFrac :: IID (OMathFrac ())
iidOMathFrac = mkIID "{50209974-BA32-4A03-8FA6-BAC56CC056FD}"

getApplication259 :: OMathFrac a0
                  -> IO (Maybe Application)
getApplication259 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator259 :: OMathFrac a0
              -> IO Int32
getCreator259 =
  propertyGet "Creator"
              []
              outInt32

getParent259 :: OMathFrac a0
             -> IO (IDispatch ())
getParent259 =
  propertyGet "Parent"
              []
              outIDispatch

getNum :: OMathFrac a0
       -> IO (OMath ())
getNum =
  propertyGet "Num"
              []
              outIDispatch

getDen :: OMathFrac a0
       -> IO (OMath ())
getDen =
  propertyGet "Den"
              []
              outIDispatch

getType32 :: OMathFrac a0
          -> IO WdOMathFracType
getType32 =
  propertyGet "Type"
              []
              outEnum

setType7 :: WdOMathFracType
         -> OMathFrac a0
         -> IO ()
setType7 prop =
  propertySet "Type"
              [inEnum prop]

-- --------------------------------------------------
-- 
-- interface OMathFunc
-- 
-- --------------------------------------------------
data OMathFunc_ a = OMathFunc__ 
type OMathFunc a = IDispatch (OMathFunc_ a)
iidOMathFunc :: IID (OMathFunc ())
iidOMathFunc = mkIID "{0D951ADF-10A6-4C9B-BCD9-0FB8CBAD9A87}"

getApplication260 :: OMathFunc a0
                  -> IO (Maybe Application)
getApplication260 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator260 :: OMathFunc a0
              -> IO Int32
getCreator260 =
  propertyGet "Creator"
              []
              outInt32

getParent260 :: OMathFunc a0
             -> IO (IDispatch ())
getParent260 =
  propertyGet "Parent"
              []
              outIDispatch

getFName :: OMathFunc a0
         -> IO (OMath ())
getFName =
  propertyGet "FName"
              []
              outIDispatch

getE5 :: OMathFunc a0
      -> IO (OMath ())
getE5 =
  propertyGet "E"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathGroupChar
-- 
-- --------------------------------------------------
data OMathGroupChar_ a = OMathGroupChar__ 
type OMathGroupChar a = IDispatch (OMathGroupChar_ a)
iidOMathGroupChar :: IID (OMathGroupChar ())
iidOMathGroupChar = mkIID "{02B17CB4-7D55-4B34-B38B-10381433441F}"

getApplication261 :: OMathGroupChar a0
                  -> IO (Maybe Application)
getApplication261 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator261 :: OMathGroupChar a0
              -> IO Int32
getCreator261 =
  propertyGet "Creator"
              []
              outInt32

getParent261 :: OMathGroupChar a0
             -> IO (IDispatch ())
getParent261 =
  propertyGet "Parent"
              []
              outIDispatch

getE6 :: OMathGroupChar a0
      -> IO (OMath ())
getE6 =
  propertyGet "E"
              []
              outIDispatch

getChar0 :: OMathGroupChar a0
         -> IO Int16
getChar0 =
  propertyGet "Char"
              []
              outInt16

setChar0 :: Int16
         -> OMathGroupChar a0
         -> IO ()
setChar0 prop =
  propertySet "Char"
              [inInt16 prop]

getCharTop :: OMathGroupChar a0
           -> IO Bool
getCharTop =
  propertyGet "CharTop"
              []
              outBool

setCharTop :: Bool
           -> OMathGroupChar a0
           -> IO ()
setCharTop prop =
  propertySet "CharTop"
              [inBool prop]

getAlignTop :: OMathGroupChar a0
            -> IO Bool
getAlignTop =
  propertyGet "AlignTop"
              []
              outBool

setAlignTop :: Bool
            -> OMathGroupChar a0
            -> IO ()
setAlignTop prop =
  propertySet "AlignTop"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathLimLow
-- 
-- --------------------------------------------------
data OMathLimLow_ a = OMathLimLow__ 
type OMathLimLow a = IDispatch (OMathLimLow_ a)
iidOMathLimLow :: IID (OMathLimLow ())
iidOMathLimLow = mkIID "{74DE9576-8E99-4E28-912B-CB30747C60CE}"

getApplication262 :: OMathLimLow a0
                  -> IO (Maybe Application)
getApplication262 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator262 :: OMathLimLow a0
              -> IO Int32
getCreator262 =
  propertyGet "Creator"
              []
              outInt32

getParent262 :: OMathLimLow a0
             -> IO (IDispatch ())
getParent262 =
  propertyGet "Parent"
              []
              outIDispatch

getE7 :: OMathLimLow a0
      -> IO (OMath ())
getE7 =
  propertyGet "E"
              []
              outIDispatch

getLim :: OMathLimLow a0
       -> IO (OMath ())
getLim =
  propertyGet "Lim"
              []
              outIDispatch

toLimUpp :: OMathLimLow a0
         -> IO (OMathFunction ())
toLimUpp =
  function1 "ToLimUpp"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathLimUpp
-- 
-- --------------------------------------------------
data OMathLimUpp_ a = OMathLimUpp__ 
type OMathLimUpp a = IDispatch (OMathLimUpp_ a)
iidOMathLimUpp :: IID (OMathLimUpp ())
iidOMathLimUpp = mkIID "{FC9086C6-0287-4997-B2E1-816C334A22F8}"

getApplication263 :: OMathLimUpp a0
                  -> IO (Maybe Application)
getApplication263 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator263 :: OMathLimUpp a0
              -> IO Int32
getCreator263 =
  propertyGet "Creator"
              []
              outInt32

getParent263 :: OMathLimUpp a0
             -> IO (IDispatch ())
getParent263 =
  propertyGet "Parent"
              []
              outIDispatch

getE8 :: OMathLimUpp a0
      -> IO (OMath ())
getE8 =
  propertyGet "E"
              []
              outIDispatch

getLim0 :: OMathLimUpp a0
        -> IO (OMath ())
getLim0 =
  propertyGet "Lim"
              []
              outIDispatch

toLimLow :: OMathLimUpp a0
         -> IO (OMathFunction ())
toLimLow =
  function1 "ToLimLow"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathMat
-- 
-- --------------------------------------------------
data OMathMat_ a = OMathMat__ 
type OMathMat a = IDispatch (OMathMat_ a)
iidOMathMat :: IID (OMathMat ())
iidOMathMat = mkIID "{3E061A7E-67AD-4EAA-BC1E-55057D5E596F}"

getApplication264 :: OMathMat a0
                  -> IO (Maybe Application)
getApplication264 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator264 :: OMathMat a0
              -> IO Int32
getCreator264 =
  propertyGet "Creator"
              []
              outInt32

getParent264 :: OMathMat a0
             -> IO (IDispatch ())
getParent264 =
  propertyGet "Parent"
              []
              outIDispatch

getRows2 :: OMathMat a0
         -> IO (OMathMatRows ())
getRows2 =
  propertyGet "Rows"
              []
              outIUnknown

getCols :: OMathMat a0
        -> IO (OMathMatCols ())
getCols =
  propertyGet "Cols"
              []
              outIUnknown

getCell :: Int32
        -> Int32
        -> OMathMat a0
        -> IO (OMath ())
getCell row col =
  propertyGet "Cell"
              [ inInt32 row
              , inInt32 col
              ]
              outIDispatch

getAlign0 :: OMathMat a0
          -> IO WdOMathVertAlignType
getAlign0 =
  propertyGet "Align"
              []
              outEnum

setAlign0 :: WdOMathVertAlignType
          -> OMathMat a0
          -> IO ()
setAlign0 prop =
  propertySet "Align"
              [inEnum prop]

getPlcHoldHidden :: OMathMat a0
                 -> IO Bool
getPlcHoldHidden =
  propertyGet "PlcHoldHidden"
              []
              outBool

setPlcHoldHidden :: Bool
                 -> OMathMat a0
                 -> IO ()
setPlcHoldHidden prop =
  propertySet "PlcHoldHidden"
              [inBool prop]

getRowSpacingRule0 :: OMathMat a0
                   -> IO WdOMathSpacingRule
getRowSpacingRule0 =
  propertyGet "RowSpacingRule"
              []
              outEnum

setRowSpacingRule0 :: WdOMathSpacingRule
                   -> OMathMat a0
                   -> IO ()
setRowSpacingRule0 prop =
  propertySet "RowSpacingRule"
              [inEnum prop]

getRowSpacing0 :: OMathMat a0
               -> IO Int32
getRowSpacing0 =
  propertyGet "RowSpacing"
              []
              outInt32

setRowSpacing0 :: Int32
               -> OMathMat a0
               -> IO ()
setRowSpacing0 prop =
  propertySet "RowSpacing"
              [inInt32 prop]

getColSpacing :: OMathMat a0
              -> IO Int32
getColSpacing =
  propertyGet "ColSpacing"
              []
              outInt32

setColSpacing :: Int32
              -> OMathMat a0
              -> IO ()
setColSpacing prop =
  propertySet "ColSpacing"
              [inInt32 prop]

getColGapRule :: OMathMat a0
              -> IO WdOMathSpacingRule
getColGapRule =
  propertyGet "ColGapRule"
              []
              outEnum

setColGapRule :: WdOMathSpacingRule
              -> OMathMat a0
              -> IO ()
setColGapRule prop =
  propertySet "ColGapRule"
              [inEnum prop]

getColGap :: OMathMat a0
          -> IO Int32
getColGap =
  propertyGet "ColGap"
              []
              outInt32

setColGap :: Int32
          -> OMathMat a0
          -> IO ()
setColGap prop =
  propertySet "ColGap"
              [inInt32 prop]

-- --------------------------------------------------
-- 
-- interface OMathMatRows
-- 
-- --------------------------------------------------
data OMathMatRows_ a = OMathMatRows__ 
type OMathMatRows a = IDispatch (OMathMatRows_ a)
iidOMathMatRows :: IID (OMathMatRows ())
iidOMathMatRows = mkIID "{1B426348-607D-433C-9216-C5D2BF0EF31F}"

getNewEnum101 :: OMathMatRows a0
              -> IO (IUnknown ())
getNewEnum101 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication265 :: OMathMatRows a0
                  -> IO (Maybe Application)
getApplication265 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator265 :: OMathMatRows a0
              -> IO Int32
getCreator265 =
  propertyGet "Creator"
              []
              outInt32

getParent265 :: OMathMatRows a0
             -> IO (IDispatch ())
getParent265 =
  propertyGet "Parent"
              []
              outIDispatch

getCount103 :: OMathMatRows a0
            -> IO Int32
getCount103 =
  propertyGet "Count"
              []
              outInt32

item103 :: Int32
        -> OMathMatRows a0
        -> IO (OMathMatRow ())
item103 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add57 :: (Variant a1)
      => a1
      -> OMathMatRows a0
      -> IO (OMathMatRow ())
add57 beforeRow =
  function1 "Add"
            [inVariant beforeRow]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathMatCols
-- 
-- --------------------------------------------------
data OMathMatCols_ a = OMathMatCols__ 
type OMathMatCols a = IDispatch (OMathMatCols_ a)
iidOMathMatCols :: IID (OMathMatCols ())
iidOMathMatCols = mkIID "{EFC71F9C-7F42-4CD4-A7A7-970D7A48CD27}"

getNewEnum102 :: OMathMatCols a0
              -> IO (IUnknown ())
getNewEnum102 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication266 :: OMathMatCols a0
                  -> IO (Maybe Application)
getApplication266 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator266 :: OMathMatCols a0
              -> IO Int32
getCreator266 =
  propertyGet "Creator"
              []
              outInt32

getParent266 :: OMathMatCols a0
             -> IO (IDispatch ())
getParent266 =
  propertyGet "Parent"
              []
              outIDispatch

getCount104 :: OMathMatCols a0
            -> IO Int32
getCount104 =
  propertyGet "Count"
              []
              outInt32

item104 :: Int32
        -> OMathMatCols a0
        -> IO (OMathMatCol ())
item104 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add58 :: (Variant a1)
      => a1
      -> OMathMatCols a0
      -> IO (OMathMatCol ())
add58 beforeCol =
  function1 "Add"
            [inVariant beforeCol]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathMatRow
-- 
-- --------------------------------------------------
data OMathMatRow_ a = OMathMatRow__ 
type OMathMatRow a = IDispatch (OMathMatRow_ a)
iidOMathMatRow :: IID (OMathMatRow ())
iidOMathMatRow = mkIID "{5DAA8BB6-054E-48F6-BEAC-EAAD02BE0CC7}"

getApplication267 :: OMathMatRow a0
                  -> IO (Maybe Application)
getApplication267 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator267 :: OMathMatRow a0
              -> IO Int32
getCreator267 =
  propertyGet "Creator"
              []
              outInt32

getParent267 :: OMathMatRow a0
             -> IO (IDispatch ())
getParent267 =
  propertyGet "Parent"
              []
              outIDispatch

getArgs0 :: OMathMatRow a0
         -> IO (OMathArgs ())
getArgs0 =
  propertyGet "Args"
              []
              outIDispatch

getRowIndex0 :: OMathMatRow a0
             -> IO Int32
getRowIndex0 =
  propertyGet "RowIndex"
              []
              outInt32

delete60 :: OMathMatRow a0
         -> IO ()
delete60 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface OMathMatCol
-- 
-- --------------------------------------------------
data OMathMatCol_ a = OMathMatCol__ 
type OMathMatCol a = IDispatch (OMathMatCol_ a)
iidOMathMatCol :: IID (OMathMatCol ())
iidOMathMatCol = mkIID "{CAE36175-3818-4C60-BCBF-0645D51EB33B}"

getApplication268 :: OMathMatCol a0
                  -> IO (Maybe Application)
getApplication268 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator268 :: OMathMatCol a0
              -> IO Int32
getCreator268 =
  propertyGet "Creator"
              []
              outInt32

getParent268 :: OMathMatCol a0
             -> IO (IDispatch ())
getParent268 =
  propertyGet "Parent"
              []
              outIDispatch

getArgs1 :: OMathMatCol a0
         -> IO (OMathArgs ())
getArgs1 =
  propertyGet "Args"
              []
              outIDispatch

getColIndex :: OMathMatCol a0
            -> IO Int32
getColIndex =
  propertyGet "ColIndex"
              []
              outInt32

getAlign1 :: OMathMatCol a0
          -> IO WdOMathHorizAlignType
getAlign1 =
  propertyGet "Align"
              []
              outEnum

setAlign1 :: WdOMathHorizAlignType
          -> OMathMatCol a0
          -> IO ()
setAlign1 prop =
  propertySet "Align"
              [inEnum prop]

delete61 :: OMathMatCol a0
         -> IO ()
delete61 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface OMathNary
-- 
-- --------------------------------------------------
data OMathNary_ a = OMathNary__ 
type OMathNary a = IDispatch (OMathNary_ a)
iidOMathNary :: IID (OMathNary ())
iidOMathNary = mkIID "{CEBD4184-4E6D-4FC6-A42D-2142B1B76AF5}"

getApplication269 :: OMathNary a0
                  -> IO (Maybe Application)
getApplication269 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator269 :: OMathNary a0
              -> IO Int32
getCreator269 =
  propertyGet "Creator"
              []
              outInt32

getParent269 :: OMathNary a0
             -> IO (IDispatch ())
getParent269 =
  propertyGet "Parent"
              []
              outIDispatch

getSub :: OMathNary a0
       -> IO (OMath ())
getSub =
  propertyGet "Sub"
              []
              outIDispatch

getSup :: OMathNary a0
       -> IO (OMath ())
getSup =
  propertyGet "Sup"
              []
              outIDispatch

getE9 :: OMathNary a0
      -> IO (OMath ())
getE9 =
  propertyGet "E"
              []
              outIDispatch

getChar1 :: OMathNary a0
         -> IO Int16
getChar1 =
  propertyGet "Char"
              []
              outInt16

setChar1 :: Int16
         -> OMathNary a0
         -> IO ()
setChar1 prop =
  propertySet "Char"
              [inInt16 prop]

getGrow0 :: OMathNary a0
         -> IO Bool
getGrow0 =
  propertyGet "Grow"
              []
              outBool

setGrow0 :: Bool
         -> OMathNary a0
         -> IO ()
setGrow0 prop =
  propertySet "Grow"
              [inBool prop]

getSubSupLim :: OMathNary a0
             -> IO Bool
getSubSupLim =
  propertyGet "SubSupLim"
              []
              outBool

setSubSupLim :: Bool
             -> OMathNary a0
             -> IO ()
setSubSupLim prop =
  propertySet "SubSupLim"
              [inBool prop]

getHideSub :: OMathNary a0
           -> IO Bool
getHideSub =
  propertyGet "HideSub"
              []
              outBool

setHideSub :: Bool
           -> OMathNary a0
           -> IO ()
setHideSub prop =
  propertySet "HideSub"
              [inBool prop]

getHideSup :: OMathNary a0
           -> IO Bool
getHideSup =
  propertyGet "HideSup"
              []
              outBool

setHideSup :: Bool
           -> OMathNary a0
           -> IO ()
setHideSup prop =
  propertySet "HideSup"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathPhantom
-- 
-- --------------------------------------------------
data OMathPhantom_ a = OMathPhantom__ 
type OMathPhantom a = IDispatch (OMathPhantom_ a)
iidOMathPhantom :: IID (OMathPhantom ())
iidOMathPhantom = mkIID "{DB77D541-85C3-42E8-8649-AFBD7CF87866}"

getApplication270 :: OMathPhantom a0
                  -> IO (Maybe Application)
getApplication270 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator270 :: OMathPhantom a0
              -> IO Int32
getCreator270 =
  propertyGet "Creator"
              []
              outInt32

getParent270 :: OMathPhantom a0
             -> IO (IDispatch ())
getParent270 =
  propertyGet "Parent"
              []
              outIDispatch

getE10 :: OMathPhantom a0
       -> IO (OMath ())
getE10 =
  propertyGet "E"
              []
              outIDispatch

getShow :: OMathPhantom a0
        -> IO Bool
getShow =
  propertyGet "Show"
              []
              outBool

setShow :: Bool
        -> OMathPhantom a0
        -> IO ()
setShow prop =
  propertySet "Show"
              [inBool prop]

getZeroWid :: OMathPhantom a0
           -> IO Bool
getZeroWid =
  propertyGet "ZeroWid"
              []
              outBool

setZeroWid :: Bool
           -> OMathPhantom a0
           -> IO ()
setZeroWid prop =
  propertySet "ZeroWid"
              [inBool prop]

getZeroAsc :: OMathPhantom a0
           -> IO Bool
getZeroAsc =
  propertyGet "ZeroAsc"
              []
              outBool

setZeroAsc :: Bool
           -> OMathPhantom a0
           -> IO ()
setZeroAsc prop =
  propertySet "ZeroAsc"
              [inBool prop]

getZeroDesc :: OMathPhantom a0
            -> IO Bool
getZeroDesc =
  propertyGet "ZeroDesc"
              []
              outBool

setZeroDesc :: Bool
            -> OMathPhantom a0
            -> IO ()
setZeroDesc prop =
  propertySet "ZeroDesc"
              [inBool prop]

getTransp :: OMathPhantom a0
          -> IO Bool
getTransp =
  propertyGet "Transp"
              []
              outBool

setTransp :: Bool
          -> OMathPhantom a0
          -> IO ()
setTransp prop =
  propertySet "Transp"
              [inBool prop]

getSmash :: OMathPhantom a0
         -> IO Bool
getSmash =
  propertyGet "Smash"
              []
              outBool

setSmash :: Bool
         -> OMathPhantom a0
         -> IO ()
setSmash prop =
  propertySet "Smash"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathScrPre
-- 
-- --------------------------------------------------
data OMathScrPre_ a = OMathScrPre__ 
type OMathScrPre a = IDispatch (OMathScrPre_ a)
iidOMathScrPre :: IID (OMathScrPre ())
iidOMathScrPre = mkIID "{AFAF0C0E-8603-40F6-8FD1-42726CAC21E3}"

getApplication271 :: OMathScrPre a0
                  -> IO (Maybe Application)
getApplication271 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator271 :: OMathScrPre a0
              -> IO Int32
getCreator271 =
  propertyGet "Creator"
              []
              outInt32

getParent271 :: OMathScrPre a0
             -> IO (IDispatch ())
getParent271 =
  propertyGet "Parent"
              []
              outIDispatch

getSub0 :: OMathScrPre a0
        -> IO (OMath ())
getSub0 =
  propertyGet "Sub"
              []
              outIDispatch

getSup0 :: OMathScrPre a0
        -> IO (OMath ())
getSup0 =
  propertyGet "Sup"
              []
              outIDispatch

getE11 :: OMathScrPre a0
       -> IO (OMath ())
getE11 =
  propertyGet "E"
              []
              outIDispatch

toScrSubSup :: OMathScrPre a0
            -> IO (OMathFunction ())
toScrSubSup =
  function1 "ToScrSubSup"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathRad
-- 
-- --------------------------------------------------
data OMathRad_ a = OMathRad__ 
type OMathRad a = IDispatch (OMathRad_ a)
iidOMathRad :: IID (OMathRad ())
iidOMathRad = mkIID "{67A7EEC5-285D-4024-B071-BD6B33B88547}"

getApplication272 :: OMathRad a0
                  -> IO (Maybe Application)
getApplication272 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator272 :: OMathRad a0
              -> IO Int32
getCreator272 =
  propertyGet "Creator"
              []
              outInt32

getParent272 :: OMathRad a0
             -> IO (IDispatch ())
getParent272 =
  propertyGet "Parent"
              []
              outIDispatch

getDeg :: OMathRad a0
       -> IO (OMath ())
getDeg =
  propertyGet "Deg"
              []
              outIDispatch

getE12 :: OMathRad a0
       -> IO (OMath ())
getE12 =
  propertyGet "E"
              []
              outIDispatch

getHideDeg :: OMathRad a0
           -> IO Bool
getHideDeg =
  propertyGet "HideDeg"
              []
              outBool

setHideDeg :: Bool
           -> OMathRad a0
           -> IO ()
setHideDeg prop =
  propertySet "HideDeg"
              [inBool prop]

-- --------------------------------------------------
-- 
-- interface OMathScrSub
-- 
-- --------------------------------------------------
data OMathScrSub_ a = OMathScrSub__ 
type OMathScrSub a = IDispatch (OMathScrSub_ a)
iidOMathScrSub :: IID (OMathScrSub ())
iidOMathScrSub = mkIID "{98DFBD12-96CB-4F07-90EA-749FF1D6B89D}"

getApplication273 :: OMathScrSub a0
                  -> IO (Maybe Application)
getApplication273 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator273 :: OMathScrSub a0
              -> IO Int32
getCreator273 =
  propertyGet "Creator"
              []
              outInt32

getParent273 :: OMathScrSub a0
             -> IO (IDispatch ())
getParent273 =
  propertyGet "Parent"
              []
              outIDispatch

getE13 :: OMathScrSub a0
       -> IO (OMath ())
getE13 =
  propertyGet "E"
              []
              outIDispatch

getSub1 :: OMathScrSub a0
        -> IO (OMath ())
getSub1 =
  propertyGet "Sub"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathScrSubSup
-- 
-- --------------------------------------------------
data OMathScrSubSup_ a = OMathScrSubSup__ 
type OMathScrSubSup a = IDispatch (OMathScrSubSup_ a)
iidOMathScrSubSup :: IID (OMathScrSubSup ())
iidOMathScrSubSup = mkIID "{DC489AD4-23C4-4F4B-990F-45A51C7C0C4F}"

getApplication274 :: OMathScrSubSup a0
                  -> IO (Maybe Application)
getApplication274 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator274 :: OMathScrSubSup a0
              -> IO Int32
getCreator274 =
  propertyGet "Creator"
              []
              outInt32

getParent274 :: OMathScrSubSup a0
             -> IO (IDispatch ())
getParent274 =
  propertyGet "Parent"
              []
              outIDispatch

getE14 :: OMathScrSubSup a0
       -> IO (OMath ())
getE14 =
  propertyGet "E"
              []
              outIDispatch

getSub2 :: OMathScrSubSup a0
        -> IO (OMath ())
getSub2 =
  propertyGet "Sub"
              []
              outIDispatch

getSup1 :: OMathScrSubSup a0
        -> IO (OMath ())
getSup1 =
  propertyGet "Sup"
              []
              outIDispatch

getAlignScripts :: OMathScrSubSup a0
                -> IO Bool
getAlignScripts =
  propertyGet "AlignScripts"
              []
              outBool

setAlignScripts :: Bool
                -> OMathScrSubSup a0
                -> IO ()
setAlignScripts prop =
  propertySet "AlignScripts"
              [inBool prop]

removeSub :: OMathScrSubSup a0
          -> IO (OMathFunction ())
removeSub =
  function1 "RemoveSub"
            []
            outIDispatch

removeSup :: OMathScrSubSup a0
          -> IO (OMathFunction ())
removeSup =
  function1 "RemoveSup"
            []
            outIDispatch

toScrPre :: OMathScrSubSup a0
         -> IO (OMathFunction ())
toScrPre =
  function1 "ToScrPre"
            []
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathScrSup
-- 
-- --------------------------------------------------
data OMathScrSup_ a = OMathScrSup__ 
type OMathScrSup a = IDispatch (OMathScrSup_ a)
iidOMathScrSup :: IID (OMathScrSup ())
iidOMathScrSup = mkIID "{D0A95726-678A-4B9D-8103-1E2B86735AE7}"

getApplication275 :: OMathScrSup a0
                  -> IO (Maybe Application)
getApplication275 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator275 :: OMathScrSup a0
              -> IO Int32
getCreator275 =
  propertyGet "Creator"
              []
              outInt32

getParent275 :: OMathScrSup a0
             -> IO (IDispatch ())
getParent275 =
  propertyGet "Parent"
              []
              outIDispatch

getE15 :: OMathScrSup a0
       -> IO (OMath ())
getE15 =
  propertyGet "E"
              []
              outIDispatch

getSup2 :: OMathScrSup a0
        -> IO (OMath ())
getSup2 =
  propertyGet "Sup"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathAutoCorrect
-- 
-- --------------------------------------------------
data OMathAutoCorrect_ a = OMathAutoCorrect__ 
type OMathAutoCorrect a = IDispatch (OMathAutoCorrect_ a)
iidOMathAutoCorrect :: IID (OMathAutoCorrect ())
iidOMathAutoCorrect =
  mkIID "{6F9D1F68-06F7-49EF-8902-185E54EB5E87}"

getApplication276 :: OMathAutoCorrect a0
                  -> IO (Maybe Application)
getApplication276 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator276 :: OMathAutoCorrect a0
              -> IO Int32
getCreator276 =
  propertyGet "Creator"
              []
              outInt32

getParent276 :: OMathAutoCorrect a0
             -> IO (IDispatch ())
getParent276 =
  propertyGet "Parent"
              []
              outIDispatch

getReplaceText0 :: OMathAutoCorrect a0
                -> IO Bool
getReplaceText0 =
  propertyGet "ReplaceText"
              []
              outBool

setReplaceText0 :: Bool
                -> OMathAutoCorrect a0
                -> IO ()
setReplaceText0 prop =
  propertySet "ReplaceText"
              [inBool prop]

getUseOutsideOMath :: OMathAutoCorrect a0
                   -> IO Bool
getUseOutsideOMath =
  propertyGet "UseOutsideOMath"
              []
              outBool

setUseOutsideOMath :: Bool
                   -> OMathAutoCorrect a0
                   -> IO ()
setUseOutsideOMath prop =
  propertySet "UseOutsideOMath"
              [inBool prop]

getEntries0 :: OMathAutoCorrect a0
            -> IO (OMathAutoCorrectEntries ())
getEntries0 =
  propertyGet "Entries"
              []
              outIUnknown

getFunctions0 :: OMathAutoCorrect a0
              -> IO (OMathRecognizedFunctions ())
getFunctions0 =
  propertyGet "Functions"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathAutoCorrectEntries
-- 
-- --------------------------------------------------
data OMathAutoCorrectEntries_ a = OMathAutoCorrectEntries__ 
type OMathAutoCorrectEntries a = IDispatch (OMathAutoCorrectEntries_ a)
iidOMathAutoCorrectEntries :: IID (OMathAutoCorrectEntries ())
iidOMathAutoCorrectEntries =
  mkIID "{18CD5EC8-8B7B-42C8-992A-2A407468642C}"

getApplication277 :: OMathAutoCorrectEntries a0
                  -> IO (Maybe Application)
getApplication277 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator277 :: OMathAutoCorrectEntries a0
              -> IO Int32
getCreator277 =
  propertyGet "Creator"
              []
              outInt32

getParent277 :: OMathAutoCorrectEntries a0
             -> IO (IDispatch ())
getParent277 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum103 :: OMathAutoCorrectEntries a0
              -> IO (IUnknown ())
getNewEnum103 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount105 :: OMathAutoCorrectEntries a0
            -> IO Int32
getCount105 =
  propertyGet "Count"
              []
              outInt32

item105 :: (Variant a1)
        => a1
        -> OMathAutoCorrectEntries a0
        -> IO (OMathAutoCorrectEntry ())
item105 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add59 :: String
      -> String
      -> OMathAutoCorrectEntries a0
      -> IO (OMathAutoCorrectEntry ())
add59 name value =
  function1 "Add"
            [ inString name
            , inString value
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathAutoCorrectEntry
-- 
-- --------------------------------------------------
data OMathAutoCorrectEntry_ a = OMathAutoCorrectEntry__ 
type OMathAutoCorrectEntry a = IDispatch (OMathAutoCorrectEntry_ a)
iidOMathAutoCorrectEntry :: IID (OMathAutoCorrectEntry ())
iidOMathAutoCorrectEntry =
  mkIID "{D8779F01-4869-4403-B334-D60C5F9C9175}"

getApplication278 :: OMathAutoCorrectEntry a0
                  -> IO (Maybe Application)
getApplication278 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator278 :: OMathAutoCorrectEntry a0
              -> IO Int32
getCreator278 =
  propertyGet "Creator"
              []
              outInt32

getParent278 :: OMathAutoCorrectEntry a0
             -> IO (IDispatch ())
getParent278 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex31 :: OMathAutoCorrectEntry a0
           -> IO Int32
getIndex31 =
  propertyGet "Index"
              []
              outInt32

getName44 :: OMathAutoCorrectEntry a0
          -> IO String
getName44 =
  propertyGet "Name"
              []
              outString

setName12 :: String
          -> OMathAutoCorrectEntry a0
          -> IO ()
setName12 prop =
  propertySet "Name"
              [inString prop]

getValue8 :: OMathAutoCorrectEntry a0
          -> IO String
getValue8 =
  propertyGet "Value"
              []
              outString

setValue5 :: String
          -> OMathAutoCorrectEntry a0
          -> IO ()
setValue5 prop =
  propertySet "Value"
              [inString prop]

delete62 :: OMathAutoCorrectEntry a0
         -> IO ()
delete62 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface OMathRecognizedFunctions
-- 
-- --------------------------------------------------
data OMathRecognizedFunctions_ a = OMathRecognizedFunctions__ 
type OMathRecognizedFunctions a = IDispatch (OMathRecognizedFunctions_ a)
iidOMathRecognizedFunctions :: IID (OMathRecognizedFunctions ())
iidOMathRecognizedFunctions =
  mkIID "{44FEE887-6600-41AB-95A5-DE33C605116C}"

getApplication279 :: OMathRecognizedFunctions a0
                  -> IO (Maybe Application)
getApplication279 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator279 :: OMathRecognizedFunctions a0
              -> IO Int32
getCreator279 =
  propertyGet "Creator"
              []
              outInt32

getParent279 :: OMathRecognizedFunctions a0
             -> IO (IDispatch ())
getParent279 =
  propertyGet "Parent"
              []
              outIDispatch

getNewEnum104 :: OMathRecognizedFunctions a0
              -> IO (IUnknown ())
getNewEnum104 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getCount106 :: OMathRecognizedFunctions a0
            -> IO Int32
getCount106 =
  propertyGet "Count"
              []
              outInt32

item106 :: (Variant a1)
        => a1
        -> OMathRecognizedFunctions a0
        -> IO (OMathRecognizedFunction ())
item106 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add60 :: String
      -> OMathRecognizedFunctions a0
      -> IO (OMathRecognizedFunction ())
add60 name =
  function1 "Add"
            [inString name]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathRecognizedFunction
-- 
-- --------------------------------------------------
data OMathRecognizedFunction_ a = OMathRecognizedFunction__ 
type OMathRecognizedFunction a = IDispatch (OMathRecognizedFunction_ a)
iidOMathRecognizedFunction :: IID (OMathRecognizedFunction ())
iidOMathRecognizedFunction =
  mkIID "{5C04BD93-2F3F-4668-918D-9738EC901039}"

getApplication280 :: OMathRecognizedFunction a0
                  -> IO (Maybe Application)
getApplication280 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator280 :: OMathRecognizedFunction a0
              -> IO Int32
getCreator280 =
  propertyGet "Creator"
              []
              outInt32

getParent280 :: OMathRecognizedFunction a0
             -> IO (IDispatch ())
getParent280 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex32 :: OMathRecognizedFunction a0
           -> IO Int32
getIndex32 =
  propertyGet "Index"
              []
              outInt32

getName45 :: OMathRecognizedFunction a0
          -> IO String
getName45 =
  propertyGet "Name"
              []
              outString

delete63 :: OMathRecognizedFunction a0
         -> IO ()
delete63 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface ContentControls
-- 
-- --------------------------------------------------
data ContentControls_ a = ContentControls__ 
type ContentControls a = IDispatch (ContentControls_ a)
iidContentControls :: IID (ContentControls ())
iidContentControls = mkIID "{804CD967-F83B-432D-9446-C61A45CFEFF0}"

getNewEnum105 :: ContentControls a0
              -> IO (IUnknown ())
getNewEnum105 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication281 :: ContentControls a0
                  -> IO (Maybe Application)
getApplication281 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator281 :: ContentControls a0
              -> IO Int32
getCreator281 =
  propertyGet "Creator"
              []
              outInt32

getParent281 :: ContentControls a0
             -> IO (IDispatch ())
getParent281 =
  propertyGet "Parent"
              []
              outIDispatch

getCount107 :: ContentControls a0
            -> IO Int32
getCount107 =
  propertyGet "Count"
              []
              outInt32

item107 :: (Variant a1)
        => a1
        -> ContentControls a0
        -> IO (ContentControl ())
item107 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add61 :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> ContentControls a0
      -> IO (ContentControl ())
add61 type0 range3 =
  function1 "Add"
            [ inDefaultValue (inInt32 0) inVariant type0
            , inVariant range3
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ContentControl
-- 
-- --------------------------------------------------
data ContentControl_ a = ContentControl__ 
type ContentControl a = IDispatch (ContentControl_ a)
iidContentControl :: IID (ContentControl ())
iidContentControl = mkIID "{EE95AFE3-3026-4172-B078-0E79DAB5CC3D}"

getApplication282 :: ContentControl a0
                  -> IO (Maybe Application)
getApplication282 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator282 :: ContentControl a0
              -> IO Int32
getCreator282 =
  propertyGet "Creator"
              []
              outInt32

getParent282 :: ContentControl a0
             -> IO (IDispatch ())
getParent282 =
  propertyGet "Parent"
              []
              outIDispatch

getRange30 :: ContentControl a0
           -> IO (Range ())
getRange30 =
  propertyGet "Range"
              []
              outIDispatch

getLockContentControl :: ContentControl a0
                      -> IO Bool
getLockContentControl =
  propertyGet "LockContentControl"
              []
              outBool

setLockContentControl :: Bool
                      -> ContentControl a0
                      -> IO ()
setLockContentControl prop =
  propertySet "LockContentControl"
              [inBool prop]

getLockContents :: ContentControl a0
                -> IO Bool
getLockContents =
  propertyGet "LockContents"
              []
              outBool

setLockContents :: Bool
                -> ContentControl a0
                -> IO ()
setLockContents prop =
  propertySet "LockContents"
              [inBool prop]

getXMLMapping :: ContentControl a0
              -> IO (XMLMapping ())
getXMLMapping =
  propertyGet "XMLMapping"
              []
              outIUnknown

getType33 :: ContentControl a0
          -> IO WdContentControlType
getType33 =
  propertyGet "Type"
              []
              outEnum

setType8 :: WdContentControlType
         -> ContentControl a0
         -> IO ()
setType8 prop =
  propertySet "Type"
              [inEnum prop]

copy9 :: ContentControl a0
      -> IO ()
copy9 =
  method0 "Copy"
          []

cut8 :: ContentControl a0
     -> IO ()
cut8 =
  method0 "Cut"
          []

delete64 :: (Variant a1)
         => a1
         -> ContentControl a0
         -> IO ()
delete64 deleteContents =
  method0 "Delete"
          [inDefaultValue (inInt32 0) inVariant deleteContents]

getDropdownListEntries :: ContentControl a0
                       -> IO (ContentControlListEntries ())
getDropdownListEntries =
  propertyGet "DropdownListEntries"
              []
              outIUnknown

getPlaceholderText0 :: ContentControl a0
                    -> IO (BuildingBlock ())
getPlaceholderText0 =
  propertyGet "PlaceholderText"
              []
              outIUnknown

setPlaceholderText0 :: (Variant a1, Variant a2, Variant a3)
                    => a1
                    -> a2
                    -> a3
                    -> ContentControl a0
                    -> IO ()
setPlaceholderText0 buildingBlock range3 text =
  method0 "SetPlaceholderText"
          [ inDefaultValue (inInt32 0) inVariant buildingBlock
          , inDefaultValue (inInt32 0) inVariant range3
          , inDefaultValue (inVariant "") inVariant text
          ]

getTitle0 :: ContentControl a0
          -> IO String
getTitle0 =
  propertyGet "Title"
              []
              outString

setTitle0 :: String
          -> ContentControl a0
          -> IO ()
setTitle0 prop =
  propertySet "Title"
              [inString prop]

getDateDisplayFormat :: ContentControl a0
                     -> IO String
getDateDisplayFormat =
  propertyGet "DateDisplayFormat"
              []
              outString

setDateDisplayFormat :: String
                     -> ContentControl a0
                     -> IO ()
setDateDisplayFormat prop =
  propertySet "DateDisplayFormat"
              [inString prop]

getMultiLine :: ContentControl a0
             -> IO Bool
getMultiLine =
  propertyGet "MultiLine"
              []
              outBool

setMultiLine :: Bool
             -> ContentControl a0
             -> IO ()
setMultiLine prop =
  propertySet "MultiLine"
              [inBool prop]

getParentContentControl1 :: ContentControl a0
                         -> IO (ContentControl ())
getParentContentControl1 =
  propertyGet "ParentContentControl"
              []
              outIDispatch

getTemporary :: ContentControl a0
             -> IO Bool
getTemporary =
  propertyGet "Temporary"
              []
              outBool

setTemporary :: Bool
             -> ContentControl a0
             -> IO ()
setTemporary prop =
  propertySet "Temporary"
              [inBool prop]

getID9 :: ContentControl a0
       -> IO String
getID9 =
  propertyGet "ID"
              []
              outString

getShowingPlaceholderText :: ContentControl a0
                          -> IO Bool
getShowingPlaceholderText =
  propertyGet "ShowingPlaceholderText"
              []
              outBool

getDateStorageFormat :: ContentControl a0
                     -> IO WdContentControlDateStorageFormat
getDateStorageFormat =
  propertyGet "DateStorageFormat"
              []
              outEnum

setDateStorageFormat :: WdContentControlDateStorageFormat
                     -> ContentControl a0
                     -> IO ()
setDateStorageFormat prop =
  propertySet "DateStorageFormat"
              [inEnum prop]

getBuildingBlockType :: ContentControl a0
                     -> IO WdBuildingBlockTypes
getBuildingBlockType =
  propertyGet "BuildingBlockType"
              []
              outEnum

setBuildingBlockType :: WdBuildingBlockTypes
                     -> ContentControl a0
                     -> IO ()
setBuildingBlockType prop =
  propertySet "BuildingBlockType"
              [inEnum prop]

getBuildingBlockCategory :: ContentControl a0
                         -> IO String
getBuildingBlockCategory =
  propertyGet "BuildingBlockCategory"
              []
              outString

setBuildingBlockCategory :: String
                         -> ContentControl a0
                         -> IO ()
setBuildingBlockCategory prop =
  propertySet "BuildingBlockCategory"
              [inString prop]

getDateDisplayLocale :: ContentControl a0
                     -> IO WdLanguageID
getDateDisplayLocale =
  propertyGet "DateDisplayLocale"
              []
              outEnum

setDateDisplayLocale :: WdLanguageID
                     -> ContentControl a0
                     -> IO ()
setDateDisplayLocale prop =
  propertySet "DateDisplayLocale"
              [inEnum prop]

ungroup1 :: ContentControl a0
         -> IO ()
ungroup1 =
  method0 "Ungroup"
          []

getDefaultTextStyle :: (Variant a1)
                    => ContentControl a0
                    -> IO a1
getDefaultTextStyle =
  propertyGet "DefaultTextStyle"
              []
              outVariant

setDefaultTextStyle :: (Variant a1)
                    => a1
                    -> ContentControl a0
                    -> IO ()
setDefaultTextStyle prop =
  propertySet "DefaultTextStyle"
              [inVariant prop]

getDateCalendarType :: ContentControl a0
                    -> IO WdCalendarType
getDateCalendarType =
  propertyGet "DateCalendarType"
              []
              outEnum

setDateCalendarType :: WdCalendarType
                    -> ContentControl a0
                    -> IO ()
setDateCalendarType prop =
  propertySet "DateCalendarType"
              [inEnum prop]

getTag0 :: ContentControl a0
        -> IO String
getTag0 =
  propertyGet "Tag"
              []
              outString

setTag :: String
       -> ContentControl a0
       -> IO ()
setTag prop =
  propertySet "Tag"
              [inString prop]

-- --------------------------------------------------
-- 
-- interface XMLMapping
-- 
-- --------------------------------------------------
data XMLMapping_ a = XMLMapping__ 
type XMLMapping a = IDispatch (XMLMapping_ a)
iidXMLMapping :: IID (XMLMapping ())
iidXMLMapping = mkIID "{0C1FABE7-F737-406F-9CA3-B07661F9D1A2}"

getApplication283 :: XMLMapping a0
                  -> IO (Maybe Application)
getApplication283 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator283 :: XMLMapping a0
              -> IO Int32
getCreator283 =
  propertyGet "Creator"
              []
              outInt32

getParent283 :: XMLMapping a0
             -> IO (IDispatch ())
getParent283 =
  propertyGet "Parent"
              []
              outIDispatch

getIsMapped :: XMLMapping a0
            -> IO Bool
getIsMapped =
  propertyGet "IsMapped"
              []
              outBool

getCustomXMLPart :: XMLMapping a0
                 -> IO (Maybe CustomXMLPart)
getCustomXMLPart iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCustomXMLPart methPtr iptr prop) 11 iptr
    doThenFree free (readunique readCustomXMLPart) prop

foreign import stdcall "dynamic" prim_Word_getCustomXMLPart :: Ptr () -> Ptr () -> Ptr (Ptr CustomXMLPart) -> IO Int32
getCustomXMLNode :: XMLMapping a0
                 -> IO (Maybe CustomXMLNode)
getCustomXMLNode iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getCustomXMLNode methPtr iptr prop) 12 iptr
    doThenFree free (readunique readCustomXMLNode) prop

foreign import stdcall "dynamic" prim_Word_getCustomXMLNode :: Ptr () -> Ptr () -> Ptr (Ptr CustomXMLNode) -> IO Int32
setMapping :: String
           -> String
           -> CustomXMLPart
           -> XMLMapping a0
           -> IO Bool
setMapping xPath prefixMapping source iptr =
  do
    prop <- allocBytes (fromIntegral sizeofInt16)
    xPath <- marshallBSTR xPath
    prefixMapping <- marshallBSTR prefixMapping
    source <- marshallref (allocBytes (fromIntegral sizeofCustomXMLPart)) writeCustomXMLPart source
    invokeAndCheck (\ methPtr iptr -> prim_Word_setMapping methPtr iptr xPath prefixMapping source prop) 13 iptr
    freeBSTR xPath
    freeBSTR prefixMapping
    free source
    doThenFree free readVARIANT_BOOL prop

foreign import stdcall "dynamic" prim_Word_setMapping :: Ptr () -> Ptr () -> Ptr String -> Ptr String -> Ptr CustomXMLPart -> Ptr Int16 -> IO Int32
delete65 :: XMLMapping a0
         -> IO ()
delete65 =
  method0 "Delete"
          []

setMappingByNode :: CustomXMLNode
                 -> XMLMapping a0
                 -> IO Bool
setMappingByNode node iptr =
  do
    prop <- allocBytes (fromIntegral sizeofInt16)
    node <- marshallref (allocBytes (fromIntegral sizeofCustomXMLNode)) writeCustomXMLNode node
    invokeAndCheck (\ methPtr iptr -> prim_Word_setMappingByNode methPtr iptr node prop) 15 iptr
    free node
    doThenFree free readVARIANT_BOOL prop

foreign import stdcall "dynamic" prim_Word_setMappingByNode :: Ptr () -> Ptr () -> Ptr CustomXMLNode -> Ptr Int16 -> IO Int32
getXPath :: XMLMapping a0
         -> IO String
getXPath =
  propertyGet "XPath"
              []
              outString

getPrefixMappings :: XMLMapping a0
                  -> IO String
getPrefixMappings =
  propertyGet "PrefixMappings"
              []
              outString

-- --------------------------------------------------
-- 
-- interface ContentControlListEntries
-- 
-- --------------------------------------------------
data ContentControlListEntries_ a = ContentControlListEntries__ 
type ContentControlListEntries a = IDispatch (ContentControlListEntries_ a)
iidContentControlListEntries :: IID (ContentControlListEntries ())
iidContentControlListEntries =
  mkIID "{54F46DC4-F6A6-48CC-BD66-46C1DDEADD22}"

getNewEnum106 :: ContentControlListEntries a0
              -> IO (IUnknown ())
getNewEnum106 =
  propertyGet "_NewEnum"
              []
              outIUnknown

getApplication284 :: ContentControlListEntries a0
                  -> IO (Maybe Application)
getApplication284 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 8 iptr
    doThenFree free (readunique readApplication) prop

getCreator284 :: ContentControlListEntries a0
              -> IO Int32
getCreator284 =
  propertyGet "Creator"
              []
              outInt32

getParent284 :: ContentControlListEntries a0
             -> IO (IDispatch ())
getParent284 =
  propertyGet "Parent"
              []
              outIDispatch

getCount108 :: ContentControlListEntries a0
            -> IO Int32
getCount108 =
  propertyGet "Count"
              []
              outInt32

clear4 :: ContentControlListEntries a0
       -> IO ()
clear4 =
  method0 "Clear"
          []

item108 :: Int32
        -> ContentControlListEntries a0
        -> IO (ContentControlListEntry ())
item108 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add62 :: (Variant a1, Variant a2)
      => String
      -> a1
      -> a2
      -> ContentControlListEntries a0
      -> IO (ContentControlListEntry ())
add62 text value index =
  function1 "Add"
            [ inString text
            , inDefaultValue (inVariant "") inVariant value
            , inDefaultValue (inInt32 0) inVariant index
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ContentControlListEntry
-- 
-- --------------------------------------------------
data ContentControlListEntry_ a = ContentControlListEntry__ 
type ContentControlListEntry a = IDispatch (ContentControlListEntry_ a)
iidContentControlListEntry :: IID (ContentControlListEntry ())
iidContentControlListEntry =
  mkIID "{0C6FA8CA-E65F-4FC7-AB8F-20729EECBB14}"

getApplication285 :: ContentControlListEntry a0
                  -> IO (Maybe Application)
getApplication285 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator285 :: ContentControlListEntry a0
              -> IO Int32
getCreator285 =
  propertyGet "Creator"
              []
              outInt32

getParent285 :: ContentControlListEntry a0
             -> IO (IDispatch ())
getParent285 =
  propertyGet "Parent"
              []
              outIDispatch

getText5 :: ContentControlListEntry a0
         -> IO String
getText5 =
  propertyGet "Text"
              []
              outString

setText5 :: String
         -> ContentControlListEntry a0
         -> IO ()
setText5 prop =
  propertySet "Text"
              [inString prop]

getValue9 :: ContentControlListEntry a0
          -> IO String
getValue9 =
  propertyGet "Value"
              []
              outString

setValue6 :: String
          -> ContentControlListEntry a0
          -> IO ()
setValue6 prop =
  propertySet "Value"
              [inString prop]

getIndex33 :: ContentControlListEntry a0
           -> IO Int32
getIndex33 =
  propertyGet "Index"
              []
              outInt32

setIndex :: Int32
         -> ContentControlListEntry a0
         -> IO ()
setIndex prop =
  propertySet "Index"
              [inInt32 prop]

delete66 :: ContentControlListEntry a0
         -> IO ()
delete66 =
  method0 "Delete"
          []

moveUp0 :: ContentControlListEntry a0
        -> IO ()
moveUp0 =
  method0 "MoveUp"
          []

moveDown0 :: ContentControlListEntry a0
          -> IO ()
moveDown0 =
  method0 "MoveDown"
          []

select20 :: ContentControlListEntry a0
         -> IO ()
select20 =
  method0 "Select"
          []

-- --------------------------------------------------
-- 
-- interface BuildingBlockTypes
-- 
-- --------------------------------------------------
data BuildingBlockTypes_ a = BuildingBlockTypes__ 
type BuildingBlockTypes a = IDispatch (BuildingBlockTypes_ a)
iidBuildingBlockTypes :: IID (BuildingBlockTypes ())
iidBuildingBlockTypes =
  mkIID "{B5828B50-0E3D-448A-962D-A40702A5868D}"

getApplication286 :: BuildingBlockTypes a0
                  -> IO (Maybe Application)
getApplication286 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator286 :: BuildingBlockTypes a0
              -> IO Int32
getCreator286 =
  propertyGet "Creator"
              []
              outInt32

getParent286 :: BuildingBlockTypes a0
             -> IO (IDispatch ())
getParent286 =
  propertyGet "Parent"
              []
              outIDispatch

getCount109 :: BuildingBlockTypes a0
            -> IO Int32
getCount109 =
  propertyGet "Count"
              []
              outInt32

item109 :: WdBuildingBlockTypes
        -> BuildingBlockTypes a0
        -> IO (BuildingBlockType ())
item109 index =
  function1 "Item"
            [inEnum index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface BuildingBlockType
-- 
-- --------------------------------------------------
data BuildingBlockType_ a = BuildingBlockType__ 
type BuildingBlockType a = IDispatch (BuildingBlockType_ a)
iidBuildingBlockType :: IID (BuildingBlockType ())
iidBuildingBlockType =
  mkIID "{817F99FA-CCC4-4971-8E9D-1238F735AAFF}"

getApplication287 :: BuildingBlockType a0
                  -> IO (Maybe Application)
getApplication287 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator287 :: BuildingBlockType a0
              -> IO Int32
getCreator287 =
  propertyGet "Creator"
              []
              outInt32

getParent287 :: BuildingBlockType a0
             -> IO (IDispatch ())
getParent287 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex34 :: BuildingBlockType a0
           -> IO Int32
getIndex34 =
  propertyGet "Index"
              []
              outInt32

getName46 :: BuildingBlockType a0
          -> IO String
getName46 =
  propertyGet "Name"
              []
              outString

getCategories :: BuildingBlockType a0
              -> IO (Categories ())
getCategories =
  propertyGet "Categories"
              []
              outIUnknown

-- --------------------------------------------------
-- 
-- interface Categories
-- 
-- --------------------------------------------------
data Categories_ a = Categories__ 
type Categories a = IDispatch (Categories_ a)
iidCategories :: IID (Categories ())
iidCategories = mkIID "{6E47678B-A879-4E56-8698-3B7CF169FAD4}"

getApplication288 :: Categories a0
                  -> IO (Maybe Application)
getApplication288 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator288 :: Categories a0
              -> IO Int32
getCreator288 =
  propertyGet "Creator"
              []
              outInt32

getParent288 :: Categories a0
             -> IO (IDispatch ())
getParent288 =
  propertyGet "Parent"
              []
              outIDispatch

getCount110 :: Categories a0
            -> IO Int32
getCount110 =
  propertyGet "Count"
              []
              outInt32

item110 :: (Variant a1)
        => a1
        -> Categories a0
        -> IO (Category ())
item110 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Category
-- 
-- --------------------------------------------------
data Category_ a = Category__ 
type Category a = IDispatch (Category_ a)
iidCategory :: IID (Category ())
iidCategory = mkIID "{ECFBDB5E-ACD2-4530-AD79-4560B7FF055C}"

getApplication289 :: Category a0
                  -> IO (Maybe Application)
getApplication289 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator289 :: Category a0
              -> IO Int32
getCreator289 =
  propertyGet "Creator"
              []
              outInt32

getParent289 :: Category a0
             -> IO (IDispatch ())
getParent289 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex35 :: Category a0
           -> IO Int32
getIndex35 =
  propertyGet "Index"
              []
              outInt32

getName47 :: Category a0
          -> IO String
getName47 =
  propertyGet "Name"
              []
              outString

getBuildingBlocks :: Category a0
                  -> IO (BuildingBlocks ())
getBuildingBlocks =
  propertyGet "BuildingBlocks"
              []
              outIUnknown

getType34 :: Category a0
          -> IO (BuildingBlockType ())
getType34 =
  propertyGet "Type"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface BuildingBlocks
-- 
-- --------------------------------------------------
data BuildingBlocks_ a = BuildingBlocks__ 
type BuildingBlocks a = IDispatch (BuildingBlocks_ a)
iidBuildingBlocks :: IID (BuildingBlocks ())
iidBuildingBlocks = mkIID "{C6D50987-25D7-408A-BFF2-90BF86A24E93}"

getApplication290 :: BuildingBlocks a0
                  -> IO (Maybe Application)
getApplication290 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator290 :: BuildingBlocks a0
              -> IO Int32
getCreator290 =
  propertyGet "Creator"
              []
              outInt32

getParent290 :: BuildingBlocks a0
             -> IO (IDispatch ())
getParent290 =
  propertyGet "Parent"
              []
              outIDispatch

getCount111 :: BuildingBlocks a0
            -> IO Int32
getCount111 =
  propertyGet "Count"
              []
              outInt32

item111 :: (Variant a1)
        => a1
        -> BuildingBlocks a0
        -> IO (BuildingBlock ())
item111 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

add63 :: (Variant a2, Variant a3)
      => String
      -> Range a1
      -> a2
      -> a3
      -> BuildingBlocks a0
      -> IO (BuildingBlock ())
add63 name range3 description insertOptions =
  function1 "Add"
            [ inString name
            , inIDispatch range3
            , inVariant description
            , inDefaultValue (inInt32 0) inVariant insertOptions
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface BuildingBlock
-- 
-- --------------------------------------------------
data BuildingBlock_ a = BuildingBlock__ 
type BuildingBlock a = IDispatch (BuildingBlock_ a)
iidBuildingBlock :: IID (BuildingBlock ())
iidBuildingBlock = mkIID "{BFD3FC23-F763-4FF8-826E-1AFBF598A4E7}"

getApplication291 :: BuildingBlock a0
                  -> IO (Maybe Application)
getApplication291 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator291 :: BuildingBlock a0
              -> IO Int32
getCreator291 =
  propertyGet "Creator"
              []
              outInt32

getParent291 :: BuildingBlock a0
             -> IO (IDispatch ())
getParent291 =
  propertyGet "Parent"
              []
              outIDispatch

getIndex36 :: BuildingBlock a0
           -> IO Int32
getIndex36 =
  propertyGet "Index"
              []
              outInt32

getName48 :: BuildingBlock a0
          -> IO String
getName48 =
  propertyGet "Name"
              []
              outString

setName13 :: String
          -> BuildingBlock a0
          -> IO ()
setName13 prop =
  propertySet "Name"
              [inString prop]

getType35 :: BuildingBlock a0
          -> IO (BuildingBlockType ())
getType35 =
  propertyGet "Type"
              []
              outIDispatch

getDescription0 :: BuildingBlock a0
                -> IO String
getDescription0 =
  propertyGet "Description"
              []
              outString

setDescription :: String
               -> BuildingBlock a0
               -> IO ()
setDescription prop =
  propertySet "Description"
              [inString prop]

getID10 :: BuildingBlock a0
        -> IO String
getID10 =
  propertyGet "ID"
              []
              outString

getCategory0 :: BuildingBlock a0
             -> IO (Category ())
getCategory0 =
  propertyGet "Category"
              []
              outIDispatch

getValue10 :: BuildingBlock a0
           -> IO String
getValue10 =
  propertyGet "Value"
              []
              outString

setValue7 :: String
          -> BuildingBlock a0
          -> IO ()
setValue7 prop =
  propertySet "Value"
              [inString prop]

getInsertOptions :: BuildingBlock a0
                 -> IO Int32
getInsertOptions =
  propertyGet "InsertOptions"
              []
              outInt32

setInsertOptions :: Int32
                 -> BuildingBlock a0
                 -> IO ()
setInsertOptions prop =
  propertySet "InsertOptions"
              [inInt32 prop]

delete67 :: BuildingBlock a0
         -> IO ()
delete67 =
  method0 "Delete"
          []

insert3 :: (Variant a2)
        => Range a1
        -> a2
        -> BuildingBlock a0
        -> IO (Range ())
insert3 where0 richText =
  function1 "Insert"
            [ inIDispatch where0
            , inVariant richText
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface BuildingBlockEntries
-- 
-- --------------------------------------------------
data BuildingBlockEntries_ a = BuildingBlockEntries__ 
type BuildingBlockEntries a = IDispatch (BuildingBlockEntries_ a)
iidBuildingBlockEntries :: IID (BuildingBlockEntries ())
iidBuildingBlockEntries =
  mkIID "{39709229-56A0-4E29-9112-B31DD067EBFD}"

getApplication292 :: BuildingBlockEntries a0
                  -> IO (Maybe Application)
getApplication292 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator292 :: BuildingBlockEntries a0
              -> IO Int32
getCreator292 =
  propertyGet "Creator"
              []
              outInt32

getParent292 :: BuildingBlockEntries a0
             -> IO (IDispatch ())
getParent292 =
  propertyGet "Parent"
              []
              outIDispatch

getCount112 :: BuildingBlockEntries a0
            -> IO Int32
getCount112 =
  propertyGet "Count"
              []
              outInt32

item112 :: (Variant a1)
        => a1
        -> BuildingBlockEntries a0
        -> IO (BuildingBlock ())
item112 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

add64 :: (Variant a2, Variant a3)
      => String
      -> WdBuildingBlockTypes
      -> String
      -> Range a1
      -> a2
      -> a3
      -> BuildingBlockEntries a0
      -> IO (BuildingBlock ())
add64 name type0 category range3 description insertOptions =
  function1 "Add"
            [ inString name
            , inEnum type0
            , inString category
            , inIDispatch range3
            , inVariant description
            , inDefaultValue (inInt32 0) inVariant insertOptions
            ]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface OMathBreaks
-- 
-- --------------------------------------------------
data OMathBreaks_ a = OMathBreaks__ 
type OMathBreaks a = IDispatch (OMathBreaks_ a)
iidOMathBreaks :: IID (OMathBreaks ())
iidOMathBreaks = mkIID "{E2E0F3A7-204C-40C5-BAA5-290F374FDF5A}"

getApplication293 :: OMathBreaks a0
                  -> IO (Maybe Application)
getApplication293 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator293 :: OMathBreaks a0
              -> IO Int32
getCreator293 =
  propertyGet "Creator"
              []
              outInt32

getParent293 :: OMathBreaks a0
             -> IO (IDispatch ())
getParent293 =
  propertyGet "Parent"
              []
              outIDispatch

getCount113 :: OMathBreaks a0
            -> IO Int32
getCount113 =
  propertyGet "Count"
              []
              outInt32

item113 :: Int32
        -> OMathBreaks a0
        -> IO (OMathBreak ())
item113 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

add65 :: Range a1
      -> OMathBreaks a0
      -> IO (OMathBreak ())
add65 range3 =
  function1 "Add"
            [inIDispatch range3]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface OMathBreak
-- 
-- --------------------------------------------------
data OMathBreak_ a = OMathBreak__ 
type OMathBreak a = IDispatch (OMathBreak_ a)
iidOMathBreak :: IID (OMathBreak ())
iidOMathBreak = mkIID "{65E515D5-F50B-4951-8F38-FA6AC8707387}"

getApplication294 :: OMathBreak a0
                  -> IO (Maybe Application)
getApplication294 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator294 :: OMathBreak a0
              -> IO Int32
getCreator294 =
  propertyGet "Creator"
              []
              outInt32

getParent294 :: OMathBreak a0
             -> IO (IDispatch ())
getParent294 =
  propertyGet "Parent"
              []
              outIDispatch

getRange31 :: OMathBreak a0
           -> IO (Range ())
getRange31 =
  propertyGet "Range"
              []
              outIDispatch

getAlignAt :: OMathBreak a0
           -> IO Int32
getAlignAt =
  propertyGet "AlignAt"
              []
              outInt32

setAlignAt :: Int32
           -> OMathBreak a0
           -> IO ()
setAlignAt prop =
  propertySet "AlignAt"
              [inInt32 prop]

delete68 :: OMathBreak a0
         -> IO ()
delete68 =
  method0 "Delete"
          []

-- --------------------------------------------------
-- 
-- interface Research
-- 
-- --------------------------------------------------
data Research_ a = Research__ 
type Research a = IDispatch (Research_ a)
iidResearch :: IID (Research ())
iidResearch = mkIID "{E6AAEC05-E543-4085-BA92-9BF7D2474F51}"

getApplication295 :: Research a0
                  -> IO (Maybe Application)
getApplication295 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getApplication methPtr iptr prop) 7 iptr
    doThenFree free (readunique readApplication) prop

getCreator295 :: Research a0
              -> IO Int32
getCreator295 =
  propertyGet "Creator"
              []
              outInt32

getParent295 :: Research a0
             -> IO (IDispatch ())
getParent295 =
  propertyGet "Parent"
              []
              outIDispatch

query :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
      => String
      -> a2
      -> a3
      -> a4
      -> a5
      -> Research a0
      -> IO a1
query serviceID queryString queryLanguage useSelection launchQuery =
  function1 "Query"
            [ inString serviceID
            , inDefaultValue (inVariant "") inVariant queryString
            , inDefaultValue (inInt32 0) inVariant queryLanguage
            , inDefaultValue (inInt32 0) inVariant useSelection
            , inDefaultValue (inInt32 (-1)) inVariant launchQuery
            ]
            outVariant

setLanguagePair :: (Variant a1)
                => WdLanguageID
                -> WdLanguageID
                -> Research a0
                -> IO a1
setLanguagePair languageFrom languageTo =
  function1 "SetLanguagePair"
            [ inEnum languageFrom
            , inEnum languageTo
            ]
            outVariant

isResearchService :: String
                  -> Research a0
                  -> IO Bool
isResearchService serviceID =
  function1 "IsResearchService"
            [inString serviceID]
            outBool

-- --------------------------------------------------
-- 
-- interface SoftEdgeFormat
-- 
-- --------------------------------------------------
data SoftEdgeFormat_ a = SoftEdgeFormat__ 
type SoftEdgeFormat a = IDispatch (SoftEdgeFormat_ a)
iidSoftEdgeFormat :: IID (SoftEdgeFormat ())
iidSoftEdgeFormat = mkIID "{D040DAF9-6CE4-4BE8-839D-F4538A4301CF}"

getType36 :: SoftEdgeFormat a0
          -> IO MsoSoftEdgeType
getType36 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoSoftEdgeType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType36 methPtr iptr prop) 7 iptr
    doThenFree free readMsoSoftEdgeType prop

foreign import stdcall "dynamic" prim_Word_getType36 :: Ptr () -> Ptr () -> Ptr MsoSoftEdgeType -> IO Int32
setType9 :: MsoSoftEdgeType
         -> SoftEdgeFormat a0
         -> IO ()
setType9 prop iptr =
  do
    prop <- marshallMsoSoftEdgeType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setType9 methPtr iptr prop) 8 iptr

foreign import stdcall "prim_Word_setType9" prim_Word_setType9 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
-- --------------------------------------------------
-- 
-- interface GlowFormat
-- 
-- --------------------------------------------------
data GlowFormat_ a = GlowFormat__ 
type GlowFormat a = IDispatch (GlowFormat_ a)
iidGlowFormat :: IID (GlowFormat ())
iidGlowFormat = mkIID "{F1B14F40-5C32-4C8C-B5B2-DE537BB6B89D}"

getRadius :: GlowFormat a0
          -> IO Float
getRadius =
  propertyGet "Radius"
              []
              outFloat

setRadius :: Float
          -> GlowFormat a0
          -> IO ()
setRadius prop =
  propertySet "Radius"
              [inFloat prop]

getColor1 :: GlowFormat a0
          -> IO (ColorFormat ())
getColor1 =
  propertyGet "Color"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ReflectionFormat
-- 
-- --------------------------------------------------
data ReflectionFormat_ a = ReflectionFormat__ 
type ReflectionFormat a = IDispatch (ReflectionFormat_ a)
iidReflectionFormat :: IID (ReflectionFormat ())
iidReflectionFormat =
  mkIID "{F01943FF-1985-445E-8602-8FB8F39CCA75}"

getType37 :: ReflectionFormat a0
          -> IO MsoReflectionType
getType37 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoReflectionType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType37 methPtr iptr prop) 7 iptr
    doThenFree free readMsoReflectionType prop

foreign import stdcall "dynamic" prim_Word_getType37 :: Ptr () -> Ptr () -> Ptr MsoReflectionType -> IO Int32
setType10 :: MsoReflectionType
          -> ReflectionFormat a0
          -> IO ()
setType10 prop iptr =
  do
    prop <- marshallMsoReflectionType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setType10 methPtr iptr prop) 8 iptr

foreign import stdcall "prim_Word_setType10" prim_Word_setType10 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
data WdStyleSort
 = WdStyleSortByName
 | WdStyleSortRecommended
 | WdStyleSortByFont
 | WdStyleSortByBasedOn
 | WdStyleSortByType
 deriving (Enum)
instance Variant (WdStyleSort) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRemoveDocInfoType
 = WdRDIComments
 | WdRDIRevisions
 | WdRDIVersions
 | WdRDIRemovePersonalInformation
 | WdRDIEmailHeader
 | WdRDIRoutingSlip
 | WdRDISendForReview
 | WdRDIDocumentProperties
 | WdRDITemplate
 | WdRDIDocumentWorkspace
 | WdRDIInkAnnotations
 | WdRDIDocumentServerProperties
 | WdRDIDocumentManagementPolicy
 | WdRDIContentType
 | WdRDIAll
 
instance Enum (WdRemoveDocInfoType) where
  fromEnum v =
    case v of
       WdRDIComments -> 1
       WdRDIRevisions -> 2
       WdRDIVersions -> 3
       WdRDIRemovePersonalInformation -> 4
       WdRDIEmailHeader -> 5
       WdRDIRoutingSlip -> 6
       WdRDISendForReview -> 7
       WdRDIDocumentProperties -> 8
       WdRDITemplate -> 9
       WdRDIDocumentWorkspace -> 10
       WdRDIInkAnnotations -> 11
       WdRDIDocumentServerProperties -> 14
       WdRDIDocumentManagementPolicy -> 15
       WdRDIContentType -> 16
       WdRDIAll -> 99
  
  toEnum v =
    case v of
       1 -> WdRDIComments
       2 -> WdRDIRevisions
       3 -> WdRDIVersions
       4 -> WdRDIRemovePersonalInformation
       5 -> WdRDIEmailHeader
       6 -> WdRDIRoutingSlip
       7 -> WdRDISendForReview
       8 -> WdRDIDocumentProperties
       9 -> WdRDITemplate
       10 -> WdRDIDocumentWorkspace
       11 -> WdRDIInkAnnotations
       14 -> WdRDIDocumentServerProperties
       15 -> WdRDIDocumentManagementPolicy
       16 -> WdRDIContentType
       99 -> WdRDIAll
       _ -> error "unmarshallWdRemoveDocInfoType: illegal enum value "
  
instance Variant (WdRemoveDocInfoType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCheckInVersionType
 = WdCheckInVersionTypeList__ [WdCheckInVersionType]
 | WdCheckInMinorVersion
 | WdCheckInMajorVersion
 | WdCheckInOverwriteVersion
 
instance Flags (WdCheckInVersionType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdCheckInVersionType) where
  fromEnum v =
    case v of
       (WdCheckInVersionTypeList__ xs) -> orList (map fromEnum xs)
       WdCheckInMinorVersion -> 0
       WdCheckInMajorVersion -> 1
       WdCheckInOverwriteVersion -> 2
  
  toEnum v =
    case v of
       0 -> WdCheckInMinorVersion
       1 -> WdCheckInMajorVersion
       2 -> WdCheckInOverwriteVersion
       x -> WdCheckInVersionTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdCheckInVersionType: illegal enum value "
  
instance Variant (WdCheckInVersionType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMoveToTextMark
 = WdMoveToTextMarkNone
 | WdMoveToTextMarkBold
 | WdMoveToTextMarkItalic
 | WdMoveToTextMarkUnderline
 | WdMoveToTextMarkDoubleUnderline
 | WdMoveToTextMarkColorOnly
 | WdMoveToTextMarkStrikeThrough
 | WdMoveToTextMarkDoubleStrikeThrough
 deriving (Enum)
instance Variant (WdMoveToTextMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMoveFromTextMark
 = WdMoveFromTextMarkHidden
 | WdMoveFromTextMarkDoubleStrikeThrough
 | WdMoveFromTextMarkStrikeThrough
 | WdMoveFromTextMarkCaret
 | WdMoveFromTextMarkPound
 | WdMoveFromTextMarkNone
 | WdMoveFromTextMarkBold
 | WdMoveFromTextMarkItalic
 | WdMoveFromTextMarkUnderline
 | WdMoveFromTextMarkDoubleUnderline
 | WdMoveFromTextMarkColorOnly
 deriving (Enum)
instance Variant (WdMoveFromTextMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathFunctionType
 = WdOMathFunctionAcc
 | WdOMathFunctionBar
 | WdOMathFunctionBox
 | WdOMathFunctionBorderBox
 | WdOMathFunctionDelim
 | WdOMathFunctionEqArray
 | WdOMathFunctionFrac
 | WdOMathFunctionFunc
 | WdOMathFunctionGroupChar
 | WdOMathFunctionLimLow
 | WdOMathFunctionLimUpp
 | WdOMathFunctionMat
 | WdOMathFunctionNary
 | WdOMathFunctionPhantom
 | WdOMathFunctionScrPre
 | WdOMathFunctionRad
 | WdOMathFunctionScrSub
 | WdOMathFunctionScrSubSup
 | WdOMathFunctionScrSup
 | WdOMathFunctionText
 | WdOMathFunctionNormalText
 | WdOMathFunctionLiteralText
 
instance Enum (WdOMathFunctionType) where
  fromEnum v =
    case v of
       WdOMathFunctionAcc -> 1
       WdOMathFunctionBar -> 2
       WdOMathFunctionBox -> 3
       WdOMathFunctionBorderBox -> 4
       WdOMathFunctionDelim -> 5
       WdOMathFunctionEqArray -> 6
       WdOMathFunctionFrac -> 7
       WdOMathFunctionFunc -> 8
       WdOMathFunctionGroupChar -> 9
       WdOMathFunctionLimLow -> 10
       WdOMathFunctionLimUpp -> 11
       WdOMathFunctionMat -> 12
       WdOMathFunctionNary -> 13
       WdOMathFunctionPhantom -> 14
       WdOMathFunctionScrPre -> 15
       WdOMathFunctionRad -> 16
       WdOMathFunctionScrSub -> 17
       WdOMathFunctionScrSubSup -> 18
       WdOMathFunctionScrSup -> 19
       WdOMathFunctionText -> 20
       WdOMathFunctionNormalText -> 21
       WdOMathFunctionLiteralText -> 22
  
  toEnum v =
    case v of
       1 -> WdOMathFunctionAcc
       2 -> WdOMathFunctionBar
       3 -> WdOMathFunctionBox
       4 -> WdOMathFunctionBorderBox
       5 -> WdOMathFunctionDelim
       6 -> WdOMathFunctionEqArray
       7 -> WdOMathFunctionFrac
       8 -> WdOMathFunctionFunc
       9 -> WdOMathFunctionGroupChar
       10 -> WdOMathFunctionLimLow
       11 -> WdOMathFunctionLimUpp
       12 -> WdOMathFunctionMat
       13 -> WdOMathFunctionNary
       14 -> WdOMathFunctionPhantom
       15 -> WdOMathFunctionScrPre
       16 -> WdOMathFunctionRad
       17 -> WdOMathFunctionScrSub
       18 -> WdOMathFunctionScrSubSup
       19 -> WdOMathFunctionScrSup
       20 -> WdOMathFunctionText
       21 -> WdOMathFunctionNormalText
       22 -> WdOMathFunctionLiteralText
       _ -> error "unmarshallWdOMathFunctionType: illegal enum value "
  
instance Variant (WdOMathFunctionType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathHorizAlignType
 = WdOMathHorizAlignTypeList__ [WdOMathHorizAlignType]
 | WdOMathHorizAlignCenter
 | WdOMathHorizAlignLeft
 | WdOMathHorizAlignRight
 
instance Flags (WdOMathHorizAlignType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOMathHorizAlignType) where
  fromEnum v =
    case v of
       (WdOMathHorizAlignTypeList__ xs) -> orList (map fromEnum xs)
       WdOMathHorizAlignCenter -> 0
       WdOMathHorizAlignLeft -> 1
       WdOMathHorizAlignRight -> 2
  
  toEnum v =
    case v of
       0 -> WdOMathHorizAlignCenter
       1 -> WdOMathHorizAlignLeft
       2 -> WdOMathHorizAlignRight
       x -> WdOMathHorizAlignTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdOMathHorizAlignType: illegal enum value "
  
instance Variant (WdOMathHorizAlignType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathVertAlignType
 = WdOMathVertAlignTypeList__ [WdOMathVertAlignType]
 | WdOMathVertAlignCenter
 | WdOMathVertAlignTop
 | WdOMathVertAlignBottom
 
instance Flags (WdOMathVertAlignType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOMathVertAlignType) where
  fromEnum v =
    case v of
       (WdOMathVertAlignTypeList__ xs) -> orList (map fromEnum xs)
       WdOMathVertAlignCenter -> 0
       WdOMathVertAlignTop -> 1
       WdOMathVertAlignBottom -> 2
  
  toEnum v =
    case v of
       0 -> WdOMathVertAlignCenter
       1 -> WdOMathVertAlignTop
       2 -> WdOMathVertAlignBottom
       x -> WdOMathVertAlignTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdOMathVertAlignType: illegal enum value "
  
instance Variant (WdOMathVertAlignType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathFracType
 = WdOMathFracBar
 | WdOMathFracNoBar
 | WdOMathFracSkw
 | WdOMathFracLin
 deriving (Enum)
instance Variant (WdOMathFracType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathSpacingRule
 = WdOMathSpacingSingle
 | WdOMathSpacing1pt5
 | WdOMathSpacingDouble
 | WdOMathSpacingExactly
 | WdOMathSpacingMultiple
 deriving (Enum)
instance Variant (WdOMathSpacingRule) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathType
 = WdOMathTypeList__ [WdOMathType]
 | WdOMathDisplay
 | WdOMathInline
 
instance Flags (WdOMathType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOMathType) where
  fromEnum v =
    case v of
       (WdOMathTypeList__ xs) -> orList (map fromEnum xs)
       WdOMathDisplay -> 0
       WdOMathInline -> 1
  
  toEnum v =
    case v of
       0 -> WdOMathDisplay
       1 -> WdOMathInline
       x -> WdOMathTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdOMathType: illegal enum value "
  
instance Variant (WdOMathType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathShapeType
 = WdOMathShapeTypeList__ [WdOMathShapeType]
 | WdOMathShapeCentered
 | WdOMathShapeMatch
 
instance Flags (WdOMathShapeType) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOMathShapeType) where
  fromEnum v =
    case v of
       (WdOMathShapeTypeList__ xs) -> orList (map fromEnum xs)
       WdOMathShapeCentered -> 0
       WdOMathShapeMatch -> 1
  
  toEnum v =
    case v of
       0 -> WdOMathShapeCentered
       1 -> WdOMathShapeMatch
       x -> WdOMathShapeTypeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdOMathShapeType: illegal enum value "
  
instance Variant (WdOMathShapeType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathJc
 = WdOMathJcCenterGroup
 | WdOMathJcCenter
 | WdOMathJcLeft
 | WdOMathJcRight
 | WdOMathJcInline
 
instance Enum (WdOMathJc) where
  fromEnum v =
    case v of
       WdOMathJcCenterGroup -> 1
       WdOMathJcCenter -> 2
       WdOMathJcLeft -> 3
       WdOMathJcRight -> 4
       WdOMathJcInline -> 7
  
  toEnum v =
    case v of
       1 -> WdOMathJcCenterGroup
       2 -> WdOMathJcCenter
       3 -> WdOMathJcLeft
       4 -> WdOMathJcRight
       7 -> WdOMathJcInline
       _ -> error "unmarshallWdOMathJc: illegal enum value "
  
instance Variant (WdOMathJc) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathBreakBin
 = WdOMathBreakBinList__ [WdOMathBreakBin]
 | WdOMathBreakBinBefore
 | WdOMathBreakBinAfter
 | WdOMathBreakBinRepeat
 
instance Flags (WdOMathBreakBin) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOMathBreakBin) where
  fromEnum v =
    case v of
       (WdOMathBreakBinList__ xs) -> orList (map fromEnum xs)
       WdOMathBreakBinBefore -> 0
       WdOMathBreakBinAfter -> 1
       WdOMathBreakBinRepeat -> 2
  
  toEnum v =
    case v of
       0 -> WdOMathBreakBinBefore
       1 -> WdOMathBreakBinAfter
       2 -> WdOMathBreakBinRepeat
       x -> WdOMathBreakBinList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdOMathBreakBin: illegal enum value "
  
instance Variant (WdOMathBreakBin) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdOMathBreakSub
 = WdOMathBreakSubList__ [WdOMathBreakSub]
 | WdOMathBreakSubMinusMinus
 | WdOMathBreakSubPlusMinus
 | WdOMathBreakSubMinusPlus
 
instance Flags (WdOMathBreakSub) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdOMathBreakSub) where
  fromEnum v =
    case v of
       (WdOMathBreakSubList__ xs) -> orList (map fromEnum xs)
       WdOMathBreakSubMinusMinus -> 0
       WdOMathBreakSubPlusMinus -> 1
       WdOMathBreakSubMinusPlus -> 2
  
  toEnum v =
    case v of
       0 -> WdOMathBreakSubMinusMinus
       1 -> WdOMathBreakSubPlusMinus
       2 -> WdOMathBreakSubMinusPlus
       x -> WdOMathBreakSubList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdOMathBreakSub: illegal enum value "
  
instance Variant (WdOMathBreakSub) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdReadingLayoutMargin
 = WdReadingLayoutMarginList__ [WdReadingLayoutMargin]
 | WdAutomaticMargin
 | WdSuppressMargin
 | WdFullMargin
 
instance Flags (WdReadingLayoutMargin) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdReadingLayoutMargin) where
  fromEnum v =
    case v of
       (WdReadingLayoutMarginList__ xs) -> orList (map fromEnum xs)
       WdAutomaticMargin -> 0
       WdSuppressMargin -> 1
       WdFullMargin -> 2
  
  toEnum v =
    case v of
       0 -> WdAutomaticMargin
       1 -> WdSuppressMargin
       2 -> WdFullMargin
       x -> WdReadingLayoutMarginList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                              then Just (toEnum (fromIntegral val))
                                                              else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdReadingLayoutMargin: illegal enum value "
  
instance Variant (WdReadingLayoutMargin) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdContentControlType
 = WdContentControlRichText
 | WdContentControlText
 | WdContentControlPicture
 | WdContentControlComboBox
 | WdContentControlDropdownList
 | WdContentControlBuildingBlockGallery
 | WdContentControlDate
 | WdContentControlGroup
 deriving (Enum)
instance Variant (WdContentControlType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCompareDestination
 = WdCompareDestinationList__ [WdCompareDestination]
 | WdCompareDestinationOriginal
 | WdCompareDestinationRevised
 | WdCompareDestinationNew
 
instance Flags (WdCompareDestination) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdCompareDestination) where
  fromEnum v =
    case v of
       (WdCompareDestinationList__ xs) -> orList (map fromEnum xs)
       WdCompareDestinationOriginal -> 0
       WdCompareDestinationRevised -> 1
       WdCompareDestinationNew -> 2
  
  toEnum v =
    case v of
       0 -> WdCompareDestinationOriginal
       1 -> WdCompareDestinationRevised
       2 -> WdCompareDestinationNew
       x -> WdCompareDestinationList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                             then Just (toEnum (fromIntegral val))
                                                             else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdCompareDestination: illegal enum value "
  
instance Variant (WdCompareDestination) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdGranularity
 = WdGranularityList__ [WdGranularity]
 | WdGranularityCharLevel
 | WdGranularityWordLevel
 
instance Flags (WdGranularity) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdGranularity) where
  fromEnum v =
    case v of
       (WdGranularityList__ xs) -> orList (map fromEnum xs)
       WdGranularityCharLevel -> 0
       WdGranularityWordLevel -> 1
  
  toEnum v =
    case v of
       0 -> WdGranularityCharLevel
       1 -> WdGranularityWordLevel
       x -> WdGranularityList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdGranularity: illegal enum value "
  
instance Variant (WdGranularity) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdMergeFormatFrom
 = WdMergeFormatFromList__ [WdMergeFormatFrom]
 | WdMergeFormatFromOriginal
 | WdMergeFormatFromRevised
 | WdMergeFormatFromPrompt
 
instance Flags (WdMergeFormatFrom) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdMergeFormatFrom) where
  fromEnum v =
    case v of
       (WdMergeFormatFromList__ xs) -> orList (map fromEnum xs)
       WdMergeFormatFromOriginal -> 0
       WdMergeFormatFromRevised -> 1
       WdMergeFormatFromPrompt -> 2
  
  toEnum v =
    case v of
       0 -> WdMergeFormatFromOriginal
       1 -> WdMergeFormatFromRevised
       2 -> WdMergeFormatFromPrompt
       x -> WdMergeFormatFromList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                          then Just (toEnum (fromIntegral val))
                                                          else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdMergeFormatFrom: illegal enum value "
  
instance Variant (WdMergeFormatFrom) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdShowSourceDocuments
 = WdShowSourceDocumentsNone
 | WdShowSourceDocumentsOriginal
 | WdShowSourceDocumentsRevised
 | WdShowSourceDocumentsBoth
 deriving (Enum)
instance Variant (WdShowSourceDocuments) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdPasteOptions
 = WdKeepSourceFormatting
 | WdMatchDestinationFormatting
 | WdKeepTextOnly
 | WdUseDestinationStyles
 deriving (Enum)
instance Variant (WdPasteOptions) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdBuildingBlockTypes
 = WdTypeQuickParts
 | WdTypeCoverPage
 | WdTypeEquations
 | WdTypeFooters
 | WdTypeHeaders
 | WdTypePageNumber
 | WdTypeTables
 | WdTypeWatermarks
 | WdTypeAutoText
 | WdTypeTextBox
 | WdTypePageNumberTop
 | WdTypePageNumberBottom
 | WdTypePageNumberPage
 | WdTypeTableOfContents
 | WdTypeCustomQuickParts
 | WdTypeCustomCoverPage
 | WdTypeCustomEquations
 | WdTypeCustomFooters
 | WdTypeCustomHeaders
 | WdTypeCustomPageNumber
 | WdTypeCustomTables
 | WdTypeCustomWatermarks
 | WdTypeCustomAutoText
 | WdTypeCustomTextBox
 | WdTypeCustomPageNumberTop
 | WdTypeCustomPageNumberBottom
 | WdTypeCustomPageNumberPage
 | WdTypeCustomTableOfContents
 | WdTypeCustom1
 | WdTypeCustom2
 | WdTypeCustom3
 | WdTypeCustom4
 | WdTypeCustom5
 | WdTypeBibliography
 | WdTypeCustomBibliography
 
instance Enum (WdBuildingBlockTypes) where
  fromEnum v =
    case v of
       WdTypeQuickParts -> 1
       WdTypeCoverPage -> 2
       WdTypeEquations -> 3
       WdTypeFooters -> 4
       WdTypeHeaders -> 5
       WdTypePageNumber -> 6
       WdTypeTables -> 7
       WdTypeWatermarks -> 8
       WdTypeAutoText -> 9
       WdTypeTextBox -> 10
       WdTypePageNumberTop -> 11
       WdTypePageNumberBottom -> 12
       WdTypePageNumberPage -> 13
       WdTypeTableOfContents -> 14
       WdTypeCustomQuickParts -> 15
       WdTypeCustomCoverPage -> 16
       WdTypeCustomEquations -> 17
       WdTypeCustomFooters -> 18
       WdTypeCustomHeaders -> 19
       WdTypeCustomPageNumber -> 20
       WdTypeCustomTables -> 21
       WdTypeCustomWatermarks -> 22
       WdTypeCustomAutoText -> 23
       WdTypeCustomTextBox -> 24
       WdTypeCustomPageNumberTop -> 25
       WdTypeCustomPageNumberBottom -> 26
       WdTypeCustomPageNumberPage -> 27
       WdTypeCustomTableOfContents -> 28
       WdTypeCustom1 -> 29
       WdTypeCustom2 -> 30
       WdTypeCustom3 -> 31
       WdTypeCustom4 -> 32
       WdTypeCustom5 -> 33
       WdTypeBibliography -> 34
       WdTypeCustomBibliography -> 35
  
  toEnum v =
    case v of
       1 -> WdTypeQuickParts
       2 -> WdTypeCoverPage
       3 -> WdTypeEquations
       4 -> WdTypeFooters
       5 -> WdTypeHeaders
       6 -> WdTypePageNumber
       7 -> WdTypeTables
       8 -> WdTypeWatermarks
       9 -> WdTypeAutoText
       10 -> WdTypeTextBox
       11 -> WdTypePageNumberTop
       12 -> WdTypePageNumberBottom
       13 -> WdTypePageNumberPage
       14 -> WdTypeTableOfContents
       15 -> WdTypeCustomQuickParts
       16 -> WdTypeCustomCoverPage
       17 -> WdTypeCustomEquations
       18 -> WdTypeCustomFooters
       19 -> WdTypeCustomHeaders
       20 -> WdTypeCustomPageNumber
       21 -> WdTypeCustomTables
       22 -> WdTypeCustomWatermarks
       23 -> WdTypeCustomAutoText
       24 -> WdTypeCustomTextBox
       25 -> WdTypeCustomPageNumberTop
       26 -> WdTypeCustomPageNumberBottom
       27 -> WdTypeCustomPageNumberPage
       28 -> WdTypeCustomTableOfContents
       29 -> WdTypeCustom1
       30 -> WdTypeCustom2
       31 -> WdTypeCustom3
       32 -> WdTypeCustom4
       33 -> WdTypeCustom5
       34 -> WdTypeBibliography
       35 -> WdTypeCustomBibliography
       _ -> error "unmarshallWdBuildingBlockTypes: illegal enum value "
  
instance Variant (WdBuildingBlockTypes) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAlignmentTabRelative
 = WdAlignmentTabRelativeList__ [WdAlignmentTabRelative]
 | WdMargin
 | WdIndent
 
instance Flags (WdAlignmentTabRelative) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdAlignmentTabRelative) where
  fromEnum v =
    case v of
       (WdAlignmentTabRelativeList__ xs) -> orList (map fromEnum xs)
       WdMargin -> 0
       WdIndent -> 1
  
  toEnum v =
    case v of
       0 -> WdMargin
       1 -> WdIndent
       x -> WdAlignmentTabRelativeList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                               then Just (toEnum (fromIntegral val))
                                                               else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdAlignmentTabRelative: illegal enum value "
  
instance Variant (WdAlignmentTabRelative) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdAlignmentTabAlignment
 = WdAlignmentTabAlignmentList__ [WdAlignmentTabAlignment]
 | WdLeft
 | WdCenter
 | WdRight
 
instance Flags (WdAlignmentTabAlignment) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdAlignmentTabAlignment) where
  fromEnum v =
    case v of
       (WdAlignmentTabAlignmentList__ xs) -> orList (map fromEnum xs)
       WdLeft -> 0
       WdCenter -> 1
       WdRight -> 2
  
  toEnum v =
    case v of
       0 -> WdLeft
       1 -> WdCenter
       2 -> WdRight
       x -> WdAlignmentTabAlignmentList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                then Just (toEnum (fromIntegral val))
                                                                else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdAlignmentTabAlignment: illegal enum value "
  
instance Variant (WdAlignmentTabAlignment) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdCellColor
 = WdCellColorByAuthor
 | WdCellColorNoHighlight
 | WdCellColorPink
 | WdCellColorLightBlue
 | WdCellColorLightYellow
 | WdCellColorLightPurple
 | WdCellColorLightOrange
 | WdCellColorLightGreen
 | WdCellColorLightGray
 
instance Enum (WdCellColor) where
  fromEnum v =
    case v of
       WdCellColorByAuthor -> (-1)
       WdCellColorNoHighlight -> 0
       WdCellColorPink -> 1
       WdCellColorLightBlue -> 2
       WdCellColorLightYellow -> 3
       WdCellColorLightPurple -> 4
       WdCellColorLightOrange -> 5
       WdCellColorLightGreen -> 6
       WdCellColorLightGray -> 7
  
  toEnum v =
    case v of
       (-1) -> WdCellColorByAuthor
       0 -> WdCellColorNoHighlight
       1 -> WdCellColorPink
       2 -> WdCellColorLightBlue
       3 -> WdCellColorLightYellow
       4 -> WdCellColorLightPurple
       5 -> WdCellColorLightOrange
       6 -> WdCellColorLightGreen
       7 -> WdCellColorLightGray
       _ -> error "unmarshallWdCellColor: illegal enum value "
  
instance Variant (WdCellColor) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdTextboxTightWrap
 = WdTightNone
 | WdTightAll
 | WdTightFirstAndLastLines
 | WdTightFirstLineOnly
 | WdTightLastLineOnly
 deriving (Enum)
instance Variant (WdTextboxTightWrap) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdShapePositionRelative = WdShapePositionRelativeNone 
instance Enum (WdShapePositionRelative) where
  fromEnum v = case v of WdShapePositionRelativeNone -> (-999999)
  
  toEnum v =
    case v of
       (-999999) -> WdShapePositionRelativeNone
       _ -> error "unmarshallWdShapePositionRelative: illegal enum value "
  
instance Variant (WdShapePositionRelative) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdShapeSizeRelative = WdShapeSizeRelativeNone 
instance Enum (WdShapeSizeRelative) where
  fromEnum v = case v of WdShapeSizeRelativeNone -> (-999999)
  
  toEnum v =
    case v of
       (-999999) -> WdShapeSizeRelativeNone
       _ -> error "unmarshallWdShapeSizeRelative: illegal enum value "
  
instance Variant (WdShapeSizeRelative) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRelativeHorizontalSize
 = WdRelativeHorizontalSizeMargin
 | WdRelativeHorizontalSizePage
 | WdRelativeHorizontalSizeLeftMarginArea
 | WdRelativeHorizontalSizeRightMarginArea
 | WdRelativeHorizontalSizeInnerMarginArea
 | WdRelativeHorizontalSizeOuterMarginArea
 deriving (Enum)
instance Variant (WdRelativeHorizontalSize) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdRelativeVerticalSize
 = WdRelativeVerticalSizeMargin
 | WdRelativeVerticalSizePage
 | WdRelativeVerticalSizeTopMarginArea
 | WdRelativeVerticalSizeBottomMarginArea
 | WdRelativeVerticalSizeInnerMarginArea
 | WdRelativeVerticalSizeOuterMarginArea
 deriving (Enum)
instance Variant (WdRelativeVerticalSize) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdThemeColorIndex
 = WdNotThemeColor
 | WdThemeColorMainDark1
 | WdThemeColorMainLight1
 | WdThemeColorMainDark2
 | WdThemeColorMainLight2
 | WdThemeColorAccent1
 | WdThemeColorAccent2
 | WdThemeColorAccent3
 | WdThemeColorAccent4
 | WdThemeColorAccent5
 | WdThemeColorAccent6
 | WdThemeColorHyperlink
 | WdThemeColorHyperlinkFollowed
 | WdThemeColorBackground1
 | WdThemeColorText1
 | WdThemeColorBackground2
 | WdThemeColorText2
 
instance Enum (WdThemeColorIndex) where
  fromEnum v =
    case v of
       WdNotThemeColor -> (-1)
       WdThemeColorMainDark1 -> 0
       WdThemeColorMainLight1 -> 1
       WdThemeColorMainDark2 -> 2
       WdThemeColorMainLight2 -> 3
       WdThemeColorAccent1 -> 4
       WdThemeColorAccent2 -> 5
       WdThemeColorAccent3 -> 6
       WdThemeColorAccent4 -> 7
       WdThemeColorAccent5 -> 8
       WdThemeColorAccent6 -> 9
       WdThemeColorHyperlink -> 10
       WdThemeColorHyperlinkFollowed -> 11
       WdThemeColorBackground1 -> 12
       WdThemeColorText1 -> 13
       WdThemeColorBackground2 -> 14
       WdThemeColorText2 -> 15
  
  toEnum v =
    case v of
       (-1) -> WdNotThemeColor
       0 -> WdThemeColorMainDark1
       1 -> WdThemeColorMainLight1
       2 -> WdThemeColorMainDark2
       3 -> WdThemeColorMainLight2
       4 -> WdThemeColorAccent1
       5 -> WdThemeColorAccent2
       6 -> WdThemeColorAccent3
       7 -> WdThemeColorAccent4
       8 -> WdThemeColorAccent5
       9 -> WdThemeColorAccent6
       10 -> WdThemeColorHyperlink
       11 -> WdThemeColorHyperlinkFollowed
       12 -> WdThemeColorBackground1
       13 -> WdThemeColorText1
       14 -> WdThemeColorBackground2
       15 -> WdThemeColorText2
       _ -> error "unmarshallWdThemeColorIndex: illegal enum value "
  
instance Variant (WdThemeColorIndex) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdExportFormat
 = WdExportFormatPDF
 | WdExportFormatXPS
 
instance Enum (WdExportFormat) where
  fromEnum v =
    case v of
       WdExportFormatPDF -> 17
       WdExportFormatXPS -> 18
  
  toEnum v =
    case v of
       17 -> WdExportFormatPDF
       18 -> WdExportFormatXPS
       _ -> error "unmarshallWdExportFormat: illegal enum value "
  
instance Variant (WdExportFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdExportOptimizeFor
 = WdExportOptimizeForList__ [WdExportOptimizeFor]
 | WdExportOptimizeForPrint
 | WdExportOptimizeForOnScreen
 
instance Flags (WdExportOptimizeFor) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdExportOptimizeFor) where
  fromEnum v =
    case v of
       (WdExportOptimizeForList__ xs) -> orList (map fromEnum xs)
       WdExportOptimizeForPrint -> 0
       WdExportOptimizeForOnScreen -> 1
  
  toEnum v =
    case v of
       0 -> WdExportOptimizeForPrint
       1 -> WdExportOptimizeForOnScreen
       x -> WdExportOptimizeForList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 2 0))
       _ -> error "unmarshallWdExportOptimizeFor: illegal enum value "
  
instance Variant (WdExportOptimizeFor) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdExportCreateBookmarks
 = WdExportCreateBookmarksList__ [WdExportCreateBookmarks]
 | WdExportCreateNoBookmarks
 | WdExportCreateHeadingBookmarks
 | WdExportCreateWordBookmarks
 
instance Flags (WdExportCreateBookmarks) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdExportCreateBookmarks) where
  fromEnum v =
    case v of
       (WdExportCreateBookmarksList__ xs) -> orList (map fromEnum xs)
       WdExportCreateNoBookmarks -> 0
       WdExportCreateHeadingBookmarks -> 1
       WdExportCreateWordBookmarks -> 2
  
  toEnum v =
    case v of
       0 -> WdExportCreateNoBookmarks
       1 -> WdExportCreateHeadingBookmarks
       2 -> WdExportCreateWordBookmarks
       x -> WdExportCreateBookmarksList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                then Just (toEnum (fromIntegral val))
                                                                else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdExportCreateBookmarks: illegal enum value "
  
instance Variant (WdExportCreateBookmarks) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdExportItem
 = WdExportDocumentContent
 | WdExportDocumentWithMarkup
 
instance Enum (WdExportItem) where
  fromEnum v =
    case v of
       WdExportDocumentContent -> 0
       WdExportDocumentWithMarkup -> 7
  
  toEnum v =
    case v of
       0 -> WdExportDocumentContent
       7 -> WdExportDocumentWithMarkup
       _ -> error "unmarshallWdExportItem: illegal enum value "
  
instance Variant (WdExportItem) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdExportRange
 = WdExportAllDocument
 | WdExportSelection
 | WdExportCurrentPage
 | WdExportFromTo
 deriving (Enum)
instance Variant (WdExportRange) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdFrenchSpeller
 = WdFrenchSpellerList__ [WdFrenchSpeller]
 | WdFrenchBoth
 | WdFrenchPreReform
 | WdFrenchPostReform
 
instance Flags (WdFrenchSpeller) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdFrenchSpeller) where
  fromEnum v =
    case v of
       (WdFrenchSpellerList__ xs) -> orList (map fromEnum xs)
       WdFrenchBoth -> 0
       WdFrenchPreReform -> 1
       WdFrenchPostReform -> 2
  
  toEnum v =
    case v of
       0 -> WdFrenchBoth
       1 -> WdFrenchPreReform
       2 -> WdFrenchPostReform
       x -> WdFrenchSpellerList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                        then Just (toEnum (fromIntegral val))
                                                        else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdFrenchSpeller: illegal enum value "
  
instance Variant (WdFrenchSpeller) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdDocPartInsertOptions
 = WdDocPartInsertOptionsList__ [WdDocPartInsertOptions]
 | WdInsertContent
 | WdInsertParagraph
 | WdInsertPage
 
instance Flags (WdDocPartInsertOptions) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdDocPartInsertOptions) where
  fromEnum v =
    case v of
       (WdDocPartInsertOptionsList__ xs) -> orList (map fromEnum xs)
       WdInsertContent -> 0
       WdInsertParagraph -> 1
       WdInsertPage -> 2
  
  toEnum v =
    case v of
       0 -> WdInsertContent
       1 -> WdInsertParagraph
       2 -> WdInsertPage
       x -> WdDocPartInsertOptionsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                               then Just (toEnum (fromIntegral val))
                                                               else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdDocPartInsertOptions: illegal enum value "
  
instance Variant (WdDocPartInsertOptions) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data WdContentControlDateStorageFormat
 = WdContentControlDateStorageFormatList__ [WdContentControlDateStorageFormat]
 | WdContentControlDateStorageText
 | WdContentControlDateStorageDate
 | WdContentControlDateStorageDateTime
 
instance Flags (WdContentControlDateStorageFormat) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (WdContentControlDateStorageFormat) where
  fromEnum v =
    case v of
       (WdContentControlDateStorageFormatList__ xs) -> orList (map fromEnum xs)
       WdContentControlDateStorageText -> 0
       WdContentControlDateStorageDate -> 1
       WdContentControlDateStorageDateTime -> 2
  
  toEnum v =
    case v of
       0 -> WdContentControlDateStorageText
       1 -> WdContentControlDateStorageDate
       2 -> WdContentControlDateStorageDateTime
       x -> WdContentControlDateStorageFormatList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                                          then Just (toEnum (fromIntegral val))
                                                                          else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallWdContentControlDateStorageFormat: illegal enum value "
  
instance Variant (WdContentControlDateStorageFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
-- --------------------------------------------------
-- 
-- interface ChartData
-- 
-- --------------------------------------------------
data ChartData_ a = ChartData__ 
type ChartData a = IDispatch (ChartData_ a)
iidChartData :: IID (ChartData ())
iidChartData = mkIID "{4A304B59-31FF-42DD-B436-7FC9C5DB7559}"

getWorkbook :: ChartData a0
            -> IO (IDispatch ())
getWorkbook =
  propertyGet "Workbook"
              []
              outIDispatch

activate9 :: ChartData a0
          -> IO ()
activate9 =
  method0 "Activate"
          []

getIsLinked :: ChartData a0
            -> IO Bool
getIsLinked =
  propertyGet "IsLinked"
              []
              outBool

breakLink0 :: ChartData a0
           -> IO ()
breakLink0 =
  method0 "BreakLink"
          []

-- --------------------------------------------------
-- 
-- interface Chart
-- 
-- --------------------------------------------------
data Chart_ a = Chart__ 
type Chart a = IDispatch (Chart_ a)
iidChart :: IID (Chart ())
iidChart = mkIID "{6FFA84BB-A350-4442-BB53-A43653459A84}"

getParent296 :: Chart a0
             -> IO (IDispatch ())
getParent296 =
  propertyGet "Parent"
              []
              outIDispatch

getHasTitle :: Int32
            -> Chart a0
            -> IO Bool
getHasTitle lcid =
  propertyGet "HasTitle"
              [inInt32 lcid]
              outBool

setHasTitle :: Int32
            -> Bool
            -> Chart a0
            -> IO ()
setHasTitle lcid prop =
  propertySet "HasTitle"
              [ inInt32 lcid
              , inBool prop
              ]

getChartTitle :: Int32
              -> Chart a0
              -> IO (ChartTitle ())
getChartTitle lcid =
  propertyGet "ChartTitle"
              [inInt32 lcid]
              outIUnknown

getDepthPercent :: Int32
                -> Chart a0
                -> IO Int32
getDepthPercent lcid =
  propertyGet "DepthPercent"
              [inInt32 lcid]
              outInt32

setDepthPercent :: Int32
                -> Int32
                -> Chart a0
                -> IO ()
setDepthPercent lcid prop =
  propertySet "DepthPercent"
              [ inInt32 lcid
              , inInt32 prop
              ]

getElevation :: Int32
             -> Chart a0
             -> IO Int32
getElevation lcid =
  propertyGet "Elevation"
              [inInt32 lcid]
              outInt32

setElevation :: Int32
             -> Int32
             -> Chart a0
             -> IO ()
setElevation lcid prop =
  propertySet "Elevation"
              [ inInt32 lcid
              , inInt32 prop
              ]

getGapDepth :: Int32
            -> Chart a0
            -> IO Int32
getGapDepth lcid =
  propertyGet "GapDepth"
              [inInt32 lcid]
              outInt32

setGapDepth :: Int32
            -> Int32
            -> Chart a0
            -> IO ()
setGapDepth lcid prop =
  propertySet "GapDepth"
              [ inInt32 lcid
              , inInt32 prop
              ]

getHeightPercent :: Int32
                 -> Chart a0
                 -> IO Int32
getHeightPercent lcid =
  propertyGet "HeightPercent"
              [inInt32 lcid]
              outInt32

setHeightPercent :: Int32
                 -> Int32
                 -> Chart a0
                 -> IO ()
setHeightPercent lcid prop =
  propertySet "HeightPercent"
              [ inInt32 lcid
              , inInt32 prop
              ]

getPerspective0 :: Int32
                -> Chart a0
                -> IO Int32
getPerspective0 lcid =
  propertyGet "Perspective"
              [inInt32 lcid]
              outInt32

setPerspective0 :: Int32
                -> Int32
                -> Chart a0
                -> IO ()
setPerspective0 lcid prop =
  propertySet "Perspective"
              [ inInt32 lcid
              , inInt32 prop
              ]

getRightAngleAxes :: (Variant a1)
                  => Int32
                  -> Chart a0
                  -> IO a1
getRightAngleAxes lcid =
  propertyGet "RightAngleAxes"
              [inInt32 lcid]
              outVariant

setRightAngleAxes :: Int32
                  -> a1
                  -> Chart a0
                  -> IO ()
setRightAngleAxes lcid prop =
  propertySet "RightAngleAxes"
              [ inInt32 lcid
              , inVariant prop
              ]

getRotation1 :: (Variant a1)
             => Int32
             -> Chart a0
             -> IO a1
getRotation1 lcid =
  propertyGet "Rotation"
              [inInt32 lcid]
              outVariant

setRotation1 :: Int32
             -> a1
             -> Chart a0
             -> IO ()
setRotation1 lcid prop =
  propertySet "Rotation"
              [ inInt32 lcid
              , inVariant prop
              ]

getDisplayBlanksAs :: Int32
                   -> Chart a0
                   -> IO XlDisplayBlanksAs
getDisplayBlanksAs lcid =
  propertyGet "DisplayBlanksAs"
              [inInt32 lcid]
              outEnum

setDisplayBlanksAs :: Int32
                   -> XlDisplayBlanksAs
                   -> Chart a0
                   -> IO ()
setDisplayBlanksAs lcid prop =
  propertySet "DisplayBlanksAs"
              [ inInt32 lcid
              , inEnum prop
              ]

getChartGroups :: (Variant a1)
               => a1
               -> Int32
               -> Chart a0
               -> IO (IDispatch ())
getChartGroups index lcid =
  propertyGet "ChartGroups"
              [ inVariant index
              , inInt32 lcid
              ]
              outIDispatch

seriesCollection :: (Variant a1)
                 => a1
                 -> Int32
                 -> Chart a0
                 -> IO (IDispatch ())
seriesCollection index lcid =
  function1 "SeriesCollection"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

getSubType :: Int32
           -> Chart a0
           -> IO Int32
getSubType lcid =
  propertyGet "SubType"
              [inInt32 lcid]
              outInt32

setSubType :: Int32
           -> Int32
           -> Chart a0
           -> IO ()
setSubType lcid prop =
  propertySet "SubType"
              [ inInt32 lcid
              , inInt32 prop
              ]

getType38 :: Int32
          -> Chart a0
          -> IO Int32
getType38 lcid =
  propertyGet "Type"
              [inInt32 lcid]
              outInt32

setType11 :: Int32
          -> Int32
          -> Chart a0
          -> IO ()
setType11 lcid prop =
  propertySet "Type"
              [ inInt32 lcid
              , inInt32 prop
              ]

getCorners :: Int32
           -> Chart a0
           -> IO (Corners ())
getCorners lcid =
  propertyGet "Corners"
              [inInt32 lcid]
              outIUnknown

applyDataLabels :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10)
                => a1
                -> a2
                -> a3
                -> a4
                -> a5
                -> a6
                -> a7
                -> a8
                -> a9
                -> a10
                -> Int32
                -> Chart a0
                -> IO ()
applyDataLabels type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator lcid =
  method0 "ApplyDataLabels"
          [ inDefaultValue (inInt32 2) inVariant type0
          , inVariant legendKey
          , inVariant autoText
          , inVariant hasLeaderLines
          , inVariant showSeriesName
          , inVariant showCategoryName
          , inVariant showValue
          , inVariant showPercentage
          , inVariant showBubbleSize
          , inVariant separator
          , inInt32 lcid
          ]

getChartType :: Chart a0
             -> IO XlChartType
getChartType iptr =
  do
    prop <- allocBytes (fromIntegral sizeofXlChartType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getChartType methPtr iptr prop) 35 iptr
    doThenFree free readXlChartType prop

foreign import stdcall "dynamic" prim_Word_getChartType :: Ptr () -> Ptr () -> Ptr XlChartType -> IO Int32
setChartType :: XlChartType
             -> Chart a0
             -> IO ()
setChartType prop iptr =
  do
    prop <- marshallXlChartType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setChartType methPtr iptr prop) 36 iptr

foreign import stdcall "prim_Word_setChartType" prim_Word_setChartType :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getHasDataTable :: Chart a0
                -> IO Bool
getHasDataTable =
  propertyGet "HasDataTable"
              []
              outBool

setHasDataTable :: Bool
                -> Chart a0
                -> IO ()
setHasDataTable prop =
  propertySet "HasDataTable"
              [inBool prop]

applyCustomType :: (Variant a1)
                => XlChartType
                -> a1
                -> Chart a0
                -> IO ()
applyCustomType chartType typeName iptr =
  do
    chartType <- marshallXlChartType chartType
    typeName <- marshallVariant typeName
    invokeAndCheck (\ methPtr iptr -> prim_Word_applyCustomType methPtr iptr chartType typeName) 39 iptr

foreign import stdcall "prim_Word_applyCustomType" prim_Word_applyCustomType :: Ptr () -> Ptr () -> Ptr () -> VARIANT -> IO Int32
getChartElement :: Int32
                -> Int32
                -> Chart a0
                -> IO (Int32, Int32, Int32)
getChartElement x y =
  method3 "GetChartElement"
          [ inInt32 x
          , inInt32 y
          ]
          outInt32
          outInt32
          outInt32

setSourceData :: (Variant a1)
              => String
              -> a1
              -> Chart a0
              -> IO ()
setSourceData source plotBy =
  method0 "SetSourceData"
          [ inString source
          , inVariant plotBy
          ]

getPlotBy :: Chart a0
          -> IO XlRowCol
getPlotBy =
  propertyGet "PlotBy"
              []
              outEnum

setPlotBy :: XlRowCol
          -> Chart a0
          -> IO ()
setPlotBy prop =
  propertySet "PlotBy"
              [inEnum prop]

getHasLegend :: Int32
             -> Chart a0
             -> IO Bool
getHasLegend lcid =
  propertyGet "HasLegend"
              [inInt32 lcid]
              outBool

setHasLegend :: Int32
             -> Bool
             -> Chart a0
             -> IO ()
setHasLegend lcid prop =
  propertySet "HasLegend"
              [ inInt32 lcid
              , inBool prop
              ]

getLegend :: Int32
          -> Chart a0
          -> IO (Legend ())
getLegend lcid =
  propertyGet "Legend"
              [inInt32 lcid]
              outIUnknown

axes :: (Variant a1, Variant a2)
     => a1
     -> a2
     -> Int32
     -> Chart a0
     -> IO (IDispatch ())
axes type0 axisGroup lcid =
  function1 "Axes"
            [ inVariant type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            , inInt32 lcid
            ]
            outIDispatch

getHasAxis :: (Variant a1, Variant a2, Variant a3)
           => a2
           -> a3
           -> Int32
           -> Chart a0
           -> IO a1
getHasAxis index1 index2 lcid =
  propertyGet "HasAxis"
              [ inVariant index1
              , inVariant index2
              , inInt32 lcid
              ]
              outVariant

setHasAxis :: (Variant a1, Variant a2)
           => a1
           -> a2
           -> Int32
           -> a3
           -> Chart a0
           -> IO ()
setHasAxis index1 index2 lcid prop =
  propertySet "HasAxis"
              [ inVariant index1
              , inVariant index2
              , inInt32 lcid
              , inVariant prop
              ]

getWalls :: Int32
         -> Chart a0
         -> IO (Walls ())
getWalls lcid =
  propertyGet "Walls"
              [inInt32 lcid]
              outIUnknown

getFloor :: Int32
         -> Chart a0
         -> IO (Floor ())
getFloor lcid =
  propertyGet "Floor"
              [inInt32 lcid]
              outIUnknown

getPlotArea :: Int32
            -> Chart a0
            -> IO (PlotArea ())
getPlotArea lcid =
  propertyGet "PlotArea"
              [inInt32 lcid]
              outIUnknown

getPlotVisibleOnly :: Int32
                   -> Chart a0
                   -> IO Bool
getPlotVisibleOnly lcid =
  propertyGet "PlotVisibleOnly"
              [inInt32 lcid]
              outBool

setPlotVisibleOnly :: Int32
                   -> Bool
                   -> Chart a0
                   -> IO ()
setPlotVisibleOnly lcid prop =
  propertySet "PlotVisibleOnly"
              [ inInt32 lcid
              , inBool prop
              ]

getChartArea :: Int32
             -> Chart a0
             -> IO (ChartArea ())
getChartArea lcid =
  propertyGet "ChartArea"
              [inInt32 lcid]
              outIUnknown

autoFormat2 :: (Variant a1)
            => Int32
            -> a1
            -> Chart a0
            -> IO ()
autoFormat2 gallery format =
  method0 "AutoFormat"
          [ inInt32 gallery
          , inVariant format
          ]

getAutoScaling :: Int32
               -> Chart a0
               -> IO Bool
getAutoScaling lcid =
  propertyGet "AutoScaling"
              [inInt32 lcid]
              outBool

setAutoScaling :: Int32
               -> Bool
               -> Chart a0
               -> IO ()
setAutoScaling lcid prop =
  propertySet "AutoScaling"
              [ inInt32 lcid
              , inBool prop
              ]

setBackgroundPicture :: String
                     -> Chart a0
                     -> IO ()
setBackgroundPicture fileName =
  method0 "SetBackgroundPicture"
          [inString fileName]

chartWizard :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
            => a1
            -> a2
            -> a3
            -> a4
            -> a5
            -> a6
            -> a7
            -> a8
            -> a9
            -> a10
            -> a11
            -> Int32
            -> Chart a0
            -> IO ()
chartWizard source gallery format plotBy categoryLabels seriesLabels hasLegend title categoryTitle valueTitle extraTitle lcid =
  method0 "ChartWizard"
          [ inVariant source
          , inVariant gallery
          , inVariant format
          , inVariant plotBy
          , inVariant categoryLabels
          , inVariant seriesLabels
          , inVariant hasLegend
          , inVariant title
          , inVariant categoryTitle
          , inVariant valueTitle
          , inVariant extraTitle
          , inInt32 lcid
          ]

copyPicture :: (Variant a1, Variant a2, Variant a3)
            => a1
            -> a2
            -> a3
            -> Int32
            -> Chart a0
            -> IO ()
copyPicture appearance format size lcid =
  method0 "CopyPicture"
          [ inDefaultValue (inInt32 1) inVariant appearance
          , inDefaultValue (inInt32 (-4147)) inVariant format
          , inDefaultValue (inInt32 2) inVariant size
          , inInt32 lcid
          ]

getDataTable :: Chart a0
             -> IO (DataTable ())
getDataTable =
  propertyGet "DataTable"
              []
              outIUnknown

paste1 :: (Variant a1)
       => a1
       -> Int32
       -> Chart a0
       -> IO ()
paste1 type0 lcid =
  method0 "Paste"
          [ inVariant type0
          , inInt32 lcid
          ]

getBarShape :: Chart a0
            -> IO XlBarShape
getBarShape =
  propertyGet "BarShape"
              []
              outEnum

setBarShape :: XlBarShape
            -> Chart a0
            -> IO ()
setBarShape prop =
  propertySet "BarShape"
              [inEnum prop]

export :: (Variant a1, Variant a2)
       => String
       -> a1
       -> a2
       -> Chart a0
       -> IO Bool
export fileName filterName interactive =
  function1 "Export"
            [ inString fileName
            , inVariant filterName
            , inVariant interactive
            ]
            outBool

setDefaultChart :: a1
                -> Chart a0
                -> IO ()
setDefaultChart name =
  method0 "SetDefaultChart"
          [inVariant name]

applyChartTemplate :: String
                   -> Chart a0
                   -> IO ()
applyChartTemplate fileName =
  method0 "ApplyChartTemplate"
          [inString fileName]

saveChartTemplate :: String
                  -> Chart a0
                  -> IO ()
saveChartTemplate fileName =
  method0 "SaveChartTemplate"
          [inString fileName]

getSideWall :: Chart a0
            -> IO (Walls ())
getSideWall =
  propertyGet "SideWall"
              []
              outIUnknown

getBackWall :: Chart a0
            -> IO (Walls ())
getBackWall =
  propertyGet "BackWall"
              []
              outIUnknown

getChartStyle :: (Variant a1)
              => Chart a0
              -> IO a1
getChartStyle =
  propertyGet "ChartStyle"
              []
              outVariant

setChartStyle :: a1
              -> Chart a0
              -> IO ()
setChartStyle prop =
  propertySet "ChartStyle"
              [inVariant prop]

clearToMatchStyle :: Chart a0
                  -> IO ()
clearToMatchStyle =
  method0 "ClearToMatchStyle"
          []

getPivotLayout :: Chart a0
               -> IO (IDispatch ())
getPivotLayout =
  propertyGet "PivotLayout"
              []
              outIDispatch

getHasPivotFields :: Chart a0
                  -> IO Bool
getHasPivotFields =
  propertyGet "HasPivotFields"
              []
              outBool

setHasPivotFields :: Bool
                  -> Chart a0
                  -> IO ()
setHasPivotFields prop =
  propertySet "HasPivotFields"
              [inBool prop]

getShowDataLabelsOverMaximum :: Chart a0
                             -> IO Bool
getShowDataLabelsOverMaximum =
  propertyGet "ShowDataLabelsOverMaximum"
              []
              outBool

setShowDataLabelsOverMaximum :: Bool
                             -> Chart a0
                             -> IO ()
setShowDataLabelsOverMaximum prop =
  propertySet "ShowDataLabelsOverMaximum"
              [inBool prop]

applyLayout :: (Variant a1)
            => Int32
            -> a1
            -> Chart a0
            -> IO ()
applyLayout layout chartType =
  method0 "ApplyLayout"
          [ inInt32 layout
          , inVariant chartType
          ]

refresh :: Chart a0
        -> IO ()
refresh =
  method0 "Refresh"
          []

setElement :: MsoChartElementType
           -> Chart a0
           -> IO ()
setElement element iptr =
  do
    element <- marshallMsoChartElementType element
    invokeAndCheck (\ methPtr iptr -> prim_Word_setElement methPtr iptr element) 82 iptr

foreign import stdcall "prim_Word_setElement" prim_Word_setElement :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getChartData :: Chart a0
             -> IO (ChartData ())
getChartData =
  propertyGet "ChartData"
              []
              outIDispatch

getShapes1 :: Chart a0
           -> IO (IDispatch ())
getShapes1 =
  propertyGet "Shapes"
              []
              outIDispatch

getApplication296 :: Chart a0
                  -> IO (IDispatch ())
getApplication296 =
  propertyGet "Application"
              []
              outIDispatch

getCreator296 :: Chart a0
              -> IO Int32
getCreator296 =
  propertyGet "Creator"
              []
              outInt32

getArea3DGroup :: Int32
               -> Chart a0
               -> IO (ChartGroup ())
getArea3DGroup lcid =
  propertyGet "Area3DGroup"
              [inInt32 lcid]
              outIUnknown

areaGroups :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
areaGroups index lcid =
  function1 "AreaGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

getBar3DGroup :: Int32
              -> Chart a0
              -> IO (ChartGroup ())
getBar3DGroup lcid =
  propertyGet "Bar3DGroup"
              [inInt32 lcid]
              outIUnknown

barGroups :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
barGroups index lcid =
  function1 "BarGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

getColumn3DGroup :: Int32
                 -> Chart a0
                 -> IO (ChartGroup ())
getColumn3DGroup lcid =
  propertyGet "Column3DGroup"
              [inInt32 lcid]
              outIUnknown

columnGroups :: (Variant a1)
             => a1
             -> Int32
             -> Chart a0
             -> IO (IDispatch ())
columnGroups index lcid =
  function1 "ColumnGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

getLine3DGroup :: Int32
               -> Chart a0
               -> IO (ChartGroup ())
getLine3DGroup lcid =
  propertyGet "Line3DGroup"
              [inInt32 lcid]
              outIUnknown

lineGroups :: (Variant a1)
           => a1
           -> Int32
           -> Chart a0
           -> IO (IDispatch ())
lineGroups index lcid =
  function1 "LineGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

getPie3DGroup :: Int32
              -> Chart a0
              -> IO (ChartGroup ())
getPie3DGroup lcid =
  propertyGet "Pie3DGroup"
              [inInt32 lcid]
              outIUnknown

pieGroups :: (Variant a1)
          => a1
          -> Int32
          -> Chart a0
          -> IO (IDispatch ())
pieGroups index lcid =
  function1 "PieGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

doughnutGroups :: (Variant a1)
               => a1
               -> Int32
               -> Chart a0
               -> IO (IDispatch ())
doughnutGroups index lcid =
  function1 "DoughnutGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

radarGroups :: (Variant a1)
            => a1
            -> Int32
            -> Chart a0
            -> IO (IDispatch ())
radarGroups index lcid =
  function1 "RadarGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

getSurfaceGroup :: Int32
                -> Chart a0
                -> IO (ChartGroup ())
getSurfaceGroup lcid =
  propertyGet "SurfaceGroup"
              [inInt32 lcid]
              outIUnknown

xYGroups :: (Variant a1)
         => a1
         -> Int32
         -> Chart a0
         -> IO (IDispatch ())
xYGroups index lcid =
  function1 "XYGroups"
            [ inVariant index
            , inInt32 lcid
            ]
            outIDispatch

delete69 :: (Variant a1)
         => Int32
         -> Chart a0
         -> IO a1
delete69 lcid =
  function1 "Delete"
            [inInt32 lcid]
            outVariant

copy10 :: (Variant a1, Variant a2)
       => a1
       -> a2
       -> Int32
       -> Chart a0
       -> IO ()
copy10 before0 after0 lcid =
  method0 "Copy"
          [ inVariant before0
          , inVariant after0
          , inInt32 lcid
          ]

select21 :: (Variant a1, Variant a2)
         => a2
         -> Int32
         -> Chart a0
         -> IO a1
select21 replace lcid =
  function1 "Select"
            [ inVariant replace
            , inInt32 lcid
            ]
            outVariant

-- --------------------------------------------------
-- 
-- interface Corners
-- 
-- --------------------------------------------------
data Corners_ a = Corners__ 
type Corners a = IDispatch (Corners_ a)
iidCorners :: IID (Corners ())
iidCorners = mkIID "{AE6D45E5-981E-4547-8752-674BB55420A5}"

getParent297 :: Corners a0
             -> IO (IDispatch ())
getParent297 =
  propertyGet "Parent"
              []
              outIDispatch

getName49 :: Corners a0
          -> IO String
getName49 =
  propertyGet "Name"
              []
              outString

select22 :: (Variant a1)
         => Corners a0
         -> IO a1
select22 =
  function1 "Select"
            []
            outVariant

getApplication297 :: Corners a0
                  -> IO (IDispatch ())
getApplication297 =
  propertyGet "Application"
              []
              outIDispatch

getCreator297 :: Corners a0
              -> IO Int32
getCreator297 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Legend
-- 
-- --------------------------------------------------
data Legend_ a = Legend__ 
type Legend a = IDispatch (Legend_ a)
iidLegend :: IID (Legend ())
iidLegend = mkIID "{B3A1E8C6-E1CE-4A46-8D12-E017157B03D7}"

getParent298 :: Legend a0
             -> IO (IDispatch ())
getParent298 =
  propertyGet "Parent"
              []
              outIDispatch

getName50 :: Legend a0
          -> IO String
getName50 =
  propertyGet "Name"
              []
              outString

select23 :: (Variant a1)
         => Legend a0
         -> IO a1
select23 =
  function1 "Select"
            []
            outVariant

getBorder0 :: Legend a0
           -> IO (ChartBorder ())
getBorder0 =
  propertyGet "Border"
              []
              outIUnknown

delete70 :: (Variant a1)
         => Legend a0
         -> IO a1
delete70 =
  function1 "Delete"
            []
            outVariant

getFont6 :: Legend a0
         -> IO (ChartFont ())
getFont6 =
  propertyGet "Font"
              []
              outIUnknown

legendEntries :: (Variant a1)
              => a1
              -> Legend a0
              -> IO (IDispatch ())
legendEntries index =
  function1 "LegendEntries"
            [inVariant index]
            outIDispatch

getPosition3 :: Legend a0
             -> IO XlLegendPosition
getPosition3 =
  propertyGet "Position"
              []
              outEnum

setPosition4 :: XlLegendPosition
             -> Legend a0
             -> IO ()
setPosition4 prop =
  propertySet "Position"
              [inEnum prop]

getShadow4 :: Legend a0
           -> IO Bool
getShadow4 =
  propertyGet "Shadow"
              []
              outBool

setShadow1 :: Bool
           -> Legend a0
           -> IO ()
setShadow1 prop =
  propertySet "Shadow"
              [inBool prop]

clear5 :: (Variant a1)
       => Legend a0
       -> IO a1
clear5 =
  function1 "Clear"
            []
            outVariant

getHeight16 :: Legend a0
            -> IO Double
getHeight16 =
  propertyGet "Height"
              []
              outDouble

setHeight17 :: Double
            -> Legend a0
            -> IO ()
setHeight17 prop =
  propertySet "Height"
              [inDouble prop]

getInterior :: Legend a0
            -> IO (Interior ())
getInterior =
  propertyGet "Interior"
              []
              outIUnknown

getFill2 :: Legend a0
         -> IO (ChartFillFormat ())
getFill2 =
  propertyGet "Fill"
              []
              outIUnknown

getLeft8 :: Legend a0
         -> IO Double
getLeft8 =
  propertyGet "Left"
              []
              outDouble

setLeft5 :: Double
         -> Legend a0
         -> IO ()
setLeft5 prop =
  propertySet "Left"
              [inDouble prop]

getTop8 :: Legend a0
        -> IO Double
getTop8 =
  propertyGet "Top"
              []
              outDouble

setTop5 :: Double
        -> Legend a0
        -> IO ()
setTop5 prop =
  propertySet "Top"
              [inDouble prop]

getWidth19 :: Legend a0
           -> IO Double
getWidth19 =
  propertyGet "Width"
              []
              outDouble

setWidth20 :: Double
           -> Legend a0
           -> IO ()
setWidth20 prop =
  propertySet "Width"
              [inDouble prop]

getAutoScaleFont :: (Variant a1)
                 => Legend a0
                 -> IO a1
getAutoScaleFont =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont :: a1
                 -> Legend a0
                 -> IO ()
setAutoScaleFont prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getIncludeInLayout :: Legend a0
                   -> IO Bool
getIncludeInLayout =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout :: Bool
                   -> Legend a0
                   -> IO ()
setIncludeInLayout prop =
  propertySet "IncludeInLayout"
              [inBool prop]

getFormat7 :: Legend a0
           -> IO (ChartFormat ())
getFormat7 =
  propertyGet "Format"
              []
              outIUnknown

getApplication298 :: Legend a0
                  -> IO (IDispatch ())
getApplication298 =
  propertyGet "Application"
              []
              outIDispatch

getCreator298 :: Legend a0
              -> IO Int32
getCreator298 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface ChartBorder
-- 
-- --------------------------------------------------
data ChartBorder_ a = ChartBorder__ 
type ChartBorder a = IDispatch (ChartBorder_ a)
iidChartBorder :: IID (ChartBorder ())
iidChartBorder = mkIID "{AB0D33A3-C9EA-485B-9443-4C1BB3656CEA}"

getColor2 :: (Variant a1)
          => ChartBorder a0
          -> IO a1
getColor2 =
  propertyGet "Color"
              []
              outVariant

setColor1 :: a1
          -> ChartBorder a0
          -> IO ()
setColor1 prop =
  propertySet "Color"
              [inVariant prop]

getColorIndex1 :: (Variant a1)
               => ChartBorder a0
               -> IO a1
getColorIndex1 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex1 :: a1
               -> ChartBorder a0
               -> IO ()
setColorIndex1 prop =
  propertySet "ColorIndex"
              [inVariant prop]

getLineStyle0 :: (Variant a1)
              => ChartBorder a0
              -> IO a1
getLineStyle0 =
  propertyGet "LineStyle"
              []
              outVariant

setLineStyle0 :: a1
              -> ChartBorder a0
              -> IO ()
setLineStyle0 prop =
  propertySet "LineStyle"
              [inVariant prop]

getWeight0 :: (Variant a1)
           => ChartBorder a0
           -> IO a1
getWeight0 =
  propertyGet "Weight"
              []
              outVariant

setWeight0 :: a1
           -> ChartBorder a0
           -> IO ()
setWeight0 prop =
  propertySet "Weight"
              [inVariant prop]

getApplication299 :: ChartBorder a0
                  -> IO (IDispatch ())
getApplication299 =
  propertyGet "Application"
              []
              outIDispatch

getCreator299 :: ChartBorder a0
              -> IO Int32
getCreator299 =
  propertyGet "Creator"
              []
              outInt32

getParent299 :: ChartBorder a0
             -> IO (IDispatch ())
getParent299 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface Walls
-- 
-- --------------------------------------------------
data Walls_ a = Walls__ 
type Walls a = IDispatch (Walls_ a)
iidWalls :: IID (Walls ())
iidWalls = mkIID "{A2E94180-7564-4D97-806B-BBC0D0A1350C}"

getName51 :: Walls a0
          -> IO String
getName51 =
  propertyGet "Name"
              []
              outString

select24 :: (Variant a1)
         => Walls a0
         -> IO a1
select24 =
  function1 "Select"
            []
            outVariant

getParent300 :: Walls a0
             -> IO (IDispatch ())
getParent300 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder1 :: Walls a0
           -> IO (ChartBorder ())
getBorder1 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats :: (Variant a1)
             => Walls a0
             -> IO a1
clearFormats =
  function1 "ClearFormats"
            []
            outVariant

getInterior0 :: Walls a0
             -> IO (Interior ())
getInterior0 =
  propertyGet "Interior"
              []
              outIUnknown

getFill3 :: Walls a0
         -> IO (ChartFillFormat ())
getFill3 =
  propertyGet "Fill"
              []
              outIUnknown

getPictureType :: (Variant a1)
               => Walls a0
               -> IO a1
getPictureType =
  propertyGet "PictureType"
              []
              outVariant

setPictureType :: a1
               -> Walls a0
               -> IO ()
setPictureType prop =
  propertySet "PictureType"
              [inVariant prop]

paste2 :: Walls a0
       -> IO ()
paste2 =
  method0 "Paste"
          []

getPictureUnit :: (Variant a1)
               => Walls a0
               -> IO a1
getPictureUnit =
  propertyGet "PictureUnit"
              []
              outVariant

setPictureUnit :: a1
               -> Walls a0
               -> IO ()
setPictureUnit prop =
  propertySet "PictureUnit"
              [inVariant prop]

getThickness :: Walls a0
             -> IO Int32
getThickness =
  propertyGet "Thickness"
              []
              outInt32

setThickness :: Int32
             -> Walls a0
             -> IO ()
setThickness prop =
  propertySet "Thickness"
              [inInt32 prop]

getFormat8 :: Walls a0
           -> IO (ChartFormat ())
getFormat8 =
  propertyGet "Format"
              []
              outIUnknown

getApplication300 :: Walls a0
                  -> IO (IDispatch ())
getApplication300 =
  propertyGet "Application"
              []
              outIDispatch

getCreator300 :: Walls a0
              -> IO Int32
getCreator300 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Floor
-- 
-- --------------------------------------------------
data Floor_ a = Floor__ 
type Floor a = IDispatch (Floor_ a)
iidFloor :: IID (Floor ())
iidFloor = mkIID "{7E64D2BE-2818-48CB-8F8A-CC7B61D9E860}"

getName52 :: Floor a0
          -> IO String
getName52 =
  propertyGet "Name"
              []
              outString

select25 :: (Variant a1)
         => Floor a0
         -> IO a1
select25 =
  function1 "Select"
            []
            outVariant

getParent301 :: Floor a0
             -> IO (IDispatch ())
getParent301 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder2 :: Floor a0
           -> IO (ChartBorder ())
getBorder2 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats0 :: (Variant a1)
              => Floor a0
              -> IO a1
clearFormats0 =
  function1 "ClearFormats"
            []
            outVariant

getInterior1 :: Floor a0
             -> IO (Interior ())
getInterior1 =
  propertyGet "Interior"
              []
              outIUnknown

getFill4 :: Floor a0
         -> IO (ChartFillFormat ())
getFill4 =
  propertyGet "Fill"
              []
              outIUnknown

getPictureType0 :: (Variant a1)
                => Floor a0
                -> IO a1
getPictureType0 =
  propertyGet "PictureType"
              []
              outVariant

setPictureType0 :: a1
                -> Floor a0
                -> IO ()
setPictureType0 prop =
  propertySet "PictureType"
              [inVariant prop]

paste3 :: Floor a0
       -> IO ()
paste3 =
  method0 "Paste"
          []

getThickness0 :: Floor a0
              -> IO Int32
getThickness0 =
  propertyGet "Thickness"
              []
              outInt32

setThickness0 :: Int32
              -> Floor a0
              -> IO ()
setThickness0 prop =
  propertySet "Thickness"
              [inInt32 prop]

getFormat9 :: Floor a0
           -> IO (ChartFormat ())
getFormat9 =
  propertyGet "Format"
              []
              outIUnknown

getApplication301 :: Floor a0
                  -> IO (IDispatch ())
getApplication301 =
  propertyGet "Application"
              []
              outIDispatch

getCreator301 :: Floor a0
              -> IO Int32
getCreator301 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface PlotArea
-- 
-- --------------------------------------------------
data PlotArea_ a = PlotArea__ 
type PlotArea a = IDispatch (PlotArea_ a)
iidPlotArea :: IID (PlotArea ())
iidPlotArea = mkIID "{56AFD330-440C-4F4C-A39C-ED306D084D5F}"

getName53 :: PlotArea a0
          -> IO String
getName53 =
  propertyGet "Name"
              []
              outString

select26 :: (Variant a1)
         => PlotArea a0
         -> IO a1
select26 =
  function1 "Select"
            []
            outVariant

getParent302 :: PlotArea a0
             -> IO (IDispatch ())
getParent302 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder3 :: PlotArea a0
           -> IO (ChartBorder ())
getBorder3 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats1 :: (Variant a1)
              => PlotArea a0
              -> IO a1
clearFormats1 =
  function1 "ClearFormats"
            []
            outVariant

getHeight17 :: PlotArea a0
            -> IO Double
getHeight17 =
  propertyGet "Height"
              []
              outDouble

setHeight18 :: Double
            -> PlotArea a0
            -> IO ()
setHeight18 prop =
  propertySet "Height"
              [inDouble prop]

getInterior2 :: PlotArea a0
             -> IO (Interior ())
getInterior2 =
  propertyGet "Interior"
              []
              outIUnknown

getFill5 :: PlotArea a0
         -> IO (ChartFillFormat ())
getFill5 =
  propertyGet "Fill"
              []
              outIUnknown

getLeft9 :: PlotArea a0
         -> IO Double
getLeft9 =
  propertyGet "Left"
              []
              outDouble

setLeft6 :: Double
         -> PlotArea a0
         -> IO ()
setLeft6 prop =
  propertySet "Left"
              [inDouble prop]

getTop9 :: PlotArea a0
        -> IO Double
getTop9 =
  propertyGet "Top"
              []
              outDouble

setTop6 :: Double
        -> PlotArea a0
        -> IO ()
setTop6 prop =
  propertySet "Top"
              [inDouble prop]

getWidth20 :: PlotArea a0
           -> IO Double
getWidth20 =
  propertyGet "Width"
              []
              outDouble

setWidth21 :: Double
           -> PlotArea a0
           -> IO ()
setWidth21 prop =
  propertySet "Width"
              [inDouble prop]

getInsideLeft :: PlotArea a0
              -> IO Double
getInsideLeft =
  propertyGet "InsideLeft"
              []
              outDouble

setInsideLeft :: Double
              -> PlotArea a0
              -> IO ()
setInsideLeft prop =
  propertySet "InsideLeft"
              [inDouble prop]

getInsideTop :: PlotArea a0
             -> IO Double
getInsideTop =
  propertyGet "InsideTop"
              []
              outDouble

setInsideTop :: Double
             -> PlotArea a0
             -> IO ()
setInsideTop prop =
  propertySet "InsideTop"
              [inDouble prop]

getInsideWidth :: PlotArea a0
               -> IO Double
getInsideWidth =
  propertyGet "InsideWidth"
              []
              outDouble

setInsideWidth :: Double
               -> PlotArea a0
               -> IO ()
setInsideWidth prop =
  propertySet "InsideWidth"
              [inDouble prop]

getInsideHeight :: PlotArea a0
                -> IO Double
getInsideHeight =
  propertyGet "InsideHeight"
              []
              outDouble

setInsideHeight :: Double
                -> PlotArea a0
                -> IO ()
setInsideHeight prop =
  propertySet "InsideHeight"
              [inDouble prop]

getPosition4 :: PlotArea a0
             -> IO XlChartElementPosition
getPosition4 =
  propertyGet "Position"
              []
              outEnum

setPosition5 :: XlChartElementPosition
             -> PlotArea a0
             -> IO ()
setPosition5 prop =
  propertySet "Position"
              [inEnum prop]

getFormat10 :: PlotArea a0
            -> IO (ChartFormat ())
getFormat10 =
  propertyGet "Format"
              []
              outIUnknown

getApplication302 :: PlotArea a0
                  -> IO (IDispatch ())
getApplication302 =
  propertyGet "Application"
              []
              outIDispatch

getCreator302 :: PlotArea a0
              -> IO Int32
getCreator302 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface ChartArea
-- 
-- --------------------------------------------------
data ChartArea_ a = ChartArea__ 
type ChartArea a = IDispatch (ChartArea_ a)
iidChartArea :: IID (ChartArea ())
iidChartArea = mkIID "{C75AD98A-74E9-49FE-8BF1-544839CC08A5}"

getName54 :: ChartArea a0
          -> IO String
getName54 =
  propertyGet "Name"
              []
              outString

select27 :: (Variant a1)
         => ChartArea a0
         -> IO a1
select27 =
  function1 "Select"
            []
            outVariant

getParent303 :: ChartArea a0
             -> IO (IDispatch ())
getParent303 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder4 :: ChartArea a0
           -> IO (ChartBorder ())
getBorder4 =
  propertyGet "Border"
              []
              outIDispatch

clear6 :: (Variant a1)
       => ChartArea a0
       -> IO a1
clear6 =
  function1 "Clear"
            []
            outVariant

clearContents :: (Variant a1)
              => ChartArea a0
              -> IO a1
clearContents =
  function1 "ClearContents"
            []
            outVariant

copy11 :: (Variant a1)
       => ChartArea a0
       -> IO a1
copy11 =
  function1 "Copy"
            []
            outVariant

getFont7 :: ChartArea a0
         -> IO (ChartFont ())
getFont7 =
  propertyGet "Font"
              []
              outIUnknown

getShadow5 :: ChartArea a0
           -> IO Bool
getShadow5 =
  propertyGet "Shadow"
              []
              outBool

setShadow2 :: Bool
           -> ChartArea a0
           -> IO ()
setShadow2 prop =
  propertySet "Shadow"
              [inBool prop]

clearFormats2 :: (Variant a1)
              => ChartArea a0
              -> IO a1
clearFormats2 =
  function1 "ClearFormats"
            []
            outVariant

getHeight18 :: ChartArea a0
            -> IO Double
getHeight18 =
  propertyGet "Height"
              []
              outDouble

setHeight19 :: Double
            -> ChartArea a0
            -> IO ()
setHeight19 prop =
  propertySet "Height"
              [inDouble prop]

getInterior3 :: ChartArea a0
             -> IO (Interior ())
getInterior3 =
  propertyGet "Interior"
              []
              outIUnknown

getFill6 :: ChartArea a0
         -> IO (ChartFillFormat ())
getFill6 =
  propertyGet "Fill"
              []
              outIUnknown

getLeft10 :: ChartArea a0
          -> IO Double
getLeft10 =
  propertyGet "Left"
              []
              outDouble

setLeft7 :: Double
         -> ChartArea a0
         -> IO ()
setLeft7 prop =
  propertySet "Left"
              [inDouble prop]

getTop10 :: ChartArea a0
         -> IO Double
getTop10 =
  propertyGet "Top"
              []
              outDouble

setTop7 :: Double
        -> ChartArea a0
        -> IO ()
setTop7 prop =
  propertySet "Top"
              [inDouble prop]

getWidth21 :: ChartArea a0
           -> IO Double
getWidth21 =
  propertyGet "Width"
              []
              outDouble

setWidth22 :: Double
           -> ChartArea a0
           -> IO ()
setWidth22 prop =
  propertySet "Width"
              [inDouble prop]

getAutoScaleFont0 :: (Variant a1)
                  => ChartArea a0
                  -> IO a1
getAutoScaleFont0 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont0 :: a1
                  -> ChartArea a0
                  -> IO ()
setAutoScaleFont0 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getFormat11 :: ChartArea a0
            -> IO (ChartFormat ())
getFormat11 =
  propertyGet "Format"
              []
              outIUnknown

getApplication303 :: ChartArea a0
                  -> IO (IDispatch ())
getApplication303 =
  propertyGet "Application"
              []
              outIDispatch

getCreator303 :: ChartArea a0
              -> IO Int32
getCreator303 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface SeriesLines
-- 
-- --------------------------------------------------
data SeriesLines_ a = SeriesLines__ 
type SeriesLines a = IDispatch (SeriesLines_ a)
iidSeriesLines :: IID (SeriesLines ())
iidSeriesLines = mkIID "{5D7F6C15-36CE-44CC-9692-5A1F8B8C906D}"

getName55 :: SeriesLines a0
          -> IO String
getName55 =
  propertyGet "Name"
              []
              outString

select28 :: (Variant a1)
         => SeriesLines a0
         -> IO a1
select28 =
  function1 "Select"
            []
            outVariant

getParent304 :: SeriesLines a0
             -> IO (IDispatch ())
getParent304 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder5 :: SeriesLines a0
           -> IO (ChartBorder ())
getBorder5 =
  propertyGet "Border"
              []
              outIDispatch

delete71 :: (Variant a1)
         => SeriesLines a0
         -> IO a1
delete71 =
  function1 "Delete"
            []
            outVariant

getFormat12 :: SeriesLines a0
            -> IO (ChartFormat ())
getFormat12 =
  propertyGet "Format"
              []
              outIUnknown

getApplication304 :: SeriesLines a0
                  -> IO (IDispatch ())
getApplication304 =
  propertyGet "Application"
              []
              outIDispatch

getCreator304 :: SeriesLines a0
              -> IO Int32
getCreator304 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface LeaderLines
-- 
-- --------------------------------------------------
data LeaderLines_ a = LeaderLines__ 
type LeaderLines a = IDispatch (LeaderLines_ a)
iidLeaderLines :: IID (LeaderLines ())
iidLeaderLines = mkIID "{36162C62-B59A-4278-AF3D-F2AC1EB999D9}"

select29 :: LeaderLines a0
         -> IO ()
select29 =
  method0 "Select"
          []

getBorder6 :: LeaderLines a0
           -> IO (ChartBorder ())
getBorder6 =
  propertyGet "Border"
              []
              outIDispatch

delete72 :: LeaderLines a0
         -> IO ()
delete72 =
  method0 "Delete"
          []

getFormat13 :: LeaderLines a0
            -> IO (ChartFormat ())
getFormat13 =
  propertyGet "Format"
              []
              outIUnknown

getApplication305 :: LeaderLines a0
                  -> IO (IDispatch ())
getApplication305 =
  propertyGet "Application"
              []
              outIDispatch

getCreator305 :: LeaderLines a0
              -> IO Int32
getCreator305 =
  propertyGet "Creator"
              []
              outInt32

getParent305 :: LeaderLines a0
             -> IO (IDispatch ())
getParent305 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface Gridlines
-- 
-- --------------------------------------------------
data Gridlines_ a = Gridlines__ 
type Gridlines a = IDispatch (Gridlines_ a)
iidGridlines :: IID (Gridlines ())
iidGridlines = mkIID "{FC9090AF-0DDB-4EC1-86E8-8751F2199F2C}"

getName56 :: Gridlines a0
          -> IO String
getName56 =
  propertyGet "Name"
              []
              outString

select30 :: (Variant a1)
         => Gridlines a0
         -> IO a1
select30 =
  function1 "Select"
            []
            outVariant

getParent306 :: Gridlines a0
             -> IO (IDispatch ())
getParent306 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder7 :: Gridlines a0
           -> IO (ChartBorder ())
getBorder7 =
  propertyGet "Border"
              []
              outIDispatch

delete73 :: (Variant a1)
         => Gridlines a0
         -> IO a1
delete73 =
  function1 "Delete"
            []
            outVariant

getFormat14 :: Gridlines a0
            -> IO (ChartFormat ())
getFormat14 =
  propertyGet "Format"
              []
              outIUnknown

getApplication306 :: Gridlines a0
                  -> IO (IDispatch ())
getApplication306 =
  propertyGet "Application"
              []
              outIDispatch

getCreator306 :: Gridlines a0
              -> IO Int32
getCreator306 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface UpBars
-- 
-- --------------------------------------------------
data UpBars_ a = UpBars__ 
type UpBars a = IDispatch (UpBars_ a)
iidUpBars :: IID (UpBars ())
iidUpBars = mkIID "{86905AC9-33F3-4A88-96C8-B289B0390BCA}"

getName57 :: UpBars a0
          -> IO String
getName57 =
  propertyGet "Name"
              []
              outString

select31 :: (Variant a1)
         => UpBars a0
         -> IO a1
select31 =
  function1 "Select"
            []
            outVariant

getParent307 :: UpBars a0
             -> IO (IDispatch ())
getParent307 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder8 :: UpBars a0
           -> IO (ChartBorder ())
getBorder8 =
  propertyGet "Border"
              []
              outIDispatch

delete74 :: (Variant a1)
         => UpBars a0
         -> IO a1
delete74 =
  function1 "Delete"
            []
            outVariant

getInterior4 :: UpBars a0
             -> IO (Interior ())
getInterior4 =
  propertyGet "Interior"
              []
              outIUnknown

getFill7 :: UpBars a0
         -> IO (ChartFillFormat ())
getFill7 =
  propertyGet "Fill"
              []
              outIUnknown

getFormat15 :: UpBars a0
            -> IO (ChartFormat ())
getFormat15 =
  propertyGet "Format"
              []
              outIUnknown

getApplication307 :: UpBars a0
                  -> IO (IDispatch ())
getApplication307 =
  propertyGet "Application"
              []
              outIDispatch

getCreator307 :: UpBars a0
              -> IO Int32
getCreator307 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface DownBars
-- 
-- --------------------------------------------------
data DownBars_ a = DownBars__ 
type DownBars a = IDispatch (DownBars_ a)
iidDownBars :: IID (DownBars ())
iidDownBars = mkIID "{84A6A663-AEF4-4FCD-83FD-9BB707F157CA}"

getName58 :: DownBars a0
          -> IO String
getName58 =
  propertyGet "Name"
              []
              outString

select32 :: (Variant a1)
         => DownBars a0
         -> IO a1
select32 =
  function1 "Select"
            []
            outVariant

getParent308 :: DownBars a0
             -> IO (IDispatch ())
getParent308 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder9 :: DownBars a0
           -> IO (ChartBorder ())
getBorder9 =
  propertyGet "Border"
              []
              outIDispatch

delete75 :: (Variant a1)
         => DownBars a0
         -> IO a1
delete75 =
  function1 "Delete"
            []
            outVariant

getInterior5 :: DownBars a0
             -> IO (Interior ())
getInterior5 =
  propertyGet "Interior"
              []
              outIUnknown

getFill8 :: DownBars a0
         -> IO (ChartFillFormat ())
getFill8 =
  propertyGet "Fill"
              []
              outIUnknown

getFormat16 :: DownBars a0
            -> IO (ChartFormat ())
getFormat16 =
  propertyGet "Format"
              []
              outIUnknown

getApplication308 :: DownBars a0
                  -> IO (IDispatch ())
getApplication308 =
  propertyGet "Application"
              []
              outIDispatch

getCreator308 :: DownBars a0
              -> IO Int32
getCreator308 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Interior
-- 
-- --------------------------------------------------
data Interior_ a = Interior__ 
type Interior a = IDispatch (Interior_ a)
iidInterior :: IID (Interior ())
iidInterior = mkIID "{B184502B-587A-4C6A-8DC4-ECE4354883C6}"

getColor3 :: (Variant a1)
          => Interior a0
          -> IO a1
getColor3 =
  propertyGet "Color"
              []
              outVariant

setColor2 :: a1
          -> Interior a0
          -> IO ()
setColor2 prop =
  propertySet "Color"
              [inVariant prop]

getColorIndex2 :: (Variant a1)
               => Interior a0
               -> IO a1
getColorIndex2 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex2 :: a1
               -> Interior a0
               -> IO ()
setColorIndex2 prop =
  propertySet "ColorIndex"
              [inVariant prop]

getInvertIfNegative :: (Variant a1)
                    => Interior a0
                    -> IO a1
getInvertIfNegative =
  propertyGet "InvertIfNegative"
              []
              outVariant

setInvertIfNegative :: a1
                    -> Interior a0
                    -> IO ()
setInvertIfNegative prop =
  propertySet "InvertIfNegative"
              [inVariant prop]

getPattern1 :: (Variant a1)
            => Interior a0
            -> IO a1
getPattern1 =
  propertyGet "Pattern"
              []
              outVariant

setPattern0 :: a1
            -> Interior a0
            -> IO ()
setPattern0 prop =
  propertySet "Pattern"
              [inVariant prop]

getPatternColor :: (Variant a1)
                => Interior a0
                -> IO a1
getPatternColor =
  propertyGet "PatternColor"
              []
              outVariant

setPatternColor :: a1
                -> Interior a0
                -> IO ()
setPatternColor prop =
  propertySet "PatternColor"
              [inVariant prop]

getPatternColorIndex :: (Variant a1)
                     => Interior a0
                     -> IO a1
getPatternColorIndex =
  propertyGet "PatternColorIndex"
              []
              outVariant

setPatternColorIndex :: a1
                     -> Interior a0
                     -> IO ()
setPatternColorIndex prop =
  propertySet "PatternColorIndex"
              [inVariant prop]

getApplication309 :: Interior a0
                  -> IO (IDispatch ())
getApplication309 =
  propertyGet "Application"
              []
              outIDispatch

getCreator309 :: Interior a0
              -> IO Int32
getCreator309 =
  propertyGet "Creator"
              []
              outInt32

getParent309 :: Interior a0
             -> IO (IDispatch ())
getParent309 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ChartFillFormat
-- 
-- --------------------------------------------------
data ChartFillFormat_ a = ChartFillFormat__ 
type ChartFillFormat a = IDispatch (ChartFillFormat_ a)
iidChartFillFormat :: IID (ChartFillFormat ())
iidChartFillFormat = mkIID "{F152D349-7D20-4C01-A42B-2D6DE4F3891C}"

oneColorGradient0 :: MsoGradientStyle
                  -> Int32
                  -> Float
                  -> ChartFillFormat a0
                  -> IO ()
oneColorGradient0 style variant degree iptr =
  do
    style <- marshallMsoGradientStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Word_oneColorGradient0 methPtr iptr style variant degree) 7 iptr

foreign import stdcall "prim_Word_oneColorGradient0" prim_Word_oneColorGradient0 :: Ptr () -> Ptr () -> Ptr () -> Int32 -> Float -> IO Int32
twoColorGradient0 :: MsoGradientStyle
                  -> Int32
                  -> ChartFillFormat a0
                  -> IO ()
twoColorGradient0 style variant iptr =
  do
    style <- marshallMsoGradientStyle style
    invokeAndCheck (\ methPtr iptr -> prim_Word_twoColorGradient0 methPtr iptr style variant) 8 iptr

foreign import stdcall "prim_Word_twoColorGradient0" prim_Word_twoColorGradient0 :: Ptr () -> Ptr () -> Ptr () -> Int32 -> IO Int32
presetTextured0 :: MsoPresetTexture
                -> ChartFillFormat a0
                -> IO ()
presetTextured0 presetTexture iptr =
  do
    presetTexture <- marshallMsoPresetTexture presetTexture
    invokeAndCheck (\ methPtr iptr -> prim_Word_presetTextured0 methPtr iptr presetTexture) 9 iptr

foreign import stdcall "prim_Word_presetTextured0" prim_Word_presetTextured0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
solid0 :: ChartFillFormat a0
       -> IO ()
solid0 =
  method0 "Solid"
          []

patterned0 :: MsoPatternType
           -> ChartFillFormat a0
           -> IO ()
patterned0 pattern iptr =
  do
    pattern <- marshallMsoPatternType pattern
    invokeAndCheck (\ methPtr iptr -> prim_Word_patterned0 methPtr iptr pattern) 11 iptr

foreign import stdcall "prim_Word_patterned0" prim_Word_patterned0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
userPicture0 :: (Variant a1, Variant a2, Variant a3, Variant a4)
             => a1
             -> a2
             -> a3
             -> a4
             -> ChartFillFormat a0
             -> IO ()
userPicture0 pictureFile pictureFormat pictureStackUnit picturePlacement =
  method0 "UserPicture"
          [ inVariant pictureFile
          , inVariant pictureFormat
          , inVariant pictureStackUnit
          , inVariant picturePlacement
          ]

userTextured0 :: String
              -> ChartFillFormat a0
              -> IO ()
userTextured0 textureFile =
  method0 "UserTextured"
          [inString textureFile]

presetGradient0 :: MsoGradientStyle
                -> Int32
                -> MsoPresetGradientType
                -> ChartFillFormat a0
                -> IO ()
presetGradient0 style variant presetGradientType iptr =
  do
    style <- marshallMsoGradientStyle style
    presetGradientType <- marshallMsoPresetGradientType presetGradientType
    invokeAndCheck (\ methPtr iptr -> prim_Word_presetGradient0 methPtr iptr style variant presetGradientType) 14 iptr

foreign import stdcall "prim_Word_presetGradient0" prim_Word_presetGradient0 :: Ptr () -> Ptr () -> Ptr () -> Int32 -> Ptr () -> IO Int32
getBackColor1 :: ChartFillFormat a0
              -> IO (ChartColorFormat ())
getBackColor1 =
  propertyGet "BackColor"
              []
              outIUnknown

getForeColor2 :: ChartFillFormat a0
              -> IO (ChartColorFormat ())
getForeColor2 =
  propertyGet "ForeColor"
              []
              outIUnknown

getGradientColorType0 :: ChartFillFormat a0
                      -> IO MsoGradientColorType
getGradientColorType0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoGradientColorType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getGradientColorType methPtr iptr prop) 17 iptr
    doThenFree free readMsoGradientColorType prop

getGradientDegree0 :: ChartFillFormat a0
                   -> IO Float
getGradientDegree0 =
  propertyGet "GradientDegree"
              []
              outFloat

getGradientStyle0 :: ChartFillFormat a0
                  -> IO MsoGradientStyle
getGradientStyle0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoGradientStyle)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getGradientStyle methPtr iptr prop) 19 iptr
    doThenFree free readMsoGradientStyle prop

getGradientVariant0 :: ChartFillFormat a0
                    -> IO Int32
getGradientVariant0 =
  propertyGet "GradientVariant"
              []
              outInt32

getPattern2 :: ChartFillFormat a0
            -> IO MsoPatternType
getPattern2 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPatternType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPattern methPtr iptr prop) 21 iptr
    doThenFree free readMsoPatternType prop

getPresetGradientType0 :: ChartFillFormat a0
                       -> IO MsoPresetGradientType
getPresetGradientType0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetGradientType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetGradientType methPtr iptr prop) 22 iptr
    doThenFree free readMsoPresetGradientType prop

getPresetTexture0 :: ChartFillFormat a0
                  -> IO MsoPresetTexture
getPresetTexture0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoPresetTexture)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getPresetTexture methPtr iptr prop) 23 iptr
    doThenFree free readMsoPresetTexture prop

getTextureName0 :: ChartFillFormat a0
                -> IO String
getTextureName0 =
  propertyGet "TextureName"
              []
              outString

getTextureType0 :: ChartFillFormat a0
                -> IO MsoTextureType
getTextureType0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTextureType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTextureType methPtr iptr prop) 25 iptr
    doThenFree free readMsoTextureType prop

getType39 :: ChartFillFormat a0
          -> IO MsoFillType
getType39 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoFillType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getType24 methPtr iptr prop) 26 iptr
    doThenFree free readMsoFillType prop

getVisible11 :: ChartFillFormat a0
             -> IO MsoTriState
getVisible11 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofMsoTriState)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getConnector methPtr iptr prop) 27 iptr
    doThenFree free readMsoTriState prop

setVisible11 :: MsoTriState
             -> ChartFillFormat a0
             -> IO ()
setVisible11 prop iptr =
  do
    prop <- marshallMsoTriState prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setVisible11 methPtr iptr prop) 28 iptr

foreign import stdcall "prim_Word_setVisible11" prim_Word_setVisible11 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getApplication310 :: ChartFillFormat a0
                  -> IO (IDispatch ())
getApplication310 =
  propertyGet "Application"
              []
              outIDispatch

getCreator310 :: ChartFillFormat a0
              -> IO Int32
getCreator310 =
  propertyGet "Creator"
              []
              outInt32

getParent310 :: ChartFillFormat a0
             -> IO (IDispatch ())
getParent310 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface LegendEntries
-- 
-- --------------------------------------------------
data LegendEntries_ a = LegendEntries__ 
type LegendEntries a = IDispatch (LegendEntries_ a)
iidLegendEntries :: IID (LegendEntries ())
iidLegendEntries = mkIID "{B6511068-70BF-4751-A741-55C1D41AD96F}"

getParent311 :: LegendEntries a0
             -> IO (IDispatch ())
getParent311 =
  propertyGet "Parent"
              []
              outIDispatch

getCount114 :: LegendEntries a0
            -> IO Int32
getCount114 =
  propertyGet "Count"
              []
              outInt32

item114 :: a1
        -> LegendEntries a0
        -> IO (LegendEntry ())
item114 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

newEnum :: LegendEntries a0
        -> IO (IUnknown ())
newEnum =
  function1 "_NewEnum"
            []
            outIUnknown

getApplication311 :: LegendEntries a0
                  -> IO (IDispatch ())
getApplication311 =
  propertyGet "Application"
              []
              outIDispatch

getCreator311 :: LegendEntries a0
              -> IO Int32
getCreator311 =
  propertyGet "Creator"
              []
              outInt32

default0 :: a1
         -> LegendEntries a0
         -> IO (LegendEntry ())
default0 index =
  function1 "_Default"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface ChartFont
-- 
-- --------------------------------------------------
data ChartFont_ a = ChartFont__ 
type ChartFont a = IDispatch (ChartFont_ a)
iidChartFont :: IID (ChartFont ())
iidChartFont = mkIID "{CDB0FF41-E862-47BB-AE77-3FA7B1AE3189}"

getBackground0 :: (Variant a1)
               => ChartFont a0
               -> IO a1
getBackground0 =
  propertyGet "Background"
              []
              outVariant

setBackground0 :: a1
               -> ChartFont a0
               -> IO ()
setBackground0 prop =
  propertySet "Background"
              [inVariant prop]

getBold1 :: (Variant a1)
         => ChartFont a0
         -> IO a1
getBold1 =
  propertyGet "Bold"
              []
              outVariant

setBold1 :: a1
         -> ChartFont a0
         -> IO ()
setBold1 prop =
  propertySet "Bold"
              [inVariant prop]

getColor4 :: (Variant a1)
          => ChartFont a0
          -> IO a1
getColor4 =
  propertyGet "Color"
              []
              outVariant

setColor3 :: a1
          -> ChartFont a0
          -> IO ()
setColor3 prop =
  propertySet "Color"
              [inVariant prop]

getColorIndex3 :: (Variant a1)
               => ChartFont a0
               -> IO a1
getColorIndex3 =
  propertyGet "ColorIndex"
              []
              outVariant

setColorIndex3 :: a1
               -> ChartFont a0
               -> IO ()
setColorIndex3 prop =
  propertySet "ColorIndex"
              [inVariant prop]

getFontStyle :: (Variant a1)
             => ChartFont a0
             -> IO a1
getFontStyle =
  propertyGet "FontStyle"
              []
              outVariant

setFontStyle :: a1
             -> ChartFont a0
             -> IO ()
setFontStyle prop =
  propertySet "FontStyle"
              [inVariant prop]

getItalic1 :: (Variant a1)
           => ChartFont a0
           -> IO a1
getItalic1 =
  propertyGet "Italic"
              []
              outVariant

setItalic1 :: a1
           -> ChartFont a0
           -> IO ()
setItalic1 prop =
  propertySet "Italic"
              [inVariant prop]

getName59 :: (Variant a1)
          => ChartFont a0
          -> IO a1
getName59 =
  propertyGet "Name"
              []
              outVariant

setName14 :: a1
          -> ChartFont a0
          -> IO ()
setName14 prop =
  propertySet "Name"
              [inVariant prop]

getOutlineFont :: (Variant a1)
               => ChartFont a0
               -> IO a1
getOutlineFont =
  propertyGet "OutlineFont"
              []
              outVariant

setOutlineFont :: a1
               -> ChartFont a0
               -> IO ()
setOutlineFont prop =
  propertySet "OutlineFont"
              [inVariant prop]

getShadow6 :: (Variant a1)
           => ChartFont a0
           -> IO a1
getShadow6 =
  propertyGet "Shadow"
              []
              outVariant

setShadow3 :: a1
           -> ChartFont a0
           -> IO ()
setShadow3 prop =
  propertySet "Shadow"
              [inVariant prop]

getSize2 :: (Variant a1)
         => ChartFont a0
         -> IO a1
getSize2 =
  propertyGet "Size"
              []
              outVariant

setSize2 :: a1
         -> ChartFont a0
         -> IO ()
setSize2 prop =
  propertySet "Size"
              [inVariant prop]

getStrikeThrough0 :: (Variant a1)
                  => ChartFont a0
                  -> IO a1
getStrikeThrough0 =
  propertyGet "StrikeThrough"
              []
              outVariant

setStrikeThrough0 :: a1
                  -> ChartFont a0
                  -> IO ()
setStrikeThrough0 prop =
  propertySet "StrikeThrough"
              [inVariant prop]

getSubscript0 :: (Variant a1)
              => ChartFont a0
              -> IO a1
getSubscript0 =
  propertyGet "Subscript"
              []
              outVariant

setSubscript0 :: a1
              -> ChartFont a0
              -> IO ()
setSubscript0 prop =
  propertySet "Subscript"
              [inVariant prop]

getSuperscript0 :: (Variant a1)
                => ChartFont a0
                -> IO a1
getSuperscript0 =
  propertyGet "Superscript"
              []
              outVariant

setSuperscript0 :: a1
                -> ChartFont a0
                -> IO ()
setSuperscript0 prop =
  propertySet "Superscript"
              [inVariant prop]

getUnderline1 :: (Variant a1)
              => ChartFont a0
              -> IO a1
getUnderline1 =
  propertyGet "Underline"
              []
              outVariant

setUnderline1 :: a1
              -> ChartFont a0
              -> IO ()
setUnderline1 prop =
  propertySet "Underline"
              [inVariant prop]

getApplication312 :: ChartFont a0
                  -> IO (IDispatch ())
getApplication312 =
  propertyGet "Application"
              []
              outIDispatch

getCreator312 :: ChartFont a0
              -> IO Int32
getCreator312 =
  propertyGet "Creator"
              []
              outInt32

getParent312 :: ChartFont a0
             -> IO (IDispatch ())
getParent312 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ChartColorFormat
-- 
-- --------------------------------------------------
data ChartColorFormat_ a = ChartColorFormat__ 
type ChartColorFormat a = IDispatch (ChartColorFormat_ a)
iidChartColorFormat :: IID (ChartColorFormat ())
iidChartColorFormat =
  mkIID "{DD8F80B8-9B80-4E89-9BEC-F12DF35E43B3}"

getParent313 :: ChartColorFormat a0
             -> IO (IDispatch ())
getParent313 =
  propertyGet "Parent"
              []
              outIDispatch

getSchemeColor0 :: ChartColorFormat a0
                -> IO Int32
getSchemeColor0 =
  propertyGet "SchemeColor"
              []
              outInt32

setSchemeColor0 :: Int32
                -> ChartColorFormat a0
                -> IO ()
setSchemeColor0 prop =
  propertySet "SchemeColor"
              [inInt32 prop]

getRGB0 :: ChartColorFormat a0
        -> IO Int32
getRGB0 =
  propertyGet "RGB"
              []
              outInt32

getDefault2 :: ChartColorFormat a0
            -> IO Int32
getDefault2 =
  propertyGet "_Default"
              []
              outInt32

getType40 :: ChartColorFormat a0
          -> IO Int32
getType40 =
  propertyGet "Type"
              []
              outInt32

getApplication313 :: ChartColorFormat a0
                  -> IO (IDispatch ())
getApplication313 =
  propertyGet "Application"
              []
              outIDispatch

getCreator313 :: ChartColorFormat a0
              -> IO Int32
getCreator313 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface LegendEntry
-- 
-- --------------------------------------------------
data LegendEntry_ a = LegendEntry__ 
type LegendEntry a = IDispatch (LegendEntry_ a)
iidLegendEntry :: IID (LegendEntry ())
iidLegendEntry = mkIID "{C4A02049-024C-4273-8934-E48CC21479A9}"

getParent314 :: LegendEntry a0
             -> IO (IDispatch ())
getParent314 =
  propertyGet "Parent"
              []
              outIDispatch

delete76 :: (Variant a1)
         => LegendEntry a0
         -> IO a1
delete76 =
  function1 "Delete"
            []
            outVariant

getFont8 :: LegendEntry a0
         -> IO (ChartFont ())
getFont8 =
  propertyGet "Font"
              []
              outIDispatch

getIndex37 :: LegendEntry a0
           -> IO Int32
getIndex37 =
  propertyGet "Index"
              []
              outInt32

getLegendKey :: LegendEntry a0
             -> IO (LegendKey ())
getLegendKey =
  propertyGet "LegendKey"
              []
              outIUnknown

select33 :: (Variant a1)
         => LegendEntry a0
         -> IO a1
select33 =
  function1 "Select"
            []
            outVariant

getAutoScaleFont1 :: (Variant a1)
                  => LegendEntry a0
                  -> IO a1
getAutoScaleFont1 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont1 :: a1
                  -> LegendEntry a0
                  -> IO ()
setAutoScaleFont1 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getLeft11 :: LegendEntry a0
          -> IO Double
getLeft11 =
  propertyGet "Left"
              []
              outDouble

getTop11 :: LegendEntry a0
         -> IO Double
getTop11 =
  propertyGet "Top"
              []
              outDouble

getWidth22 :: LegendEntry a0
           -> IO Double
getWidth22 =
  propertyGet "Width"
              []
              outDouble

getHeight19 :: LegendEntry a0
            -> IO Double
getHeight19 =
  propertyGet "Height"
              []
              outDouble

getFormat17 :: LegendEntry a0
            -> IO (ChartFormat ())
getFormat17 =
  propertyGet "Format"
              []
              outIUnknown

getApplication314 :: LegendEntry a0
                  -> IO (IDispatch ())
getApplication314 =
  propertyGet "Application"
              []
              outIDispatch

getCreator314 :: LegendEntry a0
              -> IO Int32
getCreator314 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface LegendKey
-- 
-- --------------------------------------------------
data LegendKey_ a = LegendKey__ 
type LegendKey a = IDispatch (LegendKey_ a)
iidLegendKey :: IID (LegendKey ())
iidLegendKey = mkIID "{DF076FDE-8781-4051-A5BC-99F6B7DC04D4}"

getParent315 :: LegendKey a0
             -> IO (IDispatch ())
getParent315 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder10 :: LegendKey a0
            -> IO (ChartBorder ())
getBorder10 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats3 :: (Variant a1)
              => LegendKey a0
              -> IO a1
clearFormats3 =
  function1 "ClearFormats"
            []
            outVariant

delete77 :: (Variant a1)
         => LegendKey a0
         -> IO a1
delete77 =
  function1 "Delete"
            []
            outVariant

getInterior6 :: LegendKey a0
             -> IO (Interior ())
getInterior6 =
  propertyGet "Interior"
              []
              outIDispatch

getFill9 :: LegendKey a0
         -> IO (ChartFillFormat ())
getFill9 =
  propertyGet "Fill"
              []
              outIDispatch

getInvertIfNegative0 :: LegendKey a0
                     -> IO Bool
getInvertIfNegative0 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative0 :: Bool
                     -> LegendKey a0
                     -> IO ()
setInvertIfNegative0 prop =
  propertySet "InvertIfNegative"
              [inBool prop]

getMarkerBackgroundColor :: LegendKey a0
                         -> IO Int32
getMarkerBackgroundColor =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor :: Int32
                         -> LegendKey a0
                         -> IO ()
setMarkerBackgroundColor prop =
  propertySet "MarkerBackgroundColor"
              [inInt32 prop]

getMarkerBackgroundColorIndex :: LegendKey a0
                              -> IO XlColorIndex
getMarkerBackgroundColorIndex =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex :: XlColorIndex
                              -> LegendKey a0
                              -> IO ()
setMarkerBackgroundColorIndex prop =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum prop]

getMarkerForegroundColor :: LegendKey a0
                         -> IO Int32
getMarkerForegroundColor =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor :: Int32
                         -> LegendKey a0
                         -> IO ()
setMarkerForegroundColor prop =
  propertySet "MarkerForegroundColor"
              [inInt32 prop]

getMarkerForegroundColorIndex :: LegendKey a0
                              -> IO XlColorIndex
getMarkerForegroundColorIndex =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex :: XlColorIndex
                              -> LegendKey a0
                              -> IO ()
setMarkerForegroundColorIndex prop =
  propertySet "MarkerForegroundColorIndex"
              [inEnum prop]

getMarkerSize :: LegendKey a0
              -> IO Int32
getMarkerSize =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize :: Int32
              -> LegendKey a0
              -> IO ()
setMarkerSize prop =
  propertySet "MarkerSize"
              [inInt32 prop]

getMarkerStyle :: LegendKey a0
               -> IO XlMarkerStyle
getMarkerStyle =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle :: XlMarkerStyle
               -> LegendKey a0
               -> IO ()
setMarkerStyle prop =
  propertySet "MarkerStyle"
              [inEnum prop]

getPictureType1 :: LegendKey a0
                -> IO Int32
getPictureType1 =
  propertyGet "PictureType"
              []
              outInt32

setPictureType1 :: Int32
                -> LegendKey a0
                -> IO ()
setPictureType1 prop =
  propertySet "PictureType"
              [inInt32 prop]

getPictureUnit0 :: LegendKey a0
                -> IO Double
getPictureUnit0 =
  propertyGet "PictureUnit"
              []
              outDouble

setPictureUnit0 :: Double
                -> LegendKey a0
                -> IO ()
setPictureUnit0 prop =
  propertySet "PictureUnit"
              [inDouble prop]

select34 :: (Variant a1)
         => LegendKey a0
         -> IO a1
select34 =
  function1 "Select"
            []
            outVariant

getSmooth :: LegendKey a0
          -> IO Bool
getSmooth =
  propertyGet "Smooth"
              []
              outBool

setSmooth :: Bool
          -> LegendKey a0
          -> IO ()
setSmooth prop =
  propertySet "Smooth"
              [inBool prop]

getLeft12 :: LegendKey a0
          -> IO Double
getLeft12 =
  propertyGet "Left"
              []
              outDouble

getTop12 :: LegendKey a0
         -> IO Double
getTop12 =
  propertyGet "Top"
              []
              outDouble

getWidth23 :: LegendKey a0
           -> IO Double
getWidth23 =
  propertyGet "Width"
              []
              outDouble

getHeight20 :: LegendKey a0
            -> IO Double
getHeight20 =
  propertyGet "Height"
              []
              outDouble

getShadow7 :: LegendKey a0
           -> IO Bool
getShadow7 =
  propertyGet "Shadow"
              []
              outBool

setShadow4 :: Bool
           -> LegendKey a0
           -> IO ()
setShadow4 prop =
  propertySet "Shadow"
              [inBool prop]

getFormat18 :: LegendKey a0
            -> IO (ChartFormat ())
getFormat18 =
  propertyGet "Format"
              []
              outIUnknown

getApplication315 :: LegendKey a0
                  -> IO (IDispatch ())
getApplication315 =
  propertyGet "Application"
              []
              outIDispatch

getCreator315 :: LegendKey a0
              -> IO Int32
getCreator315 =
  propertyGet "Creator"
              []
              outInt32

getPictureUnit2 :: LegendKey a0
                -> IO Double
getPictureUnit2 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit2 :: Double
                -> LegendKey a0
                -> IO ()
setPictureUnit2 prop =
  propertySet "PictureUnit2"
              [inDouble prop]

-- --------------------------------------------------
-- 
-- interface SeriesCollection
-- 
-- --------------------------------------------------
data SeriesCollection_ a = SeriesCollection__ 
type SeriesCollection a = IDispatch (SeriesCollection_ a)
iidSeriesCollection :: IID (SeriesCollection ())
iidSeriesCollection =
  mkIID "{8FEB78F7-35C6-4871-918C-193C3CDD886D}"

getParent316 :: SeriesCollection a0
             -> IO (IDispatch ())
getParent316 =
  propertyGet "Parent"
              []
              outIDispatch

add66 :: (Variant a2, Variant a3, Variant a4, Variant a5)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> SeriesCollection a0
      -> IO (Series ())
add66 source rowcol seriesLabels categoryLabels replace =
  function1 "Add"
            [ inVariant source
            , inDefaultValue (inInt32 2) inVariant rowcol
            , inVariant seriesLabels
            , inVariant categoryLabels
            , inVariant replace
            ]
            outIUnknown

getCount115 :: SeriesCollection a0
            -> IO Int32
getCount115 =
  propertyGet "Count"
              []
              outInt32

extend0 :: (Variant a1, Variant a3, Variant a4)
        => a2
        -> a3
        -> a4
        -> SeriesCollection a0
        -> IO a1
extend0 source rowcol categoryLabels =
  function1 "Extend"
            [ inVariant source
            , inVariant rowcol
            , inVariant categoryLabels
            ]
            outVariant

item115 :: a1
        -> SeriesCollection a0
        -> IO (Series ())
item115 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

newEnum0 :: SeriesCollection a0
         -> IO (IUnknown ())
newEnum0 =
  function1 "_NewEnum"
            []
            outIUnknown

newSeries :: SeriesCollection a0
          -> IO (Series ())
newSeries =
  function1 "NewSeries"
            []
            outIUnknown

getApplication316 :: SeriesCollection a0
                  -> IO (IDispatch ())
getApplication316 =
  propertyGet "Application"
              []
              outIDispatch

getCreator316 :: SeriesCollection a0
              -> IO Int32
getCreator316 =
  propertyGet "Creator"
              []
              outInt32

default1 :: a1
         -> SeriesCollection a0
         -> IO (Series ())
default1 index =
  function1 "_Default"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Series
-- 
-- --------------------------------------------------
data Series_ a = Series__ 
type Series a = IDispatch (Series_ a)
iidSeries :: IID (Series ())
iidSeries = mkIID "{40810760-068A-4486-BEC9-8EA58C7029F5}"

getParent317 :: Series a0
             -> IO (IDispatch ())
getParent317 =
  propertyGet "Parent"
              []
              outIDispatch

getAxisGroup :: Series a0
             -> IO XlAxisGroup
getAxisGroup =
  propertyGet "AxisGroup"
              []
              outEnum

setAxisGroup :: XlAxisGroup
             -> Series a0
             -> IO ()
setAxisGroup prop =
  propertySet "AxisGroup"
              [inEnum prop]

getBorder11 :: Series a0
            -> IO (ChartBorder ())
getBorder11 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats4 :: (Variant a1)
              => Series a0
              -> IO a1
clearFormats4 =
  function1 "ClearFormats"
            []
            outVariant

copy12 :: (Variant a1)
       => Series a0
       -> IO a1
copy12 =
  function1 "Copy"
            []
            outVariant

dataLabels :: (Variant a1)
           => a1
           -> Series a0
           -> IO (IDispatch ())
dataLabels index =
  function1 "DataLabels"
            [inVariant index]
            outIDispatch

delete78 :: (Variant a1)
         => Series a0
         -> IO a1
delete78 =
  function1 "Delete"
            []
            outVariant

errorBar :: (Variant a1, Variant a2, Variant a3)
         => XlErrorBarDirection
         -> XlErrorBarInclude
         -> XlErrorBarType
         -> a2
         -> a3
         -> Series a0
         -> IO a1
errorBar direction include type0 amount minusValues =
  function1 "ErrorBar"
            [ inEnum direction
            , inEnum include
            , inEnum type0
            , inVariant amount
            , inVariant minusValues
            ]
            outVariant

getErrorBars :: Series a0
             -> IO (ErrorBars ())
getErrorBars =
  propertyGet "ErrorBars"
              []
              outIUnknown

getExplosion :: Series a0
             -> IO Int32
getExplosion =
  propertyGet "Explosion"
              []
              outInt32

setExplosion :: Int32
             -> Series a0
             -> IO ()
setExplosion prop =
  propertySet "Explosion"
              [inInt32 prop]

getFormula :: Series a0
           -> IO String
getFormula =
  propertyGet "Formula"
              []
              outString

setFormula :: String
           -> Series a0
           -> IO ()
setFormula prop =
  propertySet "Formula"
              [inString prop]

getFormulaLocal :: Series a0
                -> IO String
getFormulaLocal =
  propertyGet "FormulaLocal"
              []
              outString

setFormulaLocal :: String
                -> Series a0
                -> IO ()
setFormulaLocal prop =
  propertySet "FormulaLocal"
              [inString prop]

getFormulaR1C1 :: Series a0
               -> IO String
getFormulaR1C1 =
  propertyGet "FormulaR1C1"
              []
              outString

setFormulaR1C1 :: String
               -> Series a0
               -> IO ()
setFormulaR1C1 prop =
  propertySet "FormulaR1C1"
              [inString prop]

getFormulaR1C1Local :: Series a0
                    -> IO String
getFormulaR1C1Local =
  propertyGet "FormulaR1C1Local"
              []
              outString

setFormulaR1C1Local :: String
                    -> Series a0
                    -> IO ()
setFormulaR1C1Local prop =
  propertySet "FormulaR1C1Local"
              [inString prop]

getHasDataLabels :: Series a0
                 -> IO Bool
getHasDataLabels =
  propertyGet "HasDataLabels"
              []
              outBool

setHasDataLabels :: Bool
                 -> Series a0
                 -> IO ()
setHasDataLabels prop =
  propertySet "HasDataLabels"
              [inBool prop]

getHasErrorBars :: Series a0
                -> IO Bool
getHasErrorBars =
  propertyGet "HasErrorBars"
              []
              outBool

setHasErrorBars :: Bool
                -> Series a0
                -> IO ()
setHasErrorBars prop =
  propertySet "HasErrorBars"
              [inBool prop]

getInterior7 :: Series a0
             -> IO (Interior ())
getInterior7 =
  propertyGet "Interior"
              []
              outIDispatch

getFill10 :: Series a0
          -> IO (ChartFillFormat ())
getFill10 =
  propertyGet "Fill"
              []
              outIDispatch

getInvertIfNegative1 :: Series a0
                     -> IO Bool
getInvertIfNegative1 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative1 :: Bool
                     -> Series a0
                     -> IO ()
setInvertIfNegative1 prop =
  propertySet "InvertIfNegative"
              [inBool prop]

getMarkerBackgroundColor0 :: Series a0
                          -> IO Int32
getMarkerBackgroundColor0 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor0 :: Int32
                          -> Series a0
                          -> IO ()
setMarkerBackgroundColor0 prop =
  propertySet "MarkerBackgroundColor"
              [inInt32 prop]

getMarkerBackgroundColorIndex0 :: Series a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex0 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex0 :: XlColorIndex
                               -> Series a0
                               -> IO ()
setMarkerBackgroundColorIndex0 prop =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum prop]

getMarkerForegroundColor0 :: Series a0
                          -> IO Int32
getMarkerForegroundColor0 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor0 :: Int32
                          -> Series a0
                          -> IO ()
setMarkerForegroundColor0 prop =
  propertySet "MarkerForegroundColor"
              [inInt32 prop]

getMarkerForegroundColorIndex0 :: Series a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex0 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex0 :: XlColorIndex
                               -> Series a0
                               -> IO ()
setMarkerForegroundColorIndex0 prop =
  propertySet "MarkerForegroundColorIndex"
              [inEnum prop]

getMarkerSize0 :: Series a0
               -> IO Int32
getMarkerSize0 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize0 :: Int32
               -> Series a0
               -> IO ()
setMarkerSize0 prop =
  propertySet "MarkerSize"
              [inInt32 prop]

getMarkerStyle0 :: Series a0
                -> IO XlMarkerStyle
getMarkerStyle0 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle0 :: XlMarkerStyle
                -> Series a0
                -> IO ()
setMarkerStyle0 prop =
  propertySet "MarkerStyle"
              [inEnum prop]

getName60 :: Series a0
          -> IO String
getName60 =
  propertyGet "Name"
              []
              outString

setName15 :: String
          -> Series a0
          -> IO ()
setName15 prop =
  propertySet "Name"
              [inString prop]

paste4 :: (Variant a1)
       => Series a0
       -> IO a1
paste4 =
  function1 "Paste"
            []
            outVariant

getPictureType2 :: Series a0
                -> IO XlChartPictureType
getPictureType2 =
  propertyGet "PictureType"
              []
              outEnum

setPictureType2 :: XlChartPictureType
                -> Series a0
                -> IO ()
setPictureType2 prop =
  propertySet "PictureType"
              [inEnum prop]

getPictureUnit1 :: Series a0
                -> IO Double
getPictureUnit1 =
  propertyGet "PictureUnit"
              []
              outDouble

setPictureUnit1 :: Double
                -> Series a0
                -> IO ()
setPictureUnit1 prop =
  propertySet "PictureUnit"
              [inDouble prop]

getPlotOrder :: Series a0
             -> IO Int32
getPlotOrder =
  propertyGet "PlotOrder"
              []
              outInt32

setPlotOrder :: Int32
             -> Series a0
             -> IO ()
setPlotOrder prop =
  propertySet "PlotOrder"
              [inInt32 prop]

points :: (Variant a1)
       => a1
       -> Series a0
       -> IO (IDispatch ())
points index =
  function1 "Points"
            [inVariant index]
            outIDispatch

select35 :: (Variant a1)
         => Series a0
         -> IO a1
select35 =
  function1 "Select"
            []
            outVariant

getSmooth0 :: Series a0
           -> IO Bool
getSmooth0 =
  propertyGet "Smooth"
              []
              outBool

setSmooth0 :: Bool
           -> Series a0
           -> IO ()
setSmooth0 prop =
  propertySet "Smooth"
              [inBool prop]

trendlines :: (Variant a1)
           => a1
           -> Series a0
           -> IO (IDispatch ())
trendlines index =
  function1 "Trendlines"
            [inVariant index]
            outIDispatch

getType41 :: Series a0
          -> IO Int32
getType41 =
  propertyGet "Type"
              []
              outInt32

setType12 :: Int32
          -> Series a0
          -> IO ()
setType12 prop =
  propertySet "Type"
              [inInt32 prop]

getChartType0 :: Series a0
              -> IO XlChartType
getChartType0 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofXlChartType)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getChartType methPtr iptr prop) 63 iptr
    doThenFree free readXlChartType prop

setChartType0 :: XlChartType
              -> Series a0
              -> IO ()
setChartType0 prop iptr =
  do
    prop <- marshallXlChartType prop
    invokeAndCheck (\ methPtr iptr -> prim_Word_setChartType0 methPtr iptr prop) 64 iptr

foreign import stdcall "prim_Word_setChartType0" prim_Word_setChartType0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
applyCustomType0 :: XlChartType
                 -> Series a0
                 -> IO ()
applyCustomType0 chartType iptr =
  do
    chartType <- marshallXlChartType chartType
    invokeAndCheck (\ methPtr iptr -> prim_Word_applyCustomType0 methPtr iptr chartType) 65 iptr

foreign import stdcall "prim_Word_applyCustomType0" prim_Word_applyCustomType0 :: Ptr () -> Ptr () -> Ptr () -> IO Int32
getValues :: (Variant a1)
          => Series a0
          -> IO a1
getValues =
  propertyGet "Values"
              []
              outVariant

setValues :: a1
          -> Series a0
          -> IO ()
setValues prop =
  propertySet "Values"
              [inVariant prop]

getXValues :: (Variant a1)
           => Series a0
           -> IO a1
getXValues =
  propertyGet "XValues"
              []
              outVariant

setXValues :: a1
           -> Series a0
           -> IO ()
setXValues prop =
  propertySet "XValues"
              [inVariant prop]

getBubbleSizes :: (Variant a1)
               => Series a0
               -> IO a1
getBubbleSizes =
  propertyGet "BubbleSizes"
              []
              outVariant

setBubbleSizes :: a1
               -> Series a0
               -> IO ()
setBubbleSizes prop =
  propertySet "BubbleSizes"
              [inVariant prop]

getBarShape0 :: Series a0
             -> IO XlBarShape
getBarShape0 =
  propertyGet "BarShape"
              []
              outEnum

setBarShape0 :: XlBarShape
             -> Series a0
             -> IO ()
setBarShape0 prop =
  propertySet "BarShape"
              [inEnum prop]

getApplyPictToSides :: Series a0
                    -> IO Bool
getApplyPictToSides =
  propertyGet "ApplyPictToSides"
              []
              outBool

setApplyPictToSides :: Bool
                    -> Series a0
                    -> IO ()
setApplyPictToSides prop =
  propertySet "ApplyPictToSides"
              [inBool prop]

getApplyPictToFront :: Series a0
                    -> IO Bool
getApplyPictToFront =
  propertyGet "ApplyPictToFront"
              []
              outBool

setApplyPictToFront :: Bool
                    -> Series a0
                    -> IO ()
setApplyPictToFront prop =
  propertySet "ApplyPictToFront"
              [inBool prop]

getApplyPictToEnd :: Series a0
                  -> IO Bool
getApplyPictToEnd =
  propertyGet "ApplyPictToEnd"
              []
              outBool

setApplyPictToEnd :: Bool
                  -> Series a0
                  -> IO ()
setApplyPictToEnd prop =
  propertySet "ApplyPictToEnd"
              [inBool prop]

getHas3DEffect :: Series a0
               -> IO Bool
getHas3DEffect =
  propertyGet "Has3DEffect"
              []
              outBool

setHas3DEffect :: Bool
               -> Series a0
               -> IO ()
setHas3DEffect prop =
  propertySet "Has3DEffect"
              [inBool prop]

getShadow8 :: Series a0
           -> IO Bool
getShadow8 =
  propertyGet "Shadow"
              []
              outBool

setShadow5 :: Bool
           -> Series a0
           -> IO ()
setShadow5 prop =
  propertySet "Shadow"
              [inBool prop]

getHasLeaderLines :: Series a0
                  -> IO Bool
getHasLeaderLines =
  propertyGet "HasLeaderLines"
              []
              outBool

setHasLeaderLines :: Bool
                  -> Series a0
                  -> IO ()
setHasLeaderLines prop =
  propertySet "HasLeaderLines"
              [inBool prop]

getLeaderLines :: Series a0
               -> IO (LeaderLines ())
getLeaderLines =
  propertyGet "LeaderLines"
              []
              outIDispatch

applyDataLabels0 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> Series a0
                 -> IO a1
applyDataLabels0 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator =
  function1 "ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            , inVariant showSeriesName
            , inVariant showCategoryName
            , inVariant showValue
            , inVariant showPercentage
            , inVariant showBubbleSize
            , inVariant separator
            ]
            outVariant

getFormat19 :: Series a0
            -> IO (ChartFormat ())
getFormat19 =
  propertyGet "Format"
              []
              outIUnknown

getApplication317 :: Series a0
                  -> IO (IDispatch ())
getApplication317 =
  propertyGet "Application"
              []
              outIDispatch

getCreator317 :: Series a0
              -> IO Int32
getCreator317 =
  propertyGet "Creator"
              []
              outInt32

getPictureUnit20 :: Series a0
                 -> IO Double
getPictureUnit20 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit20 :: Double
                 -> Series a0
                 -> IO ()
setPictureUnit20 prop =
  propertySet "PictureUnit2"
              [inDouble prop]

-- --------------------------------------------------
-- 
-- interface ErrorBars
-- 
-- --------------------------------------------------
data ErrorBars_ a = ErrorBars__ 
type ErrorBars a = IDispatch (ErrorBars_ a)
iidErrorBars :: IID (ErrorBars ())
iidErrorBars = mkIID "{194F8476-B79D-4572-A609-294207DE77C1}"

getParent318 :: ErrorBars a0
             -> IO (IDispatch ())
getParent318 =
  propertyGet "Parent"
              []
              outIDispatch

getName61 :: ErrorBars a0
          -> IO String
getName61 =
  propertyGet "Name"
              []
              outString

select36 :: (Variant a1)
         => ErrorBars a0
         -> IO a1
select36 =
  function1 "Select"
            []
            outVariant

getBorder12 :: ErrorBars a0
            -> IO (ChartBorder ())
getBorder12 =
  propertyGet "Border"
              []
              outIDispatch

delete79 :: (Variant a1)
         => ErrorBars a0
         -> IO a1
delete79 =
  function1 "Delete"
            []
            outVariant

clearFormats5 :: (Variant a1)
              => ErrorBars a0
              -> IO a1
clearFormats5 =
  function1 "ClearFormats"
            []
            outVariant

getEndStyle :: ErrorBars a0
            -> IO XlEndStyleCap
getEndStyle =
  propertyGet "EndStyle"
              []
              outEnum

setEndStyle :: XlEndStyleCap
            -> ErrorBars a0
            -> IO ()
setEndStyle prop =
  propertySet "EndStyle"
              [inEnum prop]

getFormat20 :: ErrorBars a0
            -> IO (ChartFormat ())
getFormat20 =
  propertyGet "Format"
              []
              outIUnknown

getApplication318 :: ErrorBars a0
                  -> IO (IDispatch ())
getApplication318 =
  propertyGet "Application"
              []
              outIDispatch

getCreator318 :: ErrorBars a0
              -> IO Int32
getCreator318 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Trendline
-- 
-- --------------------------------------------------
data Trendline_ a = Trendline__ 
type Trendline a = IDispatch (Trendline_ a)
iidTrendline :: IID (Trendline ())
iidTrendline = mkIID "{91C46192-3124-4346-A815-10B8873F5A06}"

getParent319 :: Trendline a0
             -> IO (IDispatch ())
getParent319 =
  propertyGet "Parent"
              []
              outIDispatch

getBackward :: Trendline a0
            -> IO Double
getBackward =
  propertyGet "Backward"
              []
              outDouble

setBackward :: Double
            -> Trendline a0
            -> IO ()
setBackward prop =
  propertySet "Backward"
              [inDouble prop]

getBorder13 :: Trendline a0
            -> IO (ChartBorder ())
getBorder13 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats6 :: (Variant a1)
              => Trendline a0
              -> IO a1
clearFormats6 =
  function1 "ClearFormats"
            []
            outVariant

getDataLabel :: Trendline a0
             -> IO (DataLabel ())
getDataLabel =
  propertyGet "DataLabel"
              []
              outIUnknown

delete80 :: (Variant a1)
         => Trendline a0
         -> IO a1
delete80 =
  function1 "Delete"
            []
            outVariant

getDisplayEquation :: Trendline a0
                   -> IO Bool
getDisplayEquation =
  propertyGet "DisplayEquation"
              []
              outBool

setDisplayEquation :: Bool
                   -> Trendline a0
                   -> IO ()
setDisplayEquation prop =
  propertySet "DisplayEquation"
              [inBool prop]

getDisplayRSquared :: Trendline a0
                   -> IO Bool
getDisplayRSquared =
  propertyGet "DisplayRSquared"
              []
              outBool

setDisplayRSquared :: Bool
                   -> Trendline a0
                   -> IO ()
setDisplayRSquared prop =
  propertySet "DisplayRSquared"
              [inBool prop]

getForward0 :: Trendline a0
            -> IO Double
getForward0 =
  propertyGet "Forward"
              []
              outDouble

setForward0 :: Double
            -> Trendline a0
            -> IO ()
setForward0 prop =
  propertySet "Forward"
              [inDouble prop]

getIndex38 :: Trendline a0
           -> IO Int32
getIndex38 =
  propertyGet "Index"
              []
              outInt32

getIntercept :: Trendline a0
             -> IO Double
getIntercept =
  propertyGet "Intercept"
              []
              outDouble

setIntercept :: Double
             -> Trendline a0
             -> IO ()
setIntercept prop =
  propertySet "Intercept"
              [inDouble prop]

getInterceptIsAuto :: Trendline a0
                   -> IO Bool
getInterceptIsAuto =
  propertyGet "InterceptIsAuto"
              []
              outBool

setInterceptIsAuto :: Bool
                   -> Trendline a0
                   -> IO ()
setInterceptIsAuto prop =
  propertySet "InterceptIsAuto"
              [inBool prop]

getName62 :: Trendline a0
          -> IO String
getName62 =
  propertyGet "Name"
              []
              outString

setName16 :: String
          -> Trendline a0
          -> IO ()
setName16 prop =
  propertySet "Name"
              [inString prop]

getNameIsAuto :: Trendline a0
              -> IO Bool
getNameIsAuto =
  propertyGet "NameIsAuto"
              []
              outBool

setNameIsAuto :: Bool
              -> Trendline a0
              -> IO ()
setNameIsAuto prop =
  propertySet "NameIsAuto"
              [inBool prop]

getOrder :: Trendline a0
         -> IO Int32
getOrder =
  propertyGet "Order"
              []
              outInt32

setOrder :: Int32
         -> Trendline a0
         -> IO ()
setOrder prop =
  propertySet "Order"
              [inInt32 prop]

getPeriod :: Trendline a0
          -> IO Int32
getPeriod =
  propertyGet "Period"
              []
              outInt32

setPeriod :: Int32
          -> Trendline a0
          -> IO ()
setPeriod prop =
  propertySet "Period"
              [inInt32 prop]

select37 :: (Variant a1)
         => Trendline a0
         -> IO a1
select37 =
  function1 "Select"
            []
            outVariant

getType42 :: Trendline a0
          -> IO XlTrendlineType
getType42 =
  propertyGet "Type"
              []
              outEnum

setType13 :: XlTrendlineType
          -> Trendline a0
          -> IO ()
setType13 prop =
  propertySet "Type"
              [inEnum prop]

getFormat21 :: Trendline a0
            -> IO (ChartFormat ())
getFormat21 =
  propertyGet "Format"
              []
              outIUnknown

getApplication319 :: Trendline a0
                  -> IO (IDispatch ())
getApplication319 =
  propertyGet "Application"
              []
              outIDispatch

getCreator319 :: Trendline a0
              -> IO Int32
getCreator319 =
  propertyGet "Creator"
              []
              outInt32

getBackward2 :: Trendline a0
             -> IO Double
getBackward2 =
  propertyGet "Backward2"
              []
              outDouble

setBackward2 :: Double
             -> Trendline a0
             -> IO ()
setBackward2 prop =
  propertySet "Backward2"
              [inDouble prop]

getForward2 :: Trendline a0
            -> IO Double
getForward2 =
  propertyGet "Forward2"
              []
              outDouble

setForward2 :: Double
            -> Trendline a0
            -> IO ()
setForward2 prop =
  propertySet "Forward2"
              [inDouble prop]

-- --------------------------------------------------
-- 
-- interface Trendlines
-- 
-- --------------------------------------------------
data Trendlines_ a = Trendlines__ 
type Trendlines a = IDispatch (Trendlines_ a)
iidTrendlines :: IID (Trendlines ())
iidTrendlines = mkIID "{54B7061A-D56C-40E5-B85B-58146446C782}"

getParent320 :: Trendlines a0
             -> IO (IDispatch ())
getParent320 =
  propertyGet "Parent"
              []
              outIDispatch

add67 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9)
      => a1
      -> a2
      -> a3
      -> a4
      -> a5
      -> a6
      -> a7
      -> a8
      -> a9
      -> Trendlines a0
      -> IO (Trendline ())
add67 type0 order period forward0 backward intercept displayEquation displayRSquared name =
  function1 "Add"
            [ inDefaultValue (inInt32 (-4132)) inVariant type0
            , inVariant order
            , inVariant period
            , inVariant forward0
            , inVariant backward
            , inVariant intercept
            , inVariant displayEquation
            , inVariant displayRSquared
            , inVariant name
            ]
            outIDispatch

getCount116 :: Trendlines a0
            -> IO Int32
getCount116 =
  propertyGet "Count"
              []
              outInt32

item116 :: (Variant a1)
        => a1
        -> Trendlines a0
        -> IO (Trendline ())
item116 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

newEnum1 :: Trendlines a0
         -> IO (IUnknown ())
newEnum1 =
  function1 "_NewEnum"
            []
            outIUnknown

getApplication320 :: Trendlines a0
                  -> IO (IDispatch ())
getApplication320 =
  propertyGet "Application"
              []
              outIDispatch

getCreator320 :: Trendlines a0
              -> IO Int32
getCreator320 =
  propertyGet "Creator"
              []
              outInt32

default2 :: (Variant a1)
         => a1
         -> Trendlines a0
         -> IO (Trendline ())
default2 index =
  function1 "_Default"
            [inVariant index]
            outIDispatch

-- --------------------------------------------------
-- 
-- interface DataLabels
-- 
-- --------------------------------------------------
data DataLabels_ a = DataLabels__ 
type DataLabels a = IDispatch (DataLabels_ a)
iidDataLabels :: IID (DataLabels ())
iidDataLabels = mkIID "{D8252C5E-EB9F-4D74-AA72-C178B128FAC4}"

getParent321 :: DataLabels a0
             -> IO (IDispatch ())
getParent321 =
  propertyGet "Parent"
              []
              outIDispatch

getName63 :: DataLabels a0
          -> IO String
getName63 =
  propertyGet "Name"
              []
              outString

select38 :: (Variant a1)
         => DataLabels a0
         -> IO a1
select38 =
  function1 "Select"
            []
            outVariant

getBorder14 :: DataLabels a0
            -> IO (ChartBorder ())
getBorder14 =
  propertyGet "Border"
              []
              outIDispatch

delete81 :: (Variant a1)
         => DataLabels a0
         -> IO a1
delete81 =
  function1 "Delete"
            []
            outVariant

getInterior8 :: DataLabels a0
             -> IO (Interior ())
getInterior8 =
  propertyGet "Interior"
              []
              outIDispatch

getFill11 :: DataLabels a0
          -> IO (ChartFillFormat ())
getFill11 =
  propertyGet "Fill"
              []
              outIDispatch

getFont9 :: DataLabels a0
         -> IO (ChartFont ())
getFont9 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment :: (Variant a1)
                       => DataLabels a0
                       -> IO a1
getHorizontalAlignment =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment :: a1
                       -> DataLabels a0
                       -> IO ()
setHorizontalAlignment prop =
  propertySet "HorizontalAlignment"
              [inVariant prop]

getOrientation3 :: (Variant a1)
                => DataLabels a0
                -> IO a1
getOrientation3 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation3 :: a1
                -> DataLabels a0
                -> IO ()
setOrientation3 prop =
  propertySet "Orientation"
              [inVariant prop]

getShadow9 :: DataLabels a0
           -> IO Bool
getShadow9 =
  propertyGet "Shadow"
              []
              outBool

setShadow6 :: Bool
           -> DataLabels a0
           -> IO ()
setShadow6 prop =
  propertySet "Shadow"
              [inBool prop]

getVerticalAlignment2 :: (Variant a1)
                      => DataLabels a0
                      -> IO a1
getVerticalAlignment2 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment2 :: a1
                      -> DataLabels a0
                      -> IO ()
setVerticalAlignment2 prop =
  propertySet "VerticalAlignment"
              [inVariant prop]

getReadingOrder2 :: DataLabels a0
                 -> IO Int32
getReadingOrder2 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder2 :: Int32
                 -> DataLabels a0
                 -> IO ()
setReadingOrder2 prop =
  propertySet "ReadingOrder"
              [inInt32 prop]

getAutoScaleFont2 :: (Variant a1)
                  => DataLabels a0
                  -> IO a1
getAutoScaleFont2 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont2 :: a1
                  -> DataLabels a0
                  -> IO ()
setAutoScaleFont2 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getAutoText :: DataLabels a0
            -> IO Bool
getAutoText =
  propertyGet "AutoText"
              []
              outBool

setAutoText :: Bool
            -> DataLabels a0
            -> IO ()
setAutoText prop =
  propertySet "AutoText"
              [inBool prop]

getNumberFormat0 :: DataLabels a0
                 -> IO String
getNumberFormat0 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat0 :: String
                 -> DataLabels a0
                 -> IO ()
setNumberFormat0 prop =
  propertySet "NumberFormat"
              [inString prop]

getNumberFormatLinked :: DataLabels a0
                      -> IO Bool
getNumberFormatLinked =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked :: Bool
                      -> DataLabels a0
                      -> IO ()
setNumberFormatLinked prop =
  propertySet "NumberFormatLinked"
              [inBool prop]

getNumberFormatLocal :: (Variant a1)
                     => DataLabels a0
                     -> IO a1
getNumberFormatLocal =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal :: a1
                     -> DataLabels a0
                     -> IO ()
setNumberFormatLocal prop =
  propertySet "NumberFormatLocal"
              [inVariant prop]

getShowLegendKey :: DataLabels a0
                 -> IO Bool
getShowLegendKey =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey :: Bool
                 -> DataLabels a0
                 -> IO ()
setShowLegendKey prop =
  propertySet "ShowLegendKey"
              [inBool prop]

getType43 :: (Variant a1)
          => DataLabels a0
          -> IO a1
getType43 =
  propertyGet "Type"
              []
              outVariant

setType14 :: a1
          -> DataLabels a0
          -> IO ()
setType14 prop =
  propertySet "Type"
              [inVariant prop]

getPosition5 :: DataLabels a0
             -> IO XlDataLabelPosition
getPosition5 =
  propertyGet "Position"
              []
              outEnum

setPosition6 :: XlDataLabelPosition
             -> DataLabels a0
             -> IO ()
setPosition6 prop =
  propertySet "Position"
              [inEnum prop]

getShowSeriesName :: DataLabels a0
                  -> IO Bool
getShowSeriesName =
  propertyGet "ShowSeriesName"
              []
              outBool

setShowSeriesName :: Bool
                  -> DataLabels a0
                  -> IO ()
setShowSeriesName prop =
  propertySet "ShowSeriesName"
              [inBool prop]

getShowCategoryName :: DataLabels a0
                    -> IO Bool
getShowCategoryName =
  propertyGet "ShowCategoryName"
              []
              outBool

setShowCategoryName :: Bool
                    -> DataLabels a0
                    -> IO ()
setShowCategoryName prop =
  propertySet "ShowCategoryName"
              [inBool prop]

getShowValue :: DataLabels a0
             -> IO Bool
getShowValue =
  propertyGet "ShowValue"
              []
              outBool

setShowValue :: Bool
             -> DataLabels a0
             -> IO ()
setShowValue prop =
  propertySet "ShowValue"
              [inBool prop]

getShowPercentage :: DataLabels a0
                  -> IO Bool
getShowPercentage =
  propertyGet "ShowPercentage"
              []
              outBool

setShowPercentage :: Bool
                  -> DataLabels a0
                  -> IO ()
setShowPercentage prop =
  propertySet "ShowPercentage"
              [inBool prop]

getShowBubbleSize :: DataLabels a0
                  -> IO Bool
getShowBubbleSize =
  propertyGet "ShowBubbleSize"
              []
              outBool

setShowBubbleSize :: Bool
                  -> DataLabels a0
                  -> IO ()
setShowBubbleSize prop =
  propertySet "ShowBubbleSize"
              [inBool prop]

getSeparator3 :: (Variant a1)
              => DataLabels a0
              -> IO a1
getSeparator3 =
  propertyGet "Separator"
              []
              outVariant

setSeparator1 :: a1
              -> DataLabels a0
              -> IO ()
setSeparator1 prop =
  propertySet "Separator"
              [inVariant prop]

getCount117 :: DataLabels a0
            -> IO Int32
getCount117 =
  propertyGet "Count"
              []
              outInt32

item117 :: a1
        -> DataLabels a0
        -> IO (DataLabel ())
item117 index =
  function1 "Item"
            [inVariant index]
            outIUnknown

newEnum2 :: DataLabels a0
         -> IO (IUnknown ())
newEnum2 =
  function1 "_NewEnum"
            []
            outIUnknown

getFormat22 :: DataLabels a0
            -> IO (ChartFormat ())
getFormat22 =
  propertyGet "Format"
              []
              outIUnknown

getApplication321 :: DataLabels a0
                  -> IO (IDispatch ())
getApplication321 =
  propertyGet "Application"
              []
              outIDispatch

getCreator321 :: DataLabels a0
              -> IO Int32
getCreator321 =
  propertyGet "Creator"
              []
              outInt32

default3 :: a1
         -> DataLabels a0
         -> IO (DataLabel ())
default3 index =
  function1 "_Default"
            [inVariant index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface DataLabel
-- 
-- --------------------------------------------------
data DataLabel_ a = DataLabel__ 
type DataLabel a = IDispatch (DataLabel_ a)
iidDataLabel :: IID (DataLabel ())
iidDataLabel = mkIID "{1FD94DF1-3569-4465-94FF-E8B22D28EEB0}"

getParent322 :: DataLabel a0
             -> IO (IDispatch ())
getParent322 =
  propertyGet "Parent"
              []
              outIDispatch

getName64 :: DataLabel a0
          -> IO String
getName64 =
  propertyGet "Name"
              []
              outString

select39 :: (Variant a1)
         => DataLabel a0
         -> IO a1
select39 =
  function1 "Select"
            []
            outVariant

getBorder15 :: DataLabel a0
            -> IO (ChartBorder ())
getBorder15 =
  propertyGet "Border"
              []
              outIDispatch

delete82 :: (Variant a1)
         => DataLabel a0
         -> IO a1
delete82 =
  function1 "Delete"
            []
            outVariant

getInterior9 :: DataLabel a0
             -> IO (Interior ())
getInterior9 =
  propertyGet "Interior"
              []
              outIDispatch

getFill12 :: DataLabel a0
          -> IO (ChartFillFormat ())
getFill12 =
  propertyGet "Fill"
              []
              outIDispatch

getCaption3 :: DataLabel a0
            -> IO String
getCaption3 =
  propertyGet "Caption"
              []
              outString

setCaption2 :: String
            -> DataLabel a0
            -> IO ()
setCaption2 prop =
  propertySet "Caption"
              [inString prop]

getCharacters2 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> DataLabel a0
               -> IO (ChartCharacters ())
getCharacters2 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont10 :: DataLabel a0
          -> IO (ChartFont ())
getFont10 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment0 :: (Variant a1)
                        => DataLabel a0
                        -> IO a1
getHorizontalAlignment0 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment0 :: a1
                        -> DataLabel a0
                        -> IO ()
setHorizontalAlignment0 prop =
  propertySet "HorizontalAlignment"
              [inVariant prop]

getLeft13 :: DataLabel a0
          -> IO Double
getLeft13 =
  propertyGet "Left"
              []
              outDouble

setLeft8 :: Double
         -> DataLabel a0
         -> IO ()
setLeft8 prop =
  propertySet "Left"
              [inDouble prop]

getOrientation4 :: (Variant a1)
                => DataLabel a0
                -> IO a1
getOrientation4 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation4 :: a1
                -> DataLabel a0
                -> IO ()
setOrientation4 prop =
  propertySet "Orientation"
              [inVariant prop]

getShadow10 :: DataLabel a0
            -> IO Bool
getShadow10 =
  propertyGet "Shadow"
              []
              outBool

setShadow7 :: Bool
           -> DataLabel a0
           -> IO ()
setShadow7 prop =
  propertySet "Shadow"
              [inBool prop]

getText6 :: DataLabel a0
         -> IO String
getText6 =
  propertyGet "Text"
              []
              outString

setText6 :: String
         -> DataLabel a0
         -> IO ()
setText6 prop =
  propertySet "Text"
              [inString prop]

getTop13 :: DataLabel a0
         -> IO Double
getTop13 =
  propertyGet "Top"
              []
              outDouble

setTop8 :: Double
        -> DataLabel a0
        -> IO ()
setTop8 prop =
  propertySet "Top"
              [inDouble prop]

getVerticalAlignment3 :: (Variant a1)
                      => DataLabel a0
                      -> IO a1
getVerticalAlignment3 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment3 :: a1
                      -> DataLabel a0
                      -> IO ()
setVerticalAlignment3 prop =
  propertySet "VerticalAlignment"
              [inVariant prop]

getReadingOrder3 :: DataLabel a0
                 -> IO Int32
getReadingOrder3 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder3 :: Int32
                 -> DataLabel a0
                 -> IO ()
setReadingOrder3 prop =
  propertySet "ReadingOrder"
              [inInt32 prop]

getAutoScaleFont3 :: (Variant a1)
                  => DataLabel a0
                  -> IO a1
getAutoScaleFont3 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont3 :: a1
                  -> DataLabel a0
                  -> IO ()
setAutoScaleFont3 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getAutoText0 :: DataLabel a0
             -> IO Bool
getAutoText0 =
  propertyGet "AutoText"
              []
              outBool

setAutoText0 :: Bool
             -> DataLabel a0
             -> IO ()
setAutoText0 prop =
  propertySet "AutoText"
              [inBool prop]

getNumberFormat1 :: DataLabel a0
                 -> IO String
getNumberFormat1 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat1 :: String
                 -> DataLabel a0
                 -> IO ()
setNumberFormat1 prop =
  propertySet "NumberFormat"
              [inString prop]

getNumberFormatLinked0 :: DataLabel a0
                       -> IO Bool
getNumberFormatLinked0 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked0 :: Bool
                       -> DataLabel a0
                       -> IO ()
setNumberFormatLinked0 prop =
  propertySet "NumberFormatLinked"
              [inBool prop]

getNumberFormatLocal0 :: (Variant a1)
                      => DataLabel a0
                      -> IO a1
getNumberFormatLocal0 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal0 :: a1
                      -> DataLabel a0
                      -> IO ()
setNumberFormatLocal0 prop =
  propertySet "NumberFormatLocal"
              [inVariant prop]

getShowLegendKey0 :: DataLabel a0
                  -> IO Bool
getShowLegendKey0 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey0 :: Bool
                  -> DataLabel a0
                  -> IO ()
setShowLegendKey0 prop =
  propertySet "ShowLegendKey"
              [inBool prop]

getType44 :: (Variant a1)
          => DataLabel a0
          -> IO a1
getType44 =
  propertyGet "Type"
              []
              outVariant

setType15 :: a1
          -> DataLabel a0
          -> IO ()
setType15 prop =
  propertySet "Type"
              [inVariant prop]

getPosition6 :: DataLabel a0
             -> IO XlDataLabelPosition
getPosition6 =
  propertyGet "Position"
              []
              outEnum

setPosition7 :: XlDataLabelPosition
             -> DataLabel a0
             -> IO ()
setPosition7 prop =
  propertySet "Position"
              [inEnum prop]

getShowSeriesName0 :: DataLabel a0
                   -> IO Bool
getShowSeriesName0 =
  propertyGet "ShowSeriesName"
              []
              outBool

setShowSeriesName0 :: Bool
                   -> DataLabel a0
                   -> IO ()
setShowSeriesName0 prop =
  propertySet "ShowSeriesName"
              [inBool prop]

getShowCategoryName0 :: DataLabel a0
                     -> IO Bool
getShowCategoryName0 =
  propertyGet "ShowCategoryName"
              []
              outBool

setShowCategoryName0 :: Bool
                     -> DataLabel a0
                     -> IO ()
setShowCategoryName0 prop =
  propertySet "ShowCategoryName"
              [inBool prop]

getShowValue0 :: DataLabel a0
              -> IO Bool
getShowValue0 =
  propertyGet "ShowValue"
              []
              outBool

setShowValue0 :: Bool
              -> DataLabel a0
              -> IO ()
setShowValue0 prop =
  propertySet "ShowValue"
              [inBool prop]

getShowPercentage0 :: DataLabel a0
                   -> IO Bool
getShowPercentage0 =
  propertyGet "ShowPercentage"
              []
              outBool

setShowPercentage0 :: Bool
                   -> DataLabel a0
                   -> IO ()
setShowPercentage0 prop =
  propertySet "ShowPercentage"
              [inBool prop]

getShowBubbleSize0 :: DataLabel a0
                   -> IO Bool
getShowBubbleSize0 =
  propertyGet "ShowBubbleSize"
              []
              outBool

setShowBubbleSize0 :: Bool
                   -> DataLabel a0
                   -> IO ()
setShowBubbleSize0 prop =
  propertySet "ShowBubbleSize"
              [inBool prop]

getSeparator4 :: (Variant a1)
              => DataLabel a0
              -> IO a1
getSeparator4 =
  propertyGet "Separator"
              []
              outVariant

setSeparator2 :: a1
              -> DataLabel a0
              -> IO ()
setSeparator2 prop =
  propertySet "Separator"
              [inVariant prop]

getFormat23 :: DataLabel a0
            -> IO (ChartFormat ())
getFormat23 =
  propertyGet "Format"
              []
              outIUnknown

getApplication322 :: DataLabel a0
                  -> IO (IDispatch ())
getApplication322 =
  propertyGet "Application"
              []
              outIDispatch

getCreator322 :: DataLabel a0
              -> IO Int32
getCreator322 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface Points
-- 
-- --------------------------------------------------
data Points_ a = Points__ 
type Points a = IDispatch (Points_ a)
iidPoints :: IID (Points ())
iidPoints = mkIID "{C1A870A0-850E-4D38-98A7-741CB8C3BCA4}"

getParent323 :: Points a0
             -> IO (IDispatch ())
getParent323 =
  propertyGet "Parent"
              []
              outIDispatch

getCount118 :: Points a0
            -> IO Int32
getCount118 =
  propertyGet "Count"
              []
              outInt32

item118 :: Int32
        -> Points a0
        -> IO (Point ())
item118 index =
  function1 "Item"
            [inInt32 index]
            outIUnknown

newEnum3 :: Points a0
         -> IO (IUnknown ())
newEnum3 =
  function1 "_NewEnum"
            []
            outIUnknown

getApplication323 :: Points a0
                  -> IO (IDispatch ())
getApplication323 =
  propertyGet "Application"
              []
              outIDispatch

getCreator323 :: Points a0
              -> IO Int32
getCreator323 =
  propertyGet "Creator"
              []
              outInt32

default4 :: Int32
         -> Points a0
         -> IO (Point ())
default4 index =
  function1 "_Default"
            [inInt32 index]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface Point
-- 
-- --------------------------------------------------
data Point_ a = Point__ 
type Point a = IDispatch (Point_ a)
iidPoint :: IID (Point ())
iidPoint = mkIID "{8A342FA0-5831-4B5E-82E1-003D0A0C635D}"

getParent324 :: Point a0
             -> IO (IDispatch ())
getParent324 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder16 :: Point a0
            -> IO (ChartBorder ())
getBorder16 =
  propertyGet "Border"
              []
              outIDispatch

clearFormats7 :: (Variant a1)
              => Point a0
              -> IO a1
clearFormats7 =
  function1 "ClearFormats"
            []
            outVariant

copy13 :: (Variant a1)
       => Point a0
       -> IO a1
copy13 =
  function1 "Copy"
            []
            outVariant

getDataLabel0 :: Point a0
              -> IO (DataLabel ())
getDataLabel0 =
  propertyGet "DataLabel"
              []
              outIDispatch

delete83 :: (Variant a1)
         => Point a0
         -> IO a1
delete83 =
  function1 "Delete"
            []
            outVariant

getExplosion0 :: Point a0
              -> IO Int32
getExplosion0 =
  propertyGet "Explosion"
              []
              outInt32

setExplosion0 :: Int32
              -> Point a0
              -> IO ()
setExplosion0 prop =
  propertySet "Explosion"
              [inInt32 prop]

getHasDataLabel :: Point a0
                -> IO Bool
getHasDataLabel =
  propertyGet "HasDataLabel"
              []
              outBool

setHasDataLabel :: Bool
                -> Point a0
                -> IO ()
setHasDataLabel prop =
  propertySet "HasDataLabel"
              [inBool prop]

getInterior10 :: Point a0
              -> IO (Interior ())
getInterior10 =
  propertyGet "Interior"
              []
              outIDispatch

getInvertIfNegative2 :: Point a0
                     -> IO Bool
getInvertIfNegative2 =
  propertyGet "InvertIfNegative"
              []
              outBool

setInvertIfNegative2 :: Bool
                     -> Point a0
                     -> IO ()
setInvertIfNegative2 prop =
  propertySet "InvertIfNegative"
              [inBool prop]

getMarkerBackgroundColor1 :: Point a0
                          -> IO Int32
getMarkerBackgroundColor1 =
  propertyGet "MarkerBackgroundColor"
              []
              outInt32

setMarkerBackgroundColor1 :: Int32
                          -> Point a0
                          -> IO ()
setMarkerBackgroundColor1 prop =
  propertySet "MarkerBackgroundColor"
              [inInt32 prop]

getMarkerBackgroundColorIndex1 :: Point a0
                               -> IO XlColorIndex
getMarkerBackgroundColorIndex1 =
  propertyGet "MarkerBackgroundColorIndex"
              []
              outEnum

setMarkerBackgroundColorIndex1 :: XlColorIndex
                               -> Point a0
                               -> IO ()
setMarkerBackgroundColorIndex1 prop =
  propertySet "MarkerBackgroundColorIndex"
              [inEnum prop]

getMarkerForegroundColor1 :: Point a0
                          -> IO Int32
getMarkerForegroundColor1 =
  propertyGet "MarkerForegroundColor"
              []
              outInt32

setMarkerForegroundColor1 :: Int32
                          -> Point a0
                          -> IO ()
setMarkerForegroundColor1 prop =
  propertySet "MarkerForegroundColor"
              [inInt32 prop]

getMarkerForegroundColorIndex1 :: Point a0
                               -> IO XlColorIndex
getMarkerForegroundColorIndex1 =
  propertyGet "MarkerForegroundColorIndex"
              []
              outEnum

setMarkerForegroundColorIndex1 :: XlColorIndex
                               -> Point a0
                               -> IO ()
setMarkerForegroundColorIndex1 prop =
  propertySet "MarkerForegroundColorIndex"
              [inEnum prop]

getMarkerSize1 :: Point a0
               -> IO Int32
getMarkerSize1 =
  propertyGet "MarkerSize"
              []
              outInt32

setMarkerSize1 :: Int32
               -> Point a0
               -> IO ()
setMarkerSize1 prop =
  propertySet "MarkerSize"
              [inInt32 prop]

getMarkerStyle1 :: Point a0
                -> IO XlMarkerStyle
getMarkerStyle1 =
  propertyGet "MarkerStyle"
              []
              outEnum

setMarkerStyle1 :: XlMarkerStyle
                -> Point a0
                -> IO ()
setMarkerStyle1 prop =
  propertySet "MarkerStyle"
              [inEnum prop]

paste5 :: (Variant a1)
       => Point a0
       -> IO a1
paste5 =
  function1 "Paste"
            []
            outVariant

getPictureType3 :: Point a0
                -> IO XlChartPictureType
getPictureType3 =
  propertyGet "PictureType"
              []
              outEnum

setPictureType3 :: XlChartPictureType
                -> Point a0
                -> IO ()
setPictureType3 prop =
  propertySet "PictureType"
              [inEnum prop]

getPictureUnit3 :: Point a0
                -> IO Double
getPictureUnit3 =
  propertyGet "PictureUnit"
              []
              outDouble

setPictureUnit3 :: Double
                -> Point a0
                -> IO ()
setPictureUnit3 prop =
  propertySet "PictureUnit"
              [inDouble prop]

select40 :: (Variant a1)
         => Point a0
         -> IO a1
select40 =
  function1 "Select"
            []
            outVariant

getApplyPictToSides0 :: Point a0
                     -> IO Bool
getApplyPictToSides0 =
  propertyGet "ApplyPictToSides"
              []
              outBool

setApplyPictToSides0 :: Bool
                     -> Point a0
                     -> IO ()
setApplyPictToSides0 prop =
  propertySet "ApplyPictToSides"
              [inBool prop]

getApplyPictToFront0 :: Point a0
                     -> IO Bool
getApplyPictToFront0 =
  propertyGet "ApplyPictToFront"
              []
              outBool

setApplyPictToFront0 :: Bool
                     -> Point a0
                     -> IO ()
setApplyPictToFront0 prop =
  propertySet "ApplyPictToFront"
              [inBool prop]

getApplyPictToEnd0 :: Point a0
                   -> IO Bool
getApplyPictToEnd0 =
  propertyGet "ApplyPictToEnd"
              []
              outBool

setApplyPictToEnd0 :: Bool
                   -> Point a0
                   -> IO ()
setApplyPictToEnd0 prop =
  propertySet "ApplyPictToEnd"
              [inBool prop]

getShadow11 :: Point a0
            -> IO Bool
getShadow11 =
  propertyGet "Shadow"
              []
              outBool

setShadow8 :: Bool
           -> Point a0
           -> IO ()
setShadow8 prop =
  propertySet "Shadow"
              [inBool prop]

getSecondaryPlot :: Point a0
                 -> IO Bool
getSecondaryPlot =
  propertyGet "SecondaryPlot"
              []
              outBool

setSecondaryPlot :: Bool
                 -> Point a0
                 -> IO ()
setSecondaryPlot prop =
  propertySet "SecondaryPlot"
              [inBool prop]

getFill13 :: Point a0
          -> IO (ChartFillFormat ())
getFill13 =
  propertyGet "Fill"
              []
              outIDispatch

applyDataLabels1 :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5, Variant a6, Variant a7, Variant a8, Variant a9, Variant a10, Variant a11)
                 => a2
                 -> a3
                 -> a4
                 -> a5
                 -> a6
                 -> a7
                 -> a8
                 -> a9
                 -> a10
                 -> a11
                 -> Point a0
                 -> IO a1
applyDataLabels1 type0 legendKey autoText hasLeaderLines showSeriesName showCategoryName showValue showPercentage showBubbleSize separator =
  function1 "ApplyDataLabels"
            [ inDefaultValue (inInt32 2) inVariant type0
            , inVariant legendKey
            , inVariant autoText
            , inVariant hasLeaderLines
            , inVariant showSeriesName
            , inVariant showCategoryName
            , inVariant showValue
            , inVariant showPercentage
            , inVariant showBubbleSize
            , inVariant separator
            ]
            outVariant

getHas3DEffect0 :: Point a0
                -> IO Bool
getHas3DEffect0 =
  propertyGet "Has3DEffect"
              []
              outBool

setHas3DEffect0 :: Bool
                -> Point a0
                -> IO ()
setHas3DEffect0 prop =
  propertySet "Has3DEffect"
              [inBool prop]

getFormat24 :: Point a0
            -> IO (ChartFormat ())
getFormat24 =
  propertyGet "Format"
              []
              outIUnknown

getApplication324 :: Point a0
                  -> IO (IDispatch ())
getApplication324 =
  propertyGet "Application"
              []
              outIDispatch

getCreator324 :: Point a0
              -> IO Int32
getCreator324 =
  propertyGet "Creator"
              []
              outInt32

getPictureUnit21 :: Point a0
                 -> IO Double
getPictureUnit21 =
  propertyGet "PictureUnit2"
              []
              outDouble

setPictureUnit21 :: Double
                 -> Point a0
                 -> IO ()
setPictureUnit21 prop =
  propertySet "PictureUnit2"
              [inDouble prop]

-- --------------------------------------------------
-- 
-- interface Axes
-- 
-- --------------------------------------------------
data Axes_ a = Axes__ 
type Axes a = IDispatch (Axes_ a)
iidAxes :: IID (Axes ())
iidAxes = mkIID "{354AB591-A217-48B4-99E4-14F58F15667D}"

getCount119 :: Axes a0
            -> IO Int32
getCount119 =
  propertyGet "Count"
              []
              outInt32

item119 :: (Variant a1)
        => XlAxisType
        -> a1
        -> Axes a0
        -> IO (Axis ())
item119 type0 axisGroup =
  function1 "Item"
            [ inEnum type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            ]
            outIUnknown

newEnum4 :: Axes a0
         -> IO (IUnknown ())
newEnum4 =
  function1 "_NewEnum"
            []
            outIUnknown

getApplication325 :: Axes a0
                  -> IO (IDispatch ())
getApplication325 =
  propertyGet "Application"
              []
              outIDispatch

getCreator325 :: Axes a0
              -> IO Int32
getCreator325 =
  propertyGet "Creator"
              []
              outInt32

default5 :: (Variant a1)
         => XlAxisType
         -> a1
         -> Axes a0
         -> IO (Axis ())
default5 type0 axisGroup =
  function1 "_Default"
            [ inEnum type0
            , inDefaultValue (inInt32 1) inVariant axisGroup
            ]
            outIUnknown

getParent325 :: Axes a0
             -> IO (IDispatch ())
getParent325 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface Axis
-- 
-- --------------------------------------------------
data Axis_ a = Axis__ 
type Axis a = IDispatch (Axis_ a)
iidAxis :: IID (Axis ())
iidAxis = mkIID "{7EBC66BD-F788-42C3-91F4-E8C841A69005}"

getAxisBetweenCategories :: Axis a0
                         -> IO Bool
getAxisBetweenCategories =
  propertyGet "AxisBetweenCategories"
              []
              outBool

setAxisBetweenCategories :: Bool
                         -> Axis a0
                         -> IO ()
setAxisBetweenCategories prop =
  propertySet "AxisBetweenCategories"
              [inBool prop]

getAxisGroup0 :: Axis a0
              -> IO XlAxisGroup
getAxisGroup0 =
  propertyGet "AxisGroup"
              []
              outEnum

getAxisTitle :: Axis a0
             -> IO (AxisTitle ())
getAxisTitle =
  propertyGet "AxisTitle"
              []
              outIUnknown

getCategoryNames :: (Variant a1)
                 => Axis a0
                 -> IO a1
getCategoryNames =
  propertyGet "CategoryNames"
              []
              outVariant

setCategoryNames :: a1
                 -> Axis a0
                 -> IO ()
setCategoryNames prop =
  propertySet "CategoryNames"
              [inVariant prop]

getCrosses :: Axis a0
           -> IO XlAxisCrosses
getCrosses =
  propertyGet "Crosses"
              []
              outEnum

setCrosses :: XlAxisCrosses
           -> Axis a0
           -> IO ()
setCrosses prop =
  propertySet "Crosses"
              [inEnum prop]

getCrossesAt :: Axis a0
             -> IO Double
getCrossesAt =
  propertyGet "CrossesAt"
              []
              outDouble

setCrossesAt :: Double
             -> Axis a0
             -> IO ()
setCrossesAt prop =
  propertySet "CrossesAt"
              [inDouble prop]

delete84 :: (Variant a1)
         => Axis a0
         -> IO a1
delete84 =
  function1 "Delete"
            []
            outVariant

getHasMajorGridlines :: Axis a0
                     -> IO Bool
getHasMajorGridlines =
  propertyGet "HasMajorGridlines"
              []
              outBool

setHasMajorGridlines :: Bool
                     -> Axis a0
                     -> IO ()
setHasMajorGridlines prop =
  propertySet "HasMajorGridlines"
              [inBool prop]

getHasMinorGridlines :: Axis a0
                     -> IO Bool
getHasMinorGridlines =
  propertyGet "HasMinorGridlines"
              []
              outBool

setHasMinorGridlines :: Bool
                     -> Axis a0
                     -> IO ()
setHasMinorGridlines prop =
  propertySet "HasMinorGridlines"
              [inBool prop]

getHasTitle0 :: Axis a0
             -> IO Bool
getHasTitle0 =
  propertyGet "HasTitle"
              []
              outBool

setHasTitle0 :: Bool
             -> Axis a0
             -> IO ()
setHasTitle0 prop =
  propertySet "HasTitle"
              [inBool prop]

getMajorGridlines :: Axis a0
                  -> IO (Gridlines ())
getMajorGridlines =
  propertyGet "MajorGridlines"
              []
              outIDispatch

getMajorTickMark :: Axis a0
                 -> IO XlTickMark
getMajorTickMark =
  propertyGet "MajorTickMark"
              []
              outEnum

setMajorTickMark :: XlTickMark
                 -> Axis a0
                 -> IO ()
setMajorTickMark prop =
  propertySet "MajorTickMark"
              [inEnum prop]

getMajorUnit :: Axis a0
             -> IO Double
getMajorUnit =
  propertyGet "MajorUnit"
              []
              outDouble

setMajorUnit :: Double
             -> Axis a0
             -> IO ()
setMajorUnit prop =
  propertySet "MajorUnit"
              [inDouble prop]

getLogBase :: Axis a0
           -> IO Double
getLogBase =
  propertyGet "LogBase"
              []
              outDouble

setLogBase :: Double
           -> Axis a0
           -> IO ()
setLogBase prop =
  propertySet "LogBase"
              [inDouble prop]

getTickLabelSpacingIsAuto :: Axis a0
                          -> IO Bool
getTickLabelSpacingIsAuto =
  propertyGet "TickLabelSpacingIsAuto"
              []
              outBool

setTickLabelSpacingIsAuto :: Bool
                          -> Axis a0
                          -> IO ()
setTickLabelSpacingIsAuto prop =
  propertySet "TickLabelSpacingIsAuto"
              [inBool prop]

getMajorUnitIsAuto :: Axis a0
                   -> IO Bool
getMajorUnitIsAuto =
  propertyGet "MajorUnitIsAuto"
              []
              outBool

setMajorUnitIsAuto :: Bool
                   -> Axis a0
                   -> IO ()
setMajorUnitIsAuto prop =
  propertySet "MajorUnitIsAuto"
              [inBool prop]

getMaximumScale :: Axis a0
                -> IO Double
getMaximumScale =
  propertyGet "MaximumScale"
              []
              outDouble

setMaximumScale :: Double
                -> Axis a0
                -> IO ()
setMaximumScale prop =
  propertySet "MaximumScale"
              [inDouble prop]

getMaximumScaleIsAuto :: Axis a0
                      -> IO Bool
getMaximumScaleIsAuto =
  propertyGet "MaximumScaleIsAuto"
              []
              outBool

setMaximumScaleIsAuto :: Bool
                      -> Axis a0
                      -> IO ()
setMaximumScaleIsAuto prop =
  propertySet "MaximumScaleIsAuto"
              [inBool prop]

getMinimumScale :: Axis a0
                -> IO Double
getMinimumScale =
  propertyGet "MinimumScale"
              []
              outDouble

setMinimumScale :: Double
                -> Axis a0
                -> IO ()
setMinimumScale prop =
  propertySet "MinimumScale"
              [inDouble prop]

getMinimumScaleIsAuto :: Axis a0
                      -> IO Bool
getMinimumScaleIsAuto =
  propertyGet "MinimumScaleIsAuto"
              []
              outBool

setMinimumScaleIsAuto :: Bool
                      -> Axis a0
                      -> IO ()
setMinimumScaleIsAuto prop =
  propertySet "MinimumScaleIsAuto"
              [inBool prop]

getMinorGridlines :: Axis a0
                  -> IO (Gridlines ())
getMinorGridlines =
  propertyGet "MinorGridlines"
              []
              outIDispatch

getMinorTickMark :: Axis a0
                 -> IO XlTickMark
getMinorTickMark =
  propertyGet "MinorTickMark"
              []
              outEnum

setMinorTickMark :: XlTickMark
                 -> Axis a0
                 -> IO ()
setMinorTickMark prop =
  propertySet "MinorTickMark"
              [inEnum prop]

getMinorUnit :: Axis a0
             -> IO Double
getMinorUnit =
  propertyGet "MinorUnit"
              []
              outDouble

setMinorUnit :: Double
             -> Axis a0
             -> IO ()
setMinorUnit prop =
  propertySet "MinorUnit"
              [inDouble prop]

getMinorUnitIsAuto :: Axis a0
                   -> IO Bool
getMinorUnitIsAuto =
  propertyGet "MinorUnitIsAuto"
              []
              outBool

setMinorUnitIsAuto :: Bool
                   -> Axis a0
                   -> IO ()
setMinorUnitIsAuto prop =
  propertySet "MinorUnitIsAuto"
              [inBool prop]

getReversePlotOrder :: Axis a0
                    -> IO Bool
getReversePlotOrder =
  propertyGet "ReversePlotOrder"
              []
              outBool

setReversePlotOrder :: Bool
                    -> Axis a0
                    -> IO ()
setReversePlotOrder prop =
  propertySet "ReversePlotOrder"
              [inBool prop]

getScaleType :: Axis a0
             -> IO XlScaleType
getScaleType =
  propertyGet "ScaleType"
              []
              outEnum

setScaleType :: XlScaleType
             -> Axis a0
             -> IO ()
setScaleType prop =
  propertySet "ScaleType"
              [inEnum prop]

select41 :: (Variant a1)
         => Axis a0
         -> IO a1
select41 =
  function1 "Select"
            []
            outVariant

getTickLabelPosition :: Axis a0
                     -> IO XlTickLabelPosition
getTickLabelPosition =
  propertyGet "TickLabelPosition"
              []
              outEnum

setTickLabelPosition :: XlTickLabelPosition
                     -> Axis a0
                     -> IO ()
setTickLabelPosition prop =
  propertySet "TickLabelPosition"
              [inEnum prop]

getTickLabels :: Axis a0
              -> IO (TickLabels ())
getTickLabels =
  propertyGet "TickLabels"
              []
              outIUnknown

getTickLabelSpacing :: Axis a0
                    -> IO Int32
getTickLabelSpacing =
  propertyGet "TickLabelSpacing"
              []
              outInt32

setTickLabelSpacing :: Int32
                    -> Axis a0
                    -> IO ()
setTickLabelSpacing prop =
  propertySet "TickLabelSpacing"
              [inInt32 prop]

getTickMarkSpacing :: Axis a0
                   -> IO Int32
getTickMarkSpacing =
  propertyGet "TickMarkSpacing"
              []
              outInt32

setTickMarkSpacing :: Int32
                   -> Axis a0
                   -> IO ()
setTickMarkSpacing prop =
  propertySet "TickMarkSpacing"
              [inInt32 prop]

getType45 :: Axis a0
          -> IO XlAxisType
getType45 =
  propertyGet "Type"
              []
              outEnum

setType16 :: XlAxisType
          -> Axis a0
          -> IO ()
setType16 prop =
  propertySet "Type"
              [inEnum prop]

getBaseUnit :: Axis a0
            -> IO XlTimeUnit
getBaseUnit =
  propertyGet "BaseUnit"
              []
              outEnum

setBaseUnit :: XlTimeUnit
            -> Axis a0
            -> IO ()
setBaseUnit prop =
  propertySet "BaseUnit"
              [inEnum prop]

getBaseUnitIsAuto :: Axis a0
                  -> IO Bool
getBaseUnitIsAuto =
  propertyGet "BaseUnitIsAuto"
              []
              outBool

setBaseUnitIsAuto :: Bool
                  -> Axis a0
                  -> IO ()
setBaseUnitIsAuto prop =
  propertySet "BaseUnitIsAuto"
              [inBool prop]

getMajorUnitScale :: Axis a0
                  -> IO XlTimeUnit
getMajorUnitScale =
  propertyGet "MajorUnitScale"
              []
              outEnum

setMajorUnitScale :: XlTimeUnit
                  -> Axis a0
                  -> IO ()
setMajorUnitScale prop =
  propertySet "MajorUnitScale"
              [inEnum prop]

getMinorUnitScale :: Axis a0
                  -> IO XlTimeUnit
getMinorUnitScale =
  propertyGet "MinorUnitScale"
              []
              outEnum

setMinorUnitScale :: XlTimeUnit
                  -> Axis a0
                  -> IO ()
setMinorUnitScale prop =
  propertySet "MinorUnitScale"
              [inEnum prop]

getCategoryType :: Axis a0
                -> IO XlCategoryType
getCategoryType =
  propertyGet "CategoryType"
              []
              outEnum

setCategoryType :: XlCategoryType
                -> Axis a0
                -> IO ()
setCategoryType prop =
  propertySet "CategoryType"
              [inEnum prop]

getLeft14 :: Axis a0
          -> IO Double
getLeft14 =
  propertyGet "Left"
              []
              outDouble

getTop14 :: Axis a0
         -> IO Double
getTop14 =
  propertyGet "Top"
              []
              outDouble

getWidth24 :: Axis a0
           -> IO Double
getWidth24 =
  propertyGet "Width"
              []
              outDouble

getHeight21 :: Axis a0
            -> IO Double
getHeight21 =
  propertyGet "Height"
              []
              outDouble

getDisplayUnit :: Axis a0
               -> IO XlDisplayUnit
getDisplayUnit =
  propertyGet "DisplayUnit"
              []
              outEnum

setDisplayUnit :: XlDisplayUnit
               -> Axis a0
               -> IO ()
setDisplayUnit prop =
  propertySet "DisplayUnit"
              [inEnum prop]

getDisplayUnitCustom :: Axis a0
                     -> IO Double
getDisplayUnitCustom =
  propertyGet "DisplayUnitCustom"
              []
              outDouble

setDisplayUnitCustom :: Double
                     -> Axis a0
                     -> IO ()
setDisplayUnitCustom prop =
  propertySet "DisplayUnitCustom"
              [inDouble prop]

getHasDisplayUnitLabel :: Axis a0
                       -> IO Bool
getHasDisplayUnitLabel =
  propertyGet "HasDisplayUnitLabel"
              []
              outBool

setHasDisplayUnitLabel :: Bool
                       -> Axis a0
                       -> IO ()
setHasDisplayUnitLabel prop =
  propertySet "HasDisplayUnitLabel"
              [inBool prop]

getDisplayUnitLabel :: Axis a0
                    -> IO (DisplayUnitLabel ())
getDisplayUnitLabel =
  propertyGet "DisplayUnitLabel"
              []
              outIUnknown

getBorder17 :: Axis a0
            -> IO (ChartBorder ())
getBorder17 =
  propertyGet "Border"
              []
              outIDispatch

getFormat25 :: Axis a0
            -> IO (ChartFormat ())
getFormat25 =
  propertyGet "Format"
              []
              outIUnknown

getApplication326 :: Axis a0
                  -> IO (IDispatch ())
getApplication326 =
  propertyGet "Application"
              []
              outIDispatch

getCreator326 :: Axis a0
              -> IO Int32
getCreator326 =
  propertyGet "Creator"
              []
              outInt32

getParent326 :: Axis a0
             -> IO (IDispatch ())
getParent326 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface DataTable
-- 
-- --------------------------------------------------
data DataTable_ a = DataTable__ 
type DataTable a = IDispatch (DataTable_ a)
iidDataTable :: IID (DataTable ())
iidDataTable = mkIID "{DCE9F2C4-4C02-43BA-840E-B4276550EF79}"

getShowLegendKey1 :: DataTable a0
                  -> IO Bool
getShowLegendKey1 =
  propertyGet "ShowLegendKey"
              []
              outBool

setShowLegendKey1 :: Bool
                  -> DataTable a0
                  -> IO ()
setShowLegendKey1 prop =
  propertySet "ShowLegendKey"
              [inBool prop]

getHasBorderHorizontal :: DataTable a0
                       -> IO Bool
getHasBorderHorizontal =
  propertyGet "HasBorderHorizontal"
              []
              outBool

setHasBorderHorizontal :: Bool
                       -> DataTable a0
                       -> IO ()
setHasBorderHorizontal prop =
  propertySet "HasBorderHorizontal"
              [inBool prop]

getHasBorderVertical :: DataTable a0
                     -> IO Bool
getHasBorderVertical =
  propertyGet "HasBorderVertical"
              []
              outBool

setHasBorderVertical :: Bool
                     -> DataTable a0
                     -> IO ()
setHasBorderVertical prop =
  propertySet "HasBorderVertical"
              [inBool prop]

getHasBorderOutline :: DataTable a0
                    -> IO Bool
getHasBorderOutline =
  propertyGet "HasBorderOutline"
              []
              outBool

setHasBorderOutline :: Bool
                    -> DataTable a0
                    -> IO ()
setHasBorderOutline prop =
  propertySet "HasBorderOutline"
              [inBool prop]

getBorder18 :: DataTable a0
            -> IO (ChartBorder ())
getBorder18 =
  propertyGet "Border"
              []
              outIDispatch

getFont11 :: DataTable a0
          -> IO (ChartFont ())
getFont11 =
  propertyGet "Font"
              []
              outIDispatch

select42 :: DataTable a0
         -> IO ()
select42 =
  method0 "Select"
          []

delete85 :: DataTable a0
         -> IO ()
delete85 =
  method0 "Delete"
          []

getParent327 :: DataTable a0
             -> IO (IDispatch ())
getParent327 =
  propertyGet "Parent"
              []
              outIDispatch

getAutoScaleFont4 :: (Variant a1)
                  => DataTable a0
                  -> IO a1
getAutoScaleFont4 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont4 :: a1
                  -> DataTable a0
                  -> IO ()
setAutoScaleFont4 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getFormat26 :: DataTable a0
            -> IO (ChartFormat ())
getFormat26 =
  propertyGet "Format"
              []
              outIUnknown

getApplication327 :: DataTable a0
                  -> IO (IDispatch ())
getApplication327 =
  propertyGet "Application"
              []
              outIDispatch

getCreator327 :: DataTable a0
              -> IO Int32
getCreator327 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface ChartTitle
-- 
-- --------------------------------------------------
data ChartTitle_ a = ChartTitle__ 
type ChartTitle a = IDispatch (ChartTitle_ a)
iidChartTitle :: IID (ChartTitle ())
iidChartTitle = mkIID "{C1AD33E4-F088-40A9-9D2F-D94017D115C4}"

getCaption4 :: ChartTitle a0
            -> IO String
getCaption4 =
  propertyGet "Caption"
              []
              outString

setCaption3 :: String
            -> ChartTitle a0
            -> IO ()
setCaption3 prop =
  propertySet "Caption"
              [inString prop]

getCharacters3 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> ChartTitle a0
               -> IO (ChartCharacters ())
getCharacters3 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont12 :: ChartTitle a0
          -> IO (ChartFont ())
getFont12 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment1 :: (Variant a1)
                        => ChartTitle a0
                        -> IO a1
getHorizontalAlignment1 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment1 :: a1
                        -> ChartTitle a0
                        -> IO ()
setHorizontalAlignment1 prop =
  propertySet "HorizontalAlignment"
              [inVariant prop]

getLeft15 :: ChartTitle a0
          -> IO Double
getLeft15 =
  propertyGet "Left"
              []
              outDouble

setLeft9 :: Double
         -> ChartTitle a0
         -> IO ()
setLeft9 prop =
  propertySet "Left"
              [inDouble prop]

getOrientation5 :: (Variant a1)
                => ChartTitle a0
                -> IO a1
getOrientation5 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation5 :: a1
                -> ChartTitle a0
                -> IO ()
setOrientation5 prop =
  propertySet "Orientation"
              [inVariant prop]

getShadow12 :: ChartTitle a0
            -> IO Bool
getShadow12 =
  propertyGet "Shadow"
              []
              outBool

setShadow9 :: Bool
           -> ChartTitle a0
           -> IO ()
setShadow9 prop =
  propertySet "Shadow"
              [inBool prop]

getText7 :: ChartTitle a0
         -> IO String
getText7 =
  propertyGet "Text"
              []
              outString

setText7 :: String
         -> ChartTitle a0
         -> IO ()
setText7 prop =
  propertySet "Text"
              [inString prop]

getTop15 :: ChartTitle a0
         -> IO Double
getTop15 =
  propertyGet "Top"
              []
              outDouble

setTop9 :: Double
        -> ChartTitle a0
        -> IO ()
setTop9 prop =
  propertySet "Top"
              [inDouble prop]

getVerticalAlignment4 :: (Variant a1)
                      => ChartTitle a0
                      -> IO a1
getVerticalAlignment4 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment4 :: a1
                      -> ChartTitle a0
                      -> IO ()
setVerticalAlignment4 prop =
  propertySet "VerticalAlignment"
              [inVariant prop]

getReadingOrder4 :: ChartTitle a0
                 -> IO Int32
getReadingOrder4 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder4 :: Int32
                 -> ChartTitle a0
                 -> IO ()
setReadingOrder4 prop =
  propertySet "ReadingOrder"
              [inInt32 prop]

getAutoScaleFont5 :: (Variant a1)
                  => ChartTitle a0
                  -> IO a1
getAutoScaleFont5 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont5 :: a1
                  -> ChartTitle a0
                  -> IO ()
setAutoScaleFont5 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getInterior11 :: ChartTitle a0
              -> IO (Interior ())
getInterior11 =
  propertyGet "Interior"
              []
              outIDispatch

getFill14 :: ChartTitle a0
          -> IO (ChartFillFormat ())
getFill14 =
  propertyGet "Fill"
              []
              outIDispatch

delete86 :: (Variant a1)
         => ChartTitle a0
         -> IO a1
delete86 =
  function1 "Delete"
            []
            outVariant

getBorder19 :: ChartTitle a0
            -> IO (ChartBorder ())
getBorder19 =
  propertyGet "Border"
              []
              outIDispatch

getName65 :: ChartTitle a0
          -> IO String
getName65 =
  propertyGet "Name"
              []
              outString

getParent328 :: ChartTitle a0
             -> IO (IDispatch ())
getParent328 =
  propertyGet "Parent"
              []
              outIDispatch

select43 :: (Variant a1)
         => ChartTitle a0
         -> IO a1
select43 =
  function1 "Select"
            []
            outVariant

getIncludeInLayout0 :: ChartTitle a0
                    -> IO Bool
getIncludeInLayout0 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout0 :: Bool
                    -> ChartTitle a0
                    -> IO ()
setIncludeInLayout0 prop =
  propertySet "IncludeInLayout"
              [inBool prop]

getPosition7 :: ChartTitle a0
             -> IO XlChartElementPosition
getPosition7 =
  propertyGet "Position"
              []
              outEnum

setPosition8 :: XlChartElementPosition
             -> ChartTitle a0
             -> IO ()
setPosition8 prop =
  propertySet "Position"
              [inEnum prop]

getFormat27 :: ChartTitle a0
            -> IO (ChartFormat ())
getFormat27 =
  propertyGet "Format"
              []
              outIUnknown

getApplication328 :: ChartTitle a0
                  -> IO (IDispatch ())
getApplication328 =
  propertyGet "Application"
              []
              outIDispatch

getCreator328 :: ChartTitle a0
              -> IO Int32
getCreator328 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface AxisTitle
-- 
-- --------------------------------------------------
data AxisTitle_ a = AxisTitle__ 
type AxisTitle a = IDispatch (AxisTitle_ a)
iidAxisTitle :: IID (AxisTitle ())
iidAxisTitle = mkIID "{8B0E45DB-3A7B-42EE-9D17-A92AF69B79C1}"

getCaption5 :: AxisTitle a0
            -> IO String
getCaption5 =
  propertyGet "Caption"
              []
              outString

setCaption4 :: String
            -> AxisTitle a0
            -> IO ()
setCaption4 prop =
  propertySet "Caption"
              [inString prop]

getCharacters4 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> AxisTitle a0
               -> IO (ChartCharacters ())
getCharacters4 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont13 :: AxisTitle a0
          -> IO (ChartFont ())
getFont13 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment2 :: (Variant a1)
                        => AxisTitle a0
                        -> IO a1
getHorizontalAlignment2 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment2 :: a1
                        -> AxisTitle a0
                        -> IO ()
setHorizontalAlignment2 prop =
  propertySet "HorizontalAlignment"
              [inVariant prop]

getLeft16 :: AxisTitle a0
          -> IO Double
getLeft16 =
  propertyGet "Left"
              []
              outDouble

setLeft10 :: Double
          -> AxisTitle a0
          -> IO ()
setLeft10 prop =
  propertySet "Left"
              [inDouble prop]

getOrientation6 :: (Variant a1)
                => AxisTitle a0
                -> IO a1
getOrientation6 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation6 :: a1
                -> AxisTitle a0
                -> IO ()
setOrientation6 prop =
  propertySet "Orientation"
              [inVariant prop]

getShadow13 :: AxisTitle a0
            -> IO Bool
getShadow13 =
  propertyGet "Shadow"
              []
              outBool

setShadow10 :: Bool
            -> AxisTitle a0
            -> IO ()
setShadow10 prop =
  propertySet "Shadow"
              [inBool prop]

getText8 :: AxisTitle a0
         -> IO String
getText8 =
  propertyGet "Text"
              []
              outString

setText8 :: String
         -> AxisTitle a0
         -> IO ()
setText8 prop =
  propertySet "Text"
              [inString prop]

getTop16 :: AxisTitle a0
         -> IO Double
getTop16 =
  propertyGet "Top"
              []
              outDouble

setTop10 :: Double
         -> AxisTitle a0
         -> IO ()
setTop10 prop =
  propertySet "Top"
              [inDouble prop]

getVerticalAlignment5 :: (Variant a1)
                      => AxisTitle a0
                      -> IO a1
getVerticalAlignment5 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment5 :: a1
                      -> AxisTitle a0
                      -> IO ()
setVerticalAlignment5 prop =
  propertySet "VerticalAlignment"
              [inVariant prop]

getReadingOrder5 :: AxisTitle a0
                 -> IO Int32
getReadingOrder5 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder5 :: Int32
                 -> AxisTitle a0
                 -> IO ()
setReadingOrder5 prop =
  propertySet "ReadingOrder"
              [inInt32 prop]

getAutoScaleFont6 :: (Variant a1)
                  => AxisTitle a0
                  -> IO a1
getAutoScaleFont6 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont6 :: a1
                  -> AxisTitle a0
                  -> IO ()
setAutoScaleFont6 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getInterior12 :: AxisTitle a0
              -> IO (Interior ())
getInterior12 =
  propertyGet "Interior"
              []
              outIDispatch

getFill15 :: AxisTitle a0
          -> IO (ChartFillFormat ())
getFill15 =
  propertyGet "Fill"
              []
              outIDispatch

delete87 :: (Variant a1)
         => AxisTitle a0
         -> IO a1
delete87 =
  function1 "Delete"
            []
            outVariant

getBorder20 :: AxisTitle a0
            -> IO (ChartBorder ())
getBorder20 =
  propertyGet "Border"
              []
              outIDispatch

getName66 :: AxisTitle a0
          -> IO String
getName66 =
  propertyGet "Name"
              []
              outString

getParent329 :: AxisTitle a0
             -> IO (IDispatch ())
getParent329 =
  propertyGet "Parent"
              []
              outIDispatch

select44 :: (Variant a1)
         => AxisTitle a0
         -> IO a1
select44 =
  function1 "Select"
            []
            outVariant

getIncludeInLayout1 :: AxisTitle a0
                    -> IO Bool
getIncludeInLayout1 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout1 :: Bool
                    -> AxisTitle a0
                    -> IO ()
setIncludeInLayout1 prop =
  propertySet "IncludeInLayout"
              [inBool prop]

getPosition8 :: AxisTitle a0
             -> IO XlChartElementPosition
getPosition8 =
  propertyGet "Position"
              []
              outEnum

setPosition9 :: XlChartElementPosition
             -> AxisTitle a0
             -> IO ()
setPosition9 prop =
  propertySet "Position"
              [inEnum prop]

getFormat28 :: AxisTitle a0
            -> IO (ChartFormat ())
getFormat28 =
  propertyGet "Format"
              []
              outIUnknown

getApplication329 :: AxisTitle a0
                  -> IO (IDispatch ())
getApplication329 =
  propertyGet "Application"
              []
              outIDispatch

getCreator329 :: AxisTitle a0
              -> IO Int32
getCreator329 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface DisplayUnitLabel
-- 
-- --------------------------------------------------
data DisplayUnitLabel_ a = DisplayUnitLabel__ 
type DisplayUnitLabel a = IDispatch (DisplayUnitLabel_ a)
iidDisplayUnitLabel :: IID (DisplayUnitLabel ())
iidDisplayUnitLabel =
  mkIID "{C04865A3-9F8A-486C-BB58-B4C3E6563136}"

getCaption6 :: DisplayUnitLabel a0
            -> IO String
getCaption6 =
  propertyGet "Caption"
              []
              outString

setCaption5 :: String
            -> DisplayUnitLabel a0
            -> IO ()
setCaption5 prop =
  propertySet "Caption"
              [inString prop]

getCharacters5 :: (Variant a1, Variant a2)
               => a1
               -> a2
               -> DisplayUnitLabel a0
               -> IO (ChartCharacters ())
getCharacters5 start length =
  propertyGet "Characters"
              [ inVariant start
              , inVariant length
              ]
              outIUnknown

getFont14 :: DisplayUnitLabel a0
          -> IO (ChartFont ())
getFont14 =
  propertyGet "Font"
              []
              outIDispatch

getHorizontalAlignment3 :: (Variant a1)
                        => DisplayUnitLabel a0
                        -> IO a1
getHorizontalAlignment3 =
  propertyGet "HorizontalAlignment"
              []
              outVariant

setHorizontalAlignment3 :: a1
                        -> DisplayUnitLabel a0
                        -> IO ()
setHorizontalAlignment3 prop =
  propertySet "HorizontalAlignment"
              [inVariant prop]

getLeft17 :: DisplayUnitLabel a0
          -> IO Double
getLeft17 =
  propertyGet "Left"
              []
              outDouble

setLeft11 :: Double
          -> DisplayUnitLabel a0
          -> IO ()
setLeft11 prop =
  propertySet "Left"
              [inDouble prop]

getOrientation7 :: (Variant a1)
                => DisplayUnitLabel a0
                -> IO a1
getOrientation7 =
  propertyGet "Orientation"
              []
              outVariant

setOrientation7 :: a1
                -> DisplayUnitLabel a0
                -> IO ()
setOrientation7 prop =
  propertySet "Orientation"
              [inVariant prop]

getShadow14 :: DisplayUnitLabel a0
            -> IO Bool
getShadow14 =
  propertyGet "Shadow"
              []
              outBool

setShadow11 :: Bool
            -> DisplayUnitLabel a0
            -> IO ()
setShadow11 prop =
  propertySet "Shadow"
              [inBool prop]

getText9 :: DisplayUnitLabel a0
         -> IO String
getText9 =
  propertyGet "Text"
              []
              outString

setText9 :: String
         -> DisplayUnitLabel a0
         -> IO ()
setText9 prop =
  propertySet "Text"
              [inString prop]

getTop17 :: DisplayUnitLabel a0
         -> IO Double
getTop17 =
  propertyGet "Top"
              []
              outDouble

setTop11 :: Double
         -> DisplayUnitLabel a0
         -> IO ()
setTop11 prop =
  propertySet "Top"
              [inDouble prop]

getVerticalAlignment6 :: (Variant a1)
                      => DisplayUnitLabel a0
                      -> IO a1
getVerticalAlignment6 =
  propertyGet "VerticalAlignment"
              []
              outVariant

setVerticalAlignment6 :: a1
                      -> DisplayUnitLabel a0
                      -> IO ()
setVerticalAlignment6 prop =
  propertySet "VerticalAlignment"
              [inVariant prop]

getReadingOrder6 :: DisplayUnitLabel a0
                 -> IO Int32
getReadingOrder6 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder6 :: Int32
                 -> DisplayUnitLabel a0
                 -> IO ()
setReadingOrder6 prop =
  propertySet "ReadingOrder"
              [inInt32 prop]

getAutoScaleFont7 :: (Variant a1)
                  => DisplayUnitLabel a0
                  -> IO a1
getAutoScaleFont7 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont7 :: a1
                  -> DisplayUnitLabel a0
                  -> IO ()
setAutoScaleFont7 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getInterior13 :: DisplayUnitLabel a0
              -> IO (Interior ())
getInterior13 =
  propertyGet "Interior"
              []
              outIDispatch

getFill16 :: DisplayUnitLabel a0
          -> IO (ChartFillFormat ())
getFill16 =
  propertyGet "Fill"
              []
              outIDispatch

delete88 :: (Variant a1)
         => DisplayUnitLabel a0
         -> IO a1
delete88 =
  function1 "Delete"
            []
            outVariant

getBorder21 :: DisplayUnitLabel a0
            -> IO (ChartBorder ())
getBorder21 =
  propertyGet "Border"
              []
              outIDispatch

getName67 :: DisplayUnitLabel a0
          -> IO String
getName67 =
  propertyGet "Name"
              []
              outString

getParent330 :: DisplayUnitLabel a0
             -> IO (IDispatch ())
getParent330 =
  propertyGet "Parent"
              []
              outIDispatch

select45 :: (Variant a1)
         => DisplayUnitLabel a0
         -> IO a1
select45 =
  function1 "Select"
            []
            outVariant

getIncludeInLayout2 :: DisplayUnitLabel a0
                    -> IO Bool
getIncludeInLayout2 =
  propertyGet "IncludeInLayout"
              []
              outBool

setIncludeInLayout2 :: Bool
                    -> DisplayUnitLabel a0
                    -> IO ()
setIncludeInLayout2 prop =
  propertySet "IncludeInLayout"
              [inBool prop]

getPosition9 :: DisplayUnitLabel a0
             -> IO XlChartElementPosition
getPosition9 =
  propertyGet "Position"
              []
              outEnum

setPosition10 :: XlChartElementPosition
              -> DisplayUnitLabel a0
              -> IO ()
setPosition10 prop =
  propertySet "Position"
              [inEnum prop]

getFormat29 :: DisplayUnitLabel a0
            -> IO (ChartFormat ())
getFormat29 =
  propertyGet "Format"
              []
              outIUnknown

getApplication330 :: DisplayUnitLabel a0
                  -> IO (IDispatch ())
getApplication330 =
  propertyGet "Application"
              []
              outIDispatch

getCreator330 :: DisplayUnitLabel a0
              -> IO Int32
getCreator330 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface TickLabels
-- 
-- --------------------------------------------------
data TickLabels_ a = TickLabels__ 
type TickLabels a = IDispatch (TickLabels_ a)
iidTickLabels :: IID (TickLabels ())
iidTickLabels = mkIID "{935D59F5-E365-4F92-B7F5-1C499A63ECA8}"

getParent331 :: TickLabels a0
             -> IO (IDispatch ())
getParent331 =
  propertyGet "Parent"
              []
              outIDispatch

delete89 :: (Variant a1)
         => TickLabels a0
         -> IO a1
delete89 =
  function1 "Delete"
            []
            outVariant

getFont15 :: TickLabels a0
          -> IO (ChartFont ())
getFont15 =
  propertyGet "Font"
              []
              outIDispatch

getName68 :: TickLabels a0
          -> IO String
getName68 =
  propertyGet "Name"
              []
              outString

getNumberFormat2 :: TickLabels a0
                 -> IO String
getNumberFormat2 =
  propertyGet "NumberFormat"
              []
              outString

setNumberFormat2 :: String
                 -> TickLabels a0
                 -> IO ()
setNumberFormat2 prop =
  propertySet "NumberFormat"
              [inString prop]

getNumberFormatLinked1 :: TickLabels a0
                       -> IO Bool
getNumberFormatLinked1 =
  propertyGet "NumberFormatLinked"
              []
              outBool

setNumberFormatLinked1 :: Bool
                       -> TickLabels a0
                       -> IO ()
setNumberFormatLinked1 prop =
  propertySet "NumberFormatLinked"
              [inBool prop]

getNumberFormatLocal1 :: (Variant a1)
                      => TickLabels a0
                      -> IO a1
getNumberFormatLocal1 =
  propertyGet "NumberFormatLocal"
              []
              outVariant

setNumberFormatLocal1 :: a1
                      -> TickLabels a0
                      -> IO ()
setNumberFormatLocal1 prop =
  propertySet "NumberFormatLocal"
              [inVariant prop]

getOrientation8 :: TickLabels a0
                -> IO XlTickLabelOrientation
getOrientation8 =
  propertyGet "Orientation"
              []
              outEnum

setOrientation8 :: XlTickLabelOrientation
                -> TickLabels a0
                -> IO ()
setOrientation8 prop =
  propertySet "Orientation"
              [inEnum prop]

select46 :: (Variant a1)
         => TickLabels a0
         -> IO a1
select46 =
  function1 "Select"
            []
            outVariant

getReadingOrder7 :: TickLabels a0
                 -> IO Int32
getReadingOrder7 =
  propertyGet "ReadingOrder"
              []
              outInt32

setReadingOrder7 :: Int32
                 -> TickLabels a0
                 -> IO ()
setReadingOrder7 prop =
  propertySet "ReadingOrder"
              [inInt32 prop]

getAutoScaleFont8 :: (Variant a1)
                  => TickLabels a0
                  -> IO a1
getAutoScaleFont8 =
  propertyGet "AutoScaleFont"
              []
              outVariant

setAutoScaleFont8 :: a1
                  -> TickLabels a0
                  -> IO ()
setAutoScaleFont8 prop =
  propertySet "AutoScaleFont"
              [inVariant prop]

getDepth0 :: TickLabels a0
          -> IO Int32
getDepth0 =
  propertyGet "Depth"
              []
              outInt32

getOffset :: TickLabels a0
          -> IO Int32
getOffset =
  propertyGet "Offset"
              []
              outInt32

setOffset :: Int32
          -> TickLabels a0
          -> IO ()
setOffset prop =
  propertySet "Offset"
              [inInt32 prop]

getAlignment10 :: TickLabels a0
               -> IO Int32
getAlignment10 =
  propertyGet "Alignment"
              []
              outInt32

setAlignment10 :: Int32
               -> TickLabels a0
               -> IO ()
setAlignment10 prop =
  propertySet "Alignment"
              [inInt32 prop]

getMultiLevel :: TickLabels a0
              -> IO Bool
getMultiLevel =
  propertyGet "MultiLevel"
              []
              outBool

setMultiLevel :: Bool
              -> TickLabels a0
              -> IO ()
setMultiLevel prop =
  propertySet "MultiLevel"
              [inBool prop]

getFormat30 :: TickLabels a0
            -> IO (ChartFormat ())
getFormat30 =
  propertyGet "Format"
              []
              outIUnknown

getApplication331 :: TickLabels a0
                  -> IO (IDispatch ())
getApplication331 =
  propertyGet "Application"
              []
              outIDispatch

getCreator331 :: TickLabels a0
              -> IO Int32
getCreator331 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface DropLines
-- 
-- --------------------------------------------------
data DropLines_ a = DropLines__ 
type DropLines a = IDispatch (DropLines_ a)
iidDropLines :: IID (DropLines ())
iidDropLines = mkIID "{9F1DF642-3CCE-4D83-A770-D2634A05D278}"

getName69 :: DropLines a0
          -> IO String
getName69 =
  propertyGet "Name"
              []
              outString

select47 :: DropLines a0
         -> IO ()
select47 =
  method0 "Select"
          []

getParent332 :: DropLines a0
             -> IO (IDispatch ())
getParent332 =
  propertyGet "Parent"
              []
              outIDispatch

getBorder22 :: DropLines a0
            -> IO (ChartBorder ())
getBorder22 =
  propertyGet "Border"
              []
              outIDispatch

delete90 :: DropLines a0
         -> IO ()
delete90 =
  method0 "Delete"
          []

getFormat31 :: DropLines a0
            -> IO (ChartFormat ())
getFormat31 =
  propertyGet "Format"
              []
              outIUnknown

getApplication332 :: DropLines a0
                  -> IO (IDispatch ())
getApplication332 =
  propertyGet "Application"
              []
              outIDispatch

getCreator332 :: DropLines a0
              -> IO Int32
getCreator332 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface HiLoLines
-- 
-- --------------------------------------------------
data HiLoLines_ a = HiLoLines__ 
type HiLoLines a = IDispatch (HiLoLines_ a)
iidHiLoLines :: IID (HiLoLines ())
iidHiLoLines = mkIID "{7A1BCE11-5783-4C7D-BD02-F3D84AB40E7F}"

getParent333 :: HiLoLines a0
             -> IO (IDispatch ())
getParent333 =
  propertyGet "Parent"
              []
              outIDispatch

getName70 :: HiLoLines a0
          -> IO String
getName70 =
  propertyGet "Name"
              []
              outString

select48 :: HiLoLines a0
         -> IO ()
select48 =
  method0 "Select"
          []

getBorder23 :: HiLoLines a0
            -> IO (ChartBorder ())
getBorder23 =
  propertyGet "Border"
              []
              outIDispatch

delete91 :: HiLoLines a0
         -> IO ()
delete91 =
  method0 "Delete"
          []

getFormat32 :: HiLoLines a0
            -> IO (ChartFormat ())
getFormat32 =
  propertyGet "Format"
              []
              outIUnknown

getApplication333 :: HiLoLines a0
                  -> IO (IDispatch ())
getApplication333 =
  propertyGet "Application"
              []
              outIDispatch

getCreator333 :: HiLoLines a0
              -> IO Int32
getCreator333 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface ChartGroup
-- 
-- --------------------------------------------------
data ChartGroup_ a = ChartGroup__ 
type ChartGroup a = IDispatch (ChartGroup_ a)
iidChartGroup :: IID (ChartGroup ())
iidChartGroup = mkIID "{86488FB4-9633-4C93-8057-FC1FA7A847AE}"

getAxisGroup1 :: ChartGroup a0
              -> IO XlAxisGroup
getAxisGroup1 =
  propertyGet "AxisGroup"
              []
              outEnum

setAxisGroup0 :: XlAxisGroup
              -> ChartGroup a0
              -> IO ()
setAxisGroup0 prop =
  propertySet "AxisGroup"
              [inEnum prop]

getDoughnutHoleSize :: ChartGroup a0
                    -> IO Int32
getDoughnutHoleSize =
  propertyGet "DoughnutHoleSize"
              []
              outInt32

setDoughnutHoleSize :: Int32
                    -> ChartGroup a0
                    -> IO ()
setDoughnutHoleSize prop =
  propertySet "DoughnutHoleSize"
              [inInt32 prop]

getDownBars :: ChartGroup a0
            -> IO (DownBars ())
getDownBars =
  propertyGet "DownBars"
              []
              outIDispatch

getDropLines :: ChartGroup a0
             -> IO (DropLines ())
getDropLines =
  propertyGet "DropLines"
              []
              outIDispatch

getFirstSliceAngle :: ChartGroup a0
                   -> IO Int32
getFirstSliceAngle =
  propertyGet "FirstSliceAngle"
              []
              outInt32

setFirstSliceAngle :: Int32
                   -> ChartGroup a0
                   -> IO ()
setFirstSliceAngle prop =
  propertySet "FirstSliceAngle"
              [inInt32 prop]

getGapWidth :: ChartGroup a0
            -> IO Int32
getGapWidth =
  propertyGet "GapWidth"
              []
              outInt32

setGapWidth :: Int32
            -> ChartGroup a0
            -> IO ()
setGapWidth prop =
  propertySet "GapWidth"
              [inInt32 prop]

getHasDropLines :: ChartGroup a0
                -> IO Bool
getHasDropLines =
  propertyGet "HasDropLines"
              []
              outBool

setHasDropLines :: Bool
                -> ChartGroup a0
                -> IO ()
setHasDropLines prop =
  propertySet "HasDropLines"
              [inBool prop]

getHasHiLoLines :: ChartGroup a0
                -> IO Bool
getHasHiLoLines =
  propertyGet "HasHiLoLines"
              []
              outBool

setHasHiLoLines :: Bool
                -> ChartGroup a0
                -> IO ()
setHasHiLoLines prop =
  propertySet "HasHiLoLines"
              [inBool prop]

getHasRadarAxisLabels :: ChartGroup a0
                      -> IO Bool
getHasRadarAxisLabels =
  propertyGet "HasRadarAxisLabels"
              []
              outBool

setHasRadarAxisLabels :: Bool
                      -> ChartGroup a0
                      -> IO ()
setHasRadarAxisLabels prop =
  propertySet "HasRadarAxisLabels"
              [inBool prop]

getHasSeriesLines :: ChartGroup a0
                  -> IO Bool
getHasSeriesLines =
  propertyGet "HasSeriesLines"
              []
              outBool

setHasSeriesLines :: Bool
                  -> ChartGroup a0
                  -> IO ()
setHasSeriesLines prop =
  propertySet "HasSeriesLines"
              [inBool prop]

getHasUpDownBars :: ChartGroup a0
                 -> IO Bool
getHasUpDownBars =
  propertyGet "HasUpDownBars"
              []
              outBool

setHasUpDownBars :: Bool
                 -> ChartGroup a0
                 -> IO ()
setHasUpDownBars prop =
  propertySet "HasUpDownBars"
              [inBool prop]

getHiLoLines :: ChartGroup a0
             -> IO (HiLoLines ())
getHiLoLines =
  propertyGet "HiLoLines"
              []
              outIDispatch

getIndex39 :: ChartGroup a0
           -> IO Int32
getIndex39 =
  propertyGet "Index"
              []
              outInt32

getOverlap :: ChartGroup a0
           -> IO Int32
getOverlap =
  propertyGet "Overlap"
              []
              outInt32

setOverlap :: Int32
           -> ChartGroup a0
           -> IO ()
setOverlap prop =
  propertySet "Overlap"
              [inInt32 prop]

getRadarAxisLabels :: ChartGroup a0
                   -> IO (TickLabels ())
getRadarAxisLabels =
  propertyGet "RadarAxisLabels"
              []
              outIDispatch

seriesCollection0 :: (Variant a1)
                  => a1
                  -> ChartGroup a0
                  -> IO (IDispatch ())
seriesCollection0 index =
  function1 "SeriesCollection"
            [inVariant index]
            outIDispatch

getSeriesLines :: ChartGroup a0
               -> IO (SeriesLines ())
getSeriesLines =
  propertyGet "SeriesLines"
              []
              outIDispatch

getSubType0 :: ChartGroup a0
            -> IO Int32
getSubType0 =
  propertyGet "SubType"
              []
              outInt32

setSubType0 :: Int32
            -> ChartGroup a0
            -> IO ()
setSubType0 prop =
  propertySet "SubType"
              [inInt32 prop]

getType46 :: ChartGroup a0
          -> IO Int32
getType46 =
  propertyGet "Type"
              []
              outInt32

setType17 :: Int32
          -> ChartGroup a0
          -> IO ()
setType17 prop =
  propertySet "Type"
              [inInt32 prop]

getUpBars :: ChartGroup a0
          -> IO (UpBars ())
getUpBars =
  propertyGet "UpBars"
              []
              outIDispatch

getVaryByCategories :: ChartGroup a0
                    -> IO Bool
getVaryByCategories =
  propertyGet "VaryByCategories"
              []
              outBool

setVaryByCategories :: Bool
                    -> ChartGroup a0
                    -> IO ()
setVaryByCategories prop =
  propertySet "VaryByCategories"
              [inBool prop]

getSizeRepresents :: ChartGroup a0
                  -> IO XlSizeRepresents
getSizeRepresents =
  propertyGet "SizeRepresents"
              []
              outEnum

setSizeRepresents :: XlSizeRepresents
                  -> ChartGroup a0
                  -> IO ()
setSizeRepresents prop =
  propertySet "SizeRepresents"
              [inEnum prop]

getBubbleScale :: ChartGroup a0
               -> IO Int32
getBubbleScale =
  propertyGet "BubbleScale"
              []
              outInt32

setBubbleScale :: Int32
               -> ChartGroup a0
               -> IO ()
setBubbleScale prop =
  propertySet "BubbleScale"
              [inInt32 prop]

getShowNegativeBubbles :: ChartGroup a0
                       -> IO Bool
getShowNegativeBubbles =
  propertyGet "ShowNegativeBubbles"
              []
              outBool

setShowNegativeBubbles :: Bool
                       -> ChartGroup a0
                       -> IO ()
setShowNegativeBubbles prop =
  propertySet "ShowNegativeBubbles"
              [inBool prop]

getSplitType :: ChartGroup a0
             -> IO XlChartSplitType
getSplitType =
  propertyGet "SplitType"
              []
              outEnum

setSplitType :: XlChartSplitType
             -> ChartGroup a0
             -> IO ()
setSplitType prop =
  propertySet "SplitType"
              [inEnum prop]

getSplitValue :: (Variant a1)
              => ChartGroup a0
              -> IO a1
getSplitValue =
  propertyGet "SplitValue"
              []
              outVariant

setSplitValue :: a1
              -> ChartGroup a0
              -> IO ()
setSplitValue prop =
  propertySet "SplitValue"
              [inVariant prop]

getSecondPlotSize :: ChartGroup a0
                  -> IO Int32
getSecondPlotSize =
  propertyGet "SecondPlotSize"
              []
              outInt32

setSecondPlotSize :: Int32
                  -> ChartGroup a0
                  -> IO ()
setSecondPlotSize prop =
  propertySet "SecondPlotSize"
              [inInt32 prop]

getHas3DShading :: ChartGroup a0
                -> IO Bool
getHas3DShading =
  propertyGet "Has3DShading"
              []
              outBool

setHas3DShading :: Bool
                -> ChartGroup a0
                -> IO ()
setHas3DShading prop =
  propertySet "Has3DShading"
              [inBool prop]

getApplication334 :: ChartGroup a0
                  -> IO (IDispatch ())
getApplication334 =
  propertyGet "Application"
              []
              outIDispatch

getCreator334 :: ChartGroup a0
              -> IO Int32
getCreator334 =
  propertyGet "Creator"
              []
              outInt32

getParent334 :: ChartGroup a0
             -> IO (IDispatch ())
getParent334 =
  propertyGet "Parent"
              []
              outIDispatch

-- --------------------------------------------------
-- 
-- interface ChartGroups
-- 
-- --------------------------------------------------
data ChartGroups_ a = ChartGroups__ 
type ChartGroups a = IDispatch (ChartGroups_ a)
iidChartGroups :: IID (ChartGroups ())
iidChartGroups = mkIID "{F8DDB497-CA6C-4711-9BA4-2718FA3BB6FE}"

getParent335 :: ChartGroups a0
             -> IO (IDispatch ())
getParent335 =
  propertyGet "Parent"
              []
              outIDispatch

getCount120 :: ChartGroups a0
            -> IO Int32
getCount120 =
  propertyGet "Count"
              []
              outInt32

item120 :: a1
        -> ChartGroups a0
        -> IO (ChartGroup ())
item120 index =
  function1 "Item"
            [inVariant index]
            outIDispatch

newEnum5 :: ChartGroups a0
         -> IO (IUnknown ())
newEnum5 =
  function1 "_NewEnum"
            []
            outIUnknown

getApplication335 :: ChartGroups a0
                  -> IO (IDispatch ())
getApplication335 =
  propertyGet "Application"
              []
              outIDispatch

getCreator335 :: ChartGroups a0
              -> IO Int32
getCreator335 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface ChartCharacters
-- 
-- --------------------------------------------------
data ChartCharacters_ a = ChartCharacters__ 
type ChartCharacters a = IDispatch (ChartCharacters_ a)
iidChartCharacters :: IID (ChartCharacters ())
iidChartCharacters = mkIID "{FF06FEF2-DA89-41C0-A0A8-5CD434E210AD}"

getParent336 :: ChartCharacters a0
             -> IO (IDispatch ())
getParent336 =
  propertyGet "Parent"
              []
              outIDispatch

getCaption7 :: ChartCharacters a0
            -> IO String
getCaption7 =
  propertyGet "Caption"
              []
              outString

setCaption6 :: String
            -> ChartCharacters a0
            -> IO ()
setCaption6 prop =
  propertySet "Caption"
              [inString prop]

getCount121 :: ChartCharacters a0
            -> IO Int32
getCount121 =
  propertyGet "Count"
              []
              outInt32

delete92 :: (Variant a1)
         => ChartCharacters a0
         -> IO a1
delete92 =
  function1 "Delete"
            []
            outVariant

getFont16 :: ChartCharacters a0
          -> IO (ChartFont ())
getFont16 =
  propertyGet "Font"
              []
              outIDispatch

insert4 :: (Variant a1)
        => String
        -> ChartCharacters a0
        -> IO a1
insert4 string =
  function1 "Insert"
            [inString string]
            outVariant

getText10 :: ChartCharacters a0
          -> IO String
getText10 =
  propertyGet "Text"
              []
              outString

setText10 :: String
          -> ChartCharacters a0
          -> IO ()
setText10 prop =
  propertySet "Text"
              [inString prop]

getPhoneticCharacters :: ChartCharacters a0
                      -> IO String
getPhoneticCharacters =
  propertyGet "PhoneticCharacters"
              []
              outString

setPhoneticCharacters :: String
                      -> ChartCharacters a0
                      -> IO ()
setPhoneticCharacters prop =
  propertySet "PhoneticCharacters"
              [inString prop]

getApplication336 :: ChartCharacters a0
                  -> IO (IDispatch ())
getApplication336 =
  propertyGet "Application"
              []
              outIDispatch

getCreator336 :: ChartCharacters a0
              -> IO Int32
getCreator336 =
  propertyGet "Creator"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface ChartFormat
-- 
-- --------------------------------------------------
data ChartFormat_ a = ChartFormat__ 
type ChartFormat a = IDispatch (ChartFormat_ a)
iidChartFormat :: IID (ChartFormat ())
iidChartFormat = mkIID "{B66D3C1A-4541-4961-B35B-A353C03F6A99}"

getFill17 :: ChartFormat a0
          -> IO (FillFormat ())
getFill17 =
  propertyGet "Fill"
              []
              outIDispatch

getGlow2 :: ChartFormat a0
         -> IO (GlowFormat ())
getGlow2 =
  propertyGet "Glow"
              []
              outIDispatch

getLine2 :: ChartFormat a0
         -> IO (LineFormat ())
getLine2 =
  propertyGet "Line"
              []
              outIDispatch

getParent337 :: ChartFormat a0
             -> IO (IDispatch ())
getParent337 =
  propertyGet "Parent"
              []
              outIDispatch

getPictureFormat2 :: ChartFormat a0
                  -> IO (PictureFormat ())
getPictureFormat2 =
  propertyGet "PictureFormat"
              []
              outIDispatch

getShadow15 :: ChartFormat a0
            -> IO (ShadowFormat ())
getShadow15 =
  propertyGet "Shadow"
              []
              outIDispatch

getSoftEdge2 :: ChartFormat a0
             -> IO (SoftEdgeFormat ())
getSoftEdge2 =
  propertyGet "SoftEdge"
              []
              outIDispatch

getTextFrame21 :: ChartFormat a0
               -> IO (Maybe TextFrame2)
getTextFrame21 iptr =
  do
    prop <- allocBytes (fromIntegral sizeofPtr)
    invokeAndCheck (\ methPtr iptr -> prim_Word_getTextFrame2 methPtr iptr prop) 14 iptr
    doThenFree free (readunique readTextFrame2) prop

getThreeD1 :: ChartFormat a0
           -> IO (ThreeDFormat ())
getThreeD1 =
  propertyGet "ThreeD"
              []
              outIDispatch

getApplication337 :: ChartFormat a0
                  -> IO (IDispatch ())
getApplication337 =
  propertyGet "Application"
              []
              outIDispatch

getCreator337 :: ChartFormat a0
              -> IO Int32
getCreator337 =
  propertyGet "Creator"
              []
              outInt32

data XlChartSplitType
 = XlSplitByPosition
 | XlSplitByValue
 | XlSplitByPercentValue
 | XlSplitByCustomSplit
 
instance Enum (XlChartSplitType) where
  fromEnum v =
    case v of
       XlSplitByPosition -> 1
       XlSplitByValue -> 2
       XlSplitByPercentValue -> 3
       XlSplitByCustomSplit -> 4
  
  toEnum v =
    case v of
       1 -> XlSplitByPosition
       2 -> XlSplitByValue
       3 -> XlSplitByPercentValue
       4 -> XlSplitByCustomSplit
       _ -> error "unmarshallXlChartSplitType: illegal enum value "
  
instance Variant (XlChartSplitType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlSizeRepresents
 = XlSizeRepresentsList__ [XlSizeRepresents]
 | XlSizeIsArea
 | XlSizeIsWidth
 
instance Flags (XlSizeRepresents) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlSizeRepresents) where
  fromEnum v =
    case v of
       (XlSizeRepresentsList__ xs) -> orList (map fromEnum xs)
       XlSizeIsArea -> 1
       XlSizeIsWidth -> 2
  
  toEnum v =
    case v of
       1 -> XlSizeIsArea
       2 -> XlSizeIsWidth
       x -> XlSizeRepresentsList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                         then Just (toEnum (fromIntegral val))
                                                         else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlSizeRepresents: illegal enum value "
  
instance Variant (XlSizeRepresents) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlAxisGroup
 = XlAxisGroupList__ [XlAxisGroup]
 | XlPrimary
 | XlSecondary
 
instance Flags (XlAxisGroup) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlAxisGroup) where
  fromEnum v =
    case v of
       (XlAxisGroupList__ xs) -> orList (map fromEnum xs)
       XlPrimary -> 1
       XlSecondary -> 2
  
  toEnum v =
    case v of
       1 -> XlPrimary
       2 -> XlSecondary
       x -> XlAxisGroupList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                    then Just (toEnum (fromIntegral val))
                                                    else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlAxisGroup: illegal enum value "
  
instance Variant (XlAxisGroup) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlBackground
 = XlBackgroundAutomatic
 | XlBackgroundTransparent
 | XlBackgroundOpaque
 
instance Enum (XlBackground) where
  fromEnum v =
    case v of
       XlBackgroundAutomatic -> (-4105)
       XlBackgroundTransparent -> 2
       XlBackgroundOpaque -> 3
  
  toEnum v =
    case v of
       (-4105) -> XlBackgroundAutomatic
       2 -> XlBackgroundTransparent
       3 -> XlBackgroundOpaque
       _ -> error "unmarshallXlBackground: illegal enum value "
  
instance Variant (XlBackground) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlChartGallery
 = XlBuiltIn
 | XlUserDefined
 | XlAnyGallery
 
instance Enum (XlChartGallery) where
  fromEnum v =
    case v of
       XlBuiltIn -> 21
       XlUserDefined -> 22
       XlAnyGallery -> 23
  
  toEnum v =
    case v of
       21 -> XlBuiltIn
       22 -> XlUserDefined
       23 -> XlAnyGallery
       _ -> error "unmarshallXlChartGallery: illegal enum value "
  
instance Variant (XlChartGallery) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlChartPicturePlacement
 = XlSides
 | XlEnd
 | XlEndSides
 | XlFront
 | XlFrontSides
 | XlFrontEnd
 | XlAllFaces
 
instance Enum (XlChartPicturePlacement) where
  fromEnum v =
    case v of
       XlSides -> 1
       XlEnd -> 2
       XlEndSides -> 3
       XlFront -> 4
       XlFrontSides -> 5
       XlFrontEnd -> 6
       XlAllFaces -> 7
  
  toEnum v =
    case v of
       1 -> XlSides
       2 -> XlEnd
       3 -> XlEndSides
       4 -> XlFront
       5 -> XlFrontSides
       6 -> XlFrontEnd
       7 -> XlAllFaces
       _ -> error "unmarshallXlChartPicturePlacement: illegal enum value "
  
instance Variant (XlChartPicturePlacement) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlDataLabelSeparator = XlDataLabelSeparatorDefault 
instance Enum (XlDataLabelSeparator) where
  fromEnum v = case v of XlDataLabelSeparatorDefault -> 1
  
  toEnum v =
    case v of
       1 -> XlDataLabelSeparatorDefault
       _ -> error "unmarshallXlDataLabelSeparator: illegal enum value "
  
instance Variant (XlDataLabelSeparator) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlPattern
 = XlPatternVertical
 | XlPatternUp
 | XlPatternNone
 | XlPatternHorizontal
 | XlPatternGray75
 | XlPatternGray50
 | XlPatternGray25
 | XlPatternDown
 | XlPatternAutomatic
 | XlPatternSolid
 | XlPatternChecker
 | XlPatternSemiGray75
 | XlPatternLightHorizontal
 | XlPatternLightVertical
 | XlPatternLightDown
 | XlPatternLightUp
 | XlPatternGrid
 | XlPatternCrissCross
 | XlPatternGray16
 | XlPatternGray8
 | XlPatternLinearGradient
 | XlPatternRectangularGradient
 
instance Enum (XlPattern) where
  fromEnum v =
    case v of
       XlPatternVertical -> (-4166)
       XlPatternUp -> (-4162)
       XlPatternNone -> (-4142)
       XlPatternHorizontal -> (-4128)
       XlPatternGray75 -> (-4126)
       XlPatternGray50 -> (-4125)
       XlPatternGray25 -> (-4124)
       XlPatternDown -> (-4121)
       XlPatternAutomatic -> (-4105)
       XlPatternSolid -> 1
       XlPatternChecker -> 9
       XlPatternSemiGray75 -> 10
       XlPatternLightHorizontal -> 11
       XlPatternLightVertical -> 12
       XlPatternLightDown -> 13
       XlPatternLightUp -> 14
       XlPatternGrid -> 15
       XlPatternCrissCross -> 16
       XlPatternGray16 -> 17
       XlPatternGray8 -> 18
       XlPatternLinearGradient -> 4000
       XlPatternRectangularGradient -> 4001
  
  toEnum v =
    case v of
       (-4166) -> XlPatternVertical
       (-4162) -> XlPatternUp
       (-4142) -> XlPatternNone
       (-4128) -> XlPatternHorizontal
       (-4126) -> XlPatternGray75
       (-4125) -> XlPatternGray50
       (-4124) -> XlPatternGray25
       (-4121) -> XlPatternDown
       (-4105) -> XlPatternAutomatic
       1 -> XlPatternSolid
       9 -> XlPatternChecker
       10 -> XlPatternSemiGray75
       11 -> XlPatternLightHorizontal
       12 -> XlPatternLightVertical
       13 -> XlPatternLightDown
       14 -> XlPatternLightUp
       15 -> XlPatternGrid
       16 -> XlPatternCrissCross
       17 -> XlPatternGray16
       18 -> XlPatternGray8
       4000 -> XlPatternLinearGradient
       4001 -> XlPatternRectangularGradient
       _ -> error "unmarshallXlPattern: illegal enum value "
  
instance Variant (XlPattern) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlPictureAppearance
 = XlPictureAppearanceList__ [XlPictureAppearance]
 | XlScreen
 | XlPrinter
 
instance Flags (XlPictureAppearance) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlPictureAppearance) where
  fromEnum v =
    case v of
       (XlPictureAppearanceList__ xs) -> orList (map fromEnum xs)
       XlScreen -> 1
       XlPrinter -> 2
  
  toEnum v =
    case v of
       1 -> XlScreen
       2 -> XlPrinter
       x -> XlPictureAppearanceList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                            then Just (toEnum (fromIntegral val))
                                                            else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlPictureAppearance: illegal enum value "
  
instance Variant (XlPictureAppearance) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlCopyPictureFormat
 = XlPicture
 | XlBitmap
 
instance Enum (XlCopyPictureFormat) where
  fromEnum v =
    case v of
       XlPicture -> (-4147)
       XlBitmap -> 2
  
  toEnum v =
    case v of
       (-4147) -> XlPicture
       2 -> XlBitmap
       _ -> error "unmarshallXlCopyPictureFormat: illegal enum value "
  
instance Variant (XlCopyPictureFormat) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlRgbColor
 = XlBlack
 | XlMaroon
 | XlDarkRed
 | XlRed
 | XlOrangeRed
 | XlDarkGreen
 | XlGreen
 | XlOlive
 | XlDarkOrange
 | XlOrange
 | XlGold
 | XlLawnGreen
 | XlLime
 | XlChartreuse
 | XlYellow
 | XlDarkGoldenrod
 | XlGoldenrod
 | XlFireBrick
 | XlForestGreen
 | XlOliveDrab
 | XlBrown
 | XlSienna
 | XlDarkOliveGreen
 | XlGreenYellow
 | XlLimeGreen
 | XlYellowGreen
 | XlCrimson
 | XlPeru
 | XlTomato
 | XlDarkSlateGray
 | XlDarkSlateGrey
 | XlCoral
 | XlSeaGreen
 | XlIndianRed
 | XlSandyBrown
 | XlDimGray
 | XlDimGrey
 | XlDarkKhaki
 | XlPaleGoldenrod
 | XlMidnightBlue
 | XlMediumSeaGreen
 | XlSalmon
 | XlDarkSalmon
 | XlLightSalmon
 | XlSpringGreen
 | XlNavy
 | XlNavyBlue
 | XlPurple
 | XlTeal
 | XlGray
 | XlGrey
 | XlLightCoral
 | XlIndigo
 | XlMediumVioletRed
 | XlBurlyWood
 | XlDarkBlue
 | XlDarkMagenta
 | XlDarkSlateBlue
 | XlDarkCyan
 | XlLightCyan
 | XlTan
 | XlKhaki
 | XlRosyBrown
 | XlDarkSeaGreen
 | XlSlateGray
 | XlSlateGrey
 | XlLightGreen
 | XlDeepPink
 | XlPaleVioletRed
 | XlPaleGreen
 | XlLightSlateGray
 | XlLightSlateGrey
 | XlMediumSpringGreen
 | XlCadetBlue
 | XlDarkGray
 | XlDarkGrey
 | XlLightSeaGreen
 | XlMediumAquamarine
 | XlNavajoWhite
 | XlWheat
 | XlHotPink
 | XlSteelBlue
 | XlMoccasin
 | XlPeachPuff
 | XlSilver
 | XlLightPink
 | XlBisque
 | XlPink
 | XlDarkOrchid
 | XlMediumTurquoise
 | XlMediumBlue
 | XlSlateBlue
 | XlBlanchedAlmond
 | XlLemonChiffon
 | XlTurquoise
 | XlDarkTurquoise
 | XlLightGoldenrodYellow
 | XlDarkViolet
 | XlMediumOrchid
 | XlLightGray
 | XlLightGrey
 | XlAquamarine
 | XlPapayaWhip
 | XlOrchid
 | XlAntiqueWhite
 | XlThistle
 | XlMediumPurple
 | XlGainsboro
 | XlBeige
 | XlCornsilk
 | XlPlum
 | XlLightSteelBlue
 | XlLightYellow
 | XlRoyalBlue
 | XlMistyRose
 | XlBlueViolet
 | XlLightBlue
 | XlPowderBlue
 | XlLinen
 | XlOldLace
 | XlSkyBlue
 | XlCornflowerBlue
 | XlMediumSlateBlue
 | XlViolet
 | XlPaleTurquoise
 | XlSeashell
 | XlFloralWhite
 | XlHoneydew
 | XlIvory
 | XlLavenderBlush
 | XlWhiteSmoke
 | XlLightSkyBlue
 | XlLavender
 | XlSnow
 | XlMintCream
 | XlBlue
 | XlFuchsia
 | XlDodgerBlue
 | XlDeepSkyBlue
 | XlAliceBlue
 | XlGhostWhite
 | XlAqua
 | XlAzure
 | XlWhite
 
instance Enum (XlRgbColor) where
  fromEnum v =
    case v of
       XlBlack -> 0
       XlMaroon -> 128
       XlDarkRed -> 139
       XlRed -> 255
       XlOrangeRed -> 17919
       XlDarkGreen -> 25600
       XlGreen -> 32768
       XlOlive -> 32896
       XlDarkOrange -> 36095
       XlOrange -> 42495
       XlGold -> 55295
       XlLawnGreen -> 64636
       XlLime -> 65280
       XlChartreuse -> 65407
       XlYellow -> 65535
       XlDarkGoldenrod -> 755384
       XlGoldenrod -> 2139610
       XlFireBrick -> 2237106
       XlForestGreen -> 2263842
       XlOliveDrab -> 2330219
       XlBrown -> 2763429
       XlSienna -> 2970272
       XlDarkOliveGreen -> 3107669
       XlGreenYellow -> 3145645
       XlLimeGreen -> 3329330
       XlYellowGreen -> 3329434
       XlCrimson -> 3937500
       XlPeru -> 4163021
       XlTomato -> 4678655
       XlDarkSlateGray -> 5197615
       XlDarkSlateGrey -> 5197615
       XlCoral -> 5275647
       XlSeaGreen -> 5737262
       XlIndianRed -> 6053069
       XlSandyBrown -> 6333684
       XlDimGray -> 6908265
       XlDimGrey -> 6908265
       XlDarkKhaki -> 7059389
       XlPaleGoldenrod -> 7071982
       XlMidnightBlue -> 7346457
       XlMediumSeaGreen -> 7451452
       XlSalmon -> 7504122
       XlDarkSalmon -> 8034025
       XlLightSalmon -> 8036607
       XlSpringGreen -> 8388352
       XlNavy -> 8388608
       XlNavyBlue -> 8388608
       XlPurple -> 8388736
       XlTeal -> 8421376
       XlGray -> 8421504
       XlGrey -> 8421504
       XlLightCoral -> 8421616
       XlIndigo -> 8519755
       XlMediumVioletRed -> 8721863
       XlBurlyWood -> 8894686
       XlDarkBlue -> 9109504
       XlDarkMagenta -> 9109643
       XlDarkSlateBlue -> 9125192
       XlDarkCyan -> 9145088
       XlLightCyan -> 9145088
       XlTan -> 9221330
       XlKhaki -> 9234160
       XlRosyBrown -> 9408444
       XlDarkSeaGreen -> 9419919
       XlSlateGray -> 9470064
       XlSlateGrey -> 9470064
       XlLightGreen -> 9498256
       XlDeepPink -> 9639167
       XlPaleVioletRed -> 9662683
       XlPaleGreen -> 10025880
       XlLightSlateGray -> 10061943
       XlLightSlateGrey -> 10061943
       XlMediumSpringGreen -> 10156544
       XlCadetBlue -> 10526303
       XlDarkGray -> 11119017
       XlDarkGrey -> 11119017
       XlLightSeaGreen -> 11186720
       XlMediumAquamarine -> 11206502
       XlNavajoWhite -> 11394815
       XlWheat -> 11788021
       XlHotPink -> 11823615
       XlSteelBlue -> 11829830
       XlMoccasin -> 11920639
       XlPeachPuff -> 12180223
       XlSilver -> 12632256
       XlLightPink -> 12695295
       XlBisque -> 12903679
       XlPink -> 13353215
       XlDarkOrchid -> 13382297
       XlMediumTurquoise -> 13422920
       XlMediumBlue -> 13434880
       XlSlateBlue -> 13458026
       XlBlanchedAlmond -> 13495295
       XlLemonChiffon -> 13499135
       XlTurquoise -> 13688896
       XlDarkTurquoise -> 13749760
       XlLightGoldenrodYellow -> 13826810
       XlDarkViolet -> 13828244
       XlMediumOrchid -> 13850042
       XlLightGray -> 13882323
       XlLightGrey -> 13882323
       XlAquamarine -> 13959039
       XlPapayaWhip -> 14020607
       XlOrchid -> 14053594
       XlAntiqueWhite -> 14150650
       XlThistle -> 14204888
       XlMediumPurple -> 14381203
       XlGainsboro -> 14474460
       XlBeige -> 14480885
       XlCornsilk -> 14481663
       XlPlum -> 14524637
       XlLightSteelBlue -> 14599344
       XlLightYellow -> 14745599
       XlRoyalBlue -> 14772545
       XlMistyRose -> 14804223
       XlBlueViolet -> 14822282
       XlLightBlue -> 15128749
       XlPowderBlue -> 15130800
       XlLinen -> 15134970
       XlOldLace -> 15136253
       XlSkyBlue -> 15453831
       XlCornflowerBlue -> 15570276
       XlMediumSlateBlue -> 15624315
       XlViolet -> 15631086
       XlPaleTurquoise -> 15658671
       XlSeashell -> 15660543
       XlFloralWhite -> 15792895
       XlHoneydew -> 15794160
       XlIvory -> 15794175
       XlLavenderBlush -> 16118015
       XlWhiteSmoke -> 16119285
       XlLightSkyBlue -> 16436871
       XlLavender -> 16443110
       XlSnow -> 16448255
       XlMintCream -> 16449525
       XlBlue -> 16711680
       XlFuchsia -> 16711935
       XlDodgerBlue -> 16748574
       XlDeepSkyBlue -> 16760576
       XlAliceBlue -> 16775408
       XlGhostWhite -> 16775416
       XlAqua -> 16776960
       XlAzure -> 16777200
       XlWhite -> 16777215
  
  toEnum v =
    case v of
       0 -> XlBlack
       128 -> XlMaroon
       139 -> XlDarkRed
       255 -> XlRed
       17919 -> XlOrangeRed
       25600 -> XlDarkGreen
       32768 -> XlGreen
       32896 -> XlOlive
       36095 -> XlDarkOrange
       42495 -> XlOrange
       55295 -> XlGold
       64636 -> XlLawnGreen
       65280 -> XlLime
       65407 -> XlChartreuse
       65535 -> XlYellow
       755384 -> XlDarkGoldenrod
       2139610 -> XlGoldenrod
       2237106 -> XlFireBrick
       2263842 -> XlForestGreen
       2330219 -> XlOliveDrab
       2763429 -> XlBrown
       2970272 -> XlSienna
       3107669 -> XlDarkOliveGreen
       3145645 -> XlGreenYellow
       3329330 -> XlLimeGreen
       3329434 -> XlYellowGreen
       3937500 -> XlCrimson
       4163021 -> XlPeru
       4678655 -> XlTomato
       5197615 -> XlDarkSlateGray
       5197615 -> XlDarkSlateGrey
       5275647 -> XlCoral
       5737262 -> XlSeaGreen
       6053069 -> XlIndianRed
       6333684 -> XlSandyBrown
       6908265 -> XlDimGray
       6908265 -> XlDimGrey
       7059389 -> XlDarkKhaki
       7071982 -> XlPaleGoldenrod
       7346457 -> XlMidnightBlue
       7451452 -> XlMediumSeaGreen
       7504122 -> XlSalmon
       8034025 -> XlDarkSalmon
       8036607 -> XlLightSalmon
       8388352 -> XlSpringGreen
       8388608 -> XlNavy
       8388608 -> XlNavyBlue
       8388736 -> XlPurple
       8421376 -> XlTeal
       8421504 -> XlGray
       8421504 -> XlGrey
       8421616 -> XlLightCoral
       8519755 -> XlIndigo
       8721863 -> XlMediumVioletRed
       8894686 -> XlBurlyWood
       9109504 -> XlDarkBlue
       9109643 -> XlDarkMagenta
       9125192 -> XlDarkSlateBlue
       9145088 -> XlDarkCyan
       9145088 -> XlLightCyan
       9221330 -> XlTan
       9234160 -> XlKhaki
       9408444 -> XlRosyBrown
       9419919 -> XlDarkSeaGreen
       9470064 -> XlSlateGray
       9470064 -> XlSlateGrey
       9498256 -> XlLightGreen
       9639167 -> XlDeepPink
       9662683 -> XlPaleVioletRed
       10025880 -> XlPaleGreen
       10061943 -> XlLightSlateGray
       10061943 -> XlLightSlateGrey
       10156544 -> XlMediumSpringGreen
       10526303 -> XlCadetBlue
       11119017 -> XlDarkGray
       11119017 -> XlDarkGrey
       11186720 -> XlLightSeaGreen
       11206502 -> XlMediumAquamarine
       11394815 -> XlNavajoWhite
       11788021 -> XlWheat
       11823615 -> XlHotPink
       11829830 -> XlSteelBlue
       11920639 -> XlMoccasin
       12180223 -> XlPeachPuff
       12632256 -> XlSilver
       12695295 -> XlLightPink
       12903679 -> XlBisque
       13353215 -> XlPink
       13382297 -> XlDarkOrchid
       13422920 -> XlMediumTurquoise
       13434880 -> XlMediumBlue
       13458026 -> XlSlateBlue
       13495295 -> XlBlanchedAlmond
       13499135 -> XlLemonChiffon
       13688896 -> XlTurquoise
       13749760 -> XlDarkTurquoise
       13826810 -> XlLightGoldenrodYellow
       13828244 -> XlDarkViolet
       13850042 -> XlMediumOrchid
       13882323 -> XlLightGray
       13882323 -> XlLightGrey
       13959039 -> XlAquamarine
       14020607 -> XlPapayaWhip
       14053594 -> XlOrchid
       14150650 -> XlAntiqueWhite
       14204888 -> XlThistle
       14381203 -> XlMediumPurple
       14474460 -> XlGainsboro
       14480885 -> XlBeige
       14481663 -> XlCornsilk
       14524637 -> XlPlum
       14599344 -> XlLightSteelBlue
       14745599 -> XlLightYellow
       14772545 -> XlRoyalBlue
       14804223 -> XlMistyRose
       14822282 -> XlBlueViolet
       15128749 -> XlLightBlue
       15130800 -> XlPowderBlue
       15134970 -> XlLinen
       15136253 -> XlOldLace
       15453831 -> XlSkyBlue
       15570276 -> XlCornflowerBlue
       15624315 -> XlMediumSlateBlue
       15631086 -> XlViolet
       15658671 -> XlPaleTurquoise
       15660543 -> XlSeashell
       15792895 -> XlFloralWhite
       15794160 -> XlHoneydew
       15794175 -> XlIvory
       16118015 -> XlLavenderBlush
       16119285 -> XlWhiteSmoke
       16436871 -> XlLightSkyBlue
       16443110 -> XlLavender
       16448255 -> XlSnow
       16449525 -> XlMintCream
       16711680 -> XlBlue
       16711935 -> XlFuchsia
       16748574 -> XlDodgerBlue
       16760576 -> XlDeepSkyBlue
       16775408 -> XlAliceBlue
       16775416 -> XlGhostWhite
       16776960 -> XlAqua
       16777200 -> XlAzure
       16777215 -> XlWhite
       _ -> error "unmarshallXlRgbColor: illegal enum value "
  
instance Variant (XlRgbColor) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlConstants
 = XlTop
 | XlRight
 | XlNone
 | XlLow
 | XlLeft
 | XlJustify
 | XlHigh
 | XlGray75
 | XlGray50
 | XlGray25
 | XlDistributed
 | XlCustom
 | XlCombination
 | XlCenter
 | XlBottom
 | XlAutomatic
 | Xl3DSurface
 | Xl3DBar
 | XlDefaultAutoFormat
 | XlAbove
 | XlBelow
 | XlBoth
 | XlFixedValue
 | XlGeneral
 | XlSolid
 | XlSquare
 | XlBar
 | XlCorner
 | XlDiamond
 | XlInside
 | XlMaximum
 | XlPercent
 | XlPlusValues
 | XlShowValue
 | XlSingle
 | XlTransparent
 | XlColumn
 | XlMinusValues
 | XlOpaque
 | XlOutside
 | XlScale
 | XlShowPercent
 | XlTriangle
 | XlCross
 | XlMinimum
 | XlNextToAxis
 | XlShowLabel
 | XlStError
 | XlFill
 | XlShowLabelAndPercent
 | XlStar
 | XlCircle
 | XlChecker
 | XlPlus
 | XlSemiGray75
 | XlLightHorizontal
 | XlLightVertical
 | XlLightDown
 | XlLightUp
 | XlGrid
 | XlCrissCross
 | XlGray16
 | XlGray8
 
instance Enum (XlConstants) where
  fromEnum v =
    case v of
       XlTop -> (-4160)
       XlRight -> (-4152)
       XlNone -> (-4142)
       XlLow -> (-4134)
       XlLeft -> (-4131)
       XlJustify -> (-4130)
       XlHigh -> (-4127)
       XlGray75 -> (-4126)
       XlGray50 -> (-4125)
       XlGray25 -> (-4124)
       XlDistributed -> (-4117)
       XlCustom -> (-4114)
       XlCombination -> (-4111)
       XlCenter -> (-4108)
       XlBottom -> (-4107)
       XlAutomatic -> (-4105)
       Xl3DSurface -> (-4103)
       Xl3DBar -> (-4099)
       XlDefaultAutoFormat -> (-1)
       XlAbove -> 0
       XlBelow -> 1
       XlBoth -> 1
       XlFixedValue -> 1
       XlGeneral -> 1
       XlSolid -> 1
       XlSquare -> 1
       XlBar -> 2
       XlCorner -> 2
       XlDiamond -> 2
       XlInside -> 2
       XlMaximum -> 2
       XlPercent -> 2
       XlPlusValues -> 2
       XlShowValue -> 2
       XlSingle -> 2
       XlTransparent -> 2
       XlColumn -> 3
       XlMinusValues -> 3
       XlOpaque -> 3
       XlOutside -> 3
       XlScale -> 3
       XlShowPercent -> 3
       XlTriangle -> 3
       XlCross -> 4
       XlMinimum -> 4
       XlNextToAxis -> 4
       XlShowLabel -> 4
       XlStError -> 4
       XlFill -> 5
       XlShowLabelAndPercent -> 5
       XlStar -> 5
       XlCircle -> 8
       XlChecker -> 9
       XlPlus -> 9
       XlSemiGray75 -> 10
       XlLightHorizontal -> 11
       XlLightVertical -> 12
       XlLightDown -> 13
       XlLightUp -> 14
       XlGrid -> 15
       XlCrissCross -> 16
       XlGray16 -> 17
       XlGray8 -> 18
  
  toEnum v =
    case v of
       (-4160) -> XlTop
       (-4152) -> XlRight
       (-4142) -> XlNone
       (-4134) -> XlLow
       (-4131) -> XlLeft
       (-4130) -> XlJustify
       (-4127) -> XlHigh
       (-4126) -> XlGray75
       (-4125) -> XlGray50
       (-4124) -> XlGray25
       (-4117) -> XlDistributed
       (-4114) -> XlCustom
       (-4111) -> XlCombination
       (-4108) -> XlCenter
       (-4107) -> XlBottom
       (-4105) -> XlAutomatic
       (-4103) -> Xl3DSurface
       (-4099) -> Xl3DBar
       (-1) -> XlDefaultAutoFormat
       0 -> XlAbove
       1 -> XlBelow
       1 -> XlBoth
       1 -> XlFixedValue
       1 -> XlGeneral
       1 -> XlSolid
       1 -> XlSquare
       2 -> XlBar
       2 -> XlCorner
       2 -> XlDiamond
       2 -> XlInside
       2 -> XlMaximum
       2 -> XlPercent
       2 -> XlPlusValues
       2 -> XlShowValue
       2 -> XlSingle
       2 -> XlTransparent
       3 -> XlColumn
       3 -> XlMinusValues
       3 -> XlOpaque
       3 -> XlOutside
       3 -> XlScale
       3 -> XlShowPercent
       3 -> XlTriangle
       4 -> XlCross
       4 -> XlMinimum
       4 -> XlNextToAxis
       4 -> XlShowLabel
       4 -> XlStError
       5 -> XlFill
       5 -> XlShowLabelAndPercent
       5 -> XlStar
       8 -> XlCircle
       9 -> XlChecker
       9 -> XlPlus
       10 -> XlSemiGray75
       11 -> XlLightHorizontal
       12 -> XlLightVertical
       13 -> XlLightDown
       14 -> XlLightUp
       15 -> XlGrid
       16 -> XlCrissCross
       17 -> XlGray16
       18 -> XlGray8
       _ -> error "unmarshallXlConstants: illegal enum value "
  
instance Variant (XlConstants) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlReadingOrder
 = XlRTL
 | XlLTR
 | XlContext
 
instance Enum (XlReadingOrder) where
  fromEnum v =
    case v of
       XlRTL -> (-5004)
       XlLTR -> (-5003)
       XlContext -> (-5002)
  
  toEnum v =
    case v of
       (-5004) -> XlRTL
       (-5003) -> XlLTR
       (-5002) -> XlContext
       _ -> error "unmarshallXlReadingOrder: illegal enum value "
  
instance Variant (XlReadingOrder) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlBorderWeight
 = XlMedium
 | XlHairline
 | XlThin
 | XlThick
 
instance Enum (XlBorderWeight) where
  fromEnum v =
    case v of
       XlMedium -> (-4138)
       XlHairline -> 1
       XlThin -> 2
       XlThick -> 4
  
  toEnum v =
    case v of
       (-4138) -> XlMedium
       1 -> XlHairline
       2 -> XlThin
       4 -> XlThick
       _ -> error "unmarshallXlBorderWeight: illegal enum value "
  
instance Variant (XlBorderWeight) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlLegendPosition
 = XlLegendPositionCustom
 | XlLegendPositionTop
 | XlLegendPositionRight
 | XlLegendPositionLeft
 | XlLegendPositionBottom
 | XlLegendPositionCorner
 
instance Enum (XlLegendPosition) where
  fromEnum v =
    case v of
       XlLegendPositionCustom -> (-4161)
       XlLegendPositionTop -> (-4160)
       XlLegendPositionRight -> (-4152)
       XlLegendPositionLeft -> (-4131)
       XlLegendPositionBottom -> (-4107)
       XlLegendPositionCorner -> 2
  
  toEnum v =
    case v of
       (-4161) -> XlLegendPositionCustom
       (-4160) -> XlLegendPositionTop
       (-4152) -> XlLegendPositionRight
       (-4131) -> XlLegendPositionLeft
       (-4107) -> XlLegendPositionBottom
       2 -> XlLegendPositionCorner
       _ -> error "unmarshallXlLegendPosition: illegal enum value "
  
instance Variant (XlLegendPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlUnderlineStyle
 = XlUnderlineStyleNone
 | XlUnderlineStyleDouble
 | XlUnderlineStyleSingle
 | XlUnderlineStyleSingleAccounting
 | XlUnderlineStyleDoubleAccounting
 
instance Enum (XlUnderlineStyle) where
  fromEnum v =
    case v of
       XlUnderlineStyleNone -> (-4142)
       XlUnderlineStyleDouble -> (-4119)
       XlUnderlineStyleSingle -> 2
       XlUnderlineStyleSingleAccounting -> 4
       XlUnderlineStyleDoubleAccounting -> 5
  
  toEnum v =
    case v of
       (-4142) -> XlUnderlineStyleNone
       (-4119) -> XlUnderlineStyleDouble
       2 -> XlUnderlineStyleSingle
       4 -> XlUnderlineStyleSingleAccounting
       5 -> XlUnderlineStyleDoubleAccounting
       _ -> error "unmarshallXlUnderlineStyle: illegal enum value "
  
instance Variant (XlUnderlineStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlColorIndex
 = XlColorIndexNone
 | XlColorIndexAutomatic
 
instance Enum (XlColorIndex) where
  fromEnum v =
    case v of
       XlColorIndexNone -> (-4142)
       XlColorIndexAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4142) -> XlColorIndexNone
       (-4105) -> XlColorIndexAutomatic
       _ -> error "unmarshallXlColorIndex: illegal enum value "
  
instance Variant (XlColorIndex) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlMarkerStyle
 = XlMarkerStyleX
 | XlMarkerStylePicture
 | XlMarkerStyleNone
 | XlMarkerStyleDot
 | XlMarkerStyleDash
 | XlMarkerStyleAutomatic
 | XlMarkerStyleSquare
 | XlMarkerStyleDiamond
 | XlMarkerStyleTriangle
 | XlMarkerStyleStar
 | XlMarkerStyleCircle
 | XlMarkerStylePlus
 
instance Enum (XlMarkerStyle) where
  fromEnum v =
    case v of
       XlMarkerStyleX -> (-4168)
       XlMarkerStylePicture -> (-4147)
       XlMarkerStyleNone -> (-4142)
       XlMarkerStyleDot -> (-4118)
       XlMarkerStyleDash -> (-4115)
       XlMarkerStyleAutomatic -> (-4105)
       XlMarkerStyleSquare -> 1
       XlMarkerStyleDiamond -> 2
       XlMarkerStyleTriangle -> 3
       XlMarkerStyleStar -> 5
       XlMarkerStyleCircle -> 8
       XlMarkerStylePlus -> 9
  
  toEnum v =
    case v of
       (-4168) -> XlMarkerStyleX
       (-4147) -> XlMarkerStylePicture
       (-4142) -> XlMarkerStyleNone
       (-4118) -> XlMarkerStyleDot
       (-4115) -> XlMarkerStyleDash
       (-4105) -> XlMarkerStyleAutomatic
       1 -> XlMarkerStyleSquare
       2 -> XlMarkerStyleDiamond
       3 -> XlMarkerStyleTriangle
       5 -> XlMarkerStyleStar
       8 -> XlMarkerStyleCircle
       9 -> XlMarkerStylePlus
       _ -> error "unmarshallXlMarkerStyle: illegal enum value "
  
instance Variant (XlMarkerStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlRowCol
 = XlRowColList__ [XlRowCol]
 | XlRows
 | XlColumns
 
instance Flags (XlRowCol) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlRowCol) where
  fromEnum v =
    case v of
       (XlRowColList__ xs) -> orList (map fromEnum xs)
       XlRows -> 1
       XlColumns -> 2
  
  toEnum v =
    case v of
       1 -> XlRows
       2 -> XlColumns
       x -> XlRowColList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                 then Just (toEnum (fromIntegral val))
                                                 else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlRowCol: illegal enum value "
  
instance Variant (XlRowCol) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlDataLabelsType
 = XlDataLabelsShowNone
 | XlDataLabelsShowValue
 | XlDataLabelsShowPercent
 | XlDataLabelsShowLabel
 | XlDataLabelsShowLabelAndPercent
 | XlDataLabelsShowBubbleSizes
 
instance Enum (XlDataLabelsType) where
  fromEnum v =
    case v of
       XlDataLabelsShowNone -> (-4142)
       XlDataLabelsShowValue -> 2
       XlDataLabelsShowPercent -> 3
       XlDataLabelsShowLabel -> 4
       XlDataLabelsShowLabelAndPercent -> 5
       XlDataLabelsShowBubbleSizes -> 6
  
  toEnum v =
    case v of
       (-4142) -> XlDataLabelsShowNone
       2 -> XlDataLabelsShowValue
       3 -> XlDataLabelsShowPercent
       4 -> XlDataLabelsShowLabel
       5 -> XlDataLabelsShowLabelAndPercent
       6 -> XlDataLabelsShowBubbleSizes
       _ -> error "unmarshallXlDataLabelsType: illegal enum value "
  
instance Variant (XlDataLabelsType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlErrorBarInclude
 = XlErrorBarIncludeNone
 | XlErrorBarIncludeBoth
 | XlErrorBarIncludePlusValues
 | XlErrorBarIncludeMinusValues
 
instance Enum (XlErrorBarInclude) where
  fromEnum v =
    case v of
       XlErrorBarIncludeNone -> (-4142)
       XlErrorBarIncludeBoth -> 1
       XlErrorBarIncludePlusValues -> 2
       XlErrorBarIncludeMinusValues -> 3
  
  toEnum v =
    case v of
       (-4142) -> XlErrorBarIncludeNone
       1 -> XlErrorBarIncludeBoth
       2 -> XlErrorBarIncludePlusValues
       3 -> XlErrorBarIncludeMinusValues
       _ -> error "unmarshallXlErrorBarInclude: illegal enum value "
  
instance Variant (XlErrorBarInclude) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlErrorBarType
 = XlErrorBarTypeStDev
 | XlErrorBarTypeCustom
 | XlErrorBarTypeFixedValue
 | XlErrorBarTypePercent
 | XlErrorBarTypeStError
 
instance Enum (XlErrorBarType) where
  fromEnum v =
    case v of
       XlErrorBarTypeStDev -> (-4155)
       XlErrorBarTypeCustom -> (-4114)
       XlErrorBarTypeFixedValue -> 1
       XlErrorBarTypePercent -> 2
       XlErrorBarTypeStError -> 4
  
  toEnum v =
    case v of
       (-4155) -> XlErrorBarTypeStDev
       (-4114) -> XlErrorBarTypeCustom
       1 -> XlErrorBarTypeFixedValue
       2 -> XlErrorBarTypePercent
       4 -> XlErrorBarTypeStError
       _ -> error "unmarshallXlErrorBarType: illegal enum value "
  
instance Variant (XlErrorBarType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlErrorBarDirection
 = XlChartX
 | XlChartY
 
instance Enum (XlErrorBarDirection) where
  fromEnum v =
    case v of
       XlChartX -> (-4168)
       XlChartY -> 1
  
  toEnum v =
    case v of
       (-4168) -> XlChartX
       1 -> XlChartY
       _ -> error "unmarshallXlErrorBarDirection: illegal enum value "
  
instance Variant (XlErrorBarDirection) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlChartPictureType
 = XlStretch
 | XlStack
 | XlStackScale
 
instance Enum (XlChartPictureType) where
  fromEnum v =
    case v of
       XlStretch -> 1
       XlStack -> 2
       XlStackScale -> 3
  
  toEnum v =
    case v of
       1 -> XlStretch
       2 -> XlStack
       3 -> XlStackScale
       _ -> error "unmarshallXlChartPictureType: illegal enum value "
  
instance Variant (XlChartPictureType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlChartItem
 = XlDataLabel
 | XlChartArea
 | XlSeries
 | XlChartTitle
 | XlWalls
 | XlCorners
 | XlDataTable
 | XlTrendline
 | XlErrorBars
 | XlXErrorBars
 | XlYErrorBars
 | XlLegendEntry
 | XlLegendKey
 | XlShape
 | XlMajorGridlines
 | XlMinorGridlines
 | XlAxisTitle
 | XlUpBars
 | XlPlotArea
 | XlDownBars
 | XlAxis
 | XlSeriesLines
 | XlFloor
 | XlLegend
 | XlHiLoLines
 | XlDropLines
 | XlRadarAxisLabels
 | XlNothing
 | XlLeaderLines
 | XlDisplayUnitLabel
 | XlPivotChartFieldButton
 | XlPivotChartDropZone
 
instance Enum (XlChartItem) where
  fromEnum v =
    case v of
       XlDataLabel -> 0
       XlChartArea -> 2
       XlSeries -> 3
       XlChartTitle -> 4
       XlWalls -> 5
       XlCorners -> 6
       XlDataTable -> 7
       XlTrendline -> 8
       XlErrorBars -> 9
       XlXErrorBars -> 10
       XlYErrorBars -> 11
       XlLegendEntry -> 12
       XlLegendKey -> 13
       XlShape -> 14
       XlMajorGridlines -> 15
       XlMinorGridlines -> 16
       XlAxisTitle -> 17
       XlUpBars -> 18
       XlPlotArea -> 19
       XlDownBars -> 20
       XlAxis -> 21
       XlSeriesLines -> 22
       XlFloor -> 23
       XlLegend -> 24
       XlHiLoLines -> 25
       XlDropLines -> 26
       XlRadarAxisLabels -> 27
       XlNothing -> 28
       XlLeaderLines -> 29
       XlDisplayUnitLabel -> 30
       XlPivotChartFieldButton -> 31
       XlPivotChartDropZone -> 32
  
  toEnum v =
    case v of
       0 -> XlDataLabel
       2 -> XlChartArea
       3 -> XlSeries
       4 -> XlChartTitle
       5 -> XlWalls
       6 -> XlCorners
       7 -> XlDataTable
       8 -> XlTrendline
       9 -> XlErrorBars
       10 -> XlXErrorBars
       11 -> XlYErrorBars
       12 -> XlLegendEntry
       13 -> XlLegendKey
       14 -> XlShape
       15 -> XlMajorGridlines
       16 -> XlMinorGridlines
       17 -> XlAxisTitle
       18 -> XlUpBars
       19 -> XlPlotArea
       20 -> XlDownBars
       21 -> XlAxis
       22 -> XlSeriesLines
       23 -> XlFloor
       24 -> XlLegend
       25 -> XlHiLoLines
       26 -> XlDropLines
       27 -> XlRadarAxisLabels
       28 -> XlNothing
       29 -> XlLeaderLines
       30 -> XlDisplayUnitLabel
       31 -> XlPivotChartFieldButton
       32 -> XlPivotChartDropZone
       _ -> error "unmarshallXlChartItem: illegal enum value "
  
instance Variant (XlChartItem) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlBarShape
 = XlBox
 | XlPyramidToPoint
 | XlPyramidToMax
 | XlCylinder
 | XlConeToPoint
 | XlConeToMax
 deriving (Enum)
instance Variant (XlBarShape) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlEndStyleCap
 = XlEndStyleCapList__ [XlEndStyleCap]
 | XlCap
 | XlNoCap
 
instance Flags (XlEndStyleCap) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlEndStyleCap) where
  fromEnum v =
    case v of
       (XlEndStyleCapList__ xs) -> orList (map fromEnum xs)
       XlCap -> 1
       XlNoCap -> 2
  
  toEnum v =
    case v of
       1 -> XlCap
       2 -> XlNoCap
       x -> XlEndStyleCapList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                      then Just (toEnum (fromIntegral val))
                                                      else Nothing) (pow2Series 2 1))
       _ -> error "unmarshallXlEndStyleCap: illegal enum value "
  
instance Variant (XlEndStyleCap) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlTrendlineType
 = XlLogarithmic
 | XlLinear
 | XlPolynomial
 | XlPower
 | XlExponential
 | XlMovingAvg
 
instance Enum (XlTrendlineType) where
  fromEnum v =
    case v of
       XlLogarithmic -> (-4133)
       XlLinear -> (-4132)
       XlPolynomial -> 3
       XlPower -> 4
       XlExponential -> 5
       XlMovingAvg -> 6
  
  toEnum v =
    case v of
       (-4133) -> XlLogarithmic
       (-4132) -> XlLinear
       3 -> XlPolynomial
       4 -> XlPower
       5 -> XlExponential
       6 -> XlMovingAvg
       _ -> error "unmarshallXlTrendlineType: illegal enum value "
  
instance Variant (XlTrendlineType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlAxisType
 = XlCategory
 | XlValue
 | XlSeriesAxis
 
instance Enum (XlAxisType) where
  fromEnum v =
    case v of
       XlCategory -> 1
       XlValue -> 2
       XlSeriesAxis -> 3
  
  toEnum v =
    case v of
       1 -> XlCategory
       2 -> XlValue
       3 -> XlSeriesAxis
       _ -> error "unmarshallXlAxisType: illegal enum value "
  
instance Variant (XlAxisType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlAxisCrosses
 = XlAxisCrossesCustom
 | XlAxisCrossesAutomatic
 | XlAxisCrossesMaximum
 | XlAxisCrossesMinimum
 
instance Enum (XlAxisCrosses) where
  fromEnum v =
    case v of
       XlAxisCrossesCustom -> (-4114)
       XlAxisCrossesAutomatic -> (-4105)
       XlAxisCrossesMaximum -> 2
       XlAxisCrossesMinimum -> 4
  
  toEnum v =
    case v of
       (-4114) -> XlAxisCrossesCustom
       (-4105) -> XlAxisCrossesAutomatic
       2 -> XlAxisCrossesMaximum
       4 -> XlAxisCrossesMinimum
       _ -> error "unmarshallXlAxisCrosses: illegal enum value "
  
instance Variant (XlAxisCrosses) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlTickMark
 = XlTickMarkNone
 | XlTickMarkInside
 | XlTickMarkOutside
 | XlTickMarkCross
 
instance Enum (XlTickMark) where
  fromEnum v =
    case v of
       XlTickMarkNone -> (-4142)
       XlTickMarkInside -> 2
       XlTickMarkOutside -> 3
       XlTickMarkCross -> 4
  
  toEnum v =
    case v of
       (-4142) -> XlTickMarkNone
       2 -> XlTickMarkInside
       3 -> XlTickMarkOutside
       4 -> XlTickMarkCross
       _ -> error "unmarshallXlTickMark: illegal enum value "
  
instance Variant (XlTickMark) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlScaleType
 = XlScaleLogarithmic
 | XlScaleLinear
 
instance Enum (XlScaleType) where
  fromEnum v =
    case v of
       XlScaleLogarithmic -> (-4133)
       XlScaleLinear -> (-4132)
  
  toEnum v =
    case v of
       (-4133) -> XlScaleLogarithmic
       (-4132) -> XlScaleLinear
       _ -> error "unmarshallXlScaleType: illegal enum value "
  
instance Variant (XlScaleType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlTickLabelPosition
 = XlTickLabelPositionNone
 | XlTickLabelPositionLow
 | XlTickLabelPositionHigh
 | XlTickLabelPositionNextToAxis
 
instance Enum (XlTickLabelPosition) where
  fromEnum v =
    case v of
       XlTickLabelPositionNone -> (-4142)
       XlTickLabelPositionLow -> (-4134)
       XlTickLabelPositionHigh -> (-4127)
       XlTickLabelPositionNextToAxis -> 4
  
  toEnum v =
    case v of
       (-4142) -> XlTickLabelPositionNone
       (-4134) -> XlTickLabelPositionLow
       (-4127) -> XlTickLabelPositionHigh
       4 -> XlTickLabelPositionNextToAxis
       _ -> error "unmarshallXlTickLabelPosition: illegal enum value "
  
instance Variant (XlTickLabelPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlTimeUnit
 = XlTimeUnitList__ [XlTimeUnit]
 | XlDays
 | XlMonths
 | XlYears
 
instance Flags (XlTimeUnit) where
  x1 .+. x2
    = toEnum ((fromEnum x1 + fromEnum x2))
  
instance Enum (XlTimeUnit) where
  fromEnum v =
    case v of
       (XlTimeUnitList__ xs) -> orList (map fromEnum xs)
       XlDays -> 0
       XlMonths -> 1
       XlYears -> 2
  
  toEnum v =
    case v of
       0 -> XlDays
       1 -> XlMonths
       2 -> XlYears
       x -> XlTimeUnitList__ (mapMaybe (\ val -> if ((val .&. fromIntegral x) == val)
                                                   then Just (toEnum (fromIntegral val))
                                                   else Nothing) (pow2Series 3 0))
       _ -> error "unmarshallXlTimeUnit: illegal enum value "
  
instance Variant (XlTimeUnit) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlCategoryType
 = XlAutomaticScale
 | XlCategoryScale
 | XlTimeScale
 
instance Enum (XlCategoryType) where
  fromEnum v =
    case v of
       XlAutomaticScale -> (-4105)
       XlCategoryScale -> 2
       XlTimeScale -> 3
  
  toEnum v =
    case v of
       (-4105) -> XlAutomaticScale
       2 -> XlCategoryScale
       3 -> XlTimeScale
       _ -> error "unmarshallXlCategoryType: illegal enum value "
  
instance Variant (XlCategoryType) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlDisplayUnit
 = XlMillionMillions
 | XlThousandMillions
 | XlHundredMillions
 | XlTenMillions
 | XlMillions
 | XlHundredThousands
 | XlTenThousands
 | XlThousands
 | XlHundreds
 
instance Enum (XlDisplayUnit) where
  fromEnum v =
    case v of
       XlMillionMillions -> (-10)
       XlThousandMillions -> (-9)
       XlHundredMillions -> (-8)
       XlTenMillions -> (-7)
       XlMillions -> (-6)
       XlHundredThousands -> (-5)
       XlTenThousands -> (-4)
       XlThousands -> (-3)
       XlHundreds -> (-2)
  
  toEnum v =
    case v of
       (-10) -> XlMillionMillions
       (-9) -> XlThousandMillions
       (-8) -> XlHundredMillions
       (-7) -> XlTenMillions
       (-6) -> XlMillions
       (-5) -> XlHundredThousands
       (-4) -> XlTenThousands
       (-3) -> XlThousands
       (-2) -> XlHundreds
       _ -> error "unmarshallXlDisplayUnit: illegal enum value "
  
instance Variant (XlDisplayUnit) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlOrientation
 = XlUpward
 | XlDownward
 | XlVertical
 | XlHorizontal
 
instance Enum (XlOrientation) where
  fromEnum v =
    case v of
       XlUpward -> (-4171)
       XlDownward -> (-4170)
       XlVertical -> (-4166)
       XlHorizontal -> (-4128)
  
  toEnum v =
    case v of
       (-4171) -> XlUpward
       (-4170) -> XlDownward
       (-4166) -> XlVertical
       (-4128) -> XlHorizontal
       _ -> error "unmarshallXlOrientation: illegal enum value "
  
instance Variant (XlOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlTickLabelOrientation
 = XlTickLabelOrientationUpward
 | XlTickLabelOrientationDownward
 | XlTickLabelOrientationVertical
 | XlTickLabelOrientationHorizontal
 | XlTickLabelOrientationAutomatic
 
instance Enum (XlTickLabelOrientation) where
  fromEnum v =
    case v of
       XlTickLabelOrientationUpward -> (-4171)
       XlTickLabelOrientationDownward -> (-4170)
       XlTickLabelOrientationVertical -> (-4166)
       XlTickLabelOrientationHorizontal -> (-4128)
       XlTickLabelOrientationAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4171) -> XlTickLabelOrientationUpward
       (-4170) -> XlTickLabelOrientationDownward
       (-4166) -> XlTickLabelOrientationVertical
       (-4128) -> XlTickLabelOrientationHorizontal
       (-4105) -> XlTickLabelOrientationAutomatic
       _ -> error "unmarshallXlTickLabelOrientation: illegal enum value "
  
instance Variant (XlTickLabelOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlDisplayBlanksAs
 = XlNotPlotted
 | XlZero
 | XlInterpolated
 
instance Enum (XlDisplayBlanksAs) where
  fromEnum v =
    case v of
       XlNotPlotted -> 1
       XlZero -> 2
       XlInterpolated -> 3
  
  toEnum v =
    case v of
       1 -> XlNotPlotted
       2 -> XlZero
       3 -> XlInterpolated
       _ -> error "unmarshallXlDisplayBlanksAs: illegal enum value "
  
instance Variant (XlDisplayBlanksAs) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlDataLabelPosition
 = XlLabelPositionRight
 | XlLabelPositionLeft
 | XlLabelPositionCenter
 | XlLabelPositionAbove
 | XlLabelPositionBelow
 | XlLabelPositionOutsideEnd
 | XlLabelPositionInsideEnd
 | XlLabelPositionInsideBase
 | XlLabelPositionBestFit
 | XlLabelPositionMixed
 | XlLabelPositionCustom
 
instance Enum (XlDataLabelPosition) where
  fromEnum v =
    case v of
       XlLabelPositionRight -> (-4152)
       XlLabelPositionLeft -> (-4131)
       XlLabelPositionCenter -> (-4108)
       XlLabelPositionAbove -> 0
       XlLabelPositionBelow -> 1
       XlLabelPositionOutsideEnd -> 2
       XlLabelPositionInsideEnd -> 3
       XlLabelPositionInsideBase -> 4
       XlLabelPositionBestFit -> 5
       XlLabelPositionMixed -> 6
       XlLabelPositionCustom -> 7
  
  toEnum v =
    case v of
       (-4152) -> XlLabelPositionRight
       (-4131) -> XlLabelPositionLeft
       (-4108) -> XlLabelPositionCenter
       0 -> XlLabelPositionAbove
       1 -> XlLabelPositionBelow
       2 -> XlLabelPositionOutsideEnd
       3 -> XlLabelPositionInsideEnd
       4 -> XlLabelPositionInsideBase
       5 -> XlLabelPositionBestFit
       6 -> XlLabelPositionMixed
       7 -> XlLabelPositionCustom
       _ -> error "unmarshallXlDataLabelPosition: illegal enum value "
  
instance Variant (XlDataLabelPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlPivotFieldOrientation
 = XlHidden
 | XlRowField
 | XlColumnField
 | XlPageField
 | XlDataField
 deriving (Enum)
instance Variant (XlPivotFieldOrientation) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlHAlign
 = XlHAlignRight
 | XlHAlignLeft
 | XlHAlignJustify
 | XlHAlignDistributed
 | XlHAlignCenter
 | XlHAlignGeneral
 | XlHAlignFill
 | XlHAlignCenterAcrossSelection
 
instance Enum (XlHAlign) where
  fromEnum v =
    case v of
       XlHAlignRight -> (-4152)
       XlHAlignLeft -> (-4131)
       XlHAlignJustify -> (-4130)
       XlHAlignDistributed -> (-4117)
       XlHAlignCenter -> (-4108)
       XlHAlignGeneral -> 1
       XlHAlignFill -> 5
       XlHAlignCenterAcrossSelection -> 7
  
  toEnum v =
    case v of
       (-4152) -> XlHAlignRight
       (-4131) -> XlHAlignLeft
       (-4130) -> XlHAlignJustify
       (-4117) -> XlHAlignDistributed
       (-4108) -> XlHAlignCenter
       1 -> XlHAlignGeneral
       5 -> XlHAlignFill
       7 -> XlHAlignCenterAcrossSelection
       _ -> error "unmarshallXlHAlign: illegal enum value "
  
instance Variant (XlHAlign) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlVAlign
 = XlVAlignTop
 | XlVAlignJustify
 | XlVAlignDistributed
 | XlVAlignCenter
 | XlVAlignBottom
 
instance Enum (XlVAlign) where
  fromEnum v =
    case v of
       XlVAlignTop -> (-4160)
       XlVAlignJustify -> (-4130)
       XlVAlignDistributed -> (-4117)
       XlVAlignCenter -> (-4108)
       XlVAlignBottom -> (-4107)
  
  toEnum v =
    case v of
       (-4160) -> XlVAlignTop
       (-4130) -> XlVAlignJustify
       (-4117) -> XlVAlignDistributed
       (-4108) -> XlVAlignCenter
       (-4107) -> XlVAlignBottom
       _ -> error "unmarshallXlVAlign: illegal enum value "
  
instance Variant (XlVAlign) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlLineStyle
 = XlLineStyleNone
 | XlDouble
 | XlDot
 | XlDash
 | XlContinuous
 | XlDashDot
 | XlDashDotDot
 | XlSlantDashDot
 
instance Enum (XlLineStyle) where
  fromEnum v =
    case v of
       XlLineStyleNone -> (-4142)
       XlDouble -> (-4119)
       XlDot -> (-4118)
       XlDash -> (-4115)
       XlContinuous -> 1
       XlDashDot -> 4
       XlDashDotDot -> 5
       XlSlantDashDot -> 13
  
  toEnum v =
    case v of
       (-4142) -> XlLineStyleNone
       (-4119) -> XlDouble
       (-4118) -> XlDot
       (-4115) -> XlDash
       1 -> XlContinuous
       4 -> XlDashDot
       5 -> XlDashDotDot
       13 -> XlSlantDashDot
       _ -> error "unmarshallXlLineStyle: illegal enum value "
  
instance Variant (XlLineStyle) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  
data XlChartElementPosition
 = XlChartElementPositionCustom
 | XlChartElementPositionAutomatic
 
instance Enum (XlChartElementPosition) where
  fromEnum v =
    case v of
       XlChartElementPositionCustom -> (-4114)
       XlChartElementPositionAutomatic -> (-4105)
  
  toEnum v =
    case v of
       (-4114) -> XlChartElementPositionCustom
       (-4105) -> XlChartElementPositionAutomatic
       _ -> error "unmarshallXlChartElementPosition: illegal enum value "
  
instance Variant (XlChartElementPosition) where
  inVariant = inEnum
  
  resVariant = resEnum
  
  defaultVariant = defaultEnum
  
  vtEltType = vtTypeEnum
  

