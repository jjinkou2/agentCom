// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: agentctl.dll

[
  uuid(F5BE8BC2-7DE6-11D0-91FE-00C04FD701A5),
  version(2.0),
  helpstring("Microsoft Agent Control 2.0")
]
library AgentObjects
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IAgentCtlCharacters;
    interface IAgentCtlCharacterEx;
    interface IAgentCtlCharacter;
    interface IAgentCtlBalloonEx;
    interface IAgentCtlBalloon;
    interface IAgentCtlCommandsEx;
    interface IAgentCtlCommands;
    interface IAgentCtlCommandEx;
    interface IAgentCtlCommand;
    interface IAgentCtlRequest;
    interface IAgentCtlAnimationNames;
    interface IAgentCtlAudioObject;
    interface IAgentCtlAudioObjectEx;
    interface IAgentCtlSpeechInput;
    interface IAgentCtlPropertySheet;
    interface IAgentCtlUserInput;
    interface IAgentCtlCommandsWindow;
    interface IAgentCtl;
    interface IAgentCtlEx;
    dispinterface _AgentEvents;

    [
      odl,
      uuid(F5BE8BE8-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlCharacters Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCharacters : IDispatch {
        [id(00000000), propget]
        HRESULT Item(
                        [in] BSTR CharacterID, 
                        [out, retval] IAgentCtlCharacterEx** ppidItem);
        [id(0x00000003)]
        HRESULT Character(
                        [in] BSTR CharacterID, 
                        [out, retval] IAgentCtlCharacterEx** ppidItem);
        [id(0xfffffffc), propget, restricted]
        HRESULT Enum([out, retval] IUnknown** ppunkEnum);
        [id(0x00000002)]
        HRESULT Unload([in] BSTR CharacterID);
        [id(0x00000001)]
        HRESULT Load(
                        [in] BSTR CharacterID, 
                        [in, optional] VARIANT LoadKey, 
                        [out, retval] IAgentCtlRequest** ppidRequest);
    };

    [
      odl,
      uuid(DE8EF600-2F82-11D1-ACAC-00C04FD97575),
      helpstring("IAgentCtlCharacterEx Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCharacterEx : IAgentCtlCharacter {
        [id(0x00000025)]
        HRESULT ShowPopupMenu(
                        [in] short x, 
                        [in] short y, 
                        [out, retval] VARIANT_BOOL* Showed);
        [id(0x00000026), propput]
        HRESULT AutoPopupMenu([in] VARIANT_BOOL On);
        [id(0x00000026), propget]
        HRESULT AutoPopupMenu([out, retval] VARIANT_BOOL* On);
        [id(0x00000027), propput]
        HRESULT HelpModeOn([in] VARIANT_BOOL On);
        [id(0x00000027), propget]
        HRESULT HelpModeOn([out, retval] VARIANT_BOOL* On);
        [id(0x00000028), propput]
        HRESULT HelpContextID([in] long ID);
        [id(0x00000028), propget]
        HRESULT HelpContextID([out, retval] long* ID);
        [id(0x00000029), propget]
        HRESULT Active([out, retval] short* State);
        [id(0x0000002a)]
        HRESULT Listen(
                        [in] VARIANT_BOOL Listen, 
                        [out, retval] VARIANT_BOOL* StartedListening);
        [id(0x0000002b), propput]
        HRESULT LanguageID([in] long LanguageID);
        [id(0x0000002b), propget]
        HRESULT LanguageID([out, retval] long* LanguageID);
        [id(0x0000002e), propget]
        HRESULT SRModeID([out, retval] BSTR* EngineModeId);
        [id(0x0000002e), propput]
        HRESULT SRModeID([in] BSTR EngineModeId);
        [id(0x0000002f), propget]
        HRESULT TTSModeID([out, retval] BSTR* EngineModeId);
        [id(0x0000002f), propput]
        HRESULT TTSModeID([in] BSTR EngineModeId);
        [id(0x00000030), propget]
        HRESULT HelpFile([out, retval] BSTR* File);
        [id(0x00000030), propput]
        HRESULT HelpFile([in] BSTR File);
        [id(0x00000031), propget]
        HRESULT GUID([out, retval] BSTR* GUID);
        [id(0x00000032), propget]
        HRESULT OriginalHeight([out, retval] short* Height);
        [id(0x00000033), propget]
        HRESULT OriginalWidth([out, retval] short* Width);
        [id(0x00000034)]
        HRESULT Think(
                        [in] BSTR Text, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x00000035), propget]
        HRESULT Version([out, retval] BSTR* Version);
        [id(0x00000036), propget]
        HRESULT AnimationNames([out, retval] IAgentCtlAnimationNames** Names);
        [id(0x00000037), propget]
        HRESULT SRStatus([out, retval] long* Status);
    };

    [
      odl,
      uuid(F5BE8BD9-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlCharacter Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCharacter : IDispatch {
        [id(0x00000017), propget]
        HRESULT Balloon([out, retval] IAgentCtlBalloonEx** ppidBalloon);
        [id(0x00000019), propget]
        HRESULT Commands([out, retval] IAgentCtlCommandsEx** ppidCommands);
        [id(0x00000018), propget]
        HRESULT Name([out, retval] BSTR* Name);
        [id(0x0000001c), propget]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000002), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000003), propput]
        HRESULT Left(short Left);
        [id(0x00000003), propget]
        HRESULT Left([out, retval] short* Left);
        [id(0x00000004), propput]
        HRESULT Top(short Top);
        [id(0x00000004), propget]
        HRESULT Top([out, retval] short* Top);
        [id(0x00000005), propput]
        HRESULT Height(short Height);
        [id(0x00000005), propget]
        HRESULT Height([out, retval] short* Height);
        [id(0x00000006), propput]
        HRESULT Width(short Width);
        [id(0x00000006), propget]
        HRESULT Width([out, retval] short* Width);
        [id(0x0000000a), propget]
        HRESULT Speed([out, retval] long* Speed);
        [id(0x0000000b), propget]
        HRESULT Pitch([out, retval] long* Pitch);
        [id(0x0000001d), propput]
        HRESULT IdleOn(VARIANT_BOOL On);
        [id(0x0000001d), propget]
        HRESULT IdleOn([out, retval] VARIANT_BOOL* On);
        [id(0x0000001a)]
        HRESULT Activate(
                        [in, optional] VARIANT State, 
                        [out, retval] VARIANT_BOOL* Success);
        [id(0x0000000d)]
        HRESULT Play(
                        [in] BSTR Animation, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x0000001b)]
        HRESULT Get(
                        [in] BSTR Type, 
                        [in] BSTR Name, 
                        [in, optional] VARIANT Queue, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x0000000e)]
        HRESULT Stop([in, optional] VARIANT Request);
        [id(0x00000016)]
        HRESULT Wait(
                        [in] IDispatch* WaitForRequest, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x00000015)]
        HRESULT Interrupt(
                        [in] IDispatch* InterruptRequest, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x0000000f)]
        HRESULT Speak(
                        [in, optional] VARIANT Text, 
                        [in, optional] VARIANT Url, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x00000011)]
        HRESULT GestureAt(
                        [in] short x, 
                        [in] short y, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x00000012)]
        HRESULT MoveTo(
                        [in] short x, 
                        [in] short y, 
                        [in, optional] VARIANT Speed, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x00000013)]
        HRESULT Hide(
                        [in, optional] VARIANT Fast, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x00000014)]
        HRESULT Show(
                        [in, optional] VARIANT Fast, 
                        [out, retval] IAgentCtlRequest** Request);
        [id(0x0000001f)]
        HRESULT StopAll([in, optional] VARIANT Types);
        [id(0x00000020), propget]
        HRESULT MoveCause([out, retval] short* MoveCause);
        [id(0x00000021), propget]
        HRESULT VisibilityCause([out, retval] short* VisibilityCause);
        [id(0x00000022), propget]
        HRESULT HasOtherClients([out, retval] VARIANT_BOOL* HasOtherClients);
        [id(0x00000023), propput]
        HRESULT SoundEffectsOn(VARIANT_BOOL On);
        [id(0x00000023), propget]
        HRESULT SoundEffectsOn([out, retval] VARIANT_BOOL* On);
        [id(0x00000018), propput]
        HRESULT Name([in] BSTR Name);
        [id(0x0000001c), propput]
        HRESULT Description([in] BSTR Description);
        [id(0x00000024), propget]
        HRESULT ExtraData([out, retval] BSTR* ExtraData);
    };

    [
      odl,
      uuid(822DB1C0-8879-11D1-9EC6-00C04FD7081F),
      helpstring("IAgentCtlBalloonEx Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlBalloonEx : IAgentCtlBalloon {
        [id(0x00000010), propput]
        HRESULT Style([in] long Style);
        [id(0x00000010), propget]
        HRESULT Style([out, retval] long* Style);
    };

    [
      odl,
      uuid(F5BE8BD3-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlBalloon Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlBalloon : IDispatch {
        [id(0x00000001), propget]
        HRESULT Enabled([out, retval] VARIANT_BOOL* Enabled);
        [id(0x00000002), propget]
        HRESULT NumberOfLines([out, retval] long* Lines);
        [id(0x00000003), propget]
        HRESULT CharsPerLine([out, retval] long* CharsPerLine);
        [id(0x00000004), propget]
        HRESULT FontName([out, retval] BSTR* FontName);
        [id(0x00000005), propget]
        HRESULT FontSize([out, retval] long* FontSize);
        [id(0x0000000a), propget]
        HRESULT FontBold([out, retval] VARIANT_BOOL* FontBold);
        [id(0x0000000b), propget]
        HRESULT FontItalic([out, retval] VARIANT_BOOL* FontItalic);
        [id(0x0000000c), propget]
        HRESULT FontStrikethru([out, retval] VARIANT_BOOL* FontStrikethru);
        [id(0x0000000d), propget]
        HRESULT FontUnderline([out, retval] VARIANT_BOOL* FontUnderline);
        [id(0x00000007), propget]
        HRESULT ForeColor([out, retval] long* ForeColor);
        [id(0x00000008), propget]
        HRESULT BackColor([out, retval] long* BackColor);
        [id(0x00000009), propget]
        HRESULT BorderColor([out, retval] long* BorderColor);
        [id(0x0000000e), propput]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x0000000e), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000004), propput]
        HRESULT FontName([in] BSTR FontName);
        [id(0x00000005), propput]
        HRESULT FontSize([in] long FontSize);
        [id(0x0000000f), propput]
        HRESULT FontCharSet([in] short FontCharSet);
        [id(0x0000000f), propget]
        HRESULT FontCharSet([out, retval] short* FontCharSet);
    };

    [
      odl,
      uuid(6BA90C01-3910-11D1-ACB3-00C04FD97575),
      helpstring("IAgentCtlCommandsEx Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCommandsEx : IAgentCtlCommands {
        [id(0x00000010), propput]
        HRESULT DefaultCommand([in] BSTR Name);
        [id(0x00000010), propget]
        HRESULT DefaultCommand([out, retval] BSTR* Name);
        [id(0x00000011), propput]
        HRESULT HelpContextID([in] long ID);
        [id(0x00000011), propget]
        HRESULT HelpContextID([out, retval] long* ID);
        [id(0x00000015), propput]
        HRESULT FontName([in] BSTR FontName);
        [id(0x00000015), propget]
        HRESULT FontName([out, retval] BSTR* FontName);
        [id(0x00000017), propget]
        HRESULT FontSize([out, retval] long* FontSize);
        [id(0x00000017), propput]
        HRESULT FontSize([in] long FontSize);
        [id(0x00000016), propput]
        HRESULT VoiceCaption([in] BSTR VoiceCaption);
        [id(0x00000016), propget]
        HRESULT VoiceCaption([out, retval] BSTR* VoiceCaption);
        [id(0x00000018), propput]
        HRESULT GlobalVoiceCommandsEnabled([in] VARIANT_BOOL Enable);
        [id(0x00000018), propget]
        HRESULT GlobalVoiceCommandsEnabled([out, retval] VARIANT_BOOL* Enable);
    };

    [
      odl,
      uuid(F5BE8BE1-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlCommands Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCommands : IDispatch {
        [id(00000000), propget]
        HRESULT Item(
                        [in] BSTR Name, 
                        [out, retval] IAgentCtlCommandEx** Item);
        [id(0x0000000f)]
        HRESULT Command(
                        [in] BSTR Name, 
                        [out, retval] IAgentCtlCommandEx** Item);
        [id(0x00000002), propget]
        HRESULT Count([out, retval] long* Count);
        [id(0x00000003), propget]
        HRESULT Caption([out, retval] BSTR* Caption);
        [id(0x00000003), propput]
        HRESULT Caption([in] BSTR Caption);
        [id(0x00000004), propget]
        HRESULT Voice([out, retval] BSTR* Voice);
        [id(0x00000004), propput]
        HRESULT Voice([in] BSTR Voice);
        [id(0x00000005), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000005), propput]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0xfffffffc), propget, restricted]
        HRESULT Enum([out, retval] IUnknown** ppunkEnum);
        [id(0x0000000a)]
        HRESULT Add(
                        [in] BSTR Name, 
                        [in, optional] VARIANT Caption, 
                        [in, optional] VARIANT Voice, 
                        [in, optional] VARIANT Enabled, 
                        [in, optional] VARIANT Visible, 
                        [out, retval] IAgentCtlCommand** Command);
        [id(0x0000000b)]
        HRESULT Insert(
                        [in] BSTR Name, 
                        [in] BSTR RefName, 
                        [in, optional] VARIANT Before, 
                        [in, optional] VARIANT Caption, 
                        [in, optional] VARIANT Voice, 
                        [in, optional] VARIANT Enabled, 
                        [in, optional] VARIANT Visible, 
                        [out, retval] IAgentCtlCommand** Command);
        [id(0x0000000d)]
        HRESULT Remove([in] BSTR Name);
        [id(0x0000000e)]
        HRESULT RemoveAll();
    };

    [
      odl,
      uuid(B0913410-3B44-11D1-ACBA-00C04FD97575),
      helpstring("IAgentCtlCommandEx Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCommandEx : IAgentCtlCommand {
        [id(0x00000007), propput]
        HRESULT HelpContextID([in] long ID);
        [id(0x00000007), propget]
        HRESULT HelpContextID([out, retval] long* ID);
        [id(0x00000008), propput]
        HRESULT VoiceCaption([in] BSTR VoiceCaption);
        [id(0x00000008), propget]
        HRESULT VoiceCaption([out, retval] BSTR* VoiceCaption);
    };

    [
      odl,
      uuid(F5BE8BE3-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlCommand Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCommand : IDispatch {
        [id(0x00000001), propget]
        HRESULT Voice([out, retval] BSTR* Voice);
        [id(0x00000001), propput]
        HRESULT Voice([in] BSTR Voice);
        [id(0x00000002), propget]
        HRESULT Caption([out, retval] BSTR* Caption);
        [id(0x00000002), propput]
        HRESULT Caption([in] BSTR Caption);
        [id(0x00000005), propget]
        HRESULT Enabled([out, retval] VARIANT_BOOL* Enabled);
        [id(0x00000005), propput]
        HRESULT Enabled([in] VARIANT_BOOL Enabled);
        [id(0x00000006), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000006), propput]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000003), propget]
        HRESULT Confidence([out, retval] long* Confidence);
        [id(0x00000003), propput]
        HRESULT Confidence([in] long Confidence);
        [id(0x00000004), propget]
        HRESULT ConfidenceText([out, retval] BSTR* Text);
        [id(0x00000004), propput]
        HRESULT ConfidenceText([in] BSTR Text);
    };

    [
      odl,
      uuid(1DAB85C3-803A-11D0-AC63-00C04FD97575),
      helpstring("IAgentCtlRequest Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlRequest : IDispatch {
        [id(00000000), propget, hidden]
        HRESULT ID([out, retval] long* ID);
        [id(0x00000001), propget]
        HRESULT Status([out, retval] long* Status);
        [id(0x00000002), propget]
        HRESULT Description([out, retval] BSTR* Description);
        [id(0x00000003), propget]
        HRESULT Number([out, retval] long* Number);
    };

    [
      odl,
      uuid(8B77181C-D3EF-11D1-8500-00C04FA34A14),
      helpstring("IAgentCtlCharacterAnimations Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlAnimationNames : IDispatch {
        [id(0xfffffffc), propget, restricted]
        HRESULT Enum([out, retval] IUnknown** ppunkEnum);
    };

    [
      odl,
      uuid(F5BE8BDB-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlAudioObject Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlAudioObject : IDispatch {
        [id(0x00000001), propget]
        HRESULT Enabled([out, retval] VARIANT_BOOL* AudioEnabled);
        [id(0x00000002), propget]
        HRESULT SoundEffects([out, retval] VARIANT_BOOL* SoundEffects);
    };

    [
      odl,
      uuid(F5BE8BF0-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlAudioObjectEx Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlAudioObjectEx : IAgentCtlAudioObject {
        [id(0x00000003), propget]
        HRESULT Status([out, retval] short* Available);
    };

    [
      odl,
      uuid(F5BE8BDD-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlSpeechInput Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlSpeechInput : IDispatch {
        [id(0x00000001), propget]
        HRESULT Enabled([out, retval] VARIANT_BOOL* VoiceEnabled);
        [id(0x00000002), propget]
        HRESULT Language([out, retval] BSTR* Language);
        [id(0x00000003), propget]
        HRESULT HotKey([out, retval] BSTR* HotKey);
        [id(0x00000004), propget]
        HRESULT Installed([out, retval] VARIANT_BOOL* VoiceInstalled);
        [id(0x00000005), propget]
        HRESULT Engine([out, retval] BSTR* Engine);
        [id(0x00000005), propput]
        HRESULT Engine([in] BSTR Engine);
        [id(0x00000006), propget]
        HRESULT ListeningTip([out, retval] VARIANT_BOOL* ListeningTip);
    };

    [
      odl,
      uuid(F5BE8BDF-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtlPropertySheet Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlPropertySheet : IDispatch {
        [id(0x00000001), propget]
        HRESULT Left([out, retval] short* Left);
        [id(0x00000002), propget]
        HRESULT Top([out, retval] short* Top);
        [id(0x00000003), propget]
        HRESULT Height([out, retval] short* Height);
        [id(0x00000004), propget]
        HRESULT Width([out, retval] short* Width);
        [id(0x00000006), propput]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000006), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000005), propput]
        HRESULT Page([in] BSTR Page);
        [id(0x00000005), propget]
        HRESULT Page([out, retval] BSTR* Page);
    };

    [
      odl,
      uuid(C4ABF875-8100-11D0-AC63-00C04FD97575),
      dual,
      oleautomation
    ]
    interface IAgentCtlUserInput : IDispatch {
        [id(0x60020000), propget]
        HRESULT Count([out, retval] short* pCount);
        [id(0x60020001), propget]
        HRESULT Name([out, retval] BSTR* pName);
        [id(0x60020002), propget]
        HRESULT CharacterID([out, retval] BSTR* pCharacterID);
        [id(0x60020003), propget]
        HRESULT Confidence([out, retval] long* pConfidence);
        [id(0x60020004), propget]
        HRESULT Voice([out, retval] BSTR* pVoice);
        [id(0x60020005), propget]
        HRESULT Alt1Name([out, retval] BSTR* pAlt1Name);
        [id(0x60020006), propget]
        HRESULT Alt1Confidence([out, retval] long* pAlt1Confidence);
        [id(0x60020007), propget]
        HRESULT Alt1Voice([out, retval] BSTR* pAlt1Voice);
        [id(0x60020008), propget]
        HRESULT Alt2Name([out, retval] BSTR* pAlt2Name);
        [id(0x60020009), propget]
        HRESULT Alt2Confidence([out, retval] long* pAlt2Confidence);
        [id(0x6002000a), propget]
        HRESULT Alt2Voice([out, retval] BSTR* pAlt2Voice);
    };

    [
      odl,
      uuid(6D0ECB27-9968-11D0-AC6E-00C04FD97575),
      helpstring("IAgentCtlCommandsWindow Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlCommandsWindow : IDispatch {
        [id(0x00000005), propget]
        HRESULT Visible([out, retval] VARIANT_BOOL* Visible);
        [id(0x00000005), propput]
        HRESULT Visible([in] VARIANT_BOOL Visible);
        [id(0x00000006), propget]
        HRESULT Left([out, retval] short* Left);
        [id(0x00000007), propget]
        HRESULT Top([out, retval] short* Top);
        [id(0x00000008), propget]
        HRESULT Height([out, retval] short* Height);
        [id(0x00000009), propget]
        HRESULT Width([out, retval] short* Width);
    };

    [
      odl,
      uuid(F5BE8BD1-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtl Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtl : IDispatch {
        [id(0x00000003), propget]
        HRESULT Characters([out, retval] IAgentCtlCharacters** Characters);
        [id(0x00000004), propget]
        HRESULT AudioOutput([out, retval] IAgentCtlAudioObjectEx** AudioOutput);
        [id(0x00000005), propget]
        HRESULT SpeechInput([out, retval] IAgentCtlSpeechInput** SpeechInput);
        [id(0x00000008), propget]
        HRESULT PropertySheet([out, retval] IAgentCtlPropertySheet** PropSheet);
        [id(0x0000000c), propget]
        HRESULT CommandsWindow([out, retval] IAgentCtlCommandsWindow** CommandsWindow);
        [id(0x00000009), propget]
        HRESULT Connected([out, retval] VARIANT_BOOL* Connected);
        [id(0x00000009), propput]
        HRESULT Connected([in] VARIANT_BOOL Connected);
        [id(0x0000000e), propget]
        HRESULT Suspended([out, retval] VARIANT_BOOL* Suspended);
    };

    [
      odl,
      uuid(8563FF20-8ECC-11D1-B9B4-00C04FD97575),
      helpstring("IAgentCtlEx Interface"),
      dual,
      oleautomation
    ]
    interface IAgentCtlEx : IAgentCtl {
        [id(0x00000014)]
        HRESULT ShowDefaultCharacterProperties(
                        [in, optional] VARIANT x, 
                        [in, optional] VARIANT y);
        [id(0x00000015), propget]
        HRESULT RaiseRequestErrors([out, retval] VARIANT_BOOL* RaiseErrors);
        [id(0x00000015), propput]
        HRESULT RaiseRequestErrors([in] VARIANT_BOOL RaiseErrors);
    };

    [
      uuid(F5BE8BD4-7DE6-11D0-91FE-00C04FD701A5),
      helpstring("IAgentCtl event interface")
    ]
    dispinterface _AgentEvents {
        properties:
        methods:
            [id(0x00000001)]
            void ActivateInput(BSTR CharacterID);
            [id(0x00000003)]
            void DeactivateInput(BSTR CharacterID);
            [id(0x00000002)]
            void Click(
                            [in] BSTR CharacterID, 
                            [in] short Button, 
                            [in] short Shift, 
                            [in] short x, 
                            [in] short y);
            [id(0x00000004)]
            void DblClick(
                            [in] BSTR CharacterID, 
                            [in] short Button, 
                            [in] short Shift, 
                            [in] short x, 
                            [in] short y);
            [id(0x00000005)]
            void DragStart(
                            [in] BSTR CharacterID, 
                            [in] short Button, 
                            [in] short Shift, 
                            [in] short x, 
                            [in] short y);
            [id(0x00000006)]
            void DragComplete(
                            [in] BSTR CharacterID, 
                            [in] short Button, 
                            [in] short Shift, 
                            [in] short x, 
                            [in] short y);
            [id(0x0000000f)]
            void Show(
                            [in] BSTR CharacterID, 
                            [in] short Cause);
            [id(0x00000007)]
            void Hide(
                            [in] BSTR CharacterID, 
                            [in] short Cause);
            [id(0x00000009)]
            void RequestStart([in] IDispatch* Request);
            [id(0x0000000b)]
            void RequestComplete([in] IDispatch* Request);
            [id(0x00000015)]
            void Restart();
            [id(0x0000000c)]
            void Shutdown();
            [id(0x00000010)]
            void Bookmark([in] long BookmarkID);
            [id(0x00000011)]
            void Command([in] IDispatch* UserInput);
            [id(0x00000013)]
            void IdleStart([in] BSTR CharacterID);
            [id(0x00000014)]
            void IdleComplete([in] BSTR CharacterID);
            [id(0x00000016)]
            void Move(
                            [in] BSTR CharacterID, 
                            [in] short x, 
                            [in] short y, 
                            [in] short Cause);
            [id(0x00000017)]
            void Size(
                            [in] BSTR CharacterID, 
                            [in] short Width, 
                            [in] short Height);
            [id(0x00000018)]
            void BalloonShow([in] BSTR CharacterID);
            [id(0x00000019)]
            void BalloonHide([in] BSTR CharacterID);
            [id(0x0000001a)]
            void HelpComplete(
                            [in] BSTR CharacterID, 
                            [in] BSTR Name, 
                            [in] short Cause);
            [id(0x0000001b)]
            void ListenStart([in] BSTR CharacterID);
            [id(0x0000001c)]
            void ListenComplete(
                            [in] BSTR CharacterID, 
                            [in] short Cause);
            [id(0x0000001e)]
            void DefaultCharacterChange(BSTR GUID);
            [id(0x0000001f)]
            void AgentPropertyChange();
            [id(0x00000020)]
            void ActiveClientChange(
                            [in] BSTR CharacterID, 
                            [in] VARIANT_BOOL Active);
    };

    [
      uuid(D45FD31B-5C6E-11D1-9EC1-00C04FD7081F),
      helpstring("Microsoft Agent Control 2.0")
    ]
    coclass Agent {
        [default] interface IAgentCtlEx;
        [default, source] dispinterface _AgentEvents;
    };
};
