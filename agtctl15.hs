-- Automatically generated by HaskellDirect (ihc.exe), version 0.21
-- Created: 10:45 Paris, Madrid (heure d’été), Thursday 09 August, 2012
-- Command line: -o agtctl15.hs -d -dshow-passes --verbose -fgen-variant-instances AgtCtl15.IDL -fno-qualified-names -fno-export-list

module Agtctl15 where

import Prelude
import System.Win32.Com.Automation 
import System.Win32.Com 
import System.Win32.Com.Server (ComVTable)
import Data.Int (Int16, Int32)
import System.Win32.Com.Server.StdDispatch

libidAgentObjects :: LIBID
libidAgentObjects =
  mkLIBID "{F5BE8BC2-7DE6-11D0-91FE-00C04FD701A5}"

-- --------------------------------------------------
-- 
-- interface IAgentCtlCharacters
-- 
-- --------------------------------------------------
data IAgentCtlCharacters_ a = IAgentCtlCharacters__ 
type IAgentCtlCharacters a = IDispatch (IAgentCtlCharacters_ a)
iidIAgentCtlCharacters :: IID (IAgentCtlCharacters ())
iidIAgentCtlCharacters =
  mkIID "{F5BE8BE8-7DE6-11D0-91FE-00C04FD701A5}"

getItem :: String
        -> IAgentCtlCharacters a0
        -> IO (IAgentCtlCharacter ())
getItem characterID =
  propertyGet "Item"
              [inString characterID]
              outIUnknown

character :: String
          -> IAgentCtlCharacters a0
          -> IO (IAgentCtlCharacter ())
character characterID =
  function1 "Character"
            [inString characterID]
            outIUnknown

getEnum :: IAgentCtlCharacters a0
        -> IO (IUnknown ())
getEnum =
  propertyGet "Enum"
              []
              outIUnknown

unload :: String
       -> IAgentCtlCharacters a0
       -> IO ()
unload characterID =
  method0 "Unload"
          [inString characterID]

load :: (Variant a1)  
     => String
     -> a1
     -> IAgentCtlCharacters a0
     -> IO (IAgentCtlRequest ())
load characterID loadKey =
  function1 "Load"
            [ inString characterID
            , inVariant loadKey
            ]
            outIUnknown

-- --------------------------------------------------
-- 
-- interface IAgentCtlCharacter
-- 
-- --------------------------------------------------
data IAgentCtlCharacter_ a = IAgentCtlCharacter__ 
type IAgentCtlCharacter a = IDispatch (IAgentCtlCharacter_ a)
iidIAgentCtlCharacter :: IID (IAgentCtlCharacter ())
iidIAgentCtlCharacter =
  mkIID "{F5BE8BD9-7DE6-11D0-91FE-00C04FD701A5}"

getBalloon :: IAgentCtlCharacter a0
           -> IO (IAgentCtlBalloon ())
getBalloon =
  propertyGet "Balloon"
              []
              outIUnknown

getCommands :: IAgentCtlCharacter a0
            -> IO (IAgentCtlCommands ())
getCommands =
  propertyGet "Commands"
              []
              outIUnknown

getName :: IAgentCtlCharacter a0
        -> IO String
getName =
  propertyGet "Name"
              []
              outString

getDescription :: IAgentCtlCharacter a0
               -> IO String
getDescription =
  propertyGet "Description"
              []
              outString

getVisible :: IAgentCtlCharacter a0
           -> IO Bool
getVisible =
  propertyGet "Visible"
              []
              outBool

setLeft :: Int16
        -> IAgentCtlCharacter a0
        -> IO ()
setLeft pLeft =
  propertySet "Left"
              [inInt16 pLeft]

getLeft :: IAgentCtlCharacter a0
        -> IO Int16
getLeft =
  propertyGet "Left"
              []
              outInt16

setTop :: Int16
       -> IAgentCtlCharacter a0
       -> IO ()
setTop pTop =
  propertySet "Top"
              [inInt16 pTop]

getTop :: IAgentCtlCharacter a0
       -> IO Int16
getTop =
  propertyGet "Top"
              []
              outInt16

setHeight :: Int16
          -> IAgentCtlCharacter a0
          -> IO ()
setHeight pHeight =
  propertySet "Height"
              [inInt16 pHeight]

getHeight :: IAgentCtlCharacter a0
          -> IO Int16
getHeight =
  propertyGet "Height"
              []
              outInt16

setWidth :: Int16
         -> IAgentCtlCharacter a0
         -> IO ()
setWidth pWidth =
  propertySet "Width"
              [inInt16 pWidth]

getWidth :: IAgentCtlCharacter a0
         -> IO Int16
getWidth =
  propertyGet "Width"
              []
              outInt16

getSpeed :: IAgentCtlCharacter a0
         -> IO Int32
getSpeed =
  propertyGet "Speed"
              []
              outInt32

getPitch :: IAgentCtlCharacter a0
         -> IO Int32
getPitch =
  propertyGet "Pitch"
              []
              outInt32

setIdleOn :: Bool
          -> IAgentCtlCharacter a0
          -> IO ()
setIdleOn pOn =
  propertySet "IdleOn"
              [inBool pOn]

getIdleOn :: IAgentCtlCharacter a0
          -> IO Bool
getIdleOn =
  propertyGet "IdleOn"
              []
              outBool

activate :: (Variant a1)
         => a1
         -> IAgentCtlCharacter a0
         -> IO Bool
activate state =
  function1 "Activate"
            [inVariant state]
            outBool

play :: String
     -> IAgentCtlCharacter a0
     -> IO (IAgentCtlRequest ())
play animation =
  function1 "Play"
            [inString animation]
            outIUnknown

get :: (Variant a1)
    => String
    -> String
    -> a1
    -> IAgentCtlCharacter a0
    -> IO (IAgentCtlRequest ())
get type0 name queue =
  function1 "Get"
            [ inString type0
            , inString name
            , inVariant queue
            ]
            outIUnknown

stop :: (Variant a1)
     => a1
     -> IAgentCtlCharacter a0
     -> IO ()
stop request =
  method0 "Stop"
          [inVariant request]

wait :: IDispatch a1
     -> IAgentCtlCharacter a0
     -> IO (IAgentCtlRequest ())
wait waitForRequest =
  function1 "Wait"
            [inIDispatch waitForRequest]
            outIUnknown

interrupt :: IDispatch a1
          -> IAgentCtlCharacter a0
          -> IO (IAgentCtlRequest ())
interrupt interruptRequest =
  function1 "Interrupt"
            [inIDispatch interruptRequest]
            outIUnknown

speak :: (Variant a1, Variant a2)
      => a1
      -> a2
      -> IAgentCtlCharacter a0
      -> IO (IAgentCtlRequest ())
speak text url =
  function1 "Speak"
            [ inVariant text
            , inVariant url
            ]
            outIUnknown

gestureAt :: Int16
          -> Int16
          -> IAgentCtlCharacter a0
          -> IO (IAgentCtlRequest ())
gestureAt x y =
  function1 "GestureAt"
            [ inInt16 x
            , inInt16 y
            ]
            outIUnknown

moveTo :: (Variant a1)
       => Int16
       -> Int16
       -> a1
       -> IAgentCtlCharacter a0
       -> IO (IAgentCtlRequest ())
moveTo x y speed =
  function1 "MoveTo"
            [ inInt16 x
            , inInt16 y
            , inVariant speed
            ]
            outIUnknown

hide :: (Variant a1)
     => a1
     -> IAgentCtlCharacter a0
     -> IO (IAgentCtlRequest ())
hide fast =
  function1 "Hide"
            [inVariant fast]
            outIUnknown

show :: (Variant a1)
     => a1
     -> IAgentCtlCharacter a0
     -> IO (IAgentCtlRequest ())
show fast =
  function1 "Show"
            [inVariant fast]
            outIUnknown

stopAll :: (Variant a1)
        => a1
        -> IAgentCtlCharacter a0
        -> IO ()
stopAll types =
  method0 "StopAll"
          [inVariant types]

getMoveCause :: IAgentCtlCharacter a0
             -> IO Int16
getMoveCause =
  propertyGet "MoveCause"
              []
              outInt16

getVisibilityCause :: IAgentCtlCharacter a0
                   -> IO Int16
getVisibilityCause =
  propertyGet "VisibilityCause"
              []
              outInt16

getHasOtherClients :: IAgentCtlCharacter a0
                   -> IO Bool
getHasOtherClients =
  propertyGet "HasOtherClients"
              []
              outBool

setSoundEffectsOn :: Bool
                  -> IAgentCtlCharacter a0
                  -> IO ()
setSoundEffectsOn pOn =
  propertySet "SoundEffectsOn"
              [inBool pOn]

getSoundEffectsOn :: IAgentCtlCharacter a0
                  -> IO Bool
getSoundEffectsOn =
  propertyGet "SoundEffectsOn"
              []
              outBool

setName :: String
        -> IAgentCtlCharacter a0
        -> IO ()
setName pName =
  propertySet "Name"
              [inString pName]

setDescription :: String
               -> IAgentCtlCharacter a0
               -> IO ()
setDescription pDescription =
  propertySet "Description"
              [inString pDescription]

getExtraData :: IAgentCtlCharacter a0
             -> IO String
getExtraData =
  propertyGet "ExtraData"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IAgentCtlBalloon
-- 
-- --------------------------------------------------
data IAgentCtlBalloon_ a = IAgentCtlBalloon__ 
type IAgentCtlBalloon a = IDispatch (IAgentCtlBalloon_ a)
iidIAgentCtlBalloon :: IID (IAgentCtlBalloon ())
iidIAgentCtlBalloon =
  mkIID "{F5BE8BD3-7DE6-11D0-91FE-00C04FD701A5}"

getEnabled :: IAgentCtlBalloon a0
           -> IO Bool
getEnabled =
  propertyGet "Enabled"
              []
              outBool

getNumberOfLines :: IAgentCtlBalloon a0
                 -> IO Int32
getNumberOfLines =
  propertyGet "NumberOfLines"
              []
              outInt32

getCharsPerLine :: IAgentCtlBalloon a0
                -> IO Int32
getCharsPerLine =
  propertyGet "CharsPerLine"
              []
              outInt32

getFontName :: IAgentCtlBalloon a0
            -> IO String
getFontName =
  propertyGet "FontName"
              []
              outString

getFontSize :: IAgentCtlBalloon a0
            -> IO Int32
getFontSize =
  propertyGet "FontSize"
              []
              outInt32

getFontBold :: IAgentCtlBalloon a0
            -> IO Bool
getFontBold =
  propertyGet "FontBold"
              []
              outBool

getFontItalic :: IAgentCtlBalloon a0
              -> IO Bool
getFontItalic =
  propertyGet "FontItalic"
              []
              outBool

getFontStrikethru :: IAgentCtlBalloon a0
                  -> IO Bool
getFontStrikethru =
  propertyGet "FontStrikethru"
              []
              outBool

getFontUnderline :: IAgentCtlBalloon a0
                 -> IO Bool
getFontUnderline =
  propertyGet "FontUnderline"
              []
              outBool

getForeColor :: IAgentCtlBalloon a0
             -> IO Int32
getForeColor =
  propertyGet "ForeColor"
              []
              outInt32

getBackColor :: IAgentCtlBalloon a0
             -> IO Int32
getBackColor =
  propertyGet "BackColor"
              []
              outInt32

getBorderColor :: IAgentCtlBalloon a0
               -> IO Int32
getBorderColor =
  propertyGet "BorderColor"
              []
              outInt32

setVisible :: Bool
           -> IAgentCtlBalloon a0
           -> IO ()
setVisible visible =
  propertySet "Visible"
              [inBool visible]

getVisible0 :: IAgentCtlBalloon a0
            -> IO Bool
getVisible0 =
  propertyGet "Visible"
              []
              outBool

setFontName :: String
            -> IAgentCtlBalloon a0
            -> IO ()
setFontName fontName =
  propertySet "FontName"
              [inString fontName]

setFontSize :: Int32
            -> IAgentCtlBalloon a0
            -> IO ()
setFontSize fontSize =
  propertySet "FontSize"
              [inInt32 fontSize]

setFontCharSet :: Int16
               -> IAgentCtlBalloon a0
               -> IO ()
setFontCharSet fontCharSet =
  propertySet "FontCharSet"
              [inInt16 fontCharSet]

getFontCharSet :: IAgentCtlBalloon a0
               -> IO Int16
getFontCharSet =
  propertyGet "FontCharSet"
              []
              outInt16

-- --------------------------------------------------
-- 
-- interface IAgentCtlCommands
-- 
-- --------------------------------------------------
data IAgentCtlCommands_ a = IAgentCtlCommands__ 
type IAgentCtlCommands a = IDispatch (IAgentCtlCommands_ a)
iidIAgentCtlCommands :: IID (IAgentCtlCommands ())
iidIAgentCtlCommands =
  mkIID "{F5BE8BE1-7DE6-11D0-91FE-00C04FD701A5}"

getItem0 :: String
         -> IAgentCtlCommands a0
         -> IO (IAgentCtlCommand ())
getItem0 name =
  propertyGet "Item"
              [inString name]
              outIUnknown

command :: String
        -> IAgentCtlCommands a0
        -> IO (IAgentCtlCommand ())
command name =
  function1 "Command"
            [inString name]
            outIUnknown

getCount :: IAgentCtlCommands a0
         -> IO Int32
getCount =
  propertyGet "Count"
              []
              outInt32

getCaption :: IAgentCtlCommands a0
           -> IO String
getCaption =
  propertyGet "Caption"
              []
              outString

setCaption :: String
           -> IAgentCtlCommands a0
           -> IO ()
setCaption caption =
  propertySet "Caption"
              [inString caption]

getVoice :: IAgentCtlCommands a0
         -> IO String
getVoice =
  propertyGet "Voice"
              []
              outString

setVoice :: String
         -> IAgentCtlCommands a0
         -> IO ()
setVoice voice =
  propertySet "Voice"
              [inString voice]

getVisible1 :: IAgentCtlCommands a0
            -> IO Bool
getVisible1 =
  propertyGet "Visible"
              []
              outBool

setVisible0 :: Bool
            -> IAgentCtlCommands a0
            -> IO ()
setVisible0 visible =
  propertySet "Visible"
              [inBool visible]

getEnum0 :: IAgentCtlCommands a0
         -> IO (IUnknown ())
getEnum0 =
  propertyGet "Enum"
              []
              outIUnknown

add :: (Variant a1, Variant a2, Variant a3, Variant a4)
    => String
    -> a1
    -> a2
    -> a3
    -> a4
    -> IAgentCtlCommands a0
    -> IO (IAgentCtlCommand ())
add name caption voice enabled visible =
  function1 "Add"
            [ inString name
            , inVariant caption
            , inVariant voice
            , inVariant enabled
            , inVariant visible
            ]
            outIUnknown

insert :: (Variant a1, Variant a2, Variant a3, Variant a4, Variant a5)
       => String
       -> String
       -> a1
       -> a2
       -> a3
       -> a4
       -> a5
       -> IAgentCtlCommands a0
       -> IO (IAgentCtlCommand ())
insert name refName before caption voice enabled visible =
  function1 "Insert"
            [ inString name
            , inString refName
            , inVariant before
            , inVariant caption
            , inVariant voice
            , inVariant enabled
            , inVariant visible
            ]
            outIUnknown

remove :: String
       -> IAgentCtlCommands a0
       -> IO ()
remove name =
  method0 "Remove"
          [inString name]

removeAll :: IAgentCtlCommands a0
          -> IO ()
removeAll =
  method0 "RemoveAll"
          []

-- --------------------------------------------------
-- 
-- interface IAgentCtlCommand
-- 
-- --------------------------------------------------
data IAgentCtlCommand_ a = IAgentCtlCommand__ 
type IAgentCtlCommand a = IDispatch (IAgentCtlCommand_ a)
iidIAgentCtlCommand :: IID (IAgentCtlCommand ())
iidIAgentCtlCommand =
  mkIID "{F5BE8BE3-7DE6-11D0-91FE-00C04FD701A5}"

getVoice0 :: IAgentCtlCommand a0
          -> IO String
getVoice0 =
  propertyGet "Voice"
              []
              outString

setVoice0 :: String
          -> IAgentCtlCommand a0
          -> IO ()
setVoice0 voice =
  propertySet "Voice"
              [inString voice]

getCaption0 :: IAgentCtlCommand a0
            -> IO String
getCaption0 =
  propertyGet "Caption"
              []
              outString

setCaption0 :: String
            -> IAgentCtlCommand a0
            -> IO ()
setCaption0 caption =
  propertySet "Caption"
              [inString caption]

getEnabled0 :: IAgentCtlCommand a0
            -> IO Bool
getEnabled0 =
  propertyGet "Enabled"
              []
              outBool

setEnabled :: Bool
           -> IAgentCtlCommand a0
           -> IO ()
setEnabled enabled =
  propertySet "Enabled"
              [inBool enabled]

getVisible2 :: IAgentCtlCommand a0
            -> IO Bool
getVisible2 =
  propertyGet "Visible"
              []
              outBool

setVisible1 :: Bool
            -> IAgentCtlCommand a0
            -> IO ()
setVisible1 visible =
  propertySet "Visible"
              [inBool visible]

getConfidence :: IAgentCtlCommand a0
              -> IO Int32
getConfidence =
  propertyGet "Confidence"
              []
              outInt32

setConfidence :: Int32
              -> IAgentCtlCommand a0
              -> IO ()
setConfidence confidence =
  propertySet "Confidence"
              [inInt32 confidence]

getConfidenceText :: IAgentCtlCommand a0
                  -> IO String
getConfidenceText =
  propertyGet "ConfidenceText"
              []
              outString

setConfidenceText :: String
                  -> IAgentCtlCommand a0
                  -> IO ()
setConfidenceText text =
  propertySet "ConfidenceText"
              [inString text]

-- --------------------------------------------------
-- 
-- interface IAgentCtlRequest
-- 
-- --------------------------------------------------
data IAgentCtlRequest_ a = IAgentCtlRequest__ 
type IAgentCtlRequest a = IDispatch (IAgentCtlRequest_ a)
iidIAgentCtlRequest :: IID (IAgentCtlRequest ())
iidIAgentCtlRequest =
  mkIID "{1DAB85C3-803A-11D0-AC63-00C04FD97575}"

getID :: IAgentCtlRequest a0
      -> IO Int32
getID =
  propertyGet "ID"
              []
              outInt32

getStatus :: IAgentCtlRequest a0
          -> IO Int32
getStatus =
  propertyGet "Status"
              []
              outInt32

getDescription0 :: IAgentCtlRequest a0
                -> IO String
getDescription0 =
  propertyGet "Description"
              []
              outString

getNumber :: IAgentCtlRequest a0
          -> IO Int32
getNumber =
  propertyGet "Number"
              []
              outInt32

-- --------------------------------------------------
-- 
-- interface IAgentCtlAudioObject
-- 
-- --------------------------------------------------
data IAgentCtlAudioObject_ a = IAgentCtlAudioObject__ 
type IAgentCtlAudioObject a = IDispatch (IAgentCtlAudioObject_ a)
iidIAgentCtlAudioObject :: IID (IAgentCtlAudioObject ())
iidIAgentCtlAudioObject =
  mkIID "{F5BE8BDB-7DE6-11D0-91FE-00C04FD701A5}"

getEnabled1 :: IAgentCtlAudioObject a0
            -> IO Bool
getEnabled1 =
  propertyGet "Enabled"
              []
              outBool

getSoundEffects :: IAgentCtlAudioObject a0
                -> IO Bool
getSoundEffects =
  propertyGet "SoundEffects"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IAgentCtlSpeechInput
-- 
-- --------------------------------------------------
data IAgentCtlSpeechInput_ a = IAgentCtlSpeechInput__ 
type IAgentCtlSpeechInput a = IDispatch (IAgentCtlSpeechInput_ a)
iidIAgentCtlSpeechInput :: IID (IAgentCtlSpeechInput ())
iidIAgentCtlSpeechInput =
  mkIID "{F5BE8BDD-7DE6-11D0-91FE-00C04FD701A5}"

getEnabled2 :: IAgentCtlSpeechInput a0
            -> IO Bool
getEnabled2 =
  propertyGet "Enabled"
              []
              outBool

getLanguage :: IAgentCtlSpeechInput a0
            -> IO String
getLanguage =
  propertyGet "Language"
              []
              outString

getHotKey :: IAgentCtlSpeechInput a0
          -> IO String
getHotKey =
  propertyGet "HotKey"
              []
              outString

getInstalled :: IAgentCtlSpeechInput a0
             -> IO Bool
getInstalled =
  propertyGet "Installed"
              []
              outBool

getEngine :: IAgentCtlSpeechInput a0
          -> IO String
getEngine =
  propertyGet "Engine"
              []
              outString

setEngine :: String
          -> IAgentCtlSpeechInput a0
          -> IO ()
setEngine engine =
  propertySet "Engine"
              [inString engine]

getListeningTip :: IAgentCtlSpeechInput a0
                -> IO Bool
getListeningTip =
  propertyGet "ListeningTip"
              []
              outBool

-- --------------------------------------------------
-- 
-- interface IAgentCtlPropertySheet
-- 
-- --------------------------------------------------
data IAgentCtlPropertySheet_ a = IAgentCtlPropertySheet__ 
type IAgentCtlPropertySheet a = IDispatch (IAgentCtlPropertySheet_ a)
iidIAgentCtlPropertySheet :: IID (IAgentCtlPropertySheet ())
iidIAgentCtlPropertySheet =
  mkIID "{F5BE8BDF-7DE6-11D0-91FE-00C04FD701A5}"

getLeft0 :: IAgentCtlPropertySheet a0
         -> IO Int16
getLeft0 =
  propertyGet "Left"
              []
              outInt16

getTop0 :: IAgentCtlPropertySheet a0
        -> IO Int16
getTop0 =
  propertyGet "Top"
              []
              outInt16

getHeight0 :: IAgentCtlPropertySheet a0
           -> IO Int16
getHeight0 =
  propertyGet "Height"
              []
              outInt16

getWidth0 :: IAgentCtlPropertySheet a0
          -> IO Int16
getWidth0 =
  propertyGet "Width"
              []
              outInt16

setVisible2 :: Bool
            -> IAgentCtlPropertySheet a0
            -> IO ()
setVisible2 visible =
  propertySet "Visible"
              [inBool visible]

getVisible3 :: IAgentCtlPropertySheet a0
            -> IO Bool
getVisible3 =
  propertyGet "Visible"
              []
              outBool

setPage :: String
        -> IAgentCtlPropertySheet a0
        -> IO ()
setPage page =
  propertySet "Page"
              [inString page]

getPage :: IAgentCtlPropertySheet a0
        -> IO String
getPage =
  propertyGet "Page"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IAgentCtlUserInput
-- 
-- --------------------------------------------------
data IAgentCtlUserInput_ a = IAgentCtlUserInput__ 
type IAgentCtlUserInput a = IDispatch (IAgentCtlUserInput_ a)
iidIAgentCtlUserInput :: IID (IAgentCtlUserInput ())
iidIAgentCtlUserInput =
  mkIID "{C4ABF875-8100-11D0-AC63-00C04FD97575}"

getCount0 :: IAgentCtlUserInput a0
          -> IO Int16
getCount0 =
  propertyGet "Count"
              []
              outInt16

getName0 :: IAgentCtlUserInput a0
         -> IO String
getName0 =
  propertyGet "Name"
              []
              outString

getCharacterID :: IAgentCtlUserInput a0
               -> IO String
getCharacterID =
  propertyGet "CharacterID"
              []
              outString

getConfidence0 :: IAgentCtlUserInput a0
               -> IO Int32
getConfidence0 =
  propertyGet "Confidence"
              []
              outInt32

getVoice1 :: IAgentCtlUserInput a0
          -> IO String
getVoice1 =
  propertyGet "Voice"
              []
              outString

getAlt1Name :: IAgentCtlUserInput a0
            -> IO String
getAlt1Name =
  propertyGet "Alt1Name"
              []
              outString

getAlt1Confidence :: IAgentCtlUserInput a0
                  -> IO Int32
getAlt1Confidence =
  propertyGet "Alt1Confidence"
              []
              outInt32

getAlt1Voice :: IAgentCtlUserInput a0
             -> IO String
getAlt1Voice =
  propertyGet "Alt1Voice"
              []
              outString

getAlt2Name :: IAgentCtlUserInput a0
            -> IO String
getAlt2Name =
  propertyGet "Alt2Name"
              []
              outString

getAlt2Confidence :: IAgentCtlUserInput a0
                  -> IO Int32
getAlt2Confidence =
  propertyGet "Alt2Confidence"
              []
              outInt32

getAlt2Voice :: IAgentCtlUserInput a0
             -> IO String
getAlt2Voice =
  propertyGet "Alt2Voice"
              []
              outString

-- --------------------------------------------------
-- 
-- interface IAgentCtlCommandsWindow
-- 
-- --------------------------------------------------
data IAgentCtlCommandsWindow_ a = IAgentCtlCommandsWindow__ 
type IAgentCtlCommandsWindow a = IDispatch (IAgentCtlCommandsWindow_ a)
iidIAgentCtlCommandsWindow :: IID (IAgentCtlCommandsWindow ())
iidIAgentCtlCommandsWindow =
  mkIID "{6D0ECB27-9968-11D0-AC6E-00C04FD97575}"

getVisible4 :: IAgentCtlCommandsWindow a0
            -> IO Bool
getVisible4 =
  propertyGet "Visible"
              []
              outBool

setVisible3 :: Bool
            -> IAgentCtlCommandsWindow a0
            -> IO ()
setVisible3 visible =
  propertySet "Visible"
              [inBool visible]

getLeft1 :: IAgentCtlCommandsWindow a0
         -> IO Int16
getLeft1 =
  propertyGet "Left"
              []
              outInt16

getTop1 :: IAgentCtlCommandsWindow a0
        -> IO Int16
getTop1 =
  propertyGet "Top"
              []
              outInt16

getHeight1 :: IAgentCtlCommandsWindow a0
           -> IO Int16
getHeight1 =
  propertyGet "Height"
              []
              outInt16

getWidth1 :: IAgentCtlCommandsWindow a0
          -> IO Int16
getWidth1 =
  propertyGet "Width"
              []
              outInt16

-- --------------------------------------------------
-- 
-- dispinterface _AgentEvents
-- 
-- --------------------------------------------------
data AgentEvents_ a = AgentEvents__ 
type AgentEvents a = IDispatch (AgentEvents_ a)
iidAgentEvents :: IID (AgentEvents ())
iidAgentEvents = mkIID "{F5BE8BD4-7DE6-11D0-91FE-00C04FD701A5}"

mkAgentEvents_vtbl :: (String -> objState -> IO ())
                   -> (String -> objState -> IO ())
                   -> (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
                   -> (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
                   -> (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
                   -> (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
                   -> (String -> Int16 -> objState -> IO ())
                   -> (String -> Int16 -> objState -> IO ())
                   -> (IDispatch a0 -> objState -> IO ())
                   -> (IDispatch a0 -> objState -> IO ())
                   -> (objState -> IO ())
                   -> (objState -> IO ())
                   -> (Int32 -> objState -> IO ())
                   -> (IDispatch a0 -> objState -> IO ())
                   -> (String -> objState -> IO ())
                   -> (String -> objState -> IO ())
                   -> (String -> Int16 -> Int16 -> Int16 -> objState -> IO ())
                   -> (String -> Int16 -> Int16 -> objState -> IO ())
                   -> (String -> objState -> IO ())
                   -> (String -> objState -> IO ())
                   -> IO (ComVTable (AgentEvents ()) objState)
mkAgentEvents_vtbl activateInput deactivateInput click dblClick dragStart dragComplete show0 hide0 requestStart requestComplete restart shutdown bookmark command0 idleStart idleComplete move size balloonShow balloonHide =
  let
   meth_arg0 = mkDispMethod "ActivateInput" 0x1 (prim_activateInput activateInput)
   meth_arg1 = mkDispMethod "DeactivateInput" 0x3 (prim_deactivateInput deactivateInput)
   meth_arg2 = mkDispMethod "Click" 0x2 (prim_click click)
   meth_arg3 = mkDispMethod "DblClick" 0x4 (prim_dblClick dblClick)
   meth_arg4 = mkDispMethod "DragStart" 0x5 (prim_dragStart dragStart)
   meth_arg5 = mkDispMethod "DragComplete" 0x6 (prim_dragComplete dragComplete)
   meth_arg6 = mkDispMethod "Show" 0xf (prim_show0 show0)
   meth_arg7 = mkDispMethod "Hide" 0x7 (prim_hide0 hide0)
   meth_arg8 = mkDispMethod "RequestStart" 0x9 (prim_requestStart requestStart)
   meth_arg9 = mkDispMethod "RequestComplete" 0xb (prim_requestComplete requestComplete)
   meth_arg10 = mkDispMethod "Restart" 0x15 (prim_restart restart)
   meth_arg11 = mkDispMethod "Shutdown" 0xc (prim_shutdown shutdown)
   meth_arg12 = mkDispMethod "Bookmark" 0x10 (prim_bookmark bookmark)
   meth_arg13 = mkDispMethod "Command" 0x11 (prim_command0 command0)
   meth_arg14 = mkDispMethod "IdleStart" 0x13 (prim_idleStart idleStart)
   meth_arg15 = mkDispMethod "IdleComplete" 0x14 (prim_idleComplete idleComplete)
   meth_arg16 = mkDispMethod "Move" 0x16 (prim_move move)
   meth_arg17 = mkDispMethod "Size" 0x17 (prim_size size)
   meth_arg18 = mkDispMethod "BalloonShow" 0x18 (prim_balloonShow balloonShow)
   meth_arg19 = mkDispMethod "BalloonHide" 0x19 (prim_balloonHide balloonHide)
  in
  createStdDispatchVTBL2 [ meth_arg0
                         , meth_arg1
                         , meth_arg2
                         , meth_arg3
                         , meth_arg4
                         , meth_arg5
                         , meth_arg6
                         , meth_arg7
                         , meth_arg8
                         , meth_arg9
                         , meth_arg10
                         , meth_arg11
                         , meth_arg12
                         , meth_arg13
                         , meth_arg14
                         , meth_arg15
                         , meth_arg16
                         , meth_arg17
                         , meth_arg18
                         , meth_arg19
                         ]

prim_activateInput :: (String -> objState -> IO ())
                   -> [VARIANT]
                   -> objState
                   -> IO (Maybe VARIANT)
prim_activateInput activateInput_meth =
  inArg $ \ characterID ->
  apply_0 (activateInput_meth characterID)

prim_deactivateInput :: (String -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_deactivateInput deactivateInput_meth =
  inArg $ \ characterID ->
  apply_0 (deactivateInput_meth characterID)

prim_click :: (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_click click_meth =
  inArg $ \ characterID ->
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (click_meth characterID button shift x y)

prim_dblClick :: (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_dblClick dblClick_meth =
  inArg $ \ characterID ->
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (dblClick_meth characterID button shift x y)

prim_dragStart :: (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_dragStart dragStart_meth =
  inArg $ \ characterID ->
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (dragStart_meth characterID button shift x y)

prim_dragComplete :: (String -> Int16 -> Int16 -> Int16 -> Int16 -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_dragComplete dragComplete_meth =
  inArg $ \ characterID ->
  inArg $ \ button ->
  inArg $ \ shift ->
  inArg $ \ x ->
  inArg $ \ y ->
  apply_0 (dragComplete_meth characterID button shift x y)

prim_show0 :: (String -> Int16 -> objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_show0 show0_meth =
  inArg $ \ characterID ->
  inArg $ \ cause ->
  apply_0 (show0_meth characterID cause)

prim_hide0 :: (String -> Int16 -> objState -> IO ())
           -> [VARIANT]
           -> objState
           -> IO (Maybe VARIANT)
prim_hide0 hide0_meth =
  inArg $ \ characterID ->
  inArg $ \ cause ->
  apply_0 (hide0_meth characterID cause)

prim_requestStart :: (IDispatch a0 -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_requestStart requestStart_meth =
  inArg $ \ request ->
  apply_0 (requestStart_meth request)

prim_requestComplete :: (IDispatch a0 -> objState -> IO ())
                     -> [VARIANT]
                     -> objState
                     -> IO (Maybe VARIANT)
prim_requestComplete requestComplete_meth =
  inArg $ \ request ->
  apply_0 (requestComplete_meth request)

prim_restart :: (objState -> IO ())
             -> [VARIANT]
             -> objState
             -> IO (Maybe VARIANT)
prim_restart restart_meth = apply_0 (restart_meth)

prim_shutdown :: (objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_shutdown shutdown_meth = apply_0 (shutdown_meth)

prim_bookmark :: (Int32 -> objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_bookmark bookmark_meth =
  inArg $ \ bookmarkID ->
  apply_0 (bookmark_meth bookmarkID)

prim_command0 :: (IDispatch a0 -> objState -> IO ())
              -> [VARIANT]
              -> objState
              -> IO (Maybe VARIANT)
prim_command0 command0_meth =
  inArg $ \ userInput ->
  apply_0 (command0_meth userInput)

prim_idleStart :: (String -> objState -> IO ())
               -> [VARIANT]
               -> objState
               -> IO (Maybe VARIANT)
prim_idleStart idleStart_meth =
  inArg $ \ characterID ->
  apply_0 (idleStart_meth characterID)

prim_idleComplete :: (String -> objState -> IO ())
                  -> [VARIANT]
                  -> objState
                  -> IO (Maybe VARIANT)
prim_idleComplete idleComplete_meth =
  inArg $ \ characterID ->
  apply_0 (idleComplete_meth characterID)

prim_move :: (String -> Int16 -> Int16 -> Int16 -> objState -> IO ())
          -> [VARIANT]
          -> objState
          -> IO (Maybe VARIANT)
prim_move move_meth =
  inArg $ \ characterID ->
  inArg $ \ x ->
  inArg $ \ y ->
  inArg $ \ cause ->
  apply_0 (move_meth characterID x y cause)

prim_size :: (String -> Int16 -> Int16 -> objState -> IO ())
          -> [VARIANT]
          -> objState
          -> IO (Maybe VARIANT)
prim_size size_meth =
  inArg $ \ characterID ->
  inArg $ \ width ->
  inArg $ \ height ->
  apply_0 (size_meth characterID width height)

prim_balloonShow :: (String -> objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_balloonShow balloonShow_meth =
  inArg $ \ characterID ->
  apply_0 (balloonShow_meth characterID)

prim_balloonHide :: (String -> objState -> IO ())
                 -> [VARIANT]
                 -> objState
                 -> IO (Maybe VARIANT)
prim_balloonHide balloonHide_meth =
  inArg $ \ characterID ->
  apply_0 (balloonHide_meth characterID)

-- --------------------------------------------------
-- 
-- coclass Agent
-- 
--   implements: IAgentCtl , [source]_AgentEvents
-- --------------------------------------------------
clsidAgent :: CLSID
clsidAgent = mkCLSID "{F5BE8BD2-7DE6-11D0-91FE-00C04FD701A5}"

-- --------------------------------------------------
-- 
-- interface IAgentCtl
-- 
-- --------------------------------------------------
data IAgentCtl_ a = IAgentCtl__ 
type IAgentCtl a = IDispatch (IAgentCtl_ a)
iidIAgentCtl :: IID (IAgentCtl ())
iidIAgentCtl = mkIID "{F5BE8BD1-7DE6-11D0-91FE-00C04FD701A5}"

getCharacters :: IAgentCtl a0
              -> IO (IAgentCtlCharacters ())
getCharacters =
  propertyGet "Characters"
              []
              outIDispatch

getAudioOutput :: IAgentCtl a0
               -> IO (IAgentCtlAudioObject ())
getAudioOutput =
  propertyGet "AudioOutput"
              []
              outIDispatch

getSpeechInput :: IAgentCtl a0
               -> IO (IAgentCtlSpeechInput ())
getSpeechInput =
  propertyGet "SpeechInput"
              []
              outIDispatch

getPropertySheet :: IAgentCtl a0
                 -> IO (IAgentCtlPropertySheet ())
getPropertySheet =
  propertyGet "PropertySheet"
              []
              outIDispatch

getCommandsWindow :: IAgentCtl a0
                  -> IO (IAgentCtlCommandsWindow ())
getCommandsWindow =
  propertyGet "CommandsWindow"
              []
              outIDispatch

getConnected :: IAgentCtl a0
             -> IO Bool
getConnected =
  propertyGet "Connected"
              []
              outBool

setConnected :: Bool
             -> IAgentCtl a0
             -> IO ()
setConnected connected =
  propertySet "Connected"
              [inBool connected]

getSuspended :: IAgentCtl a0
             -> IO Bool
getSuspended =
  propertyGet "Suspended"
              []
              outBool


